
ZegarDuzy23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800c484  0800c484  0000d484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5ec  0800c5ec  0000e0a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5ec  0800c5ec  0000d5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5f4  0800c5f4  0000e0a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5f4  0800c5f4  0000d5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5f8  0800c5f8  0000d5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  0800c5fc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b70  200000a4  0800c6a0  0000e0a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c14  0800c6a0  0000ec14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bdb4  00000000  00000000  0000e0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000473f  00000000  00000000  00029e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  0002e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012e1  00000000  00000000  0002fe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb99  00000000  00000000  000310e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002292c  00000000  00000000  0004dc7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5a72  00000000  00000000  000705a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116018  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a2c  00000000  00000000  0011605c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0011ca88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c46c 	.word	0x0800c46c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	0800c46c 	.word	0x0800c46c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <MX_ADC1_Init+0x9c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_ADC1_Init+0x98>)
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058e:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000594:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059a:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <MX_ADC1_Init+0x98>)
 800059c:	2200      	movs	r2, #0
 800059e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a0:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a8:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ae:	4b16      	ldr	r3, [pc, #88]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b0:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <MX_ADC1_Init+0xa0>)
 80005b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b4:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ba:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005bc:	2201      	movs	r2, #1
 80005be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ce:	480e      	ldr	r0, [pc, #56]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005d0:	f004 f964 	bl	800489c <HAL_ADC_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005da:	f001 ffb1 	bl	8002540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005de:	2303      	movs	r3, #3
 80005e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005f0:	f004 fa4c 	bl	8004a8c <HAL_ADC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80005fa:	f001 ffa1 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200000c0 	.word	0x200000c0
 800060c:	40012000 	.word	0x40012000
 8000610:	0f000001 	.word	0x0f000001

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a17      	ldr	r2, [pc, #92]	@ (8000690 <HAL_ADC_MspInit+0x7c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d127      	bne.n	8000686 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <HAL_ADC_MspInit+0x80>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063e:	4a15      	ldr	r2, [pc, #84]	@ (8000694 <HAL_ADC_MspInit+0x80>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000644:	6453      	str	r3, [r2, #68]	@ 0x44
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <HAL_ADC_MspInit+0x80>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <HAL_ADC_MspInit+0x80>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a0e      	ldr	r2, [pc, #56]	@ (8000694 <HAL_ADC_MspInit+0x80>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <HAL_ADC_MspInit+0x80>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800066e:	2308      	movs	r3, #8
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <HAL_ADC_MspInit+0x84>)
 8000682:	f005 f8df 	bl	8005844 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000686:	bf00      	nop
 8000688:	3728      	adds	r7, #40	@ 0x28
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40012000 	.word	0x40012000
 8000694:	40023800 	.word	0x40023800
 8000698:	40020000 	.word	0x40020000

0800069c <Encoder_RegisterRotateCallback>:
volatile uint8_t counter=0;

static EncoderRotateCallback_t s_encoderCb = NULL;

void Encoder_RegisterRotateCallback(EncoderRotateCallback_t cb)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
    s_encoderCb = cb;
 80006a4:	4a04      	ldr	r2, [pc, #16]	@ (80006b8 <Encoder_RegisterRotateCallback+0x1c>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6013      	str	r3, [r2, #0]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	2000010c 	.word	0x2000010c

080006bc <Button_RegisterPressCallback>:
		0, 0, 0, false, 0, 0, false, NULL, NULL, NULL, NULL, NULL } //,
		//{BUTTON2_PORT, BUTTON2_PIN, BUTTON_RELEASED, 0, 0, 0, false, 0, 0, false, NULL, NULL, NULL, NULL, NULL}
};

// Implementacja funkcji rejestrujących callbacky
void Button_RegisterPressCallback(uint8_t buttonIndex, ButtonCallback cb) {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	6039      	str	r1, [r7, #0]
 80006c6:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d109      	bne.n	80006e2 <Button_RegisterPressCallback+0x26>
		buttons[buttonIndex].onPress = cb;
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	4907      	ldr	r1, [pc, #28]	@ (80006f0 <Button_RegisterPressCallback+0x34>)
 80006d2:	4613      	mov	r3, r2
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	4413      	add	r3, r2
 80006d8:	011b      	lsls	r3, r3, #4
 80006da:	440b      	add	r3, r1
 80006dc:	331c      	adds	r3, #28
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	601a      	str	r2, [r3, #0]
	}
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000000 	.word	0x20000000

080006f4 <Button_RegisterHoldCallback>:
	if (buttonIndex < NUM_BUTTONS) {
		buttons[buttonIndex].onRelease = cb;
	}
}

void Button_RegisterHoldCallback(uint8_t buttonIndex, ButtonCallback cb) {
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d109      	bne.n	800071a <Button_RegisterHoldCallback+0x26>
		buttons[buttonIndex].onHold = cb;
 8000706:	79fa      	ldrb	r2, [r7, #7]
 8000708:	4907      	ldr	r1, [pc, #28]	@ (8000728 <Button_RegisterHoldCallback+0x34>)
 800070a:	4613      	mov	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	011b      	lsls	r3, r3, #4
 8000712:	440b      	add	r3, r1
 8000714:	3324      	adds	r3, #36	@ 0x24
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	601a      	str	r2, [r3, #0]
	}
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <Button_RegisterDoubleClickCallback>:
	if (buttonIndex < NUM_BUTTONS) {
		buttons[buttonIndex].onRepeat = cb;
	}
}

void Button_RegisterDoubleClickCallback(uint8_t buttonIndex, ButtonCallback cb) {
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d109      	bne.n	8000752 <Button_RegisterDoubleClickCallback+0x26>
		buttons[buttonIndex].onDoubleClick = cb;
 800073e:	79fa      	ldrb	r2, [r7, #7]
 8000740:	4907      	ldr	r1, [pc, #28]	@ (8000760 <Button_RegisterDoubleClickCallback+0x34>)
 8000742:	4613      	mov	r3, r2
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	4413      	add	r3, r2
 8000748:	011b      	lsls	r3, r3, #4
 800074a:	440b      	add	r3, r1
 800074c:	332c      	adds	r3, #44	@ 0x2c
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	601a      	str	r2, [r3, #0]
	}
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20000000 	.word	0x20000000

08000764 <Button_Process>:

// Logika w przerwaniu timera
extern volatile uint32_t systemTicks;  // Globalny licznik taktów czasu

void Button_Process(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_BUTTONS; i++) {
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	e0e7      	b.n	8000940 <Button_Process+0x1dc>
        Button_t *btn = &buttons[i];
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	4613      	mov	r3, r2
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4413      	add	r3, r2
 8000778:	011b      	lsls	r3, r3, #4
 800077a:	4a76      	ldr	r2, [pc, #472]	@ (8000954 <Button_Process+0x1f0>)
 800077c:	4413      	add	r3, r2
 800077e:	60bb      	str	r3, [r7, #8]

        // Odczytaj aktualny stan przycisku
        bool rawState = (HAL_GPIO_ReadPin(btn->port, btn->pin) == GPIO_PIN_RESET);
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	889b      	ldrh	r3, [r3, #4]
 8000788:	4619      	mov	r1, r3
 800078a:	4610      	mov	r0, r2
 800078c:	f005 f9de 	bl	8005b4c <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	bf0c      	ite	eq
 8000796:	2301      	moveq	r3, #1
 8000798:	2300      	movne	r3, #0
 800079a:	71fb      	strb	r3, [r7, #7]

        // Debounce
        if (rawState != (btn->state == BUTTON_PRESSED)) {
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	7992      	ldrb	r2, [r2, #6]
 80007a2:	2a01      	cmp	r2, #1
 80007a4:	bf0c      	ite	eq
 80007a6:	2201      	moveq	r2, #1
 80007a8:	2200      	movne	r2, #0
 80007aa:	b2d2      	uxtb	r2, r2
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d05d      	beq.n	800086c <Button_Process+0x108>
            btn->debounceCounter++;
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	79db      	ldrb	r3, [r3, #7]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	71da      	strb	r2, [r3, #7]
            if (btn->debounceCounter >= DEBOUNCE_TICKS) {
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	79db      	ldrb	r3, [r3, #7]
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	d956      	bls.n	8000872 <Button_Process+0x10e>
                btn->debounceCounter = 0;
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	2200      	movs	r2, #0
 80007c8:	71da      	strb	r2, [r3, #7]
                if (rawState) {
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00a      	beq.n	80007e6 <Button_Process+0x82>
                    // Naciśnięcie
                    btn->state = BUTTON_PRESSED;
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	2201      	movs	r2, #1
 80007d4:	719a      	strb	r2, [r3, #6]
                    btn->pressTime = systemTicks;
 80007d6:	4b60      	ldr	r3, [pc, #384]	@ (8000958 <Button_Process+0x1f4>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	609a      	str	r2, [r3, #8]
                    btn->holdTriggered = false;
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	2200      	movs	r2, #0
 80007e2:	741a      	strb	r2, [r3, #16]
 80007e4:	e045      	b.n	8000872 <Button_Process+0x10e>
                } else {
                    // Puszczenie
                    btn->state = BUTTON_RELEASED;
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	2200      	movs	r2, #0
 80007ea:	719a      	strb	r2, [r3, #6]

                    // Obsługa kliknięć (tylko jeśli nie było hold)
                    if (!btn->holdTriggered) {
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	7c1b      	ldrb	r3, [r3, #16]
 80007f0:	f083 0301 	eor.w	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d030      	beq.n	800085c <Button_Process+0xf8>
                        if (btn->waitingForDoubleClick) {
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	7e1b      	ldrb	r3, [r3, #24]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d011      	beq.n	8000826 <Button_Process+0xc2>
                            if ((systemTicks - btn->lastClickTime) <= DOUBLE_CLICK_THRESHOLD) {
 8000802:	4b55      	ldr	r3, [pc, #340]	@ (8000958 <Button_Process+0x1f4>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	2b1e      	cmp	r3, #30
 800080e:	d806      	bhi.n	800081e <Button_Process+0xba>
                                btn->clickCount++;
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	7c5b      	ldrb	r3, [r3, #17]
 8000814:	3301      	adds	r3, #1
 8000816:	b2da      	uxtb	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	745a      	strb	r2, [r3, #17]
 800081c:	e00d      	b.n	800083a <Button_Process+0xd6>
                            } else {
                                // Minął czas na dwuklik
                                btn->clickCount = 1;
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	2201      	movs	r2, #1
 8000822:	745a      	strb	r2, [r3, #17]
 8000824:	e009      	b.n	800083a <Button_Process+0xd6>
                            }
                        } else {
                            btn->clickCount = 1;
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	2201      	movs	r2, #1
 800082a:	745a      	strb	r2, [r3, #17]
                            btn->waitingForDoubleClick = true;
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	2201      	movs	r2, #1
 8000830:	761a      	strb	r2, [r3, #24]
                            btn->lastClickTime = systemTicks;
 8000832:	4b49      	ldr	r3, [pc, #292]	@ (8000958 <Button_Process+0x1f4>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	615a      	str	r2, [r3, #20]
                        }

                        if (btn->clickCount == 2) {
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	7c5b      	ldrb	r3, [r3, #17]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d10c      	bne.n	800085c <Button_Process+0xf8>
                            // Dwuklik
                            btn->waitingForDoubleClick = false;
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	2200      	movs	r2, #0
 8000846:	761a      	strb	r2, [r3, #24]
                            btn->clickCount = 0;
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	2200      	movs	r2, #0
 800084c:	745a      	strb	r2, [r3, #17]
                            if (btn->onDoubleClick) {
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <Button_Process+0xf8>
                                btn->onDoubleClick();
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800085a:	4798      	blx	r3
                            }
                        }
                    }

                    // Callback onRelease
                    if (btn->onRelease)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	6a1b      	ldr	r3, [r3, #32]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d006      	beq.n	8000872 <Button_Process+0x10e>
                        btn->onRelease();
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	6a1b      	ldr	r3, [r3, #32]
 8000868:	4798      	blx	r3
 800086a:	e002      	b.n	8000872 <Button_Process+0x10e>
                }
            }
        } else {
            btn->debounceCounter = 0;
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	2200      	movs	r2, #0
 8000870:	71da      	strb	r2, [r3, #7]
        }

        // Obsługa timeoutu dwukliku
        if (btn->waitingForDoubleClick
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	7e1b      	ldrb	r3, [r3, #24]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d01e      	beq.n	80008b8 <Button_Process+0x154>
            && ((systemTicks - btn->lastClickTime) > DOUBLE_CLICK_THRESHOLD)) {
 800087a:	4b37      	ldr	r3, [pc, #220]	@ (8000958 <Button_Process+0x1f4>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	2b1e      	cmp	r3, #30
 8000886:	d917      	bls.n	80008b8 <Button_Process+0x154>
            if (btn->clickCount == 1) {
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	7c5b      	ldrb	r3, [r3, #17]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d10d      	bne.n	80008ac <Button_Process+0x148>
                // Pojedynczy klik
                // warunek: jeżeli NIE było hold
                if (!btn->holdTriggered && btn->onPress) {
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	7c1b      	ldrb	r3, [r3, #16]
 8000894:	f083 0301 	eor.w	r3, r3, #1
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d006      	beq.n	80008ac <Button_Process+0x148>
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <Button_Process+0x148>
                    btn->onPress();
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	4798      	blx	r3
                }
            }
            btn->waitingForDoubleClick = false;
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	2200      	movs	r2, #0
 80008b0:	761a      	strb	r2, [r3, #24]
            btn->clickCount = 0;
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	2200      	movs	r2, #0
 80008b6:	745a      	strb	r2, [r3, #17]
        }

        // Obsługa hold i repeat
        if (btn->state == BUTTON_PRESSED) {
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	799b      	ldrb	r3, [r3, #6]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d13c      	bne.n	800093a <Button_Process+0x1d6>
            uint32_t elapsed = systemTicks - btn->pressTime;
 80008c0:	4b25      	ldr	r3, [pc, #148]	@ (8000958 <Button_Process+0x1f4>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	603b      	str	r3, [r7, #0]
            if (!btn->holdTriggered && (elapsed >= HOLD_THRESHOLD)) {
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	7c1b      	ldrb	r3, [r3, #16]
 80008d0:	f083 0301 	eor.w	r3, r3, #1
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d018      	beq.n	800090c <Button_Process+0x1a8>
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	2b63      	cmp	r3, #99	@ 0x63
 80008de:	d915      	bls.n	800090c <Button_Process+0x1a8>
                btn->holdTriggered = true;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	2201      	movs	r2, #1
 80008e4:	741a      	strb	r2, [r3, #16]
                // zerujemy liczniki kliknięć, by nie był liczony single-click
                btn->clickCount = 0;
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	2200      	movs	r2, #0
 80008ea:	745a      	strb	r2, [r3, #17]
                btn->waitingForDoubleClick = false;
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	2200      	movs	r2, #0
 80008f0:	761a      	strb	r2, [r3, #24]

                if (btn->onHold)
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d002      	beq.n	8000900 <Button_Process+0x19c>
                    btn->onHold();
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008fe:	4798      	blx	r3
                btn->nextRepeatTime = systemTicks + REPEAT_INTERVAL;
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <Button_Process+0x1f4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f103 0214 	add.w	r2, r3, #20
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	60da      	str	r2, [r3, #12]
            }
            if (btn->holdTriggered && (systemTicks >= btn->nextRepeatTime)) {
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	7c1b      	ldrb	r3, [r3, #16]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d012      	beq.n	800093a <Button_Process+0x1d6>
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	68da      	ldr	r2, [r3, #12]
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <Button_Process+0x1f4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	429a      	cmp	r2, r3
 800091e:	d80c      	bhi.n	800093a <Button_Process+0x1d6>
                if (btn->onRepeat)
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000924:	2b00      	cmp	r3, #0
 8000926:	d002      	beq.n	800092e <Button_Process+0x1ca>
                    btn->onRepeat();
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800092c:	4798      	blx	r3
                btn->nextRepeatTime += REPEAT_INTERVAL;
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	f103 0214 	add.w	r2, r3, #20
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < NUM_BUTTONS; i++) {
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3301      	adds	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	f77f af14 	ble.w	8000770 <Button_Process+0xc>
            }
        }
    }
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000000 	.word	0x20000000
 8000958:	20000704 	.word	0x20000704

0800095c <HAL_TIM_PeriodElapsedCallback>:

// Funkcja wywoływana w przerwaniu timera
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a23      	ldr	r2, [pc, #140]	@ (80009f8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d108      	bne.n	8000980 <HAL_TIM_PeriodElapsedCallback+0x24>

		SHT30_10msHandler();
 800096e:	f002 f8c7 	bl	8002b00 <SHT30_10msHandler>


		systemTicks++;  // Inkrementacja globalnego licznika czasu
 8000972:	4b22      	ldr	r3, [pc, #136]	@ (80009fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3301      	adds	r3, #1
 8000978:	4a20      	ldr	r2, [pc, #128]	@ (80009fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800097a:	6013      	str	r3, [r2, #0]
		SLIDER_Update();
 800097c:	f002 fca6 	bl	80032cc <SLIDER_Update>
	}
	if (colon == 1) {
 8000980:	4b1f      	ldr	r3, [pc, #124]	@ (8000a00 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b01      	cmp	r3, #1
 8000988:	d112      	bne.n	80009b0 <HAL_TIM_PeriodElapsedCallback+0x54>
	        if (counter > 0) {
 800098a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	d007      	beq.n	80009a4 <HAL_TIM_PeriodElapsedCallback+0x48>
	            counter--; // Odliczanie licznika
 8000994:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	3b01      	subs	r3, #1
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	e005      	b.n	80009b0 <HAL_TIM_PeriodElapsedCallback+0x54>
	        } else {
	            counter = 50; // Reset licznika na 50
 80009a4:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80009a6:	2232      	movs	r2, #50	@ 0x32
 80009a8:	701a      	strb	r2, [r3, #0]
	            colon = 0;    // Ustawienie colon na 0
 80009aa:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
	        }
	    }

static volatile uint16_t cnter = 0 ;
		cnter++;
 80009b0:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	3301      	adds	r3, #1
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009bc:	801a      	strh	r2, [r3, #0]
		if  (cnter>400){
 80009be:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80009c8:	d911      	bls.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x92>
			cnter = 0 ;
 80009ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	801a      	strh	r2, [r3, #0]
			disp_mode++;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	3301      	adds	r3, #1
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80009dc:	701a      	strb	r2, [r3, #0]
			if (disp_mode > 1 )disp_mode = 0;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d902      	bls.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x92>
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
		}
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40000c00 	.word	0x40000c00
 80009fc:	20000704 	.word	0x20000704
 8000a00:	2000012d 	.word	0x2000012d
 8000a04:	20000108 	.word	0x20000108
 8000a08:	20000110 	.word	0x20000110
 8000a0c:	20000746 	.word	0x20000746

08000a10 <Encoder_HandleInterrupt>:

void Encoder_HandleInterrupt(int8_t direction)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
    if (s_encoderCb != NULL) {
 8000a1a:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <Encoder_HandleInterrupt+0x28>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d005      	beq.n	8000a2e <Encoder_HandleInterrupt+0x1e>
        s_encoderCb(direction);
 8000a22:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <Encoder_HandleInterrupt+0x28>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4798      	blx	r3
    }
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000010c 	.word	0x2000010c

08000a3c <charToSegment>:
//static Bits192 regValue;         // Przechowuje 192 bity rozbite na 12×16

// Implementacja tablicy segmentMap i funkcji charToSegment.
// (Zwykle segmentMap mamy w Display.h jako static const,
//  ale jeśli wolisz mieć ją w .c, możesz przenieść tutaj.)
uint8_t charToSegment(char c) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]

    switch (c) {
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	3b2a      	subs	r3, #42	@ 0x2a
 8000a4a:	2b50      	cmp	r3, #80	@ 0x50
 8000a4c:	f200 80dd 	bhi.w	8000c0a <charToSegment+0x1ce>
 8000a50:	a201      	add	r2, pc, #4	@ (adr r2, 8000a58 <charToSegment+0x1c>)
 8000a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a56:	bf00      	nop
 8000a58:	08000bab 	.word	0x08000bab
 8000a5c:	08000c0b 	.word	0x08000c0b
 8000a60:	08000c0b 	.word	0x08000c0b
 8000a64:	08000ba7 	.word	0x08000ba7
 8000a68:	08000c0b 	.word	0x08000c0b
 8000a6c:	08000c0b 	.word	0x08000c0b
 8000a70:	08000b9d 	.word	0x08000b9d
 8000a74:	08000b9d 	.word	0x08000b9d
 8000a78:	08000b9d 	.word	0x08000b9d
 8000a7c:	08000b9d 	.word	0x08000b9d
 8000a80:	08000b9d 	.word	0x08000b9d
 8000a84:	08000b9d 	.word	0x08000b9d
 8000a88:	08000b9d 	.word	0x08000b9d
 8000a8c:	08000b9d 	.word	0x08000b9d
 8000a90:	08000b9d 	.word	0x08000b9d
 8000a94:	08000b9d 	.word	0x08000b9d
 8000a98:	08000c0b 	.word	0x08000c0b
 8000a9c:	08000c0b 	.word	0x08000c0b
 8000aa0:	08000c0b 	.word	0x08000c0b
 8000aa4:	08000c0b 	.word	0x08000c0b
 8000aa8:	08000c0b 	.word	0x08000c0b
 8000aac:	08000c0b 	.word	0x08000c0b
 8000ab0:	08000c0b 	.word	0x08000c0b
 8000ab4:	08000bc7 	.word	0x08000bc7
 8000ab8:	08000bfb 	.word	0x08000bfb
 8000abc:	08000baf 	.word	0x08000baf
 8000ac0:	08000c0b 	.word	0x08000c0b
 8000ac4:	08000bdb 	.word	0x08000bdb
 8000ac8:	08000bc3 	.word	0x08000bc3
 8000acc:	08000c0b 	.word	0x08000c0b
 8000ad0:	08000c03 	.word	0x08000c03
 8000ad4:	08000c0b 	.word	0x08000c0b
 8000ad8:	08000c07 	.word	0x08000c07
 8000adc:	08000c0b 	.word	0x08000c0b
 8000ae0:	08000bf3 	.word	0x08000bf3
 8000ae4:	08000c0b 	.word	0x08000c0b
 8000ae8:	08000bd3 	.word	0x08000bd3
 8000aec:	08000beb 	.word	0x08000beb
 8000af0:	08000be3 	.word	0x08000be3
 8000af4:	08000c0b 	.word	0x08000c0b
 8000af8:	08000bb7 	.word	0x08000bb7
 8000afc:	08000bbf 	.word	0x08000bbf
 8000b00:	08000bcb 	.word	0x08000bcb
 8000b04:	08000bcf 	.word	0x08000bcf
 8000b08:	08000bcf 	.word	0x08000bcf
 8000b0c:	08000bcf 	.word	0x08000bcf
 8000b10:	08000c0b 	.word	0x08000c0b
 8000b14:	08000c0b 	.word	0x08000c0b
 8000b18:	08000bf7 	.word	0x08000bf7
 8000b1c:	08000c0b 	.word	0x08000c0b
 8000b20:	08000c0b 	.word	0x08000c0b
 8000b24:	08000c0b 	.word	0x08000c0b
 8000b28:	08000c0b 	.word	0x08000c0b
 8000b2c:	08000c0b 	.word	0x08000c0b
 8000b30:	08000c0b 	.word	0x08000c0b
 8000b34:	08000bc7 	.word	0x08000bc7
 8000b38:	08000bfb 	.word	0x08000bfb
 8000b3c:	08000bb3 	.word	0x08000bb3
 8000b40:	08000bdf 	.word	0x08000bdf
 8000b44:	08000bdb 	.word	0x08000bdb
 8000b48:	08000c0b 	.word	0x08000c0b
 8000b4c:	08000c0b 	.word	0x08000c0b
 8000b50:	08000bbb 	.word	0x08000bbb
 8000b54:	08000bd7 	.word	0x08000bd7
 8000b58:	08000c07 	.word	0x08000c07
 8000b5c:	08000c0b 	.word	0x08000c0b
 8000b60:	08000c0b 	.word	0x08000c0b
 8000b64:	08000c0b 	.word	0x08000c0b
 8000b68:	08000bd3 	.word	0x08000bd3
 8000b6c:	08000be7 	.word	0x08000be7
 8000b70:	08000be3 	.word	0x08000be3
 8000b74:	08000c0b 	.word	0x08000c0b
 8000b78:	08000bb7 	.word	0x08000bb7
 8000b7c:	08000bbf 	.word	0x08000bbf
 8000b80:	08000bcb 	.word	0x08000bcb
 8000b84:	08000bef 	.word	0x08000bef
 8000b88:	08000bef 	.word	0x08000bef
 8000b8c:	08000bef 	.word	0x08000bef
 8000b90:	08000c0b 	.word	0x08000c0b
 8000b94:	08000bff 	.word	0x08000bff
 8000b98:	08000bf7 	.word	0x08000bf7
    case '0' ... '9':
        return segmentMap[c - '0'];
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	3b30      	subs	r3, #48	@ 0x30
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c18 <charToSegment+0x1dc>)
 8000ba2:	5cd3      	ldrb	r3, [r2, r3]
 8000ba4:	e032      	b.n	8000c0c <charToSegment+0x1d0>
    case '-':
        return segmentMap[11];
 8000ba6:	2340      	movs	r3, #64	@ 0x40
 8000ba8:	e030      	b.n	8000c0c <charToSegment+0x1d0>
    case '*':// symbol  stopnia
        return segmentMap[12];
 8000baa:	2363      	movs	r3, #99	@ 0x63
 8000bac:	e02e      	b.n	8000c0c <charToSegment+0x1d0>
    case 'C':
        return segmentMap[13];
 8000bae:	2339      	movs	r3, #57	@ 0x39
 8000bb0:	e02c      	b.n	8000c0c <charToSegment+0x1d0>
    case 'c':
        return segmentMap[29];
 8000bb2:	236e      	movs	r3, #110	@ 0x6e
 8000bb4:	e02a      	b.n	8000c0c <charToSegment+0x1d0>
    case 'r':
    case 'R':
        return segmentMap[14];
 8000bb6:	2350      	movs	r3, #80	@ 0x50
 8000bb8:	e028      	b.n	8000c0c <charToSegment+0x1d0>
    case 'h':
        return segmentMap[15];
 8000bba:	2374      	movs	r3, #116	@ 0x74
 8000bbc:	e026      	b.n	8000c0c <charToSegment+0x1d0>
    case 's':
    case 'S':
        return segmentMap[5];
 8000bbe:	236d      	movs	r3, #109	@ 0x6d
 8000bc0:	e024      	b.n	8000c0c <charToSegment+0x1d0>
    case 'F':
        return segmentMap[16];
 8000bc2:	2371      	movs	r3, #113	@ 0x71
 8000bc4:	e022      	b.n	8000c0c <charToSegment+0x1d0>
    case 'A':
    case 'a':
        return segmentMap[17];
 8000bc6:	2377      	movs	r3, #119	@ 0x77
 8000bc8:	e020      	b.n	8000c0c <charToSegment+0x1d0>
    case 't':
    case 'T':
        return segmentMap[18];
 8000bca:	2378      	movs	r3, #120	@ 0x78
 8000bcc:	e01e      	b.n	8000c0c <charToSegment+0x1d0>
    case 'V':
    case 'U':
    case 'W':
        return segmentMap[19];
 8000bce:	233e      	movs	r3, #62	@ 0x3e
 8000bd0:	e01c      	b.n	8000c0c <charToSegment+0x1d0>
    case 'n':
    case 'N':
        return segmentMap[20];
 8000bd2:	2354      	movs	r3, #84	@ 0x54
 8000bd4:	e01a      	b.n	8000c0c <charToSegment+0x1d0>
    case 'i':
        return segmentMap[21];
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	e018      	b.n	8000c0c <charToSegment+0x1d0>
    case 'E':
    case 'e':
        return segmentMap[22];
 8000bda:	2379      	movs	r3, #121	@ 0x79
 8000bdc:	e016      	b.n	8000c0c <charToSegment+0x1d0>
    case 'd':
        return segmentMap[23];
 8000bde:	235e      	movs	r3, #94	@ 0x5e
 8000be0:	e014      	b.n	8000c0c <charToSegment+0x1d0>
    case 'P':
    case 'p':
        return segmentMap[24];
 8000be2:	2373      	movs	r3, #115	@ 0x73
 8000be4:	e012      	b.n	8000c0c <charToSegment+0x1d0>
    case 'o':
        return segmentMap[25];
 8000be6:	235c      	movs	r3, #92	@ 0x5c
 8000be8:	e010      	b.n	8000c0c <charToSegment+0x1d0>
    case 'O':
        return segmentMap[0];
 8000bea:	233f      	movs	r3, #63	@ 0x3f
 8000bec:	e00e      	b.n	8000c0c <charToSegment+0x1d0>
    case 'u':
    case 'w':
    case 'v':
        return segmentMap[26];
 8000bee:	231c      	movs	r3, #28
 8000bf0:	e00c      	b.n	8000c0c <charToSegment+0x1d0>
    case 'L':
        return segmentMap[27];
 8000bf2:	2338      	movs	r3, #56	@ 0x38
 8000bf4:	e00a      	b.n	8000c0c <charToSegment+0x1d0>
    case 'z':
    case 'Z':
        return segmentMap[2];
 8000bf6:	235b      	movs	r3, #91	@ 0x5b
 8000bf8:	e008      	b.n	8000c0c <charToSegment+0x1d0>
    case 'b':
    case 'B':
        return segmentMap[28];
 8000bfa:	237c      	movs	r3, #124	@ 0x7c
 8000bfc:	e006      	b.n	8000c0c <charToSegment+0x1d0>
    case 'y':
            return segmentMap[29];
 8000bfe:	236e      	movs	r3, #110	@ 0x6e
 8000c00:	e004      	b.n	8000c0c <charToSegment+0x1d0>
    case 'H':
            return segmentMap[30];
 8000c02:	2376      	movs	r3, #118	@ 0x76
 8000c04:	e002      	b.n	8000c0c <charToSegment+0x1d0>
    case 'j':
    case 'J':
                   return segmentMap[31];
 8000c06:	231e      	movs	r3, #30
 8000c08:	e000      	b.n	8000c0c <charToSegment+0x1d0>
    default:
        // spacja lub nieobsługiwany znak
        return segmentMap[10];
 8000c0a:	2300      	movs	r3, #0
    }
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	0800c4ec 	.word	0x0800c4ec

08000c1c <HAL_SPI_TxCpltCallback>:
 * ---------------------------------------------------------------------------
 * Implementacja funkcji obsługujących 192-bitowy rejestr wyświetlaczy
 * ---------------------------------------------------------------------------
 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if(hspi->Instance == SPI1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a09      	ldr	r2, [pc, #36]	@ (8000c50 <HAL_SPI_TxCpltCallback+0x34>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d10c      	bne.n	8000c48 <HAL_SPI_TxCpltCallback+0x2c>
  {
    // Krótki impuls na pin LATCH
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2140      	movs	r1, #64	@ 0x40
 8000c32:	4808      	ldr	r0, [pc, #32]	@ (8000c54 <HAL_SPI_TxCpltCallback+0x38>)
 8000c34:	f004 ffa2 	bl	8005b7c <HAL_GPIO_WritePin>
    // Ewentualnie opóźnienie
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2140      	movs	r1, #64	@ 0x40
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <HAL_SPI_TxCpltCallback+0x38>)
 8000c3e:	f004 ff9d 	bl	8005b7c <HAL_GPIO_WritePin>
    spiTransferInProgress = false;  // Zakończono transmisję
 8000c42:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <HAL_SPI_TxCpltCallback+0x3c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
  }

}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40013000 	.word	0x40013000
 8000c54:	40020000 	.word	0x40020000
 8000c58:	20000112 	.word	0x20000112

08000c5c <ClearClockBits>:
  HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 24);
}


void ClearClockBits(MyClockBitFields* clockBits)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  memset(clockBits, 0, sizeof(MyClockBitFields));
 8000c64:	2218      	movs	r2, #24
 8000c66:	2100      	movs	r1, #0
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f00a ff59 	bl	800bb20 <memset>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <SetSecondLedSingle>:

void SetSecondLedSingle(MyClockBitFields* clockBits, uint8_t second)
{
 8000c76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c78:	b085      	sub	sp, #20
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 8000c80:	78f9      	ldrb	r1, [r7, #3]
 8000c82:	293b      	cmp	r1, #59	@ 0x3b
 8000c84:	d901      	bls.n	8000c8a <SetSecondLedSingle+0x14>
 8000c86:	213b      	movs	r1, #59	@ 0x3b
 8000c88:	70f9      	strb	r1, [r7, #3]

    clockBits->secondsRing = 0ULL;
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	7008      	strb	r0, [r1, #0]
 8000c90:	2000      	movs	r0, #0
 8000c92:	7048      	strb	r0, [r1, #1]
 8000c94:	2000      	movs	r0, #0
 8000c96:	7088      	strb	r0, [r1, #2]
 8000c98:	2000      	movs	r0, #0
 8000c9a:	70c8      	strb	r0, [r1, #3]
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	7108      	strb	r0, [r1, #4]
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	7148      	strb	r0, [r1, #5]
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	7188      	strb	r0, [r1, #6]
 8000ca8:	79c8      	ldrb	r0, [r1, #7]
 8000caa:	f020 000f 	bic.w	r0, r0, #15
 8000cae:	71c8      	strb	r0, [r1, #7]
    uint64_t mask = (1ULL << second);
 8000cb0:	78fe      	ldrb	r6, [r7, #3]
 8000cb2:	f04f 0001 	mov.w	r0, #1
 8000cb6:	f04f 0100 	mov.w	r1, #0
 8000cba:	f1a6 0e20 	sub.w	lr, r6, #32
 8000cbe:	f1c6 0c20 	rsb	ip, r6, #32
 8000cc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cc6:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000cca:	ea43 030e 	orr.w	r3, r3, lr
 8000cce:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cd2:	ea43 030c 	orr.w	r3, r3, ip
 8000cd6:	fa00 f206 	lsl.w	r2, r0, r6
 8000cda:	e9c7 2302 	strd	r2, r3, [r7, #8]
    clockBits->secondsRing = mask;
 8000cde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ce2:	4614      	mov	r4, r2
 8000ce4:	f023 4570 	bic.w	r5, r3, #4026531840	@ 0xf0000000
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	601c      	str	r4, [r3, #0]
 8000cec:	462a      	mov	r2, r5
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	711a      	strb	r2, [r3, #4]
 8000cf6:	0a2a      	lsrs	r2, r5, #8
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	715a      	strb	r2, [r3, #5]
 8000d00:	0c2a      	lsrs	r2, r5, #16
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	2100      	movs	r1, #0
 8000d06:	430a      	orrs	r2, r1
 8000d08:	719a      	strb	r2, [r3, #6]
 8000d0a:	0e2a      	lsrs	r2, r5, #24
 8000d0c:	f002 020f 	and.w	r2, r2, #15
 8000d10:	f002 000f 	and.w	r0, r2, #15
 8000d14:	79da      	ldrb	r2, [r3, #7]
 8000d16:	f022 020f 	bic.w	r2, r2, #15
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	71da      	strb	r2, [r3, #7]
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d2a <SetSecondLedAccumulating>:

void SetSecondLedAccumulating(MyClockBitFields* clockBits, uint8_t second)
{
 8000d2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 8000d36:	78f9      	ldrb	r1, [r7, #3]
 8000d38:	293b      	cmp	r1, #59	@ 0x3b
 8000d3a:	d901      	bls.n	8000d40 <SetSecondLedAccumulating+0x16>
 8000d3c:	213b      	movs	r1, #59	@ 0x3b
 8000d3e:	70f9      	strb	r1, [r7, #3]
    if (second == 0) {
 8000d40:	78f9      	ldrb	r1, [r7, #3]
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d113      	bne.n	8000d6e <SetSecondLedAccumulating+0x44>
        clockBits->secondsRing = 0ULL;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	705a      	strb	r2, [r3, #1]
 8000d50:	2200      	movs	r2, #0
 8000d52:	709a      	strb	r2, [r3, #2]
 8000d54:	2200      	movs	r2, #0
 8000d56:	70da      	strb	r2, [r3, #3]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	711a      	strb	r2, [r3, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	715a      	strb	r2, [r3, #5]
 8000d60:	2200      	movs	r2, #0
 8000d62:	719a      	strb	r2, [r3, #6]
 8000d64:	79da      	ldrb	r2, [r3, #7]
 8000d66:	f022 020f 	bic.w	r2, r2, #15
 8000d6a:	71da      	strb	r2, [r3, #7]
    } else {
        clockBits->secondsRing |= (1ULL << second);
    }
}
 8000d6c:	e048      	b.n	8000e00 <SetSecondLedAccumulating+0xd6>
        clockBits->secondsRing |= (1ULL << second);
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f8d1 a000 	ldr.w	sl, [r1]
 8000d74:	7908      	ldrb	r0, [r1, #4]
 8000d76:	794e      	ldrb	r6, [r1, #5]
 8000d78:	0236      	lsls	r6, r6, #8
 8000d7a:	4330      	orrs	r0, r6
 8000d7c:	798e      	ldrb	r6, [r1, #6]
 8000d7e:	0436      	lsls	r6, r6, #16
 8000d80:	4330      	orrs	r0, r6
 8000d82:	79c9      	ldrb	r1, [r1, #7]
 8000d84:	f001 010f 	and.w	r1, r1, #15
 8000d88:	0609      	lsls	r1, r1, #24
 8000d8a:	4301      	orrs	r1, r0
 8000d8c:	468b      	mov	fp, r1
 8000d8e:	78fe      	ldrb	r6, [r7, #3]
 8000d90:	f04f 0001 	mov.w	r0, #1
 8000d94:	f04f 0100 	mov.w	r1, #0
 8000d98:	f1a6 0e20 	sub.w	lr, r6, #32
 8000d9c:	f1c6 0c20 	rsb	ip, r6, #32
 8000da0:	fa01 f306 	lsl.w	r3, r1, r6
 8000da4:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000da8:	ea43 030e 	orr.w	r3, r3, lr
 8000dac:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000db0:	ea43 030c 	orr.w	r3, r3, ip
 8000db4:	fa00 f206 	lsl.w	r2, r0, r6
 8000db8:	ea4a 0802 	orr.w	r8, sl, r2
 8000dbc:	ea4b 0903 	orr.w	r9, fp, r3
 8000dc0:	4644      	mov	r4, r8
 8000dc2:	f029 4570 	bic.w	r5, r9, #4026531840	@ 0xf0000000
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	601c      	str	r4, [r3, #0]
 8000dca:	462a      	mov	r2, r5
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	2100      	movs	r1, #0
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	711a      	strb	r2, [r3, #4]
 8000dd4:	0a2a      	lsrs	r2, r5, #8
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	2100      	movs	r1, #0
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	715a      	strb	r2, [r3, #5]
 8000dde:	0c2a      	lsrs	r2, r5, #16
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	2100      	movs	r1, #0
 8000de4:	430a      	orrs	r2, r1
 8000de6:	719a      	strb	r2, [r3, #6]
 8000de8:	0e2a      	lsrs	r2, r5, #24
 8000dea:	f002 020f 	and.w	r2, r2, #15
 8000dee:	f002 000f 	and.w	r0, r2, #15
 8000df2:	79da      	ldrb	r2, [r3, #7]
 8000df4:	f022 020f 	bic.w	r2, r2, #15
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	71da      	strb	r2, [r3, #7]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e0a <SetSecondLedAccumulating2>:

void SetSecondLedAccumulating2(MyClockBitFields* clockBits, uint8_t second)
{
 8000e0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 8000e16:	78f9      	ldrb	r1, [r7, #3]
 8000e18:	293b      	cmp	r1, #59	@ 0x3b
 8000e1a:	d901      	bls.n	8000e20 <SetSecondLedAccumulating2+0x16>
 8000e1c:	213b      	movs	r1, #59	@ 0x3b
 8000e1e:	70f9      	strb	r1, [r7, #3]
    clockBits->secondsRing = 0ULL;
 8000e20:	6879      	ldr	r1, [r7, #4]
 8000e22:	2000      	movs	r0, #0
 8000e24:	7008      	strb	r0, [r1, #0]
 8000e26:	2000      	movs	r0, #0
 8000e28:	7048      	strb	r0, [r1, #1]
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	7088      	strb	r0, [r1, #2]
 8000e2e:	2000      	movs	r0, #0
 8000e30:	70c8      	strb	r0, [r1, #3]
 8000e32:	2000      	movs	r0, #0
 8000e34:	7108      	strb	r0, [r1, #4]
 8000e36:	2000      	movs	r0, #0
 8000e38:	7148      	strb	r0, [r1, #5]
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	7188      	strb	r0, [r1, #6]
 8000e3e:	79c8      	ldrb	r0, [r1, #7]
 8000e40:	f020 000f 	bic.w	r0, r0, #15
 8000e44:	71c8      	strb	r0, [r1, #7]
    for (uint8_t i = 0; i <= second; i++) {
 8000e46:	2100      	movs	r1, #0
 8000e48:	73f9      	strb	r1, [r7, #15]
 8000e4a:	e04b      	b.n	8000ee4 <SetSecondLedAccumulating2+0xda>
        clockBits->secondsRing |= (1ULL << i);
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	f8d1 a000 	ldr.w	sl, [r1]
 8000e52:	7908      	ldrb	r0, [r1, #4]
 8000e54:	794e      	ldrb	r6, [r1, #5]
 8000e56:	0236      	lsls	r6, r6, #8
 8000e58:	4330      	orrs	r0, r6
 8000e5a:	798e      	ldrb	r6, [r1, #6]
 8000e5c:	0436      	lsls	r6, r6, #16
 8000e5e:	4330      	orrs	r0, r6
 8000e60:	79c9      	ldrb	r1, [r1, #7]
 8000e62:	f001 010f 	and.w	r1, r1, #15
 8000e66:	0609      	lsls	r1, r1, #24
 8000e68:	4301      	orrs	r1, r0
 8000e6a:	468b      	mov	fp, r1
 8000e6c:	7bfe      	ldrb	r6, [r7, #15]
 8000e6e:	f04f 0001 	mov.w	r0, #1
 8000e72:	f04f 0100 	mov.w	r1, #0
 8000e76:	f1a6 0e20 	sub.w	lr, r6, #32
 8000e7a:	f1c6 0c20 	rsb	ip, r6, #32
 8000e7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e82:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000e86:	ea43 030e 	orr.w	r3, r3, lr
 8000e8a:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000e8e:	ea43 030c 	orr.w	r3, r3, ip
 8000e92:	fa00 f206 	lsl.w	r2, r0, r6
 8000e96:	ea4a 0802 	orr.w	r8, sl, r2
 8000e9a:	ea4b 0903 	orr.w	r9, fp, r3
 8000e9e:	4644      	mov	r4, r8
 8000ea0:	f029 4570 	bic.w	r5, r9, #4026531840	@ 0xf0000000
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	600c      	str	r4, [r1, #0]
 8000ea8:	4628      	mov	r0, r5
 8000eaa:	b2c0      	uxtb	r0, r0
 8000eac:	2600      	movs	r6, #0
 8000eae:	4330      	orrs	r0, r6
 8000eb0:	7108      	strb	r0, [r1, #4]
 8000eb2:	0a28      	lsrs	r0, r5, #8
 8000eb4:	b2c0      	uxtb	r0, r0
 8000eb6:	2600      	movs	r6, #0
 8000eb8:	4330      	orrs	r0, r6
 8000eba:	7148      	strb	r0, [r1, #5]
 8000ebc:	0c28      	lsrs	r0, r5, #16
 8000ebe:	b2c0      	uxtb	r0, r0
 8000ec0:	2600      	movs	r6, #0
 8000ec2:	4330      	orrs	r0, r6
 8000ec4:	7188      	strb	r0, [r1, #6]
 8000ec6:	0e28      	lsrs	r0, r5, #24
 8000ec8:	f000 000f 	and.w	r0, r0, #15
 8000ecc:	f000 0c0f 	and.w	ip, r0, #15
 8000ed0:	79c8      	ldrb	r0, [r1, #7]
 8000ed2:	f020 000f 	bic.w	r0, r0, #15
 8000ed6:	4606      	mov	r6, r0
 8000ed8:	4660      	mov	r0, ip
 8000eda:	4330      	orrs	r0, r6
 8000edc:	71c8      	strb	r0, [r1, #7]
    for (uint8_t i = 0; i <= second; i++) {
 8000ede:	7bf9      	ldrb	r1, [r7, #15]
 8000ee0:	3101      	adds	r1, #1
 8000ee2:	73f9      	strb	r1, [r7, #15]
 8000ee4:	7bf8      	ldrb	r0, [r7, #15]
 8000ee6:	78f9      	ldrb	r1, [r7, #3]
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	d9af      	bls.n	8000e4c <SetSecondLedAccumulating2+0x42>
    }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000ef8 <SetTime7Seg_Top>:

/**
 * Ustawia 6 wyświetlaczy 7-seg (top lub bottom) na HH:MM:SS
 */
void SetTime7Seg_Top(MyClockBitFields* clockBits, uint8_t h, uint8_t m, uint8_t s)
{
 8000ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000efc:	b09d      	sub	sp, #116	@ 0x74
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8000f02:	4618      	mov	r0, r3
 8000f04:	460b      	mov	r3, r1
 8000f06:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8000f10:	4603      	mov	r3, r0
 8000f12:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

	  // Bufor na segmenty wyświetlacza (6 pozycji)
	    uint8_t backBuffer[6] = {0};
 8000f16:	2300      	movs	r3, #0
 8000f18:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	    // Obsługa godzin
	    if (h < 10) {
 8000f20:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000f24:	2b09      	cmp	r3, #9
 8000f26:	d80d      	bhi.n	8000f44 <SetTime7Seg_Top+0x4c>
	        backBuffer[0] = segmentMap[10]; // Puste dziesiątki godzin
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = charToSegment('0' + h); // Jednostki godzin
 8000f2e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000f32:	3330      	adds	r3, #48	@ 0x30
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fd80 	bl	8000a3c <charToSegment>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
 8000f42:	e022      	b.n	8000f8a <SetTime7Seg_Top+0x92>
	    } else {
	        backBuffer[0] = charToSegment('0' + (h / 10)); // Dziesiątki godzin
 8000f44:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000f48:	4b87      	ldr	r3, [pc, #540]	@ (8001168 <SetTime7Seg_Top+0x270>)
 8000f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8000f4e:	08db      	lsrs	r3, r3, #3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	3330      	adds	r3, #48	@ 0x30
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fd70 	bl	8000a3c <charToSegment>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = charToSegment('0' + (h % 10)); // Jednostki godzin
 8000f62:	f897 105b 	ldrb.w	r1, [r7, #91]	@ 0x5b
 8000f66:	4b80      	ldr	r3, [pc, #512]	@ (8001168 <SetTime7Seg_Top+0x270>)
 8000f68:	fba3 2301 	umull	r2, r3, r3, r1
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	1acb      	subs	r3, r1, r3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	3330      	adds	r3, #48	@ 0x30
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fd5c 	bl	8000a3c <charToSegment>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	    }

	    // Obsługa minut
	    backBuffer[2] = charToSegment('0' + (m / 10)); // Dziesiątki minut
 8000f8a:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8000f8e:	4b76      	ldr	r3, [pc, #472]	@ (8001168 <SetTime7Seg_Top+0x270>)
 8000f90:	fba3 2302 	umull	r2, r3, r3, r2
 8000f94:	08db      	lsrs	r3, r3, #3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	3330      	adds	r3, #48	@ 0x30
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fd4d 	bl	8000a3c <charToSegment>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	    backBuffer[3] = charToSegment('0' + (m % 10)); // Jednostki minut
 8000fa8:	f897 105a 	ldrb.w	r1, [r7, #90]	@ 0x5a
 8000fac:	4b6e      	ldr	r3, [pc, #440]	@ (8001168 <SetTime7Seg_Top+0x270>)
 8000fae:	fba3 2301 	umull	r2, r3, r3, r1
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	1acb      	subs	r3, r1, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	3330      	adds	r3, #48	@ 0x30
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fd39 	bl	8000a3c <charToSegment>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	    // Obsługa sekund
	    backBuffer[4] = charToSegment('0' + (s / 10)); // Dziesiątki sekund
 8000fd0:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8000fd4:	4b64      	ldr	r3, [pc, #400]	@ (8001168 <SetTime7Seg_Top+0x270>)
 8000fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8000fda:	08db      	lsrs	r3, r3, #3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	3330      	adds	r3, #48	@ 0x30
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fd2a 	bl	8000a3c <charToSegment>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	    backBuffer[5] = charToSegment('0' + (s % 10)); // Jednostki sekund
 8000fee:	f897 1059 	ldrb.w	r1, [r7, #89]	@ 0x59
 8000ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8001168 <SetTime7Seg_Top+0x270>)
 8000ff4:	fba3 2301 	umull	r2, r3, r3, r1
 8000ff8:	08da      	lsrs	r2, r3, #3
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	1acb      	subs	r3, r1, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	3330      	adds	r3, #48	@ 0x30
 8001008:	b2db      	uxtb	r3, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fd16 	bl	8000a3c <charToSegment>
 8001010:	4603      	mov	r3, r0
 8001012:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	    // Zbudowanie wartości 48-bitowej na podstawie bufora
	    uint64_t displayVal = 0ULL;
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	f04f 0300 	mov.w	r3, #0
 800101e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[5] << 40);
 8001022:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2200      	movs	r2, #0
 800102a:	653b      	str	r3, [r7, #80]	@ 0x50
 800102c:	657a      	str	r2, [r7, #84]	@ 0x54
 800102e:	f04f 0000 	mov.w	r0, #0
 8001032:	f04f 0100 	mov.w	r1, #0
 8001036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001038:	0219      	lsls	r1, r3, #8
 800103a:	2000      	movs	r0, #0
 800103c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001040:	ea42 0600 	orr.w	r6, r2, r0
 8001044:	62be      	str	r6, [r7, #40]	@ 0x28
 8001046:	430b      	orrs	r3, r1
 8001048:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800104a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800104e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[4] << 32);
 8001052:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2200      	movs	r2, #0
 800105a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800105c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800105e:	f04f 0000 	mov.w	r0, #0
 8001062:	f04f 0100 	mov.w	r1, #0
 8001066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001068:	0019      	movs	r1, r3
 800106a:	2000      	movs	r0, #0
 800106c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001070:	ea42 0600 	orr.w	r6, r2, r0
 8001074:	623e      	str	r6, [r7, #32]
 8001076:	430b      	orrs	r3, r1
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
 800107a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800107e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[0] << 24);
 8001082:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2200      	movs	r2, #0
 800108a:	643b      	str	r3, [r7, #64]	@ 0x40
 800108c:	647a      	str	r2, [r7, #68]	@ 0x44
 800108e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8001092:	460b      	mov	r3, r1
 8001094:	0a1d      	lsrs	r5, r3, #8
 8001096:	460b      	mov	r3, r1
 8001098:	061c      	lsls	r4, r3, #24
 800109a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800109e:	ea42 0104 	orr.w	r1, r2, r4
 80010a2:	61b9      	str	r1, [r7, #24]
 80010a4:	432b      	orrs	r3, r5
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80010ac:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[1] << 16);
 80010b0:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2200      	movs	r2, #0
 80010b8:	4698      	mov	r8, r3
 80010ba:	4691      	mov	r9, r2
 80010bc:	f04f 0000 	mov.w	r0, #0
 80010c0:	f04f 0100 	mov.w	r1, #0
 80010c4:	ea4f 4109 	mov.w	r1, r9, lsl #16
 80010c8:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 80010cc:	ea4f 4008 	mov.w	r0, r8, lsl #16
 80010d0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80010d4:	ea42 0400 	orr.w	r4, r2, r0
 80010d8:	613c      	str	r4, [r7, #16]
 80010da:	430b      	orrs	r3, r1
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80010e2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[2] << 8);
 80010e6:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2200      	movs	r2, #0
 80010ee:	469a      	mov	sl, r3
 80010f0:	4693      	mov	fp, r2
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80010fe:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8001102:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8001106:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800110a:	ea40 0402 	orr.w	r4, r0, r2
 800110e:	60bc      	str	r4, [r7, #8]
 8001110:	430b      	orrs	r3, r1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001118:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[3] << 0);
 800111c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2200      	movs	r2, #0
 8001124:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001126:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001128:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800112c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001130:	4621      	mov	r1, r4
 8001132:	4311      	orrs	r1, r2
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	4629      	mov	r1, r5
 8001138:	4319      	orrs	r1, r3
 800113a:	6079      	str	r1, [r7, #4]
 800113c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001140:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68

	    clockBits->topDisplay = displayVal;
 8001144:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001148:	633a      	str	r2, [r7, #48]	@ 0x30
 800114a:	b29b      	uxth	r3, r3
 800114c:	637b      	str	r3, [r7, #52]	@ 0x34
 800114e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001150:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001154:	4602      	mov	r2, r0
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	460a      	mov	r2, r1
 800115a:	821a      	strh	r2, [r3, #16]
}
 800115c:	bf00      	nop
 800115e:	3774      	adds	r7, #116	@ 0x74
 8001160:	46bd      	mov	sp, r7
 8001162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001166:	bf00      	nop
 8001168:	cccccccd 	.word	0xcccccccd

0800116c <SetTime7Seg_Void>:



void SetTime7Seg_Void(MyClockBitFields* clockBits)
{
 800116c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001170:	b09c      	sub	sp, #112	@ 0x70
 8001172:	af00      	add	r7, sp, #0
 8001174:	65f8      	str	r0, [r7, #92]	@ 0x5c

	  // Bufor na segmenty wyświetlacza (6 pozycji)
	    uint8_t backBuffer[6] = {0};
 8001176:	2300      	movs	r3, #0
 8001178:	663b      	str	r3, [r7, #96]	@ 0x60
 800117a:	2300      	movs	r3, #0
 800117c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	    // Obsługa godzin

	        backBuffer[0] = segmentMap[10]; // Puste dziesiątki godzin
 8001180:	2300      	movs	r3, #0
 8001182:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = segmentMap[10]; // Jednostki godzin
 8001186:	2300      	movs	r3, #0
 8001188:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61


	    // Obsługa minut
	    backBuffer[2] = segmentMap[10]; // Dziesiątki minut
 800118c:	2300      	movs	r3, #0
 800118e:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	    backBuffer[3] = segmentMap[10]; // Jednostki minut
 8001192:	2300      	movs	r3, #0
 8001194:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	    // Obsługa sekund
	    backBuffer[4] = segmentMap[10]; // Dziesiątki sekund
 8001198:	2300      	movs	r3, #0
 800119a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	    backBuffer[5] = segmentMap[10]; // Jednostki sekund
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	    // Zbudowanie wartości 48-bitowej na podstawie bufora
	    uint64_t displayVal = 0ULL;
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	f04f 0300 	mov.w	r3, #0
 80011ac:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[5] << 40);
 80011b0:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2200      	movs	r2, #0
 80011b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80011ba:	657a      	str	r2, [r7, #84]	@ 0x54
 80011bc:	f04f 0000 	mov.w	r0, #0
 80011c0:	f04f 0100 	mov.w	r1, #0
 80011c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011c6:	0219      	lsls	r1, r3, #8
 80011c8:	2000      	movs	r0, #0
 80011ca:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80011ce:	ea42 0800 	orr.w	r8, r2, r0
 80011d2:	ea43 0901 	orr.w	r9, r3, r1
 80011d6:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[4] << 32);
 80011da:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2200      	movs	r2, #0
 80011e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80011e4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80011e6:	f04f 0000 	mov.w	r0, #0
 80011ea:	f04f 0100 	mov.w	r1, #0
 80011ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011f0:	0019      	movs	r1, r3
 80011f2:	2000      	movs	r0, #0
 80011f4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80011f8:	ea42 0600 	orr.w	r6, r2, r0
 80011fc:	623e      	str	r6, [r7, #32]
 80011fe:	430b      	orrs	r3, r1
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
 8001202:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001206:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[0] << 24);
 800120a:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2200      	movs	r2, #0
 8001212:	643b      	str	r3, [r7, #64]	@ 0x40
 8001214:	647a      	str	r2, [r7, #68]	@ 0x44
 8001216:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800121a:	460b      	mov	r3, r1
 800121c:	0a1d      	lsrs	r5, r3, #8
 800121e:	460b      	mov	r3, r1
 8001220:	061c      	lsls	r4, r3, #24
 8001222:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001226:	ea42 0104 	orr.w	r1, r2, r4
 800122a:	61b9      	str	r1, [r7, #24]
 800122c:	432b      	orrs	r3, r5
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001234:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[1] << 16);
 8001238:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2200      	movs	r2, #0
 8001240:	469a      	mov	sl, r3
 8001242:	4693      	mov	fp, r2
 8001244:	f04f 0000 	mov.w	r0, #0
 8001248:	f04f 0100 	mov.w	r1, #0
 800124c:	ea4f 410b 	mov.w	r1, fp, lsl #16
 8001250:	ea41 411a 	orr.w	r1, r1, sl, lsr #16
 8001254:	ea4f 400a 	mov.w	r0, sl, lsl #16
 8001258:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800125c:	ea42 0400 	orr.w	r4, r2, r0
 8001260:	613c      	str	r4, [r7, #16]
 8001262:	430b      	orrs	r3, r1
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800126a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[2] << 8);
 800126e:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2200      	movs	r2, #0
 8001276:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001278:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	f04f 0300 	mov.w	r3, #0
 8001282:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001286:	4629      	mov	r1, r5
 8001288:	020b      	lsls	r3, r1, #8
 800128a:	4621      	mov	r1, r4
 800128c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001290:	4621      	mov	r1, r4
 8001292:	020a      	lsls	r2, r1, #8
 8001294:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001298:	ea40 0402 	orr.w	r4, r0, r2
 800129c:	60bc      	str	r4, [r7, #8]
 800129e:	430b      	orrs	r3, r1
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80012a6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[3] << 0);
 80012aa:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2200      	movs	r2, #0
 80012b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80012b4:	637a      	str	r2, [r7, #52]	@ 0x34
 80012b6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80012ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80012be:	4621      	mov	r1, r4
 80012c0:	4311      	orrs	r1, r2
 80012c2:	6039      	str	r1, [r7, #0]
 80012c4:	4629      	mov	r1, r5
 80012c6:	4319      	orrs	r1, r3
 80012c8:	6079      	str	r1, [r7, #4]
 80012ca:	e9d7 3400 	ldrd	r3, r4, [r7]
 80012ce:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68

	    clockBits->topDisplay = displayVal;
 80012d2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80012d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80012d8:	b29b      	uxth	r3, r3
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80012e2:	4602      	mov	r2, r0
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	460a      	mov	r2, r1
 80012e8:	821a      	strh	r2, [r3, #16]
}
 80012ea:	bf00      	nop
 80012ec:	3770      	adds	r7, #112	@ 0x70
 80012ee:	46bd      	mov	sp, r7
 80012f0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80012f4:	4770      	bx	lr
	...

080012f8 <UpdateAllDisplays>:




void UpdateAllDisplays(const MyClockBitFields* clockBits)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
    // Sprawdź, czy SPI jest zajęte
    if (spiTransferInProgress) {
 8001300:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <UpdateAllDisplays+0x7c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d130      	bne.n	800136c <UpdateAllDisplays+0x74>
        return;
    }

    spiTransferInProgress = true;
 800130a:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <UpdateAllDisplays+0x7c>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]

    static uint8_t spiTxBuffer[24];
    memset(spiTxBuffer, 0, sizeof(spiTxBuffer));
 8001310:	2218      	movs	r2, #24
 8001312:	2100      	movs	r1, #0
 8001314:	4818      	ldr	r0, [pc, #96]	@ (8001378 <UpdateAllDisplays+0x80>)
 8001316:	f00a fc03 	bl	800bb20 <memset>

    const uint8_t* p = (const uint8_t*)clockBits;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]
    int byteIndex = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]

    for (int partIndex = 11; partIndex >= 0; partIndex--)
 8001322:	230b      	movs	r3, #11
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	e018      	b.n	800135a <UpdateAllDisplays+0x62>
    {
        spiTxBuffer[byteIndex++] = p[2 * partIndex + 1];
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	3301      	adds	r3, #1
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	441a      	add	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	1c59      	adds	r1, r3, #1
 8001336:	6179      	str	r1, [r7, #20]
 8001338:	7811      	ldrb	r1, [r2, #0]
 800133a:	4a0f      	ldr	r2, [pc, #60]	@ (8001378 <UpdateAllDisplays+0x80>)
 800133c:	54d1      	strb	r1, [r2, r3]
        spiTxBuffer[byteIndex++] = p[2 * partIndex + 0];
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	441a      	add	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	1c59      	adds	r1, r3, #1
 800134c:	6179      	str	r1, [r7, #20]
 800134e:	7811      	ldrb	r1, [r2, #0]
 8001350:	4a09      	ldr	r2, [pc, #36]	@ (8001378 <UpdateAllDisplays+0x80>)
 8001352:	54d1      	strb	r1, [r2, r3]
    for (int partIndex = 11; partIndex >= 0; partIndex--)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	3b01      	subs	r3, #1
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	2b00      	cmp	r3, #0
 800135e:	dae3      	bge.n	8001328 <UpdateAllDisplays+0x30>
    }

    HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 24);
 8001360:	2218      	movs	r2, #24
 8001362:	4905      	ldr	r1, [pc, #20]	@ (8001378 <UpdateAllDisplays+0x80>)
 8001364:	4805      	ldr	r0, [pc, #20]	@ (800137c <UpdateAllDisplays+0x84>)
 8001366:	f008 f9ef 	bl	8009748 <HAL_SPI_Transmit_DMA>
 800136a:	e000      	b.n	800136e <UpdateAllDisplays+0x76>
        return;
 800136c:	bf00      	nop
}
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000112 	.word	0x20000112
 8001378:	20000114 	.word	0x20000114
 800137c:	20000774 	.word	0x20000774

08001380 <SetPWMPercentGamma>:
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
  uint32_t compare_value = (period + 1) - ((period + 1) * percent / 100);
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
}

void SetPWMPercentGamma(uint8_t percent) {
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if (percent > 100) {
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b64      	cmp	r3, #100	@ 0x64
 800138e:	d901      	bls.n	8001394 <SetPWMPercentGamma+0x14>
      percent = 100;
 8001390:	2364      	movs	r3, #100	@ 0x64
 8001392:	71fb      	strb	r3, [r7, #7]
  }
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8001394:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <SetPWMPercentGamma+0x4c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800139a:	617b      	str	r3, [r7, #20]
  uint8_t gamma_percent = gamma_table[percent];
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <SetPWMPercentGamma+0x50>)
 80013a0:	5cd3      	ldrb	r3, [r2, r3]
 80013a2:	74fb      	strb	r3, [r7, #19]
  uint32_t compare_value = (period + 1) * gamma_percent / 100;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3301      	adds	r3, #1
 80013a8:	7cfa      	ldrb	r2, [r7, #19]
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	4a09      	ldr	r2, [pc, #36]	@ (80013d4 <SetPWMPercentGamma+0x54>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	095b      	lsrs	r3, r3, #5
 80013b6:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
 80013b8:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <SetPWMPercentGamma+0x4c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80013c0:	bf00      	nop
 80013c2:	371c      	adds	r7, #28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	20000948 	.word	0x20000948
 80013d0:	0800c518 	.word	0x0800c518
 80013d4:	51eb851f 	.word	0x51eb851f

080013d8 <SetSecondLedEvenOdd>:
        HAL_Delay(50);
    }
}

void SetSecondLedEvenOdd(MyClockBitFields* clockBits, uint8_t second, uint8_t minute)
{
 80013d8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80013dc:	b08c      	sub	sp, #48	@ 0x30
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80013e2:	460b      	mov	r3, r1
 80013e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80013e8:	4613      	mov	r3, r2
 80013ea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (second >= 60) {
 80013ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013f2:	2b3b      	cmp	r3, #59	@ 0x3b
 80013f4:	d902      	bls.n	80013fc <SetSecondLedEvenOdd+0x24>
        second = 59;
 80013f6:	233b      	movs	r3, #59	@ 0x3b
 80013f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
    if ((minute % 2) == 0)
 80013fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d178      	bne.n	80014fc <SetSecondLedEvenOdd+0x124>
    {
        clockBits->secondsRing = 0ULL;
 800140a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	705a      	strb	r2, [r3, #1]
 8001414:	2200      	movs	r2, #0
 8001416:	709a      	strb	r2, [r3, #2]
 8001418:	2200      	movs	r2, #0
 800141a:	70da      	strb	r2, [r3, #3]
 800141c:	2200      	movs	r2, #0
 800141e:	711a      	strb	r2, [r3, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	715a      	strb	r2, [r3, #5]
 8001424:	2200      	movs	r2, #0
 8001426:	719a      	strb	r2, [r3, #6]
 8001428:	79da      	ldrb	r2, [r3, #7]
 800142a:	f022 020f 	bic.w	r2, r2, #15
 800142e:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = 0; i <= second; i++)
 8001430:	2300      	movs	r3, #0
 8001432:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001436:	e05a      	b.n	80014ee <SetSecondLedEvenOdd+0x116>
        {
            clockBits->secondsRing |= (1ULL << i);
 8001438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	791a      	ldrb	r2, [r3, #4]
 800143e:	795c      	ldrb	r4, [r3, #5]
 8001440:	0224      	lsls	r4, r4, #8
 8001442:	4322      	orrs	r2, r4
 8001444:	799c      	ldrb	r4, [r3, #6]
 8001446:	0424      	lsls	r4, r4, #16
 8001448:	4322      	orrs	r2, r4
 800144a:	79db      	ldrb	r3, [r3, #7]
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	061b      	lsls	r3, r3, #24
 8001452:	4313      	orrs	r3, r2
 8001454:	4619      	mov	r1, r3
 8001456:	4680      	mov	r8, r0
 8001458:	4689      	mov	r9, r1
 800145a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800145e:	f04f 0201 	mov.w	r2, #1
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	f1a1 0420 	sub.w	r4, r1, #32
 800146a:	f1c1 0020 	rsb	r0, r1, #32
 800146e:	fa03 f601 	lsl.w	r6, r3, r1
 8001472:	fa02 f404 	lsl.w	r4, r2, r4
 8001476:	4326      	orrs	r6, r4
 8001478:	fa22 f000 	lsr.w	r0, r2, r0
 800147c:	4306      	orrs	r6, r0
 800147e:	fa02 f501 	lsl.w	r5, r2, r1
 8001482:	ea48 0305 	orr.w	r3, r8, r5
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	ea49 0306 	orr.w	r3, r9, r6
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001492:	460b      	mov	r3, r1
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4613      	mov	r3, r2
 8001498:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80014a4:	4642      	mov	r2, r8
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	464a      	mov	r2, r9
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	2100      	movs	r1, #0
 80014ae:	430a      	orrs	r2, r1
 80014b0:	711a      	strb	r2, [r3, #4]
 80014b2:	464a      	mov	r2, r9
 80014b4:	0a12      	lsrs	r2, r2, #8
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	2100      	movs	r1, #0
 80014ba:	430a      	orrs	r2, r1
 80014bc:	715a      	strb	r2, [r3, #5]
 80014be:	464a      	mov	r2, r9
 80014c0:	0c12      	lsrs	r2, r2, #16
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	2100      	movs	r1, #0
 80014c6:	430a      	orrs	r2, r1
 80014c8:	719a      	strb	r2, [r3, #6]
 80014ca:	464a      	mov	r2, r9
 80014cc:	0e12      	lsrs	r2, r2, #24
 80014ce:	f002 020f 	and.w	r2, r2, #15
 80014d2:	f002 000f 	and.w	r0, r2, #15
 80014d6:	79da      	ldrb	r2, [r3, #7]
 80014d8:	f022 020f 	bic.w	r2, r2, #15
 80014dc:	4611      	mov	r1, r2
 80014de:	4602      	mov	r2, r0
 80014e0:	430a      	orrs	r2, r1
 80014e2:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = 0; i <= second; i++)
 80014e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014e8:	3301      	adds	r3, #1
 80014ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80014ee:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80014f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d99e      	bls.n	8001438 <SetSecondLedEvenOdd+0x60>
        for (uint8_t i = second + 1; i < 60; i++)
        {
            clockBits->secondsRing |= (1ULL << i);
        }
    }
}
 80014fa:	e079      	b.n	80015f0 <SetSecondLedEvenOdd+0x218>
        clockBits->secondsRing = 0ULL;
 80014fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	2200      	movs	r2, #0
 8001504:	705a      	strb	r2, [r3, #1]
 8001506:	2200      	movs	r2, #0
 8001508:	709a      	strb	r2, [r3, #2]
 800150a:	2200      	movs	r2, #0
 800150c:	70da      	strb	r2, [r3, #3]
 800150e:	2200      	movs	r2, #0
 8001510:	711a      	strb	r2, [r3, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	715a      	strb	r2, [r3, #5]
 8001516:	2200      	movs	r2, #0
 8001518:	719a      	strb	r2, [r3, #6]
 800151a:	79da      	ldrb	r2, [r3, #7]
 800151c:	f022 020f 	bic.w	r2, r2, #15
 8001520:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = second + 1; i < 60; i++)
 8001522:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001526:	3301      	adds	r3, #1
 8001528:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800152c:	e05c      	b.n	80015e8 <SetSecondLedEvenOdd+0x210>
            clockBits->secondsRing |= (1ULL << i);
 800152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	791a      	ldrb	r2, [r3, #4]
 8001534:	795c      	ldrb	r4, [r3, #5]
 8001536:	0224      	lsls	r4, r4, #8
 8001538:	4322      	orrs	r2, r4
 800153a:	799c      	ldrb	r4, [r3, #6]
 800153c:	0424      	lsls	r4, r4, #16
 800153e:	4322      	orrs	r2, r4
 8001540:	79db      	ldrb	r3, [r3, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	061b      	lsls	r3, r3, #24
 8001548:	4313      	orrs	r3, r2
 800154a:	4619      	mov	r1, r3
 800154c:	4680      	mov	r8, r0
 800154e:	4689      	mov	r9, r1
 8001550:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8001554:	f04f 0201 	mov.w	r2, #1
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	f1a1 0420 	sub.w	r4, r1, #32
 8001560:	f1c1 0020 	rsb	r0, r1, #32
 8001564:	fa03 fb01 	lsl.w	fp, r3, r1
 8001568:	fa02 f404 	lsl.w	r4, r2, r4
 800156c:	ea4b 0b04 	orr.w	fp, fp, r4
 8001570:	fa22 f000 	lsr.w	r0, r2, r0
 8001574:	ea4b 0b00 	orr.w	fp, fp, r0
 8001578:	fa02 fa01 	lsl.w	sl, r2, r1
 800157c:	ea48 030a 	orr.w	r3, r8, sl
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	ea49 030b 	orr.w	r3, r9, fp
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800158c:	460b      	mov	r3, r1
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800159e:	4622      	mov	r2, r4
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	462a      	mov	r2, r5
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	2100      	movs	r1, #0
 80015a8:	430a      	orrs	r2, r1
 80015aa:	711a      	strb	r2, [r3, #4]
 80015ac:	462a      	mov	r2, r5
 80015ae:	0a12      	lsrs	r2, r2, #8
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	2100      	movs	r1, #0
 80015b4:	430a      	orrs	r2, r1
 80015b6:	715a      	strb	r2, [r3, #5]
 80015b8:	462a      	mov	r2, r5
 80015ba:	0c12      	lsrs	r2, r2, #16
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	2100      	movs	r1, #0
 80015c0:	430a      	orrs	r2, r1
 80015c2:	719a      	strb	r2, [r3, #6]
 80015c4:	462a      	mov	r2, r5
 80015c6:	0e12      	lsrs	r2, r2, #24
 80015c8:	f002 020f 	and.w	r2, r2, #15
 80015cc:	f002 000f 	and.w	r0, r2, #15
 80015d0:	79da      	ldrb	r2, [r3, #7]
 80015d2:	f022 020f 	bic.w	r2, r2, #15
 80015d6:	4611      	mov	r1, r2
 80015d8:	4602      	mov	r2, r0
 80015da:	430a      	orrs	r2, r1
 80015dc:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = second + 1; i < 60; i++)
 80015de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80015e2:	3301      	adds	r3, #1
 80015e4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80015e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80015ec:	2b3b      	cmp	r3, #59	@ 0x3b
 80015ee:	d99e      	bls.n	800152e <SetSecondLedEvenOdd+0x156>
}
 80015f0:	bf00      	nop
 80015f2:	3730      	adds	r7, #48	@ 0x30
 80015f4:	46bd      	mov	sp, r7
 80015f6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80015fa:	4770      	bx	lr

080015fc <SetDots>:
//  if (dot2) val |= (1ULL << 1);
//
//  clockBits->dots = val;
//}

void SetDots(MyClockBitFields* clockBits, bool dot1, bool dot2) {
 80015fc:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	70fb      	strb	r3, [r7, #3]
 800160a:	4613      	mov	r3, r2
 800160c:	70bb      	strb	r3, [r7, #2]
  uint64_t val = 0ULL;
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (dot1) val |= (1ULL << 0);
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <SetDots+0x32>
 8001620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001624:	f042 0801 	orr.w	r8, r2, #1
 8001628:	4699      	mov	r9, r3
 800162a:	e9c7 8902 	strd	r8, r9, [r7, #8]
  if (dot2) val |= (1ULL << 1);
 800162e:	78bb      	ldrb	r3, [r7, #2]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d006      	beq.n	8001642 <SetDots+0x46>
 8001634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001638:	f042 0402 	orr.w	r4, r2, #2
 800163c:	461d      	mov	r5, r3
 800163e:	e9c7 4502 	strd	r4, r5, [r7, #8]
  clockBits->dots = val;
 8001642:	7a3b      	ldrb	r3, [r7, #8]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	b2d9      	uxtb	r1, r3
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	7a93      	ldrb	r3, [r2, #10]
 800164e:	f361 1305 	bfi	r3, r1, #4, #2
 8001652:	7293      	strb	r3, [r2, #10]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800165e:	4770      	bx	lr

08001660 <SetHourRingCustom>:


void SetHourRingCustom(MyClockBitFields* clockBits, uint8_t outerMode, uint8_t innerMode)
{
 8001660:	b490      	push	{r4, r7}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
 800166c:	4613      	mov	r3, r2
 800166e:	70bb      	strb	r3, [r7, #2]
    // Maska dla pełnego pierścienia (wszystkie 12 godzin)
    uint16_t fullMask = 0x0FFF;  // 12-bitowy: bity 0-11 ustawione na 1
 8001670:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001674:	81fb      	strh	r3, [r7, #14]
    // Maska dla kwadransów: godziny 12 (bit 0), 3 (bit 3), 6 (bit 6), 9 (bit 9)
    uint16_t quarterMask = (1U << 0) | (1U << 3) | (1U << 6) | (1U << 9);
 8001676:	f240 2349 	movw	r3, #585	@ 0x249
 800167a:	81bb      	strh	r3, [r7, #12]

    // Ustawienia dla zewnętrznego pierścienia
    switch(outerMode)
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d002      	beq.n	8001688 <SetHourRingCustom+0x28>
 8001682:	2b02      	cmp	r3, #2
 8001684:	d016      	beq.n	80016b4 <SetHourRingCustom+0x54>
 8001686:	e02b      	b.n	80016e0 <SetHourRingCustom+0x80>
    {
        case 1:
            clockBits->hoursRingOuter = fullMask;
 8001688:	89fb      	ldrh	r3, [r7, #14]
 800168a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168e:	b29a      	uxth	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f002 010f 	and.w	r1, r2, #15
 8001696:	010c      	lsls	r4, r1, #4
 8001698:	79d9      	ldrb	r1, [r3, #7]
 800169a:	f001 010f 	and.w	r1, r1, #15
 800169e:	4608      	mov	r0, r1
 80016a0:	4621      	mov	r1, r4
 80016a2:	4301      	orrs	r1, r0
 80016a4:	71d9      	strb	r1, [r3, #7]
 80016a6:	0912      	lsrs	r2, r2, #4
 80016a8:	b292      	uxth	r2, r2
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	2100      	movs	r1, #0
 80016ae:	430a      	orrs	r2, r1
 80016b0:	721a      	strb	r2, [r3, #8]
            break;
 80016b2:	e01d      	b.n	80016f0 <SetHourRingCustom+0x90>
        case 2:
            clockBits->hoursRingOuter = quarterMask;
 80016b4:	89bb      	ldrh	r3, [r7, #12]
 80016b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f002 010f 	and.w	r1, r2, #15
 80016c2:	010c      	lsls	r4, r1, #4
 80016c4:	79d9      	ldrb	r1, [r3, #7]
 80016c6:	f001 010f 	and.w	r1, r1, #15
 80016ca:	4608      	mov	r0, r1
 80016cc:	4621      	mov	r1, r4
 80016ce:	4301      	orrs	r1, r0
 80016d0:	71d9      	strb	r1, [r3, #7]
 80016d2:	0912      	lsrs	r2, r2, #4
 80016d4:	b292      	uxth	r2, r2
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	2100      	movs	r1, #0
 80016da:	430a      	orrs	r2, r1
 80016dc:	721a      	strb	r2, [r3, #8]
            break;
 80016de:	e007      	b.n	80016f0 <SetHourRingCustom+0x90>
        default:  // dla wartości 0 i innych nieznanych – wyłącz
            clockBits->hoursRingOuter = 0;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	79da      	ldrb	r2, [r3, #7]
 80016e4:	f002 020f 	and.w	r2, r2, #15
 80016e8:	71da      	strb	r2, [r3, #7]
 80016ea:	2200      	movs	r2, #0
 80016ec:	721a      	strb	r2, [r3, #8]
            break;
 80016ee:	bf00      	nop
    }

    // Ustawienia dla wewnętrznego pierścienia
    switch(innerMode)
 80016f0:	78bb      	ldrb	r3, [r7, #2]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d002      	beq.n	80016fc <SetHourRingCustom+0x9c>
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d017      	beq.n	800172a <SetHourRingCustom+0xca>
 80016fa:	e02d      	b.n	8001758 <SetHourRingCustom+0xf8>
    {
        case 1:
            clockBits->hoursRingInner = fullMask;
 80016fc:	89fb      	ldrh	r3, [r7, #14]
 80016fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001702:	b29a      	uxth	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	b2d1      	uxtb	r1, r2
 8001708:	2000      	movs	r0, #0
 800170a:	4301      	orrs	r1, r0
 800170c:	7259      	strb	r1, [r3, #9]
 800170e:	0a12      	lsrs	r2, r2, #8
 8001710:	b292      	uxth	r2, r2
 8001712:	f002 020f 	and.w	r2, r2, #15
 8001716:	f002 000f 	and.w	r0, r2, #15
 800171a:	7a9a      	ldrb	r2, [r3, #10]
 800171c:	f022 020f 	bic.w	r2, r2, #15
 8001720:	4611      	mov	r1, r2
 8001722:	4602      	mov	r2, r0
 8001724:	430a      	orrs	r2, r1
 8001726:	729a      	strb	r2, [r3, #10]
            break;
 8001728:	e01e      	b.n	8001768 <SetHourRingCustom+0x108>
        case 2:
            clockBits->hoursRingInner = quarterMask;
 800172a:	89bb      	ldrh	r3, [r7, #12]
 800172c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001730:	b29a      	uxth	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	b2d1      	uxtb	r1, r2
 8001736:	2000      	movs	r0, #0
 8001738:	4301      	orrs	r1, r0
 800173a:	7259      	strb	r1, [r3, #9]
 800173c:	0a12      	lsrs	r2, r2, #8
 800173e:	b292      	uxth	r2, r2
 8001740:	f002 020f 	and.w	r2, r2, #15
 8001744:	f002 000f 	and.w	r0, r2, #15
 8001748:	7a9a      	ldrb	r2, [r3, #10]
 800174a:	f022 020f 	bic.w	r2, r2, #15
 800174e:	4611      	mov	r1, r2
 8001750:	4602      	mov	r2, r0
 8001752:	430a      	orrs	r2, r1
 8001754:	729a      	strb	r2, [r3, #10]
            break;
 8001756:	e007      	b.n	8001768 <SetHourRingCustom+0x108>
        default:  // dla wartości 0 i innych nieznanych – wyłącz
            clockBits->hoursRingInner = 0;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	725a      	strb	r2, [r3, #9]
 800175e:	7a9a      	ldrb	r2, [r3, #10]
 8001760:	f022 020f 	bic.w	r2, r2, #15
 8001764:	729a      	strb	r2, [r3, #10]
            break;
 8001766:	bf00      	nop
    }
}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bc90      	pop	{r4, r7}
 8001770:	4770      	bx	lr
	...

08001774 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4b27      	ldr	r3, [pc, #156]	@ (800181c <MX_DMA_Init+0xa8>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a26      	ldr	r2, [pc, #152]	@ (800181c <MX_DMA_Init+0xa8>)
 8001784:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b24      	ldr	r3, [pc, #144]	@ (800181c <MX_DMA_Init+0xa8>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	4b20      	ldr	r3, [pc, #128]	@ (800181c <MX_DMA_Init+0xa8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a1f      	ldr	r2, [pc, #124]	@ (800181c <MX_DMA_Init+0xa8>)
 80017a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b1d      	ldr	r3, [pc, #116]	@ (800181c <MX_DMA_Init+0xa8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	200d      	movs	r0, #13
 80017b8:	f003 fc61 	bl	800507e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80017bc:	200d      	movs	r0, #13
 80017be:	f003 fc7a 	bl	80050b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	200e      	movs	r0, #14
 80017c8:	f003 fc59 	bl	800507e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80017cc:	200e      	movs	r0, #14
 80017ce:	f003 fc72 	bl	80050b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	200f      	movs	r0, #15
 80017d8:	f003 fc51 	bl	800507e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80017dc:	200f      	movs	r0, #15
 80017de:	f003 fc6a 	bl	80050b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	202f      	movs	r0, #47	@ 0x2f
 80017e8:	f003 fc49 	bl	800507e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80017ec:	202f      	movs	r0, #47	@ 0x2f
 80017ee:	f003 fc62 	bl	80050b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	203a      	movs	r0, #58	@ 0x3a
 80017f8:	f003 fc41 	bl	800507e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017fc:	203a      	movs	r0, #58	@ 0x3a
 80017fe:	f003 fc5a 	bl	80050b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	203b      	movs	r0, #59	@ 0x3b
 8001808:	f003 fc39 	bl	800507e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800180c:	203b      	movs	r0, #59	@ 0x3b
 800180e:	f003 fc52 	bl	80050b6 <HAL_NVIC_EnableIRQ>

}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800

08001820 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b2c      	ldr	r3, [pc, #176]	@ (80018ec <MX_GPIO_Init+0xcc>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a2b      	ldr	r2, [pc, #172]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b29      	ldr	r3, [pc, #164]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a24      	ldr	r2, [pc, #144]	@ (80018ec <MX_GPIO_Init+0xcc>)
 800185c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4a1d      	ldr	r2, [pc, #116]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	4b17      	ldr	r3, [pc, #92]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a16      	ldr	r2, [pc, #88]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <MX_GPIO_Init+0xcc>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2140      	movs	r1, #64	@ 0x40
 80018aa:	4811      	ldr	r0, [pc, #68]	@ (80018f0 <MX_GPIO_Init+0xd0>)
 80018ac:	f004 f966 	bl	8005b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_LATCH_Pin;
 80018b0:	2340      	movs	r3, #64	@ 0x40
 80018b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_LATCH_GPIO_Port, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	480a      	ldr	r0, [pc, #40]	@ (80018f0 <MX_GPIO_Init+0xd0>)
 80018c8:	f003 ffbc 	bl	8005844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 80018cc:	2320      	movs	r3, #32
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4619      	mov	r1, r3
 80018de:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <MX_GPIO_Init+0xd4>)
 80018e0:	f003 ffb0 	bl	8005844 <HAL_GPIO_Init>

}
 80018e4:	bf00      	nop
 80018e6:	3728      	adds	r7, #40	@ 0x28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020000 	.word	0x40020000
 80018f4:	40020400 	.word	0x40020400

080018f8 <IsNmeaSeparator>:
extern DMA_HandleTypeDef hdma_usart1_rx;
uint8_t gps_dma_buffer[GPS_DMA_BUFFER_SIZE];
gps_data_t gps_data = {0};
static uint16_t old_pos = 0;
static bool IsNmeaSeparator(char c)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
    return (c == ',' || c == '*');  // Zwraca true, jeśli znak jest ',' lub '*'
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	2b2c      	cmp	r3, #44	@ 0x2c
 8001906:	d002      	beq.n	800190e <IsNmeaSeparator+0x16>
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	2b2a      	cmp	r3, #42	@ 0x2a
 800190c:	d101      	bne.n	8001912 <IsNmeaSeparator+0x1a>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <IsNmeaSeparator+0x1c>
 8001912:	2300      	movs	r3, #0
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	b2db      	uxtb	r3, r3
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <ParseUInt8>:
static uint8_t ParseUInt8(const char *startingPtr, uint8_t maxLen)
{
 8001926:	b480      	push	{r7}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;  // Inicjalizacja zmiennej do przechowywania wyniku
 8001932:	2300      	movs	r3, #0
 8001934:	73fb      	strb	r3, [r7, #15]
    // Iteracja przez każdy znak w ciągu, do maksymalnej długości
    for (uint8_t i = 0; i < maxLen; i++)
 8001936:	2300      	movs	r3, #0
 8001938:	73bb      	strb	r3, [r7, #14]
 800193a:	e01c      	b.n	8001976 <ParseUInt8+0x50>
    {
        // Sprawdzenie, czy znak jest cyfrą ('0' - '9')
        if (startingPtr[i] < '0' || startingPtr[i] > '9')
 800193c:	7bbb      	ldrb	r3, [r7, #14]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b2f      	cmp	r3, #47	@ 0x2f
 8001946:	d91a      	bls.n	800197e <ParseUInt8+0x58>
 8001948:	7bbb      	ldrb	r3, [r7, #14]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b39      	cmp	r3, #57	@ 0x39
 8001952:	d814      	bhi.n	800197e <ParseUInt8+0x58>
            break;  // Przerwanie pętli, jeśli znak nie jest cyfrą
        // Aktualizacja wartości poprzez przesunięcie dziesiętne i dodanie nowej cyfry
        value = (uint8_t)(value * 10 + (startingPtr[i] - '0'));
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	461a      	mov	r2, r3
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	b2da      	uxtb	r2, r3
 8001960:	7bbb      	ldrb	r3, [r7, #14]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	440b      	add	r3, r1
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4413      	add	r3, r2
 800196a:	b2db      	uxtb	r3, r3
 800196c:	3b30      	subs	r3, #48	@ 0x30
 800196e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < maxLen; i++)
 8001970:	7bbb      	ldrb	r3, [r7, #14]
 8001972:	3301      	adds	r3, #1
 8001974:	73bb      	strb	r3, [r7, #14]
 8001976:	7bba      	ldrb	r2, [r7, #14]
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	429a      	cmp	r2, r3
 800197c:	d3de      	bcc.n	800193c <ParseUInt8+0x16>
    }
    return value;  // Zwrócenie sparsowanej wartości
 800197e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <ParseGPRMC>:
 * // gps_data.day = 23
 * // gps_data.month = 03
 * // gps_data.year = 94
 */
static void ParseGPRMC(const char *nmeaLine)
{
 800198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198e:	b091      	sub	sp, #68	@ 0x44
 8001990:	af04      	add	r7, sp, #16
 8001992:	6078      	str	r0, [r7, #4]
    const char *p = nmeaLine;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t fieldIndex = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    const char *fieldPtr = NULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
    for (; *p != '\0'; p++)
 80019a2:	e071      	b.n	8001a88 <ParseGPRMC+0xfc>
    {
        if (IsNmeaSeparator(*p) || *p == '\r' || *p == '\n')
 80019a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ffa5 	bl	80018f8 <IsNmeaSeparator>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d107      	bne.n	80019c4 <ParseGPRMC+0x38>
 80019b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b0d      	cmp	r3, #13
 80019ba:	d003      	beq.n	80019c4 <ParseGPRMC+0x38>
 80019bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b0a      	cmp	r3, #10
 80019c2:	d155      	bne.n	8001a70 <ParseGPRMC+0xe4>
        {
            if (fieldPtr)
 80019c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d04a      	beq.n	8001a60 <ParseGPRMC+0xd4>
            {
                switch(fieldIndex)
 80019ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80019ce:	2b09      	cmp	r3, #9
 80019d0:	d028      	beq.n	8001a24 <ParseGPRMC+0x98>
 80019d2:	2b09      	cmp	r3, #9
 80019d4:	dc43      	bgt.n	8001a5e <ParseGPRMC+0xd2>
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d002      	beq.n	80019e0 <ParseGPRMC+0x54>
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d01d      	beq.n	8001a1a <ParseGPRMC+0x8e>
                        gps_data.day   = ParseUInt8(fieldPtr, 2);
                        gps_data.month = ParseUInt8(fieldPtr+2, 2);
                        gps_data.year  = ParseUInt8(fieldPtr+4, 2);
                        break;
                    default:
                        break;
 80019de:	e03e      	b.n	8001a5e <ParseGPRMC+0xd2>
                        gps_data.hours   = ParseUInt8(fieldPtr, 2);
 80019e0:	2102      	movs	r1, #2
 80019e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019e4:	f7ff ff9f 	bl	8001926 <ParseUInt8>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b42      	ldr	r3, [pc, #264]	@ (8001af8 <ParseGPRMC+0x16c>)
 80019ee:	701a      	strb	r2, [r3, #0]
                        gps_data.minutes = ParseUInt8(fieldPtr+2, 2);
 80019f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f2:	3302      	adds	r3, #2
 80019f4:	2102      	movs	r1, #2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ff95 	bl	8001926 <ParseUInt8>
 80019fc:	4603      	mov	r3, r0
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b3d      	ldr	r3, [pc, #244]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001a02:	705a      	strb	r2, [r3, #1]
                        gps_data.seconds = ParseUInt8(fieldPtr+4, 2);
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	3304      	adds	r3, #4
 8001a08:	2102      	movs	r1, #2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff8b 	bl	8001926 <ParseUInt8>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b38      	ldr	r3, [pc, #224]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001a16:	709a      	strb	r2, [r3, #2]
                        break;
 8001a18:	e022      	b.n	8001a60 <ParseGPRMC+0xd4>
                        gps_data.fix = *fieldPtr;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	4b36      	ldr	r3, [pc, #216]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001a20:	71da      	strb	r2, [r3, #7]
                        break;
 8001a22:	e01d      	b.n	8001a60 <ParseGPRMC+0xd4>
                        gps_data.day   = ParseUInt8(fieldPtr, 2);
 8001a24:	2102      	movs	r1, #2
 8001a26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a28:	f7ff ff7d 	bl	8001926 <ParseUInt8>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b31      	ldr	r3, [pc, #196]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001a32:	70da      	strb	r2, [r3, #3]
                        gps_data.month = ParseUInt8(fieldPtr+2, 2);
 8001a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a36:	3302      	adds	r3, #2
 8001a38:	2102      	movs	r1, #2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff73 	bl	8001926 <ParseUInt8>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001a46:	711a      	strb	r2, [r3, #4]
                        gps_data.year  = ParseUInt8(fieldPtr+4, 2);
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ff69 	bl	8001926 <ParseUInt8>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001a5a:	715a      	strb	r2, [r3, #5]
                        break;
 8001a5c:	e000      	b.n	8001a60 <ParseGPRMC+0xd4>
                        break;
 8001a5e:	bf00      	nop
                }
            }
            fieldPtr = NULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
            fieldIndex++;
 8001a64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001a68:	3301      	adds	r3, #1
 8001a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001a6e:	e004      	b.n	8001a7a <ParseGPRMC+0xee>
        }
        else
        {
            if (!fieldPtr) fieldPtr = p;
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <ParseGPRMC+0xee>
 8001a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (*p == '*') break;
 8001a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a80:	d007      	beq.n	8001a92 <ParseGPRMC+0x106>
    for (; *p != '\0'; p++)
 8001a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a84:	3301      	adds	r3, #1
 8001a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d189      	bne.n	80019a4 <ParseGPRMC+0x18>
 8001a90:	e000      	b.n	8001a94 <ParseGPRMC+0x108>
        if (*p == '*') break;
 8001a92:	bf00      	nop
    }
    // Natychmiastowa aktualizacja RTC zaraz po poprawnym odczycie GPRMC
    // (sprawdzamy czy fix jest 'A'):
    if (gps_data.fix == 'A')
 8001a94:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001a96:	79db      	ldrb	r3, [r3, #7]
 8001a98:	2b41      	cmp	r3, #65	@ 0x41
 8001a9a:	d129      	bne.n	8001af0 <ParseGPRMC+0x164>
        // Tworzymy struktury dla lokalnego czasu
        RTC_TimeTypeDef localTime;
        RTC_DateTypeDef localDate;

        // Konwertuj z GPS (UTC) na czas lokalny
        ConvertUtcToLocalTime(gps_data.hours, gps_data.minutes, gps_data.seconds,
 8001a9c:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001a9e:	7818      	ldrb	r0, [r3, #0]
 8001aa0:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001aa2:	785c      	ldrb	r4, [r3, #1]
 8001aa4:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001aa6:	789d      	ldrb	r5, [r3, #2]
 8001aa8:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001aaa:	78de      	ldrb	r6, [r3, #3]
 8001aac:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001aae:	791b      	ldrb	r3, [r3, #4]
 8001ab0:	4a11      	ldr	r2, [pc, #68]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001ab2:	7952      	ldrb	r2, [r2, #5]
 8001ab4:	f107 010c 	add.w	r1, r7, #12
 8001ab8:	9103      	str	r1, [sp, #12]
 8001aba:	f107 0110 	add.w	r1, r7, #16
 8001abe:	9102      	str	r1, [sp, #8]
 8001ac0:	9201      	str	r2, [sp, #4]
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	4633      	mov	r3, r6
 8001ac6:	462a      	mov	r2, r5
 8001ac8:	4621      	mov	r1, r4
 8001aca:	f000 f911 	bl	8001cf0 <ConvertUtcToLocalTime>
                              gps_data.day,   gps_data.month,  gps_data.year,
                              &localTime, &localDate);
        // I wpisz do RTC
        HAL_RTC_SetTime(&hrtc, &localTime, RTC_FORMAT_BIN);
 8001ace:	f107 0310 	add.w	r3, r7, #16
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4809      	ldr	r0, [pc, #36]	@ (8001afc <ParseGPRMC+0x170>)
 8001ad8:	f007 fb23 	bl	8009122 <HAL_RTC_SetTime>
        HAL_RTC_SetDate(&hrtc, &localDate, RTC_FORMAT_BIN);
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	@ (8001afc <ParseGPRMC+0x170>)
 8001ae6:	f007 fc14 	bl	8009312 <HAL_RTC_SetDate>
        colon =1;
 8001aea:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <ParseGPRMC+0x174>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
    }
}
 8001af0:	bf00      	nop
 8001af2:	3734      	adds	r7, #52	@ 0x34
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af8:	20000530 	.word	0x20000530
 8001afc:	20000710 	.word	0x20000710
 8001b00:	2000012d 	.word	0x2000012d

08001b04 <ParseGPGGA>:

static void ParseGPGGA(const char *nmeaLine)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
    const char *p = nmeaLine;          // Wskaźnik do iteracji przez ciąg znaków
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	617b      	str	r3, [r7, #20]
    uint8_t fieldIndex = 0;            // Indeks aktualnie przetwarzanego pola
 8001b10:	2300      	movs	r3, #0
 8001b12:	74fb      	strb	r3, [r7, #19]
    const char *fieldPtr = NULL;       // Wskaźnik do początku aktualnego pola
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
    // Iteracja przez każdy znak w linii NMEA
    for (; *p != '\0'; p++)
 8001b18:	e02f      	b.n	8001b7a <ParseGPGGA+0x76>
    {
        // Sprawdzenie, czy znak jest separatorem lub końcem linii
        if (IsNmeaSeparator(*p) || *p == '\r' || *p == '\n')
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff feea 	bl	80018f8 <IsNmeaSeparator>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d107      	bne.n	8001b3a <ParseGPGGA+0x36>
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b0d      	cmp	r3, #13
 8001b30:	d003      	beq.n	8001b3a <ParseGPGGA+0x36>
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b0a      	cmp	r3, #10
 8001b38:	d113      	bne.n	8001b62 <ParseGPGGA+0x5e>
        {
            // Jeśli aktualne pole nie jest puste i indeks pola to 7, przetwarzamy jego zawartość
            if (fieldPtr && fieldIndex == 7)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00a      	beq.n	8001b56 <ParseGPGGA+0x52>
 8001b40:	7cfb      	ldrb	r3, [r7, #19]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	d107      	bne.n	8001b56 <ParseGPGGA+0x52>
            {
                gps_data.satellites = ParseUInt8(fieldPtr, 2);    // Liczba satelit (np. '08' oznacza 8)
 8001b46:	2102      	movs	r1, #2
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f7ff feec 	bl	8001926 <ParseUInt8>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <ParseGPGGA+0x8c>)
 8001b54:	719a      	strb	r2, [r3, #6]
            }
            fieldPtr = NULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
            fieldIndex++;
 8001b5a:	7cfb      	ldrb	r3, [r7, #19]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	74fb      	strb	r3, [r7, #19]
 8001b60:	e004      	b.n	8001b6c <ParseGPGGA+0x68>
        }
        else
        {
            // Jeśli jeszcze nie ustawiono początku pola, ustawiamy wskaźnik
            if (!fieldPtr)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <ParseGPGGA+0x68>
                fieldPtr = p;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	60fb      	str	r3, [r7, #12]
        }
        // Jeśli napotkano '*', kończymy parsowanie tej linii
        if (*p == '*')
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b72:	d007      	beq.n	8001b84 <ParseGPGGA+0x80>
    for (; *p != '\0'; p++)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3301      	adds	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1cb      	bne.n	8001b1a <ParseGPGGA+0x16>
            break;
    }
}
 8001b82:	e000      	b.n	8001b86 <ParseGPGGA+0x82>
            break;
 8001b84:	bf00      	nop
}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000530 	.word	0x20000530

08001b94 <GPS_ProcessBuffer>:

void GPS_ProcessBuffer(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
    /* Obliczenie aktualnej pozycji w buforze */
    uint16_t now_pos = GPS_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8001b9a:	4b40      	ldr	r3, [pc, #256]	@ (8001c9c <GPS_ProcessBuffer+0x108>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8001ba6:	80fb      	strh	r3, [r7, #6]
    while (old_pos != now_pos)
 8001ba8:	e06d      	b.n	8001c86 <GPS_ProcessBuffer+0xf2>
    {
        char c = (char)gps_dma_buffer[old_pos];
 8001baa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca0 <GPS_ProcessBuffer+0x10c>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca4 <GPS_ProcessBuffer+0x110>)
 8001bb2:	5c9b      	ldrb	r3, [r3, r2]
 8001bb4:	717b      	strb	r3, [r7, #5]
        static char lineBuf[128];
        static uint8_t lineIndex = 0;
        if (lineIndex < sizeof(lineBuf) - 1)
 8001bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca8 <GPS_ProcessBuffer+0x114>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b7e      	cmp	r3, #126	@ 0x7e
 8001bbc:	d809      	bhi.n	8001bd2 <GPS_ProcessBuffer+0x3e>
        {
            lineBuf[lineIndex++] = c;
 8001bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca8 <GPS_ProcessBuffer+0x114>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	b2d1      	uxtb	r1, r2
 8001bc6:	4a38      	ldr	r2, [pc, #224]	@ (8001ca8 <GPS_ProcessBuffer+0x114>)
 8001bc8:	7011      	strb	r1, [r2, #0]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4a37      	ldr	r2, [pc, #220]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001bce:	797b      	ldrb	r3, [r7, #5]
 8001bd0:	5453      	strb	r3, [r2, r1]
        }
        if (c == '\n' || c == '\r')
 8001bd2:	797b      	ldrb	r3, [r7, #5]
 8001bd4:	2b0a      	cmp	r3, #10
 8001bd6:	d002      	beq.n	8001bde <GPS_ProcessBuffer+0x4a>
 8001bd8:	797b      	ldrb	r3, [r7, #5]
 8001bda:	2b0d      	cmp	r3, #13
 8001bdc:	d145      	bne.n	8001c6a <GPS_ProcessBuffer+0xd6>
        {
            lineBuf[lineIndex] = '\0';
 8001bde:	4b32      	ldr	r3, [pc, #200]	@ (8001ca8 <GPS_ProcessBuffer+0x114>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b31      	ldr	r3, [pc, #196]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001be6:	2100      	movs	r1, #0
 8001be8:	5499      	strb	r1, [r3, r2]
            if (strncmp(lineBuf, "$GPRMC", 6) == 0)
 8001bea:	2206      	movs	r2, #6
 8001bec:	4930      	ldr	r1, [pc, #192]	@ (8001cb0 <GPS_ProcessBuffer+0x11c>)
 8001bee:	482f      	ldr	r0, [pc, #188]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001bf0:	f009 ff9e 	bl	800bb30 <strncmp>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <GPS_ProcessBuffer+0x6c>
            {
                ParseGPRMC(lineBuf);
 8001bfa:	482c      	ldr	r0, [pc, #176]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001bfc:	f7ff fec6 	bl	800198c <ParseGPRMC>
            }
          if (strncmp(lineBuf, "$GPGGA", 6) == 0)
 8001c00:	2206      	movs	r2, #6
 8001c02:	492c      	ldr	r1, [pc, #176]	@ (8001cb4 <GPS_ProcessBuffer+0x120>)
 8001c04:	4829      	ldr	r0, [pc, #164]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001c06:	f009 ff93 	bl	800bb30 <strncmp>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <GPS_ProcessBuffer+0x82>
            {
                ParseGPGGA(lineBuf);
 8001c10:	4826      	ldr	r0, [pc, #152]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001c12:	f7ff ff77 	bl	8001b04 <ParseGPGGA>
            }
            if (strncmp(lineBuf, "$GPRMC", 6) == 0 || strncmp(lineBuf, "$GNRMC", 6) == 0)
 8001c16:	2206      	movs	r2, #6
 8001c18:	4925      	ldr	r1, [pc, #148]	@ (8001cb0 <GPS_ProcessBuffer+0x11c>)
 8001c1a:	4824      	ldr	r0, [pc, #144]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001c1c:	f009 ff88 	bl	800bb30 <strncmp>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <GPS_ProcessBuffer+0xa2>
 8001c26:	2206      	movs	r2, #6
 8001c28:	4923      	ldr	r1, [pc, #140]	@ (8001cb8 <GPS_ProcessBuffer+0x124>)
 8001c2a:	4820      	ldr	r0, [pc, #128]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001c2c:	f009 ff80 	bl	800bb30 <strncmp>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d103      	bne.n	8001c3e <GPS_ProcessBuffer+0xaa>
            {
                ParseGPRMC(lineBuf);
 8001c36:	481d      	ldr	r0, [pc, #116]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001c38:	f7ff fea8 	bl	800198c <ParseGPRMC>
 8001c3c:	e012      	b.n	8001c64 <GPS_ProcessBuffer+0xd0>
            }
            else if (strncmp(lineBuf, "$GPGGA", 6) == 0 || strncmp(lineBuf, "$GNGGA", 6) == 0)
 8001c3e:	2206      	movs	r2, #6
 8001c40:	491c      	ldr	r1, [pc, #112]	@ (8001cb4 <GPS_ProcessBuffer+0x120>)
 8001c42:	481a      	ldr	r0, [pc, #104]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001c44:	f009 ff74 	bl	800bb30 <strncmp>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <GPS_ProcessBuffer+0xca>
 8001c4e:	2206      	movs	r2, #6
 8001c50:	491a      	ldr	r1, [pc, #104]	@ (8001cbc <GPS_ProcessBuffer+0x128>)
 8001c52:	4816      	ldr	r0, [pc, #88]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001c54:	f009 ff6c 	bl	800bb30 <strncmp>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d102      	bne.n	8001c64 <GPS_ProcessBuffer+0xd0>
            {
                ParseGPGGA(lineBuf);
 8001c5e:	4813      	ldr	r0, [pc, #76]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001c60:	f7ff ff50 	bl	8001b04 <ParseGPGGA>
            }
            lineIndex = 0;
 8001c64:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <GPS_ProcessBuffer+0x114>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
        }
        old_pos++;
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca0 <GPS_ProcessBuffer+0x10c>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <GPS_ProcessBuffer+0x10c>)
 8001c74:	801a      	strh	r2, [r3, #0]
        if (old_pos >= GPS_DMA_BUFFER_SIZE)
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <GPS_ProcessBuffer+0x10c>)
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c7e:	d302      	bcc.n	8001c86 <GPS_ProcessBuffer+0xf2>
            old_pos = 0;
 8001c80:	4b07      	ldr	r3, [pc, #28]	@ (8001ca0 <GPS_ProcessBuffer+0x10c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	801a      	strh	r2, [r3, #0]
    while (old_pos != now_pos)
 8001c86:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <GPS_ProcessBuffer+0x10c>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	88fa      	ldrh	r2, [r7, #6]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d18c      	bne.n	8001baa <GPS_ProcessBuffer+0x16>
    }
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000a68 	.word	0x20000a68
 8001ca0:	20000538 	.word	0x20000538
 8001ca4:	20000130 	.word	0x20000130
 8001ca8:	2000053a 	.word	0x2000053a
 8001cac:	2000053c 	.word	0x2000053c
 8001cb0:	0800c484 	.word	0x0800c484
 8001cb4:	0800c48c 	.word	0x0800c48c
 8001cb8:	0800c494 	.word	0x0800c494
 8001cbc:	0800c49c 	.word	0x0800c49c

08001cc0 <GPS_Init>:

void GPS_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
    memset(&gps_data, 0, sizeof(gps_data));
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4806      	ldr	r0, [pc, #24]	@ (8001ce4 <GPS_Init+0x24>)
 8001cca:	f009 ff29 	bl	800bb20 <memset>
    memset(gps_dma_buffer, 0, GPS_DMA_BUFFER_SIZE);
 8001cce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4804      	ldr	r0, [pc, #16]	@ (8001ce8 <GPS_Init+0x28>)
 8001cd6:	f009 ff23 	bl	800bb20 <memset>
    old_pos = 0;
 8001cda:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <GPS_Init+0x2c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	801a      	strh	r2, [r3, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000530 	.word	0x20000530
 8001ce8:	20000130 	.word	0x20000130
 8001cec:	20000538 	.word	0x20000538

08001cf0 <ConvertUtcToLocalTime>:

void ConvertUtcToLocalTime(uint8_t utcHours, uint8_t utcMinutes,
		uint8_t utcSeconds, uint8_t utcDay, uint8_t utcMonth, uint8_t utcYear,
		RTC_TimeTypeDef *localTime, RTC_DateTypeDef *localDate) {
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b08d      	sub	sp, #52	@ 0x34
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	4608      	mov	r0, r1
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4623      	mov	r3, r4
 8001d00:	71fb      	strb	r3, [r7, #7]
 8001d02:	4603      	mov	r3, r0
 8001d04:	71bb      	strb	r3, [r7, #6]
 8001d06:	460b      	mov	r3, r1
 8001d08:	717b      	strb	r3, [r7, #5]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	713b      	strb	r3, [r7, #4]
	// UTC+1 dla Polski w czasie zimowym, a UTC+2 latem:
	// year w RTC to 00..99, można przerobić na 20xx itp.
	// Załóżmy, że gps_data.year = 24 oznacza 2024 (proste uproszczenie)
	uint16_t fullYear = 2000 + utcYear;
 8001d0e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001d18:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int offset = 1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (IsDstActive(fullYear, utcMonth, utcDay)) {
 8001d1e:	793a      	ldrb	r2, [r7, #4]
 8001d20:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 8001d24:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f909 	bl	8001f3e <IsDstActive>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <ConvertUtcToLocalTime+0x46>
		offset = 2;
 8001d32:	2302      	movs	r3, #2
 8001d34:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	int hour = utcHours + offset;
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d3a:	4413      	add	r3, r2
 8001d3c:	627b      	str	r3, [r7, #36]	@ 0x24
	int minute = utcMinutes;
 8001d3e:	79bb      	ldrb	r3, [r7, #6]
 8001d40:	61bb      	str	r3, [r7, #24]
	int second = utcSeconds;
 8001d42:	797b      	ldrb	r3, [r7, #5]
 8001d44:	617b      	str	r3, [r7, #20]

	int day = utcDay;
 8001d46:	793b      	ldrb	r3, [r7, #4]
 8001d48:	623b      	str	r3, [r7, #32]
	int month = utcMonth;
 8001d4a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001d4e:	61fb      	str	r3, [r7, #28]
	int yearXX = utcYear;   // 0..99 w RTC
 8001d50:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001d54:	613b      	str	r3, [r7, #16]


	DOW = GetDayOfWeek(fullYear, utcMonth, utcDay);
 8001d56:	793a      	ldrb	r2, [r7, #4]
 8001d58:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 8001d5c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 f92a 	bl	8001fb8 <GetDayOfWeek>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b3b      	ldr	r3, [pc, #236]	@ (8001e58 <ConvertUtcToLocalTime+0x168>)
 8001d6a:	701a      	strb	r2, [r3, #0]

	// Ale do obliczeń powyżej używamy fullYear (np. 2024)
	// Korekty przekroczeń doby
	if (hour >= 24) {
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	2b17      	cmp	r3, #23
 8001d70:	dd20      	ble.n	8001db4 <ConvertUtcToLocalTime+0xc4>
		hour -= 24;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	3b18      	subs	r3, #24
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
		day++;
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	623b      	str	r3, [r7, #32]
		// sprawdź, czy nie przekraczamy dni w tym miesiącu
		uint8_t mdays = DaysInMonth(fullYear, month);
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d84:	4611      	mov	r1, r2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f86a 	bl	8001e60 <DaysInMonth>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	73fb      	strb	r3, [r7, #15]
		if (day > mdays) {
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	6a3a      	ldr	r2, [r7, #32]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dd2d      	ble.n	8001df4 <ConvertUtcToLocalTime+0x104>
			day = 1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	623b      	str	r3, [r7, #32]
			month++;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	61fb      	str	r3, [r7, #28]
			if (month > 12) {
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	2b0c      	cmp	r3, #12
 8001da6:	dd25      	ble.n	8001df4 <ConvertUtcToLocalTime+0x104>
				month = 1;
 8001da8:	2301      	movs	r3, #1
 8001daa:	61fb      	str	r3, [r7, #28]
				fullYear++;
 8001dac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001dae:	3301      	adds	r3, #1
 8001db0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001db2:	e01f      	b.n	8001df4 <ConvertUtcToLocalTime+0x104>
			}
		}
	} else if (hour < 0) {
 8001db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	da1c      	bge.n	8001df4 <ConvertUtcToLocalTime+0x104>
		hour += 24;
 8001dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbc:	3318      	adds	r3, #24
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
		day--;
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	623b      	str	r3, [r7, #32]
		if (day < 1) {
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	dc13      	bgt.n	8001df4 <ConvertUtcToLocalTime+0x104>
			// cofka do poprzedniego miesiąca
			month--;
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	61fb      	str	r3, [r7, #28]
			if (month < 1) {
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	dc04      	bgt.n	8001de2 <ConvertUtcToLocalTime+0xf2>
				month = 12;
 8001dd8:	230c      	movs	r3, #12
 8001dda:	61fb      	str	r3, [r7, #28]
				fullYear--;
 8001ddc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001dde:	3b01      	subs	r3, #1
 8001de0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			}
			day = DaysInMonth(fullYear, month);
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001de8:	4611      	mov	r1, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f838 	bl	8001e60 <DaysInMonth>
 8001df0:	4603      	mov	r3, r0
 8001df2:	623b      	str	r3, [r7, #32]
		}
	}
	// fullYear z powrotem do 00..99
	// Proste: np. 2025 -> 25
	yearXX = (uint8_t) (fullYear % 100);
 8001df4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001df6:	4a19      	ldr	r2, [pc, #100]	@ (8001e5c <ConvertUtcToLocalTime+0x16c>)
 8001df8:	fba2 1203 	umull	r1, r2, r2, r3
 8001dfc:	0952      	lsrs	r2, r2, #5
 8001dfe:	2164      	movs	r1, #100	@ 0x64
 8001e00:	fb01 f202 	mul.w	r2, r1, r2
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	613b      	str	r3, [r7, #16]
	// Zapis do struktur RTC
	localTime->Hours = hour;
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e12:	701a      	strb	r2, [r3, #0]
	localTime->Minutes = minute;
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e1a:	705a      	strb	r2, [r3, #1]
	localTime->Seconds = second;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e22:	709a      	strb	r2, [r3, #2]
	localTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
	localTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8001e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
	localDate->Date = (uint8_t) day;
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e36:	709a      	strb	r2, [r3, #2]
	localDate->Month = (uint8_t) month;
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e3e:	705a      	strb	r2, [r3, #1]
	localDate->Year = (uint8_t) yearXX;
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e46:	70da      	strb	r2, [r3, #3]
	localDate->WeekDay = RTC_WEEKDAY_MONDAY; // albo oblicz w oparciu o GetDayOfWeek
 8001e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	3734      	adds	r7, #52	@ 0x34
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd90      	pop	{r4, r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2000012c 	.word	0x2000012c
 8001e5c:	51eb851f 	.word	0x51eb851f

08001e60 <DaysInMonth>:
uint8_t DaysInMonth(uint16_t year, uint8_t month) {
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	460a      	mov	r2, r1
 8001e6a:	80fb      	strh	r3, [r7, #6]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	717b      	strb	r3, [r7, #5]
	static const uint8_t daysTable[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30,
			31, 30, 31 };
	if (month == 2)  // luty
 8001e70:	797b      	ldrb	r3, [r7, #5]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d12f      	bne.n	8001ed6 <DaysInMonth+0x76>
			{
		// Sprawdź, czy rok przestępny
		// „Rok przestępny” jeżeli:
		//  - rok % 4 == 0 i rok % 100 != 0
		//  - lub rok % 400 == 0
		bool leap = false;
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]
		if ((year % 400) == 0) {
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001eec <DaysInMonth+0x8c>)
 8001e7e:	fba2 1203 	umull	r1, r2, r2, r3
 8001e82:	09d2      	lsrs	r2, r2, #7
 8001e84:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001e88:	fb01 f202 	mul.w	r2, r1, r2
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d102      	bne.n	8001e9a <DaysInMonth+0x3a>
			leap = true;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e016      	b.n	8001ec8 <DaysInMonth+0x68>
		} else if ((year % 100) == 0) {
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	4a13      	ldr	r2, [pc, #76]	@ (8001eec <DaysInMonth+0x8c>)
 8001e9e:	fba2 1203 	umull	r1, r2, r2, r3
 8001ea2:	0952      	lsrs	r2, r2, #5
 8001ea4:	2164      	movs	r1, #100	@ 0x64
 8001ea6:	fb01 f202 	mul.w	r2, r1, r2
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <DaysInMonth+0x58>
			leap = false;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
 8001eb6:	e007      	b.n	8001ec8 <DaysInMonth+0x68>
		} else if ((year % 4) == 0) {
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <DaysInMonth+0x68>
			leap = true;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
		}
		return (leap ? 29 : 28);
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <DaysInMonth+0x72>
 8001ece:	231d      	movs	r3, #29
 8001ed0:	e005      	b.n	8001ede <DaysInMonth+0x7e>
 8001ed2:	231c      	movs	r3, #28
 8001ed4:	e003      	b.n	8001ede <DaysInMonth+0x7e>
	}
	return daysTable[month - 1];
 8001ed6:	797b      	ldrb	r3, [r7, #5]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	4a05      	ldr	r2, [pc, #20]	@ (8001ef0 <DaysInMonth+0x90>)
 8001edc:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	51eb851f 	.word	0x51eb851f
 8001ef0:	0800c580 	.word	0x0800c580

08001ef4 <GetLastSundayOfMonth>:
/**
 * @brief Zwraca numer dnia (1..31) będący ostatnią niedzielą w danym miesiącu.
 *        Np. dla roku=2024, marzec=3, może zwrócić 31, 30, 29... w zależności,
 *        co jest faktycznie niedzielą.
 */
uint8_t GetLastSundayOfMonth(uint16_t year, uint8_t month) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	460a      	mov	r2, r1
 8001efe:	80fb      	strh	r3, [r7, #6]
 8001f00:	4613      	mov	r3, r2
 8001f02:	717b      	strb	r3, [r7, #5]
	uint8_t d = DaysInMonth(year, month);
 8001f04:	797a      	ldrb	r2, [r7, #5]
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ffa8 	bl	8001e60 <DaysInMonth>
 8001f10:	4603      	mov	r3, r0
 8001f12:	73fb      	strb	r3, [r7, #15]
	while (1) {
		uint8_t dow = GetDayOfWeek(year, month, d);
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	7979      	ldrb	r1, [r7, #5]
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f84c 	bl	8001fb8 <GetDayOfWeek>
 8001f20:	4603      	mov	r3, r0
 8001f22:	73bb      	strb	r3, [r7, #14]



		if (dow == 0) { // 0 = niedziela (Sunday)
 8001f24:	7bbb      	ldrb	r3, [r7, #14]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <GetLastSundayOfMonth+0x3a>
			return d;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	e003      	b.n	8001f36 <GetLastSundayOfMonth+0x42>
		}
		d--;
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
	while (1) {
 8001f34:	e7ee      	b.n	8001f14 <GetLastSundayOfMonth+0x20>
	}
	// Teoretycznie dojdziemy na pewno do jakiejś niedzieli,
	// więc break nie jest potrzebny.
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <IsDstActive>:

bool IsDstActive(uint16_t year, uint8_t month, uint8_t day) {
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	80fb      	strh	r3, [r7, #6]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	717b      	strb	r3, [r7, #5]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	713b      	strb	r3, [r7, #4]
	// Ostatnia niedziela marca
	uint8_t lastSundayMarch = GetLastSundayOfMonth(year, 3);
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	2103      	movs	r1, #3
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ffcd 	bl	8001ef4 <GetLastSundayOfMonth>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	73fb      	strb	r3, [r7, #15]
	// Ostatnia niedziela października
	uint8_t lastSundayOctober = GetLastSundayOfMonth(year, 10);
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	210a      	movs	r1, #10
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ffc6 	bl	8001ef4 <GetLastSundayOfMonth>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	73bb      	strb	r3, [r7, #14]
	// Warunek: jeżeli data >= (3, lastSundayMarch) i data < (10, lastSundayOctober),
	// to DST = true.
	// Oczywiście trzeba uwzględnić, że jeśli month < 3 to zawsze false,
	// jeśli month > 10 to zawsze false, itd.
	// A) Jeżeli miesiąc < 3 -> zima
	if (month < 3) {
 8001f6c:	797b      	ldrb	r3, [r7, #5]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d801      	bhi.n	8001f76 <IsDstActive+0x38>
		return false;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e01b      	b.n	8001fae <IsDstActive+0x70>
	}
	// B) Jeżeli miesiąc > 10 -> zima
	if (month > 10) {
 8001f76:	797b      	ldrb	r3, [r7, #5]
 8001f78:	2b0a      	cmp	r3, #10
 8001f7a:	d901      	bls.n	8001f80 <IsDstActive+0x42>
		return false;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e016      	b.n	8001fae <IsDstActive+0x70>
	}
	// C) Jeżeli to marzec:
	if (month == 3) {
 8001f80:	797b      	ldrb	r3, [r7, #5]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d107      	bne.n	8001f96 <IsDstActive+0x58>
		// czy w danym dniu jest >= ostatniej niedzieli?
		// jeśli tak -> letni
		// jeśli nie -> zimowy
		if (day < lastSundayMarch) {
 8001f86:	793a      	ldrb	r2, [r7, #4]
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d201      	bcs.n	8001f92 <IsDstActive+0x54>
			return false;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e00d      	b.n	8001fae <IsDstActive+0x70>
		} else {
			return true;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00b      	b.n	8001fae <IsDstActive+0x70>
		}
	}
	// D) Jeżeli to październik
	if (month == 10) {
 8001f96:	797b      	ldrb	r3, [r7, #5]
 8001f98:	2b0a      	cmp	r3, #10
 8001f9a:	d107      	bne.n	8001fac <IsDstActive+0x6e>
		// czy w danym dniu jest < ostatniej niedzieli?
		// jeśli tak -> letni
		// jeśli >= -> zimowy
		if (day < lastSundayOctober) {
 8001f9c:	793a      	ldrb	r2, [r7, #4]
 8001f9e:	7bbb      	ldrb	r3, [r7, #14]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d201      	bcs.n	8001fa8 <IsDstActive+0x6a>
			return true;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e002      	b.n	8001fae <IsDstActive+0x70>
		} else {
			return false;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e000      	b.n	8001fae <IsDstActive+0x70>
		}
	}
	// E) W pozostałych miesiącach 4..9 włącznie mamy 100% DST:
	return true;
 8001fac:	2301      	movs	r3, #1
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <GetDayOfWeek>:
			// Obsługa błędu ustawiania daty
			Error_Handler();
		}
	}
}
uint8_t GetDayOfWeek(uint16_t year, uint8_t month, uint8_t day) {
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	717b      	strb	r3, [r7, #5]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	713b      	strb	r3, [r7, #4]
	// Zeller’s Congruence – wersja dla kalendarza gregoriańskiego
	// Aby działała poprawnie dla stycznia i lutego, „przesuwamy” je na poprzedni rok:
	// styczeń -> 13 poprzedniego roku
	// luty    -> 14 poprzedniego roku
	if (month < 3) {
 8001fca:	797b      	ldrb	r3, [r7, #5]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d805      	bhi.n	8001fdc <GetDayOfWeek+0x24>
		month += 12;
 8001fd0:	797b      	ldrb	r3, [r7, #5]
 8001fd2:	330c      	adds	r3, #12
 8001fd4:	717b      	strb	r3, [r7, #5]
		year -= 1;
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	80fb      	strh	r3, [r7, #6]
	}
	uint16_t K = (uint16_t) (year % 100);
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	4a23      	ldr	r2, [pc, #140]	@ (800206c <GetDayOfWeek+0xb4>)
 8001fe0:	fba2 1203 	umull	r1, r2, r2, r3
 8001fe4:	0952      	lsrs	r2, r2, #5
 8001fe6:	2164      	movs	r1, #100	@ 0x64
 8001fe8:	fb01 f202 	mul.w	r2, r1, r2
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	817b      	strh	r3, [r7, #10]
	uint16_t J = (uint16_t) (year / 100);
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800206c <GetDayOfWeek+0xb4>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	813b      	strh	r3, [r7, #8]
	// day of week in [0..6], 0=Sunday
	int32_t h = (int32_t) (day + (13 * (month + 1)) / 5 + K + (K / 4) + (J / 4)
 8001ffc:	7939      	ldrb	r1, [r7, #4]
 8001ffe:	797b      	ldrb	r3, [r7, #5]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	4a18      	ldr	r2, [pc, #96]	@ (8002070 <GetDayOfWeek+0xb8>)
 800200e:	fb82 0203 	smull	r0, r2, r2, r3
 8002012:	1052      	asrs	r2, r2, #1
 8002014:	17db      	asrs	r3, r3, #31
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	18ca      	adds	r2, r1, r3
 800201a:	897b      	ldrh	r3, [r7, #10]
 800201c:	4413      	add	r3, r2
 800201e:	897a      	ldrh	r2, [r7, #10]
 8002020:	0892      	lsrs	r2, r2, #2
 8002022:	b292      	uxth	r2, r2
 8002024:	4413      	add	r3, r2
 8002026:	893a      	ldrh	r2, [r7, #8]
 8002028:	0892      	lsrs	r2, r2, #2
 800202a:	b292      	uxth	r2, r2
 800202c:	441a      	add	r2, r3
			- (2 * J));
 800202e:	893b      	ldrh	r3, [r7, #8]
 8002030:	005b      	lsls	r3, r3, #1
	int32_t h = (int32_t) (day + (13 * (month + 1)) / 5 + K + (K / 4) + (J / 4)
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	60fb      	str	r3, [r7, #12]
	// W C++: h = (h % 7 + 7) % 7  (żeby się upewnić, że jest w 0..6):
	h = h % 7;
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4b0e      	ldr	r3, [pc, #56]	@ (8002074 <GetDayOfWeek+0xbc>)
 800203a:	fb83 1302 	smull	r1, r3, r3, r2
 800203e:	4413      	add	r3, r2
 8002040:	1099      	asrs	r1, r3, #2
 8002042:	17d3      	asrs	r3, r2, #31
 8002044:	1ac9      	subs	r1, r1, r3
 8002046:	460b      	mov	r3, r1
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	1a5b      	subs	r3, r3, r1
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	60fb      	str	r3, [r7, #12]
	if (h < 0) {
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	da02      	bge.n	800205c <GetDayOfWeek+0xa4>
		h += 7;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3307      	adds	r3, #7
 800205a:	60fb      	str	r3, [r7, #12]
	}
	return (uint8_t) h;  // 0..6
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	b2db      	uxtb	r3, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	51eb851f 	.word	0x51eb851f
 8002070:	66666667 	.word	0x66666667
 8002074:	92492493 	.word	0x92492493

08002078 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800207c:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <MX_I2C2_Init+0x50>)
 800207e:	4a13      	ldr	r2, [pc, #76]	@ (80020cc <MX_I2C2_Init+0x54>)
 8002080:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002082:	4b11      	ldr	r3, [pc, #68]	@ (80020c8 <MX_I2C2_Init+0x50>)
 8002084:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <MX_I2C2_Init+0x58>)
 8002086:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002088:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <MX_I2C2_Init+0x50>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800208e:	4b0e      	ldr	r3, [pc, #56]	@ (80020c8 <MX_I2C2_Init+0x50>)
 8002090:	2200      	movs	r2, #0
 8002092:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002094:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <MX_I2C2_Init+0x50>)
 8002096:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800209a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800209c:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <MX_I2C2_Init+0x50>)
 800209e:	2200      	movs	r2, #0
 80020a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <MX_I2C2_Init+0x50>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020a8:	4b07      	ldr	r3, [pc, #28]	@ (80020c8 <MX_I2C2_Init+0x50>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ae:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <MX_I2C2_Init+0x50>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020b4:	4804      	ldr	r0, [pc, #16]	@ (80020c8 <MX_I2C2_Init+0x50>)
 80020b6:	f003 fd7b 	bl	8005bb0 <HAL_I2C_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80020c0:	f000 fa3e 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200005bc 	.word	0x200005bc
 80020cc:	40005800 	.word	0x40005800
 80020d0:	000186a0 	.word	0x000186a0

080020d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	@ 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a58      	ldr	r2, [pc, #352]	@ (8002254 <HAL_I2C_MspInit+0x180>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	f040 80a9 	bne.w	800224a <HAL_I2C_MspInit+0x176>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	4b56      	ldr	r3, [pc, #344]	@ (8002258 <HAL_I2C_MspInit+0x184>)
 80020fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002100:	4a55      	ldr	r2, [pc, #340]	@ (8002258 <HAL_I2C_MspInit+0x184>)
 8002102:	f043 0302 	orr.w	r3, r3, #2
 8002106:	6313      	str	r3, [r2, #48]	@ 0x30
 8002108:	4b53      	ldr	r3, [pc, #332]	@ (8002258 <HAL_I2C_MspInit+0x184>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002114:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800211a:	2312      	movs	r3, #18
 800211c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002122:	2303      	movs	r3, #3
 8002124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002126:	2304      	movs	r3, #4
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212a:	f107 0314 	add.w	r3, r7, #20
 800212e:	4619      	mov	r1, r3
 8002130:	484a      	ldr	r0, [pc, #296]	@ (800225c <HAL_I2C_MspInit+0x188>)
 8002132:	f003 fb87 	bl	8005844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002136:	2308      	movs	r3, #8
 8002138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800213a:	2312      	movs	r3, #18
 800213c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002146:	2309      	movs	r3, #9
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	4842      	ldr	r0, [pc, #264]	@ (800225c <HAL_I2C_MspInit+0x188>)
 8002152:	f003 fb77 	bl	8005844 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b3f      	ldr	r3, [pc, #252]	@ (8002258 <HAL_I2C_MspInit+0x184>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	4a3e      	ldr	r2, [pc, #248]	@ (8002258 <HAL_I2C_MspInit+0x184>)
 8002160:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002164:	6413      	str	r3, [r2, #64]	@ 0x40
 8002166:	4b3c      	ldr	r3, [pc, #240]	@ (8002258 <HAL_I2C_MspInit+0x184>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8002172:	4b3b      	ldr	r3, [pc, #236]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 8002174:	4a3b      	ldr	r2, [pc, #236]	@ (8002264 <HAL_I2C_MspInit+0x190>)
 8002176:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8002178:	4b39      	ldr	r3, [pc, #228]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 800217a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800217e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002180:	4b37      	ldr	r3, [pc, #220]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002186:	4b36      	ldr	r3, [pc, #216]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 8002188:	2200      	movs	r2, #0
 800218a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800218c:	4b34      	ldr	r3, [pc, #208]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 800218e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002192:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002194:	4b32      	ldr	r3, [pc, #200]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 8002196:	2200      	movs	r2, #0
 8002198:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800219a:	4b31      	ldr	r3, [pc, #196]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80021a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80021b2:	482b      	ldr	r0, [pc, #172]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 80021b4:	f002 ff9a 	bl	80050ec <HAL_DMA_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 80021be:	f000 f9bf 	bl	8002540 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a26      	ldr	r2, [pc, #152]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 80021c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80021c8:	4a25      	ldr	r2, [pc, #148]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80021ce:	4b26      	ldr	r3, [pc, #152]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 80021d0:	4a26      	ldr	r2, [pc, #152]	@ (800226c <HAL_I2C_MspInit+0x198>)
 80021d2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80021d4:	4b24      	ldr	r3, [pc, #144]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 80021d6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80021da:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021dc:	4b22      	ldr	r3, [pc, #136]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 80021de:	2240      	movs	r2, #64	@ 0x40
 80021e0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e2:	4b21      	ldr	r3, [pc, #132]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 80021ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021ee:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80021fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002202:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002208:	4b17      	ldr	r3, [pc, #92]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 800220a:	2200      	movs	r2, #0
 800220c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800220e:	4816      	ldr	r0, [pc, #88]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 8002210:	f002 ff6c 	bl	80050ec <HAL_DMA_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_I2C_MspInit+0x14a>
    {
      Error_Handler();
 800221a:	f000 f991 	bl	8002540 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a11      	ldr	r2, [pc, #68]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 8002222:	635a      	str	r2, [r3, #52]	@ 0x34
 8002224:	4a10      	ldr	r2, [pc, #64]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	2021      	movs	r0, #33	@ 0x21
 8002230:	f002 ff25 	bl	800507e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002234:	2021      	movs	r0, #33	@ 0x21
 8002236:	f002 ff3e 	bl	80050b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	2022      	movs	r0, #34	@ 0x22
 8002240:	f002 ff1d 	bl	800507e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002244:	2022      	movs	r0, #34	@ 0x22
 8002246:	f002 ff36 	bl	80050b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800224a:	bf00      	nop
 800224c:	3728      	adds	r7, #40	@ 0x28
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40005800 	.word	0x40005800
 8002258:	40023800 	.word	0x40023800
 800225c:	40020400 	.word	0x40020400
 8002260:	20000610 	.word	0x20000610
 8002264:	40026040 	.word	0x40026040
 8002268:	20000670 	.word	0x20000670
 800226c:	400260b8 	.word	0x400260b8

08002270 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002276:	f002 fa7b 	bl	8004770 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800227a:	f000 f88b 	bl	8002394 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	// Odblokowanie dostępu do backupu (dla RTC)
	HAL_PWR_EnableBkUpAccess();
 800227e:	f006 f973 	bl	8008568 <HAL_PWR_EnableBkUpAccess>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002290:	2302      	movs	r3, #2
 8002292:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002294:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002298:	613b      	str	r3, [r7, #16]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	4618      	mov	r0, r3
 800229e:	f006 fdcf 	bl	8008e40 <HAL_RCCEx_PeriphCLKConfig>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022a2:	f7ff fabd 	bl	8001820 <MX_GPIO_Init>
	MX_DMA_Init();
 80022a6:	f7ff fa65 	bl	8001774 <MX_DMA_Init>
	MX_SPI1_Init();
 80022aa:	f001 fcdf 	bl	8003c6c <MX_SPI1_Init>
	MX_TIM1_Init();
 80022ae:	f001 ff85 	bl	80041bc <MX_TIM1_Init>
	MX_RTC_Init();
 80022b2:	f000 fb73 	bl	800299c <MX_RTC_Init>
	MX_I2C2_Init();
 80022b6:	f7ff fedf 	bl	8002078 <MX_I2C2_Init>
	MX_ADC1_Init();
 80022ba:	f7fe f959 	bl	8000570 <MX_ADC1_Init>
	MX_TIM4_Init();
 80022be:	f002 f81d 	bl	80042fc <MX_TIM4_Init>
	MX_TIM5_Init();
 80022c2:	f002 f86f 	bl	80043a4 <MX_TIM5_Init>
	MX_USART1_UART_Init();
 80022c6:	f002 f983 	bl	80045d0 <MX_USART1_UART_Init>
	MX_SPI2_Init();
 80022ca:	f001 fd05 	bl	8003cd8 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80022ce:	2100      	movs	r1, #0
 80022d0:	4826      	ldr	r0, [pc, #152]	@ (800236c <main+0xfc>)
 80022d2:	f007 fe71 	bl	8009fb8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (htim1.Init.Period + 1) / 2);
 80022d6:	4b25      	ldr	r3, [pc, #148]	@ (800236c <main+0xfc>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	4b23      	ldr	r3, [pc, #140]	@ (800236c <main+0xfc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0852      	lsrs	r2, r2, #1
 80022e2:	635a      	str	r2, [r3, #52]	@ 0x34

	SetPWMPercentGamma(30);
 80022e4:	201e      	movs	r0, #30
 80022e6:	f7ff f84b 	bl	8001380 <SetPWMPercentGamma>
	ClearClockBits(&clockReg);
 80022ea:	4821      	ldr	r0, [pc, #132]	@ (8002370 <main+0x100>)
 80022ec:	f7fe fcb6 	bl	8000c5c <ClearClockBits>
	UpdateAllDisplays(&clockReg);
 80022f0:	481f      	ldr	r0, [pc, #124]	@ (8002370 <main+0x100>)
 80022f2:	f7ff f801 	bl	80012f8 <UpdateAllDisplays>
	SLIDER_Init();
 80022f6:	f000 ff0f 	bl	8003118 <SLIDER_Init>
	SHT30_Init();
 80022fa:	f000 fbd5 	bl	8002aa8 <SHT30_Init>
	//Set_RTC_Time();
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80022fe:	213c      	movs	r1, #60	@ 0x3c
 8002300:	481c      	ldr	r0, [pc, #112]	@ (8002374 <main+0x104>)
 8002302:	f007 ffaf 	bl	800a264 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8002306:	481c      	ldr	r0, [pc, #112]	@ (8002378 <main+0x108>)
 8002308:	f007 fd9a 	bl	8009e40 <HAL_TIM_Base_Start_IT>
	GPS_Init();
 800230c:	f7ff fcd8 	bl	8001cc0 <GPS_Init>
	if (HAL_UART_Receive_DMA(&huart1, gps_dma_buffer, GPS_DMA_BUFFER_SIZE)
 8002310:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002314:	4919      	ldr	r1, [pc, #100]	@ (800237c <main+0x10c>)
 8002316:	481a      	ldr	r0, [pc, #104]	@ (8002380 <main+0x110>)
 8002318:	f008 fee6 	bl	800b0e8 <HAL_UART_Receive_DMA>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <main+0xb6>
			!= HAL_OK) {
		Error_Handler();
 8002322:	f000 f90d 	bl	8002540 <Error_Handler>
	}
	MENU_Init();  // Zainicjuj stan menu (IDLE)
 8002326:	f000 f941 	bl	80025ac <MENU_Init>
	// Rejestracja callbacków
	Button_RegisterPressCallback(0, Button1_Pressed);
 800232a:	4916      	ldr	r1, [pc, #88]	@ (8002384 <main+0x114>)
 800232c:	2000      	movs	r0, #0
 800232e:	f7fe f9c5 	bl	80006bc <Button_RegisterPressCallback>
	Button_RegisterDoubleClickCallback(0, Button1_DoubleClicked);
 8002332:	4915      	ldr	r1, [pc, #84]	@ (8002388 <main+0x118>)
 8002334:	2000      	movs	r0, #0
 8002336:	f7fe f9f9 	bl	800072c <Button_RegisterDoubleClickCallback>
	Button_RegisterHoldCallback(0, Button1_Held);
 800233a:	4914      	ldr	r1, [pc, #80]	@ (800238c <main+0x11c>)
 800233c:	2000      	movs	r0, #0
 800233e:	f7fe f9d9 	bl	80006f4 <Button_RegisterHoldCallback>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// Odczytaj aktualny czas z RTC
		GPS_ProcessBuffer();
 8002342:	f7ff fc27 	bl	8001b94 <GPS_ProcessBuffer>
		Get_RTC_Time();
 8002346:	f000 f885 	bl	8002454 <Get_RTC_Time>
		Display();
 800234a:	f000 fa1d 	bl	8002788 <Display>


		// Opóźnij (np. 100 ms)
		// Rozpoczęcie konwersji ADC
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 800234e:	4810      	ldr	r0, [pc, #64]	@ (8002390 <main+0x120>)
 8002350:	f002 fae8 	bl	8004924 <HAL_ADC_Start>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <main+0xee>
			Error_Handler();
 800235a:	f000 f8f1 	bl	8002540 <Error_Handler>
		}
		Button_Process();
 800235e:	f7fe fa01 	bl	8000764 <Button_Process>
		HAL_Delay(10);
 8002362:	200a      	movs	r0, #10
 8002364:	f002 fa76 	bl	8004854 <HAL_Delay>
		GPS_ProcessBuffer();
 8002368:	e7eb      	b.n	8002342 <main+0xd2>
 800236a:	bf00      	nop
 800236c:	20000948 	.word	0x20000948
 8002370:	200006d0 	.word	0x200006d0
 8002374:	20000990 	.word	0x20000990
 8002378:	200009d8 	.word	0x200009d8
 800237c:	20000130 	.word	0x20000130
 8002380:	20000a20 	.word	0x20000a20
 8002384:	080024e1 	.word	0x080024e1
 8002388:	08002509 	.word	0x08002509
 800238c:	0800251f 	.word	0x0800251f
 8002390:	200000c0 	.word	0x200000c0

08002394 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b094      	sub	sp, #80	@ 0x50
 8002398:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800239a:	f107 0320 	add.w	r3, r7, #32
 800239e:	2230      	movs	r2, #48	@ 0x30
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f009 fbbc 	bl	800bb20 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	4b23      	ldr	r3, [pc, #140]	@ (800244c <SystemClock_Config+0xb8>)
 80023be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c0:	4a22      	ldr	r2, [pc, #136]	@ (800244c <SystemClock_Config+0xb8>)
 80023c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c8:	4b20      	ldr	r3, [pc, #128]	@ (800244c <SystemClock_Config+0xb8>)
 80023ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80023d4:	2300      	movs	r3, #0
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002450 <SystemClock_Config+0xbc>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80023e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002450 <SystemClock_Config+0xbc>)
 80023e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <SystemClock_Config+0xbc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 80023f4:	2305      	movs	r3, #5
 80023f6:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023fe:	2301      	movs	r3, #1
 8002400:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002402:	2300      	movs	r3, #0
 8002404:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002406:	f107 0320 	add.w	r3, r7, #32
 800240a:	4618      	mov	r0, r3
 800240c:	f006 f8c0 	bl	8008590 <HAL_RCC_OscConfig>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <SystemClock_Config+0x86>
		Error_Handler();
 8002416:	f000 f893 	bl	8002540 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800241a:	230f      	movs	r3, #15
 800241c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800241e:	2301      	movs	r3, #1
 8002420:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800242e:	f107 030c 	add.w	r3, r7, #12
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f006 fb23 	bl	8008a80 <HAL_RCC_ClockConfig>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <SystemClock_Config+0xb0>
		Error_Handler();
 8002440:	f000 f87e 	bl	8002540 <Error_Handler>
	}
}
 8002444:	bf00      	nop
 8002446:	3750      	adds	r7, #80	@ 0x50
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40023800 	.word	0x40023800
 8002450:	40007000 	.word	0x40007000

08002454 <Get_RTC_Time>:
}

/**
 * @brief Odczytuje bieżący czas z RTC.
 */
void Get_RTC_Time(void) {
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002458:	2200      	movs	r2, #0
 800245a:	4905      	ldr	r1, [pc, #20]	@ (8002470 <Get_RTC_Time+0x1c>)
 800245c:	4805      	ldr	r0, [pc, #20]	@ (8002474 <Get_RTC_Time+0x20>)
 800245e:	f006 fefa 	bl	8009256 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002462:	2200      	movs	r2, #0
 8002464:	4904      	ldr	r1, [pc, #16]	@ (8002478 <Get_RTC_Time+0x24>)
 8002466:	4803      	ldr	r0, [pc, #12]	@ (8002474 <Get_RTC_Time+0x20>)
 8002468:	f006 ffd7 	bl	800941a <HAL_RTC_GetDate>
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	200006e8 	.word	0x200006e8
 8002474:	20000710 	.word	0x20000710
 8002478:	200006fc 	.word	0x200006fc

0800247c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a13      	ldr	r2, [pc, #76]	@ (80024d8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d11f      	bne.n	80024ce <HAL_TIM_IC_CaptureCallback+0x52>
		int8_t direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(htim) ? -1 : +1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b10      	cmp	r3, #16
 800249a:	d102      	bne.n	80024a2 <HAL_TIM_IC_CaptureCallback+0x26>
 800249c:	f04f 33ff 	mov.w	r3, #4294967295
 80024a0:	e000      	b.n	80024a4 <HAL_TIM_IC_CaptureCallback+0x28>
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
		// Zamiast sprawdzać s_encoderCb, wołamy:
		Encoder_HandleInterrupt(direction);
 80024a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fab0 	bl	8000a10 <Encoder_HandleInterrupt>

		// Ewentualnie liczymy też encoderValue
		if (direction < 0)
 80024b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	da05      	bge.n	80024c4 <HAL_TIM_IC_CaptureCallback+0x48>
			encoderValue--;
 80024b8:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <HAL_TIM_IC_CaptureCallback+0x60>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3b01      	subs	r3, #1
 80024be:	4a07      	ldr	r2, [pc, #28]	@ (80024dc <HAL_TIM_IC_CaptureCallback+0x60>)
 80024c0:	6013      	str	r3, [r2, #0]
		else
			encoderValue++;
	}
}
 80024c2:	e004      	b.n	80024ce <HAL_TIM_IC_CaptureCallback+0x52>
			encoderValue++;
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <HAL_TIM_IC_CaptureCallback+0x60>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3301      	adds	r3, #1
 80024ca:	4a04      	ldr	r2, [pc, #16]	@ (80024dc <HAL_TIM_IC_CaptureCallback+0x60>)
 80024cc:	6013      	str	r3, [r2, #0]
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40000800 	.word	0x40000800
 80024dc:	20000700 	.word	0x20000700

080024e0 <Button1_Pressed>:

/* USER CODE BEGIN 0 */
void Button1_Pressed(void) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	// Jeśli menu jest aktywne, przechodzimy do kolejnego stanu w menu:
	if (MENU_IsActive()) {
 80024e4:	f000 f888 	bl	80025f8 <MENU_IsActive>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <Button1_Pressed+0x14>
		MENU_Next();
 80024ee:	f000 f8bf 	bl	8002670 <MENU_Next>
	} else {
		// Jeśli menu nie jest aktywne – można wyświetlić np. HELLO
		SLIDER_SetString("HELLO", SCROLL_RIGHT_TO_LEFT, 10);
	}
}
 80024f2:	e004      	b.n	80024fe <Button1_Pressed+0x1e>
		SLIDER_SetString("HELLO", SCROLL_RIGHT_TO_LEFT, 10);
 80024f4:	220a      	movs	r2, #10
 80024f6:	2100      	movs	r1, #0
 80024f8:	4802      	ldr	r0, [pc, #8]	@ (8002504 <Button1_Pressed+0x24>)
 80024fa:	f000 fe87 	bl	800320c <SLIDER_SetString>
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	0800c4a4 	.word	0x0800c4a4

08002508 <Button1_DoubleClicked>:

void Button1_DoubleClicked(void) {
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
	// Jeśli menu jest aktywne, wychodzimy o poziom wyżej:
	if (MENU_IsActive()) {
 800250c:	f000 f874 	bl	80025f8 <MENU_IsActive>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <Button1_DoubleClicked+0x12>
		MENU_Exit();
 8002516:	f000 f893 	bl	8002640 <MENU_Exit>
	} else {
		// Jeśli menu nieaktywne – np. uruchom coś innego
		//SLIDER_SetString("DBLCL", SCROLL_RIGHT_TO_LEFT, 10);
	}
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}

0800251e <Button1_Held>:

void Button1_Held(void) {
 800251e:	b580      	push	{r7, lr}
 8002520:	af00      	add	r7, sp, #0
	// Długie przyciśnięcie – wchodzimy do menu (o ile nie jest aktywne)

	// Długie naciśnięcie – wejście do menu (lub wyjście, jeśli chcemy).
	if (!MENU_IsActive())
 8002522:	f000 f869 	bl	80025f8 <MENU_IsActive>
 8002526:	4603      	mov	r3, r0
 8002528:	f083 0301 	eor.w	r3, r3, #1
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <Button1_Held+0x1a>
		MENU_Enter();
 8002532:	f000 f86d 	bl	8002610 <MENU_Enter>
	else
		MENU_Exit();

}
 8002536:	e001      	b.n	800253c <Button1_Held+0x1e>
		MENU_Exit();
 8002538:	f000 f882 	bl	8002640 <MENU_Exit>
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}

08002540 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002544:	b672      	cpsid	i
}
 8002546:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();
	while (1) {
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <Error_Handler+0x8>

0800254c <MENU_ShowCurrent>:
// Wyświetla aktualną pozycję menu (np. "HOUR"),
// + ewentualnie tryb w CUST.
// Jeśli to "END", to czekamy na kolejne naciśnięcie, żeby wyjść.

static void MENU_ShowCurrent(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af02      	add	r7, sp, #8
    // Jeżeli to ostatnia pozycja "END " -> pokaż tylko "END " i wyjdź.
    if (s_currentItem == MENU_ITEM_END)
 8002552:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <MENU_ShowCurrent+0x4c>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b05      	cmp	r3, #5
 8002558:	d104      	bne.n	8002564 <MENU_ShowCurrent+0x18>
    {
        SLIDER_SetStringAndStay("END ", SCROLL_RIGHT_TO_LEFT);
 800255a:	2100      	movs	r1, #0
 800255c:	480f      	ldr	r0, [pc, #60]	@ (800259c <MENU_ShowCurrent+0x50>)
 800255e:	f000 fe13 	bl	8003188 <SLIDER_SetStringAndStay>
 8002562:	e015      	b.n	8002590 <MENU_ShowCurrent+0x44>
    // "Nazwa + cyfra" w jednej linijce.
    // Mamy tablicę s_menuLabels (np. "HOUR", "SECD"...) i s_menuModes (0..4).
    // Musimy uważać na max 6 znaków (slider cina do 6).

    char temp[7]; // 6 znaków + null
    snprintf(temp, sizeof(temp), "%s%d", s_menuLabels[s_currentItem], (int)s_menuModes[s_currentItem]);
 8002564:	4b0c      	ldr	r3, [pc, #48]	@ (8002598 <MENU_ShowCurrent+0x4c>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	4b0d      	ldr	r3, [pc, #52]	@ (80025a0 <MENU_ShowCurrent+0x54>)
 800256c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002570:	4a09      	ldr	r2, [pc, #36]	@ (8002598 <MENU_ShowCurrent+0x4c>)
 8002572:	7812      	ldrb	r2, [r2, #0]
 8002574:	4611      	mov	r1, r2
 8002576:	4a0b      	ldr	r2, [pc, #44]	@ (80025a4 <MENU_ShowCurrent+0x58>)
 8002578:	5c52      	ldrb	r2, [r2, r1]
 800257a:	4638      	mov	r0, r7
 800257c:	9200      	str	r2, [sp, #0]
 800257e:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <MENU_ShowCurrent+0x5c>)
 8002580:	2107      	movs	r1, #7
 8002582:	f009 fa99 	bl	800bab8 <sniprintf>
    // np. "HOUR0", "HOUR1", "SECD3", "CUST0"...

    SLIDER_SetStringAndStay(temp, SCROLL_RIGHT_TO_LEFT);
 8002586:	463b      	mov	r3, r7
 8002588:	2100      	movs	r1, #0
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fdfc 	bl	8003188 <SLIDER_SetStringAndStay>
}
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	2000070f 	.word	0x2000070f
 800259c:	0800c4d4 	.word	0x0800c4d4
 80025a0:	20000030 	.word	0x20000030
 80025a4:	20000708 	.word	0x20000708
 80025a8:	0800c4dc 	.word	0x0800c4dc

080025ac <MENU_Init>:

// -------------------------------------------------------------------------
// Funkcje z interfejsu publicznego:

void MENU_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
    s_menuActive    = false;
 80025b2:	4b0d      	ldr	r3, [pc, #52]	@ (80025e8 <MENU_Init+0x3c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
    s_currentItem   = 0;
 80025b8:	4b0c      	ldr	r3, [pc, #48]	@ (80025ec <MENU_Init+0x40>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]

    // Wyzeruj tablicę trybów (na start wszystko = 0)
    for (int i=0; i<MENU_ITEM_COUNT; i++)
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	e007      	b.n	80025d4 <MENU_Init+0x28>
    {
        s_menuModes[i] = 0;
 80025c4:	4a0a      	ldr	r2, [pc, #40]	@ (80025f0 <MENU_Init+0x44>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<MENU_ITEM_COUNT; i++)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3301      	adds	r3, #1
 80025d2:	607b      	str	r3, [r7, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	ddf4      	ble.n	80025c4 <MENU_Init+0x18>
    }

    // Zarejestruj callback obrotu enkodera:
    Encoder_RegisterRotateCallback(MENU_OnEncoderRotate);
 80025da:	4806      	ldr	r0, [pc, #24]	@ (80025f4 <MENU_Init+0x48>)
 80025dc:	f7fe f85e 	bl	800069c <Encoder_RegisterRotateCallback>
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	2000070e 	.word	0x2000070e
 80025ec:	2000070f 	.word	0x2000070f
 80025f0:	20000708 	.word	0x20000708
 80025f4:	080026e9 	.word	0x080026e9

080025f8 <MENU_IsActive>:

bool MENU_IsActive(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
    return s_menuActive;
 80025fc:	4b03      	ldr	r3, [pc, #12]	@ (800260c <MENU_IsActive+0x14>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	2000070e 	.word	0x2000070e

08002610 <MENU_Enter>:

void MENU_Enter(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
    if (!s_menuActive)
 8002614:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <MENU_Enter+0x28>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f083 0301 	eor.w	r3, r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <MENU_Enter+0x22>
    {
        s_menuActive  = true;
 8002622:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <MENU_Enter+0x28>)
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
        s_currentItem = 0;
 8002628:	4b04      	ldr	r3, [pc, #16]	@ (800263c <MENU_Enter+0x2c>)
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
        MENU_ShowCurrent();
 800262e:	f7ff ff8d 	bl	800254c <MENU_ShowCurrent>
    }
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	2000070e 	.word	0x2000070e
 800263c:	2000070f 	.word	0x2000070f

08002640 <MENU_Exit>:

void MENU_Exit(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
    if (s_menuActive)
 8002644:	4b07      	ldr	r3, [pc, #28]	@ (8002664 <MENU_Exit+0x24>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d009      	beq.n	8002660 <MENU_Exit+0x20>
    {
        s_menuActive  = false;
 800264c:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <MENU_Exit+0x24>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
        s_currentItem = 0;
 8002652:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <MENU_Exit+0x28>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]

        // Możesz też zresetować slider, np.:
        SLIDER_SetStringAndStay("    ", SCROLL_RIGHT_TO_LEFT);
 8002658:	2100      	movs	r1, #0
 800265a:	4804      	ldr	r0, [pc, #16]	@ (800266c <MENU_Exit+0x2c>)
 800265c:	f000 fd94 	bl	8003188 <SLIDER_SetStringAndStay>
    }
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	2000070e 	.word	0x2000070e
 8002668:	2000070f 	.word	0x2000070f
 800266c:	0800c4e4 	.word	0x0800c4e4

08002670 <MENU_Next>:

void MENU_Next(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
    if (!s_menuActive) return;
 8002674:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <MENU_Next+0x44>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	f083 0301 	eor.w	r3, r3, #1
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d116      	bne.n	80026b0 <MENU_Next+0x40>

    s_currentItem++;
 8002682:	4b0d      	ldr	r3, [pc, #52]	@ (80026b8 <MENU_Next+0x48>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	3301      	adds	r3, #1
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <MENU_Next+0x48>)
 800268c:	701a      	strb	r2, [r3, #0]
    if (s_currentItem >= MENU_ITEM_COUNT)
 800268e:	4b0a      	ldr	r3, [pc, #40]	@ (80026b8 <MENU_Next+0x48>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b05      	cmp	r3, #5
 8002694:	d902      	bls.n	800269c <MENU_Next+0x2c>
    {
        // Jeśli przekroczyliśmy "END" -> wyjdź z menu
        MENU_Exit();
 8002696:	f7ff ffd3 	bl	8002640 <MENU_Exit>
        return;
 800269a:	e00a      	b.n	80026b2 <MENU_Next+0x42>
    }

    // Jeżeli jesteśmy np. na "END" i user znów wciśnie – też wychodzimy w pętli:
    if (s_currentItem == MENU_ITEM_END)
 800269c:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <MENU_Next+0x48>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	d102      	bne.n	80026aa <MENU_Next+0x3a>
    {
        // Pokaż "END "
        MENU_ShowCurrent();
 80026a4:	f7ff ff52 	bl	800254c <MENU_ShowCurrent>
        // I czekamy, aż user naciśnie przycisk -> wtedy s_currentItem++ -> exit
        return;
 80026a8:	e003      	b.n	80026b2 <MENU_Next+0x42>
    }

    // W innym przypadku normalnie pokaż nowy item
    MENU_ShowCurrent();
 80026aa:	f7ff ff4f 	bl	800254c <MENU_ShowCurrent>
 80026ae:	e000      	b.n	80026b2 <MENU_Next+0x42>
    if (!s_menuActive) return;
 80026b0:	bf00      	nop
}
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	2000070e 	.word	0x2000070e
 80026b8:	2000070f 	.word	0x2000070f

080026bc <MENU_GetMode>:
    // ewentualne odświeżanie stanu, logika do automatycznego wyjścia, itp.
    // ...
}

uint8_t MENU_GetMode(MenuItem_t item)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
    if (item >= MENU_ITEM_COUNT) return 0;
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d901      	bls.n	80026d0 <MENU_GetMode+0x14>
 80026cc:	2300      	movs	r3, #0
 80026ce:	e002      	b.n	80026d6 <MENU_GetMode+0x1a>
    return s_menuModes[item];
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	4a04      	ldr	r2, [pc, #16]	@ (80026e4 <MENU_GetMode+0x28>)
 80026d4:	5cd3      	ldrb	r3, [r2, r3]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000708 	.word	0x20000708

080026e8 <MENU_OnEncoderRotate>:

// -------------------------------------------------------------------------
// Obsługa enkodera:
// (wołana w przerwaniu TIM4 przez Encoder_HandleInterrupt -> s_encoderCb)
void MENU_OnEncoderRotate(int8_t direction)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
    if (!s_menuActive)
 80026f2:	4b21      	ldr	r3, [pc, #132]	@ (8002778 <MENU_OnEncoderRotate+0x90>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	f083 0301 	eor.w	r3, r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d134      	bne.n	800276a <MENU_OnEncoderRotate+0x82>
    {
        // Menu nieaktywne – ignoruj
        return;
    }

    if (s_currentItem >= MENU_ITEM_COUNT)
 8002700:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <MENU_OnEncoderRotate+0x94>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b05      	cmp	r3, #5
 8002706:	d832      	bhi.n	800276e <MENU_OnEncoderRotate+0x86>
    {
        return;
    }

    // Zwiększ/zmniejsz s_menuModes[s_currentItem] w przedziale [0..4]
    uint8_t maxVal = s_menuMaxModes[s_currentItem];
 8002708:	4b1c      	ldr	r3, [pc, #112]	@ (800277c <MENU_OnEncoderRotate+0x94>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	4b1c      	ldr	r3, [pc, #112]	@ (8002780 <MENU_OnEncoderRotate+0x98>)
 8002710:	5c9b      	ldrb	r3, [r3, r2]
 8002712:	73fb      	strb	r3, [r7, #15]

    if (direction > 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	dd10      	ble.n	800273e <MENU_OnEncoderRotate+0x56>
    {
        if (s_menuModes[s_currentItem] < maxVal)
 800271c:	4b17      	ldr	r3, [pc, #92]	@ (800277c <MENU_OnEncoderRotate+0x94>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	4b18      	ldr	r3, [pc, #96]	@ (8002784 <MENU_OnEncoderRotate+0x9c>)
 8002724:	5c9b      	ldrb	r3, [r3, r2]
 8002726:	7bfa      	ldrb	r2, [r7, #15]
 8002728:	429a      	cmp	r2, r3
 800272a:	d917      	bls.n	800275c <MENU_OnEncoderRotate+0x74>
            s_menuModes[s_currentItem]++;
 800272c:	4b13      	ldr	r3, [pc, #76]	@ (800277c <MENU_OnEncoderRotate+0x94>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	4a14      	ldr	r2, [pc, #80]	@ (8002784 <MENU_OnEncoderRotate+0x9c>)
 8002732:	5cd2      	ldrb	r2, [r2, r3]
 8002734:	3201      	adds	r2, #1
 8002736:	b2d1      	uxtb	r1, r2
 8002738:	4a12      	ldr	r2, [pc, #72]	@ (8002784 <MENU_OnEncoderRotate+0x9c>)
 800273a:	54d1      	strb	r1, [r2, r3]
 800273c:	e00e      	b.n	800275c <MENU_OnEncoderRotate+0x74>
    }
    else
    {
        // kierunek ujemny
        if (s_menuModes[s_currentItem] > 0)
 800273e:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <MENU_OnEncoderRotate+0x94>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	4b0f      	ldr	r3, [pc, #60]	@ (8002784 <MENU_OnEncoderRotate+0x9c>)
 8002746:	5c9b      	ldrb	r3, [r3, r2]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <MENU_OnEncoderRotate+0x74>
            s_menuModes[s_currentItem]--;
 800274c:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <MENU_OnEncoderRotate+0x94>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4a0c      	ldr	r2, [pc, #48]	@ (8002784 <MENU_OnEncoderRotate+0x9c>)
 8002752:	5cd2      	ldrb	r2, [r2, r3]
 8002754:	3a01      	subs	r2, #1
 8002756:	b2d1      	uxtb	r1, r2
 8002758:	4a0a      	ldr	r2, [pc, #40]	@ (8002784 <MENU_OnEncoderRotate+0x9c>)
 800275a:	54d1      	strb	r1, [r2, r3]
    }

    // Ponownie wyświetl nazwę i ewentualny tryb (np. "CUST2")
    // – ale TYLKO jeśli to nie "END".
    if (s_currentItem != MENU_ITEM_END)
 800275c:	4b07      	ldr	r3, [pc, #28]	@ (800277c <MENU_OnEncoderRotate+0x94>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b05      	cmp	r3, #5
 8002762:	d005      	beq.n	8002770 <MENU_OnEncoderRotate+0x88>
    {
        MENU_ShowCurrent();
 8002764:	f7ff fef2 	bl	800254c <MENU_ShowCurrent>
 8002768:	e002      	b.n	8002770 <MENU_OnEncoderRotate+0x88>
        return;
 800276a:	bf00      	nop
 800276c:	e000      	b.n	8002770 <MENU_OnEncoderRotate+0x88>
        return;
 800276e:	bf00      	nop
    }
}
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	2000070e 	.word	0x2000070e
 800277c:	2000070f 	.word	0x2000070f
 8002780:	0800c58c 	.word	0x0800c58c
 8002784:	20000708 	.word	0x20000708

08002788 <Display>:


void Display(void){
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
	//MENU_Process();
			//   - to jest jedyna funkcja z menu, którą regularnie wołamy w pętli
			//     (zajmie się ewentualnym auto-wyjściem, odświeżaniem, itp.)

			// 3) Odczyt aktualnych trybów i sterowanie ringiem godzin / sekund:
			uint8_t hourMode = MENU_GetMode(MENU_ITEM_HOUR);
 800278e:	2000      	movs	r0, #0
 8002790:	f7ff ff94 	bl	80026bc <MENU_GetMode>
 8002794:	4603      	mov	r3, r0
 8002796:	75fb      	strb	r3, [r7, #23]
			uint8_t secdMode = MENU_GetMode(MENU_ITEM_SECD);
 8002798:	2001      	movs	r0, #1
 800279a:	f7ff ff8f 	bl	80026bc <MENU_GetMode>
 800279e:	4603      	mov	r3, r0
 80027a0:	75bb      	strb	r3, [r7, #22]
			uint8_t colonMode = MENU_GetMode(MENU_ITEM_COLN);
 80027a2:	2002      	movs	r0, #2
 80027a4:	f7ff ff8a 	bl	80026bc <MENU_GetMode>
 80027a8:	4603      	mov	r3, r0
 80027aa:	757b      	strb	r3, [r7, #21]
			uint8_t topMode = MENU_GetMode(MENU_ITEM_TOP);
 80027ac:	2003      	movs	r0, #3
 80027ae:	f7ff ff85 	bl	80026bc <MENU_GetMode>
 80027b2:	4603      	mov	r3, r0
 80027b4:	753b      	strb	r3, [r7, #20]
			uint8_t custMode = MENU_GetMode(MENU_ITEM_CUST);
 80027b6:	2004      	movs	r0, #4
 80027b8:	f7ff ff80 	bl	80026bc <MENU_GetMode>
 80027bc:	4603      	mov	r3, r0
 80027be:	74fb      	strb	r3, [r7, #19]
			// (END nie ma sensu brać, bo to tylko wyjście z menu)

			// Teraz w zależności od wybranego hourMode robimy ring:
			switch (hourMode) {
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d824      	bhi.n	8002810 <Display+0x88>
 80027c6:	a201      	add	r2, pc, #4	@ (adr r2, 80027cc <Display+0x44>)
 80027c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027cc:	080027e1 	.word	0x080027e1
 80027d0:	080027ed 	.word	0x080027ed
 80027d4:	080027f9 	.word	0x080027f9
 80027d8:	08002805 	.word	0x08002805
 80027dc:	08002811 	.word	0x08002811
			case 0: /* np. ring OFF */
				SetHourRingCustom(&clockReg, 1, 1);
 80027e0:	2201      	movs	r2, #1
 80027e2:	2101      	movs	r1, #1
 80027e4:	4869      	ldr	r0, [pc, #420]	@ (800298c <Display+0x204>)
 80027e6:	f7fe ff3b 	bl	8001660 <SetHourRingCustom>
				break;
 80027ea:	e011      	b.n	8002810 <Display+0x88>
			case 1:
				SetHourRingCustom(&clockReg, 0, 1);
 80027ec:	2201      	movs	r2, #1
 80027ee:	2100      	movs	r1, #0
 80027f0:	4866      	ldr	r0, [pc, #408]	@ (800298c <Display+0x204>)
 80027f2:	f7fe ff35 	bl	8001660 <SetHourRingCustom>
				// ...
				break;
 80027f6:	e00b      	b.n	8002810 <Display+0x88>
			case 2:
				SetHourRingCustom(&clockReg, 1, 0);
 80027f8:	2200      	movs	r2, #0
 80027fa:	2101      	movs	r1, #1
 80027fc:	4863      	ldr	r0, [pc, #396]	@ (800298c <Display+0x204>)
 80027fe:	f7fe ff2f 	bl	8001660 <SetHourRingCustom>
				// ...
				break;
 8002802:	e005      	b.n	8002810 <Display+0x88>
			case 3:
				SetHourRingCustom(&clockReg, 0, 0);
 8002804:	2200      	movs	r2, #0
 8002806:	2100      	movs	r1, #0
 8002808:	4860      	ldr	r0, [pc, #384]	@ (800298c <Display+0x204>)
 800280a:	f7fe ff29 	bl	8001660 <SetHourRingCustom>
				// ...
				break;
 800280e:	bf00      	nop
				// ...
				break;
			}

			// Podobnie second ring:
			switch (secdMode) {
 8002810:	7dbb      	ldrb	r3, [r7, #22]
 8002812:	2b04      	cmp	r3, #4
 8002814:	d82a      	bhi.n	800286c <Display+0xe4>
 8002816:	a201      	add	r2, pc, #4	@ (adr r2, 800281c <Display+0x94>)
 8002818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281c:	08002831 	.word	0x08002831
 8002820:	0800283f 	.word	0x0800283f
 8002824:	0800284d 	.word	0x0800284d
 8002828:	0800285b 	.word	0x0800285b
 800282c:	0800286d 	.word	0x0800286d
			case 0:
				SetSecondLedSingle(&clockReg, sTime.Seconds);
 8002830:	4b57      	ldr	r3, [pc, #348]	@ (8002990 <Display+0x208>)
 8002832:	789b      	ldrb	r3, [r3, #2]
 8002834:	4619      	mov	r1, r3
 8002836:	4855      	ldr	r0, [pc, #340]	@ (800298c <Display+0x204>)
 8002838:	f7fe fa1d 	bl	8000c76 <SetSecondLedSingle>
				// ...
				break;
 800283c:	e016      	b.n	800286c <Display+0xe4>
			case 1:
				SetSecondLedAccumulating(&clockReg, sTime.Seconds);
 800283e:	4b54      	ldr	r3, [pc, #336]	@ (8002990 <Display+0x208>)
 8002840:	789b      	ldrb	r3, [r3, #2]
 8002842:	4619      	mov	r1, r3
 8002844:	4851      	ldr	r0, [pc, #324]	@ (800298c <Display+0x204>)
 8002846:	f7fe fa70 	bl	8000d2a <SetSecondLedAccumulating>
				// ...
				break;
 800284a:	e00f      	b.n	800286c <Display+0xe4>
			case 2:
				SetSecondLedAccumulating2(&clockReg, sTime.Seconds);
 800284c:	4b50      	ldr	r3, [pc, #320]	@ (8002990 <Display+0x208>)
 800284e:	789b      	ldrb	r3, [r3, #2]
 8002850:	4619      	mov	r1, r3
 8002852:	484e      	ldr	r0, [pc, #312]	@ (800298c <Display+0x204>)
 8002854:	f7fe fad9 	bl	8000e0a <SetSecondLedAccumulating2>
				// ...
				break;
 8002858:	e008      	b.n	800286c <Display+0xe4>
			case 3:
				SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 800285a:	4b4d      	ldr	r3, [pc, #308]	@ (8002990 <Display+0x208>)
 800285c:	789b      	ldrb	r3, [r3, #2]
 800285e:	4a4c      	ldr	r2, [pc, #304]	@ (8002990 <Display+0x208>)
 8002860:	7852      	ldrb	r2, [r2, #1]
 8002862:	4619      	mov	r1, r3
 8002864:	4849      	ldr	r0, [pc, #292]	@ (800298c <Display+0x204>)
 8002866:	f7fe fdb7 	bl	80013d8 <SetSecondLedEvenOdd>
				// ...
				break;
 800286a:	bf00      	nop
				// ...
				break;
			}

			// colonMode (0..4, ale np. używamy 0->OFF, 1->ON, reszta – ignoruj):
			switch (colonMode) {
 800286c:	7d7b      	ldrb	r3, [r7, #21]
 800286e:	2b04      	cmp	r3, #4
 8002870:	d843      	bhi.n	80028fa <Display+0x172>
 8002872:	a201      	add	r2, pc, #4	@ (adr r2, 8002878 <Display+0xf0>)
 8002874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002878:	0800288d 	.word	0x0800288d
 800287c:	080028b7 	.word	0x080028b7
 8002880:	080028d3 	.word	0x080028d3
 8002884:	080028ef 	.word	0x080028ef
 8002888:	080028fb 	.word	0x080028fb
			case 0:
				SetDots(&clockReg, colon, colon);
 800288c:	4b41      	ldr	r3, [pc, #260]	@ (8002994 <Display+0x20c>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	bf14      	ite	ne
 8002896:	2301      	movne	r3, #1
 8002898:	2300      	moveq	r3, #0
 800289a:	b2d9      	uxtb	r1, r3
 800289c:	4b3d      	ldr	r3, [pc, #244]	@ (8002994 <Display+0x20c>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bf14      	ite	ne
 80028a6:	2301      	movne	r3, #1
 80028a8:	2300      	moveq	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	4837      	ldr	r0, [pc, #220]	@ (800298c <Display+0x204>)
 80028b0:	f7fe fea4 	bl	80015fc <SetDots>
				// ...
				break;
 80028b4:	e021      	b.n	80028fa <Display+0x172>
			case 1:
				SetDots(&clockReg, 0, colon);
 80028b6:	4b37      	ldr	r3, [pc, #220]	@ (8002994 <Display+0x20c>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	2100      	movs	r1, #0
 80028ca:	4830      	ldr	r0, [pc, #192]	@ (800298c <Display+0x204>)
 80028cc:	f7fe fe96 	bl	80015fc <SetDots>
				// ...
				break;
 80028d0:	e013      	b.n	80028fa <Display+0x172>
			case 2:
				SetDots(&clockReg, colon, 0);
 80028d2:	4b30      	ldr	r3, [pc, #192]	@ (8002994 <Display+0x20c>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf14      	ite	ne
 80028dc:	2301      	movne	r3, #1
 80028de:	2300      	moveq	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2200      	movs	r2, #0
 80028e4:	4619      	mov	r1, r3
 80028e6:	4829      	ldr	r0, [pc, #164]	@ (800298c <Display+0x204>)
 80028e8:	f7fe fe88 	bl	80015fc <SetDots>
				// ...
				break;
 80028ec:	e005      	b.n	80028fa <Display+0x172>
			case 3:
				SetDots(&clockReg, 0, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2100      	movs	r1, #0
 80028f2:	4826      	ldr	r0, [pc, #152]	@ (800298c <Display+0x204>)
 80028f4:	f7fe fe82 	bl	80015fc <SetDots>
				// ...
				break;
 80028f8:	bf00      	nop
				break;
			}

			// topMode (0..4, np. 0 -> normal time, 1->time off, 2->scrolling, 3->test...):
			// itd.
			switch (topMode) {
 80028fa:	7d3b      	ldrb	r3, [r7, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <Display+0x17e>
 8002900:	2b01      	cmp	r3, #1
 8002902:	d00a      	beq.n	800291a <Display+0x192>
 8002904:	e00d      	b.n	8002922 <Display+0x19a>
			case 0:
				// normal HH:MM:SS
				SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8002906:	4b22      	ldr	r3, [pc, #136]	@ (8002990 <Display+0x208>)
 8002908:	7819      	ldrb	r1, [r3, #0]
 800290a:	4b21      	ldr	r3, [pc, #132]	@ (8002990 <Display+0x208>)
 800290c:	785a      	ldrb	r2, [r3, #1]
 800290e:	4b20      	ldr	r3, [pc, #128]	@ (8002990 <Display+0x208>)
 8002910:	789b      	ldrb	r3, [r3, #2]
 8002912:	481e      	ldr	r0, [pc, #120]	@ (800298c <Display+0x204>)
 8002914:	f7fe faf0 	bl	8000ef8 <SetTime7Seg_Top>
						sTime.Seconds);
				break;
 8002918:	e003      	b.n	8002922 <Display+0x19a>
			case 1:
				// wyłączony
				SetTime7Seg_Void(&clockReg);
 800291a:	481c      	ldr	r0, [pc, #112]	@ (800298c <Display+0x204>)
 800291c:	f7fe fc26 	bl	800116c <SetTime7Seg_Void>
				break;
 8002920:	bf00      	nop
				// ...
			}

			// custMode (0..4), w menu wyświetlamy "CUS0", "CUS1"...
			// tu w pętli głównej może to np. sterować jakąś inną funkcjonalnością
			switch (custMode) {
 8002922:	7cfb      	ldrb	r3, [r7, #19]
 8002924:	2b04      	cmp	r3, #4
 8002926:	d80d      	bhi.n	8002944 <Display+0x1bc>
 8002928:	a201      	add	r2, pc, #4	@ (adr r2, 8002930 <Display+0x1a8>)
 800292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292e:	bf00      	nop
 8002930:	08002945 	.word	0x08002945
 8002934:	08002945 	.word	0x08002945
 8002938:	08002945 	.word	0x08002945
 800293c:	08002945 	.word	0x08002945
 8002940:	08002945 	.word	0x08002945
	//		SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes, sTime.Seconds);

			// Aktualizuj rejestry

			SHT30_Data_t data; // Zadeklarowanie zmiennej 'data'
			if (!MENU_IsActive()) {
 8002944:	f7ff fe58 	bl	80025f8 <MENU_IsActive>
 8002948:	4603      	mov	r3, r0
 800294a:	f083 0301 	eor.w	r3, r3, #1
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d014      	beq.n	800297e <Display+0x1f6>
				if (SHT30_GetLatestData(&data)) {
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f93c 	bl	8002bd4 <SHT30_GetLatestData>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00d      	beq.n	800297e <Display+0x1f6>
					disp_mode?  SLIDER_DisplayTemperature( data.temperature):SLIDER_DisplayHumidity( data.humidity);
 8002962:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <Display+0x210>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d004      	beq.n	8002976 <Display+0x1ee>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fe9e 	bl	80036b0 <SLIDER_DisplayTemperature>
 8002974:	e003      	b.n	800297e <Display+0x1f6>
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	4618      	mov	r0, r3
 800297a:	f001 f825 	bl	80039c8 <SLIDER_DisplayHumidity>
				}
			} else {
			}


			UpdateAllDisplays(&clockReg);
 800297e:	4803      	ldr	r0, [pc, #12]	@ (800298c <Display+0x204>)
 8002980:	f7fe fcba 	bl	80012f8 <UpdateAllDisplays>
}
 8002984:	bf00      	nop
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	200006d0 	.word	0x200006d0
 8002990:	200006e8 	.word	0x200006e8
 8002994:	2000012d 	.word	0x2000012d
 8002998:	20000746 	.word	0x20000746

0800299c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80029a2:	1d3b      	adds	r3, r7, #4
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80029b0:	2300      	movs	r3, #0
 80029b2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80029b4:	4b24      	ldr	r3, [pc, #144]	@ (8002a48 <MX_RTC_Init+0xac>)
 80029b6:	4a25      	ldr	r2, [pc, #148]	@ (8002a4c <MX_RTC_Init+0xb0>)
 80029b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80029ba:	4b23      	ldr	r3, [pc, #140]	@ (8002a48 <MX_RTC_Init+0xac>)
 80029bc:	2200      	movs	r2, #0
 80029be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80029c0:	4b21      	ldr	r3, [pc, #132]	@ (8002a48 <MX_RTC_Init+0xac>)
 80029c2:	227f      	movs	r2, #127	@ 0x7f
 80029c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80029c6:	4b20      	ldr	r3, [pc, #128]	@ (8002a48 <MX_RTC_Init+0xac>)
 80029c8:	22ff      	movs	r2, #255	@ 0xff
 80029ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80029cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002a48 <MX_RTC_Init+0xac>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80029d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a48 <MX_RTC_Init+0xac>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80029d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <MX_RTC_Init+0xac>)
 80029da:	2200      	movs	r2, #0
 80029dc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80029de:	481a      	ldr	r0, [pc, #104]	@ (8002a48 <MX_RTC_Init+0xac>)
 80029e0:	f006 fb1c 	bl	800901c <HAL_RTC_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80029ea:	f7ff fda9 	bl	8002540 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	2201      	movs	r2, #1
 8002a06:	4619      	mov	r1, r3
 8002a08:	480f      	ldr	r0, [pc, #60]	@ (8002a48 <MX_RTC_Init+0xac>)
 8002a0a:	f006 fb8a 	bl	8009122 <HAL_RTC_SetTime>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002a14:	f7ff fd94 	bl	8002540 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002a20:	2301      	movs	r3, #1
 8002a22:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002a28:	463b      	mov	r3, r7
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4806      	ldr	r0, [pc, #24]	@ (8002a48 <MX_RTC_Init+0xac>)
 8002a30:	f006 fc6f 	bl	8009312 <HAL_RTC_SetDate>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002a3a:	f7ff fd81 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a3e:	bf00      	nop
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000710 	.word	0x20000710
 8002a4c:	40002800 	.word	0x40002800

08002a50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a58:	f107 030c 	add.w	r3, r7, #12
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa0 <HAL_RTC_MspInit+0x50>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d111      	bne.n	8002a96 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a72:	2302      	movs	r3, #2
 8002a74:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002a76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a7a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a7c:	f107 030c 	add.w	r3, r7, #12
 8002a80:	4618      	mov	r0, r3
 8002a82:	f006 f9dd 	bl	8008e40 <HAL_RCCEx_PeriphCLKConfig>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002a8c:	f7ff fd58 	bl	8002540 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a90:	4b04      	ldr	r3, [pc, #16]	@ (8002aa4 <HAL_RTC_MspInit+0x54>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002a96:	bf00      	nop
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40002800 	.word	0x40002800
 8002aa4:	42470e3c 	.word	0x42470e3c

08002aa8 <SHT30_Init>:

/* =========================================================================
   Funkcja inicjalizacyjna
   ========================================================================= */
void SHT30_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af02      	add	r7, sp, #8
    g_measState = SHT30_STATE_IDLE;
 8002aae:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <SHT30_Init+0x48>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
    g_timerMs   = 0;
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8002af4 <SHT30_Init+0x4c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	801a      	strh	r2, [r3, #0]
    memset(&g_latestData, 0, sizeof(g_latestData));
 8002aba:	220c      	movs	r2, #12
 8002abc:	2100      	movs	r1, #0
 8002abe:	480e      	ldr	r0, [pc, #56]	@ (8002af8 <SHT30_Init+0x50>)
 8002ac0:	f009 f82e 	bl	800bb20 <memset>
    g_latestData.valid = false;
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8002af8 <SHT30_Init+0x50>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	721a      	strb	r2, [r3, #8]

    // Opcjonalny Soft Reset (0x30A2) – wysyłamy synchronicznie
    uint8_t cmdReset[2] = {0x30, 0xA2};
 8002aca:	f24a 2330 	movw	r3, #41520	@ 0xa230
 8002ace:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&hi2c2, (SHT30_I2C_ADDR << 1), cmdReset, 2, 100);
 8002ad0:	1d3a      	adds	r2, r7, #4
 8002ad2:	2364      	movs	r3, #100	@ 0x64
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	2188      	movs	r1, #136	@ 0x88
 8002ada:	4808      	ldr	r0, [pc, #32]	@ (8002afc <SHT30_Init+0x54>)
 8002adc:	f003 f9c2 	bl	8005e64 <HAL_I2C_Master_Transmit>
    HAL_Delay(10); // Odczekaj chwilę po resecie
 8002ae0:	200a      	movs	r0, #10
 8002ae2:	f001 feb7 	bl	8004854 <HAL_Delay>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000736 	.word	0x20000736
 8002af4:	20000744 	.word	0x20000744
 8002af8:	20000738 	.word	0x20000738
 8002afc:	200005bc 	.word	0x200005bc

08002b00 <SHT30_10msHandler>:

/* =========================================================================
   Funkcja wywoływana co 10 ms (z przerwania timera)
   ========================================================================= */
void SHT30_10msHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
    switch (g_measState)
 8002b04:	4b2d      	ldr	r3, [pc, #180]	@ (8002bbc <SHT30_10msHandler+0xbc>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d84c      	bhi.n	8002ba6 <SHT30_10msHandler+0xa6>
 8002b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b14 <SHT30_10msHandler+0x14>)
 8002b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b12:	bf00      	nop
 8002b14:	08002b29 	.word	0x08002b29
 8002b18:	08002baf 	.word	0x08002baf
 8002b1c:	08002b5d 	.word	0x08002b5d
 8002b20:	08002baf 	.word	0x08002baf
 8002b24:	08002b9f 	.word	0x08002b9f
    {
    case SHT30_STATE_IDLE:
        // Czekamy aż minie 30 ms od poprzedniego pomiaru
        g_timerMs += 10;
 8002b28:	4b25      	ldr	r3, [pc, #148]	@ (8002bc0 <SHT30_10msHandler+0xc0>)
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	330a      	adds	r3, #10
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	4b23      	ldr	r3, [pc, #140]	@ (8002bc0 <SHT30_10msHandler+0xc0>)
 8002b32:	801a      	strh	r2, [r3, #0]
        if (g_timerMs >= SHT30_PERIOD_MS)
 8002b34:	4b22      	ldr	r3, [pc, #136]	@ (8002bc0 <SHT30_10msHandler+0xc0>)
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	2b77      	cmp	r3, #119	@ 0x77
 8002b3a:	d93a      	bls.n	8002bb2 <SHT30_10msHandler+0xb2>
        {
            // Reset licznika
            g_timerMs = 0;
 8002b3c:	4b20      	ldr	r3, [pc, #128]	@ (8002bc0 <SHT30_10msHandler+0xc0>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	801a      	strh	r2, [r3, #0]

            // Start transmisji DMA – wysyłamy komendę Single Shot
            if (HAL_I2C_Master_Transmit_DMA(&hi2c2, (SHT30_I2C_ADDR << 1),
 8002b42:	2302      	movs	r3, #2
 8002b44:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc4 <SHT30_10msHandler+0xc4>)
 8002b46:	2188      	movs	r1, #136	@ 0x88
 8002b48:	481f      	ldr	r0, [pc, #124]	@ (8002bc8 <SHT30_10msHandler+0xc8>)
 8002b4a:	f003 fa89 	bl	8006060 <HAL_I2C_Master_Transmit_DMA>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d12e      	bne.n	8002bb2 <SHT30_10msHandler+0xb2>
                                            (uint8_t*)SHT30_CMD_SINGLE_SHOT, 2) == HAL_OK)
            {
                g_measState = SHT30_STATE_TX_IN_PROGRESS;
 8002b54:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <SHT30_10msHandler+0xbc>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
            {
                // Błąd startu DMA – pozostajemy w stanie IDLE
                // Można dodać obsługę błędu tutaj
            }
        }
        break;
 8002b5a:	e02a      	b.n	8002bb2 <SHT30_10msHandler+0xb2>
        // Nic nie robimy – czekamy na callback TX
        break;

    case SHT30_STATE_WAITING_FOR_MEAS:
        // Odliczamy czas konwersji (15 ms)
        g_timerMs += 10;
 8002b5c:	4b18      	ldr	r3, [pc, #96]	@ (8002bc0 <SHT30_10msHandler+0xc0>)
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	330a      	adds	r3, #10
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	4b16      	ldr	r3, [pc, #88]	@ (8002bc0 <SHT30_10msHandler+0xc0>)
 8002b66:	801a      	strh	r2, [r3, #0]
        if (g_timerMs >= SHT30_MEAS_TIME_MS)
 8002b68:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <SHT30_10msHandler+0xc0>)
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	2b59      	cmp	r3, #89	@ 0x59
 8002b6e:	d922      	bls.n	8002bb6 <SHT30_10msHandler+0xb6>
        {
            // Minął czas potrzebny na konwersję
            g_timerMs = 0; // Reset licznika
 8002b70:	4b13      	ldr	r3, [pc, #76]	@ (8002bc0 <SHT30_10msHandler+0xc0>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	801a      	strh	r2, [r3, #0]

            // Rozpoczynamy odbiór surowych danych (6 bajtów) przez DMA
            if (HAL_I2C_Master_Receive_DMA(&hi2c2, (SHT30_I2C_ADDR << 1),
 8002b76:	2306      	movs	r3, #6
 8002b78:	4a14      	ldr	r2, [pc, #80]	@ (8002bcc <SHT30_10msHandler+0xcc>)
 8002b7a:	2188      	movs	r1, #136	@ 0x88
 8002b7c:	4812      	ldr	r0, [pc, #72]	@ (8002bc8 <SHT30_10msHandler+0xc8>)
 8002b7e:	f003 fb9b 	bl	80062b8 <HAL_I2C_Master_Receive_DMA>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d103      	bne.n	8002b90 <SHT30_10msHandler+0x90>
                                           g_rxBuffer, 6) == HAL_OK)
            {
                g_measState = SHT30_STATE_RX_IN_PROGRESS;
 8002b88:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <SHT30_10msHandler+0xbc>)
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	701a      	strb	r2, [r3, #0]
                // Błąd startu DMA – powrót do IDLE
                g_measState = SHT30_STATE_IDLE;
                g_latestData.valid = false;
            }
        }
        break;
 8002b8e:	e012      	b.n	8002bb6 <SHT30_10msHandler+0xb6>
                g_measState = SHT30_STATE_IDLE;
 8002b90:	4b0a      	ldr	r3, [pc, #40]	@ (8002bbc <SHT30_10msHandler+0xbc>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
                g_latestData.valid = false;
 8002b96:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd0 <SHT30_10msHandler+0xd0>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	721a      	strb	r2, [r3, #8]
        break;
 8002b9c:	e00b      	b.n	8002bb6 <SHT30_10msHandler+0xb6>
        break;

    case SHT30_STATE_DONE:
        // Pomiar skończony. Przechodzimy do stanu IDLE.
        // Dalsze pomiary będą inicjowane po upływie kolejnych 30 ms
        g_measState = SHT30_STATE_IDLE;
 8002b9e:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <SHT30_10msHandler+0xbc>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
        break;
 8002ba4:	e008      	b.n	8002bb8 <SHT30_10msHandler+0xb8>

    default:
        g_measState = SHT30_STATE_IDLE;
 8002ba6:	4b05      	ldr	r3, [pc, #20]	@ (8002bbc <SHT30_10msHandler+0xbc>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
        break;
 8002bac:	e004      	b.n	8002bb8 <SHT30_10msHandler+0xb8>
        break;
 8002bae:	bf00      	nop
 8002bb0:	e002      	b.n	8002bb8 <SHT30_10msHandler+0xb8>
        break;
 8002bb2:	bf00      	nop
 8002bb4:	e000      	b.n	8002bb8 <SHT30_10msHandler+0xb8>
        break;
 8002bb6:	bf00      	nop
    }
}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000736 	.word	0x20000736
 8002bc0:	20000744 	.word	0x20000744
 8002bc4:	0800c594 	.word	0x0800c594
 8002bc8:	200005bc 	.word	0x200005bc
 8002bcc:	20000730 	.word	0x20000730
 8002bd0:	20000738 	.word	0x20000738

08002bd4 <SHT30_GetLatestData>:

/* =========================================================================
   Funkcja pobierająca najnowsze dane pomiarowe
   ========================================================================= */
bool SHT30_GetLatestData(SHT30_Data_t *pData)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
    if (pData == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <SHT30_GetLatestData+0x12>
        return false;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e00e      	b.n	8002c04 <SHT30_GetLatestData+0x30>

    if (!g_latestData.valid)
 8002be6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <SHT30_GetLatestData+0x3c>)
 8002be8:	7a1b      	ldrb	r3, [r3, #8]
 8002bea:	f083 0301 	eor.w	r3, r3, #1
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <SHT30_GetLatestData+0x24>
        return false;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e005      	b.n	8002c04 <SHT30_GetLatestData+0x30>

    *pData = g_latestData;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a05      	ldr	r2, [pc, #20]	@ (8002c10 <SHT30_GetLatestData+0x3c>)
 8002bfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return true;
 8002c02:	2301      	movs	r3, #1
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	20000738 	.word	0x20000738

08002c14 <HAL_I2C_MasterTxCpltCallback>:

/* =========================================================================
   Callback zakończenia transmisji DMA (MasterTxCplt)
   ========================================================================= */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a09      	ldr	r2, [pc, #36]	@ (8002c48 <HAL_I2C_MasterTxCpltCallback+0x34>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d109      	bne.n	8002c3a <HAL_I2C_MasterTxCpltCallback+0x26>
    {
        if (g_measState == SHT30_STATE_TX_IN_PROGRESS)
 8002c26:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <HAL_I2C_MasterTxCpltCallback+0x38>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d105      	bne.n	8002c3a <HAL_I2C_MasterTxCpltCallback+0x26>
        {
            // Przejście do stanu oczekiwania na konwersję
            g_measState = SHT30_STATE_WAITING_FOR_MEAS;
 8002c2e:	4b07      	ldr	r3, [pc, #28]	@ (8002c4c <HAL_I2C_MasterTxCpltCallback+0x38>)
 8002c30:	2202      	movs	r2, #2
 8002c32:	701a      	strb	r2, [r3, #0]
            g_timerMs = 0; // Reset licznika
 8002c34:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40005800 	.word	0x40005800
 8002c4c:	20000736 	.word	0x20000736
 8002c50:	20000744 	.word	0x20000744

08002c54 <HAL_I2C_MasterRxCpltCallback>:

/* =========================================================================
   Callback zakończenia odbioru DMA (MasterRxCplt)
   ========================================================================= */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a13      	ldr	r2, [pc, #76]	@ (8002cb0 <HAL_I2C_MasterRxCpltCallback+0x5c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d120      	bne.n	8002ca8 <HAL_I2C_MasterRxCpltCallback+0x54>
    {
        if (g_measState == SHT30_STATE_RX_IN_PROGRESS)
 8002c66:	4b13      	ldr	r3, [pc, #76]	@ (8002cb4 <HAL_I2C_MasterRxCpltCallback+0x60>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d11c      	bne.n	8002ca8 <HAL_I2C_MasterRxCpltCallback+0x54>
        {
            int32_t temp;   // Temperatura w 0.01°C
            uint32_t rh;    // Wilgotność w 0.01% RH

            bool ok = SHT30_ConvertRawData(g_rxBuffer, &temp, &rh);
 8002c6e:	f107 020c 	add.w	r2, r7, #12
 8002c72:	f107 0310 	add.w	r3, r7, #16
 8002c76:	4619      	mov	r1, r3
 8002c78:	480f      	ldr	r0, [pc, #60]	@ (8002cb8 <HAL_I2C_MasterRxCpltCallback+0x64>)
 8002c7a:	f000 f83d 	bl	8002cf8 <SHT30_ConvertRawData>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	75fb      	strb	r3, [r7, #23]
            if (ok)
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <HAL_I2C_MasterRxCpltCallback+0x48>
            {
                g_latestData.temperature = temp;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002cbc <HAL_I2C_MasterRxCpltCallback+0x68>)
 8002c8c:	6013      	str	r3, [r2, #0]
                g_latestData.humidity    = rh;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4a0a      	ldr	r2, [pc, #40]	@ (8002cbc <HAL_I2C_MasterRxCpltCallback+0x68>)
 8002c92:	6053      	str	r3, [r2, #4]
                g_latestData.valid       = true;
 8002c94:	4b09      	ldr	r3, [pc, #36]	@ (8002cbc <HAL_I2C_MasterRxCpltCallback+0x68>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	721a      	strb	r2, [r3, #8]
 8002c9a:	e002      	b.n	8002ca2 <HAL_I2C_MasterRxCpltCallback+0x4e>
            }
            else
            {
                g_latestData.valid = false;
 8002c9c:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <HAL_I2C_MasterRxCpltCallback+0x68>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	721a      	strb	r2, [r3, #8]
            }

            // Przejście do stanu DONE
            g_measState = SHT30_STATE_DONE;
 8002ca2:	4b04      	ldr	r3, [pc, #16]	@ (8002cb4 <HAL_I2C_MasterRxCpltCallback+0x60>)
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8002ca8:	bf00      	nop
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40005800 	.word	0x40005800
 8002cb4:	20000736 	.word	0x20000736
 8002cb8:	20000730 	.word	0x20000730
 8002cbc:	20000738 	.word	0x20000738

08002cc0 <HAL_I2C_ErrorCallback>:

/* =========================================================================
   Callback błędu transmisji DMA (Error)
   ========================================================================= */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a07      	ldr	r2, [pc, #28]	@ (8002cec <HAL_I2C_ErrorCallback+0x2c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d105      	bne.n	8002cde <HAL_I2C_ErrorCallback+0x1e>
    {
        // Obsługa błędu transmisji DMA/I2C
        g_measState = SHT30_STATE_IDLE;
 8002cd2:	4b07      	ldr	r3, [pc, #28]	@ (8002cf0 <HAL_I2C_ErrorCallback+0x30>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
        g_latestData.valid = false;
 8002cd8:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <HAL_I2C_ErrorCallback+0x34>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	721a      	strb	r2, [r3, #8]
    }
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40005800 	.word	0x40005800
 8002cf0:	20000736 	.word	0x20000736
 8002cf4:	20000738 	.word	0x20000738

08002cf8 <SHT30_ConvertRawData>:

/* =========================================================================
   Funkcja konwertująca surowe dane na wartości całkowite
   ========================================================================= */
static bool SHT30_ConvertRawData(const uint8_t *raw, int32_t *pTemp, uint32_t *pRH)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
    if (raw == NULL || pTemp == NULL || pRH == NULL)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <SHT30_ConvertRawData+0x1e>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <SHT30_ConvertRawData+0x1e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <SHT30_ConvertRawData+0x22>
        return false;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e04f      	b.n	8002dba <SHT30_ConvertRawData+0xc2>

    // Sprawdzenie CRC
    if (SHT30_CalcCrc8(&raw[0], 2) != raw[2])
 8002d1a:	2102      	movs	r1, #2
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f853 	bl	8002dc8 <SHT30_CalcCrc8>
 8002d22:	4603      	mov	r3, r0
 8002d24:	461a      	mov	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3302      	adds	r3, #2
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <SHT30_ConvertRawData+0x3c>
        return false; // Błędny CRC temperatury
 8002d30:	2300      	movs	r3, #0
 8002d32:	e042      	b.n	8002dba <SHT30_ConvertRawData+0xc2>

    if (SHT30_CalcCrc8(&raw[3], 2) != raw[5])
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3303      	adds	r3, #3
 8002d38:	2102      	movs	r1, #2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f844 	bl	8002dc8 <SHT30_CalcCrc8>
 8002d40:	4603      	mov	r3, r0
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	3305      	adds	r3, #5
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d001      	beq.n	8002d52 <SHT30_ConvertRawData+0x5a>
        return false; // Błędny CRC wilgotności
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e033      	b.n	8002dba <SHT30_ConvertRawData+0xc2>

    // Surowa temperatura i wilgotność
    uint16_t rawT = (raw[0] << 8) | raw[1];
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	b21a      	sxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	b21b      	sxth	r3, r3
 8002d62:	4313      	orrs	r3, r2
 8002d64:	b21b      	sxth	r3, r3
 8002d66:	82fb      	strh	r3, [r7, #22]
    uint16_t rawH = (raw[3] << 8) | raw[4];
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3303      	adds	r3, #3
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	b21a      	sxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	3304      	adds	r3, #4
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b21b      	sxth	r3, r3
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	b21b      	sxth	r3, r3
 8002d7e:	82bb      	strh	r3, [r7, #20]

    // Konwersja na wartości całkowite:
    // T = -4500 + (17500 * rawT) / 65535
    // H = (10000 * rawH) / 65535
    *pTemp = (-4500) + ((17500 * (int32_t)rawT) / 65535);
 8002d80:	8afb      	ldrh	r3, [r7, #22]
 8002d82:	f244 425c 	movw	r2, #17500	@ 0x445c
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	4a0e      	ldr	r2, [pc, #56]	@ (8002dc4 <SHT30_ConvertRawData+0xcc>)
 8002d8c:	fb82 1203 	smull	r1, r2, r2, r3
 8002d90:	441a      	add	r2, r3
 8002d92:	13d2      	asrs	r2, r2, #15
 8002d94:	17db      	asrs	r3, r3, #31
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f5a3 538c 	sub.w	r3, r3, #4480	@ 0x1180
 8002d9c:	3b14      	subs	r3, #20
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	6013      	str	r3, [r2, #0]
    *pRH   = (10000 * (uint32_t)rawH) / 65535;
 8002da2:	8abb      	ldrh	r3, [r7, #20]
 8002da4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002da8:	fb02 f303 	mul.w	r3, r2, r3
 8002dac:	4a05      	ldr	r2, [pc, #20]	@ (8002dc4 <SHT30_ConvertRawData+0xcc>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	0bda      	lsrs	r2, r3, #15
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	601a      	str	r2, [r3, #0]

    return true;
 8002db8:	2301      	movs	r3, #1
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	80008001 	.word	0x80008001

08002dc8 <SHT30_CalcCrc8>:
/* =========================================================================
   Funkcja obliczająca CRC8 wg specyfikacji SHT3x
   Polinom: 0x31, inicjalizacja: 0xFF
   ========================================================================= */
static uint8_t SHT30_CalcCrc8(const uint8_t *data, int len)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xFF;
 8002dd2:	23ff      	movs	r3, #255	@ 0xff
 8002dd4:	75fb      	strb	r3, [r7, #23]

    for (int i = 0; i < len; i++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	e021      	b.n	8002e20 <SHT30_CalcCrc8+0x58>
    {
        crc ^= data[i];
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	781a      	ldrb	r2, [r3, #0]
 8002de4:	7dfb      	ldrb	r3, [r7, #23]
 8002de6:	4053      	eors	r3, r2
 8002de8:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	e011      	b.n	8002e14 <SHT30_CalcCrc8+0x4c>
        {
            if (crc & 0x80)
 8002df0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	da07      	bge.n	8002e08 <SHT30_CalcCrc8+0x40>
                crc = (crc << 1) ^ 0x31;
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	b25b      	sxtb	r3, r3
 8002dfe:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8002e02:	b25b      	sxtb	r3, r3
 8002e04:	75fb      	strb	r3, [r7, #23]
 8002e06:	e002      	b.n	8002e0e <SHT30_CalcCrc8+0x46>
            else
                crc <<= 1;
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3301      	adds	r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b07      	cmp	r3, #7
 8002e18:	ddea      	ble.n	8002df0 <SHT30_CalcCrc8+0x28>
    for (int i = 0; i < len; i++)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	dbd9      	blt.n	8002ddc <SHT30_CalcCrc8+0x14>
        }
    }

    return crc;
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <PrepareBuffer18>:
 *         [0..5] = puste, [6..11] = 6 znaków napisu, [12..17] = puste.
 *         Jeśli text ma mniej niż 6 znaków, dopełniamy pustymi;
 *         jeśli ma więcej, obcinamy do 6.
 */
static void PrepareBuffer18(const char* text)
{
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
    // Wyczyść cały bufor
    memset(buffer, 0, sizeof(buffer));
 8002e40:	2212      	movs	r2, #18
 8002e42:	2100      	movs	r1, #0
 8002e44:	481a      	ldr	r0, [pc, #104]	@ (8002eb0 <PrepareBuffer18+0x78>)
 8002e46:	f008 fe6b 	bl	800bb20 <memset>

    // Kopiujemy do tymczasowego stringa tylko 6 znaków
    char temp[7];
    strncpy(temp, text, 6);
 8002e4a:	f107 030c 	add.w	r3, r7, #12
 8002e4e:	2206      	movs	r2, #6
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f008 fe7e 	bl	800bb54 <strncpy>
    temp[6] = '\0';   // na wszelki wypadek
 8002e58:	2300      	movs	r3, #0
 8002e5a:	74bb      	strb	r3, [r7, #18]

    // 1) Pierwsze 6 = puste
    // (już jest 0 po memset, więc nic nie trzeba robić)

    // 2) Indeksy 6..11 = treść napisu
    for (int i = 0; i < 6; i++)
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	e01d      	b.n	8002e9e <PrepareBuffer18+0x66>
    {
        if (temp[i] == '\0') {
 8002e62:	f107 020c 	add.w	r2, r7, #12
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	4413      	add	r3, r2
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d105      	bne.n	8002e7c <PrepareBuffer18+0x44>
            // Jak się skończył tekst => puste
            buffer[6 + i] = 0;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	3306      	adds	r3, #6
 8002e74:	4a0e      	ldr	r2, [pc, #56]	@ (8002eb0 <PrepareBuffer18+0x78>)
 8002e76:	2100      	movs	r1, #0
 8002e78:	54d1      	strb	r1, [r2, r3]
 8002e7a:	e00d      	b.n	8002e98 <PrepareBuffer18+0x60>
        }
        else {
            buffer[6 + i] = (uint8_t)charToSegment(temp[i]);
 8002e7c:	f107 020c 	add.w	r2, r7, #12
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	4413      	add	r3, r2
 8002e84:	781a      	ldrb	r2, [r3, #0]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	1d9c      	adds	r4, r3, #6
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f7fd fdd6 	bl	8000a3c <charToSegment>
 8002e90:	4603      	mov	r3, r0
 8002e92:	461a      	mov	r2, r3
 8002e94:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <PrepareBuffer18+0x78>)
 8002e96:	551a      	strb	r2, [r3, r4]
    for (int i = 0; i < 6; i++)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2b05      	cmp	r3, #5
 8002ea2:	ddde      	ble.n	8002e62 <PrepareBuffer18+0x2a>
        }
    }

    // 3) Ostatnie 6 (12..17) = puste
    // (znów, już jest 0 po memset)
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd90      	pop	{r4, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000748 	.word	0x20000748

08002eb4 <ShowWindow>:
 *
 *         Digit0 (najbardziej lewy) - wstawiamy w bity [47..40],
 *         Digit5 (najbardziej prawy) - w bity [7..0].
 */
static void ShowWindow(void)
{
 8002eb4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002eb8:	b09a      	sub	sp, #104	@ 0x68
 8002eba:	af00      	add	r7, sp, #0
    // Zabezpieczenie – jeśli windowIndex < 0 lub windowIndex+5 >= 18,
    // to niektóre odczyty będą poza [0..17], ale wtedy możemy dać 0 (puste).
    // Najprościej – brać "safe read".
    uint64_t val = 0ULL;
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    // digit0 (lewa pozycja wyświetlacza)
    uint8_t d0 = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (windowIndex + 0 >= 0 && windowIndex + 0 < TOTAL_LEN)
 8002ece:	4b8f      	ldr	r3, [pc, #572]	@ (800310c <ShowWindow+0x258>)
 8002ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	db0c      	blt.n	8002ef2 <ShowWindow+0x3e>
 8002ed8:	4b8c      	ldr	r3, [pc, #560]	@ (800310c <ShowWindow+0x258>)
 8002eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ede:	2b11      	cmp	r3, #17
 8002ee0:	dc07      	bgt.n	8002ef2 <ShowWindow+0x3e>
        d0 = buffer[windowIndex + 0];
 8002ee2:	4b8a      	ldr	r3, [pc, #552]	@ (800310c <ShowWindow+0x258>)
 8002ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b89      	ldr	r3, [pc, #548]	@ (8003110 <ShowWindow+0x25c>)
 8002eec:	5c9b      	ldrb	r3, [r3, r2]
 8002eee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

    // digit1
    uint8_t d1 = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
    if (windowIndex + 1 >= 0 && windowIndex + 1 < TOTAL_LEN)
 8002ef8:	4b84      	ldr	r3, [pc, #528]	@ (800310c <ShowWindow+0x258>)
 8002efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f02:	db0c      	blt.n	8002f1e <ShowWindow+0x6a>
 8002f04:	4b81      	ldr	r3, [pc, #516]	@ (800310c <ShowWindow+0x258>)
 8002f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	dc07      	bgt.n	8002f1e <ShowWindow+0x6a>
        d1 = buffer[windowIndex + 1];
 8002f0e:	4b7f      	ldr	r3, [pc, #508]	@ (800310c <ShowWindow+0x258>)
 8002f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	4b7e      	ldr	r3, [pc, #504]	@ (8003110 <ShowWindow+0x25c>)
 8002f18:	5c9b      	ldrb	r3, [r3, r2]
 8002f1a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // digit2
    uint8_t d2 = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
    if (windowIndex + 2 >= 0 && windowIndex + 2 < TOTAL_LEN)
 8002f24:	4b79      	ldr	r3, [pc, #484]	@ (800310c <ShowWindow+0x258>)
 8002f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f2a:	f113 0f02 	cmn.w	r3, #2
 8002f2e:	db0c      	blt.n	8002f4a <ShowWindow+0x96>
 8002f30:	4b76      	ldr	r3, [pc, #472]	@ (800310c <ShowWindow+0x258>)
 8002f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f36:	2b0f      	cmp	r3, #15
 8002f38:	dc07      	bgt.n	8002f4a <ShowWindow+0x96>
        d2 = buffer[windowIndex + 2];
 8002f3a:	4b74      	ldr	r3, [pc, #464]	@ (800310c <ShowWindow+0x258>)
 8002f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f40:	1c9a      	adds	r2, r3, #2
 8002f42:	4b73      	ldr	r3, [pc, #460]	@ (8003110 <ShowWindow+0x25c>)
 8002f44:	5c9b      	ldrb	r3, [r3, r2]
 8002f46:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

    // digit3
    uint8_t d3 = 0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
    if (windowIndex + 3 >= 0 && windowIndex + 3 < TOTAL_LEN)
 8002f50:	4b6e      	ldr	r3, [pc, #440]	@ (800310c <ShowWindow+0x258>)
 8002f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f56:	f113 0f03 	cmn.w	r3, #3
 8002f5a:	db0c      	blt.n	8002f76 <ShowWindow+0xc2>
 8002f5c:	4b6b      	ldr	r3, [pc, #428]	@ (800310c <ShowWindow+0x258>)
 8002f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f62:	2b0e      	cmp	r3, #14
 8002f64:	dc07      	bgt.n	8002f76 <ShowWindow+0xc2>
        d3 = buffer[windowIndex + 3];
 8002f66:	4b69      	ldr	r3, [pc, #420]	@ (800310c <ShowWindow+0x258>)
 8002f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f6c:	1cda      	adds	r2, r3, #3
 8002f6e:	4b68      	ldr	r3, [pc, #416]	@ (8003110 <ShowWindow+0x25c>)
 8002f70:	5c9b      	ldrb	r3, [r3, r2]
 8002f72:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

    // digit4
    uint8_t d4 = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    if (windowIndex + 4 >= 0 && windowIndex + 4 < TOTAL_LEN)
 8002f7c:	4b63      	ldr	r3, [pc, #396]	@ (800310c <ShowWindow+0x258>)
 8002f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f82:	f113 0f04 	cmn.w	r3, #4
 8002f86:	db0c      	blt.n	8002fa2 <ShowWindow+0xee>
 8002f88:	4b60      	ldr	r3, [pc, #384]	@ (800310c <ShowWindow+0x258>)
 8002f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f8e:	2b0d      	cmp	r3, #13
 8002f90:	dc07      	bgt.n	8002fa2 <ShowWindow+0xee>
        d4 = buffer[windowIndex + 4];
 8002f92:	4b5e      	ldr	r3, [pc, #376]	@ (800310c <ShowWindow+0x258>)
 8002f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f98:	1d1a      	adds	r2, r3, #4
 8002f9a:	4b5d      	ldr	r3, [pc, #372]	@ (8003110 <ShowWindow+0x25c>)
 8002f9c:	5c9b      	ldrb	r3, [r3, r2]
 8002f9e:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

    // digit5 (prawa pozycja wyświetlacza)
    uint8_t d5 = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
    if (windowIndex + 5 >= 0 && windowIndex + 5 < TOTAL_LEN)
 8002fa8:	4b58      	ldr	r3, [pc, #352]	@ (800310c <ShowWindow+0x258>)
 8002faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fae:	f113 0f05 	cmn.w	r3, #5
 8002fb2:	db0c      	blt.n	8002fce <ShowWindow+0x11a>
 8002fb4:	4b55      	ldr	r3, [pc, #340]	@ (800310c <ShowWindow+0x258>)
 8002fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	dc07      	bgt.n	8002fce <ShowWindow+0x11a>
        d5 = buffer[windowIndex + 5];
 8002fbe:	4b53      	ldr	r3, [pc, #332]	@ (800310c <ShowWindow+0x258>)
 8002fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc4:	1d5a      	adds	r2, r3, #5
 8002fc6:	4b52      	ldr	r3, [pc, #328]	@ (8003110 <ShowWindow+0x25c>)
 8002fc8:	5c9b      	ldrb	r3, [r3, r2]
 8002fca:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

    // Złóż do 48-bitów (digit0 w [47..40], digit1 w [39..32], ...)
    // UWAGA: digit0 to LEWA, digit5 to PRAWA
    val |= ((uint64_t)d5 << 40);
 8002fce:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fd6:	657a      	str	r2, [r7, #84]	@ 0x54
 8002fd8:	f04f 0000 	mov.w	r0, #0
 8002fdc:	f04f 0100 	mov.w	r1, #0
 8002fe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fe2:	0219      	lsls	r1, r3, #8
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fea:	ea42 0600 	orr.w	r6, r2, r0
 8002fee:	62be      	str	r6, [r7, #40]	@ 0x28
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ff4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ff8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    val |= ((uint64_t)d4 << 32);
 8002ffc:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8003000:	2200      	movs	r2, #0
 8003002:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003004:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003006:	f04f 0000 	mov.w	r0, #0
 800300a:	f04f 0100 	mov.w	r1, #0
 800300e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003010:	0019      	movs	r1, r3
 8003012:	2000      	movs	r0, #0
 8003014:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003018:	ea42 0600 	orr.w	r6, r2, r0
 800301c:	623e      	str	r6, [r7, #32]
 800301e:	430b      	orrs	r3, r1
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
 8003022:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003026:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    val |= ((uint64_t)d3 << 24);
 800302a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800302e:	2200      	movs	r2, #0
 8003030:	643b      	str	r3, [r7, #64]	@ 0x40
 8003032:	647a      	str	r2, [r7, #68]	@ 0x44
 8003034:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003038:	460b      	mov	r3, r1
 800303a:	0a1d      	lsrs	r5, r3, #8
 800303c:	460b      	mov	r3, r1
 800303e:	061c      	lsls	r4, r3, #24
 8003040:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003044:	ea42 0104 	orr.w	r1, r2, r4
 8003048:	61b9      	str	r1, [r7, #24]
 800304a:	432b      	orrs	r3, r5
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003052:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d2 << 16);
 8003056:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800305a:	2200      	movs	r2, #0
 800305c:	4698      	mov	r8, r3
 800305e:	4691      	mov	r9, r2
 8003060:	f04f 0000 	mov.w	r0, #0
 8003064:	f04f 0100 	mov.w	r1, #0
 8003068:	ea4f 4109 	mov.w	r1, r9, lsl #16
 800306c:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8003070:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8003074:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003078:	ea42 0400 	orr.w	r4, r2, r0
 800307c:	613c      	str	r4, [r7, #16]
 800307e:	430b      	orrs	r3, r1
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003086:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d1 << 8);
 800308a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800308e:	2200      	movs	r2, #0
 8003090:	469a      	mov	sl, r3
 8003092:	4693      	mov	fp, r2
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80030a0:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80030a4:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80030a8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80030ac:	ea40 0402 	orr.w	r4, r0, r2
 80030b0:	60bc      	str	r4, [r7, #8]
 80030b2:	430b      	orrs	r3, r1
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80030ba:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d0 << 0);
 80030be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80030c2:	2200      	movs	r2, #0
 80030c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030cc:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80030d0:	4621      	mov	r1, r4
 80030d2:	4311      	orrs	r1, r2
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	4629      	mov	r1, r5
 80030d8:	4319      	orrs	r1, r3
 80030da:	6079      	str	r1, [r7, #4]
 80030dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80030e0:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

    clockReg.bottomDisplay = val;
 80030e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ee:	4b09      	ldr	r3, [pc, #36]	@ (8003114 <ShowWindow+0x260>)
 80030f0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80030f4:	4602      	mov	r2, r0
 80030f6:	f8c3 2012 	str.w	r2, [r3, #18]
 80030fa:	460a      	mov	r2, r1
 80030fc:	82da      	strh	r2, [r3, #22]
   // UpdateAllDisplays(&clockReg);
}
 80030fe:	bf00      	nop
 8003100:	3768      	adds	r7, #104	@ 0x68
 8003102:	46bd      	mov	sp, r7
 8003104:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000764 	.word	0x20000764
 8003110:	20000748 	.word	0x20000748
 8003114:	200006d0 	.word	0x200006d0

08003118 <SLIDER_Init>:

/** ---------------------------------------------------------------------------
 *  @brief Inicjuje wszystkie zmienne slidera w stan "spoczynku". */
void SLIDER_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
    isScrolling        = false;
 800311c:	4b10      	ldr	r3, [pc, #64]	@ (8003160 <SLIDER_Init+0x48>)
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
    scrollPhase        = SCROLL_PHASE_NONE;
 8003122:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <SLIDER_Init+0x4c>)
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
    currentDirection   = SCROLL_RIGHT_TO_LEFT;
 8003128:	4b0f      	ldr	r3, [pc, #60]	@ (8003168 <SLIDER_Init+0x50>)
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
    windowIndex        = 0;
 800312e:	4b0f      	ldr	r3, [pc, #60]	@ (800316c <SLIDER_Init+0x54>)
 8003130:	2200      	movs	r2, #0
 8003132:	801a      	strh	r2, [r3, #0]
    scrollSpeedCounter = 0;
 8003134:	4b0e      	ldr	r3, [pc, #56]	@ (8003170 <SLIDER_Init+0x58>)
 8003136:	2200      	movs	r2, #0
 8003138:	701a      	strb	r2, [r3, #0]

    doStayForever  = false;
 800313a:	4b0e      	ldr	r3, [pc, #56]	@ (8003174 <SLIDER_Init+0x5c>)
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
    doPauseThenOut = false;
 8003140:	4b0d      	ldr	r3, [pc, #52]	@ (8003178 <SLIDER_Init+0x60>)
 8003142:	2200      	movs	r2, #0
 8003144:	701a      	strb	r2, [r3, #0]
    pauseCounter   = 0;
 8003146:	4b0d      	ldr	r3, [pc, #52]	@ (800317c <SLIDER_Init+0x64>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
    pauseTicks     = 0;
 800314c:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <SLIDER_Init+0x68>)
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]

    memset(buffer, 0, sizeof(buffer));
 8003152:	2212      	movs	r2, #18
 8003154:	2100      	movs	r1, #0
 8003156:	480b      	ldr	r0, [pc, #44]	@ (8003184 <SLIDER_Init+0x6c>)
 8003158:	f008 fce2 	bl	800bb20 <memset>
}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}
 8003160:	2000075a 	.word	0x2000075a
 8003164:	2000075b 	.word	0x2000075b
 8003168:	2000075c 	.word	0x2000075c
 800316c:	20000764 	.word	0x20000764
 8003170:	20000766 	.word	0x20000766
 8003174:	20000767 	.word	0x20000767
 8003178:	20000768 	.word	0x20000768
 800317c:	2000076c 	.word	0x2000076c
 8003180:	20000770 	.word	0x20000770
 8003184:	20000748 	.word	0x20000748

08003188 <SLIDER_SetStringAndStay>:

/** ---------------------------------------------------------------------------
 *  @brief Wjeżdża i zostaje na ekranie (bez fazy OUT).
 */
void SLIDER_SetStringAndStay(const char* text, ScrollDirection dir)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	70fb      	strb	r3, [r7, #3]
    if (!text) return;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d024      	beq.n	80031e4 <SLIDER_SetStringAndStay+0x5c>

    PrepareBuffer18(text);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff fe4c 	bl	8002e38 <PrepareBuffer18>

    currentDirection = dir;
 80031a0:	4a12      	ldr	r2, [pc, #72]	@ (80031ec <SLIDER_SetStringAndStay+0x64>)
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	7013      	strb	r3, [r2, #0]
    scrollPhase      = SCROLL_PHASE_IN;
 80031a6:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <SLIDER_SetStringAndStay+0x68>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	701a      	strb	r2, [r3, #0]
    isScrolling      = true;
 80031ac:	4b11      	ldr	r3, [pc, #68]	@ (80031f4 <SLIDER_SetStringAndStay+0x6c>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]

    doStayForever    = true;
 80031b2:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <SLIDER_SetStringAndStay+0x70>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	701a      	strb	r2, [r3, #0]
    doPauseThenOut   = false;
 80031b8:	4b10      	ldr	r3, [pc, #64]	@ (80031fc <SLIDER_SetStringAndStay+0x74>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
    pauseCounter     = 0;
 80031be:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <SLIDER_SetStringAndStay+0x78>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
    pauseTicks       = 0;
 80031c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003204 <SLIDER_SetStringAndStay+0x7c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]

    if (dir == SCROLL_RIGHT_TO_LEFT)
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d103      	bne.n	80031d8 <SLIDER_SetStringAndStay+0x50>
    {
        windowIndex = 12;
 80031d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003208 <SLIDER_SetStringAndStay+0x80>)
 80031d2:	220c      	movs	r2, #12
 80031d4:	801a      	strh	r2, [r3, #0]
 80031d6:	e002      	b.n	80031de <SLIDER_SetStringAndStay+0x56>
    }
    else
    {
        windowIndex = 0;
 80031d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003208 <SLIDER_SetStringAndStay+0x80>)
 80031da:	2200      	movs	r2, #0
 80031dc:	801a      	strh	r2, [r3, #0]
    }

    ShowWindow();
 80031de:	f7ff fe69 	bl	8002eb4 <ShowWindow>
 80031e2:	e000      	b.n	80031e6 <SLIDER_SetStringAndStay+0x5e>
    if (!text) return;
 80031e4:	bf00      	nop
}
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	2000075c 	.word	0x2000075c
 80031f0:	2000075b 	.word	0x2000075b
 80031f4:	2000075a 	.word	0x2000075a
 80031f8:	20000767 	.word	0x20000767
 80031fc:	20000768 	.word	0x20000768
 8003200:	2000076c 	.word	0x2000076c
 8003204:	20000770 	.word	0x20000770
 8003208:	20000764 	.word	0x20000764

0800320c <SLIDER_SetString>:
 *  @brief Proste przewinięcie (bez fazy IN i pauzy) – tylko OUT.
 *         Załóżmy, że "startowo" cały napis jest na ekranie
 *         i jedzie na zewnątrz.
 */
void SLIDER_SetString(const char* text, ScrollDirection dir, uint32_t pauseTime)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	460b      	mov	r3, r1
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	72fb      	strb	r3, [r7, #11]
	 if (!text) return;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01d      	beq.n	800325c <SLIDER_SetString+0x50>

	    PrepareBuffer18(text);
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f7ff fe09 	bl	8002e38 <PrepareBuffer18>

	    currentDirection = dir;
 8003226:	4a0f      	ldr	r2, [pc, #60]	@ (8003264 <SLIDER_SetString+0x58>)
 8003228:	7afb      	ldrb	r3, [r7, #11]
 800322a:	7013      	strb	r3, [r2, #0]
	    scrollPhase      = SCROLL_PHASE_PAUSE;  // Rozpoczynamy od pauzy
 800322c:	4b0e      	ldr	r3, [pc, #56]	@ (8003268 <SLIDER_SetString+0x5c>)
 800322e:	2202      	movs	r2, #2
 8003230:	701a      	strb	r2, [r3, #0]
	    isScrolling      = true;
 8003232:	4b0e      	ldr	r3, [pc, #56]	@ (800326c <SLIDER_SetString+0x60>)
 8003234:	2201      	movs	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]

	    doStayForever    = false;
 8003238:	4b0d      	ldr	r3, [pc, #52]	@ (8003270 <SLIDER_SetString+0x64>)
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
	    doPauseThenOut   = true;
 800323e:	4b0d      	ldr	r3, [pc, #52]	@ (8003274 <SLIDER_SetString+0x68>)
 8003240:	2201      	movs	r2, #1
 8003242:	701a      	strb	r2, [r3, #0]
	    pauseTicks       = pauseTime;
 8003244:	4a0c      	ldr	r2, [pc, #48]	@ (8003278 <SLIDER_SetString+0x6c>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6013      	str	r3, [r2, #0]
	    pauseCounter     = pauseTime;
 800324a:	4a0c      	ldr	r2, [pc, #48]	@ (800327c <SLIDER_SetString+0x70>)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6013      	str	r3, [r2, #0]

	    // Ustawienie widocznego napisu od razu
	    windowIndex = 6;  // Miejsce, gdzie napis jest w pełni widoczny
 8003250:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <SLIDER_SetString+0x74>)
 8003252:	2206      	movs	r2, #6
 8003254:	801a      	strh	r2, [r3, #0]
	    ShowWindow();
 8003256:	f7ff fe2d 	bl	8002eb4 <ShowWindow>
 800325a:	e000      	b.n	800325e <SLIDER_SetString+0x52>
	 if (!text) return;
 800325c:	bf00      	nop
}
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	2000075c 	.word	0x2000075c
 8003268:	2000075b 	.word	0x2000075b
 800326c:	2000075a 	.word	0x2000075a
 8003270:	20000767 	.word	0x20000767
 8003274:	20000768 	.word	0x20000768
 8003278:	20000770 	.word	0x20000770
 800327c:	2000076c 	.word	0x2000076c
 8003280:	20000764 	.word	0x20000764

08003284 <SLIDER_Stop>:

/** ---------------------------------------------------------------------------
 *  @brief Zatrzymuje scrolling natychmiast.
 */
void SLIDER_Stop(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
    isScrolling = false;
 8003288:	4b0b      	ldr	r3, [pc, #44]	@ (80032b8 <SLIDER_Stop+0x34>)
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
    scrollPhase = SCROLL_PHASE_NONE;
 800328e:	4b0b      	ldr	r3, [pc, #44]	@ (80032bc <SLIDER_Stop+0x38>)
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
    windowIndex = 0;
 8003294:	4b0a      	ldr	r3, [pc, #40]	@ (80032c0 <SLIDER_Stop+0x3c>)
 8003296:	2200      	movs	r2, #0
 8003298:	801a      	strh	r2, [r3, #0]

    // Jeśli istnieje oczekujące żądanie wyświetlenia liczby, realizujemy je.
    if (displayNumberPending) {
 800329a:	4b0a      	ldr	r3, [pc, #40]	@ (80032c4 <SLIDER_Stop+0x40>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d007      	beq.n	80032b2 <SLIDER_Stop+0x2e>
        // Wyświetlamy zapamiętaną liczbę
        SLIDER_DisplayNumber(pendingNumberToDisplay);
 80032a2:	4b09      	ldr	r3, [pc, #36]	@ (80032c8 <SLIDER_Stop+0x44>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f8f6 	bl	8003498 <SLIDER_DisplayNumber>
        // Resetujemy flagę, bo żądanie zostało obsłużone
        displayNumberPending = false;
 80032ac:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <SLIDER_Stop+0x40>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
    }
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	2000075a 	.word	0x2000075a
 80032bc:	2000075b 	.word	0x2000075b
 80032c0:	20000764 	.word	0x20000764
 80032c4:	2000075d 	.word	0x2000075d
 80032c8:	20000760 	.word	0x20000760

080032cc <SLIDER_Update>:

/** ---------------------------------------------------------------------------
 *  @brief Główna funkcja wywoływana cyklicznie (np. co 10 ms w przerwaniu).
 */
void SLIDER_Update(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
    if (!isScrolling) return;
 80032d0:	4b60      	ldr	r3, [pc, #384]	@ (8003454 <SLIDER_Update+0x188>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	f083 0301 	eor.w	r3, r3, #1
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 80b5 	bne.w	800344a <SLIDER_Update+0x17e>

    // Co scrollSpeedTicks odświeżamy
    if (scrollSpeedCounter < scrollSpeedTicks)
 80032e0:	4b5d      	ldr	r3, [pc, #372]	@ (8003458 <SLIDER_Update+0x18c>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2205      	movs	r2, #5
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d206      	bcs.n	80032f8 <SLIDER_Update+0x2c>
    {
        scrollSpeedCounter++;
 80032ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003458 <SLIDER_Update+0x18c>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	3301      	adds	r3, #1
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	4b59      	ldr	r3, [pc, #356]	@ (8003458 <SLIDER_Update+0x18c>)
 80032f4:	701a      	strb	r2, [r3, #0]
        return;
 80032f6:	e0ab      	b.n	8003450 <SLIDER_Update+0x184>
    }
    scrollSpeedCounter = 0;
 80032f8:	4b57      	ldr	r3, [pc, #348]	@ (8003458 <SLIDER_Update+0x18c>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]

    switch (scrollPhase)
 80032fe:	4b57      	ldr	r3, [pc, #348]	@ (800345c <SLIDER_Update+0x190>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b03      	cmp	r3, #3
 8003304:	d075      	beq.n	80033f2 <SLIDER_Update+0x126>
 8003306:	2b03      	cmp	r3, #3
 8003308:	f300 80a1 	bgt.w	800344e <SLIDER_Update+0x182>
 800330c:	2b01      	cmp	r3, #1
 800330e:	d002      	beq.n	8003316 <SLIDER_Update+0x4a>
 8003310:	2b02      	cmp	r3, #2
 8003312:	d060      	beq.n	80033d6 <SLIDER_Update+0x10a>
        break;
    }

    default:
        // SCROLL_PHASE_NONE => nic
        return;
 8003314:	e09b      	b.n	800344e <SLIDER_Update+0x182>
        if (currentDirection == SCROLL_RIGHT_TO_LEFT)
 8003316:	4b52      	ldr	r3, [pc, #328]	@ (8003460 <SLIDER_Update+0x194>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d12d      	bne.n	800337a <SLIDER_Update+0xae>
            windowIndex--;
 800331e:	4b51      	ldr	r3, [pc, #324]	@ (8003464 <SLIDER_Update+0x198>)
 8003320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29b      	uxth	r3, r3
 800332a:	b21a      	sxth	r2, r3
 800332c:	4b4d      	ldr	r3, [pc, #308]	@ (8003464 <SLIDER_Update+0x198>)
 800332e:	801a      	strh	r2, [r3, #0]
            if (windowIndex == 6)
 8003330:	4b4c      	ldr	r3, [pc, #304]	@ (8003464 <SLIDER_Update+0x198>)
 8003332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003336:	2b06      	cmp	r3, #6
 8003338:	f040 8081 	bne.w	800343e <SLIDER_Update+0x172>
                if (doStayForever)
 800333c:	4b4a      	ldr	r3, [pc, #296]	@ (8003468 <SLIDER_Update+0x19c>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d006      	beq.n	8003352 <SLIDER_Update+0x86>
                    isScrolling = false;
 8003344:	4b43      	ldr	r3, [pc, #268]	@ (8003454 <SLIDER_Update+0x188>)
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
                    scrollPhase = SCROLL_PHASE_NONE;
 800334a:	4b44      	ldr	r3, [pc, #272]	@ (800345c <SLIDER_Update+0x190>)
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]
        break;
 8003350:	e075      	b.n	800343e <SLIDER_Update+0x172>
                else if (doPauseThenOut && pauseTicks > 0)
 8003352:	4b46      	ldr	r3, [pc, #280]	@ (800346c <SLIDER_Update+0x1a0>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00b      	beq.n	8003372 <SLIDER_Update+0xa6>
 800335a:	4b45      	ldr	r3, [pc, #276]	@ (8003470 <SLIDER_Update+0x1a4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <SLIDER_Update+0xa6>
                    scrollPhase = SCROLL_PHASE_PAUSE;
 8003362:	4b3e      	ldr	r3, [pc, #248]	@ (800345c <SLIDER_Update+0x190>)
 8003364:	2202      	movs	r2, #2
 8003366:	701a      	strb	r2, [r3, #0]
                    pauseCounter = pauseTicks;
 8003368:	4b41      	ldr	r3, [pc, #260]	@ (8003470 <SLIDER_Update+0x1a4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a41      	ldr	r2, [pc, #260]	@ (8003474 <SLIDER_Update+0x1a8>)
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	e030      	b.n	80033d4 <SLIDER_Update+0x108>
                    scrollPhase = SCROLL_PHASE_OUT;
 8003372:	4b3a      	ldr	r3, [pc, #232]	@ (800345c <SLIDER_Update+0x190>)
 8003374:	2203      	movs	r2, #3
 8003376:	701a      	strb	r2, [r3, #0]
        break;
 8003378:	e061      	b.n	800343e <SLIDER_Update+0x172>
            windowIndex++;
 800337a:	4b3a      	ldr	r3, [pc, #232]	@ (8003464 <SLIDER_Update+0x198>)
 800337c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003380:	b29b      	uxth	r3, r3
 8003382:	3301      	adds	r3, #1
 8003384:	b29b      	uxth	r3, r3
 8003386:	b21a      	sxth	r2, r3
 8003388:	4b36      	ldr	r3, [pc, #216]	@ (8003464 <SLIDER_Update+0x198>)
 800338a:	801a      	strh	r2, [r3, #0]
            if (windowIndex == 6)
 800338c:	4b35      	ldr	r3, [pc, #212]	@ (8003464 <SLIDER_Update+0x198>)
 800338e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003392:	2b06      	cmp	r3, #6
 8003394:	d153      	bne.n	800343e <SLIDER_Update+0x172>
                if (doStayForever)
 8003396:	4b34      	ldr	r3, [pc, #208]	@ (8003468 <SLIDER_Update+0x19c>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d006      	beq.n	80033ac <SLIDER_Update+0xe0>
                    isScrolling = false;
 800339e:	4b2d      	ldr	r3, [pc, #180]	@ (8003454 <SLIDER_Update+0x188>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
                    scrollPhase = SCROLL_PHASE_NONE;
 80033a4:	4b2d      	ldr	r3, [pc, #180]	@ (800345c <SLIDER_Update+0x190>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	701a      	strb	r2, [r3, #0]
        break;
 80033aa:	e048      	b.n	800343e <SLIDER_Update+0x172>
                else if (doPauseThenOut && pauseTicks > 0)
 80033ac:	4b2f      	ldr	r3, [pc, #188]	@ (800346c <SLIDER_Update+0x1a0>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00b      	beq.n	80033cc <SLIDER_Update+0x100>
 80033b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003470 <SLIDER_Update+0x1a4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d007      	beq.n	80033cc <SLIDER_Update+0x100>
                    scrollPhase = SCROLL_PHASE_PAUSE;
 80033bc:	4b27      	ldr	r3, [pc, #156]	@ (800345c <SLIDER_Update+0x190>)
 80033be:	2202      	movs	r2, #2
 80033c0:	701a      	strb	r2, [r3, #0]
                    pauseCounter = pauseTicks;
 80033c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003470 <SLIDER_Update+0x1a4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003474 <SLIDER_Update+0x1a8>)
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e003      	b.n	80033d4 <SLIDER_Update+0x108>
                    scrollPhase = SCROLL_PHASE_OUT;
 80033cc:	4b23      	ldr	r3, [pc, #140]	@ (800345c <SLIDER_Update+0x190>)
 80033ce:	2203      	movs	r2, #3
 80033d0:	701a      	strb	r2, [r3, #0]
        break;
 80033d2:	e034      	b.n	800343e <SLIDER_Update+0x172>
 80033d4:	e033      	b.n	800343e <SLIDER_Update+0x172>
        if (pauseCounter > 0)
 80033d6:	4b27      	ldr	r3, [pc, #156]	@ (8003474 <SLIDER_Update+0x1a8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <SLIDER_Update+0x11e>
            pauseCounter--;
 80033de:	4b25      	ldr	r3, [pc, #148]	@ (8003474 <SLIDER_Update+0x1a8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	4a23      	ldr	r2, [pc, #140]	@ (8003474 <SLIDER_Update+0x1a8>)
 80033e6:	6013      	str	r3, [r2, #0]
        break;
 80033e8:	e02c      	b.n	8003444 <SLIDER_Update+0x178>
            scrollPhase = SCROLL_PHASE_OUT;
 80033ea:	4b1c      	ldr	r3, [pc, #112]	@ (800345c <SLIDER_Update+0x190>)
 80033ec:	2203      	movs	r2, #3
 80033ee:	701a      	strb	r2, [r3, #0]
        break;
 80033f0:	e028      	b.n	8003444 <SLIDER_Update+0x178>
        if (currentDirection == SCROLL_RIGHT_TO_LEFT)
 80033f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003460 <SLIDER_Update+0x194>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d110      	bne.n	800341c <SLIDER_Update+0x150>
            windowIndex--;
 80033fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003464 <SLIDER_Update+0x198>)
 80033fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29b      	uxth	r3, r3
 8003406:	b21a      	sxth	r2, r3
 8003408:	4b16      	ldr	r3, [pc, #88]	@ (8003464 <SLIDER_Update+0x198>)
 800340a:	801a      	strh	r2, [r3, #0]
            if (windowIndex < 0)
 800340c:	4b15      	ldr	r3, [pc, #84]	@ (8003464 <SLIDER_Update+0x198>)
 800340e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003412:	2b00      	cmp	r3, #0
 8003414:	da15      	bge.n	8003442 <SLIDER_Update+0x176>
                SLIDER_Stop();
 8003416:	f7ff ff35 	bl	8003284 <SLIDER_Stop>
        break;
 800341a:	e012      	b.n	8003442 <SLIDER_Update+0x176>
            windowIndex++;
 800341c:	4b11      	ldr	r3, [pc, #68]	@ (8003464 <SLIDER_Update+0x198>)
 800341e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003422:	b29b      	uxth	r3, r3
 8003424:	3301      	adds	r3, #1
 8003426:	b29b      	uxth	r3, r3
 8003428:	b21a      	sxth	r2, r3
 800342a:	4b0e      	ldr	r3, [pc, #56]	@ (8003464 <SLIDER_Update+0x198>)
 800342c:	801a      	strh	r2, [r3, #0]
            if (windowIndex > 12)
 800342e:	4b0d      	ldr	r3, [pc, #52]	@ (8003464 <SLIDER_Update+0x198>)
 8003430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003434:	2b0c      	cmp	r3, #12
 8003436:	dd04      	ble.n	8003442 <SLIDER_Update+0x176>
                SLIDER_Stop();
 8003438:	f7ff ff24 	bl	8003284 <SLIDER_Stop>
        break;
 800343c:	e001      	b.n	8003442 <SLIDER_Update+0x176>
        break;
 800343e:	bf00      	nop
 8003440:	e000      	b.n	8003444 <SLIDER_Update+0x178>
        break;
 8003442:	bf00      	nop
    }

    // Po zmianie windowIndex – odśwież wyświetlacz
    ShowWindow();
 8003444:	f7ff fd36 	bl	8002eb4 <ShowWindow>
 8003448:	e002      	b.n	8003450 <SLIDER_Update+0x184>
    if (!isScrolling) return;
 800344a:	bf00      	nop
 800344c:	e000      	b.n	8003450 <SLIDER_Update+0x184>
        return;
 800344e:	bf00      	nop
}
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	2000075a 	.word	0x2000075a
 8003458:	20000766 	.word	0x20000766
 800345c:	2000075b 	.word	0x2000075b
 8003460:	2000075c 	.word	0x2000075c
 8003464:	20000764 	.word	0x20000764
 8003468:	20000767 	.word	0x20000767
 800346c:	20000768 	.word	0x20000768
 8003470:	20000770 	.word	0x20000770
 8003474:	2000076c 	.word	0x2000076c

08003478 <SLIDER_IsStopped>:
bool SLIDER_IsStopped(void) {
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
    return (scrollPhase == SCROLL_PHASE_NONE);
 800347c:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <SLIDER_IsStopped+0x1c>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	b2db      	uxtb	r3, r3
}
 800348a:	4618      	mov	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	2000075b 	.word	0x2000075b

08003498 <SLIDER_DisplayNumber>:



void SLIDER_DisplayNumber(uint32_t number)
{
 8003498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800349c:	b09f      	sub	sp, #124	@ 0x7c
 800349e:	af00      	add	r7, sp, #0
 80034a0:	65f8      	str	r0, [r7, #92]	@ 0x5c
    // Jeżeli slider nie jest zatrzymany, zapamiętaj żądanie i wyjdź
    if (!SLIDER_IsStopped()) {
 80034a2:	f7ff ffe9 	bl	8003478 <SLIDER_IsStopped>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f083 0301 	eor.w	r3, r3, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <SLIDER_DisplayNumber+0x30>
        displayNumberPending = true;
 80034b2:	4b7a      	ldr	r3, [pc, #488]	@ (800369c <SLIDER_DisplayNumber+0x204>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	701a      	strb	r2, [r3, #0]
        pendingNumberToDisplay = (number > 999999) ? 999999 : number;
 80034b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034ba:	4a79      	ldr	r2, [pc, #484]	@ (80036a0 <SLIDER_DisplayNumber+0x208>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	bf28      	it	cs
 80034c0:	4613      	movcs	r3, r2
 80034c2:	4a78      	ldr	r2, [pc, #480]	@ (80036a4 <SLIDER_DisplayNumber+0x20c>)
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e0e4      	b.n	8003692 <SLIDER_DisplayNumber+0x1fa>
    }

    // Slider jest zatrzymany – wyświetlamy liczbę od razu

    // Ograniczamy liczbę do maksimum 999999
    if (number > 999999)
 80034c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80034ca:	4b75      	ldr	r3, [pc, #468]	@ (80036a0 <SLIDER_DisplayNumber+0x208>)
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d901      	bls.n	80034d4 <SLIDER_DisplayNumber+0x3c>
        number = 999999;
 80034d0:	4b73      	ldr	r3, [pc, #460]	@ (80036a0 <SLIDER_DisplayNumber+0x208>)
 80034d2:	65fb      	str	r3, [r7, #92]	@ 0x5c

    uint8_t digits[6];

    // Inicjujemy wszystkie cyfry jako puste (segment odpowiadający spacji)
    for (int i = 0; i < 6; i++) {
 80034d4:	2300      	movs	r3, #0
 80034d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80034d8:	e00d      	b.n	80034f6 <SLIDER_DisplayNumber+0x5e>
        digits[i] = charToSegment(' ');
 80034da:	2020      	movs	r0, #32
 80034dc:	f7fd faae 	bl	8000a3c <charToSegment>
 80034e0:	4603      	mov	r3, r0
 80034e2:	4619      	mov	r1, r3
 80034e4:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80034e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ea:	441a      	add	r2, r3
 80034ec:	460b      	mov	r3, r1
 80034ee:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < 6; i++) {
 80034f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034f2:	3301      	adds	r3, #1
 80034f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80034f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	ddee      	ble.n	80034da <SLIDER_DisplayNumber+0x42>
    }

    // Zamieniamy liczbę na cyfry od końca
    for (int i = 5; i >= 0; i--) {
 80034fc:	2305      	movs	r3, #5
 80034fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8003500:	e020      	b.n	8003544 <SLIDER_DisplayNumber+0xac>
        digits[i] = charToSegment('0' + (number % 10));
 8003502:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003504:	4b68      	ldr	r3, [pc, #416]	@ (80036a8 <SLIDER_DisplayNumber+0x210>)
 8003506:	fba3 2301 	umull	r2, r3, r3, r1
 800350a:	08da      	lsrs	r2, r3, #3
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	1aca      	subs	r2, r1, r3
 8003516:	b2d3      	uxtb	r3, r2
 8003518:	3330      	adds	r3, #48	@ 0x30
 800351a:	b2db      	uxtb	r3, r3
 800351c:	4618      	mov	r0, r3
 800351e:	f7fd fa8d 	bl	8000a3c <charToSegment>
 8003522:	4603      	mov	r3, r0
 8003524:	4619      	mov	r1, r3
 8003526:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800352a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800352c:	441a      	add	r2, r3
 800352e:	460b      	mov	r3, r1
 8003530:	7013      	strb	r3, [r2, #0]
        number /= 10;
 8003532:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003534:	4b5c      	ldr	r3, [pc, #368]	@ (80036a8 <SLIDER_DisplayNumber+0x210>)
 8003536:	fba3 2302 	umull	r2, r3, r3, r2
 800353a:	08db      	lsrs	r3, r3, #3
 800353c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    for (int i = 5; i >= 0; i--) {
 800353e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003540:	3b01      	subs	r3, #1
 8003542:	673b      	str	r3, [r7, #112]	@ 0x70
 8003544:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003546:	2b00      	cmp	r3, #0
 8003548:	dadb      	bge.n	8003502 <SLIDER_DisplayNumber+0x6a>
    }

    // Składamy 6 cyfr do 48-bitowej wartości
    uint64_t displayVal = 0ULL;
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[5] << 40);
 8003556:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2200      	movs	r2, #0
 800355e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003560:	657a      	str	r2, [r7, #84]	@ 0x54
 8003562:	f04f 0000 	mov.w	r0, #0
 8003566:	f04f 0100 	mov.w	r1, #0
 800356a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800356c:	0219      	lsls	r1, r3, #8
 800356e:	2000      	movs	r0, #0
 8003570:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003574:	ea42 0600 	orr.w	r6, r2, r0
 8003578:	62be      	str	r6, [r7, #40]	@ 0x28
 800357a:	430b      	orrs	r3, r1
 800357c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800357e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003582:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[4] << 32);
 8003586:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2200      	movs	r2, #0
 800358e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003590:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003592:	f04f 0000 	mov.w	r0, #0
 8003596:	f04f 0100 	mov.w	r1, #0
 800359a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800359c:	0019      	movs	r1, r3
 800359e:	2000      	movs	r0, #0
 80035a0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80035a4:	ea42 0600 	orr.w	r6, r2, r0
 80035a8:	623e      	str	r6, [r7, #32]
 80035aa:	430b      	orrs	r3, r1
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035b2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[3] << 24);
 80035b6:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2200      	movs	r2, #0
 80035be:	643b      	str	r3, [r7, #64]	@ 0x40
 80035c0:	647a      	str	r2, [r7, #68]	@ 0x44
 80035c2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80035c6:	460b      	mov	r3, r1
 80035c8:	0a1d      	lsrs	r5, r3, #8
 80035ca:	460b      	mov	r3, r1
 80035cc:	061c      	lsls	r4, r3, #24
 80035ce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80035d2:	ea42 0104 	orr.w	r1, r2, r4
 80035d6:	61b9      	str	r1, [r7, #24]
 80035d8:	432b      	orrs	r3, r5
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80035e0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[2] << 16);
 80035e4:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2200      	movs	r2, #0
 80035ec:	4698      	mov	r8, r3
 80035ee:	4691      	mov	r9, r2
 80035f0:	f04f 0000 	mov.w	r0, #0
 80035f4:	f04f 0100 	mov.w	r1, #0
 80035f8:	ea4f 4109 	mov.w	r1, r9, lsl #16
 80035fc:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8003600:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8003604:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003608:	ea42 0400 	orr.w	r4, r2, r0
 800360c:	613c      	str	r4, [r7, #16]
 800360e:	430b      	orrs	r3, r1
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003616:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[1] << 8);
 800361a:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2200      	movs	r2, #0
 8003622:	469a      	mov	sl, r3
 8003624:	4693      	mov	fp, r2
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003632:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003636:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800363a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800363e:	ea40 0402 	orr.w	r4, r0, r2
 8003642:	60bc      	str	r4, [r7, #8]
 8003644:	430b      	orrs	r3, r1
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800364c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[0] << 0);
 8003650:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2200      	movs	r2, #0
 8003658:	63bb      	str	r3, [r7, #56]	@ 0x38
 800365a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800365c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003660:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003664:	4621      	mov	r1, r4
 8003666:	4311      	orrs	r1, r2
 8003668:	6039      	str	r1, [r7, #0]
 800366a:	4629      	mov	r1, r5
 800366c:	4319      	orrs	r1, r3
 800366e:	6079      	str	r1, [r7, #4]
 8003670:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003674:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68





    clockReg.bottomDisplay = displayVal;
 8003678:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800367c:	633a      	str	r2, [r7, #48]	@ 0x30
 800367e:	b29b      	uxth	r3, r3
 8003680:	637b      	str	r3, [r7, #52]	@ 0x34
 8003682:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <SLIDER_DisplayNumber+0x214>)
 8003684:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003688:	4602      	mov	r2, r0
 800368a:	f8c3 2012 	str.w	r2, [r3, #18]
 800368e:	460a      	mov	r2, r1
 8003690:	82da      	strh	r2, [r3, #22]
    //UpdateAllDisplays(&clockReg);
}
 8003692:	377c      	adds	r7, #124	@ 0x7c
 8003694:	46bd      	mov	sp, r7
 8003696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800369a:	bf00      	nop
 800369c:	2000075d 	.word	0x2000075d
 80036a0:	000f423f 	.word	0x000f423f
 80036a4:	20000760 	.word	0x20000760
 80036a8:	cccccccd 	.word	0xcccccccd
 80036ac:	200006d0 	.word	0x200006d0

080036b0 <SLIDER_DisplayTemperature>:

void SLIDER_DisplayTemperature(int32_t temperature)
{
 80036b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b4:	b0a3      	sub	sp, #140	@ 0x8c
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6678      	str	r0, [r7, #100]	@ 0x64
    // Jeżeli slider nie jest zatrzymany, zapamiętaj żądanie i wyjdź
    if (!SLIDER_IsStopped()) {
 80036ba:	f7ff fedd 	bl	8003478 <SLIDER_IsStopped>
 80036be:	4603      	mov	r3, r0
 80036c0:	f083 0301 	eor.w	r3, r3, #1
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d01a      	beq.n	8003700 <SLIDER_DisplayTemperature+0x50>
        displayNumberPending = true;
 80036ca:	4bb9      	ldr	r3, [pc, #740]	@ (80039b0 <SLIDER_DisplayTemperature+0x300>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
        // Ograniczamy temperaturę do zakresu -99999 do 99999
        if (temperature > 99999) {
 80036d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036d2:	4ab8      	ldr	r2, [pc, #736]	@ (80039b4 <SLIDER_DisplayTemperature+0x304>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	dd03      	ble.n	80036e0 <SLIDER_DisplayTemperature+0x30>
            pendingNumberToDisplay = 99999;
 80036d8:	4bb7      	ldr	r3, [pc, #732]	@ (80039b8 <SLIDER_DisplayTemperature+0x308>)
 80036da:	4ab6      	ldr	r2, [pc, #728]	@ (80039b4 <SLIDER_DisplayTemperature+0x304>)
 80036dc:	601a      	str	r2, [r3, #0]
        } else if (temperature < -99999) {
            pendingNumberToDisplay = 99999; // Można dodać osobną zmienną dla znaku minus
        } else {
            pendingNumberToDisplay = (temperature < 0) ? (uint32_t)(-temperature) : (uint32_t)temperature;
        }
        return;
 80036de:	e163      	b.n	80039a8 <SLIDER_DisplayTemperature+0x2f8>
        } else if (temperature < -99999) {
 80036e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036e2:	4ab6      	ldr	r2, [pc, #728]	@ (80039bc <SLIDER_DisplayTemperature+0x30c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	da03      	bge.n	80036f0 <SLIDER_DisplayTemperature+0x40>
            pendingNumberToDisplay = 99999; // Można dodać osobną zmienną dla znaku minus
 80036e8:	4bb3      	ldr	r3, [pc, #716]	@ (80039b8 <SLIDER_DisplayTemperature+0x308>)
 80036ea:	4ab2      	ldr	r2, [pc, #712]	@ (80039b4 <SLIDER_DisplayTemperature+0x304>)
 80036ec:	601a      	str	r2, [r3, #0]
        return;
 80036ee:	e15b      	b.n	80039a8 <SLIDER_DisplayTemperature+0x2f8>
            pendingNumberToDisplay = (temperature < 0) ? (uint32_t)(-temperature) : (uint32_t)temperature;
 80036f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bfb8      	it	lt
 80036f6:	425b      	neglt	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	4baf      	ldr	r3, [pc, #700]	@ (80039b8 <SLIDER_DisplayTemperature+0x308>)
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	e153      	b.n	80039a8 <SLIDER_DisplayTemperature+0x2f8>
    }

    // Slider jest zatrzymany – wyświetlamy temperaturę od razu

    // Ograniczamy temperaturę do zakresu -99999 do 99999
    if (temperature > 99999)
 8003700:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003702:	4bac      	ldr	r3, [pc, #688]	@ (80039b4 <SLIDER_DisplayTemperature+0x304>)
 8003704:	429a      	cmp	r2, r3
 8003706:	dd02      	ble.n	800370e <SLIDER_DisplayTemperature+0x5e>
        temperature = 99999;
 8003708:	4baa      	ldr	r3, [pc, #680]	@ (80039b4 <SLIDER_DisplayTemperature+0x304>)
 800370a:	667b      	str	r3, [r7, #100]	@ 0x64
 800370c:	e005      	b.n	800371a <SLIDER_DisplayTemperature+0x6a>
    else if (temperature < -99999)
 800370e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003710:	4baa      	ldr	r3, [pc, #680]	@ (80039bc <SLIDER_DisplayTemperature+0x30c>)
 8003712:	429a      	cmp	r2, r3
 8003714:	da01      	bge.n	800371a <SLIDER_DisplayTemperature+0x6a>
        temperature = -99999;
 8003716:	4ba9      	ldr	r3, [pc, #676]	@ (80039bc <SLIDER_DisplayTemperature+0x30c>)
 8003718:	667b      	str	r3, [r7, #100]	@ 0x64

    uint8_t digits[6];

    // Inicjujemy wszystkie cyfry jako puste (segment odpowiadający spacji)
    for (int i = 0; i < 6; i++) {
 800371a:	2300      	movs	r3, #0
 800371c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003720:	e010      	b.n	8003744 <SLIDER_DisplayTemperature+0x94>
        digits[i] = charToSegment(' ');
 8003722:	2020      	movs	r0, #32
 8003724:	f7fd f98a 	bl	8000a3c <charToSegment>
 8003728:	4603      	mov	r3, r0
 800372a:	4619      	mov	r1, r3
 800372c:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8003730:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003734:	441a      	add	r2, r3
 8003736:	460b      	mov	r3, r1
 8003738:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < 6; i++) {
 800373a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800373e:	3301      	adds	r3, #1
 8003740:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003744:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003748:	2b05      	cmp	r3, #5
 800374a:	ddea      	ble.n	8003722 <SLIDER_DisplayTemperature+0x72>
    }

    bool isNegative = false;
 800374c:	2300      	movs	r3, #0
 800374e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
    if (temperature < 0) {
 8003752:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003754:	2b00      	cmp	r3, #0
 8003756:	da05      	bge.n	8003764 <SLIDER_DisplayTemperature+0xb4>
        isNegative = true;
 8003758:	2301      	movs	r3, #1
 800375a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
        temperature = -temperature;
 800375e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003760:	425b      	negs	r3, r3
 8003762:	667b      	str	r3, [r7, #100]	@ 0x64
    }

    // Przypisujemy symbole 'C' i '°' w zależności od warunków
    if (isNegative && temperature >= 10000) {
 8003764:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00b      	beq.n	8003784 <SLIDER_DisplayTemperature+0xd4>
 800376c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800376e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003772:	429a      	cmp	r2, r3
 8003774:	dd06      	ble.n	8003784 <SLIDER_DisplayTemperature+0xd4>
        // Dla ujemnych wartości z 5 cyframi, wyświetlamy tylko '°'
        //digits[5] = charToSegment(' '); // Brak 'C'
        digits[5] = charToSegment('*'); // Symbol stopnia
 8003776:	202a      	movs	r0, #42	@ 0x2a
 8003778:	f7fd f960 	bl	8000a3c <charToSegment>
 800377c:	4603      	mov	r3, r0
 800377e:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8003782:	e00b      	b.n	800379c <SLIDER_DisplayTemperature+0xec>

    } else {
        // Dla dodatnich lub ujemnych wartości z mniej niż 5 cyframi, wyświetlamy '°C'
        digits[5] = charToSegment('C'); // Litera 'C'
 8003784:	2043      	movs	r0, #67	@ 0x43
 8003786:	f7fd f959 	bl	8000a3c <charToSegment>
 800378a:	4603      	mov	r3, r0
 800378c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
        digits[4] = charToSegment('*'); // Symbol stopnia
 8003790:	202a      	movs	r0, #42	@ 0x2a
 8003792:	f7fd f953 	bl	8000a3c <charToSegment>
 8003796:	4603      	mov	r3, r0
 8003798:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
    }

    // Wypełniamy cyfry od prawej strony, zaczynając od indeksu 3
    int digitPos = 3;
 800379c:	2303      	movs	r3, #3
 800379e:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 4; i++) {
 80037a0:	2300      	movs	r3, #0
 80037a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80037a4:	e044      	b.n	8003830 <SLIDER_DisplayTemperature+0x180>
        if (temperature > 0 || i > 0) { // Zapobiega wstawianiu '0' na początku
 80037a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	dc02      	bgt.n	80037b2 <SLIDER_DisplayTemperature+0x102>
 80037ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	dd25      	ble.n	80037fe <SLIDER_DisplayTemperature+0x14e>
            digits[digitPos - i] = charToSegment('0' + (temperature % 10));
 80037b2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80037b4:	4b82      	ldr	r3, [pc, #520]	@ (80039c0 <SLIDER_DisplayTemperature+0x310>)
 80037b6:	fb83 2301 	smull	r2, r3, r3, r1
 80037ba:	109a      	asrs	r2, r3, #2
 80037bc:	17cb      	asrs	r3, r1, #31
 80037be:	1ad2      	subs	r2, r2, r3
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	1aca      	subs	r2, r1, r3
 80037ca:	b2d3      	uxtb	r3, r2
 80037cc:	3330      	adds	r3, #48	@ 0x30
 80037ce:	b2d9      	uxtb	r1, r3
 80037d0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80037d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037d4:	1ad4      	subs	r4, r2, r3
 80037d6:	4608      	mov	r0, r1
 80037d8:	f7fd f930 	bl	8000a3c <charToSegment>
 80037dc:	4603      	mov	r3, r0
 80037de:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 80037e2:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80037e6:	440a      	add	r2, r1
 80037e8:	f802 3c20 	strb.w	r3, [r2, #-32]
            temperature /= 10;
 80037ec:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80037ee:	4b74      	ldr	r3, [pc, #464]	@ (80039c0 <SLIDER_DisplayTemperature+0x310>)
 80037f0:	fb83 2301 	smull	r2, r3, r3, r1
 80037f4:	109a      	asrs	r2, r3, #2
 80037f6:	17cb      	asrs	r3, r1, #31
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80037fc:	e015      	b.n	800382a <SLIDER_DisplayTemperature+0x17a>
        } else {
            digits[digitPos - i] = charToSegment('0');
 80037fe:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003800:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003802:	1ad4      	subs	r4, r2, r3
 8003804:	2030      	movs	r0, #48	@ 0x30
 8003806:	f7fd f919 	bl	8000a3c <charToSegment>
 800380a:	4603      	mov	r3, r0
 800380c:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8003810:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8003814:	440a      	add	r2, r1
 8003816:	f802 3c20 	strb.w	r3, [r2, #-32]
            temperature /= 10;
 800381a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800381c:	4b68      	ldr	r3, [pc, #416]	@ (80039c0 <SLIDER_DisplayTemperature+0x310>)
 800381e:	fb83 2301 	smull	r2, r3, r3, r1
 8003822:	109a      	asrs	r2, r3, #2
 8003824:	17cb      	asrs	r3, r1, #31
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	667b      	str	r3, [r7, #100]	@ 0x64
    for (int i = 0; i < 4; i++) {
 800382a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800382c:	3301      	adds	r3, #1
 800382e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003830:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003832:	2b03      	cmp	r3, #3
 8003834:	ddb7      	ble.n	80037a6 <SLIDER_DisplayTemperature+0xf6>
        }
    }

    // Jeśli temperatura jest ujemna, ustawiamy znak minus
    if (isNegative) {
 8003836:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <SLIDER_DisplayTemperature+0x19a>
        digits[0] = charToSegment('-');
 800383e:	202d      	movs	r0, #45	@ 0x2d
 8003840:	f7fd f8fc 	bl	8000a3c <charToSegment>
 8003844:	4603      	mov	r3, r0
 8003846:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
    }

    // Składamy 6 cyfr do 48-bitowej wartości
    uint64_t displayVal = 0ULL;
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[5] << 40);
 8003856:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2200      	movs	r2, #0
 800385e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003860:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003862:	f04f 0000 	mov.w	r0, #0
 8003866:	f04f 0100 	mov.w	r1, #0
 800386a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800386c:	0219      	lsls	r1, r3, #8
 800386e:	2000      	movs	r0, #0
 8003870:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003874:	ea42 0400 	orr.w	r4, r2, r0
 8003878:	633c      	str	r4, [r7, #48]	@ 0x30
 800387a:	430b      	orrs	r3, r1
 800387c:	637b      	str	r3, [r7, #52]	@ 0x34
 800387e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003882:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[4] << 32);
 8003886:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2200      	movs	r2, #0
 800388e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003890:	657a      	str	r2, [r7, #84]	@ 0x54
 8003892:	f04f 0000 	mov.w	r0, #0
 8003896:	f04f 0100 	mov.w	r1, #0
 800389a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800389c:	0019      	movs	r1, r3
 800389e:	2000      	movs	r0, #0
 80038a0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80038a4:	ea42 0400 	orr.w	r4, r2, r0
 80038a8:	62bc      	str	r4, [r7, #40]	@ 0x28
 80038aa:	430b      	orrs	r3, r1
 80038ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ae:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80038b2:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[3] << 24);
 80038b6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2200      	movs	r2, #0
 80038be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038c0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80038c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80038c6:	460b      	mov	r3, r1
 80038c8:	ea4f 2913 	mov.w	r9, r3, lsr #8
 80038cc:	460b      	mov	r3, r1
 80038ce:	ea4f 6803 	mov.w	r8, r3, lsl #24
 80038d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80038d6:	ea42 0108 	orr.w	r1, r2, r8
 80038da:	6239      	str	r1, [r7, #32]
 80038dc:	ea43 0309 	orr.w	r3, r3, r9
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80038e6:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[2] << 16);
 80038ea:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2200      	movs	r2, #0
 80038f2:	469a      	mov	sl, r3
 80038f4:	4693      	mov	fp, r2
 80038f6:	f04f 0000 	mov.w	r0, #0
 80038fa:	f04f 0100 	mov.w	r1, #0
 80038fe:	ea4f 410b 	mov.w	r1, fp, lsl #16
 8003902:	ea41 411a 	orr.w	r1, r1, sl, lsr #16
 8003906:	ea4f 400a 	mov.w	r0, sl, lsl #16
 800390a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800390e:	ea42 0400 	orr.w	r4, r2, r0
 8003912:	61bc      	str	r4, [r7, #24]
 8003914:	430b      	orrs	r3, r1
 8003916:	61fb      	str	r3, [r7, #28]
 8003918:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800391c:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[1] << 8);
 8003920:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2200      	movs	r2, #0
 8003928:	461d      	mov	r5, r3
 800392a:	4616      	mov	r6, r2
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	0233      	lsls	r3, r6, #8
 8003936:	ea43 6315 	orr.w	r3, r3, r5, lsr #24
 800393a:	022a      	lsls	r2, r5, #8
 800393c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003940:	ea40 0402 	orr.w	r4, r0, r2
 8003944:	613c      	str	r4, [r7, #16]
 8003946:	430b      	orrs	r3, r1
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800394e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[0] << 0);
 8003952:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2200      	movs	r2, #0
 800395a:	643b      	str	r3, [r7, #64]	@ 0x40
 800395c:	647a      	str	r2, [r7, #68]	@ 0x44
 800395e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003962:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8003966:	4621      	mov	r1, r4
 8003968:	4311      	orrs	r1, r2
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	4629      	mov	r1, r5
 800396e:	4319      	orrs	r1, r3
 8003970:	60f9      	str	r1, [r7, #12]
 8003972:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003976:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    displayVal |= ((uint64_t)0b10000000 << 8); // Kropka dziesiętna na digit[1]
 800397a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800397e:	f442 4100 	orr.w	r1, r2, #32768	@ 0x8000
 8003982:	6039      	str	r1, [r7, #0]
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	e9d7 3400 	ldrd	r3, r4, [r7]
 800398a:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70



    // Ustawiamy wartość wyświetlacza i aktualizujemy wyświetlacze
    clockReg.bottomDisplay = displayVal;
 800398e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003992:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003994:	b29b      	uxth	r3, r3
 8003996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003998:	4b0a      	ldr	r3, [pc, #40]	@ (80039c4 <SLIDER_DisplayTemperature+0x314>)
 800399a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800399e:	4602      	mov	r2, r0
 80039a0:	f8c3 2012 	str.w	r2, [r3, #18]
 80039a4:	460a      	mov	r2, r1
 80039a6:	82da      	strh	r2, [r3, #22]
    //UpdateAllDisplays(&clockReg);
}
 80039a8:	378c      	adds	r7, #140	@ 0x8c
 80039aa:	46bd      	mov	sp, r7
 80039ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039b0:	2000075d 	.word	0x2000075d
 80039b4:	0001869f 	.word	0x0001869f
 80039b8:	20000760 	.word	0x20000760
 80039bc:	fffe7961 	.word	0xfffe7961
 80039c0:	66666667 	.word	0x66666667
 80039c4:	200006d0 	.word	0x200006d0

080039c8 <SLIDER_DisplayHumidity>:
    clockReg.bottomDisplay = displayVal;
    //UpdateAllDisplays(&clockReg);
}

void SLIDER_DisplayHumidity(uint32_t humidity)
{
 80039c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039cc:	b0a3      	sub	sp, #140	@ 0x8c
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6678      	str	r0, [r7, #100]	@ 0x64
    // Jeżeli slider nie jest zatrzymany, zapamiętaj żądanie i wyjdź
    if (!SLIDER_IsStopped()) {
 80039d2:	f7ff fd51 	bl	8003478 <SLIDER_IsStopped>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f083 0301 	eor.w	r3, r3, #1
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00e      	beq.n	8003a00 <SLIDER_DisplayHumidity+0x38>
        displayNumberPending = true;
 80039e2:	4b9d      	ldr	r3, [pc, #628]	@ (8003c58 <SLIDER_DisplayHumidity+0x290>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	701a      	strb	r2, [r3, #0]
        // Ograniczamy wilgotność do zakresu 0 do 999999
        if (humidity > 999999) {
 80039e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039ea:	4a9c      	ldr	r2, [pc, #624]	@ (8003c5c <SLIDER_DisplayHumidity+0x294>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d903      	bls.n	80039f8 <SLIDER_DisplayHumidity+0x30>
            pendingNumberToDisplay = 999999;
 80039f0:	4b9b      	ldr	r3, [pc, #620]	@ (8003c60 <SLIDER_DisplayHumidity+0x298>)
 80039f2:	4a9a      	ldr	r2, [pc, #616]	@ (8003c5c <SLIDER_DisplayHumidity+0x294>)
 80039f4:	601a      	str	r2, [r3, #0]
        } else {
            pendingNumberToDisplay = humidity;
        }
        return;
 80039f6:	e12b      	b.n	8003c50 <SLIDER_DisplayHumidity+0x288>
            pendingNumberToDisplay = humidity;
 80039f8:	4a99      	ldr	r2, [pc, #612]	@ (8003c60 <SLIDER_DisplayHumidity+0x298>)
 80039fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e127      	b.n	8003c50 <SLIDER_DisplayHumidity+0x288>
    }

    // Slider jest zatrzymany – wyświetlamy wilgotność od razu

    // Ograniczamy wilgotność do zakresu 0 do 999999
    if (humidity > 999999)
 8003a00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a02:	4b96      	ldr	r3, [pc, #600]	@ (8003c5c <SLIDER_DisplayHumidity+0x294>)
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d901      	bls.n	8003a0c <SLIDER_DisplayHumidity+0x44>
        humidity = 999999;
 8003a08:	4b94      	ldr	r3, [pc, #592]	@ (8003c5c <SLIDER_DisplayHumidity+0x294>)
 8003a0a:	667b      	str	r3, [r7, #100]	@ 0x64

    uint8_t digits[6];

    // Inicjujemy wszystkie cyfry jako puste (segment odpowiadający spacji)
    for (int i = 0; i < 6; i++) {
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a12:	e010      	b.n	8003a36 <SLIDER_DisplayHumidity+0x6e>
        digits[i] = charToSegment(' ');
 8003a14:	2020      	movs	r0, #32
 8003a16:	f7fd f811 	bl	8000a3c <charToSegment>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8003a22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a26:	441a      	add	r2, r3
 8003a28:	460b      	mov	r3, r1
 8003a2a:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < 6; i++) {
 8003a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a30:	3301      	adds	r3, #1
 8003a32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a3a:	2b05      	cmp	r3, #5
 8003a3c:	ddea      	ble.n	8003a14 <SLIDER_DisplayHumidity+0x4c>
    }

    // Przypisujemy litery 'R' i 'H' na ostatnich dwóch pozycjach
    digits[5] = charToSegment('h'); // Litera 'H'
 8003a3e:	2068      	movs	r0, #104	@ 0x68
 8003a40:	f7fc fffc 	bl	8000a3c <charToSegment>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
    digits[4] = charToSegment('R'); // Litera 'R'
 8003a4a:	2052      	movs	r0, #82	@ 0x52
 8003a4c:	f7fc fff6 	bl	8000a3c <charToSegment>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c

    // Wypełniamy cyfry wilgotności od prawej strony, zaczynając od indeksu 3
    int digitPos = 3;
 8003a56:	2303      	movs	r3, #3
 8003a58:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for (int i = 0; i < 4; i++) { // Cztery cyfry dla wilgotności (0-9999)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a60:	e043      	b.n	8003aea <SLIDER_DisplayHumidity+0x122>
        if (humidity > 0 || i > 0) { // Zapobiega wstawianiu '0' na początku
 8003a62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d103      	bne.n	8003a70 <SLIDER_DisplayHumidity+0xa8>
 8003a68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	dd22      	ble.n	8003ab6 <SLIDER_DisplayHumidity+0xee>
            digits[digitPos - i] = charToSegment('0' + (humidity % 10));
 8003a70:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003a72:	4b7c      	ldr	r3, [pc, #496]	@ (8003c64 <SLIDER_DisplayHumidity+0x29c>)
 8003a74:	fba3 2301 	umull	r2, r3, r3, r1
 8003a78:	08da      	lsrs	r2, r3, #3
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	1aca      	subs	r2, r1, r3
 8003a84:	b2d3      	uxtb	r3, r2
 8003a86:	3330      	adds	r3, #48	@ 0x30
 8003a88:	b2d9      	uxtb	r1, r3
 8003a8a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a90:	1ad4      	subs	r4, r2, r3
 8003a92:	4608      	mov	r0, r1
 8003a94:	f7fc ffd2 	bl	8000a3c <charToSegment>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8003a9e:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8003aa2:	440a      	add	r2, r1
 8003aa4:	f802 3c20 	strb.w	r3, [r2, #-32]
            humidity /= 10;
 8003aa8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003aaa:	4b6e      	ldr	r3, [pc, #440]	@ (8003c64 <SLIDER_DisplayHumidity+0x29c>)
 8003aac:	fba3 2302 	umull	r2, r3, r3, r2
 8003ab0:	08db      	lsrs	r3, r3, #3
 8003ab2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ab4:	e014      	b.n	8003ae0 <SLIDER_DisplayHumidity+0x118>
        } else {
            digits[digitPos - i] = charToSegment('0');
 8003ab6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003ab8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003abc:	1ad4      	subs	r4, r2, r3
 8003abe:	2030      	movs	r0, #48	@ 0x30
 8003ac0:	f7fc ffbc 	bl	8000a3c <charToSegment>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8003aca:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8003ace:	440a      	add	r2, r1
 8003ad0:	f802 3c20 	strb.w	r3, [r2, #-32]
            humidity /= 10;
 8003ad4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003ad6:	4b63      	ldr	r3, [pc, #396]	@ (8003c64 <SLIDER_DisplayHumidity+0x29c>)
 8003ad8:	fba3 2302 	umull	r2, r3, r3, r2
 8003adc:	08db      	lsrs	r3, r3, #3
 8003ade:	667b      	str	r3, [r7, #100]	@ 0x64
    for (int i = 0; i < 4; i++) { // Cztery cyfry dla wilgotności (0-9999)
 8003ae0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003aea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	ddb7      	ble.n	8003a62 <SLIDER_DisplayHumidity+0x9a>
        }
    }

    // Składamy 6 cyfr do 48-bitowej wartości
    uint64_t displayVal = 0ULL;
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[5] << 40);
 8003afe:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2200      	movs	r2, #0
 8003b06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b08:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003b0a:	f04f 0000 	mov.w	r0, #0
 8003b0e:	f04f 0100 	mov.w	r1, #0
 8003b12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b14:	0219      	lsls	r1, r3, #8
 8003b16:	2000      	movs	r0, #0
 8003b18:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b1c:	ea42 0400 	orr.w	r4, r2, r0
 8003b20:	633c      	str	r4, [r7, #48]	@ 0x30
 8003b22:	430b      	orrs	r3, r1
 8003b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b26:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003b2a:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[4] << 32);
 8003b2e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2200      	movs	r2, #0
 8003b36:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b38:	657a      	str	r2, [r7, #84]	@ 0x54
 8003b3a:	f04f 0000 	mov.w	r0, #0
 8003b3e:	f04f 0100 	mov.w	r1, #0
 8003b42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b44:	0019      	movs	r1, r3
 8003b46:	2000      	movs	r0, #0
 8003b48:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b4c:	ea42 0400 	orr.w	r4, r2, r0
 8003b50:	62bc      	str	r4, [r7, #40]	@ 0x28
 8003b52:	430b      	orrs	r3, r1
 8003b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b56:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8003b5a:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[3] << 24);
 8003b5e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2200      	movs	r2, #0
 8003b66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b68:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003b6a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003b6e:	460b      	mov	r3, r1
 8003b70:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8003b74:	460b      	mov	r3, r1
 8003b76:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8003b7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b7e:	ea42 0108 	orr.w	r1, r2, r8
 8003b82:	6239      	str	r1, [r7, #32]
 8003b84:	ea43 0309 	orr.w	r3, r3, r9
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b8a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003b8e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[2] << 16);
 8003b92:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2200      	movs	r2, #0
 8003b9a:	469a      	mov	sl, r3
 8003b9c:	4693      	mov	fp, r2
 8003b9e:	f04f 0000 	mov.w	r0, #0
 8003ba2:	f04f 0100 	mov.w	r1, #0
 8003ba6:	ea4f 410b 	mov.w	r1, fp, lsl #16
 8003baa:	ea41 411a 	orr.w	r1, r1, sl, lsr #16
 8003bae:	ea4f 400a 	mov.w	r0, sl, lsl #16
 8003bb2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003bb6:	ea42 0400 	orr.w	r4, r2, r0
 8003bba:	61bc      	str	r4, [r7, #24]
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	61fb      	str	r3, [r7, #28]
 8003bc0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003bc4:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[1] << 8);
 8003bc8:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2200      	movs	r2, #0
 8003bd0:	461d      	mov	r5, r3
 8003bd2:	4616      	mov	r6, r2
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	0233      	lsls	r3, r6, #8
 8003bde:	ea43 6315 	orr.w	r3, r3, r5, lsr #24
 8003be2:	022a      	lsls	r2, r5, #8
 8003be4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003be8:	ea40 0402 	orr.w	r4, r0, r2
 8003bec:	613c      	str	r4, [r7, #16]
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003bf6:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[0] << 0);
 8003bfa:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2200      	movs	r2, #0
 8003c02:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c04:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c0a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8003c0e:	4621      	mov	r1, r4
 8003c10:	4311      	orrs	r1, r2
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	4629      	mov	r1, r5
 8003c16:	4319      	orrs	r1, r3
 8003c18:	60f9      	str	r1, [r7, #12]
 8003c1a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003c1e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    // **Miejsce dodania maski kropki dziesiętnej**
    // Możesz dodać maskę kropki dziesiętnej na dowolnej pozycji, np. na drugiej cyfrze (indeks 1)
    // Przykład: Ustawienie kropki dziesiętnej na digit[1]
     displayVal |= ((uint64_t)0b10000000 << 8); // Opcjonalnie, możesz to zrobić w swoim kodzie
 8003c22:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c26:	f442 4100 	orr.w	r1, r2, #32768	@ 0x8000
 8003c2a:	6039      	str	r1, [r7, #0]
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003c32:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    // Ustawiamy wartość wyświetlacza i aktualizujemy wyświetlacze
    clockReg.bottomDisplay = displayVal;
 8003c36:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c3a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c40:	4b09      	ldr	r3, [pc, #36]	@ (8003c68 <SLIDER_DisplayHumidity+0x2a0>)
 8003c42:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003c46:	4602      	mov	r2, r0
 8003c48:	f8c3 2012 	str.w	r2, [r3, #18]
 8003c4c:	460a      	mov	r2, r1
 8003c4e:	82da      	strh	r2, [r3, #22]
    //UpdateAllDisplays(&clockReg);
}
 8003c50:	378c      	adds	r7, #140	@ 0x8c
 8003c52:	46bd      	mov	sp, r7
 8003c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c58:	2000075d 	.word	0x2000075d
 8003c5c:	000f423f 	.word	0x000f423f
 8003c60:	20000760 	.word	0x20000760
 8003c64:	cccccccd 	.word	0xcccccccd
 8003c68:	200006d0 	.word	0x200006d0

08003c6c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003c70:	4b17      	ldr	r3, [pc, #92]	@ (8003cd0 <MX_SPI1_Init+0x64>)
 8003c72:	4a18      	ldr	r2, [pc, #96]	@ (8003cd4 <MX_SPI1_Init+0x68>)
 8003c74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c76:	4b16      	ldr	r3, [pc, #88]	@ (8003cd0 <MX_SPI1_Init+0x64>)
 8003c78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003c7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c7e:	4b14      	ldr	r3, [pc, #80]	@ (8003cd0 <MX_SPI1_Init+0x64>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c84:	4b12      	ldr	r3, [pc, #72]	@ (8003cd0 <MX_SPI1_Init+0x64>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c8a:	4b11      	ldr	r3, [pc, #68]	@ (8003cd0 <MX_SPI1_Init+0x64>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c90:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd0 <MX_SPI1_Init+0x64>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c96:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd0 <MX_SPI1_Init+0x64>)
 8003c98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd0 <MX_SPI1_Init+0x64>)
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd0 <MX_SPI1_Init+0x64>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003caa:	4b09      	ldr	r3, [pc, #36]	@ (8003cd0 <MX_SPI1_Init+0x64>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cb0:	4b07      	ldr	r3, [pc, #28]	@ (8003cd0 <MX_SPI1_Init+0x64>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003cb6:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <MX_SPI1_Init+0x64>)
 8003cb8:	220a      	movs	r2, #10
 8003cba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cbc:	4804      	ldr	r0, [pc, #16]	@ (8003cd0 <MX_SPI1_Init+0x64>)
 8003cbe:	f005 fcb9 	bl	8009634 <HAL_SPI_Init>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003cc8:	f7fe fc3a 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ccc:	bf00      	nop
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000774 	.word	0x20000774
 8003cd4:	40013000 	.word	0x40013000

08003cd8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003cdc:	4b17      	ldr	r3, [pc, #92]	@ (8003d3c <MX_SPI2_Init+0x64>)
 8003cde:	4a18      	ldr	r2, [pc, #96]	@ (8003d40 <MX_SPI2_Init+0x68>)
 8003ce0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003ce2:	4b16      	ldr	r3, [pc, #88]	@ (8003d3c <MX_SPI2_Init+0x64>)
 8003ce4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ce8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003cea:	4b14      	ldr	r3, [pc, #80]	@ (8003d3c <MX_SPI2_Init+0x64>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cf0:	4b12      	ldr	r3, [pc, #72]	@ (8003d3c <MX_SPI2_Init+0x64>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cf6:	4b11      	ldr	r3, [pc, #68]	@ (8003d3c <MX_SPI2_Init+0x64>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8003d3c <MX_SPI2_Init+0x64>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003d02:	4b0e      	ldr	r3, [pc, #56]	@ (8003d3c <MX_SPI2_Init+0x64>)
 8003d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <MX_SPI2_Init+0x64>)
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d10:	4b0a      	ldr	r3, [pc, #40]	@ (8003d3c <MX_SPI2_Init+0x64>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d16:	4b09      	ldr	r3, [pc, #36]	@ (8003d3c <MX_SPI2_Init+0x64>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d1c:	4b07      	ldr	r3, [pc, #28]	@ (8003d3c <MX_SPI2_Init+0x64>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d22:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <MX_SPI2_Init+0x64>)
 8003d24:	220a      	movs	r2, #10
 8003d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d28:	4804      	ldr	r0, [pc, #16]	@ (8003d3c <MX_SPI2_Init+0x64>)
 8003d2a:	f005 fc83 	bl	8009634 <HAL_SPI_Init>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003d34:	f7fe fc04 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003d38:	bf00      	nop
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	200007cc 	.word	0x200007cc
 8003d40:	40003800 	.word	0x40003800

08003d44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08c      	sub	sp, #48	@ 0x30
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d4c:	f107 031c 	add.w	r3, r7, #28
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	605a      	str	r2, [r3, #4]
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	60da      	str	r2, [r3, #12]
 8003d5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a7f      	ldr	r2, [pc, #508]	@ (8003f60 <HAL_SPI_MspInit+0x21c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d162      	bne.n	8003e2c <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	4b7e      	ldr	r3, [pc, #504]	@ (8003f64 <HAL_SPI_MspInit+0x220>)
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	4a7d      	ldr	r2, [pc, #500]	@ (8003f64 <HAL_SPI_MspInit+0x220>)
 8003d70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d76:	4b7b      	ldr	r3, [pc, #492]	@ (8003f64 <HAL_SPI_MspInit+0x220>)
 8003d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	4b77      	ldr	r3, [pc, #476]	@ (8003f64 <HAL_SPI_MspInit+0x220>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8a:	4a76      	ldr	r2, [pc, #472]	@ (8003f64 <HAL_SPI_MspInit+0x220>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d92:	4b74      	ldr	r3, [pc, #464]	@ (8003f64 <HAL_SPI_MspInit+0x220>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003d9e:	23a0      	movs	r3, #160	@ 0xa0
 8003da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da2:	2302      	movs	r3, #2
 8003da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003daa:	2303      	movs	r3, #3
 8003dac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003dae:	2305      	movs	r3, #5
 8003db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db2:	f107 031c 	add.w	r3, r7, #28
 8003db6:	4619      	mov	r1, r3
 8003db8:	486b      	ldr	r0, [pc, #428]	@ (8003f68 <HAL_SPI_MspInit+0x224>)
 8003dba:	f001 fd43 	bl	8005844 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003dbe:	4b6b      	ldr	r3, [pc, #428]	@ (8003f6c <HAL_SPI_MspInit+0x228>)
 8003dc0:	4a6b      	ldr	r2, [pc, #428]	@ (8003f70 <HAL_SPI_MspInit+0x22c>)
 8003dc2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003dc4:	4b69      	ldr	r3, [pc, #420]	@ (8003f6c <HAL_SPI_MspInit+0x228>)
 8003dc6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003dca:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dcc:	4b67      	ldr	r3, [pc, #412]	@ (8003f6c <HAL_SPI_MspInit+0x228>)
 8003dce:	2240      	movs	r2, #64	@ 0x40
 8003dd0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dd2:	4b66      	ldr	r3, [pc, #408]	@ (8003f6c <HAL_SPI_MspInit+0x228>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dd8:	4b64      	ldr	r3, [pc, #400]	@ (8003f6c <HAL_SPI_MspInit+0x228>)
 8003dda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dde:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003de0:	4b62      	ldr	r3, [pc, #392]	@ (8003f6c <HAL_SPI_MspInit+0x228>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003de6:	4b61      	ldr	r3, [pc, #388]	@ (8003f6c <HAL_SPI_MspInit+0x228>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003dec:	4b5f      	ldr	r3, [pc, #380]	@ (8003f6c <HAL_SPI_MspInit+0x228>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003df2:	4b5e      	ldr	r3, [pc, #376]	@ (8003f6c <HAL_SPI_MspInit+0x228>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003df8:	4b5c      	ldr	r3, [pc, #368]	@ (8003f6c <HAL_SPI_MspInit+0x228>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003dfe:	485b      	ldr	r0, [pc, #364]	@ (8003f6c <HAL_SPI_MspInit+0x228>)
 8003e00:	f001 f974 	bl	80050ec <HAL_DMA_Init>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8003e0a:	f7fe fb99 	bl	8002540 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a56      	ldr	r2, [pc, #344]	@ (8003f6c <HAL_SPI_MspInit+0x228>)
 8003e12:	649a      	str	r2, [r3, #72]	@ 0x48
 8003e14:	4a55      	ldr	r2, [pc, #340]	@ (8003f6c <HAL_SPI_MspInit+0x228>)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	2023      	movs	r0, #35	@ 0x23
 8003e20:	f001 f92d 	bl	800507e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003e24:	2023      	movs	r0, #35	@ 0x23
 8003e26:	f001 f946 	bl	80050b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003e2a:	e094      	b.n	8003f56 <HAL_SPI_MspInit+0x212>
  else if(spiHandle->Instance==SPI2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a50      	ldr	r2, [pc, #320]	@ (8003f74 <HAL_SPI_MspInit+0x230>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	f040 808f 	bne.w	8003f56 <HAL_SPI_MspInit+0x212>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e38:	2300      	movs	r3, #0
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	4b49      	ldr	r3, [pc, #292]	@ (8003f64 <HAL_SPI_MspInit+0x220>)
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	4a48      	ldr	r2, [pc, #288]	@ (8003f64 <HAL_SPI_MspInit+0x220>)
 8003e42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e46:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e48:	4b46      	ldr	r3, [pc, #280]	@ (8003f64 <HAL_SPI_MspInit+0x220>)
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	4b42      	ldr	r3, [pc, #264]	@ (8003f64 <HAL_SPI_MspInit+0x220>)
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5c:	4a41      	ldr	r2, [pc, #260]	@ (8003f64 <HAL_SPI_MspInit+0x220>)
 8003e5e:	f043 0302 	orr.w	r3, r3, #2
 8003e62:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e64:	4b3f      	ldr	r3, [pc, #252]	@ (8003f64 <HAL_SPI_MspInit+0x220>)
 8003e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003e70:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e76:	2302      	movs	r3, #2
 8003e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e82:	2305      	movs	r3, #5
 8003e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e86:	f107 031c 	add.w	r3, r7, #28
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	483a      	ldr	r0, [pc, #232]	@ (8003f78 <HAL_SPI_MspInit+0x234>)
 8003e8e:	f001 fcd9 	bl	8005844 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003e92:	4b3a      	ldr	r3, [pc, #232]	@ (8003f7c <HAL_SPI_MspInit+0x238>)
 8003e94:	4a3a      	ldr	r2, [pc, #232]	@ (8003f80 <HAL_SPI_MspInit+0x23c>)
 8003e96:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003e98:	4b38      	ldr	r3, [pc, #224]	@ (8003f7c <HAL_SPI_MspInit+0x238>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e9e:	4b37      	ldr	r3, [pc, #220]	@ (8003f7c <HAL_SPI_MspInit+0x238>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ea4:	4b35      	ldr	r3, [pc, #212]	@ (8003f7c <HAL_SPI_MspInit+0x238>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003eaa:	4b34      	ldr	r3, [pc, #208]	@ (8003f7c <HAL_SPI_MspInit+0x238>)
 8003eac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003eb0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eb2:	4b32      	ldr	r3, [pc, #200]	@ (8003f7c <HAL_SPI_MspInit+0x238>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003eb8:	4b30      	ldr	r3, [pc, #192]	@ (8003f7c <HAL_SPI_MspInit+0x238>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8003f7c <HAL_SPI_MspInit+0x238>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8003f7c <HAL_SPI_MspInit+0x238>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003eca:	4b2c      	ldr	r3, [pc, #176]	@ (8003f7c <HAL_SPI_MspInit+0x238>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003ed0:	482a      	ldr	r0, [pc, #168]	@ (8003f7c <HAL_SPI_MspInit+0x238>)
 8003ed2:	f001 f90b 	bl	80050ec <HAL_DMA_Init>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_SPI_MspInit+0x19c>
      Error_Handler();
 8003edc:	f7fe fb30 	bl	8002540 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a26      	ldr	r2, [pc, #152]	@ (8003f7c <HAL_SPI_MspInit+0x238>)
 8003ee4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003ee6:	4a25      	ldr	r2, [pc, #148]	@ (8003f7c <HAL_SPI_MspInit+0x238>)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003eec:	4b25      	ldr	r3, [pc, #148]	@ (8003f84 <HAL_SPI_MspInit+0x240>)
 8003eee:	4a26      	ldr	r2, [pc, #152]	@ (8003f88 <HAL_SPI_MspInit+0x244>)
 8003ef0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003ef2:	4b24      	ldr	r3, [pc, #144]	@ (8003f84 <HAL_SPI_MspInit+0x240>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ef8:	4b22      	ldr	r3, [pc, #136]	@ (8003f84 <HAL_SPI_MspInit+0x240>)
 8003efa:	2240      	movs	r2, #64	@ 0x40
 8003efc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003efe:	4b21      	ldr	r3, [pc, #132]	@ (8003f84 <HAL_SPI_MspInit+0x240>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f04:	4b1f      	ldr	r3, [pc, #124]	@ (8003f84 <HAL_SPI_MspInit+0x240>)
 8003f06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f0a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f84 <HAL_SPI_MspInit+0x240>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f12:	4b1c      	ldr	r3, [pc, #112]	@ (8003f84 <HAL_SPI_MspInit+0x240>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003f18:	4b1a      	ldr	r3, [pc, #104]	@ (8003f84 <HAL_SPI_MspInit+0x240>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f1e:	4b19      	ldr	r3, [pc, #100]	@ (8003f84 <HAL_SPI_MspInit+0x240>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f24:	4b17      	ldr	r3, [pc, #92]	@ (8003f84 <HAL_SPI_MspInit+0x240>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003f2a:	4816      	ldr	r0, [pc, #88]	@ (8003f84 <HAL_SPI_MspInit+0x240>)
 8003f2c:	f001 f8de 	bl	80050ec <HAL_DMA_Init>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_SPI_MspInit+0x1f6>
      Error_Handler();
 8003f36:	f7fe fb03 	bl	8002540 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a11      	ldr	r2, [pc, #68]	@ (8003f84 <HAL_SPI_MspInit+0x240>)
 8003f3e:	649a      	str	r2, [r3, #72]	@ 0x48
 8003f40:	4a10      	ldr	r2, [pc, #64]	@ (8003f84 <HAL_SPI_MspInit+0x240>)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003f46:	2200      	movs	r2, #0
 8003f48:	2100      	movs	r1, #0
 8003f4a:	2024      	movs	r0, #36	@ 0x24
 8003f4c:	f001 f897 	bl	800507e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003f50:	2024      	movs	r0, #36	@ 0x24
 8003f52:	f001 f8b0 	bl	80050b6 <HAL_NVIC_EnableIRQ>
}
 8003f56:	bf00      	nop
 8003f58:	3730      	adds	r7, #48	@ 0x30
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40013000 	.word	0x40013000
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40020000 	.word	0x40020000
 8003f6c:	20000824 	.word	0x20000824
 8003f70:	40026458 	.word	0x40026458
 8003f74:	40003800 	.word	0x40003800
 8003f78:	40020400 	.word	0x40020400
 8003f7c:	20000884 	.word	0x20000884
 8003f80:	40026058 	.word	0x40026058
 8003f84:	200008e4 	.word	0x200008e4
 8003f88:	40026070 	.word	0x40026070

08003f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f92:	2300      	movs	r3, #0
 8003f94:	607b      	str	r3, [r7, #4]
 8003f96:	4b10      	ldr	r3, [pc, #64]	@ (8003fd8 <HAL_MspInit+0x4c>)
 8003f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9a:	4a0f      	ldr	r2, [pc, #60]	@ (8003fd8 <HAL_MspInit+0x4c>)
 8003f9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd8 <HAL_MspInit+0x4c>)
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003faa:	607b      	str	r3, [r7, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	4b09      	ldr	r3, [pc, #36]	@ (8003fd8 <HAL_MspInit+0x4c>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	4a08      	ldr	r2, [pc, #32]	@ (8003fd8 <HAL_MspInit+0x4c>)
 8003fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fbe:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <HAL_MspInit+0x4c>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40023800 	.word	0x40023800

08003fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003fe0:	bf00      	nop
 8003fe2:	e7fd      	b.n	8003fe0 <NMI_Handler+0x4>

08003fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fe8:	bf00      	nop
 8003fea:	e7fd      	b.n	8003fe8 <HardFault_Handler+0x4>

08003fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ff0:	bf00      	nop
 8003ff2:	e7fd      	b.n	8003ff0 <MemManage_Handler+0x4>

08003ff4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ff8:	bf00      	nop
 8003ffa:	e7fd      	b.n	8003ff8 <BusFault_Handler+0x4>

08003ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004000:	bf00      	nop
 8004002:	e7fd      	b.n	8004000 <UsageFault_Handler+0x4>

08004004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004012:	b480      	push	{r7}
 8004014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004032:	f000 fbef 	bl	8004814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8004040:	4802      	ldr	r0, [pc, #8]	@ (800404c <DMA1_Stream2_IRQHandler+0x10>)
 8004042:	f001 f97b 	bl	800533c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004046:	bf00      	nop
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000610 	.word	0x20000610

08004050 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004054:	4802      	ldr	r0, [pc, #8]	@ (8004060 <DMA1_Stream3_IRQHandler+0x10>)
 8004056:	f001 f971 	bl	800533c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000884 	.word	0x20000884

08004064 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004068:	4802      	ldr	r0, [pc, #8]	@ (8004074 <DMA1_Stream4_IRQHandler+0x10>)
 800406a:	f001 f967 	bl	800533c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	200008e4 	.word	0x200008e4

08004078 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800407c:	4802      	ldr	r0, [pc, #8]	@ (8004088 <TIM4_IRQHandler+0x10>)
 800407e:	f006 f99f 	bl	800a3c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000990 	.word	0x20000990

0800408c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004090:	4802      	ldr	r0, [pc, #8]	@ (800409c <I2C2_EV_IRQHandler+0x10>)
 8004092:	f002 fa3d 	bl	8006510 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	200005bc 	.word	0x200005bc

080040a0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80040a4:	4802      	ldr	r0, [pc, #8]	@ (80040b0 <I2C2_ER_IRQHandler+0x10>)
 80040a6:	f002 fb86 	bl	80067b6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200005bc 	.word	0x200005bc

080040b4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80040b8:	4802      	ldr	r0, [pc, #8]	@ (80040c4 <SPI1_IRQHandler+0x10>)
 80040ba:	f005 fbf7 	bl	80098ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000774 	.word	0x20000774

080040c8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80040cc:	4802      	ldr	r0, [pc, #8]	@ (80040d8 <SPI2_IRQHandler+0x10>)
 80040ce:	f005 fbed 	bl	80098ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	200007cc 	.word	0x200007cc

080040dc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80040e0:	4802      	ldr	r0, [pc, #8]	@ (80040ec <DMA1_Stream7_IRQHandler+0x10>)
 80040e2:	f001 f92b 	bl	800533c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000670 	.word	0x20000670

080040f0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80040f4:	4802      	ldr	r0, [pc, #8]	@ (8004100 <TIM5_IRQHandler+0x10>)
 80040f6:	f006 f963 	bl	800a3c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	200009d8 	.word	0x200009d8

08004104 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004108:	4802      	ldr	r0, [pc, #8]	@ (8004114 <DMA2_Stream2_IRQHandler+0x10>)
 800410a:	f001 f917 	bl	800533c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000a68 	.word	0x20000a68

08004118 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800411c:	4802      	ldr	r0, [pc, #8]	@ (8004128 <DMA2_Stream3_IRQHandler+0x10>)
 800411e:	f001 f90d 	bl	800533c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000824 	.word	0x20000824

0800412c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004134:	4a14      	ldr	r2, [pc, #80]	@ (8004188 <_sbrk+0x5c>)
 8004136:	4b15      	ldr	r3, [pc, #84]	@ (800418c <_sbrk+0x60>)
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004140:	4b13      	ldr	r3, [pc, #76]	@ (8004190 <_sbrk+0x64>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d102      	bne.n	800414e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004148:	4b11      	ldr	r3, [pc, #68]	@ (8004190 <_sbrk+0x64>)
 800414a:	4a12      	ldr	r2, [pc, #72]	@ (8004194 <_sbrk+0x68>)
 800414c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800414e:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <_sbrk+0x64>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4413      	add	r3, r2
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	429a      	cmp	r2, r3
 800415a:	d207      	bcs.n	800416c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800415c:	f007 fd0e 	bl	800bb7c <__errno>
 8004160:	4603      	mov	r3, r0
 8004162:	220c      	movs	r2, #12
 8004164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004166:	f04f 33ff 	mov.w	r3, #4294967295
 800416a:	e009      	b.n	8004180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800416c:	4b08      	ldr	r3, [pc, #32]	@ (8004190 <_sbrk+0x64>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004172:	4b07      	ldr	r3, [pc, #28]	@ (8004190 <_sbrk+0x64>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4413      	add	r3, r2
 800417a:	4a05      	ldr	r2, [pc, #20]	@ (8004190 <_sbrk+0x64>)
 800417c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800417e:	68fb      	ldr	r3, [r7, #12]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	20010000 	.word	0x20010000
 800418c:	00000400 	.word	0x00000400
 8004190:	20000944 	.word	0x20000944
 8004194:	20000c18 	.word	0x20000c18

08004198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800419c:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <SystemInit+0x20>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a2:	4a05      	ldr	r2, [pc, #20]	@ (80041b8 <SystemInit+0x20>)
 80041a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b096      	sub	sp, #88	@ 0x58
 80041c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041c2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	609a      	str	r2, [r3, #8]
 80041ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	605a      	str	r2, [r3, #4]
 80041e4:	609a      	str	r2, [r3, #8]
 80041e6:	60da      	str	r2, [r3, #12]
 80041e8:	611a      	str	r2, [r3, #16]
 80041ea:	615a      	str	r2, [r3, #20]
 80041ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80041ee:	1d3b      	adds	r3, r7, #4
 80041f0:	2220      	movs	r2, #32
 80041f2:	2100      	movs	r1, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f007 fc93 	bl	800bb20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80041fa:	4b3e      	ldr	r3, [pc, #248]	@ (80042f4 <MX_TIM1_Init+0x138>)
 80041fc:	4a3e      	ldr	r2, [pc, #248]	@ (80042f8 <MX_TIM1_Init+0x13c>)
 80041fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 8004200:	4b3c      	ldr	r3, [pc, #240]	@ (80042f4 <MX_TIM1_Init+0x138>)
 8004202:	2218      	movs	r2, #24
 8004204:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004206:	4b3b      	ldr	r3, [pc, #236]	@ (80042f4 <MX_TIM1_Init+0x138>)
 8004208:	2200      	movs	r2, #0
 800420a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800420c:	4b39      	ldr	r3, [pc, #228]	@ (80042f4 <MX_TIM1_Init+0x138>)
 800420e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004212:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004214:	4b37      	ldr	r3, [pc, #220]	@ (80042f4 <MX_TIM1_Init+0x138>)
 8004216:	2200      	movs	r2, #0
 8004218:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800421a:	4b36      	ldr	r3, [pc, #216]	@ (80042f4 <MX_TIM1_Init+0x138>)
 800421c:	2200      	movs	r2, #0
 800421e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004220:	4b34      	ldr	r3, [pc, #208]	@ (80042f4 <MX_TIM1_Init+0x138>)
 8004222:	2200      	movs	r2, #0
 8004224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004226:	4833      	ldr	r0, [pc, #204]	@ (80042f4 <MX_TIM1_Init+0x138>)
 8004228:	f005 fdba 	bl	8009da0 <HAL_TIM_Base_Init>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004232:	f7fe f985 	bl	8002540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004236:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800423a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800423c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004240:	4619      	mov	r1, r3
 8004242:	482c      	ldr	r0, [pc, #176]	@ (80042f4 <MX_TIM1_Init+0x138>)
 8004244:	f006 fa6e 	bl	800a724 <HAL_TIM_ConfigClockSource>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800424e:	f7fe f977 	bl	8002540 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004252:	4828      	ldr	r0, [pc, #160]	@ (80042f4 <MX_TIM1_Init+0x138>)
 8004254:	f005 fe56 	bl	8009f04 <HAL_TIM_PWM_Init>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800425e:	f7fe f96f 	bl	8002540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004262:	2300      	movs	r3, #0
 8004264:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004266:	2300      	movs	r3, #0
 8004268:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800426a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800426e:	4619      	mov	r1, r3
 8004270:	4820      	ldr	r0, [pc, #128]	@ (80042f4 <MX_TIM1_Init+0x138>)
 8004272:	f006 fe15 	bl	800aea0 <HAL_TIMEx_MasterConfigSynchronization>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800427c:	f7fe f960 	bl	8002540 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004280:	2360      	movs	r3, #96	@ 0x60
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004288:	2302      	movs	r3, #2
 800428a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800428c:	2300      	movs	r3, #0
 800428e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004290:	2300      	movs	r3, #0
 8004292:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004294:	2300      	movs	r3, #0
 8004296:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004298:	2300      	movs	r3, #0
 800429a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800429c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042a0:	2200      	movs	r2, #0
 80042a2:	4619      	mov	r1, r3
 80042a4:	4813      	ldr	r0, [pc, #76]	@ (80042f4 <MX_TIM1_Init+0x138>)
 80042a6:	f006 f97b 	bl	800a5a0 <HAL_TIM_PWM_ConfigChannel>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80042b0:	f7fe f946 	bl	8002540 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80042b4:	2300      	movs	r3, #0
 80042b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80042c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80042d2:	1d3b      	adds	r3, r7, #4
 80042d4:	4619      	mov	r1, r3
 80042d6:	4807      	ldr	r0, [pc, #28]	@ (80042f4 <MX_TIM1_Init+0x138>)
 80042d8:	f006 fe50 	bl	800af7c <HAL_TIMEx_ConfigBreakDeadTime>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80042e2:	f7fe f92d 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80042e6:	4803      	ldr	r0, [pc, #12]	@ (80042f4 <MX_TIM1_Init+0x138>)
 80042e8:	f000 f938 	bl	800455c <HAL_TIM_MspPostInit>

}
 80042ec:	bf00      	nop
 80042ee:	3758      	adds	r7, #88	@ 0x58
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	20000948 	.word	0x20000948
 80042f8:	40010000 	.word	0x40010000

080042fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08c      	sub	sp, #48	@ 0x30
 8004300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004302:	f107 030c 	add.w	r3, r7, #12
 8004306:	2224      	movs	r2, #36	@ 0x24
 8004308:	2100      	movs	r1, #0
 800430a:	4618      	mov	r0, r3
 800430c:	f007 fc08 	bl	800bb20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004310:	1d3b      	adds	r3, r7, #4
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004318:	4b20      	ldr	r3, [pc, #128]	@ (800439c <MX_TIM4_Init+0xa0>)
 800431a:	4a21      	ldr	r2, [pc, #132]	@ (80043a0 <MX_TIM4_Init+0xa4>)
 800431c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800431e:	4b1f      	ldr	r3, [pc, #124]	@ (800439c <MX_TIM4_Init+0xa0>)
 8004320:	2200      	movs	r2, #0
 8004322:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004324:	4b1d      	ldr	r3, [pc, #116]	@ (800439c <MX_TIM4_Init+0xa0>)
 8004326:	2200      	movs	r2, #0
 8004328:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800432a:	4b1c      	ldr	r3, [pc, #112]	@ (800439c <MX_TIM4_Init+0xa0>)
 800432c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004330:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004332:	4b1a      	ldr	r3, [pc, #104]	@ (800439c <MX_TIM4_Init+0xa0>)
 8004334:	2200      	movs	r2, #0
 8004336:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004338:	4b18      	ldr	r3, [pc, #96]	@ (800439c <MX_TIM4_Init+0xa0>)
 800433a:	2200      	movs	r2, #0
 800433c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800433e:	2301      	movs	r3, #1
 8004340:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004346:	2301      	movs	r3, #1
 8004348:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800434a:	2300      	movs	r3, #0
 800434c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004352:	2302      	movs	r3, #2
 8004354:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004356:	2301      	movs	r3, #1
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800435a:	2300      	movs	r3, #0
 800435c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004362:	f107 030c 	add.w	r3, r7, #12
 8004366:	4619      	mov	r1, r3
 8004368:	480c      	ldr	r0, [pc, #48]	@ (800439c <MX_TIM4_Init+0xa0>)
 800436a:	f005 fed5 	bl	800a118 <HAL_TIM_Encoder_Init>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004374:	f7fe f8e4 	bl	8002540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004378:	2300      	movs	r3, #0
 800437a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004380:	1d3b      	adds	r3, r7, #4
 8004382:	4619      	mov	r1, r3
 8004384:	4805      	ldr	r0, [pc, #20]	@ (800439c <MX_TIM4_Init+0xa0>)
 8004386:	f006 fd8b 	bl	800aea0 <HAL_TIMEx_MasterConfigSynchronization>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004390:	f7fe f8d6 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004394:	bf00      	nop
 8004396:	3730      	adds	r7, #48	@ 0x30
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20000990 	.word	0x20000990
 80043a0:	40000800 	.word	0x40000800

080043a4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043aa:	f107 0308 	add.w	r3, r7, #8
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	605a      	str	r2, [r3, #4]
 80043b4:	609a      	str	r2, [r3, #8]
 80043b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043b8:	463b      	mov	r3, r7
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80043c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004438 <MX_TIM5_Init+0x94>)
 80043c2:	4a1e      	ldr	r2, [pc, #120]	@ (800443c <MX_TIM5_Init+0x98>)
 80043c4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 24999;
 80043c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004438 <MX_TIM5_Init+0x94>)
 80043c8:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 80043cc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004438 <MX_TIM5_Init+0x94>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9;
 80043d4:	4b18      	ldr	r3, [pc, #96]	@ (8004438 <MX_TIM5_Init+0x94>)
 80043d6:	2209      	movs	r2, #9
 80043d8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043da:	4b17      	ldr	r3, [pc, #92]	@ (8004438 <MX_TIM5_Init+0x94>)
 80043dc:	2200      	movs	r2, #0
 80043de:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043e0:	4b15      	ldr	r3, [pc, #84]	@ (8004438 <MX_TIM5_Init+0x94>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80043e6:	4814      	ldr	r0, [pc, #80]	@ (8004438 <MX_TIM5_Init+0x94>)
 80043e8:	f005 fcda 	bl	8009da0 <HAL_TIM_Base_Init>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80043f2:	f7fe f8a5 	bl	8002540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80043fc:	f107 0308 	add.w	r3, r7, #8
 8004400:	4619      	mov	r1, r3
 8004402:	480d      	ldr	r0, [pc, #52]	@ (8004438 <MX_TIM5_Init+0x94>)
 8004404:	f006 f98e 	bl	800a724 <HAL_TIM_ConfigClockSource>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800440e:	f7fe f897 	bl	8002540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004412:	2300      	movs	r3, #0
 8004414:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004416:	2300      	movs	r3, #0
 8004418:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800441a:	463b      	mov	r3, r7
 800441c:	4619      	mov	r1, r3
 800441e:	4806      	ldr	r0, [pc, #24]	@ (8004438 <MX_TIM5_Init+0x94>)
 8004420:	f006 fd3e 	bl	800aea0 <HAL_TIMEx_MasterConfigSynchronization>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800442a:	f7fe f889 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800442e:	bf00      	nop
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	200009d8 	.word	0x200009d8
 800443c:	40000c00 	.word	0x40000c00

08004440 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a18      	ldr	r2, [pc, #96]	@ (80044b0 <HAL_TIM_Base_MspInit+0x70>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d10e      	bne.n	8004470 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	4b17      	ldr	r3, [pc, #92]	@ (80044b4 <HAL_TIM_Base_MspInit+0x74>)
 8004458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445a:	4a16      	ldr	r2, [pc, #88]	@ (80044b4 <HAL_TIM_Base_MspInit+0x74>)
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	6453      	str	r3, [r2, #68]	@ 0x44
 8004462:	4b14      	ldr	r3, [pc, #80]	@ (80044b4 <HAL_TIM_Base_MspInit+0x74>)
 8004464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800446e:	e01a      	b.n	80044a6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a10      	ldr	r2, [pc, #64]	@ (80044b8 <HAL_TIM_Base_MspInit+0x78>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d115      	bne.n	80044a6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800447a:	2300      	movs	r3, #0
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	4b0d      	ldr	r3, [pc, #52]	@ (80044b4 <HAL_TIM_Base_MspInit+0x74>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	4a0c      	ldr	r2, [pc, #48]	@ (80044b4 <HAL_TIM_Base_MspInit+0x74>)
 8004484:	f043 0308 	orr.w	r3, r3, #8
 8004488:	6413      	str	r3, [r2, #64]	@ 0x40
 800448a:	4b0a      	ldr	r3, [pc, #40]	@ (80044b4 <HAL_TIM_Base_MspInit+0x74>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	60bb      	str	r3, [r7, #8]
 8004494:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004496:	2200      	movs	r2, #0
 8004498:	2100      	movs	r1, #0
 800449a:	2032      	movs	r0, #50	@ 0x32
 800449c:	f000 fdef 	bl	800507e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80044a0:	2032      	movs	r0, #50	@ 0x32
 80044a2:	f000 fe08 	bl	80050b6 <HAL_NVIC_EnableIRQ>
}
 80044a6:	bf00      	nop
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40010000 	.word	0x40010000
 80044b4:	40023800 	.word	0x40023800
 80044b8:	40000c00 	.word	0x40000c00

080044bc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08a      	sub	sp, #40	@ 0x28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c4:	f107 0314 	add.w	r3, r7, #20
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	605a      	str	r2, [r3, #4]
 80044ce:	609a      	str	r2, [r3, #8]
 80044d0:	60da      	str	r2, [r3, #12]
 80044d2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004550 <HAL_TIM_Encoder_MspInit+0x94>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d133      	bne.n	8004546 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004554 <HAL_TIM_Encoder_MspInit+0x98>)
 80044e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004554 <HAL_TIM_Encoder_MspInit+0x98>)
 80044e8:	f043 0304 	orr.w	r3, r3, #4
 80044ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ee:	4b19      	ldr	r3, [pc, #100]	@ (8004554 <HAL_TIM_Encoder_MspInit+0x98>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	4b15      	ldr	r3, [pc, #84]	@ (8004554 <HAL_TIM_Encoder_MspInit+0x98>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004502:	4a14      	ldr	r2, [pc, #80]	@ (8004554 <HAL_TIM_Encoder_MspInit+0x98>)
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	6313      	str	r3, [r2, #48]	@ 0x30
 800450a:	4b12      	ldr	r3, [pc, #72]	@ (8004554 <HAL_TIM_Encoder_MspInit+0x98>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004516:	23c0      	movs	r3, #192	@ 0xc0
 8004518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451a:	2302      	movs	r3, #2
 800451c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800451e:	2302      	movs	r3, #2
 8004520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004522:	2300      	movs	r3, #0
 8004524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004526:	2302      	movs	r3, #2
 8004528:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800452a:	f107 0314 	add.w	r3, r7, #20
 800452e:	4619      	mov	r1, r3
 8004530:	4809      	ldr	r0, [pc, #36]	@ (8004558 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004532:	f001 f987 	bl	8005844 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004536:	2200      	movs	r2, #0
 8004538:	2100      	movs	r1, #0
 800453a:	201e      	movs	r0, #30
 800453c:	f000 fd9f 	bl	800507e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004540:	201e      	movs	r0, #30
 8004542:	f000 fdb8 	bl	80050b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004546:	bf00      	nop
 8004548:	3728      	adds	r7, #40	@ 0x28
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40000800 	.word	0x40000800
 8004554:	40023800 	.word	0x40023800
 8004558:	40020400 	.word	0x40020400

0800455c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004564:	f107 030c 	add.w	r3, r7, #12
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	609a      	str	r2, [r3, #8]
 8004570:	60da      	str	r2, [r3, #12]
 8004572:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a12      	ldr	r2, [pc, #72]	@ (80045c4 <HAL_TIM_MspPostInit+0x68>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d11e      	bne.n	80045bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800457e:	2300      	movs	r3, #0
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	4b11      	ldr	r3, [pc, #68]	@ (80045c8 <HAL_TIM_MspPostInit+0x6c>)
 8004584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004586:	4a10      	ldr	r2, [pc, #64]	@ (80045c8 <HAL_TIM_MspPostInit+0x6c>)
 8004588:	f043 0301 	orr.w	r3, r3, #1
 800458c:	6313      	str	r3, [r2, #48]	@ 0x30
 800458e:	4b0e      	ldr	r3, [pc, #56]	@ (80045c8 <HAL_TIM_MspPostInit+0x6c>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	60bb      	str	r3, [r7, #8]
 8004598:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800459a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800459e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a0:	2302      	movs	r3, #2
 80045a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80045ac:	2301      	movs	r3, #1
 80045ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b0:	f107 030c 	add.w	r3, r7, #12
 80045b4:	4619      	mov	r1, r3
 80045b6:	4805      	ldr	r0, [pc, #20]	@ (80045cc <HAL_TIM_MspPostInit+0x70>)
 80045b8:	f001 f944 	bl	8005844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80045bc:	bf00      	nop
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40023800 	.word	0x40023800
 80045cc:	40020000 	.word	0x40020000

080045d0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045d4:	4b11      	ldr	r3, [pc, #68]	@ (800461c <MX_USART1_UART_Init+0x4c>)
 80045d6:	4a12      	ldr	r2, [pc, #72]	@ (8004620 <MX_USART1_UART_Init+0x50>)
 80045d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80045da:	4b10      	ldr	r3, [pc, #64]	@ (800461c <MX_USART1_UART_Init+0x4c>)
 80045dc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80045e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045e2:	4b0e      	ldr	r3, [pc, #56]	@ (800461c <MX_USART1_UART_Init+0x4c>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045e8:	4b0c      	ldr	r3, [pc, #48]	@ (800461c <MX_USART1_UART_Init+0x4c>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045ee:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <MX_USART1_UART_Init+0x4c>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045f4:	4b09      	ldr	r3, [pc, #36]	@ (800461c <MX_USART1_UART_Init+0x4c>)
 80045f6:	220c      	movs	r2, #12
 80045f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045fa:	4b08      	ldr	r3, [pc, #32]	@ (800461c <MX_USART1_UART_Init+0x4c>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004600:	4b06      	ldr	r3, [pc, #24]	@ (800461c <MX_USART1_UART_Init+0x4c>)
 8004602:	2200      	movs	r2, #0
 8004604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004606:	4805      	ldr	r0, [pc, #20]	@ (800461c <MX_USART1_UART_Init+0x4c>)
 8004608:	f006 fd1e 	bl	800b048 <HAL_UART_Init>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004612:	f7fd ff95 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004616:	bf00      	nop
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000a20 	.word	0x20000a20
 8004620:	40011000 	.word	0x40011000

08004624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	@ 0x28
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800462c:	f107 0314 	add.w	r3, r7, #20
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	609a      	str	r2, [r3, #8]
 8004638:	60da      	str	r2, [r3, #12]
 800463a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a31      	ldr	r2, [pc, #196]	@ (8004708 <HAL_UART_MspInit+0xe4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d15b      	bne.n	80046fe <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	4b30      	ldr	r3, [pc, #192]	@ (800470c <HAL_UART_MspInit+0xe8>)
 800464c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464e:	4a2f      	ldr	r2, [pc, #188]	@ (800470c <HAL_UART_MspInit+0xe8>)
 8004650:	f043 0310 	orr.w	r3, r3, #16
 8004654:	6453      	str	r3, [r2, #68]	@ 0x44
 8004656:	4b2d      	ldr	r3, [pc, #180]	@ (800470c <HAL_UART_MspInit+0xe8>)
 8004658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	4b29      	ldr	r3, [pc, #164]	@ (800470c <HAL_UART_MspInit+0xe8>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466a:	4a28      	ldr	r2, [pc, #160]	@ (800470c <HAL_UART_MspInit+0xe8>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	6313      	str	r3, [r2, #48]	@ 0x30
 8004672:	4b26      	ldr	r3, [pc, #152]	@ (800470c <HAL_UART_MspInit+0xe8>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800467e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004684:	2302      	movs	r3, #2
 8004686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004688:	2300      	movs	r3, #0
 800468a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800468c:	2303      	movs	r3, #3
 800468e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004690:	2307      	movs	r3, #7
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004694:	f107 0314 	add.w	r3, r7, #20
 8004698:	4619      	mov	r1, r3
 800469a:	481d      	ldr	r0, [pc, #116]	@ (8004710 <HAL_UART_MspInit+0xec>)
 800469c:	f001 f8d2 	bl	8005844 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80046a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004714 <HAL_UART_MspInit+0xf0>)
 80046a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004718 <HAL_UART_MspInit+0xf4>)
 80046a4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80046a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004714 <HAL_UART_MspInit+0xf0>)
 80046a8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80046ac:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046ae:	4b19      	ldr	r3, [pc, #100]	@ (8004714 <HAL_UART_MspInit+0xf0>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046b4:	4b17      	ldr	r3, [pc, #92]	@ (8004714 <HAL_UART_MspInit+0xf0>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046ba:	4b16      	ldr	r3, [pc, #88]	@ (8004714 <HAL_UART_MspInit+0xf0>)
 80046bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046c2:	4b14      	ldr	r3, [pc, #80]	@ (8004714 <HAL_UART_MspInit+0xf0>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046c8:	4b12      	ldr	r3, [pc, #72]	@ (8004714 <HAL_UART_MspInit+0xf0>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80046ce:	4b11      	ldr	r3, [pc, #68]	@ (8004714 <HAL_UART_MspInit+0xf0>)
 80046d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046d4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80046d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004714 <HAL_UART_MspInit+0xf0>)
 80046d8:	2200      	movs	r2, #0
 80046da:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004714 <HAL_UART_MspInit+0xf0>)
 80046de:	2200      	movs	r2, #0
 80046e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80046e2:	480c      	ldr	r0, [pc, #48]	@ (8004714 <HAL_UART_MspInit+0xf0>)
 80046e4:	f000 fd02 	bl	80050ec <HAL_DMA_Init>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80046ee:	f7fd ff27 	bl	8002540 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a07      	ldr	r2, [pc, #28]	@ (8004714 <HAL_UART_MspInit+0xf0>)
 80046f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80046f8:	4a06      	ldr	r2, [pc, #24]	@ (8004714 <HAL_UART_MspInit+0xf0>)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80046fe:	bf00      	nop
 8004700:	3728      	adds	r7, #40	@ 0x28
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40011000 	.word	0x40011000
 800470c:	40023800 	.word	0x40023800
 8004710:	40020000 	.word	0x40020000
 8004714:	20000a68 	.word	0x20000a68
 8004718:	40026440 	.word	0x40026440

0800471c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800471c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004754 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004720:	f7ff fd3a 	bl	8004198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004724:	480c      	ldr	r0, [pc, #48]	@ (8004758 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004726:	490d      	ldr	r1, [pc, #52]	@ (800475c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004728:	4a0d      	ldr	r2, [pc, #52]	@ (8004760 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800472a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800472c:	e002      	b.n	8004734 <LoopCopyDataInit>

0800472e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800472e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004732:	3304      	adds	r3, #4

08004734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004738:	d3f9      	bcc.n	800472e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800473a:	4a0a      	ldr	r2, [pc, #40]	@ (8004764 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800473c:	4c0a      	ldr	r4, [pc, #40]	@ (8004768 <LoopFillZerobss+0x22>)
  movs r3, #0
 800473e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004740:	e001      	b.n	8004746 <LoopFillZerobss>

08004742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004744:	3204      	adds	r2, #4

08004746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004748:	d3fb      	bcc.n	8004742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800474a:	f007 fa1d 	bl	800bb88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800474e:	f7fd fd8f 	bl	8002270 <main>
  bx  lr    
 8004752:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004754:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800475c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8004760:	0800c5fc 	.word	0x0800c5fc
  ldr r2, =_sbss
 8004764:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8004768:	20000c14 	.word	0x20000c14

0800476c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800476c:	e7fe      	b.n	800476c <ADC_IRQHandler>
	...

08004770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004774:	4b0e      	ldr	r3, [pc, #56]	@ (80047b0 <HAL_Init+0x40>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a0d      	ldr	r2, [pc, #52]	@ (80047b0 <HAL_Init+0x40>)
 800477a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800477e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004780:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <HAL_Init+0x40>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a0a      	ldr	r2, [pc, #40]	@ (80047b0 <HAL_Init+0x40>)
 8004786:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800478a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800478c:	4b08      	ldr	r3, [pc, #32]	@ (80047b0 <HAL_Init+0x40>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a07      	ldr	r2, [pc, #28]	@ (80047b0 <HAL_Init+0x40>)
 8004792:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004798:	2003      	movs	r0, #3
 800479a:	f000 fc65 	bl	8005068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800479e:	200f      	movs	r0, #15
 80047a0:	f000 f808 	bl	80047b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047a4:	f7ff fbf2 	bl	8003f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40023c00 	.word	0x40023c00

080047b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047bc:	4b12      	ldr	r3, [pc, #72]	@ (8004808 <HAL_InitTick+0x54>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4b12      	ldr	r3, [pc, #72]	@ (800480c <HAL_InitTick+0x58>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	4619      	mov	r1, r3
 80047c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80047ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fc7d 	bl	80050d2 <HAL_SYSTICK_Config>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e00e      	b.n	8004800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b0f      	cmp	r3, #15
 80047e6:	d80a      	bhi.n	80047fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047e8:	2200      	movs	r2, #0
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	f04f 30ff 	mov.w	r0, #4294967295
 80047f0:	f000 fc45 	bl	800507e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047f4:	4a06      	ldr	r2, [pc, #24]	@ (8004810 <HAL_InitTick+0x5c>)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e000      	b.n	8004800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000048 	.word	0x20000048
 800480c:	20000050 	.word	0x20000050
 8004810:	2000004c 	.word	0x2000004c

08004814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004818:	4b06      	ldr	r3, [pc, #24]	@ (8004834 <HAL_IncTick+0x20>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	4b06      	ldr	r3, [pc, #24]	@ (8004838 <HAL_IncTick+0x24>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4413      	add	r3, r2
 8004824:	4a04      	ldr	r2, [pc, #16]	@ (8004838 <HAL_IncTick+0x24>)
 8004826:	6013      	str	r3, [r2, #0]
}
 8004828:	bf00      	nop
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	20000050 	.word	0x20000050
 8004838:	20000ac8 	.word	0x20000ac8

0800483c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return uwTick;
 8004840:	4b03      	ldr	r3, [pc, #12]	@ (8004850 <HAL_GetTick+0x14>)
 8004842:	681b      	ldr	r3, [r3, #0]
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000ac8 	.word	0x20000ac8

08004854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800485c:	f7ff ffee 	bl	800483c <HAL_GetTick>
 8004860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d005      	beq.n	800487a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800486e:	4b0a      	ldr	r3, [pc, #40]	@ (8004898 <HAL_Delay+0x44>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4413      	add	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800487a:	bf00      	nop
 800487c:	f7ff ffde 	bl	800483c <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	429a      	cmp	r2, r3
 800488a:	d8f7      	bhi.n	800487c <HAL_Delay+0x28>
  {
  }
}
 800488c:	bf00      	nop
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000050 	.word	0x20000050

0800489c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e033      	b.n	800491a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fb feaa 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d118      	bne.n	800490c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80048e2:	f023 0302 	bic.w	r3, r3, #2
 80048e6:	f043 0202 	orr.w	r2, r3, #2
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f9ee 	bl	8004cd0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fe:	f023 0303 	bic.w	r3, r3, #3
 8004902:	f043 0201 	orr.w	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	641a      	str	r2, [r3, #64]	@ 0x40
 800490a:	e001      	b.n	8004910 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004918:	7bfb      	ldrb	r3, [r7, #15]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_ADC_Start+0x1a>
 800493a:	2302      	movs	r3, #2
 800493c:	e097      	b.n	8004a6e <HAL_ADC_Start+0x14a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b01      	cmp	r3, #1
 8004952:	d018      	beq.n	8004986 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0201 	orr.w	r2, r2, #1
 8004962:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004964:	4b45      	ldr	r3, [pc, #276]	@ (8004a7c <HAL_ADC_Start+0x158>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a45      	ldr	r2, [pc, #276]	@ (8004a80 <HAL_ADC_Start+0x15c>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	0c9a      	lsrs	r2, r3, #18
 8004970:	4613      	mov	r3, r2
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	4413      	add	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004978:	e002      	b.n	8004980 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	3b01      	subs	r3, #1
 800497e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f9      	bne.n	800497a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b01      	cmp	r3, #1
 8004992:	d15f      	bne.n	8004a54 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004998:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800499c:	f023 0301 	bic.w	r3, r3, #1
 80049a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80049be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049d2:	d106      	bne.n	80049e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d8:	f023 0206 	bic.w	r2, r3, #6
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	645a      	str	r2, [r3, #68]	@ 0x44
 80049e0:	e002      	b.n	80049e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049f0:	4b24      	ldr	r3, [pc, #144]	@ (8004a84 <HAL_ADC_Start+0x160>)
 80049f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80049fc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10f      	bne.n	8004a2a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d129      	bne.n	8004a6c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004a26:	609a      	str	r2, [r3, #8]
 8004a28:	e020      	b.n	8004a6c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a16      	ldr	r2, [pc, #88]	@ (8004a88 <HAL_ADC_Start+0x164>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d11b      	bne.n	8004a6c <HAL_ADC_Start+0x148>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d114      	bne.n	8004a6c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004a50:	609a      	str	r2, [r3, #8]
 8004a52:	e00b      	b.n	8004a6c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	f043 0210 	orr.w	r2, r3, #16
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a64:	f043 0201 	orr.w	r2, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20000048 	.word	0x20000048
 8004a80:	431bde83 	.word	0x431bde83
 8004a84:	40012300 	.word	0x40012300
 8004a88:	40012000 	.word	0x40012000

08004a8c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x1c>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e105      	b.n	8004cb4 <HAL_ADC_ConfigChannel+0x228>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b09      	cmp	r3, #9
 8004ab6:	d925      	bls.n	8004b04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68d9      	ldr	r1, [r3, #12]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	4413      	add	r3, r2
 8004acc:	3b1e      	subs	r3, #30
 8004ace:	2207      	movs	r2, #7
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	43da      	mvns	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	400a      	ands	r2, r1
 8004adc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68d9      	ldr	r1, [r3, #12]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	4618      	mov	r0, r3
 8004af0:	4603      	mov	r3, r0
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	4403      	add	r3, r0
 8004af6:	3b1e      	subs	r3, #30
 8004af8:	409a      	lsls	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	60da      	str	r2, [r3, #12]
 8004b02:	e022      	b.n	8004b4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6919      	ldr	r1, [r3, #16]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	461a      	mov	r2, r3
 8004b12:	4613      	mov	r3, r2
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	4413      	add	r3, r2
 8004b18:	2207      	movs	r2, #7
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	43da      	mvns	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	400a      	ands	r2, r1
 8004b26:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6919      	ldr	r1, [r3, #16]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	4618      	mov	r0, r3
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	4403      	add	r3, r0
 8004b40:	409a      	lsls	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b06      	cmp	r3, #6
 8004b50:	d824      	bhi.n	8004b9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	3b05      	subs	r3, #5
 8004b64:	221f      	movs	r2, #31
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	400a      	ands	r2, r1
 8004b72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	4618      	mov	r0, r3
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3b05      	subs	r3, #5
 8004b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b9a:	e04c      	b.n	8004c36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2b0c      	cmp	r3, #12
 8004ba2:	d824      	bhi.n	8004bee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	3b23      	subs	r3, #35	@ 0x23
 8004bb6:	221f      	movs	r2, #31
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	43da      	mvns	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	400a      	ands	r2, r1
 8004bc4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	3b23      	subs	r3, #35	@ 0x23
 8004be0:	fa00 f203 	lsl.w	r2, r0, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bec:	e023      	b.n	8004c36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3b41      	subs	r3, #65	@ 0x41
 8004c00:	221f      	movs	r2, #31
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	43da      	mvns	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	400a      	ands	r2, r1
 8004c0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	3b41      	subs	r3, #65	@ 0x41
 8004c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c36:	4b22      	ldr	r3, [pc, #136]	@ (8004cc0 <HAL_ADC_ConfigChannel+0x234>)
 8004c38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a21      	ldr	r2, [pc, #132]	@ (8004cc4 <HAL_ADC_ConfigChannel+0x238>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d109      	bne.n	8004c58 <HAL_ADC_ConfigChannel+0x1cc>
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b12      	cmp	r3, #18
 8004c4a:	d105      	bne.n	8004c58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a19      	ldr	r2, [pc, #100]	@ (8004cc4 <HAL_ADC_ConfigChannel+0x238>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d123      	bne.n	8004caa <HAL_ADC_ConfigChannel+0x21e>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b10      	cmp	r3, #16
 8004c68:	d003      	beq.n	8004c72 <HAL_ADC_ConfigChannel+0x1e6>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b11      	cmp	r3, #17
 8004c70:	d11b      	bne.n	8004caa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d111      	bne.n	8004caa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c86:	4b10      	ldr	r3, [pc, #64]	@ (8004cc8 <HAL_ADC_ConfigChannel+0x23c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a10      	ldr	r2, [pc, #64]	@ (8004ccc <HAL_ADC_ConfigChannel+0x240>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	0c9a      	lsrs	r2, r3, #18
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004c9c:	e002      	b.n	8004ca4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f9      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	40012300 	.word	0x40012300
 8004cc4:	40012000 	.word	0x40012000
 8004cc8:	20000048 	.word	0x20000048
 8004ccc:	431bde83 	.word	0x431bde83

08004cd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cd8:	4b79      	ldr	r3, [pc, #484]	@ (8004ec0 <ADC_Init+0x1f0>)
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6859      	ldr	r1, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	021a      	lsls	r2, r3, #8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004d28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6859      	ldr	r1, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6899      	ldr	r1, [r3, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d62:	4a58      	ldr	r2, [pc, #352]	@ (8004ec4 <ADC_Init+0x1f4>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d022      	beq.n	8004dae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6899      	ldr	r1, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004d98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6899      	ldr	r1, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	609a      	str	r2, [r3, #8]
 8004dac:	e00f      	b.n	8004dce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004dbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004dcc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0202 	bic.w	r2, r2, #2
 8004ddc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6899      	ldr	r1, [r3, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	7e1b      	ldrb	r3, [r3, #24]
 8004de8:	005a      	lsls	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d01b      	beq.n	8004e34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e0a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004e1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6859      	ldr	r1, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e26:	3b01      	subs	r3, #1
 8004e28:	035a      	lsls	r2, r3, #13
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
 8004e32:	e007      	b.n	8004e44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e42:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004e52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	051a      	lsls	r2, r3, #20
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6899      	ldr	r1, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e86:	025a      	lsls	r2, r3, #9
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6899      	ldr	r1, [r3, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	029a      	lsls	r2, r3, #10
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	40012300 	.word	0x40012300
 8004ec4:	0f000001 	.word	0x0f000001

08004ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f0c <__NVIC_SetPriorityGrouping+0x44>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004efa:	4a04      	ldr	r2, [pc, #16]	@ (8004f0c <__NVIC_SetPriorityGrouping+0x44>)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	60d3      	str	r3, [r2, #12]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	e000ed00 	.word	0xe000ed00

08004f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f14:	4b04      	ldr	r3, [pc, #16]	@ (8004f28 <__NVIC_GetPriorityGrouping+0x18>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	0a1b      	lsrs	r3, r3, #8
 8004f1a:	f003 0307 	and.w	r3, r3, #7
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	e000ed00 	.word	0xe000ed00

08004f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	db0b      	blt.n	8004f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	f003 021f 	and.w	r2, r3, #31
 8004f44:	4907      	ldr	r1, [pc, #28]	@ (8004f64 <__NVIC_EnableIRQ+0x38>)
 8004f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	e000e100 	.word	0xe000e100

08004f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	6039      	str	r1, [r7, #0]
 8004f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	db0a      	blt.n	8004f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	490c      	ldr	r1, [pc, #48]	@ (8004fb4 <__NVIC_SetPriority+0x4c>)
 8004f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f86:	0112      	lsls	r2, r2, #4
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f90:	e00a      	b.n	8004fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	4908      	ldr	r1, [pc, #32]	@ (8004fb8 <__NVIC_SetPriority+0x50>)
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	3b04      	subs	r3, #4
 8004fa0:	0112      	lsls	r2, r2, #4
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	761a      	strb	r2, [r3, #24]
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	e000e100 	.word	0xe000e100
 8004fb8:	e000ed00 	.word	0xe000ed00

08004fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b089      	sub	sp, #36	@ 0x24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f1c3 0307 	rsb	r3, r3, #7
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	bf28      	it	cs
 8004fda:	2304      	movcs	r3, #4
 8004fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	2b06      	cmp	r3, #6
 8004fe4:	d902      	bls.n	8004fec <NVIC_EncodePriority+0x30>
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	3b03      	subs	r3, #3
 8004fea:	e000      	b.n	8004fee <NVIC_EncodePriority+0x32>
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	43da      	mvns	r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	401a      	ands	r2, r3
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005004:	f04f 31ff 	mov.w	r1, #4294967295
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	fa01 f303 	lsl.w	r3, r1, r3
 800500e:	43d9      	mvns	r1, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005014:	4313      	orrs	r3, r2
         );
}
 8005016:	4618      	mov	r0, r3
 8005018:	3724      	adds	r7, #36	@ 0x24
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3b01      	subs	r3, #1
 8005030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005034:	d301      	bcc.n	800503a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005036:	2301      	movs	r3, #1
 8005038:	e00f      	b.n	800505a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800503a:	4a0a      	ldr	r2, [pc, #40]	@ (8005064 <SysTick_Config+0x40>)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3b01      	subs	r3, #1
 8005040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005042:	210f      	movs	r1, #15
 8005044:	f04f 30ff 	mov.w	r0, #4294967295
 8005048:	f7ff ff8e 	bl	8004f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800504c:	4b05      	ldr	r3, [pc, #20]	@ (8005064 <SysTick_Config+0x40>)
 800504e:	2200      	movs	r2, #0
 8005050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005052:	4b04      	ldr	r3, [pc, #16]	@ (8005064 <SysTick_Config+0x40>)
 8005054:	2207      	movs	r2, #7
 8005056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	e000e010 	.word	0xe000e010

08005068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff ff29 	bl	8004ec8 <__NVIC_SetPriorityGrouping>
}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800507e:	b580      	push	{r7, lr}
 8005080:	b086      	sub	sp, #24
 8005082:	af00      	add	r7, sp, #0
 8005084:	4603      	mov	r3, r0
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800508c:	2300      	movs	r3, #0
 800508e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005090:	f7ff ff3e 	bl	8004f10 <__NVIC_GetPriorityGrouping>
 8005094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	6978      	ldr	r0, [r7, #20]
 800509c:	f7ff ff8e 	bl	8004fbc <NVIC_EncodePriority>
 80050a0:	4602      	mov	r2, r0
 80050a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050a6:	4611      	mov	r1, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff ff5d 	bl	8004f68 <__NVIC_SetPriority>
}
 80050ae:	bf00      	nop
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	4603      	mov	r3, r0
 80050be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff ff31 	bl	8004f2c <__NVIC_EnableIRQ>
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff ffa2 	bl	8005024 <SysTick_Config>
 80050e0:	4603      	mov	r3, r0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80050f8:	f7ff fba0 	bl	800483c <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e099      	b.n	800523c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0201 	bic.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005128:	e00f      	b.n	800514a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800512a:	f7ff fb87 	bl	800483c <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b05      	cmp	r3, #5
 8005136:	d908      	bls.n	800514a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2220      	movs	r2, #32
 800513c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2203      	movs	r2, #3
 8005142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e078      	b.n	800523c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e8      	bne.n	800512a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4b38      	ldr	r3, [pc, #224]	@ (8005244 <HAL_DMA_Init+0x158>)
 8005164:	4013      	ands	r3, r2
 8005166:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005176:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005182:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800518e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d107      	bne.n	80051b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ac:	4313      	orrs	r3, r2
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f023 0307 	bic.w	r3, r3, #7
 80051ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d117      	bne.n	800520e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00e      	beq.n	800520e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 faab 	bl	800574c <DMA_CheckFifoParam>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2240      	movs	r2, #64	@ 0x40
 8005200:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800520a:	2301      	movs	r3, #1
 800520c:	e016      	b.n	800523c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fa62 	bl	80056e0 <DMA_CalcBaseAndBitshift>
 800521c:	4603      	mov	r3, r0
 800521e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005224:	223f      	movs	r2, #63	@ 0x3f
 8005226:	409a      	lsls	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	f010803f 	.word	0xf010803f

08005248 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800525e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_DMA_Start_IT+0x26>
 800526a:	2302      	movs	r3, #2
 800526c:	e040      	b.n	80052f0 <HAL_DMA_Start_IT+0xa8>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b01      	cmp	r3, #1
 8005280:	d12f      	bne.n	80052e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2202      	movs	r2, #2
 8005286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 f9f4 	bl	8005684 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a0:	223f      	movs	r2, #63	@ 0x3f
 80052a2:	409a      	lsls	r2, r3
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0216 	orr.w	r2, r2, #22
 80052b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0208 	orr.w	r2, r2, #8
 80052ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	e005      	b.n	80052ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80052ea:	2302      	movs	r3, #2
 80052ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d004      	beq.n	8005316 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2280      	movs	r2, #128	@ 0x80
 8005310:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e00c      	b.n	8005330 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2205      	movs	r2, #5
 800531a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005348:	4b8e      	ldr	r3, [pc, #568]	@ (8005584 <HAL_DMA_IRQHandler+0x248>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a8e      	ldr	r2, [pc, #568]	@ (8005588 <HAL_DMA_IRQHandler+0x24c>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	0a9b      	lsrs	r3, r3, #10
 8005354:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005366:	2208      	movs	r2, #8
 8005368:	409a      	lsls	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4013      	ands	r3, r2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01a      	beq.n	80053a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d013      	beq.n	80053a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0204 	bic.w	r2, r2, #4
 800538e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005394:	2208      	movs	r2, #8
 8005396:	409a      	lsls	r2, r3
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a0:	f043 0201 	orr.w	r2, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ac:	2201      	movs	r2, #1
 80053ae:	409a      	lsls	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d012      	beq.n	80053de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00b      	beq.n	80053de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ca:	2201      	movs	r2, #1
 80053cc:	409a      	lsls	r2, r3
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d6:	f043 0202 	orr.w	r2, r3, #2
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e2:	2204      	movs	r2, #4
 80053e4:	409a      	lsls	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d012      	beq.n	8005414 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00b      	beq.n	8005414 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005400:	2204      	movs	r2, #4
 8005402:	409a      	lsls	r2, r3
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540c:	f043 0204 	orr.w	r2, r3, #4
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005418:	2210      	movs	r2, #16
 800541a:	409a      	lsls	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4013      	ands	r3, r2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d043      	beq.n	80054ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d03c      	beq.n	80054ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005436:	2210      	movs	r2, #16
 8005438:	409a      	lsls	r2, r3
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d018      	beq.n	800547e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d108      	bne.n	800546c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	d024      	beq.n	80054ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	4798      	blx	r3
 800546a:	e01f      	b.n	80054ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01b      	beq.n	80054ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	4798      	blx	r3
 800547c:	e016      	b.n	80054ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005488:	2b00      	cmp	r3, #0
 800548a:	d107      	bne.n	800549c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0208 	bic.w	r2, r2, #8
 800549a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b0:	2220      	movs	r2, #32
 80054b2:	409a      	lsls	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4013      	ands	r3, r2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 808f 	beq.w	80055dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 8087 	beq.w	80055dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d2:	2220      	movs	r2, #32
 80054d4:	409a      	lsls	r2, r3
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b05      	cmp	r3, #5
 80054e4:	d136      	bne.n	8005554 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0216 	bic.w	r2, r2, #22
 80054f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695a      	ldr	r2, [r3, #20]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005504:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550a:	2b00      	cmp	r3, #0
 800550c:	d103      	bne.n	8005516 <HAL_DMA_IRQHandler+0x1da>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005512:	2b00      	cmp	r3, #0
 8005514:	d007      	beq.n	8005526 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0208 	bic.w	r2, r2, #8
 8005524:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800552a:	223f      	movs	r2, #63	@ 0x3f
 800552c:	409a      	lsls	r2, r3
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005546:	2b00      	cmp	r3, #0
 8005548:	d07e      	beq.n	8005648 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	4798      	blx	r3
        }
        return;
 8005552:	e079      	b.n	8005648 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d01d      	beq.n	800559e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10d      	bne.n	800558c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005574:	2b00      	cmp	r3, #0
 8005576:	d031      	beq.n	80055dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	4798      	blx	r3
 8005580:	e02c      	b.n	80055dc <HAL_DMA_IRQHandler+0x2a0>
 8005582:	bf00      	nop
 8005584:	20000048 	.word	0x20000048
 8005588:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005590:	2b00      	cmp	r3, #0
 8005592:	d023      	beq.n	80055dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	4798      	blx	r3
 800559c:	e01e      	b.n	80055dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10f      	bne.n	80055cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0210 	bic.w	r2, r2, #16
 80055ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d032      	beq.n	800564a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d022      	beq.n	8005636 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2205      	movs	r2, #5
 80055f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	3301      	adds	r3, #1
 800560c:	60bb      	str	r3, [r7, #8]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	429a      	cmp	r2, r3
 8005612:	d307      	bcc.n	8005624 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f2      	bne.n	8005608 <HAL_DMA_IRQHandler+0x2cc>
 8005622:	e000      	b.n	8005626 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005624:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d005      	beq.n	800564a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	4798      	blx	r3
 8005646:	e000      	b.n	800564a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005648:	bf00      	nop
    }
  }
}
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800565e:	b2db      	uxtb	r3, r3
}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005678:	4618      	mov	r0, r3
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80056a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b40      	cmp	r3, #64	@ 0x40
 80056b0:	d108      	bne.n	80056c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80056c2:	e007      	b.n	80056d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	60da      	str	r2, [r3, #12]
}
 80056d4:	bf00      	nop
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	3b10      	subs	r3, #16
 80056f0:	4a14      	ldr	r2, [pc, #80]	@ (8005744 <DMA_CalcBaseAndBitshift+0x64>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	091b      	lsrs	r3, r3, #4
 80056f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056fa:	4a13      	ldr	r2, [pc, #76]	@ (8005748 <DMA_CalcBaseAndBitshift+0x68>)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b03      	cmp	r3, #3
 800570c:	d909      	bls.n	8005722 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005716:	f023 0303 	bic.w	r3, r3, #3
 800571a:	1d1a      	adds	r2, r3, #4
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005720:	e007      	b.n	8005732 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800572a:	f023 0303 	bic.w	r3, r3, #3
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	aaaaaaab 	.word	0xaaaaaaab
 8005748:	0800c5b0 	.word	0x0800c5b0

0800574c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d11f      	bne.n	80057a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2b03      	cmp	r3, #3
 800576a:	d856      	bhi.n	800581a <DMA_CheckFifoParam+0xce>
 800576c:	a201      	add	r2, pc, #4	@ (adr r2, 8005774 <DMA_CheckFifoParam+0x28>)
 800576e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005772:	bf00      	nop
 8005774:	08005785 	.word	0x08005785
 8005778:	08005797 	.word	0x08005797
 800577c:	08005785 	.word	0x08005785
 8005780:	0800581b 	.word	0x0800581b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005788:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d046      	beq.n	800581e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005794:	e043      	b.n	800581e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800579e:	d140      	bne.n	8005822 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057a4:	e03d      	b.n	8005822 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ae:	d121      	bne.n	80057f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d837      	bhi.n	8005826 <DMA_CheckFifoParam+0xda>
 80057b6:	a201      	add	r2, pc, #4	@ (adr r2, 80057bc <DMA_CheckFifoParam+0x70>)
 80057b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057bc:	080057cd 	.word	0x080057cd
 80057c0:	080057d3 	.word	0x080057d3
 80057c4:	080057cd 	.word	0x080057cd
 80057c8:	080057e5 	.word	0x080057e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
      break;
 80057d0:	e030      	b.n	8005834 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d025      	beq.n	800582a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057e2:	e022      	b.n	800582a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057ec:	d11f      	bne.n	800582e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057f2:	e01c      	b.n	800582e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d903      	bls.n	8005802 <DMA_CheckFifoParam+0xb6>
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d003      	beq.n	8005808 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005800:	e018      	b.n	8005834 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	73fb      	strb	r3, [r7, #15]
      break;
 8005806:	e015      	b.n	8005834 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00e      	beq.n	8005832 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]
      break;
 8005818:	e00b      	b.n	8005832 <DMA_CheckFifoParam+0xe6>
      break;
 800581a:	bf00      	nop
 800581c:	e00a      	b.n	8005834 <DMA_CheckFifoParam+0xe8>
      break;
 800581e:	bf00      	nop
 8005820:	e008      	b.n	8005834 <DMA_CheckFifoParam+0xe8>
      break;
 8005822:	bf00      	nop
 8005824:	e006      	b.n	8005834 <DMA_CheckFifoParam+0xe8>
      break;
 8005826:	bf00      	nop
 8005828:	e004      	b.n	8005834 <DMA_CheckFifoParam+0xe8>
      break;
 800582a:	bf00      	nop
 800582c:	e002      	b.n	8005834 <DMA_CheckFifoParam+0xe8>
      break;   
 800582e:	bf00      	nop
 8005830:	e000      	b.n	8005834 <DMA_CheckFifoParam+0xe8>
      break;
 8005832:	bf00      	nop
    }
  } 
  
  return status; 
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop

08005844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005844:	b480      	push	{r7}
 8005846:	b089      	sub	sp, #36	@ 0x24
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005852:	2300      	movs	r3, #0
 8005854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005856:	2300      	movs	r3, #0
 8005858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800585a:	2300      	movs	r3, #0
 800585c:	61fb      	str	r3, [r7, #28]
 800585e:	e159      	b.n	8005b14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005860:	2201      	movs	r2, #1
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	fa02 f303 	lsl.w	r3, r2, r3
 8005868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4013      	ands	r3, r2
 8005872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	429a      	cmp	r2, r3
 800587a:	f040 8148 	bne.w	8005b0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	2b01      	cmp	r3, #1
 8005888:	d005      	beq.n	8005896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005892:	2b02      	cmp	r3, #2
 8005894:	d130      	bne.n	80058f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	2203      	movs	r2, #3
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	43db      	mvns	r3, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4013      	ands	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4313      	orrs	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058cc:	2201      	movs	r2, #1
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	43db      	mvns	r3, r3
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	4013      	ands	r3, r2
 80058da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	091b      	lsrs	r3, r3, #4
 80058e2:	f003 0201 	and.w	r2, r3, #1
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f003 0303 	and.w	r3, r3, #3
 8005900:	2b03      	cmp	r3, #3
 8005902:	d017      	beq.n	8005934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	2203      	movs	r2, #3
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	43db      	mvns	r3, r3
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	4013      	ands	r3, r2
 800591a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	fa02 f303 	lsl.w	r3, r2, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4313      	orrs	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 0303 	and.w	r3, r3, #3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d123      	bne.n	8005988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	08da      	lsrs	r2, r3, #3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3208      	adds	r2, #8
 8005948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	220f      	movs	r2, #15
 8005958:	fa02 f303 	lsl.w	r3, r2, r3
 800595c:	43db      	mvns	r3, r3
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	4013      	ands	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	4313      	orrs	r3, r2
 8005978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	08da      	lsrs	r2, r3, #3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	3208      	adds	r2, #8
 8005982:	69b9      	ldr	r1, [r7, #24]
 8005984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	2203      	movs	r2, #3
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	43db      	mvns	r3, r3
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	4013      	ands	r3, r2
 800599e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f003 0203 	and.w	r2, r3, #3
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	fa02 f303 	lsl.w	r3, r2, r3
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 80a2 	beq.w	8005b0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	4b57      	ldr	r3, [pc, #348]	@ (8005b2c <HAL_GPIO_Init+0x2e8>)
 80059d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d2:	4a56      	ldr	r2, [pc, #344]	@ (8005b2c <HAL_GPIO_Init+0x2e8>)
 80059d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80059da:	4b54      	ldr	r3, [pc, #336]	@ (8005b2c <HAL_GPIO_Init+0x2e8>)
 80059dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059e6:	4a52      	ldr	r2, [pc, #328]	@ (8005b30 <HAL_GPIO_Init+0x2ec>)
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	089b      	lsrs	r3, r3, #2
 80059ec:	3302      	adds	r3, #2
 80059ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	220f      	movs	r2, #15
 80059fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005a02:	43db      	mvns	r3, r3
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	4013      	ands	r3, r2
 8005a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a49      	ldr	r2, [pc, #292]	@ (8005b34 <HAL_GPIO_Init+0x2f0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d019      	beq.n	8005a46 <HAL_GPIO_Init+0x202>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a48      	ldr	r2, [pc, #288]	@ (8005b38 <HAL_GPIO_Init+0x2f4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d013      	beq.n	8005a42 <HAL_GPIO_Init+0x1fe>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a47      	ldr	r2, [pc, #284]	@ (8005b3c <HAL_GPIO_Init+0x2f8>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d00d      	beq.n	8005a3e <HAL_GPIO_Init+0x1fa>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a46      	ldr	r2, [pc, #280]	@ (8005b40 <HAL_GPIO_Init+0x2fc>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d007      	beq.n	8005a3a <HAL_GPIO_Init+0x1f6>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a45      	ldr	r2, [pc, #276]	@ (8005b44 <HAL_GPIO_Init+0x300>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d101      	bne.n	8005a36 <HAL_GPIO_Init+0x1f2>
 8005a32:	2304      	movs	r3, #4
 8005a34:	e008      	b.n	8005a48 <HAL_GPIO_Init+0x204>
 8005a36:	2307      	movs	r3, #7
 8005a38:	e006      	b.n	8005a48 <HAL_GPIO_Init+0x204>
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e004      	b.n	8005a48 <HAL_GPIO_Init+0x204>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e002      	b.n	8005a48 <HAL_GPIO_Init+0x204>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <HAL_GPIO_Init+0x204>
 8005a46:	2300      	movs	r3, #0
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	f002 0203 	and.w	r2, r2, #3
 8005a4e:	0092      	lsls	r2, r2, #2
 8005a50:	4093      	lsls	r3, r2
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a58:	4935      	ldr	r1, [pc, #212]	@ (8005b30 <HAL_GPIO_Init+0x2ec>)
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	089b      	lsrs	r3, r3, #2
 8005a5e:	3302      	adds	r3, #2
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a66:	4b38      	ldr	r3, [pc, #224]	@ (8005b48 <HAL_GPIO_Init+0x304>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	43db      	mvns	r3, r3
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	4013      	ands	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a8a:	4a2f      	ldr	r2, [pc, #188]	@ (8005b48 <HAL_GPIO_Init+0x304>)
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a90:	4b2d      	ldr	r3, [pc, #180]	@ (8005b48 <HAL_GPIO_Init+0x304>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ab4:	4a24      	ldr	r2, [pc, #144]	@ (8005b48 <HAL_GPIO_Init+0x304>)
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005aba:	4b23      	ldr	r3, [pc, #140]	@ (8005b48 <HAL_GPIO_Init+0x304>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	43db      	mvns	r3, r3
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ade:	4a1a      	ldr	r2, [pc, #104]	@ (8005b48 <HAL_GPIO_Init+0x304>)
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ae4:	4b18      	ldr	r3, [pc, #96]	@ (8005b48 <HAL_GPIO_Init+0x304>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	43db      	mvns	r3, r3
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	4013      	ands	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b08:	4a0f      	ldr	r2, [pc, #60]	@ (8005b48 <HAL_GPIO_Init+0x304>)
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	3301      	adds	r3, #1
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	2b0f      	cmp	r3, #15
 8005b18:	f67f aea2 	bls.w	8005860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b1c:	bf00      	nop
 8005b1e:	bf00      	nop
 8005b20:	3724      	adds	r7, #36	@ 0x24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	40013800 	.word	0x40013800
 8005b34:	40020000 	.word	0x40020000
 8005b38:	40020400 	.word	0x40020400
 8005b3c:	40020800 	.word	0x40020800
 8005b40:	40020c00 	.word	0x40020c00
 8005b44:	40021000 	.word	0x40021000
 8005b48:	40013c00 	.word	0x40013c00

08005b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	887b      	ldrh	r3, [r7, #2]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b64:	2301      	movs	r3, #1
 8005b66:	73fb      	strb	r3, [r7, #15]
 8005b68:	e001      	b.n	8005b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	807b      	strh	r3, [r7, #2]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b8c:	787b      	ldrb	r3, [r7, #1]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b92:	887a      	ldrh	r2, [r7, #2]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b98:	e003      	b.n	8005ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b9a:	887b      	ldrh	r3, [r7, #2]
 8005b9c:	041a      	lsls	r2, r3, #16
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	619a      	str	r2, [r3, #24]
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
	...

08005bb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e12b      	b.n	8005e1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fc fa7c 	bl	80020d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2224      	movs	r2, #36	@ 0x24
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0201 	bic.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c14:	f003 f8ec 	bl	8008df0 <HAL_RCC_GetPCLK1Freq>
 8005c18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	4a81      	ldr	r2, [pc, #516]	@ (8005e24 <HAL_I2C_Init+0x274>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d807      	bhi.n	8005c34 <HAL_I2C_Init+0x84>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4a80      	ldr	r2, [pc, #512]	@ (8005e28 <HAL_I2C_Init+0x278>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	bf94      	ite	ls
 8005c2c:	2301      	movls	r3, #1
 8005c2e:	2300      	movhi	r3, #0
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	e006      	b.n	8005c42 <HAL_I2C_Init+0x92>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4a7d      	ldr	r2, [pc, #500]	@ (8005e2c <HAL_I2C_Init+0x27c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	bf94      	ite	ls
 8005c3c:	2301      	movls	r3, #1
 8005c3e:	2300      	movhi	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e0e7      	b.n	8005e1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4a78      	ldr	r2, [pc, #480]	@ (8005e30 <HAL_I2C_Init+0x280>)
 8005c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c52:	0c9b      	lsrs	r3, r3, #18
 8005c54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	4a6a      	ldr	r2, [pc, #424]	@ (8005e24 <HAL_I2C_Init+0x274>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d802      	bhi.n	8005c84 <HAL_I2C_Init+0xd4>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	3301      	adds	r3, #1
 8005c82:	e009      	b.n	8005c98 <HAL_I2C_Init+0xe8>
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005c8a:	fb02 f303 	mul.w	r3, r2, r3
 8005c8e:	4a69      	ldr	r2, [pc, #420]	@ (8005e34 <HAL_I2C_Init+0x284>)
 8005c90:	fba2 2303 	umull	r2, r3, r2, r3
 8005c94:	099b      	lsrs	r3, r3, #6
 8005c96:	3301      	adds	r3, #1
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005caa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	495c      	ldr	r1, [pc, #368]	@ (8005e24 <HAL_I2C_Init+0x274>)
 8005cb4:	428b      	cmp	r3, r1
 8005cb6:	d819      	bhi.n	8005cec <HAL_I2C_Init+0x13c>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	1e59      	subs	r1, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cc6:	1c59      	adds	r1, r3, #1
 8005cc8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005ccc:	400b      	ands	r3, r1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <HAL_I2C_Init+0x138>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	1e59      	subs	r1, r3, #1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ce6:	e051      	b.n	8005d8c <HAL_I2C_Init+0x1dc>
 8005ce8:	2304      	movs	r3, #4
 8005cea:	e04f      	b.n	8005d8c <HAL_I2C_Init+0x1dc>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d111      	bne.n	8005d18 <HAL_I2C_Init+0x168>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	1e58      	subs	r0, r3, #1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6859      	ldr	r1, [r3, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	440b      	add	r3, r1
 8005d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d06:	3301      	adds	r3, #1
 8005d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	bf0c      	ite	eq
 8005d10:	2301      	moveq	r3, #1
 8005d12:	2300      	movne	r3, #0
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	e012      	b.n	8005d3e <HAL_I2C_Init+0x18e>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	1e58      	subs	r0, r3, #1
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6859      	ldr	r1, [r3, #4]
 8005d20:	460b      	mov	r3, r1
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	440b      	add	r3, r1
 8005d26:	0099      	lsls	r1, r3, #2
 8005d28:	440b      	add	r3, r1
 8005d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d2e:	3301      	adds	r3, #1
 8005d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	bf0c      	ite	eq
 8005d38:	2301      	moveq	r3, #1
 8005d3a:	2300      	movne	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_I2C_Init+0x196>
 8005d42:	2301      	movs	r3, #1
 8005d44:	e022      	b.n	8005d8c <HAL_I2C_Init+0x1dc>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10e      	bne.n	8005d6c <HAL_I2C_Init+0x1bc>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	1e58      	subs	r0, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6859      	ldr	r1, [r3, #4]
 8005d56:	460b      	mov	r3, r1
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	440b      	add	r3, r1
 8005d5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d60:	3301      	adds	r3, #1
 8005d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d6a:	e00f      	b.n	8005d8c <HAL_I2C_Init+0x1dc>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	1e58      	subs	r0, r3, #1
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6859      	ldr	r1, [r3, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	0099      	lsls	r1, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d82:	3301      	adds	r3, #1
 8005d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	6809      	ldr	r1, [r1, #0]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69da      	ldr	r2, [r3, #28]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005dba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6911      	ldr	r1, [r2, #16]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	68d2      	ldr	r2, [r2, #12]
 8005dc6:	4311      	orrs	r1, r2
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	695a      	ldr	r2, [r3, #20]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0201 	orr.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	000186a0 	.word	0x000186a0
 8005e28:	001e847f 	.word	0x001e847f
 8005e2c:	003d08ff 	.word	0x003d08ff
 8005e30:	431bde83 	.word	0x431bde83
 8005e34:	10624dd3 	.word	0x10624dd3

08005e38 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e4a:	2b80      	cmp	r3, #128	@ 0x80
 8005e4c:	d103      	bne.n	8005e56 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2200      	movs	r2, #0
 8005e54:	611a      	str	r2, [r3, #16]
  }
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
	...

08005e64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	460b      	mov	r3, r1
 8005e72:	817b      	strh	r3, [r7, #10]
 8005e74:	4613      	mov	r3, r2
 8005e76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e78:	f7fe fce0 	bl	800483c <HAL_GetTick>
 8005e7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	f040 80e0 	bne.w	800604c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	2319      	movs	r3, #25
 8005e92:	2201      	movs	r2, #1
 8005e94:	4970      	ldr	r1, [pc, #448]	@ (8006058 <HAL_I2C_Master_Transmit+0x1f4>)
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f002 f940 	bl	800811c <I2C_WaitOnFlagUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	e0d3      	b.n	800604e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_I2C_Master_Transmit+0x50>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e0cc      	b.n	800604e <HAL_I2C_Master_Transmit+0x1ea>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d007      	beq.n	8005eda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f042 0201 	orr.w	r2, r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ee8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2221      	movs	r2, #33	@ 0x21
 8005eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2210      	movs	r2, #16
 8005ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	893a      	ldrh	r2, [r7, #8]
 8005f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4a50      	ldr	r2, [pc, #320]	@ (800605c <HAL_I2C_Master_Transmit+0x1f8>)
 8005f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005f1c:	8979      	ldrh	r1, [r7, #10]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	6a3a      	ldr	r2, [r7, #32]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f001 feb4 	bl	8007c90 <I2C_MasterRequestWrite>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e08d      	b.n	800604e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f32:	2300      	movs	r3, #0
 8005f34:	613b      	str	r3, [r7, #16]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	613b      	str	r3, [r7, #16]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005f48:	e066      	b.n	8006018 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	6a39      	ldr	r1, [r7, #32]
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f002 f9fe 	bl	8008350 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00d      	beq.n	8005f76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d107      	bne.n	8005f72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e06b      	b.n	800604e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	781a      	ldrb	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d11b      	bne.n	8005fec <HAL_I2C_Master_Transmit+0x188>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d017      	beq.n	8005fec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc0:	781a      	ldrb	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	6a39      	ldr	r1, [r7, #32]
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f002 f9f5 	bl	80083e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00d      	beq.n	8006018 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006000:	2b04      	cmp	r3, #4
 8006002:	d107      	bne.n	8006014 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006012:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e01a      	b.n	800604e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800601c:	2b00      	cmp	r3, #0
 800601e:	d194      	bne.n	8005f4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800602e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	e000      	b.n	800604e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800604c:	2302      	movs	r3, #2
  }
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	00100002 	.word	0x00100002
 800605c:	ffff0000 	.word	0xffff0000

08006060 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	607a      	str	r2, [r7, #4]
 800606a:	461a      	mov	r2, r3
 800606c:	460b      	mov	r3, r1
 800606e:	817b      	strh	r3, [r7, #10]
 8006070:	4613      	mov	r3, r2
 8006072:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b20      	cmp	r3, #32
 8006082:	f040 8109 	bne.w	8006298 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006086:	4b87      	ldr	r3, [pc, #540]	@ (80062a4 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	08db      	lsrs	r3, r3, #3
 800608c:	4a86      	ldr	r2, [pc, #536]	@ (80062a8 <HAL_I2C_Master_Transmit_DMA+0x248>)
 800608e:	fba2 2303 	umull	r2, r3, r2, r3
 8006092:	0a1a      	lsrs	r2, r3, #8
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	009a      	lsls	r2, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d112      	bne.n	80060d2 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c6:	f043 0220 	orr.w	r2, r3, #32
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80060ce:	2302      	movs	r3, #2
 80060d0:	e0e3      	b.n	800629a <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d0df      	beq.n	80060a0 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <HAL_I2C_Master_Transmit_DMA+0x8e>
 80060ea:	2302      	movs	r3, #2
 80060ec:	e0d5      	b.n	800629a <HAL_I2C_Master_Transmit_DMA+0x23a>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b01      	cmp	r3, #1
 8006102:	d007      	beq.n	8006114 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0201 	orr.w	r2, r2, #1
 8006112:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006122:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2221      	movs	r2, #33	@ 0x21
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2210      	movs	r2, #16
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	893a      	ldrh	r2, [r7, #8]
 8006144:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4a56      	ldr	r2, [pc, #344]	@ (80062ac <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8006154:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8006156:	897a      	ldrh	r2, [r7, #10]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006160:	2b00      	cmp	r3, #0
 8006162:	d07b      	beq.n	800625c <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006168:	2b00      	cmp	r3, #0
 800616a:	d02a      	beq.n	80061c2 <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006170:	4a4f      	ldr	r2, [pc, #316]	@ (80062b0 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8006172:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006178:	4a4e      	ldr	r2, [pc, #312]	@ (80062b4 <HAL_I2C_Master_Transmit_DMA+0x254>)
 800617a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006180:	2200      	movs	r2, #0
 8006182:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006188:	2200      	movs	r2, #0
 800618a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006190:	2200      	movs	r2, #0
 8006192:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006198:	2200      	movs	r2, #0
 800619a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a4:	4619      	mov	r1, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3310      	adds	r3, #16
 80061ac:	461a      	mov	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b2:	f7ff f849 	bl	8005248 <HAL_DMA_Start_IT>
 80061b6:	4603      	mov	r3, r0
 80061b8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80061ba:	7dfb      	ldrb	r3, [r7, #23]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d139      	bne.n	8006234 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 80061c0:	e013      	b.n	80061ea <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e057      	b.n	800629a <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006200:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006210:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006220:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	e02f      	b.n	8006294 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2220      	movs	r2, #32
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006248:	f043 0210 	orr.w	r2, r3, #16
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e01e      	b.n	800629a <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800626a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800627a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8006292:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	e000      	b.n	800629a <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8006298:	2302      	movs	r3, #2
  }
}
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20000048 	.word	0x20000048
 80062a8:	14f8b589 	.word	0x14f8b589
 80062ac:	ffff0000 	.word	0xffff0000
 80062b0:	08007d95 	.word	0x08007d95
 80062b4:	08007f53 	.word	0x08007f53

080062b8 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	607a      	str	r2, [r7, #4]
 80062c2:	461a      	mov	r2, r3
 80062c4:	460b      	mov	r3, r1
 80062c6:	817b      	strh	r3, [r7, #10]
 80062c8:	4613      	mov	r3, r2
 80062ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b20      	cmp	r3, #32
 80062da:	f040 8109 	bne.w	80064f0 <HAL_I2C_Master_Receive_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80062de:	4b87      	ldr	r3, [pc, #540]	@ (80064fc <HAL_I2C_Master_Receive_DMA+0x244>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	08db      	lsrs	r3, r3, #3
 80062e4:	4a86      	ldr	r2, [pc, #536]	@ (8006500 <HAL_I2C_Master_Receive_DMA+0x248>)
 80062e6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ea:	0a1a      	lsrs	r2, r3, #8
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	009a      	lsls	r2, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d112      	bne.n	800632a <HAL_I2C_Master_Receive_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2220      	movs	r2, #32
 800630e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631e:	f043 0220 	orr.w	r2, r3, #32
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8006326:	2302      	movs	r3, #2
 8006328:	e0e3      	b.n	80064f2 <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b02      	cmp	r3, #2
 8006336:	d0df      	beq.n	80062f8 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <HAL_I2C_Master_Receive_DMA+0x8e>
 8006342:	2302      	movs	r3, #2
 8006344:	e0d5      	b.n	80064f2 <HAL_I2C_Master_Receive_DMA+0x23a>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b01      	cmp	r3, #1
 800635a:	d007      	beq.n	800636c <HAL_I2C_Master_Receive_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0201 	orr.w	r2, r2, #1
 800636a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800637a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2222      	movs	r2, #34	@ 0x22
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2210      	movs	r2, #16
 8006388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	893a      	ldrh	r2, [r7, #8]
 800639c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4a56      	ldr	r2, [pc, #344]	@ (8006504 <HAL_I2C_Master_Receive_DMA+0x24c>)
 80063ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80063ae:	897a      	ldrh	r2, [r7, #10]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d07b      	beq.n	80064b4 <HAL_I2C_Master_Receive_DMA+0x1fc>
    {
      if (hi2c->hdmarx != NULL)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d02a      	beq.n	800641a <HAL_I2C_Master_Receive_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c8:	4a4f      	ldr	r2, [pc, #316]	@ (8006508 <HAL_I2C_Master_Receive_DMA+0x250>)
 80063ca:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d0:	4a4e      	ldr	r2, [pc, #312]	@ (800650c <HAL_I2C_Master_Receive_DMA+0x254>)
 80063d2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d8:	2200      	movs	r2, #0
 80063da:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e0:	2200      	movs	r2, #0
 80063e2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e8:	2200      	movs	r2, #0
 80063ea:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f0:	2200      	movs	r2, #0
 80063f2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3310      	adds	r3, #16
 80063fe:	4619      	mov	r1, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006404:	461a      	mov	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800640a:	f7fe ff1d 	bl	8005248 <HAL_DMA_Start_IT>
 800640e:	4603      	mov	r3, r0
 8006410:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006412:	7dfb      	ldrb	r3, [r7, #23]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d139      	bne.n	800648c <HAL_I2C_Master_Receive_DMA+0x1d4>
 8006418:	e013      	b.n	8006442 <HAL_I2C_Master_Receive_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e057      	b.n	80064f2 <HAL_I2C_Master_Receive_DMA+0x23a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006450:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006460:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006478:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006488:	605a      	str	r2, [r3, #4]
 800648a:	e02f      	b.n	80064ec <HAL_I2C_Master_Receive_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2220      	movs	r2, #32
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a0:	f043 0210 	orr.w	r2, r3, #16
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e01e      	b.n	80064f2 <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80064ca:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80064da:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064ea:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	e000      	b.n	80064f2 <HAL_I2C_Master_Receive_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 80064f0:	2302      	movs	r3, #2
  }
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000048 	.word	0x20000048
 8006500:	14f8b589 	.word	0x14f8b589
 8006504:	ffff0000 	.word	0xffff0000
 8006508:	08007d95 	.word	0x08007d95
 800650c:	08007f53 	.word	0x08007f53

08006510 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006528:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006530:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006538:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	2b10      	cmp	r3, #16
 800653e:	d003      	beq.n	8006548 <HAL_I2C_EV_IRQHandler+0x38>
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	2b40      	cmp	r3, #64	@ 0x40
 8006544:	f040 80b1 	bne.w	80066aa <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10d      	bne.n	800657e <HAL_I2C_EV_IRQHandler+0x6e>
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006568:	d003      	beq.n	8006572 <HAL_I2C_EV_IRQHandler+0x62>
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006570:	d101      	bne.n	8006576 <HAL_I2C_EV_IRQHandler+0x66>
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <HAL_I2C_EV_IRQHandler+0x68>
 8006576:	2300      	movs	r3, #0
 8006578:	2b01      	cmp	r3, #1
 800657a:	f000 8114 	beq.w	80067a6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00b      	beq.n	80065a0 <HAL_I2C_EV_IRQHandler+0x90>
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800658e:	2b00      	cmp	r3, #0
 8006590:	d006      	beq.n	80065a0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f001 ffcd 	bl	8008532 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fd5c 	bl	8007056 <I2C_Master_SB>
 800659e:	e083      	b.n	80066a8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f003 0308 	and.w	r3, r3, #8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d008      	beq.n	80065bc <HAL_I2C_EV_IRQHandler+0xac>
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fdd4 	bl	8007162 <I2C_Master_ADD10>
 80065ba:	e075      	b.n	80066a8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d008      	beq.n	80065d8 <HAL_I2C_EV_IRQHandler+0xc8>
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fdf0 	bl	80071b6 <I2C_Master_ADDR>
 80065d6:	e067      	b.n	80066a8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	f003 0304 	and.w	r3, r3, #4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d036      	beq.n	8006650 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065f0:	f000 80db 	beq.w	80067aa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00d      	beq.n	800661a <HAL_I2C_EV_IRQHandler+0x10a>
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006604:	2b00      	cmp	r3, #0
 8006606:	d008      	beq.n	800661a <HAL_I2C_EV_IRQHandler+0x10a>
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f003 0304 	and.w	r3, r3, #4
 800660e:	2b00      	cmp	r3, #0
 8006610:	d103      	bne.n	800661a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f9b8 	bl	8006988 <I2C_MasterTransmit_TXE>
 8006618:	e046      	b.n	80066a8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 80c2 	beq.w	80067aa <HAL_I2C_EV_IRQHandler+0x29a>
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 80bc 	beq.w	80067aa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006632:	7bbb      	ldrb	r3, [r7, #14]
 8006634:	2b21      	cmp	r3, #33	@ 0x21
 8006636:	d103      	bne.n	8006640 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fa41 	bl	8006ac0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800663e:	e0b4      	b.n	80067aa <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	2b40      	cmp	r3, #64	@ 0x40
 8006644:	f040 80b1 	bne.w	80067aa <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 faaf 	bl	8006bac <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800664e:	e0ac      	b.n	80067aa <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800665a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800665e:	f000 80a4 	beq.w	80067aa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00d      	beq.n	8006688 <HAL_I2C_EV_IRQHandler+0x178>
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006672:	2b00      	cmp	r3, #0
 8006674:	d008      	beq.n	8006688 <HAL_I2C_EV_IRQHandler+0x178>
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b00      	cmp	r3, #0
 800667e:	d103      	bne.n	8006688 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fb2b 	bl	8006cdc <I2C_MasterReceive_RXNE>
 8006686:	e00f      	b.n	80066a8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	f003 0304 	and.w	r3, r3, #4
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 808b 	beq.w	80067aa <HAL_I2C_EV_IRQHandler+0x29a>
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 8085 	beq.w	80067aa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fbe3 	bl	8006e6c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066a6:	e080      	b.n	80067aa <HAL_I2C_EV_IRQHandler+0x29a>
 80066a8:	e07f      	b.n	80067aa <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d004      	beq.n	80066bc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	61fb      	str	r3, [r7, #28]
 80066ba:	e007      	b.n	80066cc <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d011      	beq.n	80066fa <HAL_I2C_EV_IRQHandler+0x1ea>
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00c      	beq.n	80066fa <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80066f0:	69b9      	ldr	r1, [r7, #24]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 ffae 	bl	8007654 <I2C_Slave_ADDR>
 80066f8:	e05a      	b.n	80067b0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	f003 0310 	and.w	r3, r3, #16
 8006700:	2b00      	cmp	r3, #0
 8006702:	d008      	beq.n	8006716 <HAL_I2C_EV_IRQHandler+0x206>
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 ffe8 	bl	80076e4 <I2C_Slave_STOPF>
 8006714:	e04c      	b.n	80067b0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006716:	7bbb      	ldrb	r3, [r7, #14]
 8006718:	2b21      	cmp	r3, #33	@ 0x21
 800671a:	d002      	beq.n	8006722 <HAL_I2C_EV_IRQHandler+0x212>
 800671c:	7bbb      	ldrb	r3, [r7, #14]
 800671e:	2b29      	cmp	r3, #41	@ 0x29
 8006720:	d120      	bne.n	8006764 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00d      	beq.n	8006748 <HAL_I2C_EV_IRQHandler+0x238>
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006732:	2b00      	cmp	r3, #0
 8006734:	d008      	beq.n	8006748 <HAL_I2C_EV_IRQHandler+0x238>
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d103      	bne.n	8006748 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fec9 	bl	80074d8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006746:	e032      	b.n	80067ae <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f003 0304 	and.w	r3, r3, #4
 800674e:	2b00      	cmp	r3, #0
 8006750:	d02d      	beq.n	80067ae <HAL_I2C_EV_IRQHandler+0x29e>
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006758:	2b00      	cmp	r3, #0
 800675a:	d028      	beq.n	80067ae <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fef8 	bl	8007552 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006762:	e024      	b.n	80067ae <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00d      	beq.n	800678a <HAL_I2C_EV_IRQHandler+0x27a>
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006774:	2b00      	cmp	r3, #0
 8006776:	d008      	beq.n	800678a <HAL_I2C_EV_IRQHandler+0x27a>
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	d103      	bne.n	800678a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 ff06 	bl	8007594 <I2C_SlaveReceive_RXNE>
 8006788:	e012      	b.n	80067b0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00d      	beq.n	80067b0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800679a:	2b00      	cmp	r3, #0
 800679c:	d008      	beq.n	80067b0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 ff36 	bl	8007610 <I2C_SlaveReceive_BTF>
 80067a4:	e004      	b.n	80067b0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80067a6:	bf00      	nop
 80067a8:	e002      	b.n	80067b0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067aa:	bf00      	nop
 80067ac:	e000      	b.n	80067b0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067ae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80067b0:	3720      	adds	r7, #32
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b08a      	sub	sp, #40	@ 0x28
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80067ce:	2300      	movs	r3, #0
 80067d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067d8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00d      	beq.n	8006800 <HAL_I2C_ER_IRQHandler+0x4a>
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d008      	beq.n	8006800 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	f043 0301 	orr.w	r3, r3, #1
 80067f4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80067fe:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00d      	beq.n	8006826 <HAL_I2C_ER_IRQHandler+0x70>
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006810:	2b00      	cmp	r3, #0
 8006812:	d008      	beq.n	8006826 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	f043 0302 	orr.w	r3, r3, #2
 800681a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8006824:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800682c:	2b00      	cmp	r3, #0
 800682e:	d03e      	beq.n	80068ae <HAL_I2C_ER_IRQHandler+0xf8>
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006836:	2b00      	cmp	r3, #0
 8006838:	d039      	beq.n	80068ae <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800683a:	7efb      	ldrb	r3, [r7, #27]
 800683c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006842:	b29b      	uxth	r3, r3
 8006844:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800684c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006852:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006854:	7ebb      	ldrb	r3, [r7, #26]
 8006856:	2b20      	cmp	r3, #32
 8006858:	d112      	bne.n	8006880 <HAL_I2C_ER_IRQHandler+0xca>
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10f      	bne.n	8006880 <HAL_I2C_ER_IRQHandler+0xca>
 8006860:	7cfb      	ldrb	r3, [r7, #19]
 8006862:	2b21      	cmp	r3, #33	@ 0x21
 8006864:	d008      	beq.n	8006878 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006866:	7cfb      	ldrb	r3, [r7, #19]
 8006868:	2b29      	cmp	r3, #41	@ 0x29
 800686a:	d005      	beq.n	8006878 <HAL_I2C_ER_IRQHandler+0xc2>
 800686c:	7cfb      	ldrb	r3, [r7, #19]
 800686e:	2b28      	cmp	r3, #40	@ 0x28
 8006870:	d106      	bne.n	8006880 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b21      	cmp	r3, #33	@ 0x21
 8006876:	d103      	bne.n	8006880 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f001 f863 	bl	8007944 <I2C_Slave_AF>
 800687e:	e016      	b.n	80068ae <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006888:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	f043 0304 	orr.w	r3, r3, #4
 8006890:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006892:	7efb      	ldrb	r3, [r7, #27]
 8006894:	2b10      	cmp	r3, #16
 8006896:	d002      	beq.n	800689e <HAL_I2C_ER_IRQHandler+0xe8>
 8006898:	7efb      	ldrb	r3, [r7, #27]
 800689a:	2b40      	cmp	r3, #64	@ 0x40
 800689c:	d107      	bne.n	80068ae <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068ac:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00d      	beq.n	80068d4 <HAL_I2C_ER_IRQHandler+0x11e>
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d008      	beq.n	80068d4 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	f043 0308 	orr.w	r3, r3, #8
 80068c8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80068d2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80068d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d008      	beq.n	80068ec <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	431a      	orrs	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f001 f8a0 	bl	8007a2c <I2C_ITError>
  }
}
 80068ec:	bf00      	nop
 80068ee:	3728      	adds	r7, #40	@ 0x28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	70fb      	strb	r3, [r7, #3]
 8006928:	4613      	mov	r3, r2
 800692a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006996:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800699e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d150      	bne.n	8006a50 <I2C_MasterTransmit_TXE+0xc8>
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
 80069b0:	2b21      	cmp	r3, #33	@ 0x21
 80069b2:	d14d      	bne.n	8006a50 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d01d      	beq.n	80069f6 <I2C_MasterTransmit_TXE+0x6e>
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b20      	cmp	r3, #32
 80069be:	d01a      	beq.n	80069f6 <I2C_MasterTransmit_TXE+0x6e>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80069c6:	d016      	beq.n	80069f6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80069d6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2211      	movs	r2, #17
 80069dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7fc f910 	bl	8002c14 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80069f4:	e060      	b.n	8006ab8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006a04:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a14:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b40      	cmp	r3, #64	@ 0x40
 8006a2e:	d107      	bne.n	8006a40 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7ff ff87 	bl	800694c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a3e:	e03b      	b.n	8006ab8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7fc f8e3 	bl	8002c14 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a4e:	e033      	b.n	8006ab8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
 8006a52:	2b21      	cmp	r3, #33	@ 0x21
 8006a54:	d005      	beq.n	8006a62 <I2C_MasterTransmit_TXE+0xda>
 8006a56:	7bbb      	ldrb	r3, [r7, #14]
 8006a58:	2b40      	cmp	r3, #64	@ 0x40
 8006a5a:	d12d      	bne.n	8006ab8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
 8006a5e:	2b22      	cmp	r3, #34	@ 0x22
 8006a60:	d12a      	bne.n	8006ab8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d108      	bne.n	8006a7e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a7a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006a7c:	e01c      	b.n	8006ab8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b40      	cmp	r3, #64	@ 0x40
 8006a88:	d103      	bne.n	8006a92 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f88e 	bl	8006bac <I2C_MemoryTransmit_TXE_BTF>
}
 8006a90:	e012      	b.n	8006ab8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a96:	781a      	ldrb	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006ab6:	e7ff      	b.n	8006ab8 <I2C_MasterTransmit_TXE+0x130>
 8006ab8:	bf00      	nop
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006acc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b21      	cmp	r3, #33	@ 0x21
 8006ad8:	d164      	bne.n	8006ba4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d012      	beq.n	8006b0a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae8:	781a      	ldrb	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	3b01      	subs	r3, #1
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006b08:	e04c      	b.n	8006ba4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d01d      	beq.n	8006b4c <I2C_MasterTransmit_BTF+0x8c>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b20      	cmp	r3, #32
 8006b14:	d01a      	beq.n	8006b4c <I2C_MasterTransmit_BTF+0x8c>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b1c:	d016      	beq.n	8006b4c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b2c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2211      	movs	r2, #17
 8006b32:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7fc f865 	bl	8002c14 <HAL_I2C_MasterTxCpltCallback>
}
 8006b4a:	e02b      	b.n	8006ba4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b5a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b6a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b40      	cmp	r3, #64	@ 0x40
 8006b84:	d107      	bne.n	8006b96 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff fedc 	bl	800694c <HAL_I2C_MemTxCpltCallback>
}
 8006b94:	e006      	b.n	8006ba4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7fc f838 	bl	8002c14 <HAL_I2C_MasterTxCpltCallback>
}
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d11d      	bne.n	8006c00 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d10b      	bne.n	8006be4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bdc:	1c9a      	adds	r2, r3, #2
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006be2:	e077      	b.n	8006cd4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	121b      	asrs	r3, r3, #8
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006bfe:	e069      	b.n	8006cd4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d10b      	bne.n	8006c20 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006c1e:	e059      	b.n	8006cd4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d152      	bne.n	8006cce <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	2b22      	cmp	r3, #34	@ 0x22
 8006c2c:	d10d      	bne.n	8006c4a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c3c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006c48:	e044      	b.n	8006cd4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d015      	beq.n	8006c80 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
 8006c56:	2b21      	cmp	r3, #33	@ 0x21
 8006c58:	d112      	bne.n	8006c80 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5e:	781a      	ldrb	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006c7e:	e029      	b.n	8006cd4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d124      	bne.n	8006cd4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	2b21      	cmp	r3, #33	@ 0x21
 8006c8e:	d121      	bne.n	8006cd4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006c9e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff fe40 	bl	800694c <HAL_I2C_MemTxCpltCallback>
}
 8006ccc:	e002      	b.n	8006cd4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff f8b2 	bl	8005e38 <I2C_Flush_DR>
}
 8006cd4:	bf00      	nop
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b22      	cmp	r3, #34	@ 0x22
 8006cee:	f040 80b9 	bne.w	8006e64 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	d921      	bls.n	8006d4a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	f040 8096 	bne.w	8006e64 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d46:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006d48:	e08c      	b.n	8006e64 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d07f      	beq.n	8006e52 <I2C_MasterReceive_RXNE+0x176>
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d002      	beq.n	8006d5e <I2C_MasterReceive_RXNE+0x82>
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d179      	bne.n	8006e52 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 fb86 	bl	8008470 <I2C_WaitOnSTOPRequestThroughIT>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d14c      	bne.n	8006e04 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d78:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006d88:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	691a      	ldr	r2, [r3, #16]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d94:	b2d2      	uxtb	r2, r2
 8006d96:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	3b01      	subs	r3, #1
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b40      	cmp	r3, #64	@ 0x40
 8006dc2:	d10a      	bne.n	8006dda <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff fdc4 	bl	8006960 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006dd8:	e044      	b.n	8006e64 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d002      	beq.n	8006dee <I2C_MasterReceive_RXNE+0x112>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b20      	cmp	r3, #32
 8006dec:	d103      	bne.n	8006df6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	631a      	str	r2, [r3, #48]	@ 0x30
 8006df4:	e002      	b.n	8006dfc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2212      	movs	r2, #18
 8006dfa:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7fb ff29 	bl	8002c54 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e02:	e02f      	b.n	8006e64 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006e12:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691a      	ldr	r2, [r3, #16]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1e:	b2d2      	uxtb	r2, r2
 8006e20:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e26:	1c5a      	adds	r2, r3, #1
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	3b01      	subs	r3, #1
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fb ff38 	bl	8002cc0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e50:	e008      	b.n	8006e64 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e60:	605a      	str	r2, [r3, #4]
}
 8006e62:	e7ff      	b.n	8006e64 <I2C_MasterReceive_RXNE+0x188>
 8006e64:	bf00      	nop
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e78:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d11b      	bne.n	8006ebc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685a      	ldr	r2, [r3, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e92:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691a      	ldr	r2, [r3, #16]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9e:	b2d2      	uxtb	r2, r2
 8006ea0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006eba:	e0c8      	b.n	800704e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d129      	bne.n	8006f1a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ed4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	d00a      	beq.n	8006ef2 <I2C_MasterReceive_BTF+0x86>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d007      	beq.n	8006ef2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ef0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	3b01      	subs	r3, #1
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006f18:	e099      	b.n	800704e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	f040 8081 	bne.w	8007028 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d002      	beq.n	8006f32 <I2C_MasterReceive_BTF+0xc6>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b10      	cmp	r3, #16
 8006f30:	d108      	bne.n	8006f44 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	e019      	b.n	8006f78 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d002      	beq.n	8006f50 <I2C_MasterReceive_BTF+0xe4>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d108      	bne.n	8006f62 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	e00a      	b.n	8006f78 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2b10      	cmp	r3, #16
 8006f66:	d007      	beq.n	8006f78 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f76:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691a      	ldr	r2, [r3, #16]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	3b01      	subs	r3, #1
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	691a      	ldr	r2, [r3, #16]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa8:	b2d2      	uxtb	r2, r2
 8006faa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb0:	1c5a      	adds	r2, r3, #1
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006fd2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b40      	cmp	r3, #64	@ 0x40
 8006fe6:	d10a      	bne.n	8006ffe <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7ff fcb2 	bl	8006960 <HAL_I2C_MemRxCpltCallback>
}
 8006ffc:	e027      	b.n	800704e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2b08      	cmp	r3, #8
 800700a:	d002      	beq.n	8007012 <I2C_MasterReceive_BTF+0x1a6>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b20      	cmp	r3, #32
 8007010:	d103      	bne.n	800701a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	631a      	str	r2, [r3, #48]	@ 0x30
 8007018:	e002      	b.n	8007020 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2212      	movs	r2, #18
 800701e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7fb fe17 	bl	8002c54 <HAL_I2C_MasterRxCpltCallback>
}
 8007026:	e012      	b.n	800704e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	691a      	ldr	r2, [r3, #16]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007044:	b29b      	uxth	r3, r3
 8007046:	3b01      	subs	r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800704e:	bf00      	nop
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b40      	cmp	r3, #64	@ 0x40
 8007068:	d117      	bne.n	800709a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800706e:	2b00      	cmp	r3, #0
 8007070:	d109      	bne.n	8007086 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007076:	b2db      	uxtb	r3, r3
 8007078:	461a      	mov	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007082:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007084:	e067      	b.n	8007156 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708a:	b2db      	uxtb	r3, r3
 800708c:	f043 0301 	orr.w	r3, r3, #1
 8007090:	b2da      	uxtb	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	611a      	str	r2, [r3, #16]
}
 8007098:	e05d      	b.n	8007156 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070a2:	d133      	bne.n	800710c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b21      	cmp	r3, #33	@ 0x21
 80070ae:	d109      	bne.n	80070c4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80070c0:	611a      	str	r2, [r3, #16]
 80070c2:	e008      	b.n	80070d6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	f043 0301 	orr.w	r3, r3, #1
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d004      	beq.n	80070e8 <I2C_Master_SB+0x92>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d108      	bne.n	80070fa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d032      	beq.n	8007156 <I2C_Master_SB+0x100>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d02d      	beq.n	8007156 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007108:	605a      	str	r2, [r3, #4]
}
 800710a:	e024      	b.n	8007156 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10e      	bne.n	8007132 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007118:	b29b      	uxth	r3, r3
 800711a:	11db      	asrs	r3, r3, #7
 800711c:	b2db      	uxtb	r3, r3
 800711e:	f003 0306 	and.w	r3, r3, #6
 8007122:	b2db      	uxtb	r3, r3
 8007124:	f063 030f 	orn	r3, r3, #15
 8007128:	b2da      	uxtb	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	611a      	str	r2, [r3, #16]
}
 8007130:	e011      	b.n	8007156 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007136:	2b01      	cmp	r3, #1
 8007138:	d10d      	bne.n	8007156 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800713e:	b29b      	uxth	r3, r3
 8007140:	11db      	asrs	r3, r3, #7
 8007142:	b2db      	uxtb	r3, r3
 8007144:	f003 0306 	and.w	r3, r3, #6
 8007148:	b2db      	uxtb	r3, r3
 800714a:	f063 030e 	orn	r3, r3, #14
 800714e:	b2da      	uxtb	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	611a      	str	r2, [r3, #16]
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800716e:	b2da      	uxtb	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800717a:	2b00      	cmp	r3, #0
 800717c:	d004      	beq.n	8007188 <I2C_Master_ADD10+0x26>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007184:	2b00      	cmp	r3, #0
 8007186:	d108      	bne.n	800719a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00c      	beq.n	80071aa <I2C_Master_ADD10+0x48>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d007      	beq.n	80071aa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071a8:	605a      	str	r2, [r3, #4]
  }
}
 80071aa:	bf00      	nop
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b091      	sub	sp, #68	@ 0x44
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b22      	cmp	r3, #34	@ 0x22
 80071de:	f040 8169 	bne.w	80074b4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10f      	bne.n	800720a <I2C_Master_ADDR+0x54>
 80071ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80071ee:	2b40      	cmp	r3, #64	@ 0x40
 80071f0:	d10b      	bne.n	800720a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071f2:	2300      	movs	r3, #0
 80071f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	633b      	str	r3, [r7, #48]	@ 0x30
 8007206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007208:	e160      	b.n	80074cc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800720e:	2b00      	cmp	r3, #0
 8007210:	d11d      	bne.n	800724e <I2C_Master_ADDR+0x98>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800721a:	d118      	bne.n	800724e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800721c:	2300      	movs	r3, #0
 800721e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007240:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	651a      	str	r2, [r3, #80]	@ 0x50
 800724c:	e13e      	b.n	80074cc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d113      	bne.n	8007280 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007258:	2300      	movs	r3, #0
 800725a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800726c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	e115      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007284:	b29b      	uxth	r3, r3
 8007286:	2b01      	cmp	r3, #1
 8007288:	f040 808a 	bne.w	80073a0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800728c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007292:	d137      	bne.n	8007304 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072a2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072b2:	d113      	bne.n	80072dc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072c2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072c4:	2300      	movs	r3, #0
 80072c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80072d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072da:	e0e7      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072dc:	2300      	movs	r3, #0
 80072de:	623b      	str	r3, [r7, #32]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	623b      	str	r3, [r7, #32]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	623b      	str	r3, [r7, #32]
 80072f0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	e0d3      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007306:	2b08      	cmp	r3, #8
 8007308:	d02e      	beq.n	8007368 <I2C_Master_ADDR+0x1b2>
 800730a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730c:	2b20      	cmp	r3, #32
 800730e:	d02b      	beq.n	8007368 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007312:	2b12      	cmp	r3, #18
 8007314:	d102      	bne.n	800731c <I2C_Master_ADDR+0x166>
 8007316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007318:	2b01      	cmp	r3, #1
 800731a:	d125      	bne.n	8007368 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800731c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731e:	2b04      	cmp	r3, #4
 8007320:	d00e      	beq.n	8007340 <I2C_Master_ADDR+0x18a>
 8007322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007324:	2b02      	cmp	r3, #2
 8007326:	d00b      	beq.n	8007340 <I2C_Master_ADDR+0x18a>
 8007328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732a:	2b10      	cmp	r3, #16
 800732c:	d008      	beq.n	8007340 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	e007      	b.n	8007350 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800734e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007350:	2300      	movs	r3, #0
 8007352:	61fb      	str	r3, [r7, #28]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	61fb      	str	r3, [r7, #28]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	e0a1      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007376:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007378:	2300      	movs	r3, #0
 800737a:	61bb      	str	r3, [r7, #24]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	61bb      	str	r3, [r7, #24]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	61bb      	str	r3, [r7, #24]
 800738c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	e085      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d14d      	bne.n	8007446 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80073aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	d016      	beq.n	80073de <I2C_Master_ADDR+0x228>
 80073b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d013      	beq.n	80073de <I2C_Master_ADDR+0x228>
 80073b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b8:	2b10      	cmp	r3, #16
 80073ba:	d010      	beq.n	80073de <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073ca:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	e007      	b.n	80073ee <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80073ec:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073fc:	d117      	bne.n	800742e <I2C_Master_ADDR+0x278>
 80073fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007400:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007404:	d00b      	beq.n	800741e <I2C_Master_ADDR+0x268>
 8007406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007408:	2b01      	cmp	r3, #1
 800740a:	d008      	beq.n	800741e <I2C_Master_ADDR+0x268>
 800740c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740e:	2b08      	cmp	r3, #8
 8007410:	d005      	beq.n	800741e <I2C_Master_ADDR+0x268>
 8007412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007414:	2b10      	cmp	r3, #16
 8007416:	d002      	beq.n	800741e <I2C_Master_ADDR+0x268>
 8007418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741a:	2b20      	cmp	r3, #32
 800741c:	d107      	bne.n	800742e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800742c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800742e:	2300      	movs	r3, #0
 8007430:	617b      	str	r3, [r7, #20]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	e032      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007454:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007464:	d117      	bne.n	8007496 <I2C_Master_ADDR+0x2e0>
 8007466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007468:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800746c:	d00b      	beq.n	8007486 <I2C_Master_ADDR+0x2d0>
 800746e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007470:	2b01      	cmp	r3, #1
 8007472:	d008      	beq.n	8007486 <I2C_Master_ADDR+0x2d0>
 8007474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007476:	2b08      	cmp	r3, #8
 8007478:	d005      	beq.n	8007486 <I2C_Master_ADDR+0x2d0>
 800747a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747c:	2b10      	cmp	r3, #16
 800747e:	d002      	beq.n	8007486 <I2C_Master_ADDR+0x2d0>
 8007480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007482:	2b20      	cmp	r3, #32
 8007484:	d107      	bne.n	8007496 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007494:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007496:	2300      	movs	r3, #0
 8007498:	613b      	str	r3, [r7, #16]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	613b      	str	r3, [r7, #16]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80074b2:	e00b      	b.n	80074cc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]
}
 80074ca:	e7ff      	b.n	80074cc <I2C_Master_ADDR+0x316>
 80074cc:	bf00      	nop
 80074ce:	3744      	adds	r7, #68	@ 0x44
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d02b      	beq.n	800754a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f6:	781a      	ldrb	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800750c:	b29b      	uxth	r3, r3
 800750e:	3b01      	subs	r3, #1
 8007510:	b29a      	uxth	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800751a:	b29b      	uxth	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d114      	bne.n	800754a <I2C_SlaveTransmit_TXE+0x72>
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	2b29      	cmp	r3, #41	@ 0x29
 8007524:	d111      	bne.n	800754a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007534:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2221      	movs	r2, #33	@ 0x21
 800753a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2228      	movs	r2, #40	@ 0x28
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff f9d5 	bl	80068f4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800754a:	bf00      	nop
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800755e:	b29b      	uxth	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	d011      	beq.n	8007588 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007568:	781a      	ldrb	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800757e:	b29b      	uxth	r3, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d02c      	beq.n	8007608 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	691a      	ldr	r2, [r3, #16]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b8:	b2d2      	uxtb	r2, r2
 80075ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075d8:	b29b      	uxth	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d114      	bne.n	8007608 <I2C_SlaveReceive_RXNE+0x74>
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80075e2:	d111      	bne.n	8007608 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075f2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2222      	movs	r2, #34	@ 0x22
 80075f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2228      	movs	r2, #40	@ 0x28
 80075fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff f980 	bl	8006908 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007608:	bf00      	nop
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d012      	beq.n	8007648 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	691a      	ldr	r2, [r3, #16]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800763e:	b29b      	uxth	r3, r3
 8007640:	3b01      	subs	r3, #1
 8007642:	b29a      	uxth	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007668:	b2db      	uxtb	r3, r3
 800766a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800766e:	2b28      	cmp	r3, #40	@ 0x28
 8007670:	d125      	bne.n	80076be <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007680:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	f003 0304 	and.w	r3, r3, #4
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800768c:	2301      	movs	r3, #1
 800768e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007696:	2b00      	cmp	r3, #0
 8007698:	d103      	bne.n	80076a2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	81bb      	strh	r3, [r7, #12]
 80076a0:	e002      	b.n	80076a8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80076b0:	89ba      	ldrh	r2, [r7, #12]
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7ff f930 	bl	800691c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80076bc:	e00e      	b.n	80076dc <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076be:	2300      	movs	r3, #0
 80076c0:	60bb      	str	r3, [r7, #8]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	60bb      	str	r3, [r7, #8]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	60bb      	str	r3, [r7, #8]
 80076d2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80076dc:	bf00      	nop
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076f2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007702:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007704:	2300      	movs	r3, #0
 8007706:	60bb      	str	r3, [r7, #8]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	60bb      	str	r3, [r7, #8]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0201 	orr.w	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007730:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800773c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007740:	d172      	bne.n	8007828 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	2b22      	cmp	r3, #34	@ 0x22
 8007746:	d002      	beq.n	800774e <I2C_Slave_STOPF+0x6a>
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	2b2a      	cmp	r3, #42	@ 0x2a
 800774c:	d135      	bne.n	80077ba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	b29a      	uxth	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007760:	b29b      	uxth	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d005      	beq.n	8007772 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776a:	f043 0204 	orr.w	r2, r3, #4
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007780:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007786:	4618      	mov	r0, r3
 8007788:	f7fd ff62 	bl	8005650 <HAL_DMA_GetState>
 800778c:	4603      	mov	r3, r0
 800778e:	2b01      	cmp	r3, #1
 8007790:	d049      	beq.n	8007826 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007796:	4a69      	ldr	r2, [pc, #420]	@ (800793c <I2C_Slave_STOPF+0x258>)
 8007798:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fd fdaa 	bl	80052f8 <HAL_DMA_Abort_IT>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d03d      	beq.n	8007826 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80077b4:	4610      	mov	r0, r2
 80077b6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077b8:	e035      	b.n	8007826 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d005      	beq.n	80077de <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d6:	f043 0204 	orr.w	r2, r3, #4
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fd ff2c 	bl	8005650 <HAL_DMA_GetState>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d014      	beq.n	8007828 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007802:	4a4e      	ldr	r2, [pc, #312]	@ (800793c <I2C_Slave_STOPF+0x258>)
 8007804:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800780a:	4618      	mov	r0, r3
 800780c:	f7fd fd74 	bl	80052f8 <HAL_DMA_Abort_IT>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d008      	beq.n	8007828 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800781a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007820:	4610      	mov	r0, r2
 8007822:	4798      	blx	r3
 8007824:	e000      	b.n	8007828 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007826:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800782c:	b29b      	uxth	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d03e      	beq.n	80078b0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b04      	cmp	r3, #4
 800783e:	d112      	bne.n	8007866 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	691a      	ldr	r2, [r3, #16]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784a:	b2d2      	uxtb	r2, r2
 800784c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800785c:	b29b      	uxth	r3, r3
 800785e:	3b01      	subs	r3, #1
 8007860:	b29a      	uxth	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007870:	2b40      	cmp	r3, #64	@ 0x40
 8007872:	d112      	bne.n	800789a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	691a      	ldr	r2, [r3, #16]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787e:	b2d2      	uxtb	r2, r2
 8007880:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007886:	1c5a      	adds	r2, r3, #1
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007890:	b29b      	uxth	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800789e:	b29b      	uxth	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d005      	beq.n	80078b0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a8:	f043 0204 	orr.w	r2, r3, #4
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f8b7 	bl	8007a2c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80078be:	e039      	b.n	8007934 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
 80078c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80078c4:	d109      	bne.n	80078da <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2228      	movs	r2, #40	@ 0x28
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff f817 	bl	8006908 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b28      	cmp	r3, #40	@ 0x28
 80078e4:	d111      	bne.n	800790a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a15      	ldr	r2, [pc, #84]	@ (8007940 <I2C_Slave_STOPF+0x25c>)
 80078ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff f818 	bl	8006938 <HAL_I2C_ListenCpltCallback>
}
 8007908:	e014      	b.n	8007934 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800790e:	2b22      	cmp	r3, #34	@ 0x22
 8007910:	d002      	beq.n	8007918 <I2C_Slave_STOPF+0x234>
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	2b22      	cmp	r3, #34	@ 0x22
 8007916:	d10d      	bne.n	8007934 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2220      	movs	r2, #32
 8007922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fe ffea 	bl	8006908 <HAL_I2C_SlaveRxCpltCallback>
}
 8007934:	bf00      	nop
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	08007fcd 	.word	0x08007fcd
 8007940:	ffff0000 	.word	0xffff0000

08007944 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007952:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007958:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	2b08      	cmp	r3, #8
 800795e:	d002      	beq.n	8007966 <I2C_Slave_AF+0x22>
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b20      	cmp	r3, #32
 8007964:	d129      	bne.n	80079ba <I2C_Slave_AF+0x76>
 8007966:	7bfb      	ldrb	r3, [r7, #15]
 8007968:	2b28      	cmp	r3, #40	@ 0x28
 800796a:	d126      	bne.n	80079ba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a2e      	ldr	r2, [pc, #184]	@ (8007a28 <I2C_Slave_AF+0xe4>)
 8007970:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007980:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800798a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800799a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7fe ffc0 	bl	8006938 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80079b8:	e031      	b.n	8007a1e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	2b21      	cmp	r3, #33	@ 0x21
 80079be:	d129      	bne.n	8007a14 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a19      	ldr	r2, [pc, #100]	@ (8007a28 <I2C_Slave_AF+0xe4>)
 80079c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2221      	movs	r2, #33	@ 0x21
 80079ca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80079ea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80079f4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a04:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7fe fa16 	bl	8005e38 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7fe ff71 	bl	80068f4 <HAL_I2C_SlaveTxCpltCallback>
}
 8007a12:	e004      	b.n	8007a1e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007a1c:	615a      	str	r2, [r3, #20]
}
 8007a1e:	bf00      	nop
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	ffff0000 	.word	0xffff0000

08007a2c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	2b10      	cmp	r3, #16
 8007a48:	d002      	beq.n	8007a50 <I2C_ITError+0x24>
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	2b40      	cmp	r3, #64	@ 0x40
 8007a4e:	d10a      	bne.n	8007a66 <I2C_ITError+0x3a>
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
 8007a52:	2b22      	cmp	r3, #34	@ 0x22
 8007a54:	d107      	bne.n	8007a66 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a64:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007a6c:	2b28      	cmp	r3, #40	@ 0x28
 8007a6e:	d107      	bne.n	8007a80 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2228      	movs	r2, #40	@ 0x28
 8007a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007a7e:	e015      	b.n	8007aac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a8e:	d00a      	beq.n	8007aa6 <I2C_ITError+0x7a>
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	2b60      	cmp	r3, #96	@ 0x60
 8007a94:	d007      	beq.n	8007aa6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ab6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007aba:	d162      	bne.n	8007b82 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685a      	ldr	r2, [r3, #4]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007aca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d020      	beq.n	8007b1c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ade:	4a6a      	ldr	r2, [pc, #424]	@ (8007c88 <I2C_ITError+0x25c>)
 8007ae0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fd fc06 	bl	80052f8 <HAL_DMA_Abort_IT>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 8089 	beq.w	8007c06 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f022 0201 	bic.w	r2, r2, #1
 8007b02:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2220      	movs	r2, #32
 8007b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007b16:	4610      	mov	r0, r2
 8007b18:	4798      	blx	r3
 8007b1a:	e074      	b.n	8007c06 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b20:	4a59      	ldr	r2, [pc, #356]	@ (8007c88 <I2C_ITError+0x25c>)
 8007b22:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fd fbe5 	bl	80052f8 <HAL_DMA_Abort_IT>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d068      	beq.n	8007c06 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b3e:	2b40      	cmp	r3, #64	@ 0x40
 8007b40:	d10b      	bne.n	8007b5a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	691a      	ldr	r2, [r3, #16]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4c:	b2d2      	uxtb	r2, r2
 8007b4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f022 0201 	bic.w	r2, r2, #1
 8007b68:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	4798      	blx	r3
 8007b80:	e041      	b.n	8007c06 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b60      	cmp	r3, #96	@ 0x60
 8007b8c:	d125      	bne.n	8007bda <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2220      	movs	r2, #32
 8007b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba6:	2b40      	cmp	r3, #64	@ 0x40
 8007ba8:	d10b      	bne.n	8007bc2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	691a      	ldr	r2, [r3, #16]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb4:	b2d2      	uxtb	r2, r2
 8007bb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bbc:	1c5a      	adds	r2, r3, #1
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 0201 	bic.w	r2, r2, #1
 8007bd0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7fe fece 	bl	8006974 <HAL_I2C_AbortCpltCallback>
 8007bd8:	e015      	b.n	8007c06 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be4:	2b40      	cmp	r3, #64	@ 0x40
 8007be6:	d10b      	bne.n	8007c00 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	691a      	ldr	r2, [r3, #16]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf2:	b2d2      	uxtb	r2, r2
 8007bf4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfa:	1c5a      	adds	r2, r3, #1
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7fb f85d 	bl	8002cc0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c0a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10e      	bne.n	8007c34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d109      	bne.n	8007c34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d104      	bne.n	8007c34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d007      	beq.n	8007c44 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007c42:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c4a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d113      	bne.n	8007c80 <I2C_ITError+0x254>
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
 8007c5a:	2b28      	cmp	r3, #40	@ 0x28
 8007c5c:	d110      	bne.n	8007c80 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a0a      	ldr	r2, [pc, #40]	@ (8007c8c <I2C_ITError+0x260>)
 8007c62:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7fe fe5c 	bl	8006938 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007c80:	bf00      	nop
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	08007fcd 	.word	0x08007fcd
 8007c8c:	ffff0000 	.word	0xffff0000

08007c90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b088      	sub	sp, #32
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	607a      	str	r2, [r7, #4]
 8007c9a:	603b      	str	r3, [r7, #0]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	d006      	beq.n	8007cba <I2C_MasterRequestWrite+0x2a>
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d003      	beq.n	8007cba <I2C_MasterRequestWrite+0x2a>
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007cb8:	d108      	bne.n	8007ccc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	e00b      	b.n	8007ce4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd0:	2b12      	cmp	r3, #18
 8007cd2:	d107      	bne.n	8007ce4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ce2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 fa13 	bl	800811c <I2C_WaitOnFlagUntilTimeout>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00d      	beq.n	8007d18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d0a:	d103      	bne.n	8007d14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e035      	b.n	8007d84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d20:	d108      	bne.n	8007d34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d22:	897b      	ldrh	r3, [r7, #10]
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	461a      	mov	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007d30:	611a      	str	r2, [r3, #16]
 8007d32:	e01b      	b.n	8007d6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007d34:	897b      	ldrh	r3, [r7, #10]
 8007d36:	11db      	asrs	r3, r3, #7
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	f003 0306 	and.w	r3, r3, #6
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	f063 030f 	orn	r3, r3, #15
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	490e      	ldr	r1, [pc, #56]	@ (8007d8c <I2C_MasterRequestWrite+0xfc>)
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 fa5c 	bl	8008210 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e010      	b.n	8007d84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007d62:	897b      	ldrh	r3, [r7, #10]
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	4907      	ldr	r1, [pc, #28]	@ (8007d90 <I2C_MasterRequestWrite+0x100>)
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 fa4c 	bl	8008210 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e000      	b.n	8007d84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3718      	adds	r7, #24
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	00010008 	.word	0x00010008
 8007d90:	00010002 	.word	0x00010002

08007d94 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007da8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007db0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007dc6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de4:	2200      	movs	r2, #0
 8007de6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8007de8:	7cfb      	ldrb	r3, [r7, #19]
 8007dea:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8007dee:	2b21      	cmp	r3, #33	@ 0x21
 8007df0:	d007      	beq.n	8007e02 <I2C_DMAXferCplt+0x6e>
 8007df2:	7cfb      	ldrb	r3, [r7, #19]
 8007df4:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8007df8:	2b22      	cmp	r3, #34	@ 0x22
 8007dfa:	d131      	bne.n	8007e60 <I2C_DMAXferCplt+0xcc>
 8007dfc:	7cbb      	ldrb	r3, [r7, #18]
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	d12e      	bne.n	8007e60 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e10:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	2200      	movs	r2, #0
 8007e16:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007e18:	7cfb      	ldrb	r3, [r7, #19]
 8007e1a:	2b29      	cmp	r3, #41	@ 0x29
 8007e1c:	d10a      	bne.n	8007e34 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2221      	movs	r2, #33	@ 0x21
 8007e22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	2228      	movs	r2, #40	@ 0x28
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e2c:	6978      	ldr	r0, [r7, #20]
 8007e2e:	f7fe fd61 	bl	80068f4 <HAL_I2C_SlaveTxCpltCallback>
 8007e32:	e00c      	b.n	8007e4e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007e34:	7cfb      	ldrb	r3, [r7, #19]
 8007e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e38:	d109      	bne.n	8007e4e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2222      	movs	r2, #34	@ 0x22
 8007e3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2228      	movs	r2, #40	@ 0x28
 8007e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e48:	6978      	ldr	r0, [r7, #20]
 8007e4a:	f7fe fd5d 	bl	8006908 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007e5c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007e5e:	e074      	b.n	8007f4a <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d06e      	beq.n	8007f4a <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d107      	bne.n	8007e86 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e84:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007e94:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e9c:	d009      	beq.n	8007eb2 <I2C_DMAXferCplt+0x11e>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2b08      	cmp	r3, #8
 8007ea2:	d006      	beq.n	8007eb2 <I2C_DMAXferCplt+0x11e>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007eaa:	d002      	beq.n	8007eb2 <I2C_DMAXferCplt+0x11e>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2b20      	cmp	r3, #32
 8007eb0:	d107      	bne.n	8007ec2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ec0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007ed0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ee0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d003      	beq.n	8007ef8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8007ef0:	6978      	ldr	r0, [r7, #20]
 8007ef2:	f7fa fee5 	bl	8002cc0 <HAL_I2C_ErrorCallback>
}
 8007ef6:	e028      	b.n	8007f4a <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2220      	movs	r2, #32
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b40      	cmp	r3, #64	@ 0x40
 8007f0a:	d10a      	bne.n	8007f22 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	2200      	movs	r2, #0
 8007f18:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007f1a:	6978      	ldr	r0, [r7, #20]
 8007f1c:	f7fe fd20 	bl	8006960 <HAL_I2C_MemRxCpltCallback>
}
 8007f20:	e013      	b.n	8007f4a <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2b08      	cmp	r3, #8
 8007f2e:	d002      	beq.n	8007f36 <I2C_DMAXferCplt+0x1a2>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2b20      	cmp	r3, #32
 8007f34:	d103      	bne.n	8007f3e <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f3c:	e002      	b.n	8007f44 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2212      	movs	r2, #18
 8007f42:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007f44:	6978      	ldr	r0, [r7, #20]
 8007f46:	f7fa fe85 	bl	8002c54 <HAL_I2C_MasterRxCpltCallback>
}
 8007f4a:	bf00      	nop
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d003      	beq.n	8007f80 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7fd fb73 	bl	800566c <HAL_DMA_GetError>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d01b      	beq.n	8007fc4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f9a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2220      	movs	r2, #32
 8007fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb6:	f043 0210 	orr.w	r2, r3, #16
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f7fa fe7e 	bl	8002cc0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007fc4:	bf00      	nop
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fdc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fe4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007fe6:	4b4b      	ldr	r3, [pc, #300]	@ (8008114 <I2C_DMAAbort+0x148>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	08db      	lsrs	r3, r3, #3
 8007fec:	4a4a      	ldr	r2, [pc, #296]	@ (8008118 <I2C_DMAAbort+0x14c>)
 8007fee:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff2:	0a1a      	lsrs	r2, r3, #8
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	00da      	lsls	r2, r3, #3
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d106      	bne.n	8008014 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800800a:	f043 0220 	orr.w	r2, r3, #32
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8008012:	e00a      	b.n	800802a <I2C_DMAAbort+0x5e>
    }
    count--;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	3b01      	subs	r3, #1
 8008018:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008028:	d0ea      	beq.n	8008000 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008036:	2200      	movs	r2, #0
 8008038:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008046:	2200      	movs	r2, #0
 8008048:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008058:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2200      	movs	r2, #0
 800805e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008064:	2b00      	cmp	r3, #0
 8008066:	d003      	beq.n	8008070 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800806c:	2200      	movs	r2, #0
 800806e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008074:	2b00      	cmp	r3, #0
 8008076:	d003      	beq.n	8008080 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807c:	2200      	movs	r2, #0
 800807e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f022 0201 	bic.w	r2, r2, #1
 800808e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b60      	cmp	r3, #96	@ 0x60
 800809a:	d10e      	bne.n	80080ba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	2220      	movs	r2, #32
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	2200      	movs	r2, #0
 80080b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80080b2:	6978      	ldr	r0, [r7, #20]
 80080b4:	f7fe fc5e 	bl	8006974 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80080b8:	e027      	b.n	800810a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80080ba:	7cfb      	ldrb	r3, [r7, #19]
 80080bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80080c0:	2b28      	cmp	r3, #40	@ 0x28
 80080c2:	d117      	bne.n	80080f4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f042 0201 	orr.w	r2, r2, #1
 80080d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80080e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2200      	movs	r2, #0
 80080e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2228      	movs	r2, #40	@ 0x28
 80080ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80080f2:	e007      	b.n	8008104 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008104:	6978      	ldr	r0, [r7, #20]
 8008106:	f7fa fddb 	bl	8002cc0 <HAL_I2C_ErrorCallback>
}
 800810a:	bf00      	nop
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20000048 	.word	0x20000048
 8008118:	14f8b589 	.word	0x14f8b589

0800811c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	4613      	mov	r3, r2
 800812a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800812c:	e048      	b.n	80081c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008134:	d044      	beq.n	80081c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008136:	f7fc fb81 	bl	800483c <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	429a      	cmp	r2, r3
 8008144:	d302      	bcc.n	800814c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d139      	bne.n	80081c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	0c1b      	lsrs	r3, r3, #16
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b01      	cmp	r3, #1
 8008154:	d10d      	bne.n	8008172 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	43da      	mvns	r2, r3
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	4013      	ands	r3, r2
 8008162:	b29b      	uxth	r3, r3
 8008164:	2b00      	cmp	r3, #0
 8008166:	bf0c      	ite	eq
 8008168:	2301      	moveq	r3, #1
 800816a:	2300      	movne	r3, #0
 800816c:	b2db      	uxtb	r3, r3
 800816e:	461a      	mov	r2, r3
 8008170:	e00c      	b.n	800818c <I2C_WaitOnFlagUntilTimeout+0x70>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	43da      	mvns	r2, r3
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	4013      	ands	r3, r2
 800817e:	b29b      	uxth	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	bf0c      	ite	eq
 8008184:	2301      	moveq	r3, #1
 8008186:	2300      	movne	r3, #0
 8008188:	b2db      	uxtb	r3, r3
 800818a:	461a      	mov	r2, r3
 800818c:	79fb      	ldrb	r3, [r7, #7]
 800818e:	429a      	cmp	r2, r3
 8008190:	d116      	bne.n	80081c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2220      	movs	r2, #32
 800819c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ac:	f043 0220 	orr.w	r2, r3, #32
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e023      	b.n	8008208 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	0c1b      	lsrs	r3, r3, #16
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d10d      	bne.n	80081e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	43da      	mvns	r2, r3
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	4013      	ands	r3, r2
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	2b00      	cmp	r3, #0
 80081da:	bf0c      	ite	eq
 80081dc:	2301      	moveq	r3, #1
 80081de:	2300      	movne	r3, #0
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	461a      	mov	r2, r3
 80081e4:	e00c      	b.n	8008200 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	43da      	mvns	r2, r3
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	4013      	ands	r3, r2
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bf0c      	ite	eq
 80081f8:	2301      	moveq	r3, #1
 80081fa:	2300      	movne	r3, #0
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	461a      	mov	r2, r3
 8008200:	79fb      	ldrb	r3, [r7, #7]
 8008202:	429a      	cmp	r2, r3
 8008204:	d093      	beq.n	800812e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800821e:	e071      	b.n	8008304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800822a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800822e:	d123      	bne.n	8008278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800823e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008248:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2220      	movs	r2, #32
 8008254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008264:	f043 0204 	orr.w	r2, r3, #4
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e067      	b.n	8008348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827e:	d041      	beq.n	8008304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008280:	f7fc fadc 	bl	800483c <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	d302      	bcc.n	8008296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d136      	bne.n	8008304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	0c1b      	lsrs	r3, r3, #16
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b01      	cmp	r3, #1
 800829e:	d10c      	bne.n	80082ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	43da      	mvns	r2, r3
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	4013      	ands	r3, r2
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	bf14      	ite	ne
 80082b2:	2301      	movne	r3, #1
 80082b4:	2300      	moveq	r3, #0
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	e00b      	b.n	80082d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	43da      	mvns	r2, r3
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	4013      	ands	r3, r2
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	bf14      	ite	ne
 80082cc:	2301      	movne	r3, #1
 80082ce:	2300      	moveq	r3, #0
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d016      	beq.n	8008304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2220      	movs	r2, #32
 80082e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f0:	f043 0220 	orr.w	r2, r3, #32
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e021      	b.n	8008348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	0c1b      	lsrs	r3, r3, #16
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b01      	cmp	r3, #1
 800830c:	d10c      	bne.n	8008328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	43da      	mvns	r2, r3
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	4013      	ands	r3, r2
 800831a:	b29b      	uxth	r3, r3
 800831c:	2b00      	cmp	r3, #0
 800831e:	bf14      	ite	ne
 8008320:	2301      	movne	r3, #1
 8008322:	2300      	moveq	r3, #0
 8008324:	b2db      	uxtb	r3, r3
 8008326:	e00b      	b.n	8008340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	43da      	mvns	r2, r3
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	4013      	ands	r3, r2
 8008334:	b29b      	uxth	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	bf14      	ite	ne
 800833a:	2301      	movne	r3, #1
 800833c:	2300      	moveq	r3, #0
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	f47f af6d 	bne.w	8008220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800835c:	e034      	b.n	80083c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f000 f8b8 	bl	80084d4 <I2C_IsAcknowledgeFailed>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d001      	beq.n	800836e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e034      	b.n	80083d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008374:	d028      	beq.n	80083c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008376:	f7fc fa61 	bl	800483c <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	429a      	cmp	r2, r3
 8008384:	d302      	bcc.n	800838c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d11d      	bne.n	80083c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008396:	2b80      	cmp	r3, #128	@ 0x80
 8008398:	d016      	beq.n	80083c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b4:	f043 0220 	orr.w	r2, r3, #32
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	e007      	b.n	80083d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083d2:	2b80      	cmp	r3, #128	@ 0x80
 80083d4:	d1c3      	bne.n	800835e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80083ec:	e034      	b.n	8008458 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 f870 	bl	80084d4 <I2C_IsAcknowledgeFailed>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e034      	b.n	8008468 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008404:	d028      	beq.n	8008458 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008406:	f7fc fa19 	bl	800483c <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	68ba      	ldr	r2, [r7, #8]
 8008412:	429a      	cmp	r2, r3
 8008414:	d302      	bcc.n	800841c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d11d      	bne.n	8008458 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	f003 0304 	and.w	r3, r3, #4
 8008426:	2b04      	cmp	r3, #4
 8008428:	d016      	beq.n	8008458 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008444:	f043 0220 	orr.w	r2, r3, #32
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e007      	b.n	8008468 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	695b      	ldr	r3, [r3, #20]
 800845e:	f003 0304 	and.w	r3, r3, #4
 8008462:	2b04      	cmp	r3, #4
 8008464:	d1c3      	bne.n	80083ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008478:	2300      	movs	r3, #0
 800847a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800847c:	4b13      	ldr	r3, [pc, #76]	@ (80084cc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	08db      	lsrs	r3, r3, #3
 8008482:	4a13      	ldr	r2, [pc, #76]	@ (80084d0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008484:	fba2 2303 	umull	r2, r3, r2, r3
 8008488:	0a1a      	lsrs	r2, r3, #8
 800848a:	4613      	mov	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3b01      	subs	r3, #1
 8008496:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d107      	bne.n	80084ae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a2:	f043 0220 	orr.w	r2, r3, #32
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e008      	b.n	80084c0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084bc:	d0e9      	beq.n	8008492 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	20000048 	.word	0x20000048
 80084d0:	14f8b589 	.word	0x14f8b589

080084d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084ea:	d11b      	bne.n	8008524 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80084f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2220      	movs	r2, #32
 8008500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008510:	f043 0204 	orr.w	r2, r3, #4
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e000      	b.n	8008526 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	370c      	adds	r7, #12
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008532:	b480      	push	{r7}
 8008534:	b083      	sub	sp, #12
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008542:	d103      	bne.n	800854c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800854a:	e007      	b.n	800855c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008550:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008554:	d102      	bne.n	800855c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2208      	movs	r2, #8
 800855a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800856e:	4b06      	ldr	r3, [pc, #24]	@ (8008588 <HAL_PWR_EnableBkUpAccess+0x20>)
 8008570:	2201      	movs	r2, #1
 8008572:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008574:	4b05      	ldr	r3, [pc, #20]	@ (800858c <HAL_PWR_EnableBkUpAccess+0x24>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800857a:	687b      	ldr	r3, [r7, #4]
}
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	420e0020 	.word	0x420e0020
 800858c:	40007000 	.word	0x40007000

08008590 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e267      	b.n	8008a72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d075      	beq.n	800869a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80085ae:	4b88      	ldr	r3, [pc, #544]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f003 030c 	and.w	r3, r3, #12
 80085b6:	2b04      	cmp	r3, #4
 80085b8:	d00c      	beq.n	80085d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085ba:	4b85      	ldr	r3, [pc, #532]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80085c2:	2b08      	cmp	r3, #8
 80085c4:	d112      	bne.n	80085ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085c6:	4b82      	ldr	r3, [pc, #520]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085d2:	d10b      	bne.n	80085ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085d4:	4b7e      	ldr	r3, [pc, #504]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d05b      	beq.n	8008698 <HAL_RCC_OscConfig+0x108>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d157      	bne.n	8008698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e242      	b.n	8008a72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085f4:	d106      	bne.n	8008604 <HAL_RCC_OscConfig+0x74>
 80085f6:	4b76      	ldr	r3, [pc, #472]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a75      	ldr	r2, [pc, #468]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 80085fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008600:	6013      	str	r3, [r2, #0]
 8008602:	e01d      	b.n	8008640 <HAL_RCC_OscConfig+0xb0>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800860c:	d10c      	bne.n	8008628 <HAL_RCC_OscConfig+0x98>
 800860e:	4b70      	ldr	r3, [pc, #448]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a6f      	ldr	r2, [pc, #444]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 8008614:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008618:	6013      	str	r3, [r2, #0]
 800861a:	4b6d      	ldr	r3, [pc, #436]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a6c      	ldr	r2, [pc, #432]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 8008620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	e00b      	b.n	8008640 <HAL_RCC_OscConfig+0xb0>
 8008628:	4b69      	ldr	r3, [pc, #420]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a68      	ldr	r2, [pc, #416]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 800862e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	4b66      	ldr	r3, [pc, #408]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a65      	ldr	r2, [pc, #404]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 800863a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800863e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d013      	beq.n	8008670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008648:	f7fc f8f8 	bl	800483c <HAL_GetTick>
 800864c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800864e:	e008      	b.n	8008662 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008650:	f7fc f8f4 	bl	800483c <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	2b64      	cmp	r3, #100	@ 0x64
 800865c:	d901      	bls.n	8008662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e207      	b.n	8008a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008662:	4b5b      	ldr	r3, [pc, #364]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0f0      	beq.n	8008650 <HAL_RCC_OscConfig+0xc0>
 800866e:	e014      	b.n	800869a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008670:	f7fc f8e4 	bl	800483c <HAL_GetTick>
 8008674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008676:	e008      	b.n	800868a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008678:	f7fc f8e0 	bl	800483c <HAL_GetTick>
 800867c:	4602      	mov	r2, r0
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	2b64      	cmp	r3, #100	@ 0x64
 8008684:	d901      	bls.n	800868a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e1f3      	b.n	8008a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800868a:	4b51      	ldr	r3, [pc, #324]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1f0      	bne.n	8008678 <HAL_RCC_OscConfig+0xe8>
 8008696:	e000      	b.n	800869a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0302 	and.w	r3, r3, #2
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d063      	beq.n	800876e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80086a6:	4b4a      	ldr	r3, [pc, #296]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f003 030c 	and.w	r3, r3, #12
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00b      	beq.n	80086ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086b2:	4b47      	ldr	r3, [pc, #284]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80086ba:	2b08      	cmp	r3, #8
 80086bc:	d11c      	bne.n	80086f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086be:	4b44      	ldr	r3, [pc, #272]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d116      	bne.n	80086f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086ca:	4b41      	ldr	r3, [pc, #260]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d005      	beq.n	80086e2 <HAL_RCC_OscConfig+0x152>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d001      	beq.n	80086e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e1c7      	b.n	8008a72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086e2:	4b3b      	ldr	r3, [pc, #236]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	00db      	lsls	r3, r3, #3
 80086f0:	4937      	ldr	r1, [pc, #220]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 80086f2:	4313      	orrs	r3, r2
 80086f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086f6:	e03a      	b.n	800876e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d020      	beq.n	8008742 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008700:	4b34      	ldr	r3, [pc, #208]	@ (80087d4 <HAL_RCC_OscConfig+0x244>)
 8008702:	2201      	movs	r2, #1
 8008704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008706:	f7fc f899 	bl	800483c <HAL_GetTick>
 800870a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800870c:	e008      	b.n	8008720 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800870e:	f7fc f895 	bl	800483c <HAL_GetTick>
 8008712:	4602      	mov	r2, r0
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	2b02      	cmp	r3, #2
 800871a:	d901      	bls.n	8008720 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	e1a8      	b.n	8008a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008720:	4b2b      	ldr	r3, [pc, #172]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	2b00      	cmp	r3, #0
 800872a:	d0f0      	beq.n	800870e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800872c:	4b28      	ldr	r3, [pc, #160]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	00db      	lsls	r3, r3, #3
 800873a:	4925      	ldr	r1, [pc, #148]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 800873c:	4313      	orrs	r3, r2
 800873e:	600b      	str	r3, [r1, #0]
 8008740:	e015      	b.n	800876e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008742:	4b24      	ldr	r3, [pc, #144]	@ (80087d4 <HAL_RCC_OscConfig+0x244>)
 8008744:	2200      	movs	r2, #0
 8008746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008748:	f7fc f878 	bl	800483c <HAL_GetTick>
 800874c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800874e:	e008      	b.n	8008762 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008750:	f7fc f874 	bl	800483c <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	2b02      	cmp	r3, #2
 800875c:	d901      	bls.n	8008762 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e187      	b.n	8008a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008762:	4b1b      	ldr	r3, [pc, #108]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0302 	and.w	r3, r3, #2
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1f0      	bne.n	8008750 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0308 	and.w	r3, r3, #8
 8008776:	2b00      	cmp	r3, #0
 8008778:	d036      	beq.n	80087e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d016      	beq.n	80087b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008782:	4b15      	ldr	r3, [pc, #84]	@ (80087d8 <HAL_RCC_OscConfig+0x248>)
 8008784:	2201      	movs	r2, #1
 8008786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008788:	f7fc f858 	bl	800483c <HAL_GetTick>
 800878c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800878e:	e008      	b.n	80087a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008790:	f7fc f854 	bl	800483c <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	2b02      	cmp	r3, #2
 800879c:	d901      	bls.n	80087a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e167      	b.n	8008a72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087a2:	4b0b      	ldr	r3, [pc, #44]	@ (80087d0 <HAL_RCC_OscConfig+0x240>)
 80087a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0f0      	beq.n	8008790 <HAL_RCC_OscConfig+0x200>
 80087ae:	e01b      	b.n	80087e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087b0:	4b09      	ldr	r3, [pc, #36]	@ (80087d8 <HAL_RCC_OscConfig+0x248>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087b6:	f7fc f841 	bl	800483c <HAL_GetTick>
 80087ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087bc:	e00e      	b.n	80087dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087be:	f7fc f83d 	bl	800483c <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d907      	bls.n	80087dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e150      	b.n	8008a72 <HAL_RCC_OscConfig+0x4e2>
 80087d0:	40023800 	.word	0x40023800
 80087d4:	42470000 	.word	0x42470000
 80087d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087dc:	4b88      	ldr	r3, [pc, #544]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 80087de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087e0:	f003 0302 	and.w	r3, r3, #2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1ea      	bne.n	80087be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0304 	and.w	r3, r3, #4
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 8097 	beq.w	8008924 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087f6:	2300      	movs	r3, #0
 80087f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087fa:	4b81      	ldr	r3, [pc, #516]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 80087fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10f      	bne.n	8008826 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008806:	2300      	movs	r3, #0
 8008808:	60bb      	str	r3, [r7, #8]
 800880a:	4b7d      	ldr	r3, [pc, #500]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 800880c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800880e:	4a7c      	ldr	r2, [pc, #496]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 8008810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008814:	6413      	str	r3, [r2, #64]	@ 0x40
 8008816:	4b7a      	ldr	r3, [pc, #488]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 8008818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800881a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800881e:	60bb      	str	r3, [r7, #8]
 8008820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008822:	2301      	movs	r3, #1
 8008824:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008826:	4b77      	ldr	r3, [pc, #476]	@ (8008a04 <HAL_RCC_OscConfig+0x474>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800882e:	2b00      	cmp	r3, #0
 8008830:	d118      	bne.n	8008864 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008832:	4b74      	ldr	r3, [pc, #464]	@ (8008a04 <HAL_RCC_OscConfig+0x474>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a73      	ldr	r2, [pc, #460]	@ (8008a04 <HAL_RCC_OscConfig+0x474>)
 8008838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800883c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800883e:	f7fb fffd 	bl	800483c <HAL_GetTick>
 8008842:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008844:	e008      	b.n	8008858 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008846:	f7fb fff9 	bl	800483c <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	2b02      	cmp	r3, #2
 8008852:	d901      	bls.n	8008858 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e10c      	b.n	8008a72 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008858:	4b6a      	ldr	r3, [pc, #424]	@ (8008a04 <HAL_RCC_OscConfig+0x474>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0f0      	beq.n	8008846 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d106      	bne.n	800887a <HAL_RCC_OscConfig+0x2ea>
 800886c:	4b64      	ldr	r3, [pc, #400]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 800886e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008870:	4a63      	ldr	r2, [pc, #396]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 8008872:	f043 0301 	orr.w	r3, r3, #1
 8008876:	6713      	str	r3, [r2, #112]	@ 0x70
 8008878:	e01c      	b.n	80088b4 <HAL_RCC_OscConfig+0x324>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	2b05      	cmp	r3, #5
 8008880:	d10c      	bne.n	800889c <HAL_RCC_OscConfig+0x30c>
 8008882:	4b5f      	ldr	r3, [pc, #380]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 8008884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008886:	4a5e      	ldr	r2, [pc, #376]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 8008888:	f043 0304 	orr.w	r3, r3, #4
 800888c:	6713      	str	r3, [r2, #112]	@ 0x70
 800888e:	4b5c      	ldr	r3, [pc, #368]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 8008890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008892:	4a5b      	ldr	r2, [pc, #364]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 8008894:	f043 0301 	orr.w	r3, r3, #1
 8008898:	6713      	str	r3, [r2, #112]	@ 0x70
 800889a:	e00b      	b.n	80088b4 <HAL_RCC_OscConfig+0x324>
 800889c:	4b58      	ldr	r3, [pc, #352]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 800889e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088a0:	4a57      	ldr	r2, [pc, #348]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 80088a2:	f023 0301 	bic.w	r3, r3, #1
 80088a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80088a8:	4b55      	ldr	r3, [pc, #340]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 80088aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088ac:	4a54      	ldr	r2, [pc, #336]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 80088ae:	f023 0304 	bic.w	r3, r3, #4
 80088b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d015      	beq.n	80088e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088bc:	f7fb ffbe 	bl	800483c <HAL_GetTick>
 80088c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088c2:	e00a      	b.n	80088da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088c4:	f7fb ffba 	bl	800483c <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d901      	bls.n	80088da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e0cb      	b.n	8008a72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088da:	4b49      	ldr	r3, [pc, #292]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 80088dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d0ee      	beq.n	80088c4 <HAL_RCC_OscConfig+0x334>
 80088e6:	e014      	b.n	8008912 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088e8:	f7fb ffa8 	bl	800483c <HAL_GetTick>
 80088ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088ee:	e00a      	b.n	8008906 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088f0:	f7fb ffa4 	bl	800483c <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088fe:	4293      	cmp	r3, r2
 8008900:	d901      	bls.n	8008906 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e0b5      	b.n	8008a72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008906:	4b3e      	ldr	r3, [pc, #248]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 8008908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800890a:	f003 0302 	and.w	r3, r3, #2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1ee      	bne.n	80088f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d105      	bne.n	8008924 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008918:	4b39      	ldr	r3, [pc, #228]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 800891a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800891c:	4a38      	ldr	r2, [pc, #224]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 800891e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008922:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 80a1 	beq.w	8008a70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800892e:	4b34      	ldr	r3, [pc, #208]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f003 030c 	and.w	r3, r3, #12
 8008936:	2b08      	cmp	r3, #8
 8008938:	d05c      	beq.n	80089f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	2b02      	cmp	r3, #2
 8008940:	d141      	bne.n	80089c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008942:	4b31      	ldr	r3, [pc, #196]	@ (8008a08 <HAL_RCC_OscConfig+0x478>)
 8008944:	2200      	movs	r2, #0
 8008946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008948:	f7fb ff78 	bl	800483c <HAL_GetTick>
 800894c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800894e:	e008      	b.n	8008962 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008950:	f7fb ff74 	bl	800483c <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	2b02      	cmp	r3, #2
 800895c:	d901      	bls.n	8008962 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e087      	b.n	8008a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008962:	4b27      	ldr	r3, [pc, #156]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1f0      	bne.n	8008950 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	69da      	ldr	r2, [r3, #28]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	431a      	orrs	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897c:	019b      	lsls	r3, r3, #6
 800897e:	431a      	orrs	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008984:	085b      	lsrs	r3, r3, #1
 8008986:	3b01      	subs	r3, #1
 8008988:	041b      	lsls	r3, r3, #16
 800898a:	431a      	orrs	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008990:	061b      	lsls	r3, r3, #24
 8008992:	491b      	ldr	r1, [pc, #108]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 8008994:	4313      	orrs	r3, r2
 8008996:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008998:	4b1b      	ldr	r3, [pc, #108]	@ (8008a08 <HAL_RCC_OscConfig+0x478>)
 800899a:	2201      	movs	r2, #1
 800899c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800899e:	f7fb ff4d 	bl	800483c <HAL_GetTick>
 80089a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089a4:	e008      	b.n	80089b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089a6:	f7fb ff49 	bl	800483c <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d901      	bls.n	80089b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e05c      	b.n	8008a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089b8:	4b11      	ldr	r3, [pc, #68]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d0f0      	beq.n	80089a6 <HAL_RCC_OscConfig+0x416>
 80089c4:	e054      	b.n	8008a70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089c6:	4b10      	ldr	r3, [pc, #64]	@ (8008a08 <HAL_RCC_OscConfig+0x478>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089cc:	f7fb ff36 	bl	800483c <HAL_GetTick>
 80089d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089d2:	e008      	b.n	80089e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089d4:	f7fb ff32 	bl	800483c <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d901      	bls.n	80089e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e045      	b.n	8008a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089e6:	4b06      	ldr	r3, [pc, #24]	@ (8008a00 <HAL_RCC_OscConfig+0x470>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1f0      	bne.n	80089d4 <HAL_RCC_OscConfig+0x444>
 80089f2:	e03d      	b.n	8008a70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d107      	bne.n	8008a0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e038      	b.n	8008a72 <HAL_RCC_OscConfig+0x4e2>
 8008a00:	40023800 	.word	0x40023800
 8008a04:	40007000 	.word	0x40007000
 8008a08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8008a7c <HAL_RCC_OscConfig+0x4ec>)
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d028      	beq.n	8008a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d121      	bne.n	8008a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d11a      	bne.n	8008a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008a42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d111      	bne.n	8008a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a52:	085b      	lsrs	r3, r3, #1
 8008a54:	3b01      	subs	r3, #1
 8008a56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d107      	bne.n	8008a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d001      	beq.n	8008a70 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e000      	b.n	8008a72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3718      	adds	r7, #24
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	40023800 	.word	0x40023800

08008a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d101      	bne.n	8008a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e0cc      	b.n	8008c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a94:	4b68      	ldr	r3, [pc, #416]	@ (8008c38 <HAL_RCC_ClockConfig+0x1b8>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0307 	and.w	r3, r3, #7
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d90c      	bls.n	8008abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008aa2:	4b65      	ldr	r3, [pc, #404]	@ (8008c38 <HAL_RCC_ClockConfig+0x1b8>)
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	b2d2      	uxtb	r2, r2
 8008aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aaa:	4b63      	ldr	r3, [pc, #396]	@ (8008c38 <HAL_RCC_ClockConfig+0x1b8>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0307 	and.w	r3, r3, #7
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d001      	beq.n	8008abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e0b8      	b.n	8008c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d020      	beq.n	8008b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 0304 	and.w	r3, r3, #4
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d005      	beq.n	8008ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ad4:	4b59      	ldr	r3, [pc, #356]	@ (8008c3c <HAL_RCC_ClockConfig+0x1bc>)
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	4a58      	ldr	r2, [pc, #352]	@ (8008c3c <HAL_RCC_ClockConfig+0x1bc>)
 8008ada:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008ade:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0308 	and.w	r3, r3, #8
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d005      	beq.n	8008af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008aec:	4b53      	ldr	r3, [pc, #332]	@ (8008c3c <HAL_RCC_ClockConfig+0x1bc>)
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	4a52      	ldr	r2, [pc, #328]	@ (8008c3c <HAL_RCC_ClockConfig+0x1bc>)
 8008af2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008af8:	4b50      	ldr	r3, [pc, #320]	@ (8008c3c <HAL_RCC_ClockConfig+0x1bc>)
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	494d      	ldr	r1, [pc, #308]	@ (8008c3c <HAL_RCC_ClockConfig+0x1bc>)
 8008b06:	4313      	orrs	r3, r2
 8008b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d044      	beq.n	8008ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d107      	bne.n	8008b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b1e:	4b47      	ldr	r3, [pc, #284]	@ (8008c3c <HAL_RCC_ClockConfig+0x1bc>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d119      	bne.n	8008b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e07f      	b.n	8008c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d003      	beq.n	8008b3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b3a:	2b03      	cmp	r3, #3
 8008b3c:	d107      	bne.n	8008b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b3e:	4b3f      	ldr	r3, [pc, #252]	@ (8008c3c <HAL_RCC_ClockConfig+0x1bc>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d109      	bne.n	8008b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e06f      	b.n	8008c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8008c3c <HAL_RCC_ClockConfig+0x1bc>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0302 	and.w	r3, r3, #2
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e067      	b.n	8008c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b5e:	4b37      	ldr	r3, [pc, #220]	@ (8008c3c <HAL_RCC_ClockConfig+0x1bc>)
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	f023 0203 	bic.w	r2, r3, #3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	4934      	ldr	r1, [pc, #208]	@ (8008c3c <HAL_RCC_ClockConfig+0x1bc>)
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b70:	f7fb fe64 	bl	800483c <HAL_GetTick>
 8008b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b76:	e00a      	b.n	8008b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b78:	f7fb fe60 	bl	800483c <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d901      	bls.n	8008b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e04f      	b.n	8008c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b8e:	4b2b      	ldr	r3, [pc, #172]	@ (8008c3c <HAL_RCC_ClockConfig+0x1bc>)
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f003 020c 	and.w	r2, r3, #12
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d1eb      	bne.n	8008b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ba0:	4b25      	ldr	r3, [pc, #148]	@ (8008c38 <HAL_RCC_ClockConfig+0x1b8>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0307 	and.w	r3, r3, #7
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d20c      	bcs.n	8008bc8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bae:	4b22      	ldr	r3, [pc, #136]	@ (8008c38 <HAL_RCC_ClockConfig+0x1b8>)
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	b2d2      	uxtb	r2, r2
 8008bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bb6:	4b20      	ldr	r3, [pc, #128]	@ (8008c38 <HAL_RCC_ClockConfig+0x1b8>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 0307 	and.w	r3, r3, #7
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d001      	beq.n	8008bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e032      	b.n	8008c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0304 	and.w	r3, r3, #4
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d008      	beq.n	8008be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bd4:	4b19      	ldr	r3, [pc, #100]	@ (8008c3c <HAL_RCC_ClockConfig+0x1bc>)
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	4916      	ldr	r1, [pc, #88]	@ (8008c3c <HAL_RCC_ClockConfig+0x1bc>)
 8008be2:	4313      	orrs	r3, r2
 8008be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0308 	and.w	r3, r3, #8
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d009      	beq.n	8008c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008bf2:	4b12      	ldr	r3, [pc, #72]	@ (8008c3c <HAL_RCC_ClockConfig+0x1bc>)
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	00db      	lsls	r3, r3, #3
 8008c00:	490e      	ldr	r1, [pc, #56]	@ (8008c3c <HAL_RCC_ClockConfig+0x1bc>)
 8008c02:	4313      	orrs	r3, r2
 8008c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008c06:	f000 f821 	bl	8008c4c <HAL_RCC_GetSysClockFreq>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008c3c <HAL_RCC_ClockConfig+0x1bc>)
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	091b      	lsrs	r3, r3, #4
 8008c12:	f003 030f 	and.w	r3, r3, #15
 8008c16:	490a      	ldr	r1, [pc, #40]	@ (8008c40 <HAL_RCC_ClockConfig+0x1c0>)
 8008c18:	5ccb      	ldrb	r3, [r1, r3]
 8008c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c1e:	4a09      	ldr	r2, [pc, #36]	@ (8008c44 <HAL_RCC_ClockConfig+0x1c4>)
 8008c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008c22:	4b09      	ldr	r3, [pc, #36]	@ (8008c48 <HAL_RCC_ClockConfig+0x1c8>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fb fdc4 	bl	80047b4 <HAL_InitTick>

  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	40023c00 	.word	0x40023c00
 8008c3c:	40023800 	.word	0x40023800
 8008c40:	0800c598 	.word	0x0800c598
 8008c44:	20000048 	.word	0x20000048
 8008c48:	2000004c 	.word	0x2000004c

08008c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c50:	b090      	sub	sp, #64	@ 0x40
 8008c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008c60:	2300      	movs	r3, #0
 8008c62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c64:	4b59      	ldr	r3, [pc, #356]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	f003 030c 	and.w	r3, r3, #12
 8008c6c:	2b08      	cmp	r3, #8
 8008c6e:	d00d      	beq.n	8008c8c <HAL_RCC_GetSysClockFreq+0x40>
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	f200 80a1 	bhi.w	8008db8 <HAL_RCC_GetSysClockFreq+0x16c>
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <HAL_RCC_GetSysClockFreq+0x34>
 8008c7a:	2b04      	cmp	r3, #4
 8008c7c:	d003      	beq.n	8008c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8008c7e:	e09b      	b.n	8008db8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c80:	4b53      	ldr	r3, [pc, #332]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008c82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008c84:	e09b      	b.n	8008dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c86:	4b53      	ldr	r3, [pc, #332]	@ (8008dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008c88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008c8a:	e098      	b.n	8008dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c8c:	4b4f      	ldr	r3, [pc, #316]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c96:	4b4d      	ldr	r3, [pc, #308]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d028      	beq.n	8008cf4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	099b      	lsrs	r3, r3, #6
 8008ca8:	2200      	movs	r2, #0
 8008caa:	623b      	str	r3, [r7, #32]
 8008cac:	627a      	str	r2, [r7, #36]	@ 0x24
 8008cae:	6a3b      	ldr	r3, [r7, #32]
 8008cb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	4b47      	ldr	r3, [pc, #284]	@ (8008dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008cb8:	fb03 f201 	mul.w	r2, r3, r1
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	fb00 f303 	mul.w	r3, r0, r3
 8008cc2:	4413      	add	r3, r2
 8008cc4:	4a43      	ldr	r2, [pc, #268]	@ (8008dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008cc6:	fba0 1202 	umull	r1, r2, r0, r2
 8008cca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ccc:	460a      	mov	r2, r1
 8008cce:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008cd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cd2:	4413      	add	r3, r2
 8008cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd8:	2200      	movs	r2, #0
 8008cda:	61bb      	str	r3, [r7, #24]
 8008cdc:	61fa      	str	r2, [r7, #28]
 8008cde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ce2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008ce6:	f7f7 facb 	bl	8000280 <__aeabi_uldivmod>
 8008cea:	4602      	mov	r2, r0
 8008cec:	460b      	mov	r3, r1
 8008cee:	4613      	mov	r3, r2
 8008cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cf2:	e053      	b.n	8008d9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cf4:	4b35      	ldr	r3, [pc, #212]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	099b      	lsrs	r3, r3, #6
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	613b      	str	r3, [r7, #16]
 8008cfe:	617a      	str	r2, [r7, #20]
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008d06:	f04f 0b00 	mov.w	fp, #0
 8008d0a:	4652      	mov	r2, sl
 8008d0c:	465b      	mov	r3, fp
 8008d0e:	f04f 0000 	mov.w	r0, #0
 8008d12:	f04f 0100 	mov.w	r1, #0
 8008d16:	0159      	lsls	r1, r3, #5
 8008d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d1c:	0150      	lsls	r0, r2, #5
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	ebb2 080a 	subs.w	r8, r2, sl
 8008d26:	eb63 090b 	sbc.w	r9, r3, fp
 8008d2a:	f04f 0200 	mov.w	r2, #0
 8008d2e:	f04f 0300 	mov.w	r3, #0
 8008d32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008d36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008d3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008d3e:	ebb2 0408 	subs.w	r4, r2, r8
 8008d42:	eb63 0509 	sbc.w	r5, r3, r9
 8008d46:	f04f 0200 	mov.w	r2, #0
 8008d4a:	f04f 0300 	mov.w	r3, #0
 8008d4e:	00eb      	lsls	r3, r5, #3
 8008d50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d54:	00e2      	lsls	r2, r4, #3
 8008d56:	4614      	mov	r4, r2
 8008d58:	461d      	mov	r5, r3
 8008d5a:	eb14 030a 	adds.w	r3, r4, sl
 8008d5e:	603b      	str	r3, [r7, #0]
 8008d60:	eb45 030b 	adc.w	r3, r5, fp
 8008d64:	607b      	str	r3, [r7, #4]
 8008d66:	f04f 0200 	mov.w	r2, #0
 8008d6a:	f04f 0300 	mov.w	r3, #0
 8008d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d72:	4629      	mov	r1, r5
 8008d74:	028b      	lsls	r3, r1, #10
 8008d76:	4621      	mov	r1, r4
 8008d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	028a      	lsls	r2, r1, #10
 8008d80:	4610      	mov	r0, r2
 8008d82:	4619      	mov	r1, r3
 8008d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d86:	2200      	movs	r2, #0
 8008d88:	60bb      	str	r3, [r7, #8]
 8008d8a:	60fa      	str	r2, [r7, #12]
 8008d8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d90:	f7f7 fa76 	bl	8000280 <__aeabi_uldivmod>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	4613      	mov	r3, r2
 8008d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	0c1b      	lsrs	r3, r3, #16
 8008da2:	f003 0303 	and.w	r3, r3, #3
 8008da6:	3301      	adds	r3, #1
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008dac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008db4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008db6:	e002      	b.n	8008dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008db8:	4b05      	ldr	r3, [pc, #20]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008dba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3740      	adds	r7, #64	@ 0x40
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dca:	bf00      	nop
 8008dcc:	40023800 	.word	0x40023800
 8008dd0:	00f42400 	.word	0x00f42400
 8008dd4:	017d7840 	.word	0x017d7840

08008dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ddc:	4b03      	ldr	r3, [pc, #12]	@ (8008dec <HAL_RCC_GetHCLKFreq+0x14>)
 8008dde:	681b      	ldr	r3, [r3, #0]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	20000048 	.word	0x20000048

08008df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008df4:	f7ff fff0 	bl	8008dd8 <HAL_RCC_GetHCLKFreq>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	4b05      	ldr	r3, [pc, #20]	@ (8008e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	0a9b      	lsrs	r3, r3, #10
 8008e00:	f003 0307 	and.w	r3, r3, #7
 8008e04:	4903      	ldr	r1, [pc, #12]	@ (8008e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e06:	5ccb      	ldrb	r3, [r1, r3]
 8008e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	40023800 	.word	0x40023800
 8008e14:	0800c5a8 	.word	0x0800c5a8

08008e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008e1c:	f7ff ffdc 	bl	8008dd8 <HAL_RCC_GetHCLKFreq>
 8008e20:	4602      	mov	r2, r0
 8008e22:	4b05      	ldr	r3, [pc, #20]	@ (8008e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	0b5b      	lsrs	r3, r3, #13
 8008e28:	f003 0307 	and.w	r3, r3, #7
 8008e2c:	4903      	ldr	r1, [pc, #12]	@ (8008e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e2e:	5ccb      	ldrb	r3, [r1, r3]
 8008e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	40023800 	.word	0x40023800
 8008e3c:	0800c5a8 	.word	0x0800c5a8

08008e40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d105      	bne.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d035      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008e68:	4b67      	ldr	r3, [pc, #412]	@ (8009008 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e6e:	f7fb fce5 	bl	800483c <HAL_GetTick>
 8008e72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008e74:	e008      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008e76:	f7fb fce1 	bl	800483c <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d901      	bls.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e0ba      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008e88:	4b60      	ldr	r3, [pc, #384]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1f0      	bne.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	019a      	lsls	r2, r3, #6
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	071b      	lsls	r3, r3, #28
 8008ea0:	495a      	ldr	r1, [pc, #360]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008ea8:	4b57      	ldr	r3, [pc, #348]	@ (8009008 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008eaa:	2201      	movs	r2, #1
 8008eac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008eae:	f7fb fcc5 	bl	800483c <HAL_GetTick>
 8008eb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008eb4:	e008      	b.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008eb6:	f7fb fcc1 	bl	800483c <HAL_GetTick>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d901      	bls.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e09a      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008ec8:	4b50      	ldr	r3, [pc, #320]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d0f0      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 0302 	and.w	r3, r3, #2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 8083 	beq.w	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60fb      	str	r3, [r7, #12]
 8008ee6:	4b49      	ldr	r3, [pc, #292]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eea:	4a48      	ldr	r2, [pc, #288]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8008ef2:	4b46      	ldr	r3, [pc, #280]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008efa:	60fb      	str	r3, [r7, #12]
 8008efc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008efe:	4b44      	ldr	r3, [pc, #272]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a43      	ldr	r2, [pc, #268]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f0a:	f7fb fc97 	bl	800483c <HAL_GetTick>
 8008f0e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008f10:	e008      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f12:	f7fb fc93 	bl	800483c <HAL_GetTick>
 8008f16:	4602      	mov	r2, r0
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d901      	bls.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e06c      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008f24:	4b3a      	ldr	r3, [pc, #232]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d0f0      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f30:	4b36      	ldr	r3, [pc, #216]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f38:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d02f      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d028      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f58:	4b2e      	ldr	r3, [pc, #184]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f5e:	4b2d      	ldr	r3, [pc, #180]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008f64:	4a29      	ldr	r2, [pc, #164]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008f6a:	4b28      	ldr	r3, [pc, #160]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d114      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008f76:	f7fb fc61 	bl	800483c <HAL_GetTick>
 8008f7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f7c:	e00a      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f7e:	f7fb fc5d 	bl	800483c <HAL_GetTick>
 8008f82:	4602      	mov	r2, r0
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d901      	bls.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e034      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f94:	4b1d      	ldr	r3, [pc, #116]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f98:	f003 0302 	and.w	r3, r3, #2
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d0ee      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fac:	d10d      	bne.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008fae:	4b17      	ldr	r3, [pc, #92]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008fbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fc2:	4912      	ldr	r1, [pc, #72]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	608b      	str	r3, [r1, #8]
 8008fc8:	e005      	b.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008fca:	4b10      	ldr	r3, [pc, #64]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	4a0f      	ldr	r2, [pc, #60]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008fd0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008fd4:	6093      	str	r3, [r2, #8]
 8008fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008fd8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fe2:	490a      	ldr	r1, [pc, #40]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0308 	and.w	r3, r3, #8
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d003      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	7c1a      	ldrb	r2, [r3, #16]
 8008ff8:	4b07      	ldr	r3, [pc, #28]	@ (8009018 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008ffa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	42470068 	.word	0x42470068
 800900c:	40023800 	.word	0x40023800
 8009010:	40007000 	.word	0x40007000
 8009014:	42470e40 	.word	0x42470e40
 8009018:	424711e0 	.word	0x424711e0

0800901c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e073      	b.n	800911a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	7f5b      	ldrb	r3, [r3, #29]
 8009036:	b2db      	uxtb	r3, r3
 8009038:	2b00      	cmp	r3, #0
 800903a:	d105      	bne.n	8009048 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7f9 fd04 	bl	8002a50 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2202      	movs	r2, #2
 800904c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	f003 0310 	and.w	r3, r3, #16
 8009058:	2b10      	cmp	r3, #16
 800905a:	d055      	beq.n	8009108 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	22ca      	movs	r2, #202	@ 0xca
 8009062:	625a      	str	r2, [r3, #36]	@ 0x24
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2253      	movs	r2, #83	@ 0x53
 800906a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fa49 	bl	8009504 <RTC_EnterInitMode>
 8009072:	4603      	mov	r3, r0
 8009074:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009076:	7bfb      	ldrb	r3, [r7, #15]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d12c      	bne.n	80090d6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	6812      	ldr	r2, [r2, #0]
 8009086:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800908a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800908e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6899      	ldr	r1, [r3, #8]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685a      	ldr	r2, [r3, #4]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	431a      	orrs	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	695b      	ldr	r3, [r3, #20]
 80090a4:	431a      	orrs	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	430a      	orrs	r2, r1
 80090ac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	68d2      	ldr	r2, [r2, #12]
 80090b6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6919      	ldr	r1, [r3, #16]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	041a      	lsls	r2, r3, #16
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fa50 	bl	8009572 <RTC_ExitInitMode>
 80090d2:	4603      	mov	r3, r0
 80090d4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d110      	bne.n	80090fe <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80090ea:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	699a      	ldr	r2, [r3, #24]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	430a      	orrs	r2, r1
 80090fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	22ff      	movs	r2, #255	@ 0xff
 8009104:	625a      	str	r2, [r3, #36]	@ 0x24
 8009106:	e001      	b.n	800910c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d102      	bne.n	8009118 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2201      	movs	r2, #1
 8009116:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009118:	7bfb      	ldrb	r3, [r7, #15]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009122:	b590      	push	{r4, r7, lr}
 8009124:	b087      	sub	sp, #28
 8009126:	af00      	add	r7, sp, #0
 8009128:	60f8      	str	r0, [r7, #12]
 800912a:	60b9      	str	r1, [r7, #8]
 800912c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800912e:	2300      	movs	r3, #0
 8009130:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	7f1b      	ldrb	r3, [r3, #28]
 8009136:	2b01      	cmp	r3, #1
 8009138:	d101      	bne.n	800913e <HAL_RTC_SetTime+0x1c>
 800913a:	2302      	movs	r3, #2
 800913c:	e087      	b.n	800924e <HAL_RTC_SetTime+0x12c>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2201      	movs	r2, #1
 8009142:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2202      	movs	r2, #2
 8009148:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d126      	bne.n	800919e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	d102      	bne.n	8009164 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2200      	movs	r2, #0
 8009162:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fa27 	bl	80095bc <RTC_ByteToBcd2>
 800916e:	4603      	mov	r3, r0
 8009170:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	785b      	ldrb	r3, [r3, #1]
 8009176:	4618      	mov	r0, r3
 8009178:	f000 fa20 	bl	80095bc <RTC_ByteToBcd2>
 800917c:	4603      	mov	r3, r0
 800917e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009180:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	789b      	ldrb	r3, [r3, #2]
 8009186:	4618      	mov	r0, r3
 8009188:	f000 fa18 	bl	80095bc <RTC_ByteToBcd2>
 800918c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800918e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	78db      	ldrb	r3, [r3, #3]
 8009196:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009198:	4313      	orrs	r3, r2
 800919a:	617b      	str	r3, [r7, #20]
 800919c:	e018      	b.n	80091d0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d102      	bne.n	80091b2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2200      	movs	r2, #0
 80091b0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	785b      	ldrb	r3, [r3, #1]
 80091bc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80091be:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80091c4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	78db      	ldrb	r3, [r3, #3]
 80091ca:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80091cc:	4313      	orrs	r3, r2
 80091ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	22ca      	movs	r2, #202	@ 0xca
 80091d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2253      	movs	r2, #83	@ 0x53
 80091de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f000 f98f 	bl	8009504 <RTC_EnterInitMode>
 80091e6:	4603      	mov	r3, r0
 80091e8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80091ea:	7cfb      	ldrb	r3, [r7, #19]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d120      	bne.n	8009232 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80091fa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80091fe:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	689a      	ldr	r2, [r3, #8]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800920e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6899      	ldr	r1, [r3, #8]
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	68da      	ldr	r2, [r3, #12]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	431a      	orrs	r2, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	430a      	orrs	r2, r1
 8009226:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f000 f9a2 	bl	8009572 <RTC_ExitInitMode>
 800922e:	4603      	mov	r3, r0
 8009230:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009232:	7cfb      	ldrb	r3, [r7, #19]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d102      	bne.n	800923e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2201      	movs	r2, #1
 800923c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	22ff      	movs	r2, #255	@ 0xff
 8009244:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	771a      	strb	r2, [r3, #28]

  return status;
 800924c:	7cfb      	ldrb	r3, [r7, #19]
}
 800924e:	4618      	mov	r0, r3
 8009250:	371c      	adds	r7, #28
 8009252:	46bd      	mov	sp, r7
 8009254:	bd90      	pop	{r4, r7, pc}

08009256 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b086      	sub	sp, #24
 800925a:	af00      	add	r7, sp, #0
 800925c:	60f8      	str	r0, [r7, #12]
 800925e:	60b9      	str	r1, [r7, #8]
 8009260:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009288:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800928c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	0c1b      	lsrs	r3, r3, #16
 8009292:	b2db      	uxtb	r3, r3
 8009294:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009298:	b2da      	uxtb	r2, r3
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	0a1b      	lsrs	r3, r3, #8
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	0d9b      	lsrs	r3, r3, #22
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	b2da      	uxtb	r2, r3
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d11a      	bne.n	8009308 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 f98e 	bl	80095f8 <RTC_Bcd2ToByte>
 80092dc:	4603      	mov	r3, r0
 80092de:	461a      	mov	r2, r3
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	785b      	ldrb	r3, [r3, #1]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 f985 	bl	80095f8 <RTC_Bcd2ToByte>
 80092ee:	4603      	mov	r3, r0
 80092f0:	461a      	mov	r2, r3
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	789b      	ldrb	r3, [r3, #2]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 f97c 	bl	80095f8 <RTC_Bcd2ToByte>
 8009300:	4603      	mov	r3, r0
 8009302:	461a      	mov	r2, r3
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3718      	adds	r7, #24
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009312:	b590      	push	{r4, r7, lr}
 8009314:	b087      	sub	sp, #28
 8009316:	af00      	add	r7, sp, #0
 8009318:	60f8      	str	r0, [r7, #12]
 800931a:	60b9      	str	r1, [r7, #8]
 800931c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800931e:	2300      	movs	r3, #0
 8009320:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	7f1b      	ldrb	r3, [r3, #28]
 8009326:	2b01      	cmp	r3, #1
 8009328:	d101      	bne.n	800932e <HAL_RTC_SetDate+0x1c>
 800932a:	2302      	movs	r3, #2
 800932c:	e071      	b.n	8009412 <HAL_RTC_SetDate+0x100>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2201      	movs	r2, #1
 8009332:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2202      	movs	r2, #2
 8009338:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10e      	bne.n	800935e <HAL_RTC_SetDate+0x4c>
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	785b      	ldrb	r3, [r3, #1]
 8009344:	f003 0310 	and.w	r3, r3, #16
 8009348:	2b00      	cmp	r3, #0
 800934a:	d008      	beq.n	800935e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	785b      	ldrb	r3, [r3, #1]
 8009350:	f023 0310 	bic.w	r3, r3, #16
 8009354:	b2db      	uxtb	r3, r3
 8009356:	330a      	adds	r3, #10
 8009358:	b2da      	uxtb	r2, r3
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d11c      	bne.n	800939e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	78db      	ldrb	r3, [r3, #3]
 8009368:	4618      	mov	r0, r3
 800936a:	f000 f927 	bl	80095bc <RTC_ByteToBcd2>
 800936e:	4603      	mov	r3, r0
 8009370:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	785b      	ldrb	r3, [r3, #1]
 8009376:	4618      	mov	r0, r3
 8009378:	f000 f920 	bl	80095bc <RTC_ByteToBcd2>
 800937c:	4603      	mov	r3, r0
 800937e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009380:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	789b      	ldrb	r3, [r3, #2]
 8009386:	4618      	mov	r0, r3
 8009388:	f000 f918 	bl	80095bc <RTC_ByteToBcd2>
 800938c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800938e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009398:	4313      	orrs	r3, r2
 800939a:	617b      	str	r3, [r7, #20]
 800939c:	e00e      	b.n	80093bc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	78db      	ldrb	r3, [r3, #3]
 80093a2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	785b      	ldrb	r3, [r3, #1]
 80093a8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80093aa:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80093b0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80093b8:	4313      	orrs	r3, r2
 80093ba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	22ca      	movs	r2, #202	@ 0xca
 80093c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2253      	movs	r2, #83	@ 0x53
 80093ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f000 f899 	bl	8009504 <RTC_EnterInitMode>
 80093d2:	4603      	mov	r3, r0
 80093d4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80093d6:	7cfb      	ldrb	r3, [r7, #19]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10c      	bne.n	80093f6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80093e6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80093ea:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f000 f8c0 	bl	8009572 <RTC_ExitInitMode>
 80093f2:	4603      	mov	r3, r0
 80093f4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80093f6:	7cfb      	ldrb	r3, [r7, #19]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d102      	bne.n	8009402 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2201      	movs	r2, #1
 8009400:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	22ff      	movs	r2, #255	@ 0xff
 8009408:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	771a      	strb	r2, [r3, #28]

  return status;
 8009410:	7cfb      	ldrb	r3, [r7, #19]
}
 8009412:	4618      	mov	r0, r3
 8009414:	371c      	adds	r7, #28
 8009416:	46bd      	mov	sp, r7
 8009418:	bd90      	pop	{r4, r7, pc}

0800941a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b086      	sub	sp, #24
 800941e:	af00      	add	r7, sp, #0
 8009420:	60f8      	str	r0, [r7, #12]
 8009422:	60b9      	str	r1, [r7, #8]
 8009424:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009426:	2300      	movs	r3, #0
 8009428:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009434:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009438:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	0c1b      	lsrs	r3, r3, #16
 800943e:	b2da      	uxtb	r2, r3
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	0a1b      	lsrs	r3, r3, #8
 8009448:	b2db      	uxtb	r3, r3
 800944a:	f003 031f 	and.w	r3, r3, #31
 800944e:	b2da      	uxtb	r2, r3
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	b2db      	uxtb	r3, r3
 8009458:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800945c:	b2da      	uxtb	r2, r3
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	0b5b      	lsrs	r3, r3, #13
 8009466:	b2db      	uxtb	r3, r3
 8009468:	f003 0307 	and.w	r3, r3, #7
 800946c:	b2da      	uxtb	r2, r3
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d11a      	bne.n	80094ae <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	78db      	ldrb	r3, [r3, #3]
 800947c:	4618      	mov	r0, r3
 800947e:	f000 f8bb 	bl	80095f8 <RTC_Bcd2ToByte>
 8009482:	4603      	mov	r3, r0
 8009484:	461a      	mov	r2, r3
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	785b      	ldrb	r3, [r3, #1]
 800948e:	4618      	mov	r0, r3
 8009490:	f000 f8b2 	bl	80095f8 <RTC_Bcd2ToByte>
 8009494:	4603      	mov	r3, r0
 8009496:	461a      	mov	r2, r3
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	789b      	ldrb	r3, [r3, #2]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 f8a9 	bl	80095f8 <RTC_Bcd2ToByte>
 80094a6:	4603      	mov	r3, r0
 80094a8:	461a      	mov	r2, r3
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3718      	adds	r7, #24
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a0d      	ldr	r2, [pc, #52]	@ (8009500 <HAL_RTC_WaitForSynchro+0x48>)
 80094ca:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80094cc:	f7fb f9b6 	bl	800483c <HAL_GetTick>
 80094d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80094d2:	e009      	b.n	80094e8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80094d4:	f7fb f9b2 	bl	800483c <HAL_GetTick>
 80094d8:	4602      	mov	r2, r0
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80094e2:	d901      	bls.n	80094e8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e007      	b.n	80094f8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	f003 0320 	and.w	r3, r3, #32
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d0ee      	beq.n	80094d4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	00013f5f 	.word	0x00013f5f

08009504 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800950c:	2300      	movs	r3, #0
 800950e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009510:	2300      	movs	r3, #0
 8009512:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800951e:	2b00      	cmp	r3, #0
 8009520:	d122      	bne.n	8009568 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68da      	ldr	r2, [r3, #12]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009530:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009532:	f7fb f983 	bl	800483c <HAL_GetTick>
 8009536:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009538:	e00c      	b.n	8009554 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800953a:	f7fb f97f 	bl	800483c <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009548:	d904      	bls.n	8009554 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2204      	movs	r2, #4
 800954e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800955e:	2b00      	cmp	r3, #0
 8009560:	d102      	bne.n	8009568 <RTC_EnterInitMode+0x64>
 8009562:	7bfb      	ldrb	r3, [r7, #15]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d1e8      	bne.n	800953a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009568:	7bfb      	ldrb	r3, [r7, #15]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68da      	ldr	r2, [r3, #12]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800958c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f003 0320 	and.w	r3, r3, #32
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10a      	bne.n	80095b2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7ff ff8b 	bl	80094b8 <HAL_RTC_WaitForSynchro>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d004      	beq.n	80095b2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2204      	movs	r2, #4
 80095ac:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	4603      	mov	r3, r0
 80095c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80095ca:	e005      	b.n	80095d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	3301      	adds	r3, #1
 80095d0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80095d2:	79fb      	ldrb	r3, [r7, #7]
 80095d4:	3b0a      	subs	r3, #10
 80095d6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80095d8:	79fb      	ldrb	r3, [r7, #7]
 80095da:	2b09      	cmp	r3, #9
 80095dc:	d8f6      	bhi.n	80095cc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	011b      	lsls	r3, r3, #4
 80095e4:	b2da      	uxtb	r2, r3
 80095e6:	79fb      	ldrb	r3, [r7, #7]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	b2db      	uxtb	r3, r3
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	4603      	mov	r3, r0
 8009600:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8009602:	2300      	movs	r3, #0
 8009604:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8009606:	79fb      	ldrb	r3, [r7, #7]
 8009608:	091b      	lsrs	r3, r3, #4
 800960a:	b2db      	uxtb	r3, r3
 800960c:	461a      	mov	r2, r3
 800960e:	4613      	mov	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4413      	add	r3, r2
 8009614:	005b      	lsls	r3, r3, #1
 8009616:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	b2da      	uxtb	r2, r3
 800961c:	79fb      	ldrb	r3, [r7, #7]
 800961e:	f003 030f 	and.w	r3, r3, #15
 8009622:	b2db      	uxtb	r3, r3
 8009624:	4413      	add	r3, r2
 8009626:	b2db      	uxtb	r3, r3
}
 8009628:	4618      	mov	r0, r3
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e07b      	b.n	800973e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800964a:	2b00      	cmp	r3, #0
 800964c:	d108      	bne.n	8009660 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009656:	d009      	beq.n	800966c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	61da      	str	r2, [r3, #28]
 800965e:	e005      	b.n	800966c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b00      	cmp	r3, #0
 800967c:	d106      	bne.n	800968c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7fa fb5c 	bl	8003d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2202      	movs	r2, #2
 8009690:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80096b4:	431a      	orrs	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096be:	431a      	orrs	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	f003 0302 	and.w	r3, r3, #2
 80096c8:	431a      	orrs	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	431a      	orrs	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096dc:	431a      	orrs	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096e6:	431a      	orrs	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a1b      	ldr	r3, [r3, #32]
 80096ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096f0:	ea42 0103 	orr.w	r1, r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	430a      	orrs	r2, r1
 8009702:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	0c1b      	lsrs	r3, r3, #16
 800970a:	f003 0104 	and.w	r1, r3, #4
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009712:	f003 0210 	and.w	r2, r3, #16
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69da      	ldr	r2, [r3, #28]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800972c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
	...

08009748 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	4613      	mov	r3, r2
 8009754:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b01      	cmp	r3, #1
 8009760:	d001      	beq.n	8009766 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8009762:	2302      	movs	r3, #2
 8009764:	e097      	b.n	8009896 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d002      	beq.n	8009772 <HAL_SPI_Transmit_DMA+0x2a>
 800976c:	88fb      	ldrh	r3, [r7, #6]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d101      	bne.n	8009776 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e08f      	b.n	8009896 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800977c:	2b01      	cmp	r3, #1
 800977e:	d101      	bne.n	8009784 <HAL_SPI_Transmit_DMA+0x3c>
 8009780:	2302      	movs	r3, #2
 8009782:	e088      	b.n	8009896 <HAL_SPI_Transmit_DMA+0x14e>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2203      	movs	r2, #3
 8009790:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	68ba      	ldr	r2, [r7, #8]
 800979e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	88fa      	ldrh	r2, [r7, #6]
 80097a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	88fa      	ldrh	r2, [r7, #6]
 80097aa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097d2:	d10f      	bne.n	80097f4 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80097f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097f8:	4a29      	ldr	r2, [pc, #164]	@ (80098a0 <HAL_SPI_Transmit_DMA+0x158>)
 80097fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009800:	4a28      	ldr	r2, [pc, #160]	@ (80098a4 <HAL_SPI_Transmit_DMA+0x15c>)
 8009802:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009808:	4a27      	ldr	r2, [pc, #156]	@ (80098a8 <HAL_SPI_Transmit_DMA+0x160>)
 800980a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009810:	2200      	movs	r2, #0
 8009812:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800981c:	4619      	mov	r1, r3
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	330c      	adds	r3, #12
 8009824:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800982a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800982c:	f7fb fd0c 	bl	8005248 <HAL_DMA_Start_IT>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00b      	beq.n	800984e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800983a:	f043 0210 	orr.w	r2, r3, #16
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e023      	b.n	8009896 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009858:	2b40      	cmp	r3, #64	@ 0x40
 800985a:	d007      	beq.n	800986c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800986a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f042 0220 	orr.w	r2, r2, #32
 8009882:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	685a      	ldr	r2, [r3, #4]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f042 0202 	orr.w	r2, r2, #2
 8009892:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	08009b65 	.word	0x08009b65
 80098a4:	08009abd 	.word	0x08009abd
 80098a8:	08009b81 	.word	0x08009b81

080098ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b088      	sub	sp, #32
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10e      	bne.n	80098ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d009      	beq.n	80098ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d004      	beq.n	80098ec <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	4798      	blx	r3
    return;
 80098ea:	e0ce      	b.n	8009a8a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	f003 0302 	and.w	r3, r3, #2
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d009      	beq.n	800990a <HAL_SPI_IRQHandler+0x5e>
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d004      	beq.n	800990a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	4798      	blx	r3
    return;
 8009908:	e0bf      	b.n	8009a8a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	f003 0320 	and.w	r3, r3, #32
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10a      	bne.n	800992a <HAL_SPI_IRQHandler+0x7e>
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800991a:	2b00      	cmp	r3, #0
 800991c:	d105      	bne.n	800992a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 80b0 	beq.w	8009a8a <HAL_SPI_IRQHandler+0x1de>
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	f003 0320 	and.w	r3, r3, #32
 8009930:	2b00      	cmp	r3, #0
 8009932:	f000 80aa 	beq.w	8009a8a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800993c:	2b00      	cmp	r3, #0
 800993e:	d023      	beq.n	8009988 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009946:	b2db      	uxtb	r3, r3
 8009948:	2b03      	cmp	r3, #3
 800994a:	d011      	beq.n	8009970 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009950:	f043 0204 	orr.w	r2, r3, #4
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009958:	2300      	movs	r3, #0
 800995a:	617b      	str	r3, [r7, #20]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	617b      	str	r3, [r7, #20]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	617b      	str	r3, [r7, #20]
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	e00b      	b.n	8009988 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009970:	2300      	movs	r3, #0
 8009972:	613b      	str	r3, [r7, #16]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	613b      	str	r3, [r7, #16]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	613b      	str	r3, [r7, #16]
 8009984:	693b      	ldr	r3, [r7, #16]
        return;
 8009986:	e080      	b.n	8009a8a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	f003 0320 	and.w	r3, r3, #32
 800998e:	2b00      	cmp	r3, #0
 8009990:	d014      	beq.n	80099bc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009996:	f043 0201 	orr.w	r2, r3, #1
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800999e:	2300      	movs	r3, #0
 80099a0:	60fb      	str	r3, [r7, #12]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	60fb      	str	r3, [r7, #12]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099b8:	601a      	str	r2, [r3, #0]
 80099ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00c      	beq.n	80099e0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099ca:	f043 0208 	orr.w	r2, r3, #8
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80099d2:	2300      	movs	r3, #0
 80099d4:	60bb      	str	r3, [r7, #8]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	60bb      	str	r3, [r7, #8]
 80099de:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d04f      	beq.n	8009a88 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80099f6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	f003 0302 	and.w	r3, r3, #2
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d104      	bne.n	8009a14 <HAL_SPI_IRQHandler+0x168>
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	f003 0301 	and.w	r3, r3, #1
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d034      	beq.n	8009a7e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	685a      	ldr	r2, [r3, #4]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f022 0203 	bic.w	r2, r2, #3
 8009a22:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d011      	beq.n	8009a50 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a30:	4a17      	ldr	r2, [pc, #92]	@ (8009a90 <HAL_SPI_IRQHandler+0x1e4>)
 8009a32:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fb fc5d 	bl	80052f8 <HAL_DMA_Abort_IT>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d005      	beq.n	8009a50 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d016      	beq.n	8009a86 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8009a90 <HAL_SPI_IRQHandler+0x1e4>)
 8009a5e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7fb fc47 	bl	80052f8 <HAL_DMA_Abort_IT>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00a      	beq.n	8009a86 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8009a7c:	e003      	b.n	8009a86 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f812 	bl	8009aa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009a84:	e000      	b.n	8009a88 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8009a86:	bf00      	nop
    return;
 8009a88:	bf00      	nop
  }
}
 8009a8a:	3720      	adds	r7, #32
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	08009bc1 	.word	0x08009bc1

08009a94 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ac8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009aca:	f7fa feb7 	bl	800483c <HAL_GetTick>
 8009ace:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ade:	d03b      	beq.n	8009b58 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f022 0220 	bic.w	r2, r2, #32
 8009aee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f022 0202 	bic.w	r2, r2, #2
 8009afe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	2164      	movs	r1, #100	@ 0x64
 8009b04:	6978      	ldr	r0, [r7, #20]
 8009b06:	f000 f8f7 	bl	8009cf8 <SPI_EndRxTxTransaction>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d005      	beq.n	8009b1c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b14:	f043 0220 	orr.w	r2, r3, #32
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10a      	bne.n	8009b3a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b24:	2300      	movs	r3, #0
 8009b26:	60fb      	str	r3, [r7, #12]
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	60fb      	str	r3, [r7, #12]
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	60fb      	str	r3, [r7, #12]
 8009b38:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d003      	beq.n	8009b58 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009b50:	6978      	ldr	r0, [r7, #20]
 8009b52:	f7ff ffa9 	bl	8009aa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009b56:	e002      	b.n	8009b5e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009b58:	6978      	ldr	r0, [r7, #20]
 8009b5a:	f7f7 f85f 	bl	8000c1c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b5e:	3718      	adds	r7, #24
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b70:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f7ff ff8e 	bl	8009a94 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b78:	bf00      	nop
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b8c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	685a      	ldr	r2, [r3, #4]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f022 0203 	bic.w	r2, r2, #3
 8009b9c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ba2:	f043 0210 	orr.w	r2, r3, #16
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f7ff ff78 	bl	8009aa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009bb8:	bf00      	nop
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bcc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f7ff ff64 	bl	8009aa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009be0:	bf00      	nop
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b088      	sub	sp, #32
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	603b      	str	r3, [r7, #0]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009bf8:	f7fa fe20 	bl	800483c <HAL_GetTick>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c00:	1a9b      	subs	r3, r3, r2
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	4413      	add	r3, r2
 8009c06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009c08:	f7fa fe18 	bl	800483c <HAL_GetTick>
 8009c0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009c0e:	4b39      	ldr	r3, [pc, #228]	@ (8009cf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	015b      	lsls	r3, r3, #5
 8009c14:	0d1b      	lsrs	r3, r3, #20
 8009c16:	69fa      	ldr	r2, [r7, #28]
 8009c18:	fb02 f303 	mul.w	r3, r2, r3
 8009c1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c1e:	e054      	b.n	8009cca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c26:	d050      	beq.n	8009cca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c28:	f7fa fe08 	bl	800483c <HAL_GetTick>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	69fa      	ldr	r2, [r7, #28]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d902      	bls.n	8009c3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d13d      	bne.n	8009cba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	685a      	ldr	r2, [r3, #4]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009c4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c56:	d111      	bne.n	8009c7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c60:	d004      	beq.n	8009c6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c6a:	d107      	bne.n	8009c7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c84:	d10f      	bne.n	8009ca6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c94:	601a      	str	r2, [r3, #0]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009ca4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	e017      	b.n	8009cea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d101      	bne.n	8009cc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	689a      	ldr	r2, [r3, #8]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	bf0c      	ite	eq
 8009cda:	2301      	moveq	r3, #1
 8009cdc:	2300      	movne	r3, #0
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	79fb      	ldrb	r3, [r7, #7]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d19b      	bne.n	8009c20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3720      	adds	r7, #32
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	20000048 	.word	0x20000048

08009cf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b088      	sub	sp, #32
 8009cfc:	af02      	add	r7, sp, #8
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	2102      	movs	r1, #2
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f7ff ff6a 	bl	8009be8 <SPI_WaitFlagStateUntilTimeout>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d007      	beq.n	8009d2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d1e:	f043 0220 	orr.w	r2, r3, #32
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e032      	b.n	8009d90 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8009d98 <SPI_EndRxTxTransaction+0xa0>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8009d9c <SPI_EndRxTxTransaction+0xa4>)
 8009d30:	fba2 2303 	umull	r2, r3, r2, r3
 8009d34:	0d5b      	lsrs	r3, r3, #21
 8009d36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009d3a:	fb02 f303 	mul.w	r3, r2, r3
 8009d3e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d48:	d112      	bne.n	8009d70 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	2200      	movs	r2, #0
 8009d52:	2180      	movs	r1, #128	@ 0x80
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f7ff ff47 	bl	8009be8 <SPI_WaitFlagStateUntilTimeout>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d016      	beq.n	8009d8e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d64:	f043 0220 	orr.w	r2, r3, #32
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e00f      	b.n	8009d90 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00a      	beq.n	8009d8c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d86:	2b80      	cmp	r3, #128	@ 0x80
 8009d88:	d0f2      	beq.n	8009d70 <SPI_EndRxTxTransaction+0x78>
 8009d8a:	e000      	b.n	8009d8e <SPI_EndRxTxTransaction+0x96>
        break;
 8009d8c:	bf00      	nop
  }

  return HAL_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3718      	adds	r7, #24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	20000048 	.word	0x20000048
 8009d9c:	165e9f81 	.word	0x165e9f81

08009da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e041      	b.n	8009e36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d106      	bne.n	8009dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f7fa fb3a 	bl	8004440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2202      	movs	r2, #2
 8009dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	3304      	adds	r3, #4
 8009ddc:	4619      	mov	r1, r3
 8009dde:	4610      	mov	r0, r2
 8009de0:	f000 fd86 	bl	800a8f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
	...

08009e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d001      	beq.n	8009e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	e044      	b.n	8009ee2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2202      	movs	r2, #2
 8009e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68da      	ldr	r2, [r3, #12]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f042 0201 	orr.w	r2, r2, #1
 8009e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a1e      	ldr	r2, [pc, #120]	@ (8009ef0 <HAL_TIM_Base_Start_IT+0xb0>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d018      	beq.n	8009eac <HAL_TIM_Base_Start_IT+0x6c>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e82:	d013      	beq.n	8009eac <HAL_TIM_Base_Start_IT+0x6c>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a1a      	ldr	r2, [pc, #104]	@ (8009ef4 <HAL_TIM_Base_Start_IT+0xb4>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d00e      	beq.n	8009eac <HAL_TIM_Base_Start_IT+0x6c>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a19      	ldr	r2, [pc, #100]	@ (8009ef8 <HAL_TIM_Base_Start_IT+0xb8>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d009      	beq.n	8009eac <HAL_TIM_Base_Start_IT+0x6c>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a17      	ldr	r2, [pc, #92]	@ (8009efc <HAL_TIM_Base_Start_IT+0xbc>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d004      	beq.n	8009eac <HAL_TIM_Base_Start_IT+0x6c>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a16      	ldr	r2, [pc, #88]	@ (8009f00 <HAL_TIM_Base_Start_IT+0xc0>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d111      	bne.n	8009ed0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	f003 0307 	and.w	r3, r3, #7
 8009eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2b06      	cmp	r3, #6
 8009ebc:	d010      	beq.n	8009ee0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f042 0201 	orr.w	r2, r2, #1
 8009ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ece:	e007      	b.n	8009ee0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f042 0201 	orr.w	r2, r2, #1
 8009ede:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3714      	adds	r7, #20
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	40010000 	.word	0x40010000
 8009ef4:	40000400 	.word	0x40000400
 8009ef8:	40000800 	.word	0x40000800
 8009efc:	40000c00 	.word	0x40000c00
 8009f00:	40014000 	.word	0x40014000

08009f04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d101      	bne.n	8009f16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	e041      	b.n	8009f9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d106      	bne.n	8009f30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f839 	bl	8009fa2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2202      	movs	r2, #2
 8009f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	3304      	adds	r3, #4
 8009f40:	4619      	mov	r1, r3
 8009f42:	4610      	mov	r0, r2
 8009f44:	f000 fcd4 	bl	800a8f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b083      	sub	sp, #12
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009faa:	bf00      	nop
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
	...

08009fb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d109      	bne.n	8009fdc <HAL_TIM_PWM_Start+0x24>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	bf14      	ite	ne
 8009fd4:	2301      	movne	r3, #1
 8009fd6:	2300      	moveq	r3, #0
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	e022      	b.n	800a022 <HAL_TIM_PWM_Start+0x6a>
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	2b04      	cmp	r3, #4
 8009fe0:	d109      	bne.n	8009ff6 <HAL_TIM_PWM_Start+0x3e>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	bf14      	ite	ne
 8009fee:	2301      	movne	r3, #1
 8009ff0:	2300      	moveq	r3, #0
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	e015      	b.n	800a022 <HAL_TIM_PWM_Start+0x6a>
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	2b08      	cmp	r3, #8
 8009ffa:	d109      	bne.n	800a010 <HAL_TIM_PWM_Start+0x58>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a002:	b2db      	uxtb	r3, r3
 800a004:	2b01      	cmp	r3, #1
 800a006:	bf14      	ite	ne
 800a008:	2301      	movne	r3, #1
 800a00a:	2300      	moveq	r3, #0
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	e008      	b.n	800a022 <HAL_TIM_PWM_Start+0x6a>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a016:	b2db      	uxtb	r3, r3
 800a018:	2b01      	cmp	r3, #1
 800a01a:	bf14      	ite	ne
 800a01c:	2301      	movne	r3, #1
 800a01e:	2300      	moveq	r3, #0
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a026:	2301      	movs	r3, #1
 800a028:	e068      	b.n	800a0fc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d104      	bne.n	800a03a <HAL_TIM_PWM_Start+0x82>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2202      	movs	r2, #2
 800a034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a038:	e013      	b.n	800a062 <HAL_TIM_PWM_Start+0xaa>
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	2b04      	cmp	r3, #4
 800a03e:	d104      	bne.n	800a04a <HAL_TIM_PWM_Start+0x92>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2202      	movs	r2, #2
 800a044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a048:	e00b      	b.n	800a062 <HAL_TIM_PWM_Start+0xaa>
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2b08      	cmp	r3, #8
 800a04e:	d104      	bne.n	800a05a <HAL_TIM_PWM_Start+0xa2>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2202      	movs	r2, #2
 800a054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a058:	e003      	b.n	800a062 <HAL_TIM_PWM_Start+0xaa>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2202      	movs	r2, #2
 800a05e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2201      	movs	r2, #1
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 fef2 	bl	800ae54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a23      	ldr	r2, [pc, #140]	@ (800a104 <HAL_TIM_PWM_Start+0x14c>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d107      	bne.n	800a08a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a088:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a1d      	ldr	r2, [pc, #116]	@ (800a104 <HAL_TIM_PWM_Start+0x14c>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d018      	beq.n	800a0c6 <HAL_TIM_PWM_Start+0x10e>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a09c:	d013      	beq.n	800a0c6 <HAL_TIM_PWM_Start+0x10e>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a19      	ldr	r2, [pc, #100]	@ (800a108 <HAL_TIM_PWM_Start+0x150>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d00e      	beq.n	800a0c6 <HAL_TIM_PWM_Start+0x10e>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a17      	ldr	r2, [pc, #92]	@ (800a10c <HAL_TIM_PWM_Start+0x154>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d009      	beq.n	800a0c6 <HAL_TIM_PWM_Start+0x10e>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a16      	ldr	r2, [pc, #88]	@ (800a110 <HAL_TIM_PWM_Start+0x158>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d004      	beq.n	800a0c6 <HAL_TIM_PWM_Start+0x10e>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a14      	ldr	r2, [pc, #80]	@ (800a114 <HAL_TIM_PWM_Start+0x15c>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d111      	bne.n	800a0ea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f003 0307 	and.w	r3, r3, #7
 800a0d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2b06      	cmp	r3, #6
 800a0d6:	d010      	beq.n	800a0fa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f042 0201 	orr.w	r2, r2, #1
 800a0e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0e8:	e007      	b.n	800a0fa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f042 0201 	orr.w	r2, r2, #1
 800a0f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0fa:	2300      	movs	r3, #0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	40010000 	.word	0x40010000
 800a108:	40000400 	.word	0x40000400
 800a10c:	40000800 	.word	0x40000800
 800a110:	40000c00 	.word	0x40000c00
 800a114:	40014000 	.word	0x40014000

0800a118 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	e097      	b.n	800a25c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b00      	cmp	r3, #0
 800a136:	d106      	bne.n	800a146 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7fa f9bb 	bl	80044bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2202      	movs	r2, #2
 800a14a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	6812      	ldr	r2, [r2, #0]
 800a158:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a15c:	f023 0307 	bic.w	r3, r3, #7
 800a160:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	3304      	adds	r3, #4
 800a16a:	4619      	mov	r1, r3
 800a16c:	4610      	mov	r0, r2
 800a16e:	f000 fbbf 	bl	800a8f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	6a1b      	ldr	r3, [r3, #32]
 800a188:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	4313      	orrs	r3, r2
 800a192:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a19a:	f023 0303 	bic.w	r3, r3, #3
 800a19e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	689a      	ldr	r2, [r3, #8]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	699b      	ldr	r3, [r3, #24]
 800a1a8:	021b      	lsls	r3, r3, #8
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a1b8:	f023 030c 	bic.w	r3, r3, #12
 800a1bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a1c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	68da      	ldr	r2, [r3, #12]
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	69db      	ldr	r3, [r3, #28]
 800a1d2:	021b      	lsls	r3, r3, #8
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	011a      	lsls	r2, r3, #4
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	031b      	lsls	r3, r3, #12
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	693a      	ldr	r2, [r7, #16]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a1f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a1fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	695b      	ldr	r3, [r3, #20]
 800a208:	011b      	lsls	r3, r3, #4
 800a20a:	4313      	orrs	r3, r2
 800a20c:	68fa      	ldr	r2, [r7, #12]
 800a20e:	4313      	orrs	r3, r2
 800a210:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2201      	movs	r2, #1
 800a22e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2201      	movs	r2, #1
 800a23e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3718      	adds	r7, #24
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a274:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a27c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a284:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a28c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d110      	bne.n	800a2b6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a294:	7bfb      	ldrb	r3, [r7, #15]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d102      	bne.n	800a2a0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a29a:	7b7b      	ldrb	r3, [r7, #13]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d001      	beq.n	800a2a4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e089      	b.n	800a3b8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2202      	movs	r2, #2
 800a2a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2202      	movs	r2, #2
 800a2b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2b4:	e031      	b.n	800a31a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	2b04      	cmp	r3, #4
 800a2ba:	d110      	bne.n	800a2de <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2bc:	7bbb      	ldrb	r3, [r7, #14]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d102      	bne.n	800a2c8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a2c2:	7b3b      	ldrb	r3, [r7, #12]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d001      	beq.n	800a2cc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e075      	b.n	800a3b8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2202      	movs	r2, #2
 800a2d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2202      	movs	r2, #2
 800a2d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a2dc:	e01d      	b.n	800a31a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2de:	7bfb      	ldrb	r3, [r7, #15]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d108      	bne.n	800a2f6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2e4:	7bbb      	ldrb	r3, [r7, #14]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d105      	bne.n	800a2f6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2ea:	7b7b      	ldrb	r3, [r7, #13]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d102      	bne.n	800a2f6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a2f0:	7b3b      	ldrb	r3, [r7, #12]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d001      	beq.n	800a2fa <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e05e      	b.n	800a3b8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2202      	movs	r2, #2
 800a2fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2202      	movs	r2, #2
 800a306:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2202      	movs	r2, #2
 800a30e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2202      	movs	r2, #2
 800a316:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d003      	beq.n	800a328 <HAL_TIM_Encoder_Start_IT+0xc4>
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	2b04      	cmp	r3, #4
 800a324:	d010      	beq.n	800a348 <HAL_TIM_Encoder_Start_IT+0xe4>
 800a326:	e01f      	b.n	800a368 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2201      	movs	r2, #1
 800a32e:	2100      	movs	r1, #0
 800a330:	4618      	mov	r0, r3
 800a332:	f000 fd8f 	bl	800ae54 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68da      	ldr	r2, [r3, #12]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f042 0202 	orr.w	r2, r2, #2
 800a344:	60da      	str	r2, [r3, #12]
      break;
 800a346:	e02e      	b.n	800a3a6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2201      	movs	r2, #1
 800a34e:	2104      	movs	r1, #4
 800a350:	4618      	mov	r0, r3
 800a352:	f000 fd7f 	bl	800ae54 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68da      	ldr	r2, [r3, #12]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f042 0204 	orr.w	r2, r2, #4
 800a364:	60da      	str	r2, [r3, #12]
      break;
 800a366:	e01e      	b.n	800a3a6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2201      	movs	r2, #1
 800a36e:	2100      	movs	r1, #0
 800a370:	4618      	mov	r0, r3
 800a372:	f000 fd6f 	bl	800ae54 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2201      	movs	r2, #1
 800a37c:	2104      	movs	r1, #4
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 fd68 	bl	800ae54 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68da      	ldr	r2, [r3, #12]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f042 0202 	orr.w	r2, r2, #2
 800a392:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68da      	ldr	r2, [r3, #12]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f042 0204 	orr.w	r2, r2, #4
 800a3a2:	60da      	str	r2, [r3, #12]
      break;
 800a3a4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f042 0201 	orr.w	r2, r2, #1
 800a3b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	f003 0302 	and.w	r3, r3, #2
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d020      	beq.n	800a424 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f003 0302 	and.w	r3, r3, #2
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d01b      	beq.n	800a424 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f06f 0202 	mvn.w	r2, #2
 800a3f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	f003 0303 	and.w	r3, r3, #3
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f7f8 f836 	bl	800247c <HAL_TIM_IC_CaptureCallback>
 800a410:	e005      	b.n	800a41e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 fa4d 	bl	800a8b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fa54 	bl	800a8c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	f003 0304 	and.w	r3, r3, #4
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d020      	beq.n	800a470 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f003 0304 	and.w	r3, r3, #4
 800a434:	2b00      	cmp	r3, #0
 800a436:	d01b      	beq.n	800a470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f06f 0204 	mvn.w	r2, #4
 800a440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2202      	movs	r2, #2
 800a446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	699b      	ldr	r3, [r3, #24]
 800a44e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a452:	2b00      	cmp	r3, #0
 800a454:	d003      	beq.n	800a45e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7f8 f810 	bl	800247c <HAL_TIM_IC_CaptureCallback>
 800a45c:	e005      	b.n	800a46a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fa27 	bl	800a8b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fa2e 	bl	800a8c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	f003 0308 	and.w	r3, r3, #8
 800a476:	2b00      	cmp	r3, #0
 800a478:	d020      	beq.n	800a4bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f003 0308 	and.w	r3, r3, #8
 800a480:	2b00      	cmp	r3, #0
 800a482:	d01b      	beq.n	800a4bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f06f 0208 	mvn.w	r2, #8
 800a48c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2204      	movs	r2, #4
 800a492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	69db      	ldr	r3, [r3, #28]
 800a49a:	f003 0303 	and.w	r3, r3, #3
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7f7 ffea 	bl	800247c <HAL_TIM_IC_CaptureCallback>
 800a4a8:	e005      	b.n	800a4b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fa01 	bl	800a8b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 fa08 	bl	800a8c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	f003 0310 	and.w	r3, r3, #16
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d020      	beq.n	800a508 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f003 0310 	and.w	r3, r3, #16
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d01b      	beq.n	800a508 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f06f 0210 	mvn.w	r2, #16
 800a4d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2208      	movs	r2, #8
 800a4de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	69db      	ldr	r3, [r3, #28]
 800a4e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d003      	beq.n	800a4f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7f7 ffc4 	bl	800247c <HAL_TIM_IC_CaptureCallback>
 800a4f4:	e005      	b.n	800a502 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f9db 	bl	800a8b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 f9e2 	bl	800a8c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	f003 0301 	and.w	r3, r3, #1
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00c      	beq.n	800a52c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f003 0301 	and.w	r3, r3, #1
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d007      	beq.n	800a52c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f06f 0201 	mvn.w	r2, #1
 800a524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f7f6 fa18 	bl	800095c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00c      	beq.n	800a550 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d007      	beq.n	800a550 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 fd72 	bl	800b034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00c      	beq.n	800a574 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a560:	2b00      	cmp	r3, #0
 800a562:	d007      	beq.n	800a574 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a56c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f9b3 	bl	800a8da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	f003 0320 	and.w	r3, r3, #32
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00c      	beq.n	800a598 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f003 0320 	and.w	r3, r3, #32
 800a584:	2b00      	cmp	r3, #0
 800a586:	d007      	beq.n	800a598 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f06f 0220 	mvn.w	r2, #32
 800a590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 fd44 	bl	800b020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a598:	bf00      	nop
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d101      	bne.n	800a5be <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	e0ae      	b.n	800a71c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2b0c      	cmp	r3, #12
 800a5ca:	f200 809f 	bhi.w	800a70c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a5ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a5d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d4:	0800a609 	.word	0x0800a609
 800a5d8:	0800a70d 	.word	0x0800a70d
 800a5dc:	0800a70d 	.word	0x0800a70d
 800a5e0:	0800a70d 	.word	0x0800a70d
 800a5e4:	0800a649 	.word	0x0800a649
 800a5e8:	0800a70d 	.word	0x0800a70d
 800a5ec:	0800a70d 	.word	0x0800a70d
 800a5f0:	0800a70d 	.word	0x0800a70d
 800a5f4:	0800a68b 	.word	0x0800a68b
 800a5f8:	0800a70d 	.word	0x0800a70d
 800a5fc:	0800a70d 	.word	0x0800a70d
 800a600:	0800a70d 	.word	0x0800a70d
 800a604:	0800a6cb 	.word	0x0800a6cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68b9      	ldr	r1, [r7, #8]
 800a60e:	4618      	mov	r0, r3
 800a610:	f000 f9fa 	bl	800aa08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	699a      	ldr	r2, [r3, #24]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f042 0208 	orr.w	r2, r2, #8
 800a622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	699a      	ldr	r2, [r3, #24]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f022 0204 	bic.w	r2, r2, #4
 800a632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	6999      	ldr	r1, [r3, #24]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	691a      	ldr	r2, [r3, #16]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	619a      	str	r2, [r3, #24]
      break;
 800a646:	e064      	b.n	800a712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68b9      	ldr	r1, [r7, #8]
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 fa40 	bl	800aad4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	699a      	ldr	r2, [r3, #24]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	699a      	ldr	r2, [r3, #24]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6999      	ldr	r1, [r3, #24]
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	021a      	lsls	r2, r3, #8
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	430a      	orrs	r2, r1
 800a686:	619a      	str	r2, [r3, #24]
      break;
 800a688:	e043      	b.n	800a712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68b9      	ldr	r1, [r7, #8]
 800a690:	4618      	mov	r0, r3
 800a692:	f000 fa8b 	bl	800abac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	69da      	ldr	r2, [r3, #28]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f042 0208 	orr.w	r2, r2, #8
 800a6a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	69da      	ldr	r2, [r3, #28]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f022 0204 	bic.w	r2, r2, #4
 800a6b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	69d9      	ldr	r1, [r3, #28]
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	691a      	ldr	r2, [r3, #16]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	430a      	orrs	r2, r1
 800a6c6:	61da      	str	r2, [r3, #28]
      break;
 800a6c8:	e023      	b.n	800a712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	68b9      	ldr	r1, [r7, #8]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f000 fad5 	bl	800ac80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	69da      	ldr	r2, [r3, #28]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	69da      	ldr	r2, [r3, #28]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	69d9      	ldr	r1, [r3, #28]
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	021a      	lsls	r2, r3, #8
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	430a      	orrs	r2, r1
 800a708:	61da      	str	r2, [r3, #28]
      break;
 800a70a:	e002      	b.n	800a712 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	75fb      	strb	r3, [r7, #23]
      break;
 800a710:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3718      	adds	r7, #24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d101      	bne.n	800a740 <HAL_TIM_ConfigClockSource+0x1c>
 800a73c:	2302      	movs	r3, #2
 800a73e:	e0b4      	b.n	800a8aa <HAL_TIM_ConfigClockSource+0x186>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2202      	movs	r2, #2
 800a74c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a75e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68ba      	ldr	r2, [r7, #8]
 800a76e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a778:	d03e      	beq.n	800a7f8 <HAL_TIM_ConfigClockSource+0xd4>
 800a77a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a77e:	f200 8087 	bhi.w	800a890 <HAL_TIM_ConfigClockSource+0x16c>
 800a782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a786:	f000 8086 	beq.w	800a896 <HAL_TIM_ConfigClockSource+0x172>
 800a78a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a78e:	d87f      	bhi.n	800a890 <HAL_TIM_ConfigClockSource+0x16c>
 800a790:	2b70      	cmp	r3, #112	@ 0x70
 800a792:	d01a      	beq.n	800a7ca <HAL_TIM_ConfigClockSource+0xa6>
 800a794:	2b70      	cmp	r3, #112	@ 0x70
 800a796:	d87b      	bhi.n	800a890 <HAL_TIM_ConfigClockSource+0x16c>
 800a798:	2b60      	cmp	r3, #96	@ 0x60
 800a79a:	d050      	beq.n	800a83e <HAL_TIM_ConfigClockSource+0x11a>
 800a79c:	2b60      	cmp	r3, #96	@ 0x60
 800a79e:	d877      	bhi.n	800a890 <HAL_TIM_ConfigClockSource+0x16c>
 800a7a0:	2b50      	cmp	r3, #80	@ 0x50
 800a7a2:	d03c      	beq.n	800a81e <HAL_TIM_ConfigClockSource+0xfa>
 800a7a4:	2b50      	cmp	r3, #80	@ 0x50
 800a7a6:	d873      	bhi.n	800a890 <HAL_TIM_ConfigClockSource+0x16c>
 800a7a8:	2b40      	cmp	r3, #64	@ 0x40
 800a7aa:	d058      	beq.n	800a85e <HAL_TIM_ConfigClockSource+0x13a>
 800a7ac:	2b40      	cmp	r3, #64	@ 0x40
 800a7ae:	d86f      	bhi.n	800a890 <HAL_TIM_ConfigClockSource+0x16c>
 800a7b0:	2b30      	cmp	r3, #48	@ 0x30
 800a7b2:	d064      	beq.n	800a87e <HAL_TIM_ConfigClockSource+0x15a>
 800a7b4:	2b30      	cmp	r3, #48	@ 0x30
 800a7b6:	d86b      	bhi.n	800a890 <HAL_TIM_ConfigClockSource+0x16c>
 800a7b8:	2b20      	cmp	r3, #32
 800a7ba:	d060      	beq.n	800a87e <HAL_TIM_ConfigClockSource+0x15a>
 800a7bc:	2b20      	cmp	r3, #32
 800a7be:	d867      	bhi.n	800a890 <HAL_TIM_ConfigClockSource+0x16c>
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d05c      	beq.n	800a87e <HAL_TIM_ConfigClockSource+0x15a>
 800a7c4:	2b10      	cmp	r3, #16
 800a7c6:	d05a      	beq.n	800a87e <HAL_TIM_ConfigClockSource+0x15a>
 800a7c8:	e062      	b.n	800a890 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a7da:	f000 fb1b 	bl	800ae14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a7ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	609a      	str	r2, [r3, #8]
      break;
 800a7f6:	e04f      	b.n	800a898 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a808:	f000 fb04 	bl	800ae14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	689a      	ldr	r2, [r3, #8]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a81a:	609a      	str	r2, [r3, #8]
      break;
 800a81c:	e03c      	b.n	800a898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a82a:	461a      	mov	r2, r3
 800a82c:	f000 fa78 	bl	800ad20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2150      	movs	r1, #80	@ 0x50
 800a836:	4618      	mov	r0, r3
 800a838:	f000 fad1 	bl	800adde <TIM_ITRx_SetConfig>
      break;
 800a83c:	e02c      	b.n	800a898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a84a:	461a      	mov	r2, r3
 800a84c:	f000 fa97 	bl	800ad7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2160      	movs	r1, #96	@ 0x60
 800a856:	4618      	mov	r0, r3
 800a858:	f000 fac1 	bl	800adde <TIM_ITRx_SetConfig>
      break;
 800a85c:	e01c      	b.n	800a898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a86a:	461a      	mov	r2, r3
 800a86c:	f000 fa58 	bl	800ad20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2140      	movs	r1, #64	@ 0x40
 800a876:	4618      	mov	r0, r3
 800a878:	f000 fab1 	bl	800adde <TIM_ITRx_SetConfig>
      break;
 800a87c:	e00c      	b.n	800a898 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4619      	mov	r1, r3
 800a888:	4610      	mov	r0, r2
 800a88a:	f000 faa8 	bl	800adde <TIM_ITRx_SetConfig>
      break;
 800a88e:	e003      	b.n	800a898 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	73fb      	strb	r3, [r7, #15]
      break;
 800a894:	e000      	b.n	800a898 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a896:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b083      	sub	sp, #12
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8ba:	bf00      	nop
 800a8bc:	370c      	adds	r7, #12
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b083      	sub	sp, #12
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8ce:	bf00      	nop
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b083      	sub	sp, #12
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8e2:	bf00      	nop
 800a8e4:	370c      	adds	r7, #12
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
	...

0800a8f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a3a      	ldr	r2, [pc, #232]	@ (800a9ec <TIM_Base_SetConfig+0xfc>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d00f      	beq.n	800a928 <TIM_Base_SetConfig+0x38>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a90e:	d00b      	beq.n	800a928 <TIM_Base_SetConfig+0x38>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a37      	ldr	r2, [pc, #220]	@ (800a9f0 <TIM_Base_SetConfig+0x100>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d007      	beq.n	800a928 <TIM_Base_SetConfig+0x38>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a36      	ldr	r2, [pc, #216]	@ (800a9f4 <TIM_Base_SetConfig+0x104>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d003      	beq.n	800a928 <TIM_Base_SetConfig+0x38>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a35      	ldr	r2, [pc, #212]	@ (800a9f8 <TIM_Base_SetConfig+0x108>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d108      	bne.n	800a93a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a92e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	4313      	orrs	r3, r2
 800a938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a2b      	ldr	r2, [pc, #172]	@ (800a9ec <TIM_Base_SetConfig+0xfc>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d01b      	beq.n	800a97a <TIM_Base_SetConfig+0x8a>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a948:	d017      	beq.n	800a97a <TIM_Base_SetConfig+0x8a>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a28      	ldr	r2, [pc, #160]	@ (800a9f0 <TIM_Base_SetConfig+0x100>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d013      	beq.n	800a97a <TIM_Base_SetConfig+0x8a>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a27      	ldr	r2, [pc, #156]	@ (800a9f4 <TIM_Base_SetConfig+0x104>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d00f      	beq.n	800a97a <TIM_Base_SetConfig+0x8a>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a26      	ldr	r2, [pc, #152]	@ (800a9f8 <TIM_Base_SetConfig+0x108>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d00b      	beq.n	800a97a <TIM_Base_SetConfig+0x8a>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a25      	ldr	r2, [pc, #148]	@ (800a9fc <TIM_Base_SetConfig+0x10c>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d007      	beq.n	800a97a <TIM_Base_SetConfig+0x8a>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a24      	ldr	r2, [pc, #144]	@ (800aa00 <TIM_Base_SetConfig+0x110>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d003      	beq.n	800a97a <TIM_Base_SetConfig+0x8a>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a23      	ldr	r2, [pc, #140]	@ (800aa04 <TIM_Base_SetConfig+0x114>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d108      	bne.n	800a98c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	4313      	orrs	r3, r2
 800a98a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	695b      	ldr	r3, [r3, #20]
 800a996:	4313      	orrs	r3, r2
 800a998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	689a      	ldr	r2, [r3, #8]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a0e      	ldr	r2, [pc, #56]	@ (800a9ec <TIM_Base_SetConfig+0xfc>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d103      	bne.n	800a9c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	691a      	ldr	r2, [r3, #16]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	f003 0301 	and.w	r3, r3, #1
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d105      	bne.n	800a9de <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	f023 0201 	bic.w	r2, r3, #1
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	611a      	str	r2, [r3, #16]
  }
}
 800a9de:	bf00      	nop
 800a9e0:	3714      	adds	r7, #20
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	40010000 	.word	0x40010000
 800a9f0:	40000400 	.word	0x40000400
 800a9f4:	40000800 	.word	0x40000800
 800a9f8:	40000c00 	.word	0x40000c00
 800a9fc:	40014000 	.word	0x40014000
 800aa00:	40014400 	.word	0x40014400
 800aa04:	40014800 	.word	0x40014800

0800aa08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b087      	sub	sp, #28
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a1b      	ldr	r3, [r3, #32]
 800aa1c:	f023 0201 	bic.w	r2, r3, #1
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f023 0303 	bic.w	r3, r3, #3
 800aa3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f023 0302 	bic.w	r3, r3, #2
 800aa50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a1c      	ldr	r2, [pc, #112]	@ (800aad0 <TIM_OC1_SetConfig+0xc8>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d10c      	bne.n	800aa7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	f023 0308 	bic.w	r3, r3, #8
 800aa6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	697a      	ldr	r2, [r7, #20]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f023 0304 	bic.w	r3, r3, #4
 800aa7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a13      	ldr	r2, [pc, #76]	@ (800aad0 <TIM_OC1_SetConfig+0xc8>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d111      	bne.n	800aaaa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aa94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	695b      	ldr	r3, [r3, #20]
 800aa9a:	693a      	ldr	r2, [r7, #16]
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	699b      	ldr	r3, [r3, #24]
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	693a      	ldr	r2, [r7, #16]
 800aaae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	685a      	ldr	r2, [r3, #4]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	697a      	ldr	r2, [r7, #20]
 800aac2:	621a      	str	r2, [r3, #32]
}
 800aac4:	bf00      	nop
 800aac6:	371c      	adds	r7, #28
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr
 800aad0:	40010000 	.word	0x40010000

0800aad4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b087      	sub	sp, #28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a1b      	ldr	r3, [r3, #32]
 800aae8:	f023 0210 	bic.w	r2, r3, #16
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	699b      	ldr	r3, [r3, #24]
 800aafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	021b      	lsls	r3, r3, #8
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	f023 0320 	bic.w	r3, r3, #32
 800ab1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	011b      	lsls	r3, r3, #4
 800ab26:	697a      	ldr	r2, [r7, #20]
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a1e      	ldr	r2, [pc, #120]	@ (800aba8 <TIM_OC2_SetConfig+0xd4>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d10d      	bne.n	800ab50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	011b      	lsls	r3, r3, #4
 800ab42:	697a      	ldr	r2, [r7, #20]
 800ab44:	4313      	orrs	r3, r2
 800ab46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a15      	ldr	r2, [pc, #84]	@ (800aba8 <TIM_OC2_SetConfig+0xd4>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d113      	bne.n	800ab80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ab5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ab66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	695b      	ldr	r3, [r3, #20]
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	699b      	ldr	r3, [r3, #24]
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	693a      	ldr	r2, [r7, #16]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	693a      	ldr	r2, [r7, #16]
 800ab84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	685a      	ldr	r2, [r3, #4]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	621a      	str	r2, [r3, #32]
}
 800ab9a:	bf00      	nop
 800ab9c:	371c      	adds	r7, #28
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	40010000 	.word	0x40010000

0800abac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abac:	b480      	push	{r7}
 800abae:	b087      	sub	sp, #28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a1b      	ldr	r3, [r3, #32]
 800abba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6a1b      	ldr	r3, [r3, #32]
 800abc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	69db      	ldr	r3, [r3, #28]
 800abd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f023 0303 	bic.w	r3, r3, #3
 800abe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	4313      	orrs	r3, r2
 800abec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800abf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	021b      	lsls	r3, r3, #8
 800abfc:	697a      	ldr	r2, [r7, #20]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4a1d      	ldr	r2, [pc, #116]	@ (800ac7c <TIM_OC3_SetConfig+0xd0>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d10d      	bne.n	800ac26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ac10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	021b      	lsls	r3, r3, #8
 800ac18:	697a      	ldr	r2, [r7, #20]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ac24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a14      	ldr	r2, [pc, #80]	@ (800ac7c <TIM_OC3_SetConfig+0xd0>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d113      	bne.n	800ac56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ac3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	695b      	ldr	r3, [r3, #20]
 800ac42:	011b      	lsls	r3, r3, #4
 800ac44:	693a      	ldr	r2, [r7, #16]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	011b      	lsls	r3, r3, #4
 800ac50:	693a      	ldr	r2, [r7, #16]
 800ac52:	4313      	orrs	r3, r2
 800ac54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	693a      	ldr	r2, [r7, #16]
 800ac5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	685a      	ldr	r2, [r3, #4]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	697a      	ldr	r2, [r7, #20]
 800ac6e:	621a      	str	r2, [r3, #32]
}
 800ac70:	bf00      	nop
 800ac72:	371c      	adds	r7, #28
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr
 800ac7c:	40010000 	.word	0x40010000

0800ac80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b087      	sub	sp, #28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a1b      	ldr	r3, [r3, #32]
 800ac8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	69db      	ldr	r3, [r3, #28]
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	021b      	lsls	r3, r3, #8
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	4313      	orrs	r3, r2
 800acc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800acca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	031b      	lsls	r3, r3, #12
 800acd2:	693a      	ldr	r2, [r7, #16]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4a10      	ldr	r2, [pc, #64]	@ (800ad1c <TIM_OC4_SetConfig+0x9c>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d109      	bne.n	800acf4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ace6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	695b      	ldr	r3, [r3, #20]
 800acec:	019b      	lsls	r3, r3, #6
 800acee:	697a      	ldr	r2, [r7, #20]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	697a      	ldr	r2, [r7, #20]
 800acf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	685a      	ldr	r2, [r3, #4]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	621a      	str	r2, [r3, #32]
}
 800ad0e:	bf00      	nop
 800ad10:	371c      	adds	r7, #28
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	40010000 	.word	0x40010000

0800ad20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b087      	sub	sp, #28
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6a1b      	ldr	r3, [r3, #32]
 800ad30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	f023 0201 	bic.w	r2, r3, #1
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	011b      	lsls	r3, r3, #4
 800ad50:	693a      	ldr	r2, [r7, #16]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	f023 030a 	bic.w	r3, r3, #10
 800ad5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad5e:	697a      	ldr	r2, [r7, #20]
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	621a      	str	r2, [r3, #32]
}
 800ad72:	bf00      	nop
 800ad74:	371c      	adds	r7, #28
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad7e:	b480      	push	{r7}
 800ad80:	b087      	sub	sp, #28
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	60f8      	str	r0, [r7, #12]
 800ad86:	60b9      	str	r1, [r7, #8]
 800ad88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6a1b      	ldr	r3, [r3, #32]
 800ad8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6a1b      	ldr	r3, [r3, #32]
 800ad94:	f023 0210 	bic.w	r2, r3, #16
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	699b      	ldr	r3, [r3, #24]
 800ada0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ada8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	031b      	lsls	r3, r3, #12
 800adae:	693a      	ldr	r2, [r7, #16]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800adba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	011b      	lsls	r3, r3, #4
 800adc0:	697a      	ldr	r2, [r7, #20]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	693a      	ldr	r2, [r7, #16]
 800adca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	697a      	ldr	r2, [r7, #20]
 800add0:	621a      	str	r2, [r3, #32]
}
 800add2:	bf00      	nop
 800add4:	371c      	adds	r7, #28
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800adde:	b480      	push	{r7}
 800ade0:	b085      	sub	sp, #20
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	f043 0307 	orr.w	r3, r3, #7
 800ae00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	609a      	str	r2, [r3, #8]
}
 800ae08:	bf00      	nop
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b087      	sub	sp, #28
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
 800ae20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	021a      	lsls	r2, r3, #8
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	431a      	orrs	r2, r3
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	697a      	ldr	r2, [r7, #20]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	609a      	str	r2, [r3, #8]
}
 800ae48:	bf00      	nop
 800ae4a:	371c      	adds	r7, #28
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b087      	sub	sp, #28
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	f003 031f 	and.w	r3, r3, #31
 800ae66:	2201      	movs	r2, #1
 800ae68:	fa02 f303 	lsl.w	r3, r2, r3
 800ae6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6a1a      	ldr	r2, [r3, #32]
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	43db      	mvns	r3, r3
 800ae76:	401a      	ands	r2, r3
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6a1a      	ldr	r2, [r3, #32]
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	f003 031f 	and.w	r3, r3, #31
 800ae86:	6879      	ldr	r1, [r7, #4]
 800ae88:	fa01 f303 	lsl.w	r3, r1, r3
 800ae8c:	431a      	orrs	r2, r3
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	621a      	str	r2, [r3, #32]
}
 800ae92:	bf00      	nop
 800ae94:	371c      	adds	r7, #28
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
	...

0800aea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d101      	bne.n	800aeb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	e050      	b.n	800af5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2202      	movs	r2, #2
 800aec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a1c      	ldr	r2, [pc, #112]	@ (800af68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d018      	beq.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af04:	d013      	beq.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a18      	ldr	r2, [pc, #96]	@ (800af6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d00e      	beq.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a16      	ldr	r2, [pc, #88]	@ (800af70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d009      	beq.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a15      	ldr	r2, [pc, #84]	@ (800af74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d004      	beq.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a13      	ldr	r2, [pc, #76]	@ (800af78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d10c      	bne.n	800af48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	68ba      	ldr	r2, [r7, #8]
 800af46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	40010000 	.word	0x40010000
 800af6c:	40000400 	.word	0x40000400
 800af70:	40000800 	.word	0x40000800
 800af74:	40000c00 	.word	0x40000c00
 800af78:	40014000 	.word	0x40014000

0800af7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af86:	2300      	movs	r3, #0
 800af88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af90:	2b01      	cmp	r3, #1
 800af92:	d101      	bne.n	800af98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af94:	2302      	movs	r3, #2
 800af96:	e03d      	b.n	800b014 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	4313      	orrs	r3, r2
 800afac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	4313      	orrs	r3, r2
 800afba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	695b      	ldr	r3, [r3, #20]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	69db      	ldr	r3, [r3, #28]
 800affe:	4313      	orrs	r3, r2
 800b000:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	3714      	adds	r7, #20
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b028:	bf00      	nop
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b03c:	bf00      	nop
 800b03e:	370c      	adds	r7, #12
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d101      	bne.n	800b05a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b056:	2301      	movs	r3, #1
 800b058:	e042      	b.n	800b0e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b060:	b2db      	uxtb	r3, r3
 800b062:	2b00      	cmp	r3, #0
 800b064:	d106      	bne.n	800b074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f7f9 fad8 	bl	8004624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2224      	movs	r2, #36	@ 0x24
 800b078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68da      	ldr	r2, [r3, #12]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b08a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fa9f 	bl	800b5d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	691a      	ldr	r2, [r3, #16]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b0a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	695a      	ldr	r2, [r3, #20]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b0b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	68da      	ldr	r2, [r3, #12]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b0c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2220      	movs	r2, #32
 800b0cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2220      	movs	r2, #32
 800b0d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	2b20      	cmp	r3, #32
 800b100:	d112      	bne.n	800b128 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d002      	beq.n	800b10e <HAL_UART_Receive_DMA+0x26>
 800b108:	88fb      	ldrh	r3, [r7, #6]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d101      	bne.n	800b112 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	e00b      	b.n	800b12a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b118:	88fb      	ldrh	r3, [r7, #6]
 800b11a:	461a      	mov	r2, r3
 800b11c:	68b9      	ldr	r1, [r7, #8]
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f000 f930 	bl	800b384 <UART_Start_Receive_DMA>
 800b124:	4603      	mov	r3, r0
 800b126:	e000      	b.n	800b12a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b128:	2302      	movs	r3, #2
  }
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3710      	adds	r7, #16
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b132:	b480      	push	{r7}
 800b134:	b083      	sub	sp, #12
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b13a:	bf00      	nop
 800b13c:	370c      	adds	r7, #12
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b146:	b480      	push	{r7}
 800b148:	b083      	sub	sp, #12
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b14e:	bf00      	nop
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b15a:	b480      	push	{r7}
 800b15c:	b083      	sub	sp, #12
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b162:	bf00      	nop
 800b164:	370c      	adds	r7, #12
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr

0800b16e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b16e:	b480      	push	{r7}
 800b170:	b083      	sub	sp, #12
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	460b      	mov	r3, r1
 800b178:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b17a:	bf00      	nop
 800b17c:	370c      	adds	r7, #12
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr

0800b186 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b09c      	sub	sp, #112	@ 0x70
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b192:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d172      	bne.n	800b288 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b1a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	330c      	adds	r3, #12
 800b1ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1b2:	e853 3f00 	ldrex	r3, [r3]
 800b1b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b1b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b1be:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b1c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	330c      	adds	r3, #12
 800b1c6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b1c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b1ca:	657b      	str	r3, [r7, #84]	@ 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b1ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1d0:	e841 2300 	strex	r3, r2, [r1]
 800b1d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b1d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1e5      	bne.n	800b1a8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3314      	adds	r3, #20
 800b1e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e6:	e853 3f00 	ldrex	r3, [r3]
 800b1ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b1ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ee:	f023 0301 	bic.w	r3, r3, #1
 800b1f2:	667b      	str	r3, [r7, #100]	@ 0x64
 800b1f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	3314      	adds	r3, #20
 800b1fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b1fc:	647a      	str	r2, [r7, #68]	@ 0x44
 800b1fe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b200:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b204:	e841 2300 	strex	r3, r2, [r1]
 800b208:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b20a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1e5      	bne.n	800b1dc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	3314      	adds	r3, #20
 800b216:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21a:	e853 3f00 	ldrex	r3, [r3]
 800b21e:	623b      	str	r3, [r7, #32]
   return(result);
 800b220:	6a3b      	ldr	r3, [r7, #32]
 800b222:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b226:	663b      	str	r3, [r7, #96]	@ 0x60
 800b228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	3314      	adds	r3, #20
 800b22e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b230:	633a      	str	r2, [r7, #48]	@ 0x30
 800b232:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b234:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b238:	e841 2300 	strex	r3, r2, [r1]
 800b23c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1e5      	bne.n	800b210 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b246:	2220      	movs	r2, #32
 800b248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b24c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b24e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b250:	2b01      	cmp	r3, #1
 800b252:	d119      	bne.n	800b288 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b254:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	330c      	adds	r3, #12
 800b25a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	e853 3f00 	ldrex	r3, [r3]
 800b262:	60fb      	str	r3, [r7, #12]
   return(result);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f023 0310 	bic.w	r3, r3, #16
 800b26a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b26c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	330c      	adds	r3, #12
 800b272:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b274:	61fa      	str	r2, [r7, #28]
 800b276:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b278:	69b9      	ldr	r1, [r7, #24]
 800b27a:	69fa      	ldr	r2, [r7, #28]
 800b27c:	e841 2300 	strex	r3, r2, [r1]
 800b280:	617b      	str	r3, [r7, #20]
   return(result);
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1e5      	bne.n	800b254 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b288:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b28a:	2200      	movs	r2, #0
 800b28c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b28e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b292:	2b01      	cmp	r3, #1
 800b294:	d106      	bne.n	800b2a4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b298:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b29a:	4619      	mov	r1, r3
 800b29c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b29e:	f7ff ff66 	bl	800b16e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b2a2:	e002      	b.n	800b2aa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b2a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b2a6:	f7ff ff44 	bl	800b132 <HAL_UART_RxCpltCallback>
}
 800b2aa:	bf00      	nop
 800b2ac:	3770      	adds	r7, #112	@ 0x70
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b084      	sub	sp, #16
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2be:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d108      	bne.n	800b2e0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b2d2:	085b      	lsrs	r3, r3, #1
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f7ff ff48 	bl	800b16e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b2de:	e002      	b.n	800b2e6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f7ff ff30 	bl	800b146 <HAL_UART_RxHalfCpltCallback>
}
 800b2e6:	bf00      	nop
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b084      	sub	sp, #16
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2fe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b30a:	2b80      	cmp	r3, #128	@ 0x80
 800b30c:	bf0c      	ite	eq
 800b30e:	2301      	moveq	r3, #1
 800b310:	2300      	movne	r3, #0
 800b312:	b2db      	uxtb	r3, r3
 800b314:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	2b21      	cmp	r3, #33	@ 0x21
 800b320:	d108      	bne.n	800b334 <UART_DMAError+0x46>
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d005      	beq.n	800b334 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	2200      	movs	r2, #0
 800b32c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800b32e:	68b8      	ldr	r0, [r7, #8]
 800b330:	f000 f8c2 	bl	800b4b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	695b      	ldr	r3, [r3, #20]
 800b33a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b33e:	2b40      	cmp	r3, #64	@ 0x40
 800b340:	bf0c      	ite	eq
 800b342:	2301      	moveq	r3, #1
 800b344:	2300      	movne	r3, #0
 800b346:	b2db      	uxtb	r3, r3
 800b348:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b350:	b2db      	uxtb	r3, r3
 800b352:	2b22      	cmp	r3, #34	@ 0x22
 800b354:	d108      	bne.n	800b368 <UART_DMAError+0x7a>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d005      	beq.n	800b368 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	2200      	movs	r2, #0
 800b360:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800b362:	68b8      	ldr	r0, [r7, #8]
 800b364:	f000 f8d0 	bl	800b508 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b36c:	f043 0210 	orr.w	r2, r3, #16
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b374:	68b8      	ldr	r0, [r7, #8]
 800b376:	f7ff fef0 	bl	800b15a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b37a:	bf00      	nop
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
	...

0800b384 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b098      	sub	sp, #96	@ 0x60
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	4613      	mov	r3, r2
 800b390:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	88fa      	ldrh	r2, [r7, #6]
 800b39c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2222      	movs	r2, #34	@ 0x22
 800b3a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3b0:	4a3e      	ldr	r2, [pc, #248]	@ (800b4ac <UART_Start_Receive_DMA+0x128>)
 800b3b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3b8:	4a3d      	ldr	r2, [pc, #244]	@ (800b4b0 <UART_Start_Receive_DMA+0x12c>)
 800b3ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3c0:	4a3c      	ldr	r2, [pc, #240]	@ (800b4b4 <UART_Start_Receive_DMA+0x130>)
 800b3c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b3cc:	f107 0308 	add.w	r3, r7, #8
 800b3d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	3304      	adds	r3, #4
 800b3dc:	4619      	mov	r1, r3
 800b3de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	88fb      	ldrh	r3, [r7, #6]
 800b3e4:	f7f9 ff30 	bl	8005248 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	613b      	str	r3, [r7, #16]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	613b      	str	r3, [r7, #16]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	613b      	str	r3, [r7, #16]
 800b3fc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	691b      	ldr	r3, [r3, #16]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d019      	beq.n	800b43a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	330c      	adds	r3, #12
 800b40c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b40e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b410:	e853 3f00 	ldrex	r3, [r3]
 800b414:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b41c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	330c      	adds	r3, #12
 800b424:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b426:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b428:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b42a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b42c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b42e:	e841 2300 	strex	r3, r2, [r1]
 800b432:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1e5      	bne.n	800b406 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	3314      	adds	r3, #20
 800b440:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b444:	e853 3f00 	ldrex	r3, [r3]
 800b448:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b44c:	f043 0301 	orr.w	r3, r3, #1
 800b450:	657b      	str	r3, [r7, #84]	@ 0x54
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	3314      	adds	r3, #20
 800b458:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b45a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b45c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b460:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b462:	e841 2300 	strex	r3, r2, [r1]
 800b466:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d1e5      	bne.n	800b43a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	3314      	adds	r3, #20
 800b474:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	e853 3f00 	ldrex	r3, [r3]
 800b47c:	617b      	str	r3, [r7, #20]
   return(result);
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b484:	653b      	str	r3, [r7, #80]	@ 0x50
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	3314      	adds	r3, #20
 800b48c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b48e:	627a      	str	r2, [r7, #36]	@ 0x24
 800b490:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b492:	6a39      	ldr	r1, [r7, #32]
 800b494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b496:	e841 2300 	strex	r3, r2, [r1]
 800b49a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1e5      	bne.n	800b46e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3760      	adds	r7, #96	@ 0x60
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	0800b187 	.word	0x0800b187
 800b4b0:	0800b2b3 	.word	0x0800b2b3
 800b4b4:	0800b2ef 	.word	0x0800b2ef

0800b4b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b089      	sub	sp, #36	@ 0x24
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	330c      	adds	r3, #12
 800b4c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	e853 3f00 	ldrex	r3, [r3]
 800b4ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b4d6:	61fb      	str	r3, [r7, #28]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	330c      	adds	r3, #12
 800b4de:	69fa      	ldr	r2, [r7, #28]
 800b4e0:	61ba      	str	r2, [r7, #24]
 800b4e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e4:	6979      	ldr	r1, [r7, #20]
 800b4e6:	69ba      	ldr	r2, [r7, #24]
 800b4e8:	e841 2300 	strex	r3, r2, [r1]
 800b4ec:	613b      	str	r3, [r7, #16]
   return(result);
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1e5      	bne.n	800b4c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2220      	movs	r2, #32
 800b4f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800b4fc:	bf00      	nop
 800b4fe:	3724      	adds	r7, #36	@ 0x24
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b508:	b480      	push	{r7}
 800b50a:	b095      	sub	sp, #84	@ 0x54
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	330c      	adds	r3, #12
 800b516:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b51a:	e853 3f00 	ldrex	r3, [r3]
 800b51e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b522:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b526:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	330c      	adds	r3, #12
 800b52e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b530:	643a      	str	r2, [r7, #64]	@ 0x40
 800b532:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b534:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b536:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b538:	e841 2300 	strex	r3, r2, [r1]
 800b53c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1e5      	bne.n	800b510 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3314      	adds	r3, #20
 800b54a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54c:	6a3b      	ldr	r3, [r7, #32]
 800b54e:	e853 3f00 	ldrex	r3, [r3]
 800b552:	61fb      	str	r3, [r7, #28]
   return(result);
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	f023 0301 	bic.w	r3, r3, #1
 800b55a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	3314      	adds	r3, #20
 800b562:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b564:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b566:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b568:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b56a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b56c:	e841 2300 	strex	r3, r2, [r1]
 800b570:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1e5      	bne.n	800b544 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d119      	bne.n	800b5b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	330c      	adds	r3, #12
 800b586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	e853 3f00 	ldrex	r3, [r3]
 800b58e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	f023 0310 	bic.w	r3, r3, #16
 800b596:	647b      	str	r3, [r7, #68]	@ 0x44
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	330c      	adds	r3, #12
 800b59e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b5a0:	61ba      	str	r2, [r7, #24]
 800b5a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a4:	6979      	ldr	r1, [r7, #20]
 800b5a6:	69ba      	ldr	r2, [r7, #24]
 800b5a8:	e841 2300 	strex	r3, r2, [r1]
 800b5ac:	613b      	str	r3, [r7, #16]
   return(result);
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1e5      	bne.n	800b580 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2220      	movs	r2, #32
 800b5b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b5c2:	bf00      	nop
 800b5c4:	3754      	adds	r7, #84	@ 0x54
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
	...

0800b5d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5d4:	b0c0      	sub	sp, #256	@ 0x100
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b5ec:	68d9      	ldr	r1, [r3, #12]
 800b5ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	ea40 0301 	orr.w	r3, r0, r1
 800b5f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b5fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b5fe:	689a      	ldr	r2, [r3, #8]
 800b600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	431a      	orrs	r2, r3
 800b608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b60c:	695b      	ldr	r3, [r3, #20]
 800b60e:	431a      	orrs	r2, r3
 800b610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b614:	69db      	ldr	r3, [r3, #28]
 800b616:	4313      	orrs	r3, r2
 800b618:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b61c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b628:	f021 010c 	bic.w	r1, r1, #12
 800b62c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b636:	430b      	orrs	r3, r1
 800b638:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b63a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	695b      	ldr	r3, [r3, #20]
 800b642:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b64a:	6999      	ldr	r1, [r3, #24]
 800b64c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	ea40 0301 	orr.w	r3, r0, r1
 800b656:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	4b8f      	ldr	r3, [pc, #572]	@ (800b89c <UART_SetConfig+0x2cc>)
 800b660:	429a      	cmp	r2, r3
 800b662:	d005      	beq.n	800b670 <UART_SetConfig+0xa0>
 800b664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	4b8d      	ldr	r3, [pc, #564]	@ (800b8a0 <UART_SetConfig+0x2d0>)
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d104      	bne.n	800b67a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b670:	f7fd fbd2 	bl	8008e18 <HAL_RCC_GetPCLK2Freq>
 800b674:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b678:	e003      	b.n	800b682 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b67a:	f7fd fbb9 	bl	8008df0 <HAL_RCC_GetPCLK1Freq>
 800b67e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b686:	69db      	ldr	r3, [r3, #28]
 800b688:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b68c:	f040 810c 	bne.w	800b8a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b694:	2200      	movs	r2, #0
 800b696:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b69a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b69e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b6a2:	4622      	mov	r2, r4
 800b6a4:	462b      	mov	r3, r5
 800b6a6:	1891      	adds	r1, r2, r2
 800b6a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b6aa:	415b      	adcs	r3, r3
 800b6ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b6ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	eb12 0801 	adds.w	r8, r2, r1
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	eb43 0901 	adc.w	r9, r3, r1
 800b6be:	f04f 0200 	mov.w	r2, #0
 800b6c2:	f04f 0300 	mov.w	r3, #0
 800b6c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b6ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b6ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b6d2:	4690      	mov	r8, r2
 800b6d4:	4699      	mov	r9, r3
 800b6d6:	4623      	mov	r3, r4
 800b6d8:	eb18 0303 	adds.w	r3, r8, r3
 800b6dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b6e0:	462b      	mov	r3, r5
 800b6e2:	eb49 0303 	adc.w	r3, r9, r3
 800b6e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b6ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b6f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b6fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b6fe:	460b      	mov	r3, r1
 800b700:	18db      	adds	r3, r3, r3
 800b702:	653b      	str	r3, [r7, #80]	@ 0x50
 800b704:	4613      	mov	r3, r2
 800b706:	eb42 0303 	adc.w	r3, r2, r3
 800b70a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b70c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b710:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b714:	f7f4 fdb4 	bl	8000280 <__aeabi_uldivmod>
 800b718:	4602      	mov	r2, r0
 800b71a:	460b      	mov	r3, r1
 800b71c:	4b61      	ldr	r3, [pc, #388]	@ (800b8a4 <UART_SetConfig+0x2d4>)
 800b71e:	fba3 2302 	umull	r2, r3, r3, r2
 800b722:	095b      	lsrs	r3, r3, #5
 800b724:	011c      	lsls	r4, r3, #4
 800b726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b730:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b734:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b738:	4642      	mov	r2, r8
 800b73a:	464b      	mov	r3, r9
 800b73c:	1891      	adds	r1, r2, r2
 800b73e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b740:	415b      	adcs	r3, r3
 800b742:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b744:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b748:	4641      	mov	r1, r8
 800b74a:	eb12 0a01 	adds.w	sl, r2, r1
 800b74e:	4649      	mov	r1, r9
 800b750:	eb43 0b01 	adc.w	fp, r3, r1
 800b754:	f04f 0200 	mov.w	r2, #0
 800b758:	f04f 0300 	mov.w	r3, #0
 800b75c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b760:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b764:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b768:	4692      	mov	sl, r2
 800b76a:	469b      	mov	fp, r3
 800b76c:	4643      	mov	r3, r8
 800b76e:	eb1a 0303 	adds.w	r3, sl, r3
 800b772:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b776:	464b      	mov	r3, r9
 800b778:	eb4b 0303 	adc.w	r3, fp, r3
 800b77c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b78c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b790:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b794:	460b      	mov	r3, r1
 800b796:	18db      	adds	r3, r3, r3
 800b798:	643b      	str	r3, [r7, #64]	@ 0x40
 800b79a:	4613      	mov	r3, r2
 800b79c:	eb42 0303 	adc.w	r3, r2, r3
 800b7a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b7a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b7aa:	f7f4 fd69 	bl	8000280 <__aeabi_uldivmod>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	4611      	mov	r1, r2
 800b7b4:	4b3b      	ldr	r3, [pc, #236]	@ (800b8a4 <UART_SetConfig+0x2d4>)
 800b7b6:	fba3 2301 	umull	r2, r3, r3, r1
 800b7ba:	095b      	lsrs	r3, r3, #5
 800b7bc:	2264      	movs	r2, #100	@ 0x64
 800b7be:	fb02 f303 	mul.w	r3, r2, r3
 800b7c2:	1acb      	subs	r3, r1, r3
 800b7c4:	00db      	lsls	r3, r3, #3
 800b7c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b7ca:	4b36      	ldr	r3, [pc, #216]	@ (800b8a4 <UART_SetConfig+0x2d4>)
 800b7cc:	fba3 2302 	umull	r2, r3, r3, r2
 800b7d0:	095b      	lsrs	r3, r3, #5
 800b7d2:	005b      	lsls	r3, r3, #1
 800b7d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b7d8:	441c      	add	r4, r3
 800b7da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b7e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b7e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b7ec:	4642      	mov	r2, r8
 800b7ee:	464b      	mov	r3, r9
 800b7f0:	1891      	adds	r1, r2, r2
 800b7f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b7f4:	415b      	adcs	r3, r3
 800b7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b7fc:	4641      	mov	r1, r8
 800b7fe:	1851      	adds	r1, r2, r1
 800b800:	6339      	str	r1, [r7, #48]	@ 0x30
 800b802:	4649      	mov	r1, r9
 800b804:	414b      	adcs	r3, r1
 800b806:	637b      	str	r3, [r7, #52]	@ 0x34
 800b808:	f04f 0200 	mov.w	r2, #0
 800b80c:	f04f 0300 	mov.w	r3, #0
 800b810:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b814:	4659      	mov	r1, fp
 800b816:	00cb      	lsls	r3, r1, #3
 800b818:	4651      	mov	r1, sl
 800b81a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b81e:	4651      	mov	r1, sl
 800b820:	00ca      	lsls	r2, r1, #3
 800b822:	4610      	mov	r0, r2
 800b824:	4619      	mov	r1, r3
 800b826:	4603      	mov	r3, r0
 800b828:	4642      	mov	r2, r8
 800b82a:	189b      	adds	r3, r3, r2
 800b82c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b830:	464b      	mov	r3, r9
 800b832:	460a      	mov	r2, r1
 800b834:	eb42 0303 	adc.w	r3, r2, r3
 800b838:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b83c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b848:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b84c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b850:	460b      	mov	r3, r1
 800b852:	18db      	adds	r3, r3, r3
 800b854:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b856:	4613      	mov	r3, r2
 800b858:	eb42 0303 	adc.w	r3, r2, r3
 800b85c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b85e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b862:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b866:	f7f4 fd0b 	bl	8000280 <__aeabi_uldivmod>
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	4b0d      	ldr	r3, [pc, #52]	@ (800b8a4 <UART_SetConfig+0x2d4>)
 800b870:	fba3 1302 	umull	r1, r3, r3, r2
 800b874:	095b      	lsrs	r3, r3, #5
 800b876:	2164      	movs	r1, #100	@ 0x64
 800b878:	fb01 f303 	mul.w	r3, r1, r3
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	00db      	lsls	r3, r3, #3
 800b880:	3332      	adds	r3, #50	@ 0x32
 800b882:	4a08      	ldr	r2, [pc, #32]	@ (800b8a4 <UART_SetConfig+0x2d4>)
 800b884:	fba2 2303 	umull	r2, r3, r2, r3
 800b888:	095b      	lsrs	r3, r3, #5
 800b88a:	f003 0207 	and.w	r2, r3, #7
 800b88e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4422      	add	r2, r4
 800b896:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b898:	e106      	b.n	800baa8 <UART_SetConfig+0x4d8>
 800b89a:	bf00      	nop
 800b89c:	40011000 	.word	0x40011000
 800b8a0:	40011400 	.word	0x40011400
 800b8a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b8a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b8b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b8b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b8ba:	4642      	mov	r2, r8
 800b8bc:	464b      	mov	r3, r9
 800b8be:	1891      	adds	r1, r2, r2
 800b8c0:	6239      	str	r1, [r7, #32]
 800b8c2:	415b      	adcs	r3, r3
 800b8c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b8ca:	4641      	mov	r1, r8
 800b8cc:	1854      	adds	r4, r2, r1
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	eb43 0501 	adc.w	r5, r3, r1
 800b8d4:	f04f 0200 	mov.w	r2, #0
 800b8d8:	f04f 0300 	mov.w	r3, #0
 800b8dc:	00eb      	lsls	r3, r5, #3
 800b8de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b8e2:	00e2      	lsls	r2, r4, #3
 800b8e4:	4614      	mov	r4, r2
 800b8e6:	461d      	mov	r5, r3
 800b8e8:	4643      	mov	r3, r8
 800b8ea:	18e3      	adds	r3, r4, r3
 800b8ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b8f0:	464b      	mov	r3, r9
 800b8f2:	eb45 0303 	adc.w	r3, r5, r3
 800b8f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b8fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b906:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b90a:	f04f 0200 	mov.w	r2, #0
 800b90e:	f04f 0300 	mov.w	r3, #0
 800b912:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b916:	4629      	mov	r1, r5
 800b918:	008b      	lsls	r3, r1, #2
 800b91a:	4621      	mov	r1, r4
 800b91c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b920:	4621      	mov	r1, r4
 800b922:	008a      	lsls	r2, r1, #2
 800b924:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b928:	f7f4 fcaa 	bl	8000280 <__aeabi_uldivmod>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	4b60      	ldr	r3, [pc, #384]	@ (800bab4 <UART_SetConfig+0x4e4>)
 800b932:	fba3 2302 	umull	r2, r3, r3, r2
 800b936:	095b      	lsrs	r3, r3, #5
 800b938:	011c      	lsls	r4, r3, #4
 800b93a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b93e:	2200      	movs	r2, #0
 800b940:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b944:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b948:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b94c:	4642      	mov	r2, r8
 800b94e:	464b      	mov	r3, r9
 800b950:	1891      	adds	r1, r2, r2
 800b952:	61b9      	str	r1, [r7, #24]
 800b954:	415b      	adcs	r3, r3
 800b956:	61fb      	str	r3, [r7, #28]
 800b958:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b95c:	4641      	mov	r1, r8
 800b95e:	1851      	adds	r1, r2, r1
 800b960:	6139      	str	r1, [r7, #16]
 800b962:	4649      	mov	r1, r9
 800b964:	414b      	adcs	r3, r1
 800b966:	617b      	str	r3, [r7, #20]
 800b968:	f04f 0200 	mov.w	r2, #0
 800b96c:	f04f 0300 	mov.w	r3, #0
 800b970:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b974:	4659      	mov	r1, fp
 800b976:	00cb      	lsls	r3, r1, #3
 800b978:	4651      	mov	r1, sl
 800b97a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b97e:	4651      	mov	r1, sl
 800b980:	00ca      	lsls	r2, r1, #3
 800b982:	4610      	mov	r0, r2
 800b984:	4619      	mov	r1, r3
 800b986:	4603      	mov	r3, r0
 800b988:	4642      	mov	r2, r8
 800b98a:	189b      	adds	r3, r3, r2
 800b98c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b990:	464b      	mov	r3, r9
 800b992:	460a      	mov	r2, r1
 800b994:	eb42 0303 	adc.w	r3, r2, r3
 800b998:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b99c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b9a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b9a8:	f04f 0200 	mov.w	r2, #0
 800b9ac:	f04f 0300 	mov.w	r3, #0
 800b9b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b9b4:	4649      	mov	r1, r9
 800b9b6:	008b      	lsls	r3, r1, #2
 800b9b8:	4641      	mov	r1, r8
 800b9ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b9be:	4641      	mov	r1, r8
 800b9c0:	008a      	lsls	r2, r1, #2
 800b9c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b9c6:	f7f4 fc5b 	bl	8000280 <__aeabi_uldivmod>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	4611      	mov	r1, r2
 800b9d0:	4b38      	ldr	r3, [pc, #224]	@ (800bab4 <UART_SetConfig+0x4e4>)
 800b9d2:	fba3 2301 	umull	r2, r3, r3, r1
 800b9d6:	095b      	lsrs	r3, r3, #5
 800b9d8:	2264      	movs	r2, #100	@ 0x64
 800b9da:	fb02 f303 	mul.w	r3, r2, r3
 800b9de:	1acb      	subs	r3, r1, r3
 800b9e0:	011b      	lsls	r3, r3, #4
 800b9e2:	3332      	adds	r3, #50	@ 0x32
 800b9e4:	4a33      	ldr	r2, [pc, #204]	@ (800bab4 <UART_SetConfig+0x4e4>)
 800b9e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ea:	095b      	lsrs	r3, r3, #5
 800b9ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b9f0:	441c      	add	r4, r3
 800b9f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	673b      	str	r3, [r7, #112]	@ 0x70
 800b9fa:	677a      	str	r2, [r7, #116]	@ 0x74
 800b9fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ba00:	4642      	mov	r2, r8
 800ba02:	464b      	mov	r3, r9
 800ba04:	1891      	adds	r1, r2, r2
 800ba06:	60b9      	str	r1, [r7, #8]
 800ba08:	415b      	adcs	r3, r3
 800ba0a:	60fb      	str	r3, [r7, #12]
 800ba0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba10:	4641      	mov	r1, r8
 800ba12:	1851      	adds	r1, r2, r1
 800ba14:	6039      	str	r1, [r7, #0]
 800ba16:	4649      	mov	r1, r9
 800ba18:	414b      	adcs	r3, r1
 800ba1a:	607b      	str	r3, [r7, #4]
 800ba1c:	f04f 0200 	mov.w	r2, #0
 800ba20:	f04f 0300 	mov.w	r3, #0
 800ba24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ba28:	4659      	mov	r1, fp
 800ba2a:	00cb      	lsls	r3, r1, #3
 800ba2c:	4651      	mov	r1, sl
 800ba2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba32:	4651      	mov	r1, sl
 800ba34:	00ca      	lsls	r2, r1, #3
 800ba36:	4610      	mov	r0, r2
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	4642      	mov	r2, r8
 800ba3e:	189b      	adds	r3, r3, r2
 800ba40:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ba42:	464b      	mov	r3, r9
 800ba44:	460a      	mov	r2, r1
 800ba46:	eb42 0303 	adc.w	r3, r2, r3
 800ba4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ba4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba56:	667a      	str	r2, [r7, #100]	@ 0x64
 800ba58:	f04f 0200 	mov.w	r2, #0
 800ba5c:	f04f 0300 	mov.w	r3, #0
 800ba60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ba64:	4649      	mov	r1, r9
 800ba66:	008b      	lsls	r3, r1, #2
 800ba68:	4641      	mov	r1, r8
 800ba6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba6e:	4641      	mov	r1, r8
 800ba70:	008a      	lsls	r2, r1, #2
 800ba72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ba76:	f7f4 fc03 	bl	8000280 <__aeabi_uldivmod>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	4b0d      	ldr	r3, [pc, #52]	@ (800bab4 <UART_SetConfig+0x4e4>)
 800ba80:	fba3 1302 	umull	r1, r3, r3, r2
 800ba84:	095b      	lsrs	r3, r3, #5
 800ba86:	2164      	movs	r1, #100	@ 0x64
 800ba88:	fb01 f303 	mul.w	r3, r1, r3
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	011b      	lsls	r3, r3, #4
 800ba90:	3332      	adds	r3, #50	@ 0x32
 800ba92:	4a08      	ldr	r2, [pc, #32]	@ (800bab4 <UART_SetConfig+0x4e4>)
 800ba94:	fba2 2303 	umull	r2, r3, r2, r3
 800ba98:	095b      	lsrs	r3, r3, #5
 800ba9a:	f003 020f 	and.w	r2, r3, #15
 800ba9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4422      	add	r2, r4
 800baa6:	609a      	str	r2, [r3, #8]
}
 800baa8:	bf00      	nop
 800baaa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800baae:	46bd      	mov	sp, r7
 800bab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bab4:	51eb851f 	.word	0x51eb851f

0800bab8 <sniprintf>:
 800bab8:	b40c      	push	{r2, r3}
 800baba:	b530      	push	{r4, r5, lr}
 800babc:	4b17      	ldr	r3, [pc, #92]	@ (800bb1c <sniprintf+0x64>)
 800babe:	1e0c      	subs	r4, r1, #0
 800bac0:	681d      	ldr	r5, [r3, #0]
 800bac2:	b09d      	sub	sp, #116	@ 0x74
 800bac4:	da08      	bge.n	800bad8 <sniprintf+0x20>
 800bac6:	238b      	movs	r3, #139	@ 0x8b
 800bac8:	602b      	str	r3, [r5, #0]
 800baca:	f04f 30ff 	mov.w	r0, #4294967295
 800bace:	b01d      	add	sp, #116	@ 0x74
 800bad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bad4:	b002      	add	sp, #8
 800bad6:	4770      	bx	lr
 800bad8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800badc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bae0:	bf14      	ite	ne
 800bae2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bae6:	4623      	moveq	r3, r4
 800bae8:	9304      	str	r3, [sp, #16]
 800baea:	9307      	str	r3, [sp, #28]
 800baec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800baf0:	9002      	str	r0, [sp, #8]
 800baf2:	9006      	str	r0, [sp, #24]
 800baf4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800baf8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bafa:	ab21      	add	r3, sp, #132	@ 0x84
 800bafc:	a902      	add	r1, sp, #8
 800bafe:	4628      	mov	r0, r5
 800bb00:	9301      	str	r3, [sp, #4]
 800bb02:	f000 f9bb 	bl	800be7c <_svfiprintf_r>
 800bb06:	1c43      	adds	r3, r0, #1
 800bb08:	bfbc      	itt	lt
 800bb0a:	238b      	movlt	r3, #139	@ 0x8b
 800bb0c:	602b      	strlt	r3, [r5, #0]
 800bb0e:	2c00      	cmp	r4, #0
 800bb10:	d0dd      	beq.n	800bace <sniprintf+0x16>
 800bb12:	9b02      	ldr	r3, [sp, #8]
 800bb14:	2200      	movs	r2, #0
 800bb16:	701a      	strb	r2, [r3, #0]
 800bb18:	e7d9      	b.n	800bace <sniprintf+0x16>
 800bb1a:	bf00      	nop
 800bb1c:	20000054 	.word	0x20000054

0800bb20 <memset>:
 800bb20:	4402      	add	r2, r0
 800bb22:	4603      	mov	r3, r0
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d100      	bne.n	800bb2a <memset+0xa>
 800bb28:	4770      	bx	lr
 800bb2a:	f803 1b01 	strb.w	r1, [r3], #1
 800bb2e:	e7f9      	b.n	800bb24 <memset+0x4>

0800bb30 <strncmp>:
 800bb30:	b510      	push	{r4, lr}
 800bb32:	b16a      	cbz	r2, 800bb50 <strncmp+0x20>
 800bb34:	3901      	subs	r1, #1
 800bb36:	1884      	adds	r4, r0, r2
 800bb38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d103      	bne.n	800bb4c <strncmp+0x1c>
 800bb44:	42a0      	cmp	r0, r4
 800bb46:	d001      	beq.n	800bb4c <strncmp+0x1c>
 800bb48:	2a00      	cmp	r2, #0
 800bb4a:	d1f5      	bne.n	800bb38 <strncmp+0x8>
 800bb4c:	1ad0      	subs	r0, r2, r3
 800bb4e:	bd10      	pop	{r4, pc}
 800bb50:	4610      	mov	r0, r2
 800bb52:	e7fc      	b.n	800bb4e <strncmp+0x1e>

0800bb54 <strncpy>:
 800bb54:	b510      	push	{r4, lr}
 800bb56:	3901      	subs	r1, #1
 800bb58:	4603      	mov	r3, r0
 800bb5a:	b132      	cbz	r2, 800bb6a <strncpy+0x16>
 800bb5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bb60:	f803 4b01 	strb.w	r4, [r3], #1
 800bb64:	3a01      	subs	r2, #1
 800bb66:	2c00      	cmp	r4, #0
 800bb68:	d1f7      	bne.n	800bb5a <strncpy+0x6>
 800bb6a:	441a      	add	r2, r3
 800bb6c:	2100      	movs	r1, #0
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d100      	bne.n	800bb74 <strncpy+0x20>
 800bb72:	bd10      	pop	{r4, pc}
 800bb74:	f803 1b01 	strb.w	r1, [r3], #1
 800bb78:	e7f9      	b.n	800bb6e <strncpy+0x1a>
	...

0800bb7c <__errno>:
 800bb7c:	4b01      	ldr	r3, [pc, #4]	@ (800bb84 <__errno+0x8>)
 800bb7e:	6818      	ldr	r0, [r3, #0]
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	20000054 	.word	0x20000054

0800bb88 <__libc_init_array>:
 800bb88:	b570      	push	{r4, r5, r6, lr}
 800bb8a:	4d0d      	ldr	r5, [pc, #52]	@ (800bbc0 <__libc_init_array+0x38>)
 800bb8c:	4c0d      	ldr	r4, [pc, #52]	@ (800bbc4 <__libc_init_array+0x3c>)
 800bb8e:	1b64      	subs	r4, r4, r5
 800bb90:	10a4      	asrs	r4, r4, #2
 800bb92:	2600      	movs	r6, #0
 800bb94:	42a6      	cmp	r6, r4
 800bb96:	d109      	bne.n	800bbac <__libc_init_array+0x24>
 800bb98:	4d0b      	ldr	r5, [pc, #44]	@ (800bbc8 <__libc_init_array+0x40>)
 800bb9a:	4c0c      	ldr	r4, [pc, #48]	@ (800bbcc <__libc_init_array+0x44>)
 800bb9c:	f000 fc66 	bl	800c46c <_init>
 800bba0:	1b64      	subs	r4, r4, r5
 800bba2:	10a4      	asrs	r4, r4, #2
 800bba4:	2600      	movs	r6, #0
 800bba6:	42a6      	cmp	r6, r4
 800bba8:	d105      	bne.n	800bbb6 <__libc_init_array+0x2e>
 800bbaa:	bd70      	pop	{r4, r5, r6, pc}
 800bbac:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbb0:	4798      	blx	r3
 800bbb2:	3601      	adds	r6, #1
 800bbb4:	e7ee      	b.n	800bb94 <__libc_init_array+0xc>
 800bbb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbba:	4798      	blx	r3
 800bbbc:	3601      	adds	r6, #1
 800bbbe:	e7f2      	b.n	800bba6 <__libc_init_array+0x1e>
 800bbc0:	0800c5f4 	.word	0x0800c5f4
 800bbc4:	0800c5f4 	.word	0x0800c5f4
 800bbc8:	0800c5f4 	.word	0x0800c5f4
 800bbcc:	0800c5f8 	.word	0x0800c5f8

0800bbd0 <__retarget_lock_acquire_recursive>:
 800bbd0:	4770      	bx	lr

0800bbd2 <__retarget_lock_release_recursive>:
 800bbd2:	4770      	bx	lr

0800bbd4 <_free_r>:
 800bbd4:	b538      	push	{r3, r4, r5, lr}
 800bbd6:	4605      	mov	r5, r0
 800bbd8:	2900      	cmp	r1, #0
 800bbda:	d041      	beq.n	800bc60 <_free_r+0x8c>
 800bbdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbe0:	1f0c      	subs	r4, r1, #4
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	bfb8      	it	lt
 800bbe6:	18e4      	addlt	r4, r4, r3
 800bbe8:	f000 f8e0 	bl	800bdac <__malloc_lock>
 800bbec:	4a1d      	ldr	r2, [pc, #116]	@ (800bc64 <_free_r+0x90>)
 800bbee:	6813      	ldr	r3, [r2, #0]
 800bbf0:	b933      	cbnz	r3, 800bc00 <_free_r+0x2c>
 800bbf2:	6063      	str	r3, [r4, #4]
 800bbf4:	6014      	str	r4, [r2, #0]
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbfc:	f000 b8dc 	b.w	800bdb8 <__malloc_unlock>
 800bc00:	42a3      	cmp	r3, r4
 800bc02:	d908      	bls.n	800bc16 <_free_r+0x42>
 800bc04:	6820      	ldr	r0, [r4, #0]
 800bc06:	1821      	adds	r1, r4, r0
 800bc08:	428b      	cmp	r3, r1
 800bc0a:	bf01      	itttt	eq
 800bc0c:	6819      	ldreq	r1, [r3, #0]
 800bc0e:	685b      	ldreq	r3, [r3, #4]
 800bc10:	1809      	addeq	r1, r1, r0
 800bc12:	6021      	streq	r1, [r4, #0]
 800bc14:	e7ed      	b.n	800bbf2 <_free_r+0x1e>
 800bc16:	461a      	mov	r2, r3
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	b10b      	cbz	r3, 800bc20 <_free_r+0x4c>
 800bc1c:	42a3      	cmp	r3, r4
 800bc1e:	d9fa      	bls.n	800bc16 <_free_r+0x42>
 800bc20:	6811      	ldr	r1, [r2, #0]
 800bc22:	1850      	adds	r0, r2, r1
 800bc24:	42a0      	cmp	r0, r4
 800bc26:	d10b      	bne.n	800bc40 <_free_r+0x6c>
 800bc28:	6820      	ldr	r0, [r4, #0]
 800bc2a:	4401      	add	r1, r0
 800bc2c:	1850      	adds	r0, r2, r1
 800bc2e:	4283      	cmp	r3, r0
 800bc30:	6011      	str	r1, [r2, #0]
 800bc32:	d1e0      	bne.n	800bbf6 <_free_r+0x22>
 800bc34:	6818      	ldr	r0, [r3, #0]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	6053      	str	r3, [r2, #4]
 800bc3a:	4408      	add	r0, r1
 800bc3c:	6010      	str	r0, [r2, #0]
 800bc3e:	e7da      	b.n	800bbf6 <_free_r+0x22>
 800bc40:	d902      	bls.n	800bc48 <_free_r+0x74>
 800bc42:	230c      	movs	r3, #12
 800bc44:	602b      	str	r3, [r5, #0]
 800bc46:	e7d6      	b.n	800bbf6 <_free_r+0x22>
 800bc48:	6820      	ldr	r0, [r4, #0]
 800bc4a:	1821      	adds	r1, r4, r0
 800bc4c:	428b      	cmp	r3, r1
 800bc4e:	bf04      	itt	eq
 800bc50:	6819      	ldreq	r1, [r3, #0]
 800bc52:	685b      	ldreq	r3, [r3, #4]
 800bc54:	6063      	str	r3, [r4, #4]
 800bc56:	bf04      	itt	eq
 800bc58:	1809      	addeq	r1, r1, r0
 800bc5a:	6021      	streq	r1, [r4, #0]
 800bc5c:	6054      	str	r4, [r2, #4]
 800bc5e:	e7ca      	b.n	800bbf6 <_free_r+0x22>
 800bc60:	bd38      	pop	{r3, r4, r5, pc}
 800bc62:	bf00      	nop
 800bc64:	20000c10 	.word	0x20000c10

0800bc68 <sbrk_aligned>:
 800bc68:	b570      	push	{r4, r5, r6, lr}
 800bc6a:	4e0f      	ldr	r6, [pc, #60]	@ (800bca8 <sbrk_aligned+0x40>)
 800bc6c:	460c      	mov	r4, r1
 800bc6e:	6831      	ldr	r1, [r6, #0]
 800bc70:	4605      	mov	r5, r0
 800bc72:	b911      	cbnz	r1, 800bc7a <sbrk_aligned+0x12>
 800bc74:	f000 fba6 	bl	800c3c4 <_sbrk_r>
 800bc78:	6030      	str	r0, [r6, #0]
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	f000 fba1 	bl	800c3c4 <_sbrk_r>
 800bc82:	1c43      	adds	r3, r0, #1
 800bc84:	d103      	bne.n	800bc8e <sbrk_aligned+0x26>
 800bc86:	f04f 34ff 	mov.w	r4, #4294967295
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	bd70      	pop	{r4, r5, r6, pc}
 800bc8e:	1cc4      	adds	r4, r0, #3
 800bc90:	f024 0403 	bic.w	r4, r4, #3
 800bc94:	42a0      	cmp	r0, r4
 800bc96:	d0f8      	beq.n	800bc8a <sbrk_aligned+0x22>
 800bc98:	1a21      	subs	r1, r4, r0
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	f000 fb92 	bl	800c3c4 <_sbrk_r>
 800bca0:	3001      	adds	r0, #1
 800bca2:	d1f2      	bne.n	800bc8a <sbrk_aligned+0x22>
 800bca4:	e7ef      	b.n	800bc86 <sbrk_aligned+0x1e>
 800bca6:	bf00      	nop
 800bca8:	20000c0c 	.word	0x20000c0c

0800bcac <_malloc_r>:
 800bcac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcb0:	1ccd      	adds	r5, r1, #3
 800bcb2:	f025 0503 	bic.w	r5, r5, #3
 800bcb6:	3508      	adds	r5, #8
 800bcb8:	2d0c      	cmp	r5, #12
 800bcba:	bf38      	it	cc
 800bcbc:	250c      	movcc	r5, #12
 800bcbe:	2d00      	cmp	r5, #0
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	db01      	blt.n	800bcc8 <_malloc_r+0x1c>
 800bcc4:	42a9      	cmp	r1, r5
 800bcc6:	d904      	bls.n	800bcd2 <_malloc_r+0x26>
 800bcc8:	230c      	movs	r3, #12
 800bcca:	6033      	str	r3, [r6, #0]
 800bccc:	2000      	movs	r0, #0
 800bcce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bda8 <_malloc_r+0xfc>
 800bcd6:	f000 f869 	bl	800bdac <__malloc_lock>
 800bcda:	f8d8 3000 	ldr.w	r3, [r8]
 800bcde:	461c      	mov	r4, r3
 800bce0:	bb44      	cbnz	r4, 800bd34 <_malloc_r+0x88>
 800bce2:	4629      	mov	r1, r5
 800bce4:	4630      	mov	r0, r6
 800bce6:	f7ff ffbf 	bl	800bc68 <sbrk_aligned>
 800bcea:	1c43      	adds	r3, r0, #1
 800bcec:	4604      	mov	r4, r0
 800bcee:	d158      	bne.n	800bda2 <_malloc_r+0xf6>
 800bcf0:	f8d8 4000 	ldr.w	r4, [r8]
 800bcf4:	4627      	mov	r7, r4
 800bcf6:	2f00      	cmp	r7, #0
 800bcf8:	d143      	bne.n	800bd82 <_malloc_r+0xd6>
 800bcfa:	2c00      	cmp	r4, #0
 800bcfc:	d04b      	beq.n	800bd96 <_malloc_r+0xea>
 800bcfe:	6823      	ldr	r3, [r4, #0]
 800bd00:	4639      	mov	r1, r7
 800bd02:	4630      	mov	r0, r6
 800bd04:	eb04 0903 	add.w	r9, r4, r3
 800bd08:	f000 fb5c 	bl	800c3c4 <_sbrk_r>
 800bd0c:	4581      	cmp	r9, r0
 800bd0e:	d142      	bne.n	800bd96 <_malloc_r+0xea>
 800bd10:	6821      	ldr	r1, [r4, #0]
 800bd12:	1a6d      	subs	r5, r5, r1
 800bd14:	4629      	mov	r1, r5
 800bd16:	4630      	mov	r0, r6
 800bd18:	f7ff ffa6 	bl	800bc68 <sbrk_aligned>
 800bd1c:	3001      	adds	r0, #1
 800bd1e:	d03a      	beq.n	800bd96 <_malloc_r+0xea>
 800bd20:	6823      	ldr	r3, [r4, #0]
 800bd22:	442b      	add	r3, r5
 800bd24:	6023      	str	r3, [r4, #0]
 800bd26:	f8d8 3000 	ldr.w	r3, [r8]
 800bd2a:	685a      	ldr	r2, [r3, #4]
 800bd2c:	bb62      	cbnz	r2, 800bd88 <_malloc_r+0xdc>
 800bd2e:	f8c8 7000 	str.w	r7, [r8]
 800bd32:	e00f      	b.n	800bd54 <_malloc_r+0xa8>
 800bd34:	6822      	ldr	r2, [r4, #0]
 800bd36:	1b52      	subs	r2, r2, r5
 800bd38:	d420      	bmi.n	800bd7c <_malloc_r+0xd0>
 800bd3a:	2a0b      	cmp	r2, #11
 800bd3c:	d917      	bls.n	800bd6e <_malloc_r+0xc2>
 800bd3e:	1961      	adds	r1, r4, r5
 800bd40:	42a3      	cmp	r3, r4
 800bd42:	6025      	str	r5, [r4, #0]
 800bd44:	bf18      	it	ne
 800bd46:	6059      	strne	r1, [r3, #4]
 800bd48:	6863      	ldr	r3, [r4, #4]
 800bd4a:	bf08      	it	eq
 800bd4c:	f8c8 1000 	streq.w	r1, [r8]
 800bd50:	5162      	str	r2, [r4, r5]
 800bd52:	604b      	str	r3, [r1, #4]
 800bd54:	4630      	mov	r0, r6
 800bd56:	f000 f82f 	bl	800bdb8 <__malloc_unlock>
 800bd5a:	f104 000b 	add.w	r0, r4, #11
 800bd5e:	1d23      	adds	r3, r4, #4
 800bd60:	f020 0007 	bic.w	r0, r0, #7
 800bd64:	1ac2      	subs	r2, r0, r3
 800bd66:	bf1c      	itt	ne
 800bd68:	1a1b      	subne	r3, r3, r0
 800bd6a:	50a3      	strne	r3, [r4, r2]
 800bd6c:	e7af      	b.n	800bcce <_malloc_r+0x22>
 800bd6e:	6862      	ldr	r2, [r4, #4]
 800bd70:	42a3      	cmp	r3, r4
 800bd72:	bf0c      	ite	eq
 800bd74:	f8c8 2000 	streq.w	r2, [r8]
 800bd78:	605a      	strne	r2, [r3, #4]
 800bd7a:	e7eb      	b.n	800bd54 <_malloc_r+0xa8>
 800bd7c:	4623      	mov	r3, r4
 800bd7e:	6864      	ldr	r4, [r4, #4]
 800bd80:	e7ae      	b.n	800bce0 <_malloc_r+0x34>
 800bd82:	463c      	mov	r4, r7
 800bd84:	687f      	ldr	r7, [r7, #4]
 800bd86:	e7b6      	b.n	800bcf6 <_malloc_r+0x4a>
 800bd88:	461a      	mov	r2, r3
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	42a3      	cmp	r3, r4
 800bd8e:	d1fb      	bne.n	800bd88 <_malloc_r+0xdc>
 800bd90:	2300      	movs	r3, #0
 800bd92:	6053      	str	r3, [r2, #4]
 800bd94:	e7de      	b.n	800bd54 <_malloc_r+0xa8>
 800bd96:	230c      	movs	r3, #12
 800bd98:	6033      	str	r3, [r6, #0]
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	f000 f80c 	bl	800bdb8 <__malloc_unlock>
 800bda0:	e794      	b.n	800bccc <_malloc_r+0x20>
 800bda2:	6005      	str	r5, [r0, #0]
 800bda4:	e7d6      	b.n	800bd54 <_malloc_r+0xa8>
 800bda6:	bf00      	nop
 800bda8:	20000c10 	.word	0x20000c10

0800bdac <__malloc_lock>:
 800bdac:	4801      	ldr	r0, [pc, #4]	@ (800bdb4 <__malloc_lock+0x8>)
 800bdae:	f7ff bf0f 	b.w	800bbd0 <__retarget_lock_acquire_recursive>
 800bdb2:	bf00      	nop
 800bdb4:	20000c08 	.word	0x20000c08

0800bdb8 <__malloc_unlock>:
 800bdb8:	4801      	ldr	r0, [pc, #4]	@ (800bdc0 <__malloc_unlock+0x8>)
 800bdba:	f7ff bf0a 	b.w	800bbd2 <__retarget_lock_release_recursive>
 800bdbe:	bf00      	nop
 800bdc0:	20000c08 	.word	0x20000c08

0800bdc4 <__ssputs_r>:
 800bdc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc8:	688e      	ldr	r6, [r1, #8]
 800bdca:	461f      	mov	r7, r3
 800bdcc:	42be      	cmp	r6, r7
 800bdce:	680b      	ldr	r3, [r1, #0]
 800bdd0:	4682      	mov	sl, r0
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	4690      	mov	r8, r2
 800bdd6:	d82d      	bhi.n	800be34 <__ssputs_r+0x70>
 800bdd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bddc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bde0:	d026      	beq.n	800be30 <__ssputs_r+0x6c>
 800bde2:	6965      	ldr	r5, [r4, #20]
 800bde4:	6909      	ldr	r1, [r1, #16]
 800bde6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdea:	eba3 0901 	sub.w	r9, r3, r1
 800bdee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdf2:	1c7b      	adds	r3, r7, #1
 800bdf4:	444b      	add	r3, r9
 800bdf6:	106d      	asrs	r5, r5, #1
 800bdf8:	429d      	cmp	r5, r3
 800bdfa:	bf38      	it	cc
 800bdfc:	461d      	movcc	r5, r3
 800bdfe:	0553      	lsls	r3, r2, #21
 800be00:	d527      	bpl.n	800be52 <__ssputs_r+0x8e>
 800be02:	4629      	mov	r1, r5
 800be04:	f7ff ff52 	bl	800bcac <_malloc_r>
 800be08:	4606      	mov	r6, r0
 800be0a:	b360      	cbz	r0, 800be66 <__ssputs_r+0xa2>
 800be0c:	6921      	ldr	r1, [r4, #16]
 800be0e:	464a      	mov	r2, r9
 800be10:	f000 fae8 	bl	800c3e4 <memcpy>
 800be14:	89a3      	ldrh	r3, [r4, #12]
 800be16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be1e:	81a3      	strh	r3, [r4, #12]
 800be20:	6126      	str	r6, [r4, #16]
 800be22:	6165      	str	r5, [r4, #20]
 800be24:	444e      	add	r6, r9
 800be26:	eba5 0509 	sub.w	r5, r5, r9
 800be2a:	6026      	str	r6, [r4, #0]
 800be2c:	60a5      	str	r5, [r4, #8]
 800be2e:	463e      	mov	r6, r7
 800be30:	42be      	cmp	r6, r7
 800be32:	d900      	bls.n	800be36 <__ssputs_r+0x72>
 800be34:	463e      	mov	r6, r7
 800be36:	6820      	ldr	r0, [r4, #0]
 800be38:	4632      	mov	r2, r6
 800be3a:	4641      	mov	r1, r8
 800be3c:	f000 faa8 	bl	800c390 <memmove>
 800be40:	68a3      	ldr	r3, [r4, #8]
 800be42:	1b9b      	subs	r3, r3, r6
 800be44:	60a3      	str	r3, [r4, #8]
 800be46:	6823      	ldr	r3, [r4, #0]
 800be48:	4433      	add	r3, r6
 800be4a:	6023      	str	r3, [r4, #0]
 800be4c:	2000      	movs	r0, #0
 800be4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be52:	462a      	mov	r2, r5
 800be54:	f000 fad4 	bl	800c400 <_realloc_r>
 800be58:	4606      	mov	r6, r0
 800be5a:	2800      	cmp	r0, #0
 800be5c:	d1e0      	bne.n	800be20 <__ssputs_r+0x5c>
 800be5e:	6921      	ldr	r1, [r4, #16]
 800be60:	4650      	mov	r0, sl
 800be62:	f7ff feb7 	bl	800bbd4 <_free_r>
 800be66:	230c      	movs	r3, #12
 800be68:	f8ca 3000 	str.w	r3, [sl]
 800be6c:	89a3      	ldrh	r3, [r4, #12]
 800be6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be72:	81a3      	strh	r3, [r4, #12]
 800be74:	f04f 30ff 	mov.w	r0, #4294967295
 800be78:	e7e9      	b.n	800be4e <__ssputs_r+0x8a>
	...

0800be7c <_svfiprintf_r>:
 800be7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be80:	4698      	mov	r8, r3
 800be82:	898b      	ldrh	r3, [r1, #12]
 800be84:	061b      	lsls	r3, r3, #24
 800be86:	b09d      	sub	sp, #116	@ 0x74
 800be88:	4607      	mov	r7, r0
 800be8a:	460d      	mov	r5, r1
 800be8c:	4614      	mov	r4, r2
 800be8e:	d510      	bpl.n	800beb2 <_svfiprintf_r+0x36>
 800be90:	690b      	ldr	r3, [r1, #16]
 800be92:	b973      	cbnz	r3, 800beb2 <_svfiprintf_r+0x36>
 800be94:	2140      	movs	r1, #64	@ 0x40
 800be96:	f7ff ff09 	bl	800bcac <_malloc_r>
 800be9a:	6028      	str	r0, [r5, #0]
 800be9c:	6128      	str	r0, [r5, #16]
 800be9e:	b930      	cbnz	r0, 800beae <_svfiprintf_r+0x32>
 800bea0:	230c      	movs	r3, #12
 800bea2:	603b      	str	r3, [r7, #0]
 800bea4:	f04f 30ff 	mov.w	r0, #4294967295
 800bea8:	b01d      	add	sp, #116	@ 0x74
 800beaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beae:	2340      	movs	r3, #64	@ 0x40
 800beb0:	616b      	str	r3, [r5, #20]
 800beb2:	2300      	movs	r3, #0
 800beb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800beb6:	2320      	movs	r3, #32
 800beb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bebc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bec0:	2330      	movs	r3, #48	@ 0x30
 800bec2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c060 <_svfiprintf_r+0x1e4>
 800bec6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800beca:	f04f 0901 	mov.w	r9, #1
 800bece:	4623      	mov	r3, r4
 800bed0:	469a      	mov	sl, r3
 800bed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bed6:	b10a      	cbz	r2, 800bedc <_svfiprintf_r+0x60>
 800bed8:	2a25      	cmp	r2, #37	@ 0x25
 800beda:	d1f9      	bne.n	800bed0 <_svfiprintf_r+0x54>
 800bedc:	ebba 0b04 	subs.w	fp, sl, r4
 800bee0:	d00b      	beq.n	800befa <_svfiprintf_r+0x7e>
 800bee2:	465b      	mov	r3, fp
 800bee4:	4622      	mov	r2, r4
 800bee6:	4629      	mov	r1, r5
 800bee8:	4638      	mov	r0, r7
 800beea:	f7ff ff6b 	bl	800bdc4 <__ssputs_r>
 800beee:	3001      	adds	r0, #1
 800bef0:	f000 80a7 	beq.w	800c042 <_svfiprintf_r+0x1c6>
 800bef4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bef6:	445a      	add	r2, fp
 800bef8:	9209      	str	r2, [sp, #36]	@ 0x24
 800befa:	f89a 3000 	ldrb.w	r3, [sl]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	f000 809f 	beq.w	800c042 <_svfiprintf_r+0x1c6>
 800bf04:	2300      	movs	r3, #0
 800bf06:	f04f 32ff 	mov.w	r2, #4294967295
 800bf0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf0e:	f10a 0a01 	add.w	sl, sl, #1
 800bf12:	9304      	str	r3, [sp, #16]
 800bf14:	9307      	str	r3, [sp, #28]
 800bf16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf1a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf1c:	4654      	mov	r4, sl
 800bf1e:	2205      	movs	r2, #5
 800bf20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf24:	484e      	ldr	r0, [pc, #312]	@ (800c060 <_svfiprintf_r+0x1e4>)
 800bf26:	f7f4 f95b 	bl	80001e0 <memchr>
 800bf2a:	9a04      	ldr	r2, [sp, #16]
 800bf2c:	b9d8      	cbnz	r0, 800bf66 <_svfiprintf_r+0xea>
 800bf2e:	06d0      	lsls	r0, r2, #27
 800bf30:	bf44      	itt	mi
 800bf32:	2320      	movmi	r3, #32
 800bf34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf38:	0711      	lsls	r1, r2, #28
 800bf3a:	bf44      	itt	mi
 800bf3c:	232b      	movmi	r3, #43	@ 0x2b
 800bf3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf42:	f89a 3000 	ldrb.w	r3, [sl]
 800bf46:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf48:	d015      	beq.n	800bf76 <_svfiprintf_r+0xfa>
 800bf4a:	9a07      	ldr	r2, [sp, #28]
 800bf4c:	4654      	mov	r4, sl
 800bf4e:	2000      	movs	r0, #0
 800bf50:	f04f 0c0a 	mov.w	ip, #10
 800bf54:	4621      	mov	r1, r4
 800bf56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf5a:	3b30      	subs	r3, #48	@ 0x30
 800bf5c:	2b09      	cmp	r3, #9
 800bf5e:	d94b      	bls.n	800bff8 <_svfiprintf_r+0x17c>
 800bf60:	b1b0      	cbz	r0, 800bf90 <_svfiprintf_r+0x114>
 800bf62:	9207      	str	r2, [sp, #28]
 800bf64:	e014      	b.n	800bf90 <_svfiprintf_r+0x114>
 800bf66:	eba0 0308 	sub.w	r3, r0, r8
 800bf6a:	fa09 f303 	lsl.w	r3, r9, r3
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	9304      	str	r3, [sp, #16]
 800bf72:	46a2      	mov	sl, r4
 800bf74:	e7d2      	b.n	800bf1c <_svfiprintf_r+0xa0>
 800bf76:	9b03      	ldr	r3, [sp, #12]
 800bf78:	1d19      	adds	r1, r3, #4
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	9103      	str	r1, [sp, #12]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	bfbb      	ittet	lt
 800bf82:	425b      	neglt	r3, r3
 800bf84:	f042 0202 	orrlt.w	r2, r2, #2
 800bf88:	9307      	strge	r3, [sp, #28]
 800bf8a:	9307      	strlt	r3, [sp, #28]
 800bf8c:	bfb8      	it	lt
 800bf8e:	9204      	strlt	r2, [sp, #16]
 800bf90:	7823      	ldrb	r3, [r4, #0]
 800bf92:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf94:	d10a      	bne.n	800bfac <_svfiprintf_r+0x130>
 800bf96:	7863      	ldrb	r3, [r4, #1]
 800bf98:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf9a:	d132      	bne.n	800c002 <_svfiprintf_r+0x186>
 800bf9c:	9b03      	ldr	r3, [sp, #12]
 800bf9e:	1d1a      	adds	r2, r3, #4
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	9203      	str	r2, [sp, #12]
 800bfa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfa8:	3402      	adds	r4, #2
 800bfaa:	9305      	str	r3, [sp, #20]
 800bfac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c070 <_svfiprintf_r+0x1f4>
 800bfb0:	7821      	ldrb	r1, [r4, #0]
 800bfb2:	2203      	movs	r2, #3
 800bfb4:	4650      	mov	r0, sl
 800bfb6:	f7f4 f913 	bl	80001e0 <memchr>
 800bfba:	b138      	cbz	r0, 800bfcc <_svfiprintf_r+0x150>
 800bfbc:	9b04      	ldr	r3, [sp, #16]
 800bfbe:	eba0 000a 	sub.w	r0, r0, sl
 800bfc2:	2240      	movs	r2, #64	@ 0x40
 800bfc4:	4082      	lsls	r2, r0
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	3401      	adds	r4, #1
 800bfca:	9304      	str	r3, [sp, #16]
 800bfcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfd0:	4824      	ldr	r0, [pc, #144]	@ (800c064 <_svfiprintf_r+0x1e8>)
 800bfd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfd6:	2206      	movs	r2, #6
 800bfd8:	f7f4 f902 	bl	80001e0 <memchr>
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	d036      	beq.n	800c04e <_svfiprintf_r+0x1d2>
 800bfe0:	4b21      	ldr	r3, [pc, #132]	@ (800c068 <_svfiprintf_r+0x1ec>)
 800bfe2:	bb1b      	cbnz	r3, 800c02c <_svfiprintf_r+0x1b0>
 800bfe4:	9b03      	ldr	r3, [sp, #12]
 800bfe6:	3307      	adds	r3, #7
 800bfe8:	f023 0307 	bic.w	r3, r3, #7
 800bfec:	3308      	adds	r3, #8
 800bfee:	9303      	str	r3, [sp, #12]
 800bff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bff2:	4433      	add	r3, r6
 800bff4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bff6:	e76a      	b.n	800bece <_svfiprintf_r+0x52>
 800bff8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bffc:	460c      	mov	r4, r1
 800bffe:	2001      	movs	r0, #1
 800c000:	e7a8      	b.n	800bf54 <_svfiprintf_r+0xd8>
 800c002:	2300      	movs	r3, #0
 800c004:	3401      	adds	r4, #1
 800c006:	9305      	str	r3, [sp, #20]
 800c008:	4619      	mov	r1, r3
 800c00a:	f04f 0c0a 	mov.w	ip, #10
 800c00e:	4620      	mov	r0, r4
 800c010:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c014:	3a30      	subs	r2, #48	@ 0x30
 800c016:	2a09      	cmp	r2, #9
 800c018:	d903      	bls.n	800c022 <_svfiprintf_r+0x1a6>
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d0c6      	beq.n	800bfac <_svfiprintf_r+0x130>
 800c01e:	9105      	str	r1, [sp, #20]
 800c020:	e7c4      	b.n	800bfac <_svfiprintf_r+0x130>
 800c022:	fb0c 2101 	mla	r1, ip, r1, r2
 800c026:	4604      	mov	r4, r0
 800c028:	2301      	movs	r3, #1
 800c02a:	e7f0      	b.n	800c00e <_svfiprintf_r+0x192>
 800c02c:	ab03      	add	r3, sp, #12
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	462a      	mov	r2, r5
 800c032:	4b0e      	ldr	r3, [pc, #56]	@ (800c06c <_svfiprintf_r+0x1f0>)
 800c034:	a904      	add	r1, sp, #16
 800c036:	4638      	mov	r0, r7
 800c038:	f3af 8000 	nop.w
 800c03c:	1c42      	adds	r2, r0, #1
 800c03e:	4606      	mov	r6, r0
 800c040:	d1d6      	bne.n	800bff0 <_svfiprintf_r+0x174>
 800c042:	89ab      	ldrh	r3, [r5, #12]
 800c044:	065b      	lsls	r3, r3, #25
 800c046:	f53f af2d 	bmi.w	800bea4 <_svfiprintf_r+0x28>
 800c04a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c04c:	e72c      	b.n	800bea8 <_svfiprintf_r+0x2c>
 800c04e:	ab03      	add	r3, sp, #12
 800c050:	9300      	str	r3, [sp, #0]
 800c052:	462a      	mov	r2, r5
 800c054:	4b05      	ldr	r3, [pc, #20]	@ (800c06c <_svfiprintf_r+0x1f0>)
 800c056:	a904      	add	r1, sp, #16
 800c058:	4638      	mov	r0, r7
 800c05a:	f000 f879 	bl	800c150 <_printf_i>
 800c05e:	e7ed      	b.n	800c03c <_svfiprintf_r+0x1c0>
 800c060:	0800c5b8 	.word	0x0800c5b8
 800c064:	0800c5c2 	.word	0x0800c5c2
 800c068:	00000000 	.word	0x00000000
 800c06c:	0800bdc5 	.word	0x0800bdc5
 800c070:	0800c5be 	.word	0x0800c5be

0800c074 <_printf_common>:
 800c074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c078:	4616      	mov	r6, r2
 800c07a:	4698      	mov	r8, r3
 800c07c:	688a      	ldr	r2, [r1, #8]
 800c07e:	690b      	ldr	r3, [r1, #16]
 800c080:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c084:	4293      	cmp	r3, r2
 800c086:	bfb8      	it	lt
 800c088:	4613      	movlt	r3, r2
 800c08a:	6033      	str	r3, [r6, #0]
 800c08c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c090:	4607      	mov	r7, r0
 800c092:	460c      	mov	r4, r1
 800c094:	b10a      	cbz	r2, 800c09a <_printf_common+0x26>
 800c096:	3301      	adds	r3, #1
 800c098:	6033      	str	r3, [r6, #0]
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	0699      	lsls	r1, r3, #26
 800c09e:	bf42      	ittt	mi
 800c0a0:	6833      	ldrmi	r3, [r6, #0]
 800c0a2:	3302      	addmi	r3, #2
 800c0a4:	6033      	strmi	r3, [r6, #0]
 800c0a6:	6825      	ldr	r5, [r4, #0]
 800c0a8:	f015 0506 	ands.w	r5, r5, #6
 800c0ac:	d106      	bne.n	800c0bc <_printf_common+0x48>
 800c0ae:	f104 0a19 	add.w	sl, r4, #25
 800c0b2:	68e3      	ldr	r3, [r4, #12]
 800c0b4:	6832      	ldr	r2, [r6, #0]
 800c0b6:	1a9b      	subs	r3, r3, r2
 800c0b8:	42ab      	cmp	r3, r5
 800c0ba:	dc26      	bgt.n	800c10a <_printf_common+0x96>
 800c0bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c0c0:	6822      	ldr	r2, [r4, #0]
 800c0c2:	3b00      	subs	r3, #0
 800c0c4:	bf18      	it	ne
 800c0c6:	2301      	movne	r3, #1
 800c0c8:	0692      	lsls	r2, r2, #26
 800c0ca:	d42b      	bmi.n	800c124 <_printf_common+0xb0>
 800c0cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c0d0:	4641      	mov	r1, r8
 800c0d2:	4638      	mov	r0, r7
 800c0d4:	47c8      	blx	r9
 800c0d6:	3001      	adds	r0, #1
 800c0d8:	d01e      	beq.n	800c118 <_printf_common+0xa4>
 800c0da:	6823      	ldr	r3, [r4, #0]
 800c0dc:	6922      	ldr	r2, [r4, #16]
 800c0de:	f003 0306 	and.w	r3, r3, #6
 800c0e2:	2b04      	cmp	r3, #4
 800c0e4:	bf02      	ittt	eq
 800c0e6:	68e5      	ldreq	r5, [r4, #12]
 800c0e8:	6833      	ldreq	r3, [r6, #0]
 800c0ea:	1aed      	subeq	r5, r5, r3
 800c0ec:	68a3      	ldr	r3, [r4, #8]
 800c0ee:	bf0c      	ite	eq
 800c0f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0f4:	2500      	movne	r5, #0
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	bfc4      	itt	gt
 800c0fa:	1a9b      	subgt	r3, r3, r2
 800c0fc:	18ed      	addgt	r5, r5, r3
 800c0fe:	2600      	movs	r6, #0
 800c100:	341a      	adds	r4, #26
 800c102:	42b5      	cmp	r5, r6
 800c104:	d11a      	bne.n	800c13c <_printf_common+0xc8>
 800c106:	2000      	movs	r0, #0
 800c108:	e008      	b.n	800c11c <_printf_common+0xa8>
 800c10a:	2301      	movs	r3, #1
 800c10c:	4652      	mov	r2, sl
 800c10e:	4641      	mov	r1, r8
 800c110:	4638      	mov	r0, r7
 800c112:	47c8      	blx	r9
 800c114:	3001      	adds	r0, #1
 800c116:	d103      	bne.n	800c120 <_printf_common+0xac>
 800c118:	f04f 30ff 	mov.w	r0, #4294967295
 800c11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c120:	3501      	adds	r5, #1
 800c122:	e7c6      	b.n	800c0b2 <_printf_common+0x3e>
 800c124:	18e1      	adds	r1, r4, r3
 800c126:	1c5a      	adds	r2, r3, #1
 800c128:	2030      	movs	r0, #48	@ 0x30
 800c12a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c12e:	4422      	add	r2, r4
 800c130:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c134:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c138:	3302      	adds	r3, #2
 800c13a:	e7c7      	b.n	800c0cc <_printf_common+0x58>
 800c13c:	2301      	movs	r3, #1
 800c13e:	4622      	mov	r2, r4
 800c140:	4641      	mov	r1, r8
 800c142:	4638      	mov	r0, r7
 800c144:	47c8      	blx	r9
 800c146:	3001      	adds	r0, #1
 800c148:	d0e6      	beq.n	800c118 <_printf_common+0xa4>
 800c14a:	3601      	adds	r6, #1
 800c14c:	e7d9      	b.n	800c102 <_printf_common+0x8e>
	...

0800c150 <_printf_i>:
 800c150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c154:	7e0f      	ldrb	r7, [r1, #24]
 800c156:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c158:	2f78      	cmp	r7, #120	@ 0x78
 800c15a:	4691      	mov	r9, r2
 800c15c:	4680      	mov	r8, r0
 800c15e:	460c      	mov	r4, r1
 800c160:	469a      	mov	sl, r3
 800c162:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c166:	d807      	bhi.n	800c178 <_printf_i+0x28>
 800c168:	2f62      	cmp	r7, #98	@ 0x62
 800c16a:	d80a      	bhi.n	800c182 <_printf_i+0x32>
 800c16c:	2f00      	cmp	r7, #0
 800c16e:	f000 80d2 	beq.w	800c316 <_printf_i+0x1c6>
 800c172:	2f58      	cmp	r7, #88	@ 0x58
 800c174:	f000 80b9 	beq.w	800c2ea <_printf_i+0x19a>
 800c178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c17c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c180:	e03a      	b.n	800c1f8 <_printf_i+0xa8>
 800c182:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c186:	2b15      	cmp	r3, #21
 800c188:	d8f6      	bhi.n	800c178 <_printf_i+0x28>
 800c18a:	a101      	add	r1, pc, #4	@ (adr r1, 800c190 <_printf_i+0x40>)
 800c18c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c190:	0800c1e9 	.word	0x0800c1e9
 800c194:	0800c1fd 	.word	0x0800c1fd
 800c198:	0800c179 	.word	0x0800c179
 800c19c:	0800c179 	.word	0x0800c179
 800c1a0:	0800c179 	.word	0x0800c179
 800c1a4:	0800c179 	.word	0x0800c179
 800c1a8:	0800c1fd 	.word	0x0800c1fd
 800c1ac:	0800c179 	.word	0x0800c179
 800c1b0:	0800c179 	.word	0x0800c179
 800c1b4:	0800c179 	.word	0x0800c179
 800c1b8:	0800c179 	.word	0x0800c179
 800c1bc:	0800c2fd 	.word	0x0800c2fd
 800c1c0:	0800c227 	.word	0x0800c227
 800c1c4:	0800c2b7 	.word	0x0800c2b7
 800c1c8:	0800c179 	.word	0x0800c179
 800c1cc:	0800c179 	.word	0x0800c179
 800c1d0:	0800c31f 	.word	0x0800c31f
 800c1d4:	0800c179 	.word	0x0800c179
 800c1d8:	0800c227 	.word	0x0800c227
 800c1dc:	0800c179 	.word	0x0800c179
 800c1e0:	0800c179 	.word	0x0800c179
 800c1e4:	0800c2bf 	.word	0x0800c2bf
 800c1e8:	6833      	ldr	r3, [r6, #0]
 800c1ea:	1d1a      	adds	r2, r3, #4
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	6032      	str	r2, [r6, #0]
 800c1f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	e09d      	b.n	800c338 <_printf_i+0x1e8>
 800c1fc:	6833      	ldr	r3, [r6, #0]
 800c1fe:	6820      	ldr	r0, [r4, #0]
 800c200:	1d19      	adds	r1, r3, #4
 800c202:	6031      	str	r1, [r6, #0]
 800c204:	0606      	lsls	r6, r0, #24
 800c206:	d501      	bpl.n	800c20c <_printf_i+0xbc>
 800c208:	681d      	ldr	r5, [r3, #0]
 800c20a:	e003      	b.n	800c214 <_printf_i+0xc4>
 800c20c:	0645      	lsls	r5, r0, #25
 800c20e:	d5fb      	bpl.n	800c208 <_printf_i+0xb8>
 800c210:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c214:	2d00      	cmp	r5, #0
 800c216:	da03      	bge.n	800c220 <_printf_i+0xd0>
 800c218:	232d      	movs	r3, #45	@ 0x2d
 800c21a:	426d      	negs	r5, r5
 800c21c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c220:	4859      	ldr	r0, [pc, #356]	@ (800c388 <_printf_i+0x238>)
 800c222:	230a      	movs	r3, #10
 800c224:	e011      	b.n	800c24a <_printf_i+0xfa>
 800c226:	6821      	ldr	r1, [r4, #0]
 800c228:	6833      	ldr	r3, [r6, #0]
 800c22a:	0608      	lsls	r0, r1, #24
 800c22c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c230:	d402      	bmi.n	800c238 <_printf_i+0xe8>
 800c232:	0649      	lsls	r1, r1, #25
 800c234:	bf48      	it	mi
 800c236:	b2ad      	uxthmi	r5, r5
 800c238:	2f6f      	cmp	r7, #111	@ 0x6f
 800c23a:	4853      	ldr	r0, [pc, #332]	@ (800c388 <_printf_i+0x238>)
 800c23c:	6033      	str	r3, [r6, #0]
 800c23e:	bf14      	ite	ne
 800c240:	230a      	movne	r3, #10
 800c242:	2308      	moveq	r3, #8
 800c244:	2100      	movs	r1, #0
 800c246:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c24a:	6866      	ldr	r6, [r4, #4]
 800c24c:	60a6      	str	r6, [r4, #8]
 800c24e:	2e00      	cmp	r6, #0
 800c250:	bfa2      	ittt	ge
 800c252:	6821      	ldrge	r1, [r4, #0]
 800c254:	f021 0104 	bicge.w	r1, r1, #4
 800c258:	6021      	strge	r1, [r4, #0]
 800c25a:	b90d      	cbnz	r5, 800c260 <_printf_i+0x110>
 800c25c:	2e00      	cmp	r6, #0
 800c25e:	d04b      	beq.n	800c2f8 <_printf_i+0x1a8>
 800c260:	4616      	mov	r6, r2
 800c262:	fbb5 f1f3 	udiv	r1, r5, r3
 800c266:	fb03 5711 	mls	r7, r3, r1, r5
 800c26a:	5dc7      	ldrb	r7, [r0, r7]
 800c26c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c270:	462f      	mov	r7, r5
 800c272:	42bb      	cmp	r3, r7
 800c274:	460d      	mov	r5, r1
 800c276:	d9f4      	bls.n	800c262 <_printf_i+0x112>
 800c278:	2b08      	cmp	r3, #8
 800c27a:	d10b      	bne.n	800c294 <_printf_i+0x144>
 800c27c:	6823      	ldr	r3, [r4, #0]
 800c27e:	07df      	lsls	r7, r3, #31
 800c280:	d508      	bpl.n	800c294 <_printf_i+0x144>
 800c282:	6923      	ldr	r3, [r4, #16]
 800c284:	6861      	ldr	r1, [r4, #4]
 800c286:	4299      	cmp	r1, r3
 800c288:	bfde      	ittt	le
 800c28a:	2330      	movle	r3, #48	@ 0x30
 800c28c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c290:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c294:	1b92      	subs	r2, r2, r6
 800c296:	6122      	str	r2, [r4, #16]
 800c298:	f8cd a000 	str.w	sl, [sp]
 800c29c:	464b      	mov	r3, r9
 800c29e:	aa03      	add	r2, sp, #12
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	4640      	mov	r0, r8
 800c2a4:	f7ff fee6 	bl	800c074 <_printf_common>
 800c2a8:	3001      	adds	r0, #1
 800c2aa:	d14a      	bne.n	800c342 <_printf_i+0x1f2>
 800c2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b0:	b004      	add	sp, #16
 800c2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b6:	6823      	ldr	r3, [r4, #0]
 800c2b8:	f043 0320 	orr.w	r3, r3, #32
 800c2bc:	6023      	str	r3, [r4, #0]
 800c2be:	4833      	ldr	r0, [pc, #204]	@ (800c38c <_printf_i+0x23c>)
 800c2c0:	2778      	movs	r7, #120	@ 0x78
 800c2c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c2c6:	6823      	ldr	r3, [r4, #0]
 800c2c8:	6831      	ldr	r1, [r6, #0]
 800c2ca:	061f      	lsls	r7, r3, #24
 800c2cc:	f851 5b04 	ldr.w	r5, [r1], #4
 800c2d0:	d402      	bmi.n	800c2d8 <_printf_i+0x188>
 800c2d2:	065f      	lsls	r7, r3, #25
 800c2d4:	bf48      	it	mi
 800c2d6:	b2ad      	uxthmi	r5, r5
 800c2d8:	6031      	str	r1, [r6, #0]
 800c2da:	07d9      	lsls	r1, r3, #31
 800c2dc:	bf44      	itt	mi
 800c2de:	f043 0320 	orrmi.w	r3, r3, #32
 800c2e2:	6023      	strmi	r3, [r4, #0]
 800c2e4:	b11d      	cbz	r5, 800c2ee <_printf_i+0x19e>
 800c2e6:	2310      	movs	r3, #16
 800c2e8:	e7ac      	b.n	800c244 <_printf_i+0xf4>
 800c2ea:	4827      	ldr	r0, [pc, #156]	@ (800c388 <_printf_i+0x238>)
 800c2ec:	e7e9      	b.n	800c2c2 <_printf_i+0x172>
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	f023 0320 	bic.w	r3, r3, #32
 800c2f4:	6023      	str	r3, [r4, #0]
 800c2f6:	e7f6      	b.n	800c2e6 <_printf_i+0x196>
 800c2f8:	4616      	mov	r6, r2
 800c2fa:	e7bd      	b.n	800c278 <_printf_i+0x128>
 800c2fc:	6833      	ldr	r3, [r6, #0]
 800c2fe:	6825      	ldr	r5, [r4, #0]
 800c300:	6961      	ldr	r1, [r4, #20]
 800c302:	1d18      	adds	r0, r3, #4
 800c304:	6030      	str	r0, [r6, #0]
 800c306:	062e      	lsls	r6, r5, #24
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	d501      	bpl.n	800c310 <_printf_i+0x1c0>
 800c30c:	6019      	str	r1, [r3, #0]
 800c30e:	e002      	b.n	800c316 <_printf_i+0x1c6>
 800c310:	0668      	lsls	r0, r5, #25
 800c312:	d5fb      	bpl.n	800c30c <_printf_i+0x1bc>
 800c314:	8019      	strh	r1, [r3, #0]
 800c316:	2300      	movs	r3, #0
 800c318:	6123      	str	r3, [r4, #16]
 800c31a:	4616      	mov	r6, r2
 800c31c:	e7bc      	b.n	800c298 <_printf_i+0x148>
 800c31e:	6833      	ldr	r3, [r6, #0]
 800c320:	1d1a      	adds	r2, r3, #4
 800c322:	6032      	str	r2, [r6, #0]
 800c324:	681e      	ldr	r6, [r3, #0]
 800c326:	6862      	ldr	r2, [r4, #4]
 800c328:	2100      	movs	r1, #0
 800c32a:	4630      	mov	r0, r6
 800c32c:	f7f3 ff58 	bl	80001e0 <memchr>
 800c330:	b108      	cbz	r0, 800c336 <_printf_i+0x1e6>
 800c332:	1b80      	subs	r0, r0, r6
 800c334:	6060      	str	r0, [r4, #4]
 800c336:	6863      	ldr	r3, [r4, #4]
 800c338:	6123      	str	r3, [r4, #16]
 800c33a:	2300      	movs	r3, #0
 800c33c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c340:	e7aa      	b.n	800c298 <_printf_i+0x148>
 800c342:	6923      	ldr	r3, [r4, #16]
 800c344:	4632      	mov	r2, r6
 800c346:	4649      	mov	r1, r9
 800c348:	4640      	mov	r0, r8
 800c34a:	47d0      	blx	sl
 800c34c:	3001      	adds	r0, #1
 800c34e:	d0ad      	beq.n	800c2ac <_printf_i+0x15c>
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	079b      	lsls	r3, r3, #30
 800c354:	d413      	bmi.n	800c37e <_printf_i+0x22e>
 800c356:	68e0      	ldr	r0, [r4, #12]
 800c358:	9b03      	ldr	r3, [sp, #12]
 800c35a:	4298      	cmp	r0, r3
 800c35c:	bfb8      	it	lt
 800c35e:	4618      	movlt	r0, r3
 800c360:	e7a6      	b.n	800c2b0 <_printf_i+0x160>
 800c362:	2301      	movs	r3, #1
 800c364:	4632      	mov	r2, r6
 800c366:	4649      	mov	r1, r9
 800c368:	4640      	mov	r0, r8
 800c36a:	47d0      	blx	sl
 800c36c:	3001      	adds	r0, #1
 800c36e:	d09d      	beq.n	800c2ac <_printf_i+0x15c>
 800c370:	3501      	adds	r5, #1
 800c372:	68e3      	ldr	r3, [r4, #12]
 800c374:	9903      	ldr	r1, [sp, #12]
 800c376:	1a5b      	subs	r3, r3, r1
 800c378:	42ab      	cmp	r3, r5
 800c37a:	dcf2      	bgt.n	800c362 <_printf_i+0x212>
 800c37c:	e7eb      	b.n	800c356 <_printf_i+0x206>
 800c37e:	2500      	movs	r5, #0
 800c380:	f104 0619 	add.w	r6, r4, #25
 800c384:	e7f5      	b.n	800c372 <_printf_i+0x222>
 800c386:	bf00      	nop
 800c388:	0800c5c9 	.word	0x0800c5c9
 800c38c:	0800c5da 	.word	0x0800c5da

0800c390 <memmove>:
 800c390:	4288      	cmp	r0, r1
 800c392:	b510      	push	{r4, lr}
 800c394:	eb01 0402 	add.w	r4, r1, r2
 800c398:	d902      	bls.n	800c3a0 <memmove+0x10>
 800c39a:	4284      	cmp	r4, r0
 800c39c:	4623      	mov	r3, r4
 800c39e:	d807      	bhi.n	800c3b0 <memmove+0x20>
 800c3a0:	1e43      	subs	r3, r0, #1
 800c3a2:	42a1      	cmp	r1, r4
 800c3a4:	d008      	beq.n	800c3b8 <memmove+0x28>
 800c3a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3ae:	e7f8      	b.n	800c3a2 <memmove+0x12>
 800c3b0:	4402      	add	r2, r0
 800c3b2:	4601      	mov	r1, r0
 800c3b4:	428a      	cmp	r2, r1
 800c3b6:	d100      	bne.n	800c3ba <memmove+0x2a>
 800c3b8:	bd10      	pop	{r4, pc}
 800c3ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3c2:	e7f7      	b.n	800c3b4 <memmove+0x24>

0800c3c4 <_sbrk_r>:
 800c3c4:	b538      	push	{r3, r4, r5, lr}
 800c3c6:	4d06      	ldr	r5, [pc, #24]	@ (800c3e0 <_sbrk_r+0x1c>)
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	4608      	mov	r0, r1
 800c3ce:	602b      	str	r3, [r5, #0]
 800c3d0:	f7f7 feac 	bl	800412c <_sbrk>
 800c3d4:	1c43      	adds	r3, r0, #1
 800c3d6:	d102      	bne.n	800c3de <_sbrk_r+0x1a>
 800c3d8:	682b      	ldr	r3, [r5, #0]
 800c3da:	b103      	cbz	r3, 800c3de <_sbrk_r+0x1a>
 800c3dc:	6023      	str	r3, [r4, #0]
 800c3de:	bd38      	pop	{r3, r4, r5, pc}
 800c3e0:	20000c04 	.word	0x20000c04

0800c3e4 <memcpy>:
 800c3e4:	440a      	add	r2, r1
 800c3e6:	4291      	cmp	r1, r2
 800c3e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3ec:	d100      	bne.n	800c3f0 <memcpy+0xc>
 800c3ee:	4770      	bx	lr
 800c3f0:	b510      	push	{r4, lr}
 800c3f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3fa:	4291      	cmp	r1, r2
 800c3fc:	d1f9      	bne.n	800c3f2 <memcpy+0xe>
 800c3fe:	bd10      	pop	{r4, pc}

0800c400 <_realloc_r>:
 800c400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c404:	4680      	mov	r8, r0
 800c406:	4615      	mov	r5, r2
 800c408:	460c      	mov	r4, r1
 800c40a:	b921      	cbnz	r1, 800c416 <_realloc_r+0x16>
 800c40c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c410:	4611      	mov	r1, r2
 800c412:	f7ff bc4b 	b.w	800bcac <_malloc_r>
 800c416:	b92a      	cbnz	r2, 800c424 <_realloc_r+0x24>
 800c418:	f7ff fbdc 	bl	800bbd4 <_free_r>
 800c41c:	2400      	movs	r4, #0
 800c41e:	4620      	mov	r0, r4
 800c420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c424:	f000 f81a 	bl	800c45c <_malloc_usable_size_r>
 800c428:	4285      	cmp	r5, r0
 800c42a:	4606      	mov	r6, r0
 800c42c:	d802      	bhi.n	800c434 <_realloc_r+0x34>
 800c42e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c432:	d8f4      	bhi.n	800c41e <_realloc_r+0x1e>
 800c434:	4629      	mov	r1, r5
 800c436:	4640      	mov	r0, r8
 800c438:	f7ff fc38 	bl	800bcac <_malloc_r>
 800c43c:	4607      	mov	r7, r0
 800c43e:	2800      	cmp	r0, #0
 800c440:	d0ec      	beq.n	800c41c <_realloc_r+0x1c>
 800c442:	42b5      	cmp	r5, r6
 800c444:	462a      	mov	r2, r5
 800c446:	4621      	mov	r1, r4
 800c448:	bf28      	it	cs
 800c44a:	4632      	movcs	r2, r6
 800c44c:	f7ff ffca 	bl	800c3e4 <memcpy>
 800c450:	4621      	mov	r1, r4
 800c452:	4640      	mov	r0, r8
 800c454:	f7ff fbbe 	bl	800bbd4 <_free_r>
 800c458:	463c      	mov	r4, r7
 800c45a:	e7e0      	b.n	800c41e <_realloc_r+0x1e>

0800c45c <_malloc_usable_size_r>:
 800c45c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c460:	1f18      	subs	r0, r3, #4
 800c462:	2b00      	cmp	r3, #0
 800c464:	bfbc      	itt	lt
 800c466:	580b      	ldrlt	r3, [r1, r0]
 800c468:	18c0      	addlt	r0, r0, r3
 800c46a:	4770      	bx	lr

0800c46c <_init>:
 800c46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c46e:	bf00      	nop
 800c470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c472:	bc08      	pop	{r3}
 800c474:	469e      	mov	lr, r3
 800c476:	4770      	bx	lr

0800c478 <_fini>:
 800c478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c47a:	bf00      	nop
 800c47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c47e:	bc08      	pop	{r3}
 800c480:	469e      	mov	lr, r3
 800c482:	4770      	bx	lr
