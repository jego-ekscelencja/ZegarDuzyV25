
ZegarDuzy12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b10  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08006ca4  08006ca4  00007ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d58  08006d58  0000803c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d58  08006d58  00007d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d60  08006d60  0000803c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d60  08006d60  00007d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d64  08006d64  00007d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08006d68  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  2000003c  08006da4  0000803c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08006da4  00008464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018875  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b91  00000000  00000000  000208e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  00024478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000112d  00000000  00000000  00025a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a736  00000000  00000000  00026ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d885  00000000  00000000  000412db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a34d7  00000000  00000000  0005eb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102037  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c3c  00000000  00000000  0010207c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00107cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000003c 	.word	0x2000003c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006c8c 	.word	0x08006c8c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000040 	.word	0x20000040
 80001d0:	08006c8c 	.word	0x08006c8c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004d6:	4b21      	ldr	r3, [pc, #132]	@ (800055c <MX_ADC1_Init+0x98>)
 80004d8:	4a21      	ldr	r2, [pc, #132]	@ (8000560 <MX_ADC1_Init+0x9c>)
 80004da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004dc:	4b1f      	ldr	r3, [pc, #124]	@ (800055c <MX_ADC1_Init+0x98>)
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e2:	4b1e      	ldr	r3, [pc, #120]	@ (800055c <MX_ADC1_Init+0x98>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004e8:	4b1c      	ldr	r3, [pc, #112]	@ (800055c <MX_ADC1_Init+0x98>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ee:	4b1b      	ldr	r3, [pc, #108]	@ (800055c <MX_ADC1_Init+0x98>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f4:	4b19      	ldr	r3, [pc, #100]	@ (800055c <MX_ADC1_Init+0x98>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fc:	4b17      	ldr	r3, [pc, #92]	@ (800055c <MX_ADC1_Init+0x98>)
 80004fe:	2200      	movs	r2, #0
 8000500:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000502:	4b16      	ldr	r3, [pc, #88]	@ (800055c <MX_ADC1_Init+0x98>)
 8000504:	4a17      	ldr	r2, [pc, #92]	@ (8000564 <MX_ADC1_Init+0xa0>)
 8000506:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000508:	4b14      	ldr	r3, [pc, #80]	@ (800055c <MX_ADC1_Init+0x98>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800050e:	4b13      	ldr	r3, [pc, #76]	@ (800055c <MX_ADC1_Init+0x98>)
 8000510:	2201      	movs	r2, #1
 8000512:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000514:	4b11      	ldr	r3, [pc, #68]	@ (800055c <MX_ADC1_Init+0x98>)
 8000516:	2200      	movs	r2, #0
 8000518:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051c:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <MX_ADC1_Init+0x98>)
 800051e:	2201      	movs	r2, #1
 8000520:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000522:	480e      	ldr	r0, [pc, #56]	@ (800055c <MX_ADC1_Init+0x98>)
 8000524:	f002 f89e 	bl	8002664 <HAL_ADC_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800052e:	f001 fb35 	bl	8001b9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000532:	2303      	movs	r3, #3
 8000534:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053e:	463b      	mov	r3, r7
 8000540:	4619      	mov	r1, r3
 8000542:	4806      	ldr	r0, [pc, #24]	@ (800055c <MX_ADC1_Init+0x98>)
 8000544:	f002 f986 	bl	8002854 <HAL_ADC_ConfigChannel>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800054e:	f001 fb25 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000058 	.word	0x20000058
 8000560:	40012000 	.word	0x40012000
 8000564:	0f000001 	.word	0x0f000001

08000568 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	@ 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a17      	ldr	r2, [pc, #92]	@ (80005e4 <HAL_ADC_MspInit+0x7c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d127      	bne.n	80005da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 8000590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000592:	4a15      	ldr	r2, [pc, #84]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 8000594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000598:	6453      	str	r3, [r2, #68]	@ 0x44
 800059a:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 800059c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800059e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a0e      	ldr	r2, [pc, #56]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005c2:	2308      	movs	r3, #8
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c6:	2303      	movs	r3, #3
 80005c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	@ (80005ec <HAL_ADC_MspInit+0x84>)
 80005d6:	f002 ffff 	bl	80035d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005da:	bf00      	nop
 80005dc:	3728      	adds	r7, #40	@ 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40012000 	.word	0x40012000
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020000 	.word	0x40020000

080005f0 <Button_RegisterPressCallback>:
		0, 0, 0, false, 0, 0, false, NULL, NULL, NULL, NULL, NULL } //,
		//{BUTTON2_PORT, BUTTON2_PIN, BUTTON_RELEASED, 0, 0, 0, false, 0, 0, false, NULL, NULL, NULL, NULL, NULL}
};

// Implementacja funkcji rejestrujących callbacky
void Button_RegisterPressCallback(uint8_t buttonIndex, ButtonCallback cb) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d109      	bne.n	8000616 <Button_RegisterPressCallback+0x26>
		buttons[buttonIndex].onPress = cb;
 8000602:	79fa      	ldrb	r2, [r7, #7]
 8000604:	4907      	ldr	r1, [pc, #28]	@ (8000624 <Button_RegisterPressCallback+0x34>)
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	440b      	add	r3, r1
 8000610:	331c      	adds	r3, #28
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	601a      	str	r2, [r3, #0]
	}
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000000 	.word	0x20000000

08000628 <Button_RegisterHoldCallback>:
	if (buttonIndex < NUM_BUTTONS) {
		buttons[buttonIndex].onRelease = cb;
	}
}

void Button_RegisterHoldCallback(uint8_t buttonIndex, ButtonCallback cb) {
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d109      	bne.n	800064e <Button_RegisterHoldCallback+0x26>
		buttons[buttonIndex].onHold = cb;
 800063a:	79fa      	ldrb	r2, [r7, #7]
 800063c:	4907      	ldr	r1, [pc, #28]	@ (800065c <Button_RegisterHoldCallback+0x34>)
 800063e:	4613      	mov	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4413      	add	r3, r2
 8000644:	011b      	lsls	r3, r3, #4
 8000646:	440b      	add	r3, r1
 8000648:	3324      	adds	r3, #36	@ 0x24
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	601a      	str	r2, [r3, #0]
	}
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000000 	.word	0x20000000

08000660 <Button_RegisterDoubleClickCallback>:
	if (buttonIndex < NUM_BUTTONS) {
		buttons[buttonIndex].onRepeat = cb;
	}
}

void Button_RegisterDoubleClickCallback(uint8_t buttonIndex, ButtonCallback cb) {
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d109      	bne.n	8000686 <Button_RegisterDoubleClickCallback+0x26>
		buttons[buttonIndex].onDoubleClick = cb;
 8000672:	79fa      	ldrb	r2, [r7, #7]
 8000674:	4907      	ldr	r1, [pc, #28]	@ (8000694 <Button_RegisterDoubleClickCallback+0x34>)
 8000676:	4613      	mov	r3, r2
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	4413      	add	r3, r2
 800067c:	011b      	lsls	r3, r3, #4
 800067e:	440b      	add	r3, r1
 8000680:	332c      	adds	r3, #44	@ 0x2c
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	601a      	str	r2, [r3, #0]
	}
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000000 	.word	0x20000000

08000698 <Button_Process>:

// Logika w przerwaniu timera
extern volatile uint32_t systemTicks;  // Globalny licznik taktów czasu

void Button_Process(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++) {
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	e0d3      	b.n	800084c <Button_Process+0x1b4>
		Button_t *btn = &buttons[i];
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	4613      	mov	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	4413      	add	r3, r2
 80006ac:	011b      	lsls	r3, r3, #4
 80006ae:	4a6c      	ldr	r2, [pc, #432]	@ (8000860 <Button_Process+0x1c8>)
 80006b0:	4413      	add	r3, r2
 80006b2:	60bb      	str	r3, [r7, #8]

		// Odczytaj aktualny stan przycisku
		bool rawState =
				(HAL_GPIO_ReadPin(btn->port, btn->pin) == GPIO_PIN_RESET);
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	889b      	ldrh	r3, [r3, #4]
 80006bc:	4619      	mov	r1, r3
 80006be:	4610      	mov	r0, r2
 80006c0:	f003 f90e 	bl	80038e0 <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
		bool rawState =
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	bf0c      	ite	eq
 80006ca:	2301      	moveq	r3, #1
 80006cc:	2300      	movne	r3, #0
 80006ce:	71fb      	strb	r3, [r7, #7]

		// Debounce
		if (rawState != (btn->state == BUTTON_PRESSED)) {
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	7992      	ldrb	r2, [r2, #6]
 80006d6:	2a01      	cmp	r2, #1
 80006d8:	bf0c      	ite	eq
 80006da:	2201      	moveq	r2, #1
 80006dc:	2200      	movne	r2, #0
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d056      	beq.n	8000792 <Button_Process+0xfa>
			btn->debounceCounter++;
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	79db      	ldrb	r3, [r3, #7]
 80006e8:	3301      	adds	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	71da      	strb	r2, [r3, #7]
			if (btn->debounceCounter >= DEBOUNCE_TICKS) {
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	79db      	ldrb	r3, [r3, #7]
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	d94f      	bls.n	8000798 <Button_Process+0x100>
				btn->debounceCounter = 0;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	2200      	movs	r2, #0
 80006fc:	71da      	strb	r2, [r3, #7]
				if (rawState) {
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d00a      	beq.n	800071a <Button_Process+0x82>
					// Naciśnięcie
					btn->state = BUTTON_PRESSED;
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	2201      	movs	r2, #1
 8000708:	719a      	strb	r2, [r3, #6]
					btn->pressTime = systemTicks;
 800070a:	4b56      	ldr	r3, [pc, #344]	@ (8000864 <Button_Process+0x1cc>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	609a      	str	r2, [r3, #8]
					btn->holdTriggered = false;
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	2200      	movs	r2, #0
 8000716:	741a      	strb	r2, [r3, #16]
 8000718:	e03e      	b.n	8000798 <Button_Process+0x100>
				} else {
					// Puszczenie
					btn->state = BUTTON_RELEASED;
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	2200      	movs	r2, #0
 800071e:	719a      	strb	r2, [r3, #6]

					// Obsługa kliknięć
					if (btn->waitingForDoubleClick) {
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	7e1b      	ldrb	r3, [r3, #24]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d011      	beq.n	800074c <Button_Process+0xb4>
						if ((systemTicks - btn->lastClickTime)
 8000728:	4b4e      	ldr	r3, [pc, #312]	@ (8000864 <Button_Process+0x1cc>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	2b1e      	cmp	r3, #30
 8000734:	d806      	bhi.n	8000744 <Button_Process+0xac>
								<= DOUBLE_CLICK_THRESHOLD) {
							btn->clickCount++;
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	7c5b      	ldrb	r3, [r3, #17]
 800073a:	3301      	adds	r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	745a      	strb	r2, [r3, #17]
 8000742:	e00d      	b.n	8000760 <Button_Process+0xc8>
						} else {
							// Minął czas na dwuklik
							btn->clickCount = 1;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	2201      	movs	r2, #1
 8000748:	745a      	strb	r2, [r3, #17]
 800074a:	e009      	b.n	8000760 <Button_Process+0xc8>
						}
					} else {
						btn->clickCount = 1;
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	2201      	movs	r2, #1
 8000750:	745a      	strb	r2, [r3, #17]
						btn->waitingForDoubleClick = true;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	2201      	movs	r2, #1
 8000756:	761a      	strb	r2, [r3, #24]
						btn->lastClickTime = systemTicks;
 8000758:	4b42      	ldr	r3, [pc, #264]	@ (8000864 <Button_Process+0x1cc>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	615a      	str	r2, [r3, #20]
					}

					if (btn->clickCount == 2) {
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	7c5b      	ldrb	r3, [r3, #17]
 8000764:	2b02      	cmp	r3, #2
 8000766:	d10c      	bne.n	8000782 <Button_Process+0xea>
						// Dwuklik
						btn->waitingForDoubleClick = false;
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	2200      	movs	r2, #0
 800076c:	761a      	strb	r2, [r3, #24]
						btn->clickCount = 0;
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	2200      	movs	r2, #0
 8000772:	745a      	strb	r2, [r3, #17]
						if (btn->onDoubleClick)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <Button_Process+0xea>
							btn->onDoubleClick();
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000780:	4798      	blx	r3
					}

					// Callback onRelease
					if (btn->onRelease)
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	6a1b      	ldr	r3, [r3, #32]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d006      	beq.n	8000798 <Button_Process+0x100>
						btn->onRelease();
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	6a1b      	ldr	r3, [r3, #32]
 800078e:	4798      	blx	r3
 8000790:	e002      	b.n	8000798 <Button_Process+0x100>
				}
			}
		} else {
			btn->debounceCounter = 0;
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	2200      	movs	r2, #0
 8000796:	71da      	strb	r2, [r3, #7]
		}

		// Obsługa timeoutu dwukliku
		if (btn->waitingForDoubleClick
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	7e1b      	ldrb	r3, [r3, #24]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d017      	beq.n	80007d0 <Button_Process+0x138>
				&& ((systemTicks - btn->lastClickTime) > DOUBLE_CLICK_THRESHOLD)) {
 80007a0:	4b30      	ldr	r3, [pc, #192]	@ (8000864 <Button_Process+0x1cc>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	2b1e      	cmp	r3, #30
 80007ac:	d910      	bls.n	80007d0 <Button_Process+0x138>
			if (btn->clickCount == 1) {
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	7c5b      	ldrb	r3, [r3, #17]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d106      	bne.n	80007c4 <Button_Process+0x12c>
				// Pojedynczy klik
				if (btn->onPress)
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <Button_Process+0x12c>
					btn->onPress();
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	4798      	blx	r3
			}
			btn->waitingForDoubleClick = false;
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	2200      	movs	r2, #0
 80007c8:	761a      	strb	r2, [r3, #24]
			btn->clickCount = 0;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	2200      	movs	r2, #0
 80007ce:	745a      	strb	r2, [r3, #17]
		}

		// Obsługa hold i repeat
		if (btn->state == BUTTON_PRESSED) {
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	799b      	ldrb	r3, [r3, #6]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d136      	bne.n	8000846 <Button_Process+0x1ae>
			uint32_t elapsed = systemTicks - btn->pressTime;
 80007d8:	4b22      	ldr	r3, [pc, #136]	@ (8000864 <Button_Process+0x1cc>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	603b      	str	r3, [r7, #0]
			if (!btn->holdTriggered && (elapsed >= HOLD_THRESHOLD)) {
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	7c1b      	ldrb	r3, [r3, #16]
 80007e8:	f083 0301 	eor.w	r3, r3, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d012      	beq.n	8000818 <Button_Process+0x180>
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	2b63      	cmp	r3, #99	@ 0x63
 80007f6:	d90f      	bls.n	8000818 <Button_Process+0x180>
				btn->holdTriggered = true;
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	2201      	movs	r2, #1
 80007fc:	741a      	strb	r2, [r3, #16]
				if (btn->onHold)
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <Button_Process+0x174>
					btn->onHold();
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800080a:	4798      	blx	r3
				btn->nextRepeatTime = systemTicks + REPEAT_INTERVAL;
 800080c:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <Button_Process+0x1cc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f103 0214 	add.w	r2, r3, #20
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	60da      	str	r2, [r3, #12]
			}
			if (btn->holdTriggered && (systemTicks >= btn->nextRepeatTime)) {
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	7c1b      	ldrb	r3, [r3, #16]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d012      	beq.n	8000846 <Button_Process+0x1ae>
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	68da      	ldr	r2, [r3, #12]
 8000824:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <Button_Process+0x1cc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	d80c      	bhi.n	8000846 <Button_Process+0x1ae>
				if (btn->onRepeat)
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <Button_Process+0x1a2>
					btn->onRepeat();
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000838:	4798      	blx	r3
				btn->nextRepeatTime += REPEAT_INTERVAL;
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	f103 0214 	add.w	r2, r3, #20
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	60da      	str	r2, [r3, #12]
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	f77f af28 	ble.w	80006a4 <Button_Process+0xc>
			}
		}
	}
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000000 	.word	0x20000000
 8000864:	200001ec 	.word	0x200001ec

08000868 <HAL_TIM_PeriodElapsedCallback>:

// Funkcja wywoływana w przerwaniu timera
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a06      	ldr	r2, [pc, #24]	@ (8000890 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d104      	bne.n	8000884 <HAL_TIM_PeriodElapsedCallback+0x1c>
		systemTicks++;  // Inkrementacja globalnego licznika czasu
 800087a:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	3301      	adds	r3, #1
 8000880:	4a04      	ldr	r2, [pc, #16]	@ (8000894 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000882:	6013      	str	r3, [r2, #0]
	}
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	40000c00 	.word	0x40000c00
 8000894:	200001ec 	.word	0x200001ec

08000898 <charToSegment>:
//static Bits192 regValue;         // Przechowuje 192 bity rozbite na 12×16

// Implementacja tablicy segmentMap i funkcji charToSegment.
// (Zwykle segmentMap mamy w Display.h jako static const,
//  ale jeśli wolisz mieć ją w .c, możesz przenieść tutaj.)
uint8_t charToSegment(char c) {
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]

    switch (c) {
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	3b2a      	subs	r3, #42	@ 0x2a
 80008a6:	2b50      	cmp	r3, #80	@ 0x50
 80008a8:	f200 80d7 	bhi.w	8000a5a <charToSegment+0x1c2>
 80008ac:	a201      	add	r2, pc, #4	@ (adr r2, 80008b4 <charToSegment+0x1c>)
 80008ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b2:	bf00      	nop
 80008b4:	08000a07 	.word	0x08000a07
 80008b8:	08000a5b 	.word	0x08000a5b
 80008bc:	08000a5b 	.word	0x08000a5b
 80008c0:	08000a03 	.word	0x08000a03
 80008c4:	08000a5b 	.word	0x08000a5b
 80008c8:	08000a5b 	.word	0x08000a5b
 80008cc:	080009f9 	.word	0x080009f9
 80008d0:	080009f9 	.word	0x080009f9
 80008d4:	080009f9 	.word	0x080009f9
 80008d8:	080009f9 	.word	0x080009f9
 80008dc:	080009f9 	.word	0x080009f9
 80008e0:	080009f9 	.word	0x080009f9
 80008e4:	080009f9 	.word	0x080009f9
 80008e8:	080009f9 	.word	0x080009f9
 80008ec:	080009f9 	.word	0x080009f9
 80008f0:	080009f9 	.word	0x080009f9
 80008f4:	08000a5b 	.word	0x08000a5b
 80008f8:	08000a5b 	.word	0x08000a5b
 80008fc:	08000a5b 	.word	0x08000a5b
 8000900:	08000a5b 	.word	0x08000a5b
 8000904:	08000a5b 	.word	0x08000a5b
 8000908:	08000a5b 	.word	0x08000a5b
 800090c:	08000a5b 	.word	0x08000a5b
 8000910:	08000a23 	.word	0x08000a23
 8000914:	08000a57 	.word	0x08000a57
 8000918:	08000a0b 	.word	0x08000a0b
 800091c:	08000a5b 	.word	0x08000a5b
 8000920:	08000a37 	.word	0x08000a37
 8000924:	08000a1f 	.word	0x08000a1f
 8000928:	08000a5b 	.word	0x08000a5b
 800092c:	08000a5b 	.word	0x08000a5b
 8000930:	08000a5b 	.word	0x08000a5b
 8000934:	08000a5b 	.word	0x08000a5b
 8000938:	08000a5b 	.word	0x08000a5b
 800093c:	08000a4f 	.word	0x08000a4f
 8000940:	08000a5b 	.word	0x08000a5b
 8000944:	08000a2f 	.word	0x08000a2f
 8000948:	08000a47 	.word	0x08000a47
 800094c:	08000a3f 	.word	0x08000a3f
 8000950:	08000a5b 	.word	0x08000a5b
 8000954:	08000a13 	.word	0x08000a13
 8000958:	08000a1b 	.word	0x08000a1b
 800095c:	08000a5b 	.word	0x08000a5b
 8000960:	08000a2b 	.word	0x08000a2b
 8000964:	08000a2b 	.word	0x08000a2b
 8000968:	08000a4b 	.word	0x08000a4b
 800096c:	08000a5b 	.word	0x08000a5b
 8000970:	08000a5b 	.word	0x08000a5b
 8000974:	08000a53 	.word	0x08000a53
 8000978:	08000a5b 	.word	0x08000a5b
 800097c:	08000a5b 	.word	0x08000a5b
 8000980:	08000a5b 	.word	0x08000a5b
 8000984:	08000a5b 	.word	0x08000a5b
 8000988:	08000a5b 	.word	0x08000a5b
 800098c:	08000a5b 	.word	0x08000a5b
 8000990:	08000a23 	.word	0x08000a23
 8000994:	08000a57 	.word	0x08000a57
 8000998:	08000a0f 	.word	0x08000a0f
 800099c:	08000a3b 	.word	0x08000a3b
 80009a0:	08000a37 	.word	0x08000a37
 80009a4:	08000a5b 	.word	0x08000a5b
 80009a8:	08000a5b 	.word	0x08000a5b
 80009ac:	08000a17 	.word	0x08000a17
 80009b0:	08000a33 	.word	0x08000a33
 80009b4:	08000a5b 	.word	0x08000a5b
 80009b8:	08000a5b 	.word	0x08000a5b
 80009bc:	08000a5b 	.word	0x08000a5b
 80009c0:	08000a5b 	.word	0x08000a5b
 80009c4:	08000a2f 	.word	0x08000a2f
 80009c8:	08000a43 	.word	0x08000a43
 80009cc:	08000a3f 	.word	0x08000a3f
 80009d0:	08000a5b 	.word	0x08000a5b
 80009d4:	08000a13 	.word	0x08000a13
 80009d8:	08000a1b 	.word	0x08000a1b
 80009dc:	08000a27 	.word	0x08000a27
 80009e0:	08000a4b 	.word	0x08000a4b
 80009e4:	08000a5b 	.word	0x08000a5b
 80009e8:	08000a4b 	.word	0x08000a4b
 80009ec:	08000a5b 	.word	0x08000a5b
 80009f0:	08000a5b 	.word	0x08000a5b
 80009f4:	08000a53 	.word	0x08000a53
    case '0' ... '9':
        return segmentMap[c - '0'];
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	3b30      	subs	r3, #48	@ 0x30
 80009fc:	4a1a      	ldr	r2, [pc, #104]	@ (8000a68 <charToSegment+0x1d0>)
 80009fe:	5cd3      	ldrb	r3, [r2, r3]
 8000a00:	e02c      	b.n	8000a5c <charToSegment+0x1c4>
    case '-':
        return segmentMap[11];
 8000a02:	2340      	movs	r3, #64	@ 0x40
 8000a04:	e02a      	b.n	8000a5c <charToSegment+0x1c4>
    case '*':
        return segmentMap[12];
 8000a06:	2363      	movs	r3, #99	@ 0x63
 8000a08:	e028      	b.n	8000a5c <charToSegment+0x1c4>
    case 'C':
        return segmentMap[13];
 8000a0a:	2339      	movs	r3, #57	@ 0x39
 8000a0c:	e026      	b.n	8000a5c <charToSegment+0x1c4>
    case 'c':
        return segmentMap[29];
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e024      	b.n	8000a5c <charToSegment+0x1c4>
    case 'r':
    case 'R':
        return segmentMap[14];
 8000a12:	2350      	movs	r3, #80	@ 0x50
 8000a14:	e022      	b.n	8000a5c <charToSegment+0x1c4>
    case 'h':
        return segmentMap[15];
 8000a16:	2374      	movs	r3, #116	@ 0x74
 8000a18:	e020      	b.n	8000a5c <charToSegment+0x1c4>
    case 's':
    case 'S':
        return segmentMap[5];
 8000a1a:	236d      	movs	r3, #109	@ 0x6d
 8000a1c:	e01e      	b.n	8000a5c <charToSegment+0x1c4>
    case 'F':
        return segmentMap[16];
 8000a1e:	2371      	movs	r3, #113	@ 0x71
 8000a20:	e01c      	b.n	8000a5c <charToSegment+0x1c4>
    case 'A':
    case 'a':
        return segmentMap[17];
 8000a22:	2300      	movs	r3, #0
 8000a24:	e01a      	b.n	8000a5c <charToSegment+0x1c4>
    case 't':
        return segmentMap[18];
 8000a26:	2300      	movs	r3, #0
 8000a28:	e018      	b.n	8000a5c <charToSegment+0x1c4>
    case 'V':
    case 'U':
        return segmentMap[19];
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e016      	b.n	8000a5c <charToSegment+0x1c4>
    case 'n':
    case 'N':
        return segmentMap[20];
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e014      	b.n	8000a5c <charToSegment+0x1c4>
    case 'i':
        return segmentMap[21];
 8000a32:	2300      	movs	r3, #0
 8000a34:	e012      	b.n	8000a5c <charToSegment+0x1c4>
    case 'E':
    case 'e':
        return segmentMap[22];
 8000a36:	2300      	movs	r3, #0
 8000a38:	e010      	b.n	8000a5c <charToSegment+0x1c4>
    case 'd':
        return segmentMap[23];
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e00e      	b.n	8000a5c <charToSegment+0x1c4>
    case 'P':
    case 'p':
        return segmentMap[24];
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e00c      	b.n	8000a5c <charToSegment+0x1c4>
    case 'o':
        return segmentMap[25];
 8000a42:	2300      	movs	r3, #0
 8000a44:	e00a      	b.n	8000a5c <charToSegment+0x1c4>
    case 'O':
        return segmentMap[0];
 8000a46:	233f      	movs	r3, #63	@ 0x3f
 8000a48:	e008      	b.n	8000a5c <charToSegment+0x1c4>
    case 'u':
    case 'w':
    case 'W':
        return segmentMap[26];
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e006      	b.n	8000a5c <charToSegment+0x1c4>
    case 'L':
        return segmentMap[27];
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e004      	b.n	8000a5c <charToSegment+0x1c4>
    case 'z':
    case 'Z':
        return segmentMap[2];
 8000a52:	235b      	movs	r3, #91	@ 0x5b
 8000a54:	e002      	b.n	8000a5c <charToSegment+0x1c4>
    case 'b':
    case 'B':
        return segmentMap[28];
 8000a56:	2300      	movs	r3, #0
 8000a58:	e000      	b.n	8000a5c <charToSegment+0x1c4>
    default:
        // spacja lub nieobsługiwany znak
        return segmentMap[10];
 8000a5a:	2300      	movs	r3, #0
    }
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	08006ca4 	.word	0x08006ca4

08000a6c <HAL_SPI_TxCpltCallback>:
 * ---------------------------------------------------------------------------
 * Implementacja funkcji obsługujących 192-bitowy rejestr wyświetlaczy
 * ---------------------------------------------------------------------------
 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if(hspi->Instance == SPI1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a09      	ldr	r2, [pc, #36]	@ (8000aa0 <HAL_SPI_TxCpltCallback+0x34>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d10c      	bne.n	8000a98 <HAL_SPI_TxCpltCallback+0x2c>
  {
    // Krótki impuls na pin LATCH
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2140      	movs	r1, #64	@ 0x40
 8000a82:	4808      	ldr	r0, [pc, #32]	@ (8000aa4 <HAL_SPI_TxCpltCallback+0x38>)
 8000a84:	f002 ff44 	bl	8003910 <HAL_GPIO_WritePin>
    // Ewentualnie opóźnienie
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2140      	movs	r1, #64	@ 0x40
 8000a8c:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <HAL_SPI_TxCpltCallback+0x38>)
 8000a8e:	f002 ff3f 	bl	8003910 <HAL_GPIO_WritePin>
    spiTransferInProgress = false;  // Zakończono transmisję
 8000a92:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <HAL_SPI_TxCpltCallback+0x3c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
  }

}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40013000 	.word	0x40013000
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	200000a0 	.word	0x200000a0

08000aac <ClearClockBits>:
  HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 24);
}


void ClearClockBits(MyClockBitFields* clockBits)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  memset(clockBits, 0, sizeof(MyClockBitFields));
 8000ab4:	2218      	movs	r2, #24
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f006 f8bb 	bl	8006c34 <memset>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <SetHourRing>:
    SetDots(clockBits, true, true);
  }
}

void SetHourRing(MyClockBitFields* clockBits, uint8_t hour, bool outerRing, bool innerRing)
{
 8000ac8:	b490      	push	{r4, r7}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	4608      	mov	r0, r1
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	70fb      	strb	r3, [r7, #3]
 8000ada:	460b      	mov	r3, r1
 8000adc:	70bb      	strb	r3, [r7, #2]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	707b      	strb	r3, [r7, #1]
  uint8_t h12 = hour % 12;
 8000ae2:	78fa      	ldrb	r2, [r7, #3]
 8000ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b90 <SetHourRing+0xc8>)
 8000ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8000aea:	08d9      	lsrs	r1, r3, #3
 8000aec:	460b      	mov	r3, r1
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	440b      	add	r3, r1
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	73fb      	strb	r3, [r7, #15]
  if (outerRing)
 8000af8:	78bb      	ldrb	r3, [r7, #2]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d018      	beq.n	8000b30 <SetHourRing+0x68>
    clockBits->hoursRingOuter = (1U << h12);
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	2201      	movs	r2, #1
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f002 010f 	and.w	r1, r2, #15
 8000b12:	010c      	lsls	r4, r1, #4
 8000b14:	79d9      	ldrb	r1, [r3, #7]
 8000b16:	f001 010f 	and.w	r1, r1, #15
 8000b1a:	4608      	mov	r0, r1
 8000b1c:	4621      	mov	r1, r4
 8000b1e:	4301      	orrs	r1, r0
 8000b20:	71d9      	strb	r1, [r3, #7]
 8000b22:	0912      	lsrs	r2, r2, #4
 8000b24:	b292      	uxth	r2, r2
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	2100      	movs	r1, #0
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	721a      	strb	r2, [r3, #8]
 8000b2e:	e006      	b.n	8000b3e <SetHourRing+0x76>
  else
    clockBits->hoursRingOuter = 0;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	79da      	ldrb	r2, [r3, #7]
 8000b34:	f002 020f 	and.w	r2, r2, #15
 8000b38:	71da      	strb	r2, [r3, #7]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	721a      	strb	r2, [r3, #8]

  if (innerRing)
 8000b3e:	787b      	ldrb	r3, [r7, #1]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d019      	beq.n	8000b78 <SetHourRing+0xb0>
    clockBits->hoursRingInner = (1U << h12);
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	2201      	movs	r2, #1
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	b2d1      	uxtb	r1, r2
 8000b56:	2000      	movs	r0, #0
 8000b58:	4301      	orrs	r1, r0
 8000b5a:	7259      	strb	r1, [r3, #9]
 8000b5c:	0a12      	lsrs	r2, r2, #8
 8000b5e:	b292      	uxth	r2, r2
 8000b60:	f002 020f 	and.w	r2, r2, #15
 8000b64:	f002 000f 	and.w	r0, r2, #15
 8000b68:	7a9a      	ldrb	r2, [r3, #10]
 8000b6a:	f022 020f 	bic.w	r2, r2, #15
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4602      	mov	r2, r0
 8000b72:	430a      	orrs	r2, r1
 8000b74:	729a      	strb	r2, [r3, #10]
  else
    clockBits->hoursRingInner = 0;
}
 8000b76:	e006      	b.n	8000b86 <SetHourRing+0xbe>
    clockBits->hoursRingInner = 0;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	725a      	strb	r2, [r3, #9]
 8000b7e:	7a9a      	ldrb	r2, [r3, #10]
 8000b80:	f022 020f 	bic.w	r2, r2, #15
 8000b84:	729a      	strb	r2, [r3, #10]
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc90      	pop	{r4, r7}
 8000b8e:	4770      	bx	lr
 8000b90:	aaaaaaab 	.word	0xaaaaaaab

08000b94 <SetTime7Seg_Top>:

/**
 * Ustawia 6 wyświetlaczy 7-seg (top lub bottom) na HH:MM:SS
 */
void SetTime7Seg_Top(MyClockBitFields* clockBits, uint8_t h, uint8_t m, uint8_t s)
{
 8000b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b98:	b09d      	sub	sp, #116	@ 0x74
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8000bac:	4603      	mov	r3, r0
 8000bae:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

	  // Bufor na segmenty wyświetlacza (6 pozycji)
	    uint8_t backBuffer[6] = {0};
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	    // Obsługa godzin
	    if (h < 10) {
 8000bbc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000bc0:	2b09      	cmp	r3, #9
 8000bc2:	d80d      	bhi.n	8000be0 <SetTime7Seg_Top+0x4c>
	        backBuffer[0] = segmentMap[10]; // Puste dziesiątki godzin
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = charToSegment('0' + h); // Jednostki godzin
 8000bca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000bce:	3330      	adds	r3, #48	@ 0x30
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fe60 	bl	8000898 <charToSegment>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
 8000bde:	e022      	b.n	8000c26 <SetTime7Seg_Top+0x92>
	    } else {
	        backBuffer[0] = charToSegment('0' + (h / 10)); // Dziesiątki godzin
 8000be0:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000be4:	4b87      	ldr	r3, [pc, #540]	@ (8000e04 <SetTime7Seg_Top+0x270>)
 8000be6:	fba3 2302 	umull	r2, r3, r3, r2
 8000bea:	08db      	lsrs	r3, r3, #3
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	3330      	adds	r3, #48	@ 0x30
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fe50 	bl	8000898 <charToSegment>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = charToSegment('0' + (h % 10)); // Jednostki godzin
 8000bfe:	f897 105b 	ldrb.w	r1, [r7, #91]	@ 0x5b
 8000c02:	4b80      	ldr	r3, [pc, #512]	@ (8000e04 <SetTime7Seg_Top+0x270>)
 8000c04:	fba3 2301 	umull	r2, r3, r3, r1
 8000c08:	08da      	lsrs	r2, r3, #3
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	1acb      	subs	r3, r1, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	3330      	adds	r3, #48	@ 0x30
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fe3c 	bl	8000898 <charToSegment>
 8000c20:	4603      	mov	r3, r0
 8000c22:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	    }

	    // Obsługa minut
	    backBuffer[2] = charToSegment('0' + (m / 10)); // Dziesiątki minut
 8000c26:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8000c2a:	4b76      	ldr	r3, [pc, #472]	@ (8000e04 <SetTime7Seg_Top+0x270>)
 8000c2c:	fba3 2302 	umull	r2, r3, r3, r2
 8000c30:	08db      	lsrs	r3, r3, #3
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	3330      	adds	r3, #48	@ 0x30
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fe2d 	bl	8000898 <charToSegment>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	    backBuffer[3] = charToSegment('0' + (m % 10)); // Jednostki minut
 8000c44:	f897 105a 	ldrb.w	r1, [r7, #90]	@ 0x5a
 8000c48:	4b6e      	ldr	r3, [pc, #440]	@ (8000e04 <SetTime7Seg_Top+0x270>)
 8000c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8000c4e:	08da      	lsrs	r2, r3, #3
 8000c50:	4613      	mov	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	4413      	add	r3, r2
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	1acb      	subs	r3, r1, r3
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	3330      	adds	r3, #48	@ 0x30
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fe19 	bl	8000898 <charToSegment>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	    // Obsługa sekund
	    backBuffer[4] = charToSegment('0' + (s / 10)); // Dziesiątki sekund
 8000c6c:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8000c70:	4b64      	ldr	r3, [pc, #400]	@ (8000e04 <SetTime7Seg_Top+0x270>)
 8000c72:	fba3 2302 	umull	r2, r3, r3, r2
 8000c76:	08db      	lsrs	r3, r3, #3
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	3330      	adds	r3, #48	@ 0x30
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fe0a 	bl	8000898 <charToSegment>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	    backBuffer[5] = charToSegment('0' + (s % 10)); // Jednostki sekund
 8000c8a:	f897 1059 	ldrb.w	r1, [r7, #89]	@ 0x59
 8000c8e:	4b5d      	ldr	r3, [pc, #372]	@ (8000e04 <SetTime7Seg_Top+0x270>)
 8000c90:	fba3 2301 	umull	r2, r3, r3, r1
 8000c94:	08da      	lsrs	r2, r3, #3
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	1acb      	subs	r3, r1, r3
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	3330      	adds	r3, #48	@ 0x30
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fdf6 	bl	8000898 <charToSegment>
 8000cac:	4603      	mov	r3, r0
 8000cae:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	    // Zbudowanie wartości 48-bitowej na podstawie bufora
	    uint64_t displayVal = 0ULL;
 8000cb2:	f04f 0200 	mov.w	r2, #0
 8000cb6:	f04f 0300 	mov.w	r3, #0
 8000cba:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[5] << 40);
 8000cbe:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8000cc8:	657a      	str	r2, [r7, #84]	@ 0x54
 8000cca:	f04f 0000 	mov.w	r0, #0
 8000cce:	f04f 0100 	mov.w	r1, #0
 8000cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000cd4:	0219      	lsls	r1, r3, #8
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000cdc:	ea42 0600 	orr.w	r6, r2, r0
 8000ce0:	62be      	str	r6, [r7, #40]	@ 0x28
 8000ce2:	430b      	orrs	r3, r1
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ce6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000cea:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[4] << 32);
 8000cee:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000cf8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000cfa:	f04f 0000 	mov.w	r0, #0
 8000cfe:	f04f 0100 	mov.w	r1, #0
 8000d02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d04:	0019      	movs	r1, r3
 8000d06:	2000      	movs	r0, #0
 8000d08:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000d0c:	ea42 0600 	orr.w	r6, r2, r0
 8000d10:	623e      	str	r6, [r7, #32]
 8000d12:	430b      	orrs	r3, r1
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d1a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[0] << 24);
 8000d1e:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2200      	movs	r2, #0
 8000d26:	643b      	str	r3, [r7, #64]	@ 0x40
 8000d28:	647a      	str	r2, [r7, #68]	@ 0x44
 8000d2a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8000d2e:	460b      	mov	r3, r1
 8000d30:	0a1d      	lsrs	r5, r3, #8
 8000d32:	460b      	mov	r3, r1
 8000d34:	061c      	lsls	r4, r3, #24
 8000d36:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000d3a:	ea42 0104 	orr.w	r1, r2, r4
 8000d3e:	61b9      	str	r1, [r7, #24]
 8000d40:	432b      	orrs	r3, r5
 8000d42:	61fb      	str	r3, [r7, #28]
 8000d44:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000d48:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[1] << 16);
 8000d4c:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2200      	movs	r2, #0
 8000d54:	4698      	mov	r8, r3
 8000d56:	4691      	mov	r9, r2
 8000d58:	f04f 0000 	mov.w	r0, #0
 8000d5c:	f04f 0100 	mov.w	r1, #0
 8000d60:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8000d64:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8000d68:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8000d6c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000d70:	ea42 0400 	orr.w	r4, r2, r0
 8000d74:	613c      	str	r4, [r7, #16]
 8000d76:	430b      	orrs	r3, r1
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000d7e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[2] << 8);
 8000d82:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2200      	movs	r2, #0
 8000d8a:	469a      	mov	sl, r3
 8000d8c:	4693      	mov	fp, r2
 8000d8e:	f04f 0200 	mov.w	r2, #0
 8000d92:	f04f 0300 	mov.w	r3, #0
 8000d96:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8000d9a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8000d9e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8000da2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8000da6:	ea40 0402 	orr.w	r4, r0, r2
 8000daa:	60bc      	str	r4, [r7, #8]
 8000dac:	430b      	orrs	r3, r1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000db4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[3] << 0);
 8000db8:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000dc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000dc4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000dc8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8000dcc:	4621      	mov	r1, r4
 8000dce:	4311      	orrs	r1, r2
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	4629      	mov	r1, r5
 8000dd4:	4319      	orrs	r1, r3
 8000dd6:	6079      	str	r1, [r7, #4]
 8000dd8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000ddc:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68

	    clockBits->topDisplay = displayVal;
 8000de0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000de4:	633a      	str	r2, [r7, #48]	@ 0x30
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8000dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000dec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000df0:	4602      	mov	r2, r0
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	460a      	mov	r2, r1
 8000df6:	821a      	strh	r2, [r3, #16]
}
 8000df8:	bf00      	nop
 8000dfa:	3774      	adds	r7, #116	@ 0x74
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e02:	bf00      	nop
 8000e04:	cccccccd 	.word	0xcccccccd

08000e08 <Set7Seg_DisplayLargeNumber>:
	    displayVal |= ((uint64_t)backBuffer[0] << 0);

	    clockBits->bottomDisplay = displayVal;
}

void Set7Seg_DisplayLargeNumber(MyClockBitFields* clockBits, uint64_t number) {
 8000e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e0c:	b0a1      	sub	sp, #132	@ 0x84
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6678      	str	r0, [r7, #100]	@ 0x64
 8000e12:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    // Bufor na segmenty wyświetlacza (6 pozycji)
    uint8_t backBuffer[6] = {0};
 8000e16:	2300      	movs	r3, #0
 8000e18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

    // Rozbicie liczby na cyfry i zapis do bufora od końca
    for (int i = 5; i >= 0; i--) {
 8000e20:	2305      	movs	r3, #5
 8000e22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000e24:	e030      	b.n	8000e88 <Set7Seg_DisplayLargeNumber+0x80>
        if (number > 0) {
 8000e26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	d022      	beq.n	8000e74 <Set7Seg_DisplayLargeNumber+0x6c>
            backBuffer[i] = charToSegment('0' + (number % 10));
 8000e2e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8000e32:	f04f 020a 	mov.w	r2, #10
 8000e36:	f04f 0300 	mov.w	r3, #0
 8000e3a:	f7ff f9cb 	bl	80001d4 <__aeabi_uldivmod>
 8000e3e:	b2d3      	uxtb	r3, r2
 8000e40:	3330      	adds	r3, #48	@ 0x30
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fd27 	bl	8000898 <charToSegment>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8000e52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e54:	441a      	add	r2, r3
 8000e56:	460b      	mov	r3, r1
 8000e58:	7013      	strb	r3, [r2, #0]
            number /= 10;
 8000e5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8000e5e:	f04f 020a 	mov.w	r2, #10
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	f7ff f9b5 	bl	80001d4 <__aeabi_uldivmod>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8000e72:	e006      	b.n	8000e82 <Set7Seg_DisplayLargeNumber+0x7a>
        } else {
            backBuffer[i] = segmentMap[10]; // Puste miejsce
 8000e74:	2100      	movs	r1, #0
 8000e76:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8000e7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e7c:	441a      	add	r2, r3
 8000e7e:	460b      	mov	r3, r1
 8000e80:	7013      	strb	r3, [r2, #0]
    for (int i = 5; i >= 0; i--) {
 8000e82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e84:	3b01      	subs	r3, #1
 8000e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000e88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	dacb      	bge.n	8000e26 <Set7Seg_DisplayLargeNumber+0x1e>
        }
    }

    // Zbudowanie wartości 48-bitowej na podstawie bufora
    uint64_t displayVal = 0ULL;
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	f04f 0300 	mov.w	r3, #0
 8000e96:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)backBuffer[5] << 40);
 8000e9a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	653b      	str	r3, [r7, #80]	@ 0x50
 8000ea4:	657a      	str	r2, [r7, #84]	@ 0x54
 8000ea6:	f04f 0000 	mov.w	r0, #0
 8000eaa:	f04f 0100 	mov.w	r1, #0
 8000eae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000eb0:	0219      	lsls	r1, r3, #8
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000eb8:	ea42 0600 	orr.w	r6, r2, r0
 8000ebc:	62be      	str	r6, [r7, #40]	@ 0x28
 8000ebe:	430b      	orrs	r3, r1
 8000ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ec2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000ec6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)backBuffer[4] << 32);
 8000eca:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000ed4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000ed6:	f04f 0000 	mov.w	r0, #0
 8000eda:	f04f 0100 	mov.w	r1, #0
 8000ede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000ee8:	ea42 0600 	orr.w	r6, r2, r0
 8000eec:	623e      	str	r6, [r7, #32]
 8000eee:	430b      	orrs	r3, r1
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ef2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ef6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)backBuffer[3] << 24);
 8000efa:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2200      	movs	r2, #0
 8000f02:	643b      	str	r3, [r7, #64]	@ 0x40
 8000f04:	647a      	str	r2, [r7, #68]	@ 0x44
 8000f06:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	0a1d      	lsrs	r5, r3, #8
 8000f0e:	460b      	mov	r3, r1
 8000f10:	061c      	lsls	r4, r3, #24
 8000f12:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000f16:	ea42 0104 	orr.w	r1, r2, r4
 8000f1a:	61b9      	str	r1, [r7, #24]
 8000f1c:	432b      	orrs	r3, r5
 8000f1e:	61fb      	str	r3, [r7, #28]
 8000f20:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000f24:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)backBuffer[2] << 16);
 8000f28:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4698      	mov	r8, r3
 8000f32:	4691      	mov	r9, r2
 8000f34:	f04f 0000 	mov.w	r0, #0
 8000f38:	f04f 0100 	mov.w	r1, #0
 8000f3c:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8000f40:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8000f44:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8000f48:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000f4c:	ea42 0400 	orr.w	r4, r2, r0
 8000f50:	613c      	str	r4, [r7, #16]
 8000f52:	430b      	orrs	r3, r1
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000f5a:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)backBuffer[1]<< 8);
 8000f5e:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2200      	movs	r2, #0
 8000f66:	469a      	mov	sl, r3
 8000f68:	4693      	mov	fp, r2
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8000f76:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8000f7a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8000f7e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000f82:	ea40 0402 	orr.w	r4, r0, r2
 8000f86:	60bc      	str	r4, [r7, #8]
 8000f88:	430b      	orrs	r3, r1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000f90:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)backBuffer[0] << 0);
 8000f94:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000fa0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000fa4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8000fa8:	4621      	mov	r1, r4
 8000faa:	4311      	orrs	r1, r2
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	4629      	mov	r1, r5
 8000fb0:	4319      	orrs	r1, r3
 8000fb2:	6079      	str	r1, [r7, #4]
 8000fb4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000fb8:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    // Zapis do struktury
    clockBits->bottomDisplay = displayVal;
 8000fbc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000fc0:	633a      	str	r2, [r7, #48]	@ 0x30
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fc8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f8c3 2012 	str.w	r2, [r3, #18]
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	82da      	strh	r2, [r3, #22]
}
 8000fd6:	bf00      	nop
 8000fd8:	3784      	adds	r7, #132	@ 0x84
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000fe0 <UpdateAllDisplays>:




void UpdateAllDisplays(const MyClockBitFields* clockBits)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
    // Sprawdź, czy SPI jest zajęte
    if (spiTransferInProgress) {
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800105c <UpdateAllDisplays+0x7c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d130      	bne.n	8001054 <UpdateAllDisplays+0x74>
        return;
    }

    spiTransferInProgress = true;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <UpdateAllDisplays+0x7c>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]

    static uint8_t spiTxBuffer[24];
    memset(spiTxBuffer, 0, sizeof(spiTxBuffer));
 8000ff8:	2218      	movs	r2, #24
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4818      	ldr	r0, [pc, #96]	@ (8001060 <UpdateAllDisplays+0x80>)
 8000ffe:	f005 fe19 	bl	8006c34 <memset>

    const uint8_t* p = (const uint8_t*)clockBits;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60fb      	str	r3, [r7, #12]
    int byteIndex = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]

    for (int partIndex = 11; partIndex >= 0; partIndex--)
 800100a:	230b      	movs	r3, #11
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	e018      	b.n	8001042 <UpdateAllDisplays+0x62>
    {
        spiTxBuffer[byteIndex++] = p[2 * partIndex + 1];
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	3301      	adds	r3, #1
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	441a      	add	r2, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	1c59      	adds	r1, r3, #1
 800101e:	6179      	str	r1, [r7, #20]
 8001020:	7811      	ldrb	r1, [r2, #0]
 8001022:	4a0f      	ldr	r2, [pc, #60]	@ (8001060 <UpdateAllDisplays+0x80>)
 8001024:	54d1      	strb	r1, [r2, r3]
        spiTxBuffer[byteIndex++] = p[2 * partIndex + 0];
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	441a      	add	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	1c59      	adds	r1, r3, #1
 8001034:	6179      	str	r1, [r7, #20]
 8001036:	7811      	ldrb	r1, [r2, #0]
 8001038:	4a09      	ldr	r2, [pc, #36]	@ (8001060 <UpdateAllDisplays+0x80>)
 800103a:	54d1      	strb	r1, [r2, r3]
    for (int partIndex = 11; partIndex >= 0; partIndex--)
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	3b01      	subs	r3, #1
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	2b00      	cmp	r3, #0
 8001046:	dae3      	bge.n	8001010 <UpdateAllDisplays+0x30>
    }

    HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 24);
 8001048:	2218      	movs	r2, #24
 800104a:	4905      	ldr	r1, [pc, #20]	@ (8001060 <UpdateAllDisplays+0x80>)
 800104c:	4805      	ldr	r0, [pc, #20]	@ (8001064 <UpdateAllDisplays+0x84>)
 800104e:	f003 fead 	bl	8004dac <HAL_SPI_Transmit_DMA>
 8001052:	e000      	b.n	8001056 <UpdateAllDisplays+0x76>
        return;
 8001054:	bf00      	nop
}
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200000a0 	.word	0x200000a0
 8001060:	200000a4 	.word	0x200000a4
 8001064:	20000228 	.word	0x20000228

08001068 <SetPWMPercentGamma>:
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
  uint32_t compare_value = (period + 1) - ((period + 1) * percent / 100);
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
}

void SetPWMPercentGamma(uint8_t percent) {
 8001068:	b480      	push	{r7}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  if (percent > 100) {
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b64      	cmp	r3, #100	@ 0x64
 8001076:	d901      	bls.n	800107c <SetPWMPercentGamma+0x14>
      percent = 100;
 8001078:	2364      	movs	r3, #100	@ 0x64
 800107a:	71fb      	strb	r3, [r7, #7]
  }
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 800107c:	4b0d      	ldr	r3, [pc, #52]	@ (80010b4 <SetPWMPercentGamma+0x4c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001082:	617b      	str	r3, [r7, #20]
  uint8_t gamma_percent = gamma_table[percent];
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	4a0c      	ldr	r2, [pc, #48]	@ (80010b8 <SetPWMPercentGamma+0x50>)
 8001088:	5cd3      	ldrb	r3, [r2, r3]
 800108a:	74fb      	strb	r3, [r7, #19]
  uint32_t compare_value = (period + 1) * gamma_percent / 100;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3301      	adds	r3, #1
 8001090:	7cfa      	ldrb	r2, [r7, #19]
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	4a09      	ldr	r2, [pc, #36]	@ (80010bc <SetPWMPercentGamma+0x54>)
 8001098:	fba2 2303 	umull	r2, r3, r2, r3
 800109c:	095b      	lsrs	r3, r3, #5
 800109e:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
 80010a0:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <SetPWMPercentGamma+0x4c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80010a8:	bf00      	nop
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	200002e0 	.word	0x200002e0
 80010b8:	08006cd0 	.word	0x08006cd0
 80010bc:	51eb851f 	.word	0x51eb851f

080010c0 <SetSecondLedEvenOdd>:
        HAL_Delay(50);
    }
}

void SetSecondLedEvenOdd(MyClockBitFields* clockBits, uint8_t second, uint8_t minute)
{
 80010c0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80010c4:	b08c      	sub	sp, #48	@ 0x30
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80010ca:	460b      	mov	r3, r1
 80010cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80010d0:	4613      	mov	r3, r2
 80010d2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (second >= 60) {
 80010d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010da:	2b3b      	cmp	r3, #59	@ 0x3b
 80010dc:	d902      	bls.n	80010e4 <SetSecondLedEvenOdd+0x24>
        second = 59;
 80010de:	233b      	movs	r3, #59	@ 0x3b
 80010e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
    if ((minute % 2) == 0)
 80010e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d178      	bne.n	80011e4 <SetSecondLedEvenOdd+0x124>
    {
        clockBits->secondsRing = 0ULL;
 80010f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	2200      	movs	r2, #0
 80010fa:	705a      	strb	r2, [r3, #1]
 80010fc:	2200      	movs	r2, #0
 80010fe:	709a      	strb	r2, [r3, #2]
 8001100:	2200      	movs	r2, #0
 8001102:	70da      	strb	r2, [r3, #3]
 8001104:	2200      	movs	r2, #0
 8001106:	711a      	strb	r2, [r3, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	715a      	strb	r2, [r3, #5]
 800110c:	2200      	movs	r2, #0
 800110e:	719a      	strb	r2, [r3, #6]
 8001110:	79da      	ldrb	r2, [r3, #7]
 8001112:	f022 020f 	bic.w	r2, r2, #15
 8001116:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = 0; i <= second; i++)
 8001118:	2300      	movs	r3, #0
 800111a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800111e:	e05a      	b.n	80011d6 <SetSecondLedEvenOdd+0x116>
        {
            clockBits->secondsRing |= (1ULL << i);
 8001120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	791a      	ldrb	r2, [r3, #4]
 8001126:	795c      	ldrb	r4, [r3, #5]
 8001128:	0224      	lsls	r4, r4, #8
 800112a:	4322      	orrs	r2, r4
 800112c:	799c      	ldrb	r4, [r3, #6]
 800112e:	0424      	lsls	r4, r4, #16
 8001130:	4322      	orrs	r2, r4
 8001132:	79db      	ldrb	r3, [r3, #7]
 8001134:	f003 030f 	and.w	r3, r3, #15
 8001138:	061b      	lsls	r3, r3, #24
 800113a:	4313      	orrs	r3, r2
 800113c:	4619      	mov	r1, r3
 800113e:	4680      	mov	r8, r0
 8001140:	4689      	mov	r9, r1
 8001142:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001146:	f04f 0201 	mov.w	r2, #1
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	f1a1 0420 	sub.w	r4, r1, #32
 8001152:	f1c1 0020 	rsb	r0, r1, #32
 8001156:	fa03 f601 	lsl.w	r6, r3, r1
 800115a:	fa02 f404 	lsl.w	r4, r2, r4
 800115e:	4326      	orrs	r6, r4
 8001160:	fa22 f000 	lsr.w	r0, r2, r0
 8001164:	4306      	orrs	r6, r0
 8001166:	fa02 f501 	lsl.w	r5, r2, r1
 800116a:	ea48 0305 	orr.w	r3, r8, r5
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	ea49 0306 	orr.w	r3, r9, r6
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800117a:	460b      	mov	r3, r1
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	4613      	mov	r3, r2
 8001180:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001188:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800118c:	4642      	mov	r2, r8
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	464a      	mov	r2, r9
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	2100      	movs	r1, #0
 8001196:	430a      	orrs	r2, r1
 8001198:	711a      	strb	r2, [r3, #4]
 800119a:	464a      	mov	r2, r9
 800119c:	0a12      	lsrs	r2, r2, #8
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	2100      	movs	r1, #0
 80011a2:	430a      	orrs	r2, r1
 80011a4:	715a      	strb	r2, [r3, #5]
 80011a6:	464a      	mov	r2, r9
 80011a8:	0c12      	lsrs	r2, r2, #16
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	2100      	movs	r1, #0
 80011ae:	430a      	orrs	r2, r1
 80011b0:	719a      	strb	r2, [r3, #6]
 80011b2:	464a      	mov	r2, r9
 80011b4:	0e12      	lsrs	r2, r2, #24
 80011b6:	f002 020f 	and.w	r2, r2, #15
 80011ba:	f002 000f 	and.w	r0, r2, #15
 80011be:	79da      	ldrb	r2, [r3, #7]
 80011c0:	f022 020f 	bic.w	r2, r2, #15
 80011c4:	4611      	mov	r1, r2
 80011c6:	4602      	mov	r2, r0
 80011c8:	430a      	orrs	r2, r1
 80011ca:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = 0; i <= second; i++)
 80011cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011d0:	3301      	adds	r3, #1
 80011d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011d6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80011da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011de:	429a      	cmp	r2, r3
 80011e0:	d99e      	bls.n	8001120 <SetSecondLedEvenOdd+0x60>
        for (uint8_t i = second + 1; i < 60; i++)
        {
            clockBits->secondsRing |= (1ULL << i);
        }
    }
}
 80011e2:	e079      	b.n	80012d8 <SetSecondLedEvenOdd+0x218>
        clockBits->secondsRing = 0ULL;
 80011e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	2200      	movs	r2, #0
 80011ec:	705a      	strb	r2, [r3, #1]
 80011ee:	2200      	movs	r2, #0
 80011f0:	709a      	strb	r2, [r3, #2]
 80011f2:	2200      	movs	r2, #0
 80011f4:	70da      	strb	r2, [r3, #3]
 80011f6:	2200      	movs	r2, #0
 80011f8:	711a      	strb	r2, [r3, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	715a      	strb	r2, [r3, #5]
 80011fe:	2200      	movs	r2, #0
 8001200:	719a      	strb	r2, [r3, #6]
 8001202:	79da      	ldrb	r2, [r3, #7]
 8001204:	f022 020f 	bic.w	r2, r2, #15
 8001208:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = second + 1; i < 60; i++)
 800120a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800120e:	3301      	adds	r3, #1
 8001210:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001214:	e05c      	b.n	80012d0 <SetSecondLedEvenOdd+0x210>
            clockBits->secondsRing |= (1ULL << i);
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	6818      	ldr	r0, [r3, #0]
 800121a:	791a      	ldrb	r2, [r3, #4]
 800121c:	795c      	ldrb	r4, [r3, #5]
 800121e:	0224      	lsls	r4, r4, #8
 8001220:	4322      	orrs	r2, r4
 8001222:	799c      	ldrb	r4, [r3, #6]
 8001224:	0424      	lsls	r4, r4, #16
 8001226:	4322      	orrs	r2, r4
 8001228:	79db      	ldrb	r3, [r3, #7]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	061b      	lsls	r3, r3, #24
 8001230:	4313      	orrs	r3, r2
 8001232:	4619      	mov	r1, r3
 8001234:	4680      	mov	r8, r0
 8001236:	4689      	mov	r9, r1
 8001238:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800123c:	f04f 0201 	mov.w	r2, #1
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	f1a1 0420 	sub.w	r4, r1, #32
 8001248:	f1c1 0020 	rsb	r0, r1, #32
 800124c:	fa03 fb01 	lsl.w	fp, r3, r1
 8001250:	fa02 f404 	lsl.w	r4, r2, r4
 8001254:	ea4b 0b04 	orr.w	fp, fp, r4
 8001258:	fa22 f000 	lsr.w	r0, r2, r0
 800125c:	ea4b 0b00 	orr.w	fp, fp, r0
 8001260:	fa02 fa01 	lsl.w	sl, r2, r1
 8001264:	ea48 030a 	orr.w	r3, r8, sl
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	ea49 030b 	orr.w	r3, r9, fp
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001274:	460b      	mov	r3, r1
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	4613      	mov	r3, r2
 800127a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001282:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001286:	4622      	mov	r2, r4
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	462a      	mov	r2, r5
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	2100      	movs	r1, #0
 8001290:	430a      	orrs	r2, r1
 8001292:	711a      	strb	r2, [r3, #4]
 8001294:	462a      	mov	r2, r5
 8001296:	0a12      	lsrs	r2, r2, #8
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	2100      	movs	r1, #0
 800129c:	430a      	orrs	r2, r1
 800129e:	715a      	strb	r2, [r3, #5]
 80012a0:	462a      	mov	r2, r5
 80012a2:	0c12      	lsrs	r2, r2, #16
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	2100      	movs	r1, #0
 80012a8:	430a      	orrs	r2, r1
 80012aa:	719a      	strb	r2, [r3, #6]
 80012ac:	462a      	mov	r2, r5
 80012ae:	0e12      	lsrs	r2, r2, #24
 80012b0:	f002 020f 	and.w	r2, r2, #15
 80012b4:	f002 000f 	and.w	r0, r2, #15
 80012b8:	79da      	ldrb	r2, [r3, #7]
 80012ba:	f022 020f 	bic.w	r2, r2, #15
 80012be:	4611      	mov	r1, r2
 80012c0:	4602      	mov	r2, r0
 80012c2:	430a      	orrs	r2, r1
 80012c4:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = second + 1; i < 60; i++)
 80012c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80012ca:	3301      	adds	r3, #1
 80012cc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80012d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80012d4:	2b3b      	cmp	r3, #59	@ 0x3b
 80012d6:	d99e      	bls.n	8001216 <SetSecondLedEvenOdd+0x156>
}
 80012d8:	bf00      	nop
 80012da:	3730      	adds	r7, #48	@ 0x30
 80012dc:	46bd      	mov	sp, r7
 80012de:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80012e2:	4770      	bx	lr

080012e4 <SetDots>:
//  if (dot2) val |= (1ULL << 1);
//
//  clockBits->dots = val;
//}

void SetDots(MyClockBitFields* clockBits, bool dot1, bool dot2) {
 80012e4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	460b      	mov	r3, r1
 80012f0:	70fb      	strb	r3, [r7, #3]
 80012f2:	4613      	mov	r3, r2
 80012f4:	70bb      	strb	r3, [r7, #2]
  uint64_t val = 0ULL;
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (dot1) val |= (1ULL << 0);
 8001302:	78fb      	ldrb	r3, [r7, #3]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d006      	beq.n	8001316 <SetDots+0x32>
 8001308:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800130c:	f042 0801 	orr.w	r8, r2, #1
 8001310:	4699      	mov	r9, r3
 8001312:	e9c7 8902 	strd	r8, r9, [r7, #8]
  if (dot2) val |= (1ULL << 1);
 8001316:	78bb      	ldrb	r3, [r7, #2]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <SetDots+0x46>
 800131c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001320:	f042 0402 	orr.w	r4, r2, #2
 8001324:	461d      	mov	r5, r3
 8001326:	e9c7 4502 	strd	r4, r5, [r7, #8]
  clockBits->dots = val;
 800132a:	7a3b      	ldrb	r3, [r7, #8]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	b2d9      	uxtb	r1, r3
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	7a93      	ldrb	r3, [r2, #10]
 8001336:	f361 1305 	bfi	r3, r1, #4, #2
 800133a:	7293      	strb	r3, [r2, #10]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001346:	4770      	bx	lr

08001348 <SetHourRingCustom>:


void SetHourRingCustom(MyClockBitFields* clockBits, uint8_t outerMode, uint8_t innerMode)
{
 8001348:	b490      	push	{r4, r7}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	70fb      	strb	r3, [r7, #3]
 8001354:	4613      	mov	r3, r2
 8001356:	70bb      	strb	r3, [r7, #2]
    // Maska dla pełnego pierścienia (wszystkie 12 godzin)
    uint16_t fullMask = 0x0FFF;  // 12-bitowy: bity 0-11 ustawione na 1
 8001358:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800135c:	81fb      	strh	r3, [r7, #14]
    // Maska dla kwadransów: godziny 12 (bit 0), 3 (bit 3), 6 (bit 6), 9 (bit 9)
    uint16_t quarterMask = (1U << 0) | (1U << 3) | (1U << 6) | (1U << 9);
 800135e:	f240 2349 	movw	r3, #585	@ 0x249
 8001362:	81bb      	strh	r3, [r7, #12]

    // Ustawienia dla zewnętrznego pierścienia
    switch(outerMode)
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d002      	beq.n	8001370 <SetHourRingCustom+0x28>
 800136a:	2b02      	cmp	r3, #2
 800136c:	d016      	beq.n	800139c <SetHourRingCustom+0x54>
 800136e:	e02b      	b.n	80013c8 <SetHourRingCustom+0x80>
    {
        case 1:
            clockBits->hoursRingOuter = fullMask;
 8001370:	89fb      	ldrh	r3, [r7, #14]
 8001372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001376:	b29a      	uxth	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f002 010f 	and.w	r1, r2, #15
 800137e:	010c      	lsls	r4, r1, #4
 8001380:	79d9      	ldrb	r1, [r3, #7]
 8001382:	f001 010f 	and.w	r1, r1, #15
 8001386:	4608      	mov	r0, r1
 8001388:	4621      	mov	r1, r4
 800138a:	4301      	orrs	r1, r0
 800138c:	71d9      	strb	r1, [r3, #7]
 800138e:	0912      	lsrs	r2, r2, #4
 8001390:	b292      	uxth	r2, r2
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	2100      	movs	r1, #0
 8001396:	430a      	orrs	r2, r1
 8001398:	721a      	strb	r2, [r3, #8]
            break;
 800139a:	e01d      	b.n	80013d8 <SetHourRingCustom+0x90>
        case 2:
            clockBits->hoursRingOuter = quarterMask;
 800139c:	89bb      	ldrh	r3, [r7, #12]
 800139e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f002 010f 	and.w	r1, r2, #15
 80013aa:	010c      	lsls	r4, r1, #4
 80013ac:	79d9      	ldrb	r1, [r3, #7]
 80013ae:	f001 010f 	and.w	r1, r1, #15
 80013b2:	4608      	mov	r0, r1
 80013b4:	4621      	mov	r1, r4
 80013b6:	4301      	orrs	r1, r0
 80013b8:	71d9      	strb	r1, [r3, #7]
 80013ba:	0912      	lsrs	r2, r2, #4
 80013bc:	b292      	uxth	r2, r2
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	2100      	movs	r1, #0
 80013c2:	430a      	orrs	r2, r1
 80013c4:	721a      	strb	r2, [r3, #8]
            break;
 80013c6:	e007      	b.n	80013d8 <SetHourRingCustom+0x90>
        default:  // dla wartości 0 i innych nieznanych – wyłącz
            clockBits->hoursRingOuter = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	79da      	ldrb	r2, [r3, #7]
 80013cc:	f002 020f 	and.w	r2, r2, #15
 80013d0:	71da      	strb	r2, [r3, #7]
 80013d2:	2200      	movs	r2, #0
 80013d4:	721a      	strb	r2, [r3, #8]
            break;
 80013d6:	bf00      	nop
    }

    // Ustawienia dla wewnętrznego pierścienia
    switch(innerMode)
 80013d8:	78bb      	ldrb	r3, [r7, #2]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d002      	beq.n	80013e4 <SetHourRingCustom+0x9c>
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d017      	beq.n	8001412 <SetHourRingCustom+0xca>
 80013e2:	e02d      	b.n	8001440 <SetHourRingCustom+0xf8>
    {
        case 1:
            clockBits->hoursRingInner = fullMask;
 80013e4:	89fb      	ldrh	r3, [r7, #14]
 80013e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	b2d1      	uxtb	r1, r2
 80013f0:	2000      	movs	r0, #0
 80013f2:	4301      	orrs	r1, r0
 80013f4:	7259      	strb	r1, [r3, #9]
 80013f6:	0a12      	lsrs	r2, r2, #8
 80013f8:	b292      	uxth	r2, r2
 80013fa:	f002 020f 	and.w	r2, r2, #15
 80013fe:	f002 000f 	and.w	r0, r2, #15
 8001402:	7a9a      	ldrb	r2, [r3, #10]
 8001404:	f022 020f 	bic.w	r2, r2, #15
 8001408:	4611      	mov	r1, r2
 800140a:	4602      	mov	r2, r0
 800140c:	430a      	orrs	r2, r1
 800140e:	729a      	strb	r2, [r3, #10]
            break;
 8001410:	e01e      	b.n	8001450 <SetHourRingCustom+0x108>
        case 2:
            clockBits->hoursRingInner = quarterMask;
 8001412:	89bb      	ldrh	r3, [r7, #12]
 8001414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001418:	b29a      	uxth	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	b2d1      	uxtb	r1, r2
 800141e:	2000      	movs	r0, #0
 8001420:	4301      	orrs	r1, r0
 8001422:	7259      	strb	r1, [r3, #9]
 8001424:	0a12      	lsrs	r2, r2, #8
 8001426:	b292      	uxth	r2, r2
 8001428:	f002 020f 	and.w	r2, r2, #15
 800142c:	f002 000f 	and.w	r0, r2, #15
 8001430:	7a9a      	ldrb	r2, [r3, #10]
 8001432:	f022 020f 	bic.w	r2, r2, #15
 8001436:	4611      	mov	r1, r2
 8001438:	4602      	mov	r2, r0
 800143a:	430a      	orrs	r2, r1
 800143c:	729a      	strb	r2, [r3, #10]
            break;
 800143e:	e007      	b.n	8001450 <SetHourRingCustom+0x108>
        default:  // dla wartości 0 i innych nieznanych – wyłącz
            clockBits->hoursRingInner = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	725a      	strb	r2, [r3, #9]
 8001446:	7a9a      	ldrb	r2, [r3, #10]
 8001448:	f022 020f 	bic.w	r2, r2, #15
 800144c:	729a      	strb	r2, [r3, #10]
            break;
 800144e:	bf00      	nop
    }
}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bc90      	pop	{r4, r7}
 8001458:	4770      	bx	lr
	...

0800145c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <MX_DMA_Init+0x88>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a1e      	ldr	r2, [pc, #120]	@ (80014e4 <MX_DMA_Init+0x88>)
 800146c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b1c      	ldr	r3, [pc, #112]	@ (80014e4 <MX_DMA_Init+0x88>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <MX_DMA_Init+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a17      	ldr	r2, [pc, #92]	@ (80014e4 <MX_DMA_Init+0x88>)
 8001488:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <MX_DMA_Init+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	200d      	movs	r0, #13
 80014a0:	f001 fcd1 	bl	8002e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80014a4:	200d      	movs	r0, #13
 80014a6:	f001 fcea 	bl	8002e7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	202f      	movs	r0, #47	@ 0x2f
 80014b0:	f001 fcc9 	bl	8002e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80014b4:	202f      	movs	r0, #47	@ 0x2f
 80014b6:	f001 fce2 	bl	8002e7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	203a      	movs	r0, #58	@ 0x3a
 80014c0:	f001 fcc1 	bl	8002e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014c4:	203a      	movs	r0, #58	@ 0x3a
 80014c6:	f001 fcda 	bl	8002e7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	203b      	movs	r0, #59	@ 0x3b
 80014d0:	f001 fcb9 	bl	8002e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80014d4:	203b      	movs	r0, #59	@ 0x3b
 80014d6:	f001 fcd2 	bl	8002e7e <HAL_NVIC_EnableIRQ>

}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b2c      	ldr	r3, [pc, #176]	@ (80015b4 <MX_GPIO_Init+0xcc>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a2b      	ldr	r2, [pc, #172]	@ (80015b4 <MX_GPIO_Init+0xcc>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b29      	ldr	r3, [pc, #164]	@ (80015b4 <MX_GPIO_Init+0xcc>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b25      	ldr	r3, [pc, #148]	@ (80015b4 <MX_GPIO_Init+0xcc>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a24      	ldr	r2, [pc, #144]	@ (80015b4 <MX_GPIO_Init+0xcc>)
 8001524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b22      	ldr	r3, [pc, #136]	@ (80015b4 <MX_GPIO_Init+0xcc>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	4b1e      	ldr	r3, [pc, #120]	@ (80015b4 <MX_GPIO_Init+0xcc>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a1d      	ldr	r2, [pc, #116]	@ (80015b4 <MX_GPIO_Init+0xcc>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <MX_GPIO_Init+0xcc>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	4b17      	ldr	r3, [pc, #92]	@ (80015b4 <MX_GPIO_Init+0xcc>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a16      	ldr	r2, [pc, #88]	@ (80015b4 <MX_GPIO_Init+0xcc>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <MX_GPIO_Init+0xcc>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2140      	movs	r1, #64	@ 0x40
 8001572:	4811      	ldr	r0, [pc, #68]	@ (80015b8 <MX_GPIO_Init+0xd0>)
 8001574:	f002 f9cc 	bl	8003910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_LATCH_Pin;
 8001578:	2340      	movs	r3, #64	@ 0x40
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	480a      	ldr	r0, [pc, #40]	@ (80015b8 <MX_GPIO_Init+0xd0>)
 8001590:	f002 f822 	bl	80035d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8001594:	2320      	movs	r3, #32
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159c:	2301      	movs	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_GPIO_Init+0xd4>)
 80015a8:	f002 f816 	bl	80035d8 <HAL_GPIO_Init>

}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	@ 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000
 80015bc:	40020400 	.word	0x40020400

080015c0 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015c4:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <MX_I2C2_Init+0x50>)
 80015c6:	4a13      	ldr	r2, [pc, #76]	@ (8001614 <MX_I2C2_Init+0x54>)
 80015c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015ca:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <MX_I2C2_Init+0x50>)
 80015cc:	4a12      	ldr	r2, [pc, #72]	@ (8001618 <MX_I2C2_Init+0x58>)
 80015ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <MX_I2C2_Init+0x50>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <MX_I2C2_Init+0x50>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <MX_I2C2_Init+0x50>)
 80015de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <MX_I2C2_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <MX_I2C2_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f0:	4b07      	ldr	r3, [pc, #28]	@ (8001610 <MX_I2C2_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <MX_I2C2_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015fc:	4804      	ldr	r0, [pc, #16]	@ (8001610 <MX_I2C2_Init+0x50>)
 80015fe:	f002 f9a1 	bl	8003944 <HAL_I2C_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001608:	f000 fac8 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200000bc 	.word	0x200000bc
 8001614:	40005800 	.word	0x40005800
 8001618:	000186a0 	.word	0x000186a0

0800161c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	@ 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a50      	ldr	r2, [pc, #320]	@ (800177c <HAL_I2C_MspInit+0x160>)
 800163a:	4293      	cmp	r3, r2
 800163c:	f040 8099 	bne.w	8001772 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001640:	2300      	movs	r3, #0
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	4b4e      	ldr	r3, [pc, #312]	@ (8001780 <HAL_I2C_MspInit+0x164>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001648:	4a4d      	ldr	r2, [pc, #308]	@ (8001780 <HAL_I2C_MspInit+0x164>)
 800164a:	f043 0302 	orr.w	r3, r3, #2
 800164e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001650:	4b4b      	ldr	r3, [pc, #300]	@ (8001780 <HAL_I2C_MspInit+0x164>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800165c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001662:	2312      	movs	r3, #18
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800166e:	2304      	movs	r3, #4
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	4842      	ldr	r0, [pc, #264]	@ (8001784 <HAL_I2C_MspInit+0x168>)
 800167a:	f001 ffad 	bl	80035d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800167e:	2308      	movs	r3, #8
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001682:	2312      	movs	r3, #18
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800168e:	2309      	movs	r3, #9
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	483a      	ldr	r0, [pc, #232]	@ (8001784 <HAL_I2C_MspInit+0x168>)
 800169a:	f001 ff9d 	bl	80035d8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b37      	ldr	r3, [pc, #220]	@ (8001780 <HAL_I2C_MspInit+0x164>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	4a36      	ldr	r2, [pc, #216]	@ (8001780 <HAL_I2C_MspInit+0x164>)
 80016a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ae:	4b34      	ldr	r3, [pc, #208]	@ (8001780 <HAL_I2C_MspInit+0x164>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80016ba:	4b33      	ldr	r3, [pc, #204]	@ (8001788 <HAL_I2C_MspInit+0x16c>)
 80016bc:	4a33      	ldr	r2, [pc, #204]	@ (800178c <HAL_I2C_MspInit+0x170>)
 80016be:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80016c0:	4b31      	ldr	r3, [pc, #196]	@ (8001788 <HAL_I2C_MspInit+0x16c>)
 80016c2:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80016c6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001788 <HAL_I2C_MspInit+0x16c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001788 <HAL_I2C_MspInit+0x16c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001788 <HAL_I2C_MspInit+0x16c>)
 80016d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016da:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001788 <HAL_I2C_MspInit+0x16c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016e2:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <HAL_I2C_MspInit+0x16c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80016e8:	4b27      	ldr	r3, [pc, #156]	@ (8001788 <HAL_I2C_MspInit+0x16c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016ee:	4b26      	ldr	r3, [pc, #152]	@ (8001788 <HAL_I2C_MspInit+0x16c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016f4:	4b24      	ldr	r3, [pc, #144]	@ (8001788 <HAL_I2C_MspInit+0x16c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80016fa:	4823      	ldr	r0, [pc, #140]	@ (8001788 <HAL_I2C_MspInit+0x16c>)
 80016fc:	f001 fbda 	bl	8002eb4 <HAL_DMA_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8001706:	f000 fa49 	bl	8001b9c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a1e      	ldr	r2, [pc, #120]	@ (8001788 <HAL_I2C_MspInit+0x16c>)
 800170e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001710:	4a1d      	ldr	r2, [pc, #116]	@ (8001788 <HAL_I2C_MspInit+0x16c>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001716:	4b1e      	ldr	r3, [pc, #120]	@ (8001790 <HAL_I2C_MspInit+0x174>)
 8001718:	4a1e      	ldr	r2, [pc, #120]	@ (8001794 <HAL_I2C_MspInit+0x178>)
 800171a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800171c:	4b1c      	ldr	r3, [pc, #112]	@ (8001790 <HAL_I2C_MspInit+0x174>)
 800171e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001722:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001724:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <HAL_I2C_MspInit+0x174>)
 8001726:	2240      	movs	r2, #64	@ 0x40
 8001728:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800172a:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_I2C_MspInit+0x174>)
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001730:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <HAL_I2C_MspInit+0x174>)
 8001732:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001736:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001738:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <HAL_I2C_MspInit+0x174>)
 800173a:	2200      	movs	r2, #0
 800173c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800173e:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <HAL_I2C_MspInit+0x174>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_I2C_MspInit+0x174>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800174a:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <HAL_I2C_MspInit+0x174>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001750:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <HAL_I2C_MspInit+0x174>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001756:	480e      	ldr	r0, [pc, #56]	@ (8001790 <HAL_I2C_MspInit+0x174>)
 8001758:	f001 fbac 	bl	8002eb4 <HAL_DMA_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_I2C_MspInit+0x14a>
    {
      Error_Handler();
 8001762:	f000 fa1b 	bl	8001b9c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a09      	ldr	r2, [pc, #36]	@ (8001790 <HAL_I2C_MspInit+0x174>)
 800176a:	635a      	str	r2, [r3, #52]	@ 0x34
 800176c:	4a08      	ldr	r2, [pc, #32]	@ (8001790 <HAL_I2C_MspInit+0x174>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001772:	bf00      	nop
 8001774:	3728      	adds	r7, #40	@ 0x28
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40005800 	.word	0x40005800
 8001780:	40023800 	.word	0x40023800
 8001784:	40020400 	.word	0x40020400
 8001788:	20000110 	.word	0x20000110
 800178c:	40026040 	.word	0x40026040
 8001790:	20000170 	.word	0x20000170
 8001794:	400260b8 	.word	0x400260b8

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	b5b0      	push	{r4, r5, r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179e:	f000 fecb 	bl	8002538 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a2:	f000 f93d 	bl	8001a20 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	// Odblokowanie dostępu do backupu (dla RTC)
	HAL_PWR_EnableBkUpAccess();
 80017a6:	f002 fa11 	bl	8003bcc <HAL_PWR_EnableBkUpAccess>

	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017b8:	2302      	movs	r3, #2
 80017ba:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017c0:	613b      	str	r3, [r7, #16]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fe6d 	bl	80044a4 <HAL_RCCEx_PeriphCLKConfig>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ca:	f7ff fe8d 	bl	80014e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80017ce:	f7ff fe45 	bl	800145c <MX_DMA_Init>
  MX_SPI1_Init();
 80017d2:	f000 fa6f 	bl	8001cb4 <MX_SPI1_Init>
  MX_TIM1_Init();
 80017d6:	f000 fbd5 	bl	8001f84 <MX_TIM1_Init>
  MX_RTC_Init();
 80017da:	f000 f9e5 	bl	8001ba8 <MX_RTC_Init>
  MX_I2C2_Init();
 80017de:	f7ff feef 	bl	80015c0 <MX_I2C2_Init>
  MX_ADC1_Init();
 80017e2:	f7fe fe6f 	bl	80004c4 <MX_ADC1_Init>
  MX_TIM4_Init();
 80017e6:	f000 fc6d 	bl	80020c4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80017ea:	f000 fcbf 	bl	800216c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80017ee:	f000 fdd3 	bl	8002398 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	// Start PWM na TIM1, kanał 1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017f2:	2100      	movs	r1, #0
 80017f4:	4880      	ldr	r0, [pc, #512]	@ (80019f8 <main+0x260>)
 80017f6:	f003 ff11 	bl	800561c <HAL_TIM_PWM_Start>
	// Ustaw wypełnienie do połowy
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (htim1.Init.Period + 1) / 2);
 80017fa:	4b7f      	ldr	r3, [pc, #508]	@ (80019f8 <main+0x260>)
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	4b7d      	ldr	r3, [pc, #500]	@ (80019f8 <main+0x260>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	0852      	lsrs	r2, r2, #1
 8001806:	635a      	str	r2, [r3, #52]	@ 0x34

	// Ustaw przykładową jasność z korekcją gamma
	SetPWMPercentGamma(30);
 8001808:	201e      	movs	r0, #30
 800180a:	f7ff fc2d 	bl	8001068 <SetPWMPercentGamma>

	// Wyczyść strukturę zegara i wyślij do rejestrów
	ClearClockBits(&clockReg);
 800180e:	487b      	ldr	r0, [pc, #492]	@ (80019fc <main+0x264>)
 8001810:	f7ff f94c 	bl	8000aac <ClearClockBits>
	UpdateAllDisplays(&clockReg);
 8001814:	4879      	ldr	r0, [pc, #484]	@ (80019fc <main+0x264>)
 8001816:	f7ff fbe3 	bl	8000fe0 <UpdateAllDisplays>

	// Ustaw czas RTC (przykładowo)
	//Set_RTC_Time();
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800181a:	213c      	movs	r1, #60	@ 0x3c
 800181c:	4878      	ldr	r0, [pc, #480]	@ (8001a00 <main+0x268>)
 800181e:	f004 f853 	bl	80058c8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8001822:	4878      	ldr	r0, [pc, #480]	@ (8001a04 <main+0x26c>)
 8001824:	f003 fe3e 	bl	80054a4 <HAL_TIM_Base_Start_IT>

	// Rejestracja callbacków
	Button_RegisterPressCallback(0, Button1_Pressed);
 8001828:	4977      	ldr	r1, [pc, #476]	@ (8001a08 <main+0x270>)
 800182a:	2000      	movs	r0, #0
 800182c:	f7fe fee0 	bl	80005f0 <Button_RegisterPressCallback>
	Button_RegisterDoubleClickCallback(0, Button1_DoubleClicked);
 8001830:	4976      	ldr	r1, [pc, #472]	@ (8001a0c <main+0x274>)
 8001832:	2000      	movs	r0, #0
 8001834:	f7fe ff14 	bl	8000660 <Button_RegisterDoubleClickCallback>
	Button_RegisterHoldCallback(0, Button1_Held);
 8001838:	4975      	ldr	r1, [pc, #468]	@ (8001a10 <main+0x278>)
 800183a:	2000      	movs	r0, #0
 800183c:	f7fe fef4 	bl	8000628 <Button_RegisterHoldCallback>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		// Odczytaj aktualny czas z RTC
		Get_RTC_Time();
 8001840:	f000 f94e 	bl	8001ae0 <Get_RTC_Time>

		// Sekundnik – zapal diody od 0 do sTime.Seconds
		//SetSecondLedAccumulating2(&clockReg, sTime.Seconds);
		if (encoderValue == 0) {
 8001844:	4b73      	ldr	r3, [pc, #460]	@ (8001a14 <main+0x27c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d11a      	bne.n	8001882 <main+0xea>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 800184c:	4b72      	ldr	r3, [pc, #456]	@ (8001a18 <main+0x280>)
 800184e:	789b      	ldrb	r3, [r3, #2]
 8001850:	4a71      	ldr	r2, [pc, #452]	@ (8001a18 <main+0x280>)
 8001852:	7852      	ldrb	r2, [r2, #1]
 8001854:	4619      	mov	r1, r3
 8001856:	4869      	ldr	r0, [pc, #420]	@ (80019fc <main+0x264>)
 8001858:	f7ff fc32 	bl	80010c0 <SetSecondLedEvenOdd>
			SetHourRingCustom(&clockReg, 1, 1);
 800185c:	2201      	movs	r2, #1
 800185e:	2101      	movs	r1, #1
 8001860:	4866      	ldr	r0, [pc, #408]	@ (80019fc <main+0x264>)
 8001862:	f7ff fd71 	bl	8001348 <SetHourRingCustom>
			SetDots(&clockReg, 1, 1);
 8001866:	2201      	movs	r2, #1
 8001868:	2101      	movs	r1, #1
 800186a:	4864      	ldr	r0, [pc, #400]	@ (80019fc <main+0x264>)
 800186c:	f7ff fd3a 	bl	80012e4 <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001870:	4b69      	ldr	r3, [pc, #420]	@ (8001a18 <main+0x280>)
 8001872:	7819      	ldrb	r1, [r3, #0]
 8001874:	4b68      	ldr	r3, [pc, #416]	@ (8001a18 <main+0x280>)
 8001876:	785a      	ldrb	r2, [r3, #1]
 8001878:	4b67      	ldr	r3, [pc, #412]	@ (8001a18 <main+0x280>)
 800187a:	789b      	ldrb	r3, [r3, #2]
 800187c:	485f      	ldr	r0, [pc, #380]	@ (80019fc <main+0x264>)
 800187e:	f7ff f989 	bl	8000b94 <SetTime7Seg_Top>
					sTime.Seconds);
		}

		if (encoderValue == 1) {
 8001882:	4b64      	ldr	r3, [pc, #400]	@ (8001a14 <main+0x27c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d11a      	bne.n	80018c0 <main+0x128>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 800188a:	4b63      	ldr	r3, [pc, #396]	@ (8001a18 <main+0x280>)
 800188c:	789b      	ldrb	r3, [r3, #2]
 800188e:	4a62      	ldr	r2, [pc, #392]	@ (8001a18 <main+0x280>)
 8001890:	7852      	ldrb	r2, [r2, #1]
 8001892:	4619      	mov	r1, r3
 8001894:	4859      	ldr	r0, [pc, #356]	@ (80019fc <main+0x264>)
 8001896:	f7ff fc13 	bl	80010c0 <SetSecondLedEvenOdd>
			SetHourRingCustom(&clockReg, 0, 1);
 800189a:	2201      	movs	r2, #1
 800189c:	2100      	movs	r1, #0
 800189e:	4857      	ldr	r0, [pc, #348]	@ (80019fc <main+0x264>)
 80018a0:	f7ff fd52 	bl	8001348 <SetHourRingCustom>
			SetDots(&clockReg, 1, 1);
 80018a4:	2201      	movs	r2, #1
 80018a6:	2101      	movs	r1, #1
 80018a8:	4854      	ldr	r0, [pc, #336]	@ (80019fc <main+0x264>)
 80018aa:	f7ff fd1b 	bl	80012e4 <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 80018ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001a18 <main+0x280>)
 80018b0:	7819      	ldrb	r1, [r3, #0]
 80018b2:	4b59      	ldr	r3, [pc, #356]	@ (8001a18 <main+0x280>)
 80018b4:	785a      	ldrb	r2, [r3, #1]
 80018b6:	4b58      	ldr	r3, [pc, #352]	@ (8001a18 <main+0x280>)
 80018b8:	789b      	ldrb	r3, [r3, #2]
 80018ba:	4850      	ldr	r0, [pc, #320]	@ (80019fc <main+0x264>)
 80018bc:	f7ff f96a 	bl	8000b94 <SetTime7Seg_Top>
					sTime.Seconds);
		}
		if (encoderValue == 2) {
 80018c0:	4b54      	ldr	r3, [pc, #336]	@ (8001a14 <main+0x27c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d11a      	bne.n	80018fe <main+0x166>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 80018c8:	4b53      	ldr	r3, [pc, #332]	@ (8001a18 <main+0x280>)
 80018ca:	789b      	ldrb	r3, [r3, #2]
 80018cc:	4a52      	ldr	r2, [pc, #328]	@ (8001a18 <main+0x280>)
 80018ce:	7852      	ldrb	r2, [r2, #1]
 80018d0:	4619      	mov	r1, r3
 80018d2:	484a      	ldr	r0, [pc, #296]	@ (80019fc <main+0x264>)
 80018d4:	f7ff fbf4 	bl	80010c0 <SetSecondLedEvenOdd>
			SetHourRingCustom(&clockReg, 1, 0);
 80018d8:	2200      	movs	r2, #0
 80018da:	2101      	movs	r1, #1
 80018dc:	4847      	ldr	r0, [pc, #284]	@ (80019fc <main+0x264>)
 80018de:	f7ff fd33 	bl	8001348 <SetHourRingCustom>
			SetDots(&clockReg, 1, 1);
 80018e2:	2201      	movs	r2, #1
 80018e4:	2101      	movs	r1, #1
 80018e6:	4845      	ldr	r0, [pc, #276]	@ (80019fc <main+0x264>)
 80018e8:	f7ff fcfc 	bl	80012e4 <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 80018ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001a18 <main+0x280>)
 80018ee:	7819      	ldrb	r1, [r3, #0]
 80018f0:	4b49      	ldr	r3, [pc, #292]	@ (8001a18 <main+0x280>)
 80018f2:	785a      	ldrb	r2, [r3, #1]
 80018f4:	4b48      	ldr	r3, [pc, #288]	@ (8001a18 <main+0x280>)
 80018f6:	789b      	ldrb	r3, [r3, #2]
 80018f8:	4840      	ldr	r0, [pc, #256]	@ (80019fc <main+0x264>)
 80018fa:	f7ff f94b 	bl	8000b94 <SetTime7Seg_Top>
					sTime.Seconds);
		}

		if (encoderValue == 3) {
 80018fe:	4b45      	ldr	r3, [pc, #276]	@ (8001a14 <main+0x27c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b03      	cmp	r3, #3
 8001904:	d11a      	bne.n	800193c <main+0x1a4>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 8001906:	4b44      	ldr	r3, [pc, #272]	@ (8001a18 <main+0x280>)
 8001908:	789b      	ldrb	r3, [r3, #2]
 800190a:	4a43      	ldr	r2, [pc, #268]	@ (8001a18 <main+0x280>)
 800190c:	7852      	ldrb	r2, [r2, #1]
 800190e:	4619      	mov	r1, r3
 8001910:	483a      	ldr	r0, [pc, #232]	@ (80019fc <main+0x264>)
 8001912:	f7ff fbd5 	bl	80010c0 <SetSecondLedEvenOdd>
			SetHourRingCustom(&clockReg, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	4838      	ldr	r0, [pc, #224]	@ (80019fc <main+0x264>)
 800191c:	f7ff fd14 	bl	8001348 <SetHourRingCustom>
			SetDots(&clockReg, 1, 1);
 8001920:	2201      	movs	r2, #1
 8001922:	2101      	movs	r1, #1
 8001924:	4835      	ldr	r0, [pc, #212]	@ (80019fc <main+0x264>)
 8001926:	f7ff fcdd 	bl	80012e4 <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 800192a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a18 <main+0x280>)
 800192c:	7819      	ldrb	r1, [r3, #0]
 800192e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a18 <main+0x280>)
 8001930:	785a      	ldrb	r2, [r3, #1]
 8001932:	4b39      	ldr	r3, [pc, #228]	@ (8001a18 <main+0x280>)
 8001934:	789b      	ldrb	r3, [r3, #2]
 8001936:	4831      	ldr	r0, [pc, #196]	@ (80019fc <main+0x264>)
 8001938:	f7ff f92c 	bl	8000b94 <SetTime7Seg_Top>
					sTime.Seconds);
		}
		if (encoderValue == 4) {
 800193c:	4b35      	ldr	r3, [pc, #212]	@ (8001a14 <main+0x27c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b04      	cmp	r3, #4
 8001942:	d11d      	bne.n	8001980 <main+0x1e8>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 8001944:	4b34      	ldr	r3, [pc, #208]	@ (8001a18 <main+0x280>)
 8001946:	789b      	ldrb	r3, [r3, #2]
 8001948:	4a33      	ldr	r2, [pc, #204]	@ (8001a18 <main+0x280>)
 800194a:	7852      	ldrb	r2, [r2, #1]
 800194c:	4619      	mov	r1, r3
 800194e:	482b      	ldr	r0, [pc, #172]	@ (80019fc <main+0x264>)
 8001950:	f7ff fbb6 	bl	80010c0 <SetSecondLedEvenOdd>
			SetHourRingCustom(&clockReg, sTime.Hours, sTime.Hours);
 8001954:	4b30      	ldr	r3, [pc, #192]	@ (8001a18 <main+0x280>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4a2f      	ldr	r2, [pc, #188]	@ (8001a18 <main+0x280>)
 800195a:	7812      	ldrb	r2, [r2, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	4827      	ldr	r0, [pc, #156]	@ (80019fc <main+0x264>)
 8001960:	f7ff fcf2 	bl	8001348 <SetHourRingCustom>
			SetDots(&clockReg, 1, 1);
 8001964:	2201      	movs	r2, #1
 8001966:	2101      	movs	r1, #1
 8001968:	4824      	ldr	r0, [pc, #144]	@ (80019fc <main+0x264>)
 800196a:	f7ff fcbb 	bl	80012e4 <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 800196e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a18 <main+0x280>)
 8001970:	7819      	ldrb	r1, [r3, #0]
 8001972:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <main+0x280>)
 8001974:	785a      	ldrb	r2, [r3, #1]
 8001976:	4b28      	ldr	r3, [pc, #160]	@ (8001a18 <main+0x280>)
 8001978:	789b      	ldrb	r3, [r3, #2]
 800197a:	4820      	ldr	r0, [pc, #128]	@ (80019fc <main+0x264>)
 800197c:	f7ff f90a 	bl	8000b94 <SetTime7Seg_Top>
					sTime.Seconds);
		}
		if (encoderValue == 5) {
 8001980:	4b24      	ldr	r3, [pc, #144]	@ (8001a14 <main+0x27c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b05      	cmp	r3, #5
 8001986:	d11c      	bne.n	80019c2 <main+0x22a>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 8001988:	4b23      	ldr	r3, [pc, #140]	@ (8001a18 <main+0x280>)
 800198a:	789b      	ldrb	r3, [r3, #2]
 800198c:	4a22      	ldr	r2, [pc, #136]	@ (8001a18 <main+0x280>)
 800198e:	7852      	ldrb	r2, [r2, #1]
 8001990:	4619      	mov	r1, r3
 8001992:	481a      	ldr	r0, [pc, #104]	@ (80019fc <main+0x264>)
 8001994:	f7ff fb94 	bl	80010c0 <SetSecondLedEvenOdd>
			SetHourRing(&clockReg, sTime.Hours, 1, 1);
 8001998:	4b1f      	ldr	r3, [pc, #124]	@ (8001a18 <main+0x280>)
 800199a:	7819      	ldrb	r1, [r3, #0]
 800199c:	2301      	movs	r3, #1
 800199e:	2201      	movs	r2, #1
 80019a0:	4816      	ldr	r0, [pc, #88]	@ (80019fc <main+0x264>)
 80019a2:	f7ff f891 	bl	8000ac8 <SetHourRing>
			SetDots(&clockReg, 1, 1);
 80019a6:	2201      	movs	r2, #1
 80019a8:	2101      	movs	r1, #1
 80019aa:	4814      	ldr	r0, [pc, #80]	@ (80019fc <main+0x264>)
 80019ac:	f7ff fc9a 	bl	80012e4 <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 80019b0:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <main+0x280>)
 80019b2:	7819      	ldrb	r1, [r3, #0]
 80019b4:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <main+0x280>)
 80019b6:	785a      	ldrb	r2, [r3, #1]
 80019b8:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <main+0x280>)
 80019ba:	789b      	ldrb	r3, [r3, #2]
 80019bc:	480f      	ldr	r0, [pc, #60]	@ (80019fc <main+0x264>)
 80019be:	f7ff f8e9 	bl	8000b94 <SetTime7Seg_Top>
					sTime.Seconds);
		}

		Set7Seg_DisplayLargeNumber(&clockReg, encoderValue);
 80019c2:	4b14      	ldr	r3, [pc, #80]	@ (8001a14 <main+0x27c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	17da      	asrs	r2, r3, #31
 80019c8:	461c      	mov	r4, r3
 80019ca:	4615      	mov	r5, r2
 80019cc:	4622      	mov	r2, r4
 80019ce:	462b      	mov	r3, r5
 80019d0:	480a      	ldr	r0, [pc, #40]	@ (80019fc <main+0x264>)
 80019d2:	f7ff fa19 	bl	8000e08 <Set7Seg_DisplayLargeNumber>

		// Dla przykładu – dolny wyświetlacz: stała wartość
		//SetTime7Seg(&clockReg, 0, encoderValue, 3, false);

		// Aktualizuj rejestry
		UpdateAllDisplays(&clockReg);
 80019d6:	4809      	ldr	r0, [pc, #36]	@ (80019fc <main+0x264>)
 80019d8:	f7ff fb02 	bl	8000fe0 <UpdateAllDisplays>

		// Opóźnij (np. 100 ms)
		// Rozpoczęcie konwersji ADC
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80019dc:	480f      	ldr	r0, [pc, #60]	@ (8001a1c <main+0x284>)
 80019de:	f000 fe85 	bl	80026ec <HAL_ADC_Start>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <main+0x254>
			Error_Handler();
 80019e8:	f000 f8d8 	bl	8001b9c <Error_Handler>
		}
		Button_Process();
 80019ec:	f7fe fe54 	bl	8000698 <Button_Process>
		HAL_Delay(10);
 80019f0:	200a      	movs	r0, #10
 80019f2:	f000 fe13 	bl	800261c <HAL_Delay>
		Get_RTC_Time();
 80019f6:	e723      	b.n	8001840 <main+0xa8>
 80019f8:	200002e0 	.word	0x200002e0
 80019fc:	200001f0 	.word	0x200001f0
 8001a00:	20000328 	.word	0x20000328
 8001a04:	20000370 	.word	0x20000370
 8001a08:	08001b55 	.word	0x08001b55
 8001a0c:	08001b6d 	.word	0x08001b6d
 8001a10:	08001b85 	.word	0x08001b85
 8001a14:	200001e8 	.word	0x200001e8
 8001a18:	200001d0 	.word	0x200001d0
 8001a1c:	20000058 	.word	0x20000058

08001a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b094      	sub	sp, #80	@ 0x50
 8001a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a26:	f107 0320 	add.w	r3, r7, #32
 8001a2a:	2230      	movs	r2, #48	@ 0x30
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f005 f900 	bl	8006c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	4b23      	ldr	r3, [pc, #140]	@ (8001ad8 <SystemClock_Config+0xb8>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	4a22      	ldr	r2, [pc, #136]	@ (8001ad8 <SystemClock_Config+0xb8>)
 8001a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a54:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <SystemClock_Config+0xb8>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <SystemClock_Config+0xbc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001adc <SystemClock_Config+0xbc>)
 8001a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <SystemClock_Config+0xbc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001a80:	2305      	movs	r3, #5
 8001a82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a92:	f107 0320 	add.w	r3, r7, #32
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 f8ac 	bl	8003bf4 <HAL_RCC_OscConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001aa2:	f000 f87b 	bl	8001b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa6:	230f      	movs	r3, #15
 8001aa8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 fb0f 	bl	80040e4 <HAL_RCC_ClockConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001acc:	f000 f866 	bl	8001b9c <Error_Handler>
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	3750      	adds	r7, #80	@ 0x50
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40007000 	.word	0x40007000

08001ae0 <Get_RTC_Time>:
}

/**
 * @brief Odczytuje bieżący czas z RTC.
 */
void Get_RTC_Time(void) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4905      	ldr	r1, [pc, #20]	@ (8001afc <Get_RTC_Time+0x1c>)
 8001ae8:	4805      	ldr	r0, [pc, #20]	@ (8001b00 <Get_RTC_Time+0x20>)
 8001aea:	f002 fee6 	bl	80048ba <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001aee:	2200      	movs	r2, #0
 8001af0:	4904      	ldr	r1, [pc, #16]	@ (8001b04 <Get_RTC_Time+0x24>)
 8001af2:	4803      	ldr	r0, [pc, #12]	@ (8001b00 <Get_RTC_Time+0x20>)
 8001af4:	f002 ffc3 	bl	8004a7e <HAL_RTC_GetDate>
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200001d0 	.word	0x200001d0
 8001b00:	20000208 	.word	0x20000208
 8001b04:	200001e4 	.word	0x200001e4

08001b08 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
// Sprawdź, czy źródłem przerwania jest TIM5
	if (htim->Instance == TIM4) {
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0d      	ldr	r2, [pc, #52]	@ (8001b4c <HAL_TIM_IC_CaptureCallback+0x44>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d111      	bne.n	8001b3e <HAL_TIM_IC_CaptureCallback+0x36>
		// (Opcjonalnie) sprawdź, z którego kanału przyszło wywołanie:
		// if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { ... }
		// albo if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) { ... }

		// Sprawdź kierunek (czy licznik zlicza w dół czy w górę):
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	2b10      	cmp	r3, #16
 8001b26:	d105      	bne.n	8001b34 <HAL_TIM_IC_CaptureCallback+0x2c>
			// Liczymy w dół
			encoderValue--;
 8001b28:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001b30:	6013      	str	r3, [r2, #0]
		} else {
			// Liczymy w górę
			encoderValue++;
		}
	}
}
 8001b32:	e004      	b.n	8001b3e <HAL_TIM_IC_CaptureCallback+0x36>
			encoderValue++;
 8001b34:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	4a05      	ldr	r2, [pc, #20]	@ (8001b50 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001b3c:	6013      	str	r3, [r2, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40000800 	.word	0x40000800
 8001b50:	200001e8 	.word	0x200001e8

08001b54 <Button1_Pressed>:

/* USER CODE BEGIN 0 */
void Button1_Pressed(void) {
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
	// Implementacja obsługi pojedynczego naciśnięcia przycisku
	encoderValue = 0;
 8001b58:	4b03      	ldr	r3, [pc, #12]	@ (8001b68 <Button1_Pressed+0x14>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	200001e8 	.word	0x200001e8

08001b6c <Button1_DoubleClicked>:

void Button1_DoubleClicked(void) {
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
	// Implementacja obsługi dwukliku przycisku
	encoderValue = 10;
 8001b70:	4b03      	ldr	r3, [pc, #12]	@ (8001b80 <Button1_DoubleClicked+0x14>)
 8001b72:	220a      	movs	r2, #10
 8001b74:	601a      	str	r2, [r3, #0]
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	200001e8 	.word	0x200001e8

08001b84 <Button1_Held>:

void Button1_Held(void) {
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
	encoderValue = 20;
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <Button1_Held+0x14>)
 8001b8a:	2214      	movs	r2, #20
 8001b8c:	601a      	str	r2, [r3, #0]
	// Implementacja obsługi przytrzymania przycisku
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	200001e8 	.word	0x200001e8

08001b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba0:	b672      	cpsid	i
}
 8001ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();
	while (1) {
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <Error_Handler+0x8>

08001ba8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bc0:	4b24      	ldr	r3, [pc, #144]	@ (8001c54 <MX_RTC_Init+0xac>)
 8001bc2:	4a25      	ldr	r2, [pc, #148]	@ (8001c58 <MX_RTC_Init+0xb0>)
 8001bc4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bc6:	4b23      	ldr	r3, [pc, #140]	@ (8001c54 <MX_RTC_Init+0xac>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001bcc:	4b21      	ldr	r3, [pc, #132]	@ (8001c54 <MX_RTC_Init+0xac>)
 8001bce:	227f      	movs	r2, #127	@ 0x7f
 8001bd0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001bd2:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <MX_RTC_Init+0xac>)
 8001bd4:	22ff      	movs	r2, #255	@ 0xff
 8001bd6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c54 <MX_RTC_Init+0xac>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bde:	4b1d      	ldr	r3, [pc, #116]	@ (8001c54 <MX_RTC_Init+0xac>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <MX_RTC_Init+0xac>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bea:	481a      	ldr	r0, [pc, #104]	@ (8001c54 <MX_RTC_Init+0xac>)
 8001bec:	f002 fd48 	bl	8004680 <HAL_RTC_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001bf6:	f7ff ffd1 	bl	8001b9c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2201      	movs	r2, #1
 8001c12:	4619      	mov	r1, r3
 8001c14:	480f      	ldr	r0, [pc, #60]	@ (8001c54 <MX_RTC_Init+0xac>)
 8001c16:	f002 fdb6 	bl	8004786 <HAL_RTC_SetTime>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001c20:	f7ff ffbc 	bl	8001b9c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c24:	2301      	movs	r3, #1
 8001c26:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c34:	463b      	mov	r3, r7
 8001c36:	2201      	movs	r2, #1
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4806      	ldr	r0, [pc, #24]	@ (8001c54 <MX_RTC_Init+0xac>)
 8001c3c:	f002 fe9b 	bl	8004976 <HAL_RTC_SetDate>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001c46:	f7ff ffa9 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000208 	.word	0x20000208
 8001c58:	40002800 	.word	0x40002800

08001c5c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0c      	ldr	r2, [pc, #48]	@ (8001cac <HAL_RTC_MspInit+0x50>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d111      	bne.n	8001ca2 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c86:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 fc09 	bl	80044a4 <HAL_RCCEx_PeriphCLKConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001c98:	f7ff ff80 	bl	8001b9c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c9c:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <HAL_RTC_MspInit+0x54>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	3720      	adds	r7, #32
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40002800 	.word	0x40002800
 8001cb0:	42470e3c 	.word	0x42470e3c

08001cb4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cb8:	4b17      	ldr	r3, [pc, #92]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cba:	4a18      	ldr	r2, [pc, #96]	@ (8001d1c <MX_SPI1_Init+0x68>)
 8001cbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cbe:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cc0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cc6:	4b14      	ldr	r3, [pc, #80]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ce4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001ce8:	2220      	movs	r2, #32
 8001cea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cfe:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001d00:	220a      	movs	r2, #10
 8001d02:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d04:	4804      	ldr	r0, [pc, #16]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001d06:	f002 ffc7 	bl	8004c98 <HAL_SPI_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d10:	f7ff ff44 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000228 	.word	0x20000228
 8001d1c:	40013000 	.word	0x40013000

08001d20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	@ 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a34      	ldr	r2, [pc, #208]	@ (8001e10 <HAL_SPI_MspInit+0xf0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d161      	bne.n	8001e06 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	4b33      	ldr	r3, [pc, #204]	@ (8001e14 <HAL_SPI_MspInit+0xf4>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4a:	4a32      	ldr	r2, [pc, #200]	@ (8001e14 <HAL_SPI_MspInit+0xf4>)
 8001d4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d52:	4b30      	ldr	r3, [pc, #192]	@ (8001e14 <HAL_SPI_MspInit+0xf4>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b2c      	ldr	r3, [pc, #176]	@ (8001e14 <HAL_SPI_MspInit+0xf4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	4a2b      	ldr	r2, [pc, #172]	@ (8001e14 <HAL_SPI_MspInit+0xf4>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6e:	4b29      	ldr	r3, [pc, #164]	@ (8001e14 <HAL_SPI_MspInit+0xf4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d7a:	23a0      	movs	r3, #160	@ 0xa0
 8001d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d86:	2303      	movs	r3, #3
 8001d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	4619      	mov	r1, r3
 8001d94:	4820      	ldr	r0, [pc, #128]	@ (8001e18 <HAL_SPI_MspInit+0xf8>)
 8001d96:	f001 fc1f 	bl	80035d8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001d9a:	4b20      	ldr	r3, [pc, #128]	@ (8001e1c <HAL_SPI_MspInit+0xfc>)
 8001d9c:	4a20      	ldr	r2, [pc, #128]	@ (8001e20 <HAL_SPI_MspInit+0x100>)
 8001d9e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001da0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e1c <HAL_SPI_MspInit+0xfc>)
 8001da2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001da6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001da8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e1c <HAL_SPI_MspInit+0xfc>)
 8001daa:	2240      	movs	r2, #64	@ 0x40
 8001dac:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dae:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <HAL_SPI_MspInit+0xfc>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001db4:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <HAL_SPI_MspInit+0xfc>)
 8001db6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dba:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dbc:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <HAL_SPI_MspInit+0xfc>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dc2:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <HAL_SPI_MspInit+0xfc>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001dc8:	4b14      	ldr	r3, [pc, #80]	@ (8001e1c <HAL_SPI_MspInit+0xfc>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dce:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <HAL_SPI_MspInit+0xfc>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <HAL_SPI_MspInit+0xfc>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001dda:	4810      	ldr	r0, [pc, #64]	@ (8001e1c <HAL_SPI_MspInit+0xfc>)
 8001ddc:	f001 f86a 	bl	8002eb4 <HAL_DMA_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001de6:	f7ff fed9 	bl	8001b9c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a0b      	ldr	r2, [pc, #44]	@ (8001e1c <HAL_SPI_MspInit+0xfc>)
 8001dee:	649a      	str	r2, [r3, #72]	@ 0x48
 8001df0:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <HAL_SPI_MspInit+0xfc>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2023      	movs	r0, #35	@ 0x23
 8001dfc:	f001 f823 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e00:	2023      	movs	r0, #35	@ 0x23
 8001e02:	f001 f83c 	bl	8002e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	@ 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40013000 	.word	0x40013000
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	20000280 	.word	0x20000280
 8001e20:	40026458 	.word	0x40026458

08001e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <HAL_MspInit+0x4c>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e32:	4a0f      	ldr	r2, [pc, #60]	@ (8001e70 <HAL_MspInit+0x4c>)
 8001e34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e70 <HAL_MspInit+0x4c>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <HAL_MspInit+0x4c>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	4a08      	ldr	r2, [pc, #32]	@ (8001e70 <HAL_MspInit+0x4c>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <HAL_MspInit+0x4c>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800

08001e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <NMI_Handler+0x4>

08001e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <HardFault_Handler+0x4>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <BusFault_Handler+0x4>

08001e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <UsageFault_Handler+0x4>

08001e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eca:	f000 fb87 	bl	80025dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001ed8:	4802      	ldr	r0, [pc, #8]	@ (8001ee4 <DMA1_Stream2_IRQHandler+0x10>)
 8001eda:	f001 f913 	bl	8003104 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000110 	.word	0x20000110

08001ee8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001eec:	4802      	ldr	r0, [pc, #8]	@ (8001ef8 <TIM4_IRQHandler+0x10>)
 8001eee:	f003 fd99 	bl	8005a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000328 	.word	0x20000328

08001efc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001f00:	4802      	ldr	r0, [pc, #8]	@ (8001f0c <SPI1_IRQHandler+0x10>)
 8001f02:	f003 f805 	bl	8004f10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000228 	.word	0x20000228

08001f10 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001f14:	4802      	ldr	r0, [pc, #8]	@ (8001f20 <DMA1_Stream7_IRQHandler+0x10>)
 8001f16:	f001 f8f5 	bl	8003104 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000170 	.word	0x20000170

08001f24 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f28:	4802      	ldr	r0, [pc, #8]	@ (8001f34 <TIM5_IRQHandler+0x10>)
 8001f2a:	f003 fd7b 	bl	8005a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000370 	.word	0x20000370

08001f38 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f3c:	4802      	ldr	r0, [pc, #8]	@ (8001f48 <DMA2_Stream2_IRQHandler+0x10>)
 8001f3e:	f001 f8e1 	bl	8003104 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000400 	.word	0x20000400

08001f4c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001f50:	4802      	ldr	r0, [pc, #8]	@ (8001f5c <DMA2_Stream3_IRQHandler+0x10>)
 8001f52:	f001 f8d7 	bl	8003104 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000280 	.word	0x20000280

08001f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <SystemInit+0x20>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f6a:	4a05      	ldr	r2, [pc, #20]	@ (8001f80 <SystemInit+0x20>)
 8001f6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b096      	sub	sp, #88	@ 0x58
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f98:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
 8001fb0:	611a      	str	r2, [r3, #16]
 8001fb2:	615a      	str	r2, [r3, #20]
 8001fb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	2220      	movs	r2, #32
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f004 fe39 	bl	8006c34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80020bc <MX_TIM1_Init+0x138>)
 8001fc4:	4a3e      	ldr	r2, [pc, #248]	@ (80020c0 <MX_TIM1_Init+0x13c>)
 8001fc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 8001fc8:	4b3c      	ldr	r3, [pc, #240]	@ (80020bc <MX_TIM1_Init+0x138>)
 8001fca:	2218      	movs	r2, #24
 8001fcc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fce:	4b3b      	ldr	r3, [pc, #236]	@ (80020bc <MX_TIM1_Init+0x138>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001fd4:	4b39      	ldr	r3, [pc, #228]	@ (80020bc <MX_TIM1_Init+0x138>)
 8001fd6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fdc:	4b37      	ldr	r3, [pc, #220]	@ (80020bc <MX_TIM1_Init+0x138>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fe2:	4b36      	ldr	r3, [pc, #216]	@ (80020bc <MX_TIM1_Init+0x138>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe8:	4b34      	ldr	r3, [pc, #208]	@ (80020bc <MX_TIM1_Init+0x138>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fee:	4833      	ldr	r0, [pc, #204]	@ (80020bc <MX_TIM1_Init+0x138>)
 8001ff0:	f003 fa08 	bl	8005404 <HAL_TIM_Base_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001ffa:	f7ff fdcf 	bl	8001b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002002:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002004:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002008:	4619      	mov	r1, r3
 800200a:	482c      	ldr	r0, [pc, #176]	@ (80020bc <MX_TIM1_Init+0x138>)
 800200c:	f003 febc 	bl	8005d88 <HAL_TIM_ConfigClockSource>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002016:	f7ff fdc1 	bl	8001b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800201a:	4828      	ldr	r0, [pc, #160]	@ (80020bc <MX_TIM1_Init+0x138>)
 800201c:	f003 faa4 	bl	8005568 <HAL_TIM_PWM_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002026:	f7ff fdb9 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002032:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002036:	4619      	mov	r1, r3
 8002038:	4820      	ldr	r0, [pc, #128]	@ (80020bc <MX_TIM1_Init+0x138>)
 800203a:	f004 fa63 	bl	8006504 <HAL_TIMEx_MasterConfigSynchronization>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002044:	f7ff fdaa 	bl	8001b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002048:	2360      	movs	r3, #96	@ 0x60
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002050:	2302      	movs	r3, #2
 8002052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002054:	2300      	movs	r3, #0
 8002056:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800205c:	2300      	movs	r3, #0
 800205e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002060:	2300      	movs	r3, #0
 8002062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002068:	2200      	movs	r2, #0
 800206a:	4619      	mov	r1, r3
 800206c:	4813      	ldr	r0, [pc, #76]	@ (80020bc <MX_TIM1_Init+0x138>)
 800206e:	f003 fdc9 	bl	8005c04 <HAL_TIM_PWM_ConfigChannel>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002078:	f7ff fd90 	bl	8001b9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002090:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002094:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	4619      	mov	r1, r3
 800209e:	4807      	ldr	r0, [pc, #28]	@ (80020bc <MX_TIM1_Init+0x138>)
 80020a0:	f004 fa9e 	bl	80065e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80020aa:	f7ff fd77 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020ae:	4803      	ldr	r0, [pc, #12]	@ (80020bc <MX_TIM1_Init+0x138>)
 80020b0:	f000 f938 	bl	8002324 <HAL_TIM_MspPostInit>

}
 80020b4:	bf00      	nop
 80020b6:	3758      	adds	r7, #88	@ 0x58
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	200002e0 	.word	0x200002e0
 80020c0:	40010000 	.word	0x40010000

080020c4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08c      	sub	sp, #48	@ 0x30
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	2224      	movs	r2, #36	@ 0x24
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 fdae 	bl	8006c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020e0:	4b20      	ldr	r3, [pc, #128]	@ (8002164 <MX_TIM4_Init+0xa0>)
 80020e2:	4a21      	ldr	r2, [pc, #132]	@ (8002168 <MX_TIM4_Init+0xa4>)
 80020e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002164 <MX_TIM4_Init+0xa0>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002164 <MX_TIM4_Init+0xa0>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80020f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002164 <MX_TIM4_Init+0xa0>)
 80020f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <MX_TIM4_Init+0xa0>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002100:	4b18      	ldr	r3, [pc, #96]	@ (8002164 <MX_TIM4_Init+0xa0>)
 8002102:	2200      	movs	r2, #0
 8002104:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002106:	2301      	movs	r3, #1
 8002108:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800210e:	2301      	movs	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800211a:	2302      	movs	r3, #2
 800211c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800211e:	2301      	movs	r3, #1
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002122:	2300      	movs	r3, #0
 8002124:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	4619      	mov	r1, r3
 8002130:	480c      	ldr	r0, [pc, #48]	@ (8002164 <MX_TIM4_Init+0xa0>)
 8002132:	f003 fb23 	bl	800577c <HAL_TIM_Encoder_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800213c:	f7ff fd2e 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002140:	2300      	movs	r3, #0
 8002142:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	@ (8002164 <MX_TIM4_Init+0xa0>)
 800214e:	f004 f9d9 	bl	8006504 <HAL_TIMEx_MasterConfigSynchronization>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002158:	f7ff fd20 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800215c:	bf00      	nop
 800215e:	3730      	adds	r7, #48	@ 0x30
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000328 	.word	0x20000328
 8002168:	40000800 	.word	0x40000800

0800216c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002172:	f107 0308 	add.w	r3, r7, #8
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002180:	463b      	mov	r3, r7
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002188:	4b1d      	ldr	r3, [pc, #116]	@ (8002200 <MX_TIM5_Init+0x94>)
 800218a:	4a1e      	ldr	r2, [pc, #120]	@ (8002204 <MX_TIM5_Init+0x98>)
 800218c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 24999;
 800218e:	4b1c      	ldr	r3, [pc, #112]	@ (8002200 <MX_TIM5_Init+0x94>)
 8002190:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8002194:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002196:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <MX_TIM5_Init+0x94>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9;
 800219c:	4b18      	ldr	r3, [pc, #96]	@ (8002200 <MX_TIM5_Init+0x94>)
 800219e:	2209      	movs	r2, #9
 80021a0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a2:	4b17      	ldr	r3, [pc, #92]	@ (8002200 <MX_TIM5_Init+0x94>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a8:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <MX_TIM5_Init+0x94>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80021ae:	4814      	ldr	r0, [pc, #80]	@ (8002200 <MX_TIM5_Init+0x94>)
 80021b0:	f003 f928 	bl	8005404 <HAL_TIM_Base_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80021ba:	f7ff fcef 	bl	8001b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80021c4:	f107 0308 	add.w	r3, r7, #8
 80021c8:	4619      	mov	r1, r3
 80021ca:	480d      	ldr	r0, [pc, #52]	@ (8002200 <MX_TIM5_Init+0x94>)
 80021cc:	f003 fddc 	bl	8005d88 <HAL_TIM_ConfigClockSource>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80021d6:	f7ff fce1 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021e2:	463b      	mov	r3, r7
 80021e4:	4619      	mov	r1, r3
 80021e6:	4806      	ldr	r0, [pc, #24]	@ (8002200 <MX_TIM5_Init+0x94>)
 80021e8:	f004 f98c 	bl	8006504 <HAL_TIMEx_MasterConfigSynchronization>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80021f2:	f7ff fcd3 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000370 	.word	0x20000370
 8002204:	40000c00 	.word	0x40000c00

08002208 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a18      	ldr	r2, [pc, #96]	@ (8002278 <HAL_TIM_Base_MspInit+0x70>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d10e      	bne.n	8002238 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b17      	ldr	r3, [pc, #92]	@ (800227c <HAL_TIM_Base_MspInit+0x74>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002222:	4a16      	ldr	r2, [pc, #88]	@ (800227c <HAL_TIM_Base_MspInit+0x74>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6453      	str	r3, [r2, #68]	@ 0x44
 800222a:	4b14      	ldr	r3, [pc, #80]	@ (800227c <HAL_TIM_Base_MspInit+0x74>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002236:	e01a      	b.n	800226e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a10      	ldr	r2, [pc, #64]	@ (8002280 <HAL_TIM_Base_MspInit+0x78>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d115      	bne.n	800226e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	4b0d      	ldr	r3, [pc, #52]	@ (800227c <HAL_TIM_Base_MspInit+0x74>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	4a0c      	ldr	r2, [pc, #48]	@ (800227c <HAL_TIM_Base_MspInit+0x74>)
 800224c:	f043 0308 	orr.w	r3, r3, #8
 8002250:	6413      	str	r3, [r2, #64]	@ 0x40
 8002252:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <HAL_TIM_Base_MspInit+0x74>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	2032      	movs	r0, #50	@ 0x32
 8002264:	f000 fdef 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002268:	2032      	movs	r0, #50	@ 0x32
 800226a:	f000 fe08 	bl	8002e7e <HAL_NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40010000 	.word	0x40010000
 800227c:	40023800 	.word	0x40023800
 8002280:	40000c00 	.word	0x40000c00

08002284 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	@ 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002318 <HAL_TIM_Encoder_MspInit+0x94>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d133      	bne.n	800230e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	4b1c      	ldr	r3, [pc, #112]	@ (800231c <HAL_TIM_Encoder_MspInit+0x98>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	4a1b      	ldr	r2, [pc, #108]	@ (800231c <HAL_TIM_Encoder_MspInit+0x98>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b6:	4b19      	ldr	r3, [pc, #100]	@ (800231c <HAL_TIM_Encoder_MspInit+0x98>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	4b15      	ldr	r3, [pc, #84]	@ (800231c <HAL_TIM_Encoder_MspInit+0x98>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	4a14      	ldr	r2, [pc, #80]	@ (800231c <HAL_TIM_Encoder_MspInit+0x98>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d2:	4b12      	ldr	r3, [pc, #72]	@ (800231c <HAL_TIM_Encoder_MspInit+0x98>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022de:	23c0      	movs	r3, #192	@ 0xc0
 80022e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022e6:	2302      	movs	r3, #2
 80022e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022ee:	2302      	movs	r3, #2
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	4619      	mov	r1, r3
 80022f8:	4809      	ldr	r0, [pc, #36]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x9c>)
 80022fa:	f001 f96d 	bl	80035d8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	201e      	movs	r0, #30
 8002304:	f000 fd9f 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002308:	201e      	movs	r0, #30
 800230a:	f000 fdb8 	bl	8002e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800230e:	bf00      	nop
 8002310:	3728      	adds	r7, #40	@ 0x28
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40000800 	.word	0x40000800
 800231c:	40023800 	.word	0x40023800
 8002320:	40020400 	.word	0x40020400

08002324 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 030c 	add.w	r3, r7, #12
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a12      	ldr	r2, [pc, #72]	@ (800238c <HAL_TIM_MspPostInit+0x68>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d11e      	bne.n	8002384 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	4b11      	ldr	r3, [pc, #68]	@ (8002390 <HAL_TIM_MspPostInit+0x6c>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	4a10      	ldr	r2, [pc, #64]	@ (8002390 <HAL_TIM_MspPostInit+0x6c>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6313      	str	r3, [r2, #48]	@ 0x30
 8002356:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <HAL_TIM_MspPostInit+0x6c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002362:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002366:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002374:	2301      	movs	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	4619      	mov	r1, r3
 800237e:	4805      	ldr	r0, [pc, #20]	@ (8002394 <HAL_TIM_MspPostInit+0x70>)
 8002380:	f001 f92a 	bl	80035d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002384:	bf00      	nop
 8002386:	3720      	adds	r7, #32
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40010000 	.word	0x40010000
 8002390:	40023800 	.word	0x40023800
 8002394:	40020000 	.word	0x40020000

08002398 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800239c:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <MX_USART1_UART_Init+0x4c>)
 800239e:	4a12      	ldr	r2, [pc, #72]	@ (80023e8 <MX_USART1_UART_Init+0x50>)
 80023a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <MX_USART1_UART_Init+0x4c>)
 80023a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023aa:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <MX_USART1_UART_Init+0x4c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023b0:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <MX_USART1_UART_Init+0x4c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023b6:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <MX_USART1_UART_Init+0x4c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023bc:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <MX_USART1_UART_Init+0x4c>)
 80023be:	220c      	movs	r2, #12
 80023c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023c2:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <MX_USART1_UART_Init+0x4c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <MX_USART1_UART_Init+0x4c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023ce:	4805      	ldr	r0, [pc, #20]	@ (80023e4 <MX_USART1_UART_Init+0x4c>)
 80023d0:	f004 f96c 	bl	80066ac <HAL_UART_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023da:	f7ff fbdf 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200003b8 	.word	0x200003b8
 80023e8:	40011000 	.word	0x40011000

080023ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	@ 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a31      	ldr	r2, [pc, #196]	@ (80024d0 <HAL_UART_MspInit+0xe4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d15b      	bne.n	80024c6 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	4b30      	ldr	r3, [pc, #192]	@ (80024d4 <HAL_UART_MspInit+0xe8>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	4a2f      	ldr	r2, [pc, #188]	@ (80024d4 <HAL_UART_MspInit+0xe8>)
 8002418:	f043 0310 	orr.w	r3, r3, #16
 800241c:	6453      	str	r3, [r2, #68]	@ 0x44
 800241e:	4b2d      	ldr	r3, [pc, #180]	@ (80024d4 <HAL_UART_MspInit+0xe8>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	4b29      	ldr	r3, [pc, #164]	@ (80024d4 <HAL_UART_MspInit+0xe8>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	4a28      	ldr	r2, [pc, #160]	@ (80024d4 <HAL_UART_MspInit+0xe8>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6313      	str	r3, [r2, #48]	@ 0x30
 800243a:	4b26      	ldr	r3, [pc, #152]	@ (80024d4 <HAL_UART_MspInit+0xe8>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002446:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800244a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244c:	2302      	movs	r3, #2
 800244e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002454:	2303      	movs	r3, #3
 8002456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002458:	2307      	movs	r3, #7
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	481d      	ldr	r0, [pc, #116]	@ (80024d8 <HAL_UART_MspInit+0xec>)
 8002464:	f001 f8b8 	bl	80035d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002468:	4b1c      	ldr	r3, [pc, #112]	@ (80024dc <HAL_UART_MspInit+0xf0>)
 800246a:	4a1d      	ldr	r2, [pc, #116]	@ (80024e0 <HAL_UART_MspInit+0xf4>)
 800246c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800246e:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <HAL_UART_MspInit+0xf0>)
 8002470:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002474:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002476:	4b19      	ldr	r3, [pc, #100]	@ (80024dc <HAL_UART_MspInit+0xf0>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800247c:	4b17      	ldr	r3, [pc, #92]	@ (80024dc <HAL_UART_MspInit+0xf0>)
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002482:	4b16      	ldr	r3, [pc, #88]	@ (80024dc <HAL_UART_MspInit+0xf0>)
 8002484:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002488:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800248a:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <HAL_UART_MspInit+0xf0>)
 800248c:	2200      	movs	r2, #0
 800248e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002490:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_UART_MspInit+0xf0>)
 8002492:	2200      	movs	r2, #0
 8002494:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002496:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <HAL_UART_MspInit+0xf0>)
 8002498:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800249c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800249e:	4b0f      	ldr	r3, [pc, #60]	@ (80024dc <HAL_UART_MspInit+0xf0>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024a4:	4b0d      	ldr	r3, [pc, #52]	@ (80024dc <HAL_UART_MspInit+0xf0>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024aa:	480c      	ldr	r0, [pc, #48]	@ (80024dc <HAL_UART_MspInit+0xf0>)
 80024ac:	f000 fd02 	bl	8002eb4 <HAL_DMA_Init>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80024b6:	f7ff fb71 	bl	8001b9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a07      	ldr	r2, [pc, #28]	@ (80024dc <HAL_UART_MspInit+0xf0>)
 80024be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024c0:	4a06      	ldr	r2, [pc, #24]	@ (80024dc <HAL_UART_MspInit+0xf0>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024c6:	bf00      	nop
 80024c8:	3728      	adds	r7, #40	@ 0x28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40011000 	.word	0x40011000
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40020000 	.word	0x40020000
 80024dc:	20000400 	.word	0x20000400
 80024e0:	40026440 	.word	0x40026440

080024e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800251c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024e8:	f7ff fd3a 	bl	8001f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024ec:	480c      	ldr	r0, [pc, #48]	@ (8002520 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ee:	490d      	ldr	r1, [pc, #52]	@ (8002524 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002528 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f4:	e002      	b.n	80024fc <LoopCopyDataInit>

080024f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fa:	3304      	adds	r3, #4

080024fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002500:	d3f9      	bcc.n	80024f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002502:	4a0a      	ldr	r2, [pc, #40]	@ (800252c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002504:	4c0a      	ldr	r4, [pc, #40]	@ (8002530 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002508:	e001      	b.n	800250e <LoopFillZerobss>

0800250a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800250c:	3204      	adds	r2, #4

0800250e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002510:	d3fb      	bcc.n	800250a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002512:	f004 fb97 	bl	8006c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002516:	f7ff f93f 	bl	8001798 <main>
  bx  lr    
 800251a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800251c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002524:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8002528:	08006d68 	.word	0x08006d68
  ldr r2, =_sbss
 800252c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8002530:	20000464 	.word	0x20000464

08002534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002534:	e7fe      	b.n	8002534 <ADC_IRQHandler>
	...

08002538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800253c:	4b0e      	ldr	r3, [pc, #56]	@ (8002578 <HAL_Init+0x40>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0d      	ldr	r2, [pc, #52]	@ (8002578 <HAL_Init+0x40>)
 8002542:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002548:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <HAL_Init+0x40>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <HAL_Init+0x40>)
 800254e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002554:	4b08      	ldr	r3, [pc, #32]	@ (8002578 <HAL_Init+0x40>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a07      	ldr	r2, [pc, #28]	@ (8002578 <HAL_Init+0x40>)
 800255a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800255e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002560:	2003      	movs	r0, #3
 8002562:	f000 fc65 	bl	8002e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002566:	200f      	movs	r0, #15
 8002568:	f000 f808 	bl	800257c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800256c:	f7ff fc5a 	bl	8001e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023c00 	.word	0x40023c00

0800257c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002584:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <HAL_InitTick+0x54>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b12      	ldr	r3, [pc, #72]	@ (80025d4 <HAL_InitTick+0x58>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002592:	fbb3 f3f1 	udiv	r3, r3, r1
 8002596:	fbb2 f3f3 	udiv	r3, r2, r3
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fc7d 	bl	8002e9a <HAL_SYSTICK_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e00e      	b.n	80025c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b0f      	cmp	r3, #15
 80025ae:	d80a      	bhi.n	80025c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b0:	2200      	movs	r2, #0
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295
 80025b8:	f000 fc45 	bl	8002e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025bc:	4a06      	ldr	r2, [pc, #24]	@ (80025d8 <HAL_InitTick+0x5c>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e000      	b.n	80025c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000030 	.word	0x20000030
 80025d4:	20000038 	.word	0x20000038
 80025d8:	20000034 	.word	0x20000034

080025dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e0:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <HAL_IncTick+0x20>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_IncTick+0x24>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	4a04      	ldr	r2, [pc, #16]	@ (8002600 <HAL_IncTick+0x24>)
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000038 	.word	0x20000038
 8002600:	20000460 	.word	0x20000460

08002604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return uwTick;
 8002608:	4b03      	ldr	r3, [pc, #12]	@ (8002618 <HAL_GetTick+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000460 	.word	0x20000460

0800261c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff ffee 	bl	8002604 <HAL_GetTick>
 8002628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d005      	beq.n	8002642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002636:	4b0a      	ldr	r3, [pc, #40]	@ (8002660 <HAL_Delay+0x44>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002642:	bf00      	nop
 8002644:	f7ff ffde 	bl	8002604 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	429a      	cmp	r2, r3
 8002652:	d8f7      	bhi.n	8002644 <HAL_Delay+0x28>
  {
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000038 	.word	0x20000038

08002664 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e033      	b.n	80026e2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fd ff70 	bl	8000568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d118      	bne.n	80026d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026aa:	f023 0302 	bic.w	r3, r3, #2
 80026ae:	f043 0202 	orr.w	r2, r3, #2
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f9ee 	bl	8002a98 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	f023 0303 	bic.w	r3, r3, #3
 80026ca:	f043 0201 	orr.w	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80026d2:	e001      	b.n	80026d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_ADC_Start+0x1a>
 8002702:	2302      	movs	r3, #2
 8002704:	e097      	b.n	8002836 <HAL_ADC_Start+0x14a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d018      	beq.n	800274e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800272c:	4b45      	ldr	r3, [pc, #276]	@ (8002844 <HAL_ADC_Start+0x158>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a45      	ldr	r2, [pc, #276]	@ (8002848 <HAL_ADC_Start+0x15c>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0c9a      	lsrs	r2, r3, #18
 8002738:	4613      	mov	r3, r2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4413      	add	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002740:	e002      	b.n	8002748 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	3b01      	subs	r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f9      	bne.n	8002742 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d15f      	bne.n	800281c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002786:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800279a:	d106      	bne.n	80027aa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a0:	f023 0206 	bic.w	r2, r3, #6
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80027a8:	e002      	b.n	80027b0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027b8:	4b24      	ldr	r3, [pc, #144]	@ (800284c <HAL_ADC_Start+0x160>)
 80027ba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80027c4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10f      	bne.n	80027f2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d129      	bne.n	8002834 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	e020      	b.n	8002834 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a16      	ldr	r2, [pc, #88]	@ (8002850 <HAL_ADC_Start+0x164>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d11b      	bne.n	8002834 <HAL_ADC_Start+0x148>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d114      	bne.n	8002834 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	e00b      	b.n	8002834 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	f043 0210 	orr.w	r2, r3, #16
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282c:	f043 0201 	orr.w	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000030 	.word	0x20000030
 8002848:	431bde83 	.word	0x431bde83
 800284c:	40012300 	.word	0x40012300
 8002850:	40012000 	.word	0x40012000

08002854 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x1c>
 800286c:	2302      	movs	r3, #2
 800286e:	e105      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x228>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b09      	cmp	r3, #9
 800287e:	d925      	bls.n	80028cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68d9      	ldr	r1, [r3, #12]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	3b1e      	subs	r3, #30
 8002896:	2207      	movs	r2, #7
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43da      	mvns	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	400a      	ands	r2, r1
 80028a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68d9      	ldr	r1, [r3, #12]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	4618      	mov	r0, r3
 80028b8:	4603      	mov	r3, r0
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4403      	add	r3, r0
 80028be:	3b1e      	subs	r3, #30
 80028c0:	409a      	lsls	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	e022      	b.n	8002912 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6919      	ldr	r1, [r3, #16]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	2207      	movs	r2, #7
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43da      	mvns	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	400a      	ands	r2, r1
 80028ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6919      	ldr	r1, [r3, #16]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	4618      	mov	r0, r3
 8002902:	4603      	mov	r3, r0
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4403      	add	r3, r0
 8002908:	409a      	lsls	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b06      	cmp	r3, #6
 8002918:	d824      	bhi.n	8002964 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	3b05      	subs	r3, #5
 800292c:	221f      	movs	r2, #31
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43da      	mvns	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	400a      	ands	r2, r1
 800293a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	4618      	mov	r0, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	3b05      	subs	r3, #5
 8002956:	fa00 f203 	lsl.w	r2, r0, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	635a      	str	r2, [r3, #52]	@ 0x34
 8002962:	e04c      	b.n	80029fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b0c      	cmp	r3, #12
 800296a:	d824      	bhi.n	80029b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	3b23      	subs	r3, #35	@ 0x23
 800297e:	221f      	movs	r2, #31
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43da      	mvns	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	400a      	ands	r2, r1
 800298c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	4618      	mov	r0, r3
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	3b23      	subs	r3, #35	@ 0x23
 80029a8:	fa00 f203 	lsl.w	r2, r0, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80029b4:	e023      	b.n	80029fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	3b41      	subs	r3, #65	@ 0x41
 80029c8:	221f      	movs	r2, #31
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43da      	mvns	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	400a      	ands	r2, r1
 80029d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	4618      	mov	r0, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	3b41      	subs	r3, #65	@ 0x41
 80029f2:	fa00 f203 	lsl.w	r2, r0, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029fe:	4b22      	ldr	r3, [pc, #136]	@ (8002a88 <HAL_ADC_ConfigChannel+0x234>)
 8002a00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a21      	ldr	r2, [pc, #132]	@ (8002a8c <HAL_ADC_ConfigChannel+0x238>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d109      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x1cc>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b12      	cmp	r3, #18
 8002a12:	d105      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a19      	ldr	r2, [pc, #100]	@ (8002a8c <HAL_ADC_ConfigChannel+0x238>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d123      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x21e>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d003      	beq.n	8002a3a <HAL_ADC_ConfigChannel+0x1e6>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b11      	cmp	r3, #17
 8002a38:	d11b      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b10      	cmp	r3, #16
 8002a4c:	d111      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a4e:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <HAL_ADC_ConfigChannel+0x23c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a10      	ldr	r2, [pc, #64]	@ (8002a94 <HAL_ADC_ConfigChannel+0x240>)
 8002a54:	fba2 2303 	umull	r2, r3, r2, r3
 8002a58:	0c9a      	lsrs	r2, r3, #18
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a64:	e002      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f9      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40012300 	.word	0x40012300
 8002a8c:	40012000 	.word	0x40012000
 8002a90:	20000030 	.word	0x20000030
 8002a94:	431bde83 	.word	0x431bde83

08002a98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aa0:	4b79      	ldr	r3, [pc, #484]	@ (8002c88 <ADC_Init+0x1f0>)
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002acc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	021a      	lsls	r2, r3, #8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002af0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6899      	ldr	r1, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2a:	4a58      	ldr	r2, [pc, #352]	@ (8002c8c <ADC_Init+0x1f4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d022      	beq.n	8002b76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6899      	ldr	r1, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6899      	ldr	r1, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	e00f      	b.n	8002b96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b94:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0202 	bic.w	r2, r2, #2
 8002ba4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6899      	ldr	r1, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	7e1b      	ldrb	r3, [r3, #24]
 8002bb0:	005a      	lsls	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01b      	beq.n	8002bfc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bd2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002be2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	035a      	lsls	r2, r3, #13
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	e007      	b.n	8002c0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c0a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	051a      	lsls	r2, r3, #20
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6899      	ldr	r1, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c4e:	025a      	lsls	r2, r3, #9
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6899      	ldr	r1, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	029a      	lsls	r2, r3, #10
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	609a      	str	r2, [r3, #8]
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	40012300 	.word	0x40012300
 8002c8c:	0f000001 	.word	0x0f000001

08002c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cac:	4013      	ands	r3, r2
 8002cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cc2:	4a04      	ldr	r2, [pc, #16]	@ (8002cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	60d3      	str	r3, [r2, #12]
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cdc:	4b04      	ldr	r3, [pc, #16]	@ (8002cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	f003 0307 	and.w	r3, r3, #7
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	db0b      	blt.n	8002d1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	4907      	ldr	r1, [pc, #28]	@ (8002d2c <__NVIC_EnableIRQ+0x38>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	2001      	movs	r0, #1
 8002d16:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000e100 	.word	0xe000e100

08002d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	db0a      	blt.n	8002d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	490c      	ldr	r1, [pc, #48]	@ (8002d7c <__NVIC_SetPriority+0x4c>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	0112      	lsls	r2, r2, #4
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	440b      	add	r3, r1
 8002d54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d58:	e00a      	b.n	8002d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4908      	ldr	r1, [pc, #32]	@ (8002d80 <__NVIC_SetPriority+0x50>)
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	3b04      	subs	r3, #4
 8002d68:	0112      	lsls	r2, r2, #4
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	761a      	strb	r2, [r3, #24]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000e100 	.word	0xe000e100
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b089      	sub	sp, #36	@ 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f1c3 0307 	rsb	r3, r3, #7
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	bf28      	it	cs
 8002da2:	2304      	movcs	r3, #4
 8002da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d902      	bls.n	8002db4 <NVIC_EncodePriority+0x30>
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3b03      	subs	r3, #3
 8002db2:	e000      	b.n	8002db6 <NVIC_EncodePriority+0x32>
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	43d9      	mvns	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	4313      	orrs	r3, r2
         );
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3724      	adds	r7, #36	@ 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dfc:	d301      	bcc.n	8002e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e00f      	b.n	8002e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e02:	4a0a      	ldr	r2, [pc, #40]	@ (8002e2c <SysTick_Config+0x40>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0a:	210f      	movs	r1, #15
 8002e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e10:	f7ff ff8e 	bl	8002d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e14:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <SysTick_Config+0x40>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1a:	4b04      	ldr	r3, [pc, #16]	@ (8002e2c <SysTick_Config+0x40>)
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	e000e010 	.word	0xe000e010

08002e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ff29 	bl	8002c90 <__NVIC_SetPriorityGrouping>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e58:	f7ff ff3e 	bl	8002cd8 <__NVIC_GetPriorityGrouping>
 8002e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	6978      	ldr	r0, [r7, #20]
 8002e64:	f7ff ff8e 	bl	8002d84 <NVIC_EncodePriority>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ff5d 	bl	8002d30 <__NVIC_SetPriority>
}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff31 	bl	8002cf4 <__NVIC_EnableIRQ>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ffa2 	bl	8002dec <SysTick_Config>
 8002ea8:	4603      	mov	r3, r0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ec0:	f7ff fba0 	bl	8002604 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e099      	b.n	8003004 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ef0:	e00f      	b.n	8002f12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ef2:	f7ff fb87 	bl	8002604 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d908      	bls.n	8002f12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2203      	movs	r2, #3
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e078      	b.n	8003004 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e8      	bne.n	8002ef2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4b38      	ldr	r3, [pc, #224]	@ (800300c <HAL_DMA_Init+0x158>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d107      	bne.n	8002f7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	4313      	orrs	r3, r2
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f023 0307 	bic.w	r3, r3, #7
 8002f92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d117      	bne.n	8002fd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00e      	beq.n	8002fd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fa91 	bl	80034e0 <DMA_CheckFifoParam>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2240      	movs	r2, #64	@ 0x40
 8002fc8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e016      	b.n	8003004 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa48 	bl	8003474 <DMA_CalcBaseAndBitshift>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fec:	223f      	movs	r2, #63	@ 0x3f
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	f010803f 	.word	0xf010803f

08003010 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003026:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_DMA_Start_IT+0x26>
 8003032:	2302      	movs	r3, #2
 8003034:	e040      	b.n	80030b8 <HAL_DMA_Start_IT+0xa8>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d12f      	bne.n	80030aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2202      	movs	r2, #2
 800304e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f9da 	bl	8003418 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003068:	223f      	movs	r2, #63	@ 0x3f
 800306a:	409a      	lsls	r2, r3
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0216 	orr.w	r2, r2, #22
 800307e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003084:	2b00      	cmp	r3, #0
 8003086:	d007      	beq.n	8003098 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0208 	orr.w	r2, r2, #8
 8003096:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	e005      	b.n	80030b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030b2:	2302      	movs	r3, #2
 80030b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d004      	beq.n	80030de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2280      	movs	r2, #128	@ 0x80
 80030d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e00c      	b.n	80030f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2205      	movs	r2, #5
 80030e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003110:	4b8e      	ldr	r3, [pc, #568]	@ (800334c <HAL_DMA_IRQHandler+0x248>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a8e      	ldr	r2, [pc, #568]	@ (8003350 <HAL_DMA_IRQHandler+0x24c>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	0a9b      	lsrs	r3, r3, #10
 800311c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003122:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312e:	2208      	movs	r2, #8
 8003130:	409a      	lsls	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01a      	beq.n	8003170 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d013      	beq.n	8003170 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0204 	bic.w	r2, r2, #4
 8003156:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315c:	2208      	movs	r2, #8
 800315e:	409a      	lsls	r2, r3
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003168:	f043 0201 	orr.w	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003174:	2201      	movs	r2, #1
 8003176:	409a      	lsls	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d012      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003192:	2201      	movs	r2, #1
 8003194:	409a      	lsls	r2, r3
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800319e:	f043 0202 	orr.w	r2, r3, #2
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031aa:	2204      	movs	r2, #4
 80031ac:	409a      	lsls	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d012      	beq.n	80031dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00b      	beq.n	80031dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c8:	2204      	movs	r2, #4
 80031ca:	409a      	lsls	r2, r3
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d4:	f043 0204 	orr.w	r2, r3, #4
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e0:	2210      	movs	r2, #16
 80031e2:	409a      	lsls	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d043      	beq.n	8003274 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d03c      	beq.n	8003274 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fe:	2210      	movs	r2, #16
 8003200:	409a      	lsls	r2, r3
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d018      	beq.n	8003246 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d108      	bne.n	8003234 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d024      	beq.n	8003274 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	4798      	blx	r3
 8003232:	e01f      	b.n	8003274 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01b      	beq.n	8003274 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	4798      	blx	r3
 8003244:	e016      	b.n	8003274 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d107      	bne.n	8003264 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0208 	bic.w	r2, r2, #8
 8003262:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003278:	2220      	movs	r2, #32
 800327a:	409a      	lsls	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 808f 	beq.w	80033a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 8087 	beq.w	80033a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329a:	2220      	movs	r2, #32
 800329c:	409a      	lsls	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b05      	cmp	r3, #5
 80032ac:	d136      	bne.n	800331c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0216 	bic.w	r2, r2, #22
 80032bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695a      	ldr	r2, [r3, #20]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d103      	bne.n	80032de <HAL_DMA_IRQHandler+0x1da>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d007      	beq.n	80032ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0208 	bic.w	r2, r2, #8
 80032ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f2:	223f      	movs	r2, #63	@ 0x3f
 80032f4:	409a      	lsls	r2, r3
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800330e:	2b00      	cmp	r3, #0
 8003310:	d07e      	beq.n	8003410 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	4798      	blx	r3
        }
        return;
 800331a:	e079      	b.n	8003410 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d01d      	beq.n	8003366 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10d      	bne.n	8003354 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333c:	2b00      	cmp	r3, #0
 800333e:	d031      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	4798      	blx	r3
 8003348:	e02c      	b.n	80033a4 <HAL_DMA_IRQHandler+0x2a0>
 800334a:	bf00      	nop
 800334c:	20000030 	.word	0x20000030
 8003350:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d023      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	4798      	blx	r3
 8003364:	e01e      	b.n	80033a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10f      	bne.n	8003394 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0210 	bic.w	r2, r2, #16
 8003382:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d032      	beq.n	8003412 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d022      	beq.n	80033fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2205      	movs	r2, #5
 80033bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0201 	bic.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	3301      	adds	r3, #1
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d307      	bcc.n	80033ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f2      	bne.n	80033d0 <HAL_DMA_IRQHandler+0x2cc>
 80033ea:	e000      	b.n	80033ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	4798      	blx	r3
 800340e:	e000      	b.n	8003412 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003410:	bf00      	nop
    }
  }
}
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003434:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b40      	cmp	r3, #64	@ 0x40
 8003444:	d108      	bne.n	8003458 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003456:	e007      	b.n	8003468 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	60da      	str	r2, [r3, #12]
}
 8003468:	bf00      	nop
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	3b10      	subs	r3, #16
 8003484:	4a14      	ldr	r2, [pc, #80]	@ (80034d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	091b      	lsrs	r3, r3, #4
 800348c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800348e:	4a13      	ldr	r2, [pc, #76]	@ (80034dc <DMA_CalcBaseAndBitshift+0x68>)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4413      	add	r3, r2
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d909      	bls.n	80034b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034aa:	f023 0303 	bic.w	r3, r3, #3
 80034ae:	1d1a      	adds	r2, r3, #4
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80034b4:	e007      	b.n	80034c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034be:	f023 0303 	bic.w	r3, r3, #3
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	aaaaaaab 	.word	0xaaaaaaab
 80034dc:	08006d50 	.word	0x08006d50

080034e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d11f      	bne.n	800353a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d856      	bhi.n	80035ae <DMA_CheckFifoParam+0xce>
 8003500:	a201      	add	r2, pc, #4	@ (adr r2, 8003508 <DMA_CheckFifoParam+0x28>)
 8003502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003506:	bf00      	nop
 8003508:	08003519 	.word	0x08003519
 800350c:	0800352b 	.word	0x0800352b
 8003510:	08003519 	.word	0x08003519
 8003514:	080035af 	.word	0x080035af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d046      	beq.n	80035b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003528:	e043      	b.n	80035b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003532:	d140      	bne.n	80035b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003538:	e03d      	b.n	80035b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003542:	d121      	bne.n	8003588 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b03      	cmp	r3, #3
 8003548:	d837      	bhi.n	80035ba <DMA_CheckFifoParam+0xda>
 800354a:	a201      	add	r2, pc, #4	@ (adr r2, 8003550 <DMA_CheckFifoParam+0x70>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003561 	.word	0x08003561
 8003554:	08003567 	.word	0x08003567
 8003558:	08003561 	.word	0x08003561
 800355c:	08003579 	.word	0x08003579
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
      break;
 8003564:	e030      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d025      	beq.n	80035be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003576:	e022      	b.n	80035be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003580:	d11f      	bne.n	80035c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003586:	e01c      	b.n	80035c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d903      	bls.n	8003596 <DMA_CheckFifoParam+0xb6>
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b03      	cmp	r3, #3
 8003592:	d003      	beq.n	800359c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003594:	e018      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
      break;
 800359a:	e015      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00e      	beq.n	80035c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
      break;
 80035ac:	e00b      	b.n	80035c6 <DMA_CheckFifoParam+0xe6>
      break;
 80035ae:	bf00      	nop
 80035b0:	e00a      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>
      break;
 80035b2:	bf00      	nop
 80035b4:	e008      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>
      break;
 80035b6:	bf00      	nop
 80035b8:	e006      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>
      break;
 80035ba:	bf00      	nop
 80035bc:	e004      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>
      break;
 80035be:	bf00      	nop
 80035c0:	e002      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80035c2:	bf00      	nop
 80035c4:	e000      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>
      break;
 80035c6:	bf00      	nop
    }
  } 
  
  return status; 
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop

080035d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035d8:	b480      	push	{r7}
 80035da:	b089      	sub	sp, #36	@ 0x24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
 80035f2:	e159      	b.n	80038a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035f4:	2201      	movs	r2, #1
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4013      	ands	r3, r2
 8003606:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	429a      	cmp	r2, r3
 800360e:	f040 8148 	bne.w	80038a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b01      	cmp	r3, #1
 800361c:	d005      	beq.n	800362a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003626:	2b02      	cmp	r3, #2
 8003628:	d130      	bne.n	800368c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	2203      	movs	r2, #3
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43db      	mvns	r3, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4013      	ands	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003660:	2201      	movs	r2, #1
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	f003 0201 	and.w	r2, r3, #1
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	2b03      	cmp	r3, #3
 8003696:	d017      	beq.n	80036c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	2203      	movs	r2, #3
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4013      	ands	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4313      	orrs	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d123      	bne.n	800371c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	08da      	lsrs	r2, r3, #3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3208      	adds	r2, #8
 80036dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	220f      	movs	r2, #15
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	08da      	lsrs	r2, r3, #3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3208      	adds	r2, #8
 8003716:	69b9      	ldr	r1, [r7, #24]
 8003718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	2203      	movs	r2, #3
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	43db      	mvns	r3, r3
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4013      	ands	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0203 	and.w	r2, r3, #3
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 80a2 	beq.w	80038a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	4b57      	ldr	r3, [pc, #348]	@ (80038c0 <HAL_GPIO_Init+0x2e8>)
 8003764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003766:	4a56      	ldr	r2, [pc, #344]	@ (80038c0 <HAL_GPIO_Init+0x2e8>)
 8003768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800376c:	6453      	str	r3, [r2, #68]	@ 0x44
 800376e:	4b54      	ldr	r3, [pc, #336]	@ (80038c0 <HAL_GPIO_Init+0x2e8>)
 8003770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800377a:	4a52      	ldr	r2, [pc, #328]	@ (80038c4 <HAL_GPIO_Init+0x2ec>)
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	089b      	lsrs	r3, r3, #2
 8003780:	3302      	adds	r3, #2
 8003782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	220f      	movs	r2, #15
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a49      	ldr	r2, [pc, #292]	@ (80038c8 <HAL_GPIO_Init+0x2f0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d019      	beq.n	80037da <HAL_GPIO_Init+0x202>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a48      	ldr	r2, [pc, #288]	@ (80038cc <HAL_GPIO_Init+0x2f4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <HAL_GPIO_Init+0x1fe>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a47      	ldr	r2, [pc, #284]	@ (80038d0 <HAL_GPIO_Init+0x2f8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00d      	beq.n	80037d2 <HAL_GPIO_Init+0x1fa>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a46      	ldr	r2, [pc, #280]	@ (80038d4 <HAL_GPIO_Init+0x2fc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d007      	beq.n	80037ce <HAL_GPIO_Init+0x1f6>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a45      	ldr	r2, [pc, #276]	@ (80038d8 <HAL_GPIO_Init+0x300>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <HAL_GPIO_Init+0x1f2>
 80037c6:	2304      	movs	r3, #4
 80037c8:	e008      	b.n	80037dc <HAL_GPIO_Init+0x204>
 80037ca:	2307      	movs	r3, #7
 80037cc:	e006      	b.n	80037dc <HAL_GPIO_Init+0x204>
 80037ce:	2303      	movs	r3, #3
 80037d0:	e004      	b.n	80037dc <HAL_GPIO_Init+0x204>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e002      	b.n	80037dc <HAL_GPIO_Init+0x204>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_GPIO_Init+0x204>
 80037da:	2300      	movs	r3, #0
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	f002 0203 	and.w	r2, r2, #3
 80037e2:	0092      	lsls	r2, r2, #2
 80037e4:	4093      	lsls	r3, r2
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037ec:	4935      	ldr	r1, [pc, #212]	@ (80038c4 <HAL_GPIO_Init+0x2ec>)
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	3302      	adds	r3, #2
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037fa:	4b38      	ldr	r3, [pc, #224]	@ (80038dc <HAL_GPIO_Init+0x304>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800381e:	4a2f      	ldr	r2, [pc, #188]	@ (80038dc <HAL_GPIO_Init+0x304>)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003824:	4b2d      	ldr	r3, [pc, #180]	@ (80038dc <HAL_GPIO_Init+0x304>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003848:	4a24      	ldr	r2, [pc, #144]	@ (80038dc <HAL_GPIO_Init+0x304>)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800384e:	4b23      	ldr	r3, [pc, #140]	@ (80038dc <HAL_GPIO_Init+0x304>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	43db      	mvns	r3, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4013      	ands	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003872:	4a1a      	ldr	r2, [pc, #104]	@ (80038dc <HAL_GPIO_Init+0x304>)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003878:	4b18      	ldr	r3, [pc, #96]	@ (80038dc <HAL_GPIO_Init+0x304>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800389c:	4a0f      	ldr	r2, [pc, #60]	@ (80038dc <HAL_GPIO_Init+0x304>)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3301      	adds	r3, #1
 80038a6:	61fb      	str	r3, [r7, #28]
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	2b0f      	cmp	r3, #15
 80038ac:	f67f aea2 	bls.w	80035f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	3724      	adds	r7, #36	@ 0x24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40023800 	.word	0x40023800
 80038c4:	40013800 	.word	0x40013800
 80038c8:	40020000 	.word	0x40020000
 80038cc:	40020400 	.word	0x40020400
 80038d0:	40020800 	.word	0x40020800
 80038d4:	40020c00 	.word	0x40020c00
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40013c00 	.word	0x40013c00

080038e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	e001      	b.n	8003902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003902:	7bfb      	ldrb	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	807b      	strh	r3, [r7, #2]
 800391c:	4613      	mov	r3, r2
 800391e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003920:	787b      	ldrb	r3, [r7, #1]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003926:	887a      	ldrh	r2, [r7, #2]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800392c:	e003      	b.n	8003936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800392e:	887b      	ldrh	r3, [r7, #2]
 8003930:	041a      	lsls	r2, r3, #16
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	619a      	str	r2, [r3, #24]
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e12b      	b.n	8003bae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fd fe56 	bl	800161c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2224      	movs	r2, #36	@ 0x24
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0201 	bic.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003996:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039a8:	f000 fd54 	bl	8004454 <HAL_RCC_GetPCLK1Freq>
 80039ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4a81      	ldr	r2, [pc, #516]	@ (8003bb8 <HAL_I2C_Init+0x274>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d807      	bhi.n	80039c8 <HAL_I2C_Init+0x84>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4a80      	ldr	r2, [pc, #512]	@ (8003bbc <HAL_I2C_Init+0x278>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	bf94      	ite	ls
 80039c0:	2301      	movls	r3, #1
 80039c2:	2300      	movhi	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e006      	b.n	80039d6 <HAL_I2C_Init+0x92>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4a7d      	ldr	r2, [pc, #500]	@ (8003bc0 <HAL_I2C_Init+0x27c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	bf94      	ite	ls
 80039d0:	2301      	movls	r3, #1
 80039d2:	2300      	movhi	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e0e7      	b.n	8003bae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4a78      	ldr	r2, [pc, #480]	@ (8003bc4 <HAL_I2C_Init+0x280>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	0c9b      	lsrs	r3, r3, #18
 80039e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	4a6a      	ldr	r2, [pc, #424]	@ (8003bb8 <HAL_I2C_Init+0x274>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d802      	bhi.n	8003a18 <HAL_I2C_Init+0xd4>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	3301      	adds	r3, #1
 8003a16:	e009      	b.n	8003a2c <HAL_I2C_Init+0xe8>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	4a69      	ldr	r2, [pc, #420]	@ (8003bc8 <HAL_I2C_Init+0x284>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	099b      	lsrs	r3, r3, #6
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	430b      	orrs	r3, r1
 8003a32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	495c      	ldr	r1, [pc, #368]	@ (8003bb8 <HAL_I2C_Init+0x274>)
 8003a48:	428b      	cmp	r3, r1
 8003a4a:	d819      	bhi.n	8003a80 <HAL_I2C_Init+0x13c>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1e59      	subs	r1, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a5a:	1c59      	adds	r1, r3, #1
 8003a5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a60:	400b      	ands	r3, r1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_I2C_Init+0x138>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1e59      	subs	r1, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a74:	3301      	adds	r3, #1
 8003a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7a:	e051      	b.n	8003b20 <HAL_I2C_Init+0x1dc>
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	e04f      	b.n	8003b20 <HAL_I2C_Init+0x1dc>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d111      	bne.n	8003aac <HAL_I2C_Init+0x168>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	1e58      	subs	r0, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6859      	ldr	r1, [r3, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	440b      	add	r3, r1
 8003a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	e012      	b.n	8003ad2 <HAL_I2C_Init+0x18e>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1e58      	subs	r0, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	0099      	lsls	r1, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_I2C_Init+0x196>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e022      	b.n	8003b20 <HAL_I2C_Init+0x1dc>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10e      	bne.n	8003b00 <HAL_I2C_Init+0x1bc>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1e58      	subs	r0, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6859      	ldr	r1, [r3, #4]
 8003aea:	460b      	mov	r3, r1
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	440b      	add	r3, r1
 8003af0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003af4:	3301      	adds	r3, #1
 8003af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003afa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003afe:	e00f      	b.n	8003b20 <HAL_I2C_Init+0x1dc>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1e58      	subs	r0, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	0099      	lsls	r1, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b16:	3301      	adds	r3, #1
 8003b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	6809      	ldr	r1, [r1, #0]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69da      	ldr	r2, [r3, #28]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6911      	ldr	r1, [r2, #16]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68d2      	ldr	r2, [r2, #12]
 8003b5a:	4311      	orrs	r1, r2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	430b      	orrs	r3, r1
 8003b62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	000186a0 	.word	0x000186a0
 8003bbc:	001e847f 	.word	0x001e847f
 8003bc0:	003d08ff 	.word	0x003d08ff
 8003bc4:	431bde83 	.word	0x431bde83
 8003bc8:	10624dd3 	.word	0x10624dd3

08003bcc <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003bd2:	4b06      	ldr	r3, [pc, #24]	@ (8003bec <HAL_PWR_EnableBkUpAccess+0x20>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003bd8:	4b05      	ldr	r3, [pc, #20]	@ (8003bf0 <HAL_PWR_EnableBkUpAccess+0x24>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003bde:	687b      	ldr	r3, [r7, #4]
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	420e0020 	.word	0x420e0020
 8003bf0:	40007000 	.word	0x40007000

08003bf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e267      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d075      	beq.n	8003cfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c12:	4b88      	ldr	r3, [pc, #544]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d00c      	beq.n	8003c38 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c1e:	4b85      	ldr	r3, [pc, #532]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d112      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c2a:	4b82      	ldr	r3, [pc, #520]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c36:	d10b      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	4b7e      	ldr	r3, [pc, #504]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d05b      	beq.n	8003cfc <HAL_RCC_OscConfig+0x108>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d157      	bne.n	8003cfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e242      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c58:	d106      	bne.n	8003c68 <HAL_RCC_OscConfig+0x74>
 8003c5a:	4b76      	ldr	r3, [pc, #472]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a75      	ldr	r2, [pc, #468]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e01d      	b.n	8003ca4 <HAL_RCC_OscConfig+0xb0>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x98>
 8003c72:	4b70      	ldr	r3, [pc, #448]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a6f      	ldr	r2, [pc, #444]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b6d      	ldr	r3, [pc, #436]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a6c      	ldr	r2, [pc, #432]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0xb0>
 8003c8c:	4b69      	ldr	r3, [pc, #420]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a68      	ldr	r2, [pc, #416]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b66      	ldr	r3, [pc, #408]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a65      	ldr	r2, [pc, #404]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe fcaa 	bl	8002604 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fe fca6 	bl	8002604 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	@ 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e207      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b5b      	ldr	r3, [pc, #364]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xc0>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fe fc96 	bl	8002604 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fe fc92 	bl	8002604 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	@ 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e1f3      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	4b51      	ldr	r3, [pc, #324]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0xe8>
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d063      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b47      	ldr	r3, [pc, #284]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d11c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d22:	4b44      	ldr	r3, [pc, #272]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d116      	bne.n	8003d5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	4b41      	ldr	r3, [pc, #260]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_RCC_OscConfig+0x152>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e1c7      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d46:	4b3b      	ldr	r3, [pc, #236]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4937      	ldr	r1, [pc, #220]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5a:	e03a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d020      	beq.n	8003da6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d64:	4b34      	ldr	r3, [pc, #208]	@ (8003e38 <HAL_RCC_OscConfig+0x244>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6a:	f7fe fc4b 	bl	8002604 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d72:	f7fe fc47 	bl	8002604 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e1a8      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d84:	4b2b      	ldr	r3, [pc, #172]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d90:	4b28      	ldr	r3, [pc, #160]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4925      	ldr	r1, [pc, #148]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]
 8003da4:	e015      	b.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003da6:	4b24      	ldr	r3, [pc, #144]	@ (8003e38 <HAL_RCC_OscConfig+0x244>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fe fc2a 	bl	8002604 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db4:	f7fe fc26 	bl	8002604 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e187      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d036      	beq.n	8003e4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d016      	beq.n	8003e14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de6:	4b15      	ldr	r3, [pc, #84]	@ (8003e3c <HAL_RCC_OscConfig+0x248>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dec:	f7fe fc0a 	bl	8002604 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df4:	f7fe fc06 	bl	8002604 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e167      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e06:	4b0b      	ldr	r3, [pc, #44]	@ (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0x200>
 8003e12:	e01b      	b.n	8003e4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e14:	4b09      	ldr	r3, [pc, #36]	@ (8003e3c <HAL_RCC_OscConfig+0x248>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1a:	f7fe fbf3 	bl	8002604 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e20:	e00e      	b.n	8003e40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e22:	f7fe fbef 	bl	8002604 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d907      	bls.n	8003e40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e150      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
 8003e34:	40023800 	.word	0x40023800
 8003e38:	42470000 	.word	0x42470000
 8003e3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e40:	4b88      	ldr	r3, [pc, #544]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1ea      	bne.n	8003e22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8097 	beq.w	8003f88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e5e:	4b81      	ldr	r3, [pc, #516]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10f      	bne.n	8003e8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	4b7d      	ldr	r3, [pc, #500]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	4a7c      	ldr	r2, [pc, #496]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e7a:	4b7a      	ldr	r3, [pc, #488]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e86:	2301      	movs	r3, #1
 8003e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8a:	4b77      	ldr	r3, [pc, #476]	@ (8004068 <HAL_RCC_OscConfig+0x474>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d118      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e96:	4b74      	ldr	r3, [pc, #464]	@ (8004068 <HAL_RCC_OscConfig+0x474>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a73      	ldr	r2, [pc, #460]	@ (8004068 <HAL_RCC_OscConfig+0x474>)
 8003e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea2:	f7fe fbaf 	bl	8002604 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eaa:	f7fe fbab 	bl	8002604 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e10c      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebc:	4b6a      	ldr	r3, [pc, #424]	@ (8004068 <HAL_RCC_OscConfig+0x474>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d106      	bne.n	8003ede <HAL_RCC_OscConfig+0x2ea>
 8003ed0:	4b64      	ldr	r3, [pc, #400]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed4:	4a63      	ldr	r2, [pc, #396]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003edc:	e01c      	b.n	8003f18 <HAL_RCC_OscConfig+0x324>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b05      	cmp	r3, #5
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCC_OscConfig+0x30c>
 8003ee6:	4b5f      	ldr	r3, [pc, #380]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eea:	4a5e      	ldr	r2, [pc, #376]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003eec:	f043 0304 	orr.w	r3, r3, #4
 8003ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef2:	4b5c      	ldr	r3, [pc, #368]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef6:	4a5b      	ldr	r2, [pc, #364]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003efe:	e00b      	b.n	8003f18 <HAL_RCC_OscConfig+0x324>
 8003f00:	4b58      	ldr	r3, [pc, #352]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f04:	4a57      	ldr	r2, [pc, #348]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f0c:	4b55      	ldr	r3, [pc, #340]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f10:	4a54      	ldr	r2, [pc, #336]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f12:	f023 0304 	bic.w	r3, r3, #4
 8003f16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d015      	beq.n	8003f4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f20:	f7fe fb70 	bl	8002604 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f28:	f7fe fb6c 	bl	8002604 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e0cb      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3e:	4b49      	ldr	r3, [pc, #292]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0ee      	beq.n	8003f28 <HAL_RCC_OscConfig+0x334>
 8003f4a:	e014      	b.n	8003f76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4c:	f7fe fb5a 	bl	8002604 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f52:	e00a      	b.n	8003f6a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f54:	f7fe fb56 	bl	8002604 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e0b5      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1ee      	bne.n	8003f54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7c:	4b39      	ldr	r3, [pc, #228]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	4a38      	ldr	r2, [pc, #224]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80a1 	beq.w	80040d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f92:	4b34      	ldr	r3, [pc, #208]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d05c      	beq.n	8004058 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d141      	bne.n	800402a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa6:	4b31      	ldr	r3, [pc, #196]	@ (800406c <HAL_RCC_OscConfig+0x478>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fe fb2a 	bl	8002604 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb4:	f7fe fb26 	bl	8002604 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e087      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc6:	4b27      	ldr	r3, [pc, #156]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69da      	ldr	r2, [r3, #28]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	019b      	lsls	r3, r3, #6
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe8:	085b      	lsrs	r3, r3, #1
 8003fea:	3b01      	subs	r3, #1
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	061b      	lsls	r3, r3, #24
 8003ff6:	491b      	ldr	r1, [pc, #108]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800406c <HAL_RCC_OscConfig+0x478>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004002:	f7fe faff 	bl	8002604 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400a:	f7fe fafb 	bl	8002604 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e05c      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401c:	4b11      	ldr	r3, [pc, #68]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x416>
 8004028:	e054      	b.n	80040d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402a:	4b10      	ldr	r3, [pc, #64]	@ (800406c <HAL_RCC_OscConfig+0x478>)
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fe fae8 	bl	8002604 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004038:	f7fe fae4 	bl	8002604 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e045      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404a:	4b06      	ldr	r3, [pc, #24]	@ (8004064 <HAL_RCC_OscConfig+0x470>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x444>
 8004056:	e03d      	b.n	80040d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d107      	bne.n	8004070 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e038      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
 8004064:	40023800 	.word	0x40023800
 8004068:	40007000 	.word	0x40007000
 800406c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004070:	4b1b      	ldr	r3, [pc, #108]	@ (80040e0 <HAL_RCC_OscConfig+0x4ec>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d028      	beq.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d121      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d11a      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040a0:	4013      	ands	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d111      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b6:	085b      	lsrs	r3, r3, #1
 80040b8:	3b01      	subs	r3, #1
 80040ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d107      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800

080040e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0cc      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f8:	4b68      	ldr	r3, [pc, #416]	@ (800429c <HAL_RCC_ClockConfig+0x1b8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d90c      	bls.n	8004120 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b65      	ldr	r3, [pc, #404]	@ (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	4b63      	ldr	r3, [pc, #396]	@ (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0b8      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d020      	beq.n	800416e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004138:	4b59      	ldr	r3, [pc, #356]	@ (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a58      	ldr	r2, [pc, #352]	@ (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004142:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004150:	4b53      	ldr	r3, [pc, #332]	@ (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4a52      	ldr	r2, [pc, #328]	@ (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800415a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800415c:	4b50      	ldr	r3, [pc, #320]	@ (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	494d      	ldr	r1, [pc, #308]	@ (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	4313      	orrs	r3, r2
 800416c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d044      	beq.n	8004204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	4b47      	ldr	r3, [pc, #284]	@ (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d119      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e07f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d003      	beq.n	80041a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d107      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a2:	4b3f      	ldr	r3, [pc, #252]	@ (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e06f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b2:	4b3b      	ldr	r3, [pc, #236]	@ (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e067      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c2:	4b37      	ldr	r3, [pc, #220]	@ (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f023 0203 	bic.w	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	4934      	ldr	r1, [pc, #208]	@ (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d4:	f7fe fa16 	bl	8002604 <HAL_GetTick>
 80041d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	e00a      	b.n	80041f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041dc:	f7fe fa12 	bl	8002604 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e04f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f2:	4b2b      	ldr	r3, [pc, #172]	@ (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 020c 	and.w	r2, r3, #12
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	429a      	cmp	r2, r3
 8004202:	d1eb      	bne.n	80041dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004204:	4b25      	ldr	r3, [pc, #148]	@ (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d20c      	bcs.n	800422c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004212:	4b22      	ldr	r3, [pc, #136]	@ (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800421a:	4b20      	ldr	r3, [pc, #128]	@ (800429c <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d001      	beq.n	800422c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e032      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004238:	4b19      	ldr	r3, [pc, #100]	@ (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4916      	ldr	r1, [pc, #88]	@ (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004256:	4b12      	ldr	r3, [pc, #72]	@ (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	490e      	ldr	r1, [pc, #56]	@ (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	4313      	orrs	r3, r2
 8004268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800426a:	f000 f821 	bl	80042b0 <HAL_RCC_GetSysClockFreq>
 800426e:	4602      	mov	r2, r0
 8004270:	4b0b      	ldr	r3, [pc, #44]	@ (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	490a      	ldr	r1, [pc, #40]	@ (80042a4 <HAL_RCC_ClockConfig+0x1c0>)
 800427c:	5ccb      	ldrb	r3, [r1, r3]
 800427e:	fa22 f303 	lsr.w	r3, r2, r3
 8004282:	4a09      	ldr	r2, [pc, #36]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004286:	4b09      	ldr	r3, [pc, #36]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe f976 	bl	800257c <HAL_InitTick>

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40023c00 	.word	0x40023c00
 80042a0:	40023800 	.word	0x40023800
 80042a4:	08006d38 	.word	0x08006d38
 80042a8:	20000030 	.word	0x20000030
 80042ac:	20000034 	.word	0x20000034

080042b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b4:	b090      	sub	sp, #64	@ 0x40
 80042b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042c8:	4b59      	ldr	r3, [pc, #356]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 030c 	and.w	r3, r3, #12
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d00d      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x40>
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	f200 80a1 	bhi.w	800441c <HAL_RCC_GetSysClockFreq+0x16c>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x34>
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d003      	beq.n	80042ea <HAL_RCC_GetSysClockFreq+0x3a>
 80042e2:	e09b      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042e4:	4b53      	ldr	r3, [pc, #332]	@ (8004434 <HAL_RCC_GetSysClockFreq+0x184>)
 80042e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042e8:	e09b      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ea:	4b53      	ldr	r3, [pc, #332]	@ (8004438 <HAL_RCC_GetSysClockFreq+0x188>)
 80042ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042ee:	e098      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f0:	4b4f      	ldr	r3, [pc, #316]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042fa:	4b4d      	ldr	r3, [pc, #308]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d028      	beq.n	8004358 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004306:	4b4a      	ldr	r3, [pc, #296]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	099b      	lsrs	r3, r3, #6
 800430c:	2200      	movs	r2, #0
 800430e:	623b      	str	r3, [r7, #32]
 8004310:	627a      	str	r2, [r7, #36]	@ 0x24
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004318:	2100      	movs	r1, #0
 800431a:	4b47      	ldr	r3, [pc, #284]	@ (8004438 <HAL_RCC_GetSysClockFreq+0x188>)
 800431c:	fb03 f201 	mul.w	r2, r3, r1
 8004320:	2300      	movs	r3, #0
 8004322:	fb00 f303 	mul.w	r3, r0, r3
 8004326:	4413      	add	r3, r2
 8004328:	4a43      	ldr	r2, [pc, #268]	@ (8004438 <HAL_RCC_GetSysClockFreq+0x188>)
 800432a:	fba0 1202 	umull	r1, r2, r0, r2
 800432e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004330:	460a      	mov	r2, r1
 8004332:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004334:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004336:	4413      	add	r3, r2
 8004338:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800433a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800433c:	2200      	movs	r2, #0
 800433e:	61bb      	str	r3, [r7, #24]
 8004340:	61fa      	str	r2, [r7, #28]
 8004342:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004346:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800434a:	f7fb ff43 	bl	80001d4 <__aeabi_uldivmod>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4613      	mov	r3, r2
 8004354:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004356:	e053      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004358:	4b35      	ldr	r3, [pc, #212]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	099b      	lsrs	r3, r3, #6
 800435e:	2200      	movs	r2, #0
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	617a      	str	r2, [r7, #20]
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800436a:	f04f 0b00 	mov.w	fp, #0
 800436e:	4652      	mov	r2, sl
 8004370:	465b      	mov	r3, fp
 8004372:	f04f 0000 	mov.w	r0, #0
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	0159      	lsls	r1, r3, #5
 800437c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004380:	0150      	lsls	r0, r2, #5
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	ebb2 080a 	subs.w	r8, r2, sl
 800438a:	eb63 090b 	sbc.w	r9, r3, fp
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800439a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800439e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043a2:	ebb2 0408 	subs.w	r4, r2, r8
 80043a6:	eb63 0509 	sbc.w	r5, r3, r9
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	00eb      	lsls	r3, r5, #3
 80043b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043b8:	00e2      	lsls	r2, r4, #3
 80043ba:	4614      	mov	r4, r2
 80043bc:	461d      	mov	r5, r3
 80043be:	eb14 030a 	adds.w	r3, r4, sl
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	eb45 030b 	adc.w	r3, r5, fp
 80043c8:	607b      	str	r3, [r7, #4]
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043d6:	4629      	mov	r1, r5
 80043d8:	028b      	lsls	r3, r1, #10
 80043da:	4621      	mov	r1, r4
 80043dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043e0:	4621      	mov	r1, r4
 80043e2:	028a      	lsls	r2, r1, #10
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ea:	2200      	movs	r2, #0
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	60fa      	str	r2, [r7, #12]
 80043f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043f4:	f7fb feee 	bl	80001d4 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4613      	mov	r3, r2
 80043fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004400:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	3301      	adds	r3, #1
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004410:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004414:	fbb2 f3f3 	udiv	r3, r2, r3
 8004418:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800441a:	e002      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800441c:	4b05      	ldr	r3, [pc, #20]	@ (8004434 <HAL_RCC_GetSysClockFreq+0x184>)
 800441e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004424:	4618      	mov	r0, r3
 8004426:	3740      	adds	r7, #64	@ 0x40
 8004428:	46bd      	mov	sp, r7
 800442a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800
 8004434:	00f42400 	.word	0x00f42400
 8004438:	017d7840 	.word	0x017d7840

0800443c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004440:	4b03      	ldr	r3, [pc, #12]	@ (8004450 <HAL_RCC_GetHCLKFreq+0x14>)
 8004442:	681b      	ldr	r3, [r3, #0]
}
 8004444:	4618      	mov	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	20000030 	.word	0x20000030

08004454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004458:	f7ff fff0 	bl	800443c <HAL_RCC_GetHCLKFreq>
 800445c:	4602      	mov	r2, r0
 800445e:	4b05      	ldr	r3, [pc, #20]	@ (8004474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	0a9b      	lsrs	r3, r3, #10
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	4903      	ldr	r1, [pc, #12]	@ (8004478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800446a:	5ccb      	ldrb	r3, [r1, r3]
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004470:	4618      	mov	r0, r3
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40023800 	.word	0x40023800
 8004478:	08006d48 	.word	0x08006d48

0800447c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004480:	f7ff ffdc 	bl	800443c <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b05      	ldr	r3, [pc, #20]	@ (800449c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	0b5b      	lsrs	r3, r3, #13
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4903      	ldr	r1, [pc, #12]	@ (80044a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40023800 	.word	0x40023800
 80044a0:	08006d48 	.word	0x08006d48

080044a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d105      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d035      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044cc:	4b67      	ldr	r3, [pc, #412]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044d2:	f7fe f897 	bl	8002604 <HAL_GetTick>
 80044d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044d8:	e008      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044da:	f7fe f893 	bl	8002604 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e0ba      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044ec:	4b60      	ldr	r3, [pc, #384]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f0      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	019a      	lsls	r2, r3, #6
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	071b      	lsls	r3, r3, #28
 8004504:	495a      	ldr	r1, [pc, #360]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800450c:	4b57      	ldr	r3, [pc, #348]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800450e:	2201      	movs	r2, #1
 8004510:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004512:	f7fe f877 	bl	8002604 <HAL_GetTick>
 8004516:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004518:	e008      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800451a:	f7fe f873 	bl	8002604 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e09a      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800452c:	4b50      	ldr	r3, [pc, #320]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8083 	beq.w	800464c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	4b49      	ldr	r3, [pc, #292]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454e:	4a48      	ldr	r2, [pc, #288]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004554:	6413      	str	r3, [r2, #64]	@ 0x40
 8004556:	4b46      	ldr	r3, [pc, #280]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004562:	4b44      	ldr	r3, [pc, #272]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a43      	ldr	r2, [pc, #268]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800456c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800456e:	f7fe f849 	bl	8002604 <HAL_GetTick>
 8004572:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004574:	e008      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004576:	f7fe f845 	bl	8002604 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e06c      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004588:	4b3a      	ldr	r3, [pc, #232]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004594:	4b36      	ldr	r3, [pc, #216]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004598:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800459c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d02f      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d028      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045be:	2201      	movs	r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045c2:	4b2d      	ldr	r3, [pc, #180]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045c8:	4a29      	ldr	r2, [pc, #164]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045ce:	4b28      	ldr	r3, [pc, #160]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d114      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045da:	f7fe f813 	bl	8002604 <HAL_GetTick>
 80045de:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e0:	e00a      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e2:	f7fe f80f 	bl	8002604 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e034      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0ee      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800460c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004610:	d10d      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004612:	4b17      	ldr	r3, [pc, #92]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004626:	4912      	ldr	r1, [pc, #72]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004628:	4313      	orrs	r3, r2
 800462a:	608b      	str	r3, [r1, #8]
 800462c:	e005      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800462e:	4b10      	ldr	r3, [pc, #64]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	4a0f      	ldr	r2, [pc, #60]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004634:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004638:	6093      	str	r3, [r2, #8]
 800463a:	4b0d      	ldr	r3, [pc, #52]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800463c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004646:	490a      	ldr	r1, [pc, #40]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004648:	4313      	orrs	r3, r2
 800464a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	7c1a      	ldrb	r2, [r3, #16]
 800465c:	4b07      	ldr	r3, [pc, #28]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800465e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	42470068 	.word	0x42470068
 8004670:	40023800 	.word	0x40023800
 8004674:	40007000 	.word	0x40007000
 8004678:	42470e40 	.word	0x42470e40
 800467c:	424711e0 	.word	0x424711e0

08004680 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e073      	b.n	800477e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	7f5b      	ldrb	r3, [r3, #29]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d105      	bne.n	80046ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fd fad8 	bl	8001c5c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d055      	beq.n	800476c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	22ca      	movs	r2, #202	@ 0xca
 80046c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2253      	movs	r2, #83	@ 0x53
 80046ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fa49 	bl	8004b68 <RTC_EnterInitMode>
 80046d6:	4603      	mov	r3, r0
 80046d8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d12c      	bne.n	800473a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6812      	ldr	r2, [r2, #0]
 80046ea:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80046ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046f2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6899      	ldr	r1, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68d2      	ldr	r2, [r2, #12]
 800471a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6919      	ldr	r1, [r3, #16]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	041a      	lsls	r2, r3, #16
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fa50 	bl	8004bd6 <RTC_ExitInitMode>
 8004736:	4603      	mov	r3, r0
 8004738:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d110      	bne.n	8004762 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800474e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	22ff      	movs	r2, #255	@ 0xff
 8004768:	625a      	str	r2, [r3, #36]	@ 0x24
 800476a:	e001      	b.n	8004770 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d102      	bne.n	800477c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800477c:	7bfb      	ldrb	r3, [r7, #15]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004786:	b590      	push	{r4, r7, lr}
 8004788:	b087      	sub	sp, #28
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	7f1b      	ldrb	r3, [r3, #28]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_RTC_SetTime+0x1c>
 800479e:	2302      	movs	r3, #2
 80047a0:	e087      	b.n	80048b2 <HAL_RTC_SetTime+0x12c>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2202      	movs	r2, #2
 80047ac:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d126      	bne.n	8004802 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d102      	bne.n	80047c8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2200      	movs	r2, #0
 80047c6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fa27 	bl	8004c20 <RTC_ByteToBcd2>
 80047d2:	4603      	mov	r3, r0
 80047d4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	785b      	ldrb	r3, [r3, #1]
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fa20 	bl	8004c20 <RTC_ByteToBcd2>
 80047e0:	4603      	mov	r3, r0
 80047e2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80047e4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	789b      	ldrb	r3, [r3, #2]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fa18 	bl	8004c20 <RTC_ByteToBcd2>
 80047f0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80047f2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	78db      	ldrb	r3, [r3, #3]
 80047fa:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	e018      	b.n	8004834 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2200      	movs	r2, #0
 8004814:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004822:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004828:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	78db      	ldrb	r3, [r3, #3]
 800482e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	22ca      	movs	r2, #202	@ 0xca
 800483a:	625a      	str	r2, [r3, #36]	@ 0x24
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2253      	movs	r2, #83	@ 0x53
 8004842:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f98f 	bl	8004b68 <RTC_EnterInitMode>
 800484a:	4603      	mov	r3, r0
 800484c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800484e:	7cfb      	ldrb	r3, [r7, #19]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d120      	bne.n	8004896 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800485e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004862:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004872:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6899      	ldr	r1, [r3, #8]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	431a      	orrs	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f9a2 	bl	8004bd6 <RTC_ExitInitMode>
 8004892:	4603      	mov	r3, r0
 8004894:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004896:	7cfb      	ldrb	r3, [r7, #19]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d102      	bne.n	80048a2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	22ff      	movs	r2, #255	@ 0xff
 80048a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]

  return status;
 80048b0:	7cfb      	ldrb	r3, [r7, #19]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd90      	pop	{r4, r7, pc}

080048ba <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b086      	sub	sp, #24
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80048ec:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80048f0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	0c1b      	lsrs	r3, r3, #16
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	0a1b      	lsrs	r3, r3, #8
 8004906:	b2db      	uxtb	r3, r3
 8004908:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800490c:	b2da      	uxtb	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800491a:	b2da      	uxtb	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	0d9b      	lsrs	r3, r3, #22
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	b2da      	uxtb	r2, r3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d11a      	bne.n	800496c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f000 f98e 	bl	8004c5c <RTC_Bcd2ToByte>
 8004940:	4603      	mov	r3, r0
 8004942:	461a      	mov	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	785b      	ldrb	r3, [r3, #1]
 800494c:	4618      	mov	r0, r3
 800494e:	f000 f985 	bl	8004c5c <RTC_Bcd2ToByte>
 8004952:	4603      	mov	r3, r0
 8004954:	461a      	mov	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	789b      	ldrb	r3, [r3, #2]
 800495e:	4618      	mov	r0, r3
 8004960:	f000 f97c 	bl	8004c5c <RTC_Bcd2ToByte>
 8004964:	4603      	mov	r3, r0
 8004966:	461a      	mov	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004976:	b590      	push	{r4, r7, lr}
 8004978:	b087      	sub	sp, #28
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	7f1b      	ldrb	r3, [r3, #28]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d101      	bne.n	8004992 <HAL_RTC_SetDate+0x1c>
 800498e:	2302      	movs	r3, #2
 8004990:	e071      	b.n	8004a76 <HAL_RTC_SetDate+0x100>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2201      	movs	r2, #1
 8004996:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2202      	movs	r2, #2
 800499c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10e      	bne.n	80049c2 <HAL_RTC_SetDate+0x4c>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	785b      	ldrb	r3, [r3, #1]
 80049b4:	f023 0310 	bic.w	r3, r3, #16
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	330a      	adds	r3, #10
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d11c      	bne.n	8004a02 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	78db      	ldrb	r3, [r3, #3]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 f927 	bl	8004c20 <RTC_ByteToBcd2>
 80049d2:	4603      	mov	r3, r0
 80049d4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	785b      	ldrb	r3, [r3, #1]
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 f920 	bl	8004c20 <RTC_ByteToBcd2>
 80049e0:	4603      	mov	r3, r0
 80049e2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80049e4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	789b      	ldrb	r3, [r3, #2]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 f918 	bl	8004c20 <RTC_ByteToBcd2>
 80049f0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80049f2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	e00e      	b.n	8004a20 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	78db      	ldrb	r3, [r3, #3]
 8004a06:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	785b      	ldrb	r3, [r3, #1]
 8004a0c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a0e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004a14:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	22ca      	movs	r2, #202	@ 0xca
 8004a26:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2253      	movs	r2, #83	@ 0x53
 8004a2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f899 	bl	8004b68 <RTC_EnterInitMode>
 8004a36:	4603      	mov	r3, r0
 8004a38:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004a3a:	7cfb      	ldrb	r3, [r7, #19]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10c      	bne.n	8004a5a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a4a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004a4e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f8c0 	bl	8004bd6 <RTC_ExitInitMode>
 8004a56:	4603      	mov	r3, r0
 8004a58:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004a5a:	7cfb      	ldrb	r3, [r7, #19]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d102      	bne.n	8004a66 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	22ff      	movs	r2, #255	@ 0xff
 8004a6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]

  return status;
 8004a74:	7cfb      	ldrb	r3, [r7, #19]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	371c      	adds	r7, #28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd90      	pop	{r4, r7, pc}

08004a7e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b086      	sub	sp, #24
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a98:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	0c1b      	lsrs	r3, r3, #16
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	0b5b      	lsrs	r3, r3, #13
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d11a      	bne.n	8004b12 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	78db      	ldrb	r3, [r3, #3]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 f8bb 	bl	8004c5c <RTC_Bcd2ToByte>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	461a      	mov	r2, r3
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	785b      	ldrb	r3, [r3, #1]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 f8b2 	bl	8004c5c <RTC_Bcd2ToByte>
 8004af8:	4603      	mov	r3, r0
 8004afa:	461a      	mov	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	789b      	ldrb	r3, [r3, #2]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 f8a9 	bl	8004c5c <RTC_Bcd2ToByte>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8004b64 <HAL_RTC_WaitForSynchro+0x48>)
 8004b2e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b30:	f7fd fd68 	bl	8002604 <HAL_GetTick>
 8004b34:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b36:	e009      	b.n	8004b4c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b38:	f7fd fd64 	bl	8002604 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b46:	d901      	bls.n	8004b4c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e007      	b.n	8004b5c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0ee      	beq.n	8004b38 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	00013f5f 	.word	0x00013f5f

08004b68 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d122      	bne.n	8004bcc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b94:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b96:	f7fd fd35 	bl	8002604 <HAL_GetTick>
 8004b9a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b9c:	e00c      	b.n	8004bb8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b9e:	f7fd fd31 	bl	8002604 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bac:	d904      	bls.n	8004bb8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <RTC_EnterInitMode+0x64>
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d1e8      	bne.n	8004b9e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bf0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10a      	bne.n	8004c16 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff ff8b 	bl	8004b1c <HAL_RTC_WaitForSynchro>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d004      	beq.n	8004c16 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2204      	movs	r2, #4
 8004c10:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004c2e:	e005      	b.n	8004c3c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3301      	adds	r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	3b0a      	subs	r3, #10
 8004c3a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	2b09      	cmp	r3, #9
 8004c40:	d8f6      	bhi.n	8004c30 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	b2db      	uxtb	r3, r3
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4603      	mov	r3, r0
 8004c64:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	091b      	lsrs	r3, r3, #4
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	461a      	mov	r2, r3
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	4413      	add	r3, r2
 8004c8a:	b2db      	uxtb	r3, r3
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e07b      	b.n	8004da2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d108      	bne.n	8004cc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cba:	d009      	beq.n	8004cd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	61da      	str	r2, [r3, #28]
 8004cc2:	e005      	b.n	8004cd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fd f818 	bl	8001d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d54:	ea42 0103 	orr.w	r1, r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	0c1b      	lsrs	r3, r3, #16
 8004d6e:	f003 0104 	and.w	r1, r3, #4
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	f003 0210 	and.w	r2, r3, #16
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	4613      	mov	r3, r2
 8004db8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d001      	beq.n	8004dca <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e097      	b.n	8004efa <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <HAL_SPI_Transmit_DMA+0x2a>
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e08f      	b.n	8004efa <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_SPI_Transmit_DMA+0x3c>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e088      	b.n	8004efa <HAL_SPI_Transmit_DMA+0x14e>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2203      	movs	r2, #3
 8004df4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	88fa      	ldrh	r2, [r7, #6]
 8004e08:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	88fa      	ldrh	r2, [r7, #6]
 8004e0e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e36:	d10f      	bne.n	8004e58 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e5c:	4a29      	ldr	r2, [pc, #164]	@ (8004f04 <HAL_SPI_Transmit_DMA+0x158>)
 8004e5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e64:	4a28      	ldr	r2, [pc, #160]	@ (8004f08 <HAL_SPI_Transmit_DMA+0x15c>)
 8004e66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e6c:	4a27      	ldr	r2, [pc, #156]	@ (8004f0c <HAL_SPI_Transmit_DMA+0x160>)
 8004e6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e74:	2200      	movs	r2, #0
 8004e76:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e80:	4619      	mov	r1, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	330c      	adds	r3, #12
 8004e88:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e8e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004e90:	f7fe f8be 	bl	8003010 <HAL_DMA_Start_IT>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00b      	beq.n	8004eb2 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9e:	f043 0210 	orr.w	r2, r3, #16
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e023      	b.n	8004efa <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ebc:	2b40      	cmp	r3, #64	@ 0x40
 8004ebe:	d007      	beq.n	8004ed0 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ece:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0220 	orr.w	r2, r2, #32
 8004ee6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0202 	orr.w	r2, r2, #2
 8004ef6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	080051c9 	.word	0x080051c9
 8004f08:	08005121 	.word	0x08005121
 8004f0c:	080051e5 	.word	0x080051e5

08004f10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10e      	bne.n	8004f50 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d009      	beq.n	8004f50 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d004      	beq.n	8004f50 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	4798      	blx	r3
    return;
 8004f4e:	e0ce      	b.n	80050ee <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d009      	beq.n	8004f6e <HAL_SPI_IRQHandler+0x5e>
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d004      	beq.n	8004f6e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	4798      	blx	r3
    return;
 8004f6c:	e0bf      	b.n	80050ee <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	f003 0320 	and.w	r3, r3, #32
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10a      	bne.n	8004f8e <HAL_SPI_IRQHandler+0x7e>
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d105      	bne.n	8004f8e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80b0 	beq.w	80050ee <HAL_SPI_IRQHandler+0x1de>
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80aa 	beq.w	80050ee <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d023      	beq.n	8004fec <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d011      	beq.n	8004fd4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb4:	f043 0204 	orr.w	r2, r3, #4
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	e00b      	b.n	8004fec <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	613b      	str	r3, [r7, #16]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	693b      	ldr	r3, [r7, #16]
        return;
 8004fea:	e080      	b.n	80050ee <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d014      	beq.n	8005020 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ffa:	f043 0201 	orr.w	r2, r3, #1
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00c      	beq.n	8005044 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502e:	f043 0208 	orr.w	r2, r3, #8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005036:	2300      	movs	r3, #0
 8005038:	60bb      	str	r3, [r7, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	60bb      	str	r3, [r7, #8]
 8005042:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005048:	2b00      	cmp	r3, #0
 800504a:	d04f      	beq.n	80050ec <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800505a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d104      	bne.n	8005078 <HAL_SPI_IRQHandler+0x168>
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d034      	beq.n	80050e2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0203 	bic.w	r2, r2, #3
 8005086:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800508c:	2b00      	cmp	r3, #0
 800508e:	d011      	beq.n	80050b4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005094:	4a17      	ldr	r2, [pc, #92]	@ (80050f4 <HAL_SPI_IRQHandler+0x1e4>)
 8005096:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800509c:	4618      	mov	r0, r3
 800509e:	f7fe f80f 	bl	80030c0 <HAL_DMA_Abort_IT>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d016      	beq.n	80050ea <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050c0:	4a0c      	ldr	r2, [pc, #48]	@ (80050f4 <HAL_SPI_IRQHandler+0x1e4>)
 80050c2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fd fff9 	bl	80030c0 <HAL_DMA_Abort_IT>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80050e0:	e003      	b.n	80050ea <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f812 	bl	800510c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80050e8:	e000      	b.n	80050ec <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80050ea:	bf00      	nop
    return;
 80050ec:	bf00      	nop
  }
}
 80050ee:	3720      	adds	r7, #32
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	08005225 	.word	0x08005225

080050f8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800512e:	f7fd fa69 	bl	8002604 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005142:	d03b      	beq.n	80051bc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0220 	bic.w	r2, r2, #32
 8005152:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0202 	bic.w	r2, r2, #2
 8005162:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	2164      	movs	r1, #100	@ 0x64
 8005168:	6978      	ldr	r0, [r7, #20]
 800516a:	f000 f8f7 	bl	800535c <SPI_EndRxTxTransaction>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005178:	f043 0220 	orr.w	r2, r3, #32
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10a      	bne.n	800519e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2200      	movs	r2, #0
 80051a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80051b4:	6978      	ldr	r0, [r7, #20]
 80051b6:	f7ff ffa9 	bl	800510c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80051ba:	e002      	b.n	80051c2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80051bc:	6978      	ldr	r0, [r7, #20]
 80051be:	f7fb fc55 	bl	8000a6c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f7ff ff8e 	bl	80050f8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80051dc:	bf00      	nop
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0203 	bic.w	r2, r2, #3
 8005200:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005206:	f043 0210 	orr.w	r2, r3, #16
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f7ff ff78 	bl	800510c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800521c:	bf00      	nop
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005230:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f7ff ff64 	bl	800510c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005244:	bf00      	nop
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800525c:	f7fd f9d2 	bl	8002604 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005264:	1a9b      	subs	r3, r3, r2
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	4413      	add	r3, r2
 800526a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800526c:	f7fd f9ca 	bl	8002604 <HAL_GetTick>
 8005270:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005272:	4b39      	ldr	r3, [pc, #228]	@ (8005358 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	015b      	lsls	r3, r3, #5
 8005278:	0d1b      	lsrs	r3, r3, #20
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	fb02 f303 	mul.w	r3, r2, r3
 8005280:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005282:	e054      	b.n	800532e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d050      	beq.n	800532e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800528c:	f7fd f9ba 	bl	8002604 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	429a      	cmp	r2, r3
 800529a:	d902      	bls.n	80052a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d13d      	bne.n	800531e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052ba:	d111      	bne.n	80052e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052c4:	d004      	beq.n	80052d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ce:	d107      	bne.n	80052e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e8:	d10f      	bne.n	800530a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005308:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e017      	b.n	800534e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	3b01      	subs	r3, #1
 800532c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	bf0c      	ite	eq
 800533e:	2301      	moveq	r3, #1
 8005340:	2300      	movne	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	429a      	cmp	r2, r3
 800534a:	d19b      	bne.n	8005284 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3720      	adds	r7, #32
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20000030 	.word	0x20000030

0800535c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af02      	add	r7, sp, #8
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2201      	movs	r2, #1
 8005370:	2102      	movs	r1, #2
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f7ff ff6a 	bl	800524c <SPI_WaitFlagStateUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d007      	beq.n	800538e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005382:	f043 0220 	orr.w	r2, r3, #32
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e032      	b.n	80053f4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800538e:	4b1b      	ldr	r3, [pc, #108]	@ (80053fc <SPI_EndRxTxTransaction+0xa0>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a1b      	ldr	r2, [pc, #108]	@ (8005400 <SPI_EndRxTxTransaction+0xa4>)
 8005394:	fba2 2303 	umull	r2, r3, r2, r3
 8005398:	0d5b      	lsrs	r3, r3, #21
 800539a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800539e:	fb02 f303 	mul.w	r3, r2, r3
 80053a2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053ac:	d112      	bne.n	80053d4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2200      	movs	r2, #0
 80053b6:	2180      	movs	r1, #128	@ 0x80
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f7ff ff47 	bl	800524c <SPI_WaitFlagStateUntilTimeout>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d016      	beq.n	80053f2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c8:	f043 0220 	orr.w	r2, r3, #32
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e00f      	b.n	80053f4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	3b01      	subs	r3, #1
 80053de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ea:	2b80      	cmp	r3, #128	@ 0x80
 80053ec:	d0f2      	beq.n	80053d4 <SPI_EndRxTxTransaction+0x78>
 80053ee:	e000      	b.n	80053f2 <SPI_EndRxTxTransaction+0x96>
        break;
 80053f0:	bf00      	nop
  }

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20000030 	.word	0x20000030
 8005400:	165e9f81 	.word	0x165e9f81

08005404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e041      	b.n	800549a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fc feec 	bl	8002208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3304      	adds	r3, #4
 8005440:	4619      	mov	r1, r3
 8005442:	4610      	mov	r0, r2
 8005444:	f000 fd86 	bl	8005f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d001      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e044      	b.n	8005546 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005554 <HAL_TIM_Base_Start_IT+0xb0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d018      	beq.n	8005510 <HAL_TIM_Base_Start_IT+0x6c>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e6:	d013      	beq.n	8005510 <HAL_TIM_Base_Start_IT+0x6c>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005558 <HAL_TIM_Base_Start_IT+0xb4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d00e      	beq.n	8005510 <HAL_TIM_Base_Start_IT+0x6c>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a19      	ldr	r2, [pc, #100]	@ (800555c <HAL_TIM_Base_Start_IT+0xb8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d009      	beq.n	8005510 <HAL_TIM_Base_Start_IT+0x6c>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a17      	ldr	r2, [pc, #92]	@ (8005560 <HAL_TIM_Base_Start_IT+0xbc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d004      	beq.n	8005510 <HAL_TIM_Base_Start_IT+0x6c>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a16      	ldr	r2, [pc, #88]	@ (8005564 <HAL_TIM_Base_Start_IT+0xc0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d111      	bne.n	8005534 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b06      	cmp	r3, #6
 8005520:	d010      	beq.n	8005544 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f042 0201 	orr.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005532:	e007      	b.n	8005544 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0201 	orr.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40010000 	.word	0x40010000
 8005558:	40000400 	.word	0x40000400
 800555c:	40000800 	.word	0x40000800
 8005560:	40000c00 	.word	0x40000c00
 8005564:	40014000 	.word	0x40014000

08005568 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e041      	b.n	80055fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f839 	bl	8005606 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4619      	mov	r1, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	f000 fcd4 	bl	8005f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
	...

0800561c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d109      	bne.n	8005640 <HAL_TIM_PWM_Start+0x24>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b01      	cmp	r3, #1
 8005636:	bf14      	ite	ne
 8005638:	2301      	movne	r3, #1
 800563a:	2300      	moveq	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	e022      	b.n	8005686 <HAL_TIM_PWM_Start+0x6a>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b04      	cmp	r3, #4
 8005644:	d109      	bne.n	800565a <HAL_TIM_PWM_Start+0x3e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b01      	cmp	r3, #1
 8005650:	bf14      	ite	ne
 8005652:	2301      	movne	r3, #1
 8005654:	2300      	moveq	r3, #0
 8005656:	b2db      	uxtb	r3, r3
 8005658:	e015      	b.n	8005686 <HAL_TIM_PWM_Start+0x6a>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b08      	cmp	r3, #8
 800565e:	d109      	bne.n	8005674 <HAL_TIM_PWM_Start+0x58>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b01      	cmp	r3, #1
 800566a:	bf14      	ite	ne
 800566c:	2301      	movne	r3, #1
 800566e:	2300      	moveq	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	e008      	b.n	8005686 <HAL_TIM_PWM_Start+0x6a>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b01      	cmp	r3, #1
 800567e:	bf14      	ite	ne
 8005680:	2301      	movne	r3, #1
 8005682:	2300      	moveq	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e068      	b.n	8005760 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d104      	bne.n	800569e <HAL_TIM_PWM_Start+0x82>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800569c:	e013      	b.n	80056c6 <HAL_TIM_PWM_Start+0xaa>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d104      	bne.n	80056ae <HAL_TIM_PWM_Start+0x92>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056ac:	e00b      	b.n	80056c6 <HAL_TIM_PWM_Start+0xaa>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d104      	bne.n	80056be <HAL_TIM_PWM_Start+0xa2>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056bc:	e003      	b.n	80056c6 <HAL_TIM_PWM_Start+0xaa>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2201      	movs	r2, #1
 80056cc:	6839      	ldr	r1, [r7, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fef2 	bl	80064b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a23      	ldr	r2, [pc, #140]	@ (8005768 <HAL_TIM_PWM_Start+0x14c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d107      	bne.n	80056ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a1d      	ldr	r2, [pc, #116]	@ (8005768 <HAL_TIM_PWM_Start+0x14c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d018      	beq.n	800572a <HAL_TIM_PWM_Start+0x10e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005700:	d013      	beq.n	800572a <HAL_TIM_PWM_Start+0x10e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a19      	ldr	r2, [pc, #100]	@ (800576c <HAL_TIM_PWM_Start+0x150>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00e      	beq.n	800572a <HAL_TIM_PWM_Start+0x10e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a17      	ldr	r2, [pc, #92]	@ (8005770 <HAL_TIM_PWM_Start+0x154>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d009      	beq.n	800572a <HAL_TIM_PWM_Start+0x10e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a16      	ldr	r2, [pc, #88]	@ (8005774 <HAL_TIM_PWM_Start+0x158>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d004      	beq.n	800572a <HAL_TIM_PWM_Start+0x10e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a14      	ldr	r2, [pc, #80]	@ (8005778 <HAL_TIM_PWM_Start+0x15c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d111      	bne.n	800574e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b06      	cmp	r3, #6
 800573a:	d010      	beq.n	800575e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574c:	e007      	b.n	800575e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0201 	orr.w	r2, r2, #1
 800575c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40010000 	.word	0x40010000
 800576c:	40000400 	.word	0x40000400
 8005770:	40000800 	.word	0x40000800
 8005774:	40000c00 	.word	0x40000c00
 8005778:	40014000 	.word	0x40014000

0800577c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e097      	b.n	80058c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d106      	bne.n	80057aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7fc fd6d 	bl	8002284 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2202      	movs	r2, #2
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6812      	ldr	r2, [r2, #0]
 80057bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057c0:	f023 0307 	bic.w	r3, r3, #7
 80057c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3304      	adds	r3, #4
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f000 fbbf 	bl	8005f54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057fe:	f023 0303 	bic.w	r3, r3, #3
 8005802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	4313      	orrs	r3, r2
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800581c:	f023 030c 	bic.w	r3, r3, #12
 8005820:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005828:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800582c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	4313      	orrs	r3, r2
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	011a      	lsls	r2, r3, #4
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	031b      	lsls	r3, r3, #12
 800584c:	4313      	orrs	r3, r2
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800585a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	4313      	orrs	r3, r2
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80058e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80058f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d110      	bne.n	800591a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d102      	bne.n	8005904 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80058fe:	7b7b      	ldrb	r3, [r7, #13]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d001      	beq.n	8005908 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e089      	b.n	8005a1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005918:	e031      	b.n	800597e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b04      	cmp	r3, #4
 800591e:	d110      	bne.n	8005942 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005920:	7bbb      	ldrb	r3, [r7, #14]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d102      	bne.n	800592c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005926:	7b3b      	ldrb	r3, [r7, #12]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d001      	beq.n	8005930 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e075      	b.n	8005a1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005940:	e01d      	b.n	800597e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005942:	7bfb      	ldrb	r3, [r7, #15]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d108      	bne.n	800595a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005948:	7bbb      	ldrb	r3, [r7, #14]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d105      	bne.n	800595a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800594e:	7b7b      	ldrb	r3, [r7, #13]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d102      	bne.n	800595a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005954:	7b3b      	ldrb	r3, [r7, #12]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d001      	beq.n	800595e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e05e      	b.n	8005a1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2202      	movs	r2, #2
 8005962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2202      	movs	r2, #2
 800596a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2202      	movs	r2, #2
 8005972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2202      	movs	r2, #2
 800597a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_TIM_Encoder_Start_IT+0xc4>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b04      	cmp	r3, #4
 8005988:	d010      	beq.n	80059ac <HAL_TIM_Encoder_Start_IT+0xe4>
 800598a:	e01f      	b.n	80059cc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2201      	movs	r2, #1
 8005992:	2100      	movs	r1, #0
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fd8f 	bl	80064b8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0202 	orr.w	r2, r2, #2
 80059a8:	60da      	str	r2, [r3, #12]
      break;
 80059aa:	e02e      	b.n	8005a0a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2201      	movs	r2, #1
 80059b2:	2104      	movs	r1, #4
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 fd7f 	bl	80064b8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0204 	orr.w	r2, r2, #4
 80059c8:	60da      	str	r2, [r3, #12]
      break;
 80059ca:	e01e      	b.n	8005a0a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2201      	movs	r2, #1
 80059d2:	2100      	movs	r1, #0
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fd6f 	bl	80064b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2201      	movs	r2, #1
 80059e0:	2104      	movs	r1, #4
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fd68 	bl	80064b8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0202 	orr.w	r2, r2, #2
 80059f6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0204 	orr.w	r2, r2, #4
 8005a06:	60da      	str	r2, [r3, #12]
      break;
 8005a08:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0201 	orr.w	r2, r2, #1
 8005a18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d020      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01b      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0202 	mvn.w	r2, #2
 8005a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7fc f84a 	bl	8001b08 <HAL_TIM_IC_CaptureCallback>
 8005a74:	e005      	b.n	8005a82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa4d 	bl	8005f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fa54 	bl	8005f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d020      	beq.n	8005ad4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01b      	beq.n	8005ad4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0204 	mvn.w	r2, #4
 8005aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fc f824 	bl	8001b08 <HAL_TIM_IC_CaptureCallback>
 8005ac0:	e005      	b.n	8005ace <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fa27 	bl	8005f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fa2e 	bl	8005f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d020      	beq.n	8005b20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01b      	beq.n	8005b20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0208 	mvn.w	r2, #8
 8005af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2204      	movs	r2, #4
 8005af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fb fffe 	bl	8001b08 <HAL_TIM_IC_CaptureCallback>
 8005b0c:	e005      	b.n	8005b1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fa01 	bl	8005f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fa08 	bl	8005f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0310 	and.w	r3, r3, #16
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d020      	beq.n	8005b6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01b      	beq.n	8005b6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0210 	mvn.w	r2, #16
 8005b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2208      	movs	r2, #8
 8005b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fb ffd8 	bl	8001b08 <HAL_TIM_IC_CaptureCallback>
 8005b58:	e005      	b.n	8005b66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f9db 	bl	8005f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f9e2 	bl	8005f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00c      	beq.n	8005b90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d007      	beq.n	8005b90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0201 	mvn.w	r2, #1
 8005b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fa fe6c 	bl	8000868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00c      	beq.n	8005bb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d007      	beq.n	8005bb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fd72 	bl	8006698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00c      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d007      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f9b3 	bl	8005f3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00c      	beq.n	8005bfc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d007      	beq.n	8005bfc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0220 	mvn.w	r2, #32
 8005bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fd44 	bl	8006684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e0ae      	b.n	8005d80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b0c      	cmp	r3, #12
 8005c2e:	f200 809f 	bhi.w	8005d70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c32:	a201      	add	r2, pc, #4	@ (adr r2, 8005c38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005c6d 	.word	0x08005c6d
 8005c3c:	08005d71 	.word	0x08005d71
 8005c40:	08005d71 	.word	0x08005d71
 8005c44:	08005d71 	.word	0x08005d71
 8005c48:	08005cad 	.word	0x08005cad
 8005c4c:	08005d71 	.word	0x08005d71
 8005c50:	08005d71 	.word	0x08005d71
 8005c54:	08005d71 	.word	0x08005d71
 8005c58:	08005cef 	.word	0x08005cef
 8005c5c:	08005d71 	.word	0x08005d71
 8005c60:	08005d71 	.word	0x08005d71
 8005c64:	08005d71 	.word	0x08005d71
 8005c68:	08005d2f 	.word	0x08005d2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 f9fa 	bl	800606c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0208 	orr.w	r2, r2, #8
 8005c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699a      	ldr	r2, [r3, #24]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0204 	bic.w	r2, r2, #4
 8005c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6999      	ldr	r1, [r3, #24]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	691a      	ldr	r2, [r3, #16]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	619a      	str	r2, [r3, #24]
      break;
 8005caa:	e064      	b.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68b9      	ldr	r1, [r7, #8]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fa40 	bl	8006138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6999      	ldr	r1, [r3, #24]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	021a      	lsls	r2, r3, #8
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	619a      	str	r2, [r3, #24]
      break;
 8005cec:	e043      	b.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 fa8b 	bl	8006210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69da      	ldr	r2, [r3, #28]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0208 	orr.w	r2, r2, #8
 8005d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69da      	ldr	r2, [r3, #28]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0204 	bic.w	r2, r2, #4
 8005d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69d9      	ldr	r1, [r3, #28]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	691a      	ldr	r2, [r3, #16]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	61da      	str	r2, [r3, #28]
      break;
 8005d2c:	e023      	b.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fad5 	bl	80062e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69d9      	ldr	r1, [r3, #28]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	021a      	lsls	r2, r3, #8
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	61da      	str	r2, [r3, #28]
      break;
 8005d6e:	e002      	b.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	75fb      	strb	r3, [r7, #23]
      break;
 8005d74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_TIM_ConfigClockSource+0x1c>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e0b4      	b.n	8005f0e <HAL_TIM_ConfigClockSource+0x186>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ddc:	d03e      	beq.n	8005e5c <HAL_TIM_ConfigClockSource+0xd4>
 8005dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005de2:	f200 8087 	bhi.w	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dea:	f000 8086 	beq.w	8005efa <HAL_TIM_ConfigClockSource+0x172>
 8005dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005df2:	d87f      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005df4:	2b70      	cmp	r3, #112	@ 0x70
 8005df6:	d01a      	beq.n	8005e2e <HAL_TIM_ConfigClockSource+0xa6>
 8005df8:	2b70      	cmp	r3, #112	@ 0x70
 8005dfa:	d87b      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dfc:	2b60      	cmp	r3, #96	@ 0x60
 8005dfe:	d050      	beq.n	8005ea2 <HAL_TIM_ConfigClockSource+0x11a>
 8005e00:	2b60      	cmp	r3, #96	@ 0x60
 8005e02:	d877      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e04:	2b50      	cmp	r3, #80	@ 0x50
 8005e06:	d03c      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0xfa>
 8005e08:	2b50      	cmp	r3, #80	@ 0x50
 8005e0a:	d873      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e0c:	2b40      	cmp	r3, #64	@ 0x40
 8005e0e:	d058      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x13a>
 8005e10:	2b40      	cmp	r3, #64	@ 0x40
 8005e12:	d86f      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e14:	2b30      	cmp	r3, #48	@ 0x30
 8005e16:	d064      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e18:	2b30      	cmp	r3, #48	@ 0x30
 8005e1a:	d86b      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	d060      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e20:	2b20      	cmp	r3, #32
 8005e22:	d867      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d05c      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e28:	2b10      	cmp	r3, #16
 8005e2a:	d05a      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e2c:	e062      	b.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e3e:	f000 fb1b 	bl	8006478 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	609a      	str	r2, [r3, #8]
      break;
 8005e5a:	e04f      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e6c:	f000 fb04 	bl	8006478 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e7e:	609a      	str	r2, [r3, #8]
      break;
 8005e80:	e03c      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f000 fa78 	bl	8006384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2150      	movs	r1, #80	@ 0x50
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fad1 	bl	8006442 <TIM_ITRx_SetConfig>
      break;
 8005ea0:	e02c      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f000 fa97 	bl	80063e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2160      	movs	r1, #96	@ 0x60
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fac1 	bl	8006442 <TIM_ITRx_SetConfig>
      break;
 8005ec0:	e01c      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f000 fa58 	bl	8006384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2140      	movs	r1, #64	@ 0x40
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fab1 	bl	8006442 <TIM_ITRx_SetConfig>
      break;
 8005ee0:	e00c      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4619      	mov	r1, r3
 8005eec:	4610      	mov	r0, r2
 8005eee:	f000 faa8 	bl	8006442 <TIM_ITRx_SetConfig>
      break;
 8005ef2:	e003      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef8:	e000      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
	...

08005f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a3a      	ldr	r2, [pc, #232]	@ (8006050 <TIM_Base_SetConfig+0xfc>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d00f      	beq.n	8005f8c <TIM_Base_SetConfig+0x38>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f72:	d00b      	beq.n	8005f8c <TIM_Base_SetConfig+0x38>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a37      	ldr	r2, [pc, #220]	@ (8006054 <TIM_Base_SetConfig+0x100>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d007      	beq.n	8005f8c <TIM_Base_SetConfig+0x38>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a36      	ldr	r2, [pc, #216]	@ (8006058 <TIM_Base_SetConfig+0x104>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d003      	beq.n	8005f8c <TIM_Base_SetConfig+0x38>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a35      	ldr	r2, [pc, #212]	@ (800605c <TIM_Base_SetConfig+0x108>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d108      	bne.n	8005f9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a2b      	ldr	r2, [pc, #172]	@ (8006050 <TIM_Base_SetConfig+0xfc>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d01b      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fac:	d017      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a28      	ldr	r2, [pc, #160]	@ (8006054 <TIM_Base_SetConfig+0x100>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a27      	ldr	r2, [pc, #156]	@ (8006058 <TIM_Base_SetConfig+0x104>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00f      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a26      	ldr	r2, [pc, #152]	@ (800605c <TIM_Base_SetConfig+0x108>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00b      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a25      	ldr	r2, [pc, #148]	@ (8006060 <TIM_Base_SetConfig+0x10c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d007      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a24      	ldr	r2, [pc, #144]	@ (8006064 <TIM_Base_SetConfig+0x110>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d003      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a23      	ldr	r2, [pc, #140]	@ (8006068 <TIM_Base_SetConfig+0x114>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d108      	bne.n	8005ff0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a0e      	ldr	r2, [pc, #56]	@ (8006050 <TIM_Base_SetConfig+0xfc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d103      	bne.n	8006024 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	691a      	ldr	r2, [r3, #16]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b01      	cmp	r3, #1
 8006034:	d105      	bne.n	8006042 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f023 0201 	bic.w	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	611a      	str	r2, [r3, #16]
  }
}
 8006042:	bf00      	nop
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	40010000 	.word	0x40010000
 8006054:	40000400 	.word	0x40000400
 8006058:	40000800 	.word	0x40000800
 800605c:	40000c00 	.word	0x40000c00
 8006060:	40014000 	.word	0x40014000
 8006064:	40014400 	.word	0x40014400
 8006068:	40014800 	.word	0x40014800

0800606c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	f023 0201 	bic.w	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800609a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f023 0302 	bic.w	r3, r3, #2
 80060b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006134 <TIM_OC1_SetConfig+0xc8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d10c      	bne.n	80060e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f023 0308 	bic.w	r3, r3, #8
 80060ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f023 0304 	bic.w	r3, r3, #4
 80060e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a13      	ldr	r2, [pc, #76]	@ (8006134 <TIM_OC1_SetConfig+0xc8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d111      	bne.n	800610e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	621a      	str	r2, [r3, #32]
}
 8006128:	bf00      	nop
 800612a:	371c      	adds	r7, #28
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	40010000 	.word	0x40010000

08006138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	f023 0210 	bic.w	r2, r3, #16
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800616e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	021b      	lsls	r3, r3, #8
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	4313      	orrs	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f023 0320 	bic.w	r3, r3, #32
 8006182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a1e      	ldr	r2, [pc, #120]	@ (800620c <TIM_OC2_SetConfig+0xd4>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d10d      	bne.n	80061b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800619e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a15      	ldr	r2, [pc, #84]	@ (800620c <TIM_OC2_SetConfig+0xd4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d113      	bne.n	80061e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	40010000 	.word	0x40010000

08006210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800623e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0303 	bic.w	r3, r3, #3
 8006246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	021b      	lsls	r3, r3, #8
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a1d      	ldr	r2, [pc, #116]	@ (80062e0 <TIM_OC3_SetConfig+0xd0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d10d      	bne.n	800628a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	021b      	lsls	r3, r3, #8
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a14      	ldr	r2, [pc, #80]	@ (80062e0 <TIM_OC3_SetConfig+0xd0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d113      	bne.n	80062ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	011b      	lsls	r3, r3, #4
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	011b      	lsls	r3, r3, #4
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	621a      	str	r2, [r3, #32]
}
 80062d4:	bf00      	nop
 80062d6:	371c      	adds	r7, #28
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	40010000 	.word	0x40010000

080062e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800631a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800632e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	031b      	lsls	r3, r3, #12
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	4313      	orrs	r3, r2
 800633a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a10      	ldr	r2, [pc, #64]	@ (8006380 <TIM_OC4_SetConfig+0x9c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d109      	bne.n	8006358 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800634a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	019b      	lsls	r3, r3, #6
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	621a      	str	r2, [r3, #32]
}
 8006372:	bf00      	nop
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40010000 	.word	0x40010000

08006384 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	f023 0201 	bic.w	r2, r3, #1
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f023 030a 	bic.w	r3, r3, #10
 80063c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	621a      	str	r2, [r3, #32]
}
 80063d6:	bf00      	nop
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b087      	sub	sp, #28
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	f023 0210 	bic.w	r2, r3, #16
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800640c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	031b      	lsls	r3, r3, #12
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800641e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	011b      	lsls	r3, r3, #4
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	621a      	str	r2, [r3, #32]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006442:	b480      	push	{r7}
 8006444:	b085      	sub	sp, #20
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006458:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4313      	orrs	r3, r2
 8006460:	f043 0307 	orr.w	r3, r3, #7
 8006464:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	609a      	str	r2, [r3, #8]
}
 800646c:	bf00      	nop
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006492:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	021a      	lsls	r2, r3, #8
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	431a      	orrs	r2, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4313      	orrs	r3, r2
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	609a      	str	r2, [r3, #8]
}
 80064ac:	bf00      	nop
 80064ae:	371c      	adds	r7, #28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	2201      	movs	r2, #1
 80064cc:	fa02 f303 	lsl.w	r3, r2, r3
 80064d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a1a      	ldr	r2, [r3, #32]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	43db      	mvns	r3, r3
 80064da:	401a      	ands	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6a1a      	ldr	r2, [r3, #32]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f003 031f 	and.w	r3, r3, #31
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	fa01 f303 	lsl.w	r3, r1, r3
 80064f0:	431a      	orrs	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	621a      	str	r2, [r3, #32]
}
 80064f6:	bf00      	nop
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
	...

08006504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006514:	2b01      	cmp	r3, #1
 8006516:	d101      	bne.n	800651c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006518:	2302      	movs	r3, #2
 800651a:	e050      	b.n	80065be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a1c      	ldr	r2, [pc, #112]	@ (80065cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d018      	beq.n	8006592 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006568:	d013      	beq.n	8006592 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a18      	ldr	r2, [pc, #96]	@ (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00e      	beq.n	8006592 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a16      	ldr	r2, [pc, #88]	@ (80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d009      	beq.n	8006592 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a15      	ldr	r2, [pc, #84]	@ (80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d004      	beq.n	8006592 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a13      	ldr	r2, [pc, #76]	@ (80065dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d10c      	bne.n	80065ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006598:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40010000 	.word	0x40010000
 80065d0:	40000400 	.word	0x40000400
 80065d4:	40000800 	.word	0x40000800
 80065d8:	40000c00 	.word	0x40000c00
 80065dc:	40014000 	.word	0x40014000

080065e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d101      	bne.n	80065fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065f8:	2302      	movs	r3, #2
 80065fa:	e03d      	b.n	8006678 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	4313      	orrs	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4313      	orrs	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e042      	b.n	8006744 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7fb fe8a 	bl	80023ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2224      	movs	r2, #36	@ 0x24
 80066dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f82b 	bl	800674c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	691a      	ldr	r2, [r3, #16]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695a      	ldr	r2, [r3, #20]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2220      	movs	r2, #32
 8006738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800674c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006750:	b0c0      	sub	sp, #256	@ 0x100
 8006752:	af00      	add	r7, sp, #0
 8006754:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006768:	68d9      	ldr	r1, [r3, #12]
 800676a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	ea40 0301 	orr.w	r3, r0, r1
 8006774:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	431a      	orrs	r2, r3
 8006784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	431a      	orrs	r2, r3
 800678c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	4313      	orrs	r3, r2
 8006794:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80067a4:	f021 010c 	bic.w	r1, r1, #12
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80067b2:	430b      	orrs	r3, r1
 80067b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80067c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c6:	6999      	ldr	r1, [r3, #24]
 80067c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	ea40 0301 	orr.w	r3, r0, r1
 80067d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	4b8f      	ldr	r3, [pc, #572]	@ (8006a18 <UART_SetConfig+0x2cc>)
 80067dc:	429a      	cmp	r2, r3
 80067de:	d005      	beq.n	80067ec <UART_SetConfig+0xa0>
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	4b8d      	ldr	r3, [pc, #564]	@ (8006a1c <UART_SetConfig+0x2d0>)
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d104      	bne.n	80067f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067ec:	f7fd fe46 	bl	800447c <HAL_RCC_GetPCLK2Freq>
 80067f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80067f4:	e003      	b.n	80067fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067f6:	f7fd fe2d 	bl	8004454 <HAL_RCC_GetPCLK1Freq>
 80067fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006808:	f040 810c 	bne.w	8006a24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800680c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006810:	2200      	movs	r2, #0
 8006812:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006816:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800681a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800681e:	4622      	mov	r2, r4
 8006820:	462b      	mov	r3, r5
 8006822:	1891      	adds	r1, r2, r2
 8006824:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006826:	415b      	adcs	r3, r3
 8006828:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800682a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800682e:	4621      	mov	r1, r4
 8006830:	eb12 0801 	adds.w	r8, r2, r1
 8006834:	4629      	mov	r1, r5
 8006836:	eb43 0901 	adc.w	r9, r3, r1
 800683a:	f04f 0200 	mov.w	r2, #0
 800683e:	f04f 0300 	mov.w	r3, #0
 8006842:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006846:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800684a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800684e:	4690      	mov	r8, r2
 8006850:	4699      	mov	r9, r3
 8006852:	4623      	mov	r3, r4
 8006854:	eb18 0303 	adds.w	r3, r8, r3
 8006858:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800685c:	462b      	mov	r3, r5
 800685e:	eb49 0303 	adc.w	r3, r9, r3
 8006862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006872:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006876:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800687a:	460b      	mov	r3, r1
 800687c:	18db      	adds	r3, r3, r3
 800687e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006880:	4613      	mov	r3, r2
 8006882:	eb42 0303 	adc.w	r3, r2, r3
 8006886:	657b      	str	r3, [r7, #84]	@ 0x54
 8006888:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800688c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006890:	f7f9 fca0 	bl	80001d4 <__aeabi_uldivmod>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4b61      	ldr	r3, [pc, #388]	@ (8006a20 <UART_SetConfig+0x2d4>)
 800689a:	fba3 2302 	umull	r2, r3, r3, r2
 800689e:	095b      	lsrs	r3, r3, #5
 80068a0:	011c      	lsls	r4, r3, #4
 80068a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80068b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80068b4:	4642      	mov	r2, r8
 80068b6:	464b      	mov	r3, r9
 80068b8:	1891      	adds	r1, r2, r2
 80068ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80068bc:	415b      	adcs	r3, r3
 80068be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80068c4:	4641      	mov	r1, r8
 80068c6:	eb12 0a01 	adds.w	sl, r2, r1
 80068ca:	4649      	mov	r1, r9
 80068cc:	eb43 0b01 	adc.w	fp, r3, r1
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068e4:	4692      	mov	sl, r2
 80068e6:	469b      	mov	fp, r3
 80068e8:	4643      	mov	r3, r8
 80068ea:	eb1a 0303 	adds.w	r3, sl, r3
 80068ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068f2:	464b      	mov	r3, r9
 80068f4:	eb4b 0303 	adc.w	r3, fp, r3
 80068f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80068fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006908:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800690c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006910:	460b      	mov	r3, r1
 8006912:	18db      	adds	r3, r3, r3
 8006914:	643b      	str	r3, [r7, #64]	@ 0x40
 8006916:	4613      	mov	r3, r2
 8006918:	eb42 0303 	adc.w	r3, r2, r3
 800691c:	647b      	str	r3, [r7, #68]	@ 0x44
 800691e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006922:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006926:	f7f9 fc55 	bl	80001d4 <__aeabi_uldivmod>
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	4611      	mov	r1, r2
 8006930:	4b3b      	ldr	r3, [pc, #236]	@ (8006a20 <UART_SetConfig+0x2d4>)
 8006932:	fba3 2301 	umull	r2, r3, r3, r1
 8006936:	095b      	lsrs	r3, r3, #5
 8006938:	2264      	movs	r2, #100	@ 0x64
 800693a:	fb02 f303 	mul.w	r3, r2, r3
 800693e:	1acb      	subs	r3, r1, r3
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006946:	4b36      	ldr	r3, [pc, #216]	@ (8006a20 <UART_SetConfig+0x2d4>)
 8006948:	fba3 2302 	umull	r2, r3, r3, r2
 800694c:	095b      	lsrs	r3, r3, #5
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006954:	441c      	add	r4, r3
 8006956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800695a:	2200      	movs	r2, #0
 800695c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006960:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006964:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006968:	4642      	mov	r2, r8
 800696a:	464b      	mov	r3, r9
 800696c:	1891      	adds	r1, r2, r2
 800696e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006970:	415b      	adcs	r3, r3
 8006972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006974:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006978:	4641      	mov	r1, r8
 800697a:	1851      	adds	r1, r2, r1
 800697c:	6339      	str	r1, [r7, #48]	@ 0x30
 800697e:	4649      	mov	r1, r9
 8006980:	414b      	adcs	r3, r1
 8006982:	637b      	str	r3, [r7, #52]	@ 0x34
 8006984:	f04f 0200 	mov.w	r2, #0
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006990:	4659      	mov	r1, fp
 8006992:	00cb      	lsls	r3, r1, #3
 8006994:	4651      	mov	r1, sl
 8006996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800699a:	4651      	mov	r1, sl
 800699c:	00ca      	lsls	r2, r1, #3
 800699e:	4610      	mov	r0, r2
 80069a0:	4619      	mov	r1, r3
 80069a2:	4603      	mov	r3, r0
 80069a4:	4642      	mov	r2, r8
 80069a6:	189b      	adds	r3, r3, r2
 80069a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069ac:	464b      	mov	r3, r9
 80069ae:	460a      	mov	r2, r1
 80069b0:	eb42 0303 	adc.w	r3, r2, r3
 80069b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80069c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80069c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80069cc:	460b      	mov	r3, r1
 80069ce:	18db      	adds	r3, r3, r3
 80069d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069d2:	4613      	mov	r3, r2
 80069d4:	eb42 0303 	adc.w	r3, r2, r3
 80069d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80069de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80069e2:	f7f9 fbf7 	bl	80001d4 <__aeabi_uldivmod>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006a20 <UART_SetConfig+0x2d4>)
 80069ec:	fba3 1302 	umull	r1, r3, r3, r2
 80069f0:	095b      	lsrs	r3, r3, #5
 80069f2:	2164      	movs	r1, #100	@ 0x64
 80069f4:	fb01 f303 	mul.w	r3, r1, r3
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	3332      	adds	r3, #50	@ 0x32
 80069fe:	4a08      	ldr	r2, [pc, #32]	@ (8006a20 <UART_SetConfig+0x2d4>)
 8006a00:	fba2 2303 	umull	r2, r3, r2, r3
 8006a04:	095b      	lsrs	r3, r3, #5
 8006a06:	f003 0207 	and.w	r2, r3, #7
 8006a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4422      	add	r2, r4
 8006a12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a14:	e106      	b.n	8006c24 <UART_SetConfig+0x4d8>
 8006a16:	bf00      	nop
 8006a18:	40011000 	.word	0x40011000
 8006a1c:	40011400 	.word	0x40011400
 8006a20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006a32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006a36:	4642      	mov	r2, r8
 8006a38:	464b      	mov	r3, r9
 8006a3a:	1891      	adds	r1, r2, r2
 8006a3c:	6239      	str	r1, [r7, #32]
 8006a3e:	415b      	adcs	r3, r3
 8006a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a46:	4641      	mov	r1, r8
 8006a48:	1854      	adds	r4, r2, r1
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	eb43 0501 	adc.w	r5, r3, r1
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	00eb      	lsls	r3, r5, #3
 8006a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a5e:	00e2      	lsls	r2, r4, #3
 8006a60:	4614      	mov	r4, r2
 8006a62:	461d      	mov	r5, r3
 8006a64:	4643      	mov	r3, r8
 8006a66:	18e3      	adds	r3, r4, r3
 8006a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a6c:	464b      	mov	r3, r9
 8006a6e:	eb45 0303 	adc.w	r3, r5, r3
 8006a72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006a92:	4629      	mov	r1, r5
 8006a94:	008b      	lsls	r3, r1, #2
 8006a96:	4621      	mov	r1, r4
 8006a98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	008a      	lsls	r2, r1, #2
 8006aa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006aa4:	f7f9 fb96 	bl	80001d4 <__aeabi_uldivmod>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4b60      	ldr	r3, [pc, #384]	@ (8006c30 <UART_SetConfig+0x4e4>)
 8006aae:	fba3 2302 	umull	r2, r3, r3, r2
 8006ab2:	095b      	lsrs	r3, r3, #5
 8006ab4:	011c      	lsls	r4, r3, #4
 8006ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ac0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ac4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006ac8:	4642      	mov	r2, r8
 8006aca:	464b      	mov	r3, r9
 8006acc:	1891      	adds	r1, r2, r2
 8006ace:	61b9      	str	r1, [r7, #24]
 8006ad0:	415b      	adcs	r3, r3
 8006ad2:	61fb      	str	r3, [r7, #28]
 8006ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ad8:	4641      	mov	r1, r8
 8006ada:	1851      	adds	r1, r2, r1
 8006adc:	6139      	str	r1, [r7, #16]
 8006ade:	4649      	mov	r1, r9
 8006ae0:	414b      	adcs	r3, r1
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006af0:	4659      	mov	r1, fp
 8006af2:	00cb      	lsls	r3, r1, #3
 8006af4:	4651      	mov	r1, sl
 8006af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006afa:	4651      	mov	r1, sl
 8006afc:	00ca      	lsls	r2, r1, #3
 8006afe:	4610      	mov	r0, r2
 8006b00:	4619      	mov	r1, r3
 8006b02:	4603      	mov	r3, r0
 8006b04:	4642      	mov	r2, r8
 8006b06:	189b      	adds	r3, r3, r2
 8006b08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b0c:	464b      	mov	r3, r9
 8006b0e:	460a      	mov	r2, r1
 8006b10:	eb42 0303 	adc.w	r3, r2, r3
 8006b14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006b24:	f04f 0200 	mov.w	r2, #0
 8006b28:	f04f 0300 	mov.w	r3, #0
 8006b2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006b30:	4649      	mov	r1, r9
 8006b32:	008b      	lsls	r3, r1, #2
 8006b34:	4641      	mov	r1, r8
 8006b36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b3a:	4641      	mov	r1, r8
 8006b3c:	008a      	lsls	r2, r1, #2
 8006b3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006b42:	f7f9 fb47 	bl	80001d4 <__aeabi_uldivmod>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4b38      	ldr	r3, [pc, #224]	@ (8006c30 <UART_SetConfig+0x4e4>)
 8006b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	2264      	movs	r2, #100	@ 0x64
 8006b56:	fb02 f303 	mul.w	r3, r2, r3
 8006b5a:	1acb      	subs	r3, r1, r3
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	3332      	adds	r3, #50	@ 0x32
 8006b60:	4a33      	ldr	r2, [pc, #204]	@ (8006c30 <UART_SetConfig+0x4e4>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	095b      	lsrs	r3, r3, #5
 8006b68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b6c:	441c      	add	r4, r3
 8006b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b72:	2200      	movs	r2, #0
 8006b74:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b76:	677a      	str	r2, [r7, #116]	@ 0x74
 8006b78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006b7c:	4642      	mov	r2, r8
 8006b7e:	464b      	mov	r3, r9
 8006b80:	1891      	adds	r1, r2, r2
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	415b      	adcs	r3, r3
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b8c:	4641      	mov	r1, r8
 8006b8e:	1851      	adds	r1, r2, r1
 8006b90:	6039      	str	r1, [r7, #0]
 8006b92:	4649      	mov	r1, r9
 8006b94:	414b      	adcs	r3, r1
 8006b96:	607b      	str	r3, [r7, #4]
 8006b98:	f04f 0200 	mov.w	r2, #0
 8006b9c:	f04f 0300 	mov.w	r3, #0
 8006ba0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ba4:	4659      	mov	r1, fp
 8006ba6:	00cb      	lsls	r3, r1, #3
 8006ba8:	4651      	mov	r1, sl
 8006baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bae:	4651      	mov	r1, sl
 8006bb0:	00ca      	lsls	r2, r1, #3
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	4642      	mov	r2, r8
 8006bba:	189b      	adds	r3, r3, r2
 8006bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bbe:	464b      	mov	r3, r9
 8006bc0:	460a      	mov	r2, r1
 8006bc2:	eb42 0303 	adc.w	r3, r2, r3
 8006bc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bd2:	667a      	str	r2, [r7, #100]	@ 0x64
 8006bd4:	f04f 0200 	mov.w	r2, #0
 8006bd8:	f04f 0300 	mov.w	r3, #0
 8006bdc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006be0:	4649      	mov	r1, r9
 8006be2:	008b      	lsls	r3, r1, #2
 8006be4:	4641      	mov	r1, r8
 8006be6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bea:	4641      	mov	r1, r8
 8006bec:	008a      	lsls	r2, r1, #2
 8006bee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006bf2:	f7f9 faef 	bl	80001d4 <__aeabi_uldivmod>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006c30 <UART_SetConfig+0x4e4>)
 8006bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8006c00:	095b      	lsrs	r3, r3, #5
 8006c02:	2164      	movs	r1, #100	@ 0x64
 8006c04:	fb01 f303 	mul.w	r3, r1, r3
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	3332      	adds	r3, #50	@ 0x32
 8006c0e:	4a08      	ldr	r2, [pc, #32]	@ (8006c30 <UART_SetConfig+0x4e4>)
 8006c10:	fba2 2303 	umull	r2, r3, r2, r3
 8006c14:	095b      	lsrs	r3, r3, #5
 8006c16:	f003 020f 	and.w	r2, r3, #15
 8006c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4422      	add	r2, r4
 8006c22:	609a      	str	r2, [r3, #8]
}
 8006c24:	bf00      	nop
 8006c26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c30:	51eb851f 	.word	0x51eb851f

08006c34 <memset>:
 8006c34:	4402      	add	r2, r0
 8006c36:	4603      	mov	r3, r0
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d100      	bne.n	8006c3e <memset+0xa>
 8006c3c:	4770      	bx	lr
 8006c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c42:	e7f9      	b.n	8006c38 <memset+0x4>

08006c44 <__libc_init_array>:
 8006c44:	b570      	push	{r4, r5, r6, lr}
 8006c46:	4d0d      	ldr	r5, [pc, #52]	@ (8006c7c <__libc_init_array+0x38>)
 8006c48:	4c0d      	ldr	r4, [pc, #52]	@ (8006c80 <__libc_init_array+0x3c>)
 8006c4a:	1b64      	subs	r4, r4, r5
 8006c4c:	10a4      	asrs	r4, r4, #2
 8006c4e:	2600      	movs	r6, #0
 8006c50:	42a6      	cmp	r6, r4
 8006c52:	d109      	bne.n	8006c68 <__libc_init_array+0x24>
 8006c54:	4d0b      	ldr	r5, [pc, #44]	@ (8006c84 <__libc_init_array+0x40>)
 8006c56:	4c0c      	ldr	r4, [pc, #48]	@ (8006c88 <__libc_init_array+0x44>)
 8006c58:	f000 f818 	bl	8006c8c <_init>
 8006c5c:	1b64      	subs	r4, r4, r5
 8006c5e:	10a4      	asrs	r4, r4, #2
 8006c60:	2600      	movs	r6, #0
 8006c62:	42a6      	cmp	r6, r4
 8006c64:	d105      	bne.n	8006c72 <__libc_init_array+0x2e>
 8006c66:	bd70      	pop	{r4, r5, r6, pc}
 8006c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c6c:	4798      	blx	r3
 8006c6e:	3601      	adds	r6, #1
 8006c70:	e7ee      	b.n	8006c50 <__libc_init_array+0xc>
 8006c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c76:	4798      	blx	r3
 8006c78:	3601      	adds	r6, #1
 8006c7a:	e7f2      	b.n	8006c62 <__libc_init_array+0x1e>
 8006c7c:	08006d60 	.word	0x08006d60
 8006c80:	08006d60 	.word	0x08006d60
 8006c84:	08006d60 	.word	0x08006d60
 8006c88:	08006d64 	.word	0x08006d64

08006c8c <_init>:
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	bf00      	nop
 8006c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c92:	bc08      	pop	{r3}
 8006c94:	469e      	mov	lr, r3
 8006c96:	4770      	bx	lr

08006c98 <_fini>:
 8006c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9a:	bf00      	nop
 8006c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c9e:	bc08      	pop	{r3}
 8006ca0:	469e      	mov	lr, r3
 8006ca2:	4770      	bx	lr
