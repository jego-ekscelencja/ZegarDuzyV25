
ZegarDuzy11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006684  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08006818  08006818  00007818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068cc  080068cc  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  080068cc  080068cc  000078cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068d4  080068d4  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068d4  080068d4  000078d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068d8  080068d8  000078d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080068dc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  2000000c  080068e8  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  080068e8  00008340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014467  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033f6  00000000  00000000  0001c4a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0001f8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef3  00000000  00000000  00020be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c4f  00000000  00000000  00021adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000199c2  00000000  00000000  0003b72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0c1c  00000000  00000000  000550ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5d08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000509c  00000000  00000000  000f5d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000fade8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006800 	.word	0x08006800

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08006800 	.word	0x08006800

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004d6:	4b21      	ldr	r3, [pc, #132]	@ (800055c <MX_ADC1_Init+0x98>)
 80004d8:	4a21      	ldr	r2, [pc, #132]	@ (8000560 <MX_ADC1_Init+0x9c>)
 80004da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004dc:	4b1f      	ldr	r3, [pc, #124]	@ (800055c <MX_ADC1_Init+0x98>)
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e2:	4b1e      	ldr	r3, [pc, #120]	@ (800055c <MX_ADC1_Init+0x98>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004e8:	4b1c      	ldr	r3, [pc, #112]	@ (800055c <MX_ADC1_Init+0x98>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ee:	4b1b      	ldr	r3, [pc, #108]	@ (800055c <MX_ADC1_Init+0x98>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f4:	4b19      	ldr	r3, [pc, #100]	@ (800055c <MX_ADC1_Init+0x98>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fc:	4b17      	ldr	r3, [pc, #92]	@ (800055c <MX_ADC1_Init+0x98>)
 80004fe:	2200      	movs	r2, #0
 8000500:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000502:	4b16      	ldr	r3, [pc, #88]	@ (800055c <MX_ADC1_Init+0x98>)
 8000504:	4a17      	ldr	r2, [pc, #92]	@ (8000564 <MX_ADC1_Init+0xa0>)
 8000506:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000508:	4b14      	ldr	r3, [pc, #80]	@ (800055c <MX_ADC1_Init+0x98>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800050e:	4b13      	ldr	r3, [pc, #76]	@ (800055c <MX_ADC1_Init+0x98>)
 8000510:	2201      	movs	r2, #1
 8000512:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000514:	4b11      	ldr	r3, [pc, #68]	@ (800055c <MX_ADC1_Init+0x98>)
 8000516:	2200      	movs	r2, #0
 8000518:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051c:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <MX_ADC1_Init+0x98>)
 800051e:	2201      	movs	r2, #1
 8000520:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000522:	480e      	ldr	r0, [pc, #56]	@ (800055c <MX_ADC1_Init+0x98>)
 8000524:	f002 f9a2 	bl	800286c <HAL_ADC_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800052e:	f001 fd5d 	bl	8001fec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000532:	2303      	movs	r3, #3
 8000534:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053e:	463b      	mov	r3, r7
 8000540:	4619      	mov	r1, r3
 8000542:	4806      	ldr	r0, [pc, #24]	@ (800055c <MX_ADC1_Init+0x98>)
 8000544:	f002 fa8a 	bl	8002a5c <HAL_ADC_ConfigChannel>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800054e:	f001 fd4d 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000028 	.word	0x20000028
 8000560:	40012000 	.word	0x40012000
 8000564:	0f000001 	.word	0x0f000001

08000568 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	@ 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a17      	ldr	r2, [pc, #92]	@ (80005e4 <HAL_ADC_MspInit+0x7c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d127      	bne.n	80005da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 8000590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000592:	4a15      	ldr	r2, [pc, #84]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 8000594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000598:	6453      	str	r3, [r2, #68]	@ 0x44
 800059a:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 800059c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800059e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a0e      	ldr	r2, [pc, #56]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005c2:	2308      	movs	r3, #8
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c6:	2303      	movs	r3, #3
 80005c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	@ (80005ec <HAL_ADC_MspInit+0x84>)
 80005d6:	f003 f903 	bl	80037e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005da:	bf00      	nop
 80005dc:	3728      	adds	r7, #40	@ 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40012000 	.word	0x40012000
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020000 	.word	0x40020000

080005f0 <charToSegment>:
//static Bits192 regValue;         // Przechowuje 192 bity rozbite na 12×16

// Implementacja tablicy segmentMap i funkcji charToSegment.
// (Zwykle segmentMap mamy w Display.h jako static const,
//  ale jeśli wolisz mieć ją w .c, możesz przenieść tutaj.)
uint8_t charToSegment(char c) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]

    switch (c) {
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	3b2a      	subs	r3, #42	@ 0x2a
 80005fe:	2b50      	cmp	r3, #80	@ 0x50
 8000600:	f200 80d7 	bhi.w	80007b2 <charToSegment+0x1c2>
 8000604:	a201      	add	r2, pc, #4	@ (adr r2, 800060c <charToSegment+0x1c>)
 8000606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060a:	bf00      	nop
 800060c:	0800075f 	.word	0x0800075f
 8000610:	080007b3 	.word	0x080007b3
 8000614:	080007b3 	.word	0x080007b3
 8000618:	0800075b 	.word	0x0800075b
 800061c:	080007b3 	.word	0x080007b3
 8000620:	080007b3 	.word	0x080007b3
 8000624:	08000751 	.word	0x08000751
 8000628:	08000751 	.word	0x08000751
 800062c:	08000751 	.word	0x08000751
 8000630:	08000751 	.word	0x08000751
 8000634:	08000751 	.word	0x08000751
 8000638:	08000751 	.word	0x08000751
 800063c:	08000751 	.word	0x08000751
 8000640:	08000751 	.word	0x08000751
 8000644:	08000751 	.word	0x08000751
 8000648:	08000751 	.word	0x08000751
 800064c:	080007b3 	.word	0x080007b3
 8000650:	080007b3 	.word	0x080007b3
 8000654:	080007b3 	.word	0x080007b3
 8000658:	080007b3 	.word	0x080007b3
 800065c:	080007b3 	.word	0x080007b3
 8000660:	080007b3 	.word	0x080007b3
 8000664:	080007b3 	.word	0x080007b3
 8000668:	0800077b 	.word	0x0800077b
 800066c:	080007af 	.word	0x080007af
 8000670:	08000763 	.word	0x08000763
 8000674:	080007b3 	.word	0x080007b3
 8000678:	0800078f 	.word	0x0800078f
 800067c:	08000777 	.word	0x08000777
 8000680:	080007b3 	.word	0x080007b3
 8000684:	080007b3 	.word	0x080007b3
 8000688:	080007b3 	.word	0x080007b3
 800068c:	080007b3 	.word	0x080007b3
 8000690:	080007b3 	.word	0x080007b3
 8000694:	080007a7 	.word	0x080007a7
 8000698:	080007b3 	.word	0x080007b3
 800069c:	08000787 	.word	0x08000787
 80006a0:	0800079f 	.word	0x0800079f
 80006a4:	08000797 	.word	0x08000797
 80006a8:	080007b3 	.word	0x080007b3
 80006ac:	0800076b 	.word	0x0800076b
 80006b0:	08000773 	.word	0x08000773
 80006b4:	080007b3 	.word	0x080007b3
 80006b8:	08000783 	.word	0x08000783
 80006bc:	08000783 	.word	0x08000783
 80006c0:	080007a3 	.word	0x080007a3
 80006c4:	080007b3 	.word	0x080007b3
 80006c8:	080007b3 	.word	0x080007b3
 80006cc:	080007ab 	.word	0x080007ab
 80006d0:	080007b3 	.word	0x080007b3
 80006d4:	080007b3 	.word	0x080007b3
 80006d8:	080007b3 	.word	0x080007b3
 80006dc:	080007b3 	.word	0x080007b3
 80006e0:	080007b3 	.word	0x080007b3
 80006e4:	080007b3 	.word	0x080007b3
 80006e8:	0800077b 	.word	0x0800077b
 80006ec:	080007af 	.word	0x080007af
 80006f0:	08000767 	.word	0x08000767
 80006f4:	08000793 	.word	0x08000793
 80006f8:	0800078f 	.word	0x0800078f
 80006fc:	080007b3 	.word	0x080007b3
 8000700:	080007b3 	.word	0x080007b3
 8000704:	0800076f 	.word	0x0800076f
 8000708:	0800078b 	.word	0x0800078b
 800070c:	080007b3 	.word	0x080007b3
 8000710:	080007b3 	.word	0x080007b3
 8000714:	080007b3 	.word	0x080007b3
 8000718:	080007b3 	.word	0x080007b3
 800071c:	08000787 	.word	0x08000787
 8000720:	0800079b 	.word	0x0800079b
 8000724:	08000797 	.word	0x08000797
 8000728:	080007b3 	.word	0x080007b3
 800072c:	0800076b 	.word	0x0800076b
 8000730:	08000773 	.word	0x08000773
 8000734:	0800077f 	.word	0x0800077f
 8000738:	080007a3 	.word	0x080007a3
 800073c:	080007b3 	.word	0x080007b3
 8000740:	080007a3 	.word	0x080007a3
 8000744:	080007b3 	.word	0x080007b3
 8000748:	080007b3 	.word	0x080007b3
 800074c:	080007ab 	.word	0x080007ab
    case '0' ... '9':
        return segmentMap[c - '0'];
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	3b30      	subs	r3, #48	@ 0x30
 8000754:	4a1a      	ldr	r2, [pc, #104]	@ (80007c0 <charToSegment+0x1d0>)
 8000756:	5cd3      	ldrb	r3, [r2, r3]
 8000758:	e02c      	b.n	80007b4 <charToSegment+0x1c4>
    case '-':
        return segmentMap[11];
 800075a:	2340      	movs	r3, #64	@ 0x40
 800075c:	e02a      	b.n	80007b4 <charToSegment+0x1c4>
    case '*':
        return segmentMap[12];
 800075e:	2363      	movs	r3, #99	@ 0x63
 8000760:	e028      	b.n	80007b4 <charToSegment+0x1c4>
    case 'C':
        return segmentMap[13];
 8000762:	2339      	movs	r3, #57	@ 0x39
 8000764:	e026      	b.n	80007b4 <charToSegment+0x1c4>
    case 'c':
        return segmentMap[29];
 8000766:	2300      	movs	r3, #0
 8000768:	e024      	b.n	80007b4 <charToSegment+0x1c4>
    case 'r':
    case 'R':
        return segmentMap[14];
 800076a:	2350      	movs	r3, #80	@ 0x50
 800076c:	e022      	b.n	80007b4 <charToSegment+0x1c4>
    case 'h':
        return segmentMap[15];
 800076e:	2374      	movs	r3, #116	@ 0x74
 8000770:	e020      	b.n	80007b4 <charToSegment+0x1c4>
    case 's':
    case 'S':
        return segmentMap[5];
 8000772:	236d      	movs	r3, #109	@ 0x6d
 8000774:	e01e      	b.n	80007b4 <charToSegment+0x1c4>
    case 'F':
        return segmentMap[16];
 8000776:	2371      	movs	r3, #113	@ 0x71
 8000778:	e01c      	b.n	80007b4 <charToSegment+0x1c4>
    case 'A':
    case 'a':
        return segmentMap[17];
 800077a:	2300      	movs	r3, #0
 800077c:	e01a      	b.n	80007b4 <charToSegment+0x1c4>
    case 't':
        return segmentMap[18];
 800077e:	2300      	movs	r3, #0
 8000780:	e018      	b.n	80007b4 <charToSegment+0x1c4>
    case 'V':
    case 'U':
        return segmentMap[19];
 8000782:	2300      	movs	r3, #0
 8000784:	e016      	b.n	80007b4 <charToSegment+0x1c4>
    case 'n':
    case 'N':
        return segmentMap[20];
 8000786:	2300      	movs	r3, #0
 8000788:	e014      	b.n	80007b4 <charToSegment+0x1c4>
    case 'i':
        return segmentMap[21];
 800078a:	2300      	movs	r3, #0
 800078c:	e012      	b.n	80007b4 <charToSegment+0x1c4>
    case 'E':
    case 'e':
        return segmentMap[22];
 800078e:	2300      	movs	r3, #0
 8000790:	e010      	b.n	80007b4 <charToSegment+0x1c4>
    case 'd':
        return segmentMap[23];
 8000792:	2300      	movs	r3, #0
 8000794:	e00e      	b.n	80007b4 <charToSegment+0x1c4>
    case 'P':
    case 'p':
        return segmentMap[24];
 8000796:	2300      	movs	r3, #0
 8000798:	e00c      	b.n	80007b4 <charToSegment+0x1c4>
    case 'o':
        return segmentMap[25];
 800079a:	2300      	movs	r3, #0
 800079c:	e00a      	b.n	80007b4 <charToSegment+0x1c4>
    case 'O':
        return segmentMap[0];
 800079e:	233f      	movs	r3, #63	@ 0x3f
 80007a0:	e008      	b.n	80007b4 <charToSegment+0x1c4>
    case 'u':
    case 'w':
    case 'W':
        return segmentMap[26];
 80007a2:	2300      	movs	r3, #0
 80007a4:	e006      	b.n	80007b4 <charToSegment+0x1c4>
    case 'L':
        return segmentMap[27];
 80007a6:	2300      	movs	r3, #0
 80007a8:	e004      	b.n	80007b4 <charToSegment+0x1c4>
    case 'z':
    case 'Z':
        return segmentMap[2];
 80007aa:	235b      	movs	r3, #91	@ 0x5b
 80007ac:	e002      	b.n	80007b4 <charToSegment+0x1c4>
    case 'b':
    case 'B':
        return segmentMap[28];
 80007ae:	2300      	movs	r3, #0
 80007b0:	e000      	b.n	80007b4 <charToSegment+0x1c4>
    default:
        // spacja lub nieobsługiwany znak
        return segmentMap[10];
 80007b2:	2300      	movs	r3, #0
    }
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	08006818 	.word	0x08006818

080007c4 <HAL_SPI_TxCpltCallback>:
 * ---------------------------------------------------------------------------
 * Implementacja funkcji obsługujących 192-bitowy rejestr wyświetlaczy
 * ---------------------------------------------------------------------------
 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if(hspi->Instance == SPI1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a09      	ldr	r2, [pc, #36]	@ (80007f8 <HAL_SPI_TxCpltCallback+0x34>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d10c      	bne.n	80007f0 <HAL_SPI_TxCpltCallback+0x2c>
  {
    // Krótki impuls na pin LATCH
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	2140      	movs	r1, #64	@ 0x40
 80007da:	4808      	ldr	r0, [pc, #32]	@ (80007fc <HAL_SPI_TxCpltCallback+0x38>)
 80007dc:	f003 f984 	bl	8003ae8 <HAL_GPIO_WritePin>
    // Ewentualnie opóźnienie
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2140      	movs	r1, #64	@ 0x40
 80007e4:	4805      	ldr	r0, [pc, #20]	@ (80007fc <HAL_SPI_TxCpltCallback+0x38>)
 80007e6:	f003 f97f 	bl	8003ae8 <HAL_GPIO_WritePin>
    spiTransferInProgress = false;  // Zakończono transmisję
 80007ea:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <HAL_SPI_TxCpltCallback+0x3c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
  }

}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40013000 	.word	0x40013000
 80007fc:	40020000 	.word	0x40020000
 8000800:	20000070 	.word	0x20000070

08000804 <ClearClockBits>:
  HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 24);
}


void ClearClockBits(MyClockBitFields* clockBits)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  memset(clockBits, 0, sizeof(MyClockBitFields));
 800080c:	2218      	movs	r2, #24
 800080e:	2100      	movs	r1, #0
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f005 ffc9 	bl	80067a8 <memset>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <SetSecondLedSingle>:

void SetSecondLedSingle(MyClockBitFields* clockBits, uint8_t second)
{
 800081e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000820:	b085      	sub	sp, #20
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 8000828:	78f9      	ldrb	r1, [r7, #3]
 800082a:	293b      	cmp	r1, #59	@ 0x3b
 800082c:	d901      	bls.n	8000832 <SetSecondLedSingle+0x14>
 800082e:	213b      	movs	r1, #59	@ 0x3b
 8000830:	70f9      	strb	r1, [r7, #3]

    clockBits->secondsRing = 0ULL;
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	2000      	movs	r0, #0
 8000836:	7008      	strb	r0, [r1, #0]
 8000838:	2000      	movs	r0, #0
 800083a:	7048      	strb	r0, [r1, #1]
 800083c:	2000      	movs	r0, #0
 800083e:	7088      	strb	r0, [r1, #2]
 8000840:	2000      	movs	r0, #0
 8000842:	70c8      	strb	r0, [r1, #3]
 8000844:	2000      	movs	r0, #0
 8000846:	7108      	strb	r0, [r1, #4]
 8000848:	2000      	movs	r0, #0
 800084a:	7148      	strb	r0, [r1, #5]
 800084c:	2000      	movs	r0, #0
 800084e:	7188      	strb	r0, [r1, #6]
 8000850:	79c8      	ldrb	r0, [r1, #7]
 8000852:	f020 000f 	bic.w	r0, r0, #15
 8000856:	71c8      	strb	r0, [r1, #7]
    uint64_t mask = (1ULL << second);
 8000858:	78fe      	ldrb	r6, [r7, #3]
 800085a:	f04f 0001 	mov.w	r0, #1
 800085e:	f04f 0100 	mov.w	r1, #0
 8000862:	f1a6 0e20 	sub.w	lr, r6, #32
 8000866:	f1c6 0c20 	rsb	ip, r6, #32
 800086a:	fa01 f306 	lsl.w	r3, r1, r6
 800086e:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000872:	ea43 030e 	orr.w	r3, r3, lr
 8000876:	fa20 fc0c 	lsr.w	ip, r0, ip
 800087a:	ea43 030c 	orr.w	r3, r3, ip
 800087e:	fa00 f206 	lsl.w	r2, r0, r6
 8000882:	e9c7 2302 	strd	r2, r3, [r7, #8]
    clockBits->secondsRing = mask;
 8000886:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800088a:	4614      	mov	r4, r2
 800088c:	f023 4570 	bic.w	r5, r3, #4026531840	@ 0xf0000000
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	601c      	str	r4, [r3, #0]
 8000894:	462a      	mov	r2, r5
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	2100      	movs	r1, #0
 800089a:	430a      	orrs	r2, r1
 800089c:	711a      	strb	r2, [r3, #4]
 800089e:	0a2a      	lsrs	r2, r5, #8
 80008a0:	b2d2      	uxtb	r2, r2
 80008a2:	2100      	movs	r1, #0
 80008a4:	430a      	orrs	r2, r1
 80008a6:	715a      	strb	r2, [r3, #5]
 80008a8:	0c2a      	lsrs	r2, r5, #16
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	2100      	movs	r1, #0
 80008ae:	430a      	orrs	r2, r1
 80008b0:	719a      	strb	r2, [r3, #6]
 80008b2:	0e2a      	lsrs	r2, r5, #24
 80008b4:	f002 020f 	and.w	r2, r2, #15
 80008b8:	f002 000f 	and.w	r0, r2, #15
 80008bc:	79da      	ldrb	r2, [r3, #7]
 80008be:	f022 020f 	bic.w	r2, r2, #15
 80008c2:	4611      	mov	r1, r2
 80008c4:	4602      	mov	r2, r0
 80008c6:	430a      	orrs	r2, r1
 80008c8:	71da      	strb	r2, [r3, #7]
}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008d2 <SetSecondLedAccumulating>:

void SetSecondLedAccumulating(MyClockBitFields* clockBits, uint8_t second)
{
 80008d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 80008de:	78f9      	ldrb	r1, [r7, #3]
 80008e0:	293b      	cmp	r1, #59	@ 0x3b
 80008e2:	d901      	bls.n	80008e8 <SetSecondLedAccumulating+0x16>
 80008e4:	213b      	movs	r1, #59	@ 0x3b
 80008e6:	70f9      	strb	r1, [r7, #3]
    if (second == 0) {
 80008e8:	78f9      	ldrb	r1, [r7, #3]
 80008ea:	2900      	cmp	r1, #0
 80008ec:	d113      	bne.n	8000916 <SetSecondLedAccumulating+0x44>
        clockBits->secondsRing = 0ULL;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
 80008f4:	2200      	movs	r2, #0
 80008f6:	705a      	strb	r2, [r3, #1]
 80008f8:	2200      	movs	r2, #0
 80008fa:	709a      	strb	r2, [r3, #2]
 80008fc:	2200      	movs	r2, #0
 80008fe:	70da      	strb	r2, [r3, #3]
 8000900:	2200      	movs	r2, #0
 8000902:	711a      	strb	r2, [r3, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	715a      	strb	r2, [r3, #5]
 8000908:	2200      	movs	r2, #0
 800090a:	719a      	strb	r2, [r3, #6]
 800090c:	79da      	ldrb	r2, [r3, #7]
 800090e:	f022 020f 	bic.w	r2, r2, #15
 8000912:	71da      	strb	r2, [r3, #7]
    } else {
        clockBits->secondsRing |= (1ULL << second);
    }
}
 8000914:	e048      	b.n	80009a8 <SetSecondLedAccumulating+0xd6>
        clockBits->secondsRing |= (1ULL << second);
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	f8d1 a000 	ldr.w	sl, [r1]
 800091c:	7908      	ldrb	r0, [r1, #4]
 800091e:	794e      	ldrb	r6, [r1, #5]
 8000920:	0236      	lsls	r6, r6, #8
 8000922:	4330      	orrs	r0, r6
 8000924:	798e      	ldrb	r6, [r1, #6]
 8000926:	0436      	lsls	r6, r6, #16
 8000928:	4330      	orrs	r0, r6
 800092a:	79c9      	ldrb	r1, [r1, #7]
 800092c:	f001 010f 	and.w	r1, r1, #15
 8000930:	0609      	lsls	r1, r1, #24
 8000932:	4301      	orrs	r1, r0
 8000934:	468b      	mov	fp, r1
 8000936:	78fe      	ldrb	r6, [r7, #3]
 8000938:	f04f 0001 	mov.w	r0, #1
 800093c:	f04f 0100 	mov.w	r1, #0
 8000940:	f1a6 0e20 	sub.w	lr, r6, #32
 8000944:	f1c6 0c20 	rsb	ip, r6, #32
 8000948:	fa01 f306 	lsl.w	r3, r1, r6
 800094c:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000950:	ea43 030e 	orr.w	r3, r3, lr
 8000954:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000958:	ea43 030c 	orr.w	r3, r3, ip
 800095c:	fa00 f206 	lsl.w	r2, r0, r6
 8000960:	ea4a 0802 	orr.w	r8, sl, r2
 8000964:	ea4b 0903 	orr.w	r9, fp, r3
 8000968:	4644      	mov	r4, r8
 800096a:	f029 4570 	bic.w	r5, r9, #4026531840	@ 0xf0000000
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	601c      	str	r4, [r3, #0]
 8000972:	462a      	mov	r2, r5
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	2100      	movs	r1, #0
 8000978:	430a      	orrs	r2, r1
 800097a:	711a      	strb	r2, [r3, #4]
 800097c:	0a2a      	lsrs	r2, r5, #8
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	2100      	movs	r1, #0
 8000982:	430a      	orrs	r2, r1
 8000984:	715a      	strb	r2, [r3, #5]
 8000986:	0c2a      	lsrs	r2, r5, #16
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	2100      	movs	r1, #0
 800098c:	430a      	orrs	r2, r1
 800098e:	719a      	strb	r2, [r3, #6]
 8000990:	0e2a      	lsrs	r2, r5, #24
 8000992:	f002 020f 	and.w	r2, r2, #15
 8000996:	f002 000f 	and.w	r0, r2, #15
 800099a:	79da      	ldrb	r2, [r3, #7]
 800099c:	f022 020f 	bic.w	r2, r2, #15
 80009a0:	4611      	mov	r1, r2
 80009a2:	4602      	mov	r2, r0
 80009a4:	430a      	orrs	r2, r1
 80009a6:	71da      	strb	r2, [r3, #7]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080009b2 <SetSecondLedAccumulating2>:

void SetSecondLedAccumulating2(MyClockBitFields* clockBits, uint8_t second)
{
 80009b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 80009be:	78f9      	ldrb	r1, [r7, #3]
 80009c0:	293b      	cmp	r1, #59	@ 0x3b
 80009c2:	d901      	bls.n	80009c8 <SetSecondLedAccumulating2+0x16>
 80009c4:	213b      	movs	r1, #59	@ 0x3b
 80009c6:	70f9      	strb	r1, [r7, #3]
    clockBits->secondsRing = 0ULL;
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	2000      	movs	r0, #0
 80009cc:	7008      	strb	r0, [r1, #0]
 80009ce:	2000      	movs	r0, #0
 80009d0:	7048      	strb	r0, [r1, #1]
 80009d2:	2000      	movs	r0, #0
 80009d4:	7088      	strb	r0, [r1, #2]
 80009d6:	2000      	movs	r0, #0
 80009d8:	70c8      	strb	r0, [r1, #3]
 80009da:	2000      	movs	r0, #0
 80009dc:	7108      	strb	r0, [r1, #4]
 80009de:	2000      	movs	r0, #0
 80009e0:	7148      	strb	r0, [r1, #5]
 80009e2:	2000      	movs	r0, #0
 80009e4:	7188      	strb	r0, [r1, #6]
 80009e6:	79c8      	ldrb	r0, [r1, #7]
 80009e8:	f020 000f 	bic.w	r0, r0, #15
 80009ec:	71c8      	strb	r0, [r1, #7]
    for (uint8_t i = 0; i <= second; i++) {
 80009ee:	2100      	movs	r1, #0
 80009f0:	73f9      	strb	r1, [r7, #15]
 80009f2:	e04b      	b.n	8000a8c <SetSecondLedAccumulating2+0xda>
        clockBits->secondsRing |= (1ULL << i);
 80009f4:	6879      	ldr	r1, [r7, #4]
 80009f6:	f8d1 a000 	ldr.w	sl, [r1]
 80009fa:	7908      	ldrb	r0, [r1, #4]
 80009fc:	794e      	ldrb	r6, [r1, #5]
 80009fe:	0236      	lsls	r6, r6, #8
 8000a00:	4330      	orrs	r0, r6
 8000a02:	798e      	ldrb	r6, [r1, #6]
 8000a04:	0436      	lsls	r6, r6, #16
 8000a06:	4330      	orrs	r0, r6
 8000a08:	79c9      	ldrb	r1, [r1, #7]
 8000a0a:	f001 010f 	and.w	r1, r1, #15
 8000a0e:	0609      	lsls	r1, r1, #24
 8000a10:	4301      	orrs	r1, r0
 8000a12:	468b      	mov	fp, r1
 8000a14:	7bfe      	ldrb	r6, [r7, #15]
 8000a16:	f04f 0001 	mov.w	r0, #1
 8000a1a:	f04f 0100 	mov.w	r1, #0
 8000a1e:	f1a6 0e20 	sub.w	lr, r6, #32
 8000a22:	f1c6 0c20 	rsb	ip, r6, #32
 8000a26:	fa01 f306 	lsl.w	r3, r1, r6
 8000a2a:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000a2e:	ea43 030e 	orr.w	r3, r3, lr
 8000a32:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a36:	ea43 030c 	orr.w	r3, r3, ip
 8000a3a:	fa00 f206 	lsl.w	r2, r0, r6
 8000a3e:	ea4a 0802 	orr.w	r8, sl, r2
 8000a42:	ea4b 0903 	orr.w	r9, fp, r3
 8000a46:	4644      	mov	r4, r8
 8000a48:	f029 4570 	bic.w	r5, r9, #4026531840	@ 0xf0000000
 8000a4c:	6879      	ldr	r1, [r7, #4]
 8000a4e:	600c      	str	r4, [r1, #0]
 8000a50:	4628      	mov	r0, r5
 8000a52:	b2c0      	uxtb	r0, r0
 8000a54:	2600      	movs	r6, #0
 8000a56:	4330      	orrs	r0, r6
 8000a58:	7108      	strb	r0, [r1, #4]
 8000a5a:	0a28      	lsrs	r0, r5, #8
 8000a5c:	b2c0      	uxtb	r0, r0
 8000a5e:	2600      	movs	r6, #0
 8000a60:	4330      	orrs	r0, r6
 8000a62:	7148      	strb	r0, [r1, #5]
 8000a64:	0c28      	lsrs	r0, r5, #16
 8000a66:	b2c0      	uxtb	r0, r0
 8000a68:	2600      	movs	r6, #0
 8000a6a:	4330      	orrs	r0, r6
 8000a6c:	7188      	strb	r0, [r1, #6]
 8000a6e:	0e28      	lsrs	r0, r5, #24
 8000a70:	f000 000f 	and.w	r0, r0, #15
 8000a74:	f000 0c0f 	and.w	ip, r0, #15
 8000a78:	79c8      	ldrb	r0, [r1, #7]
 8000a7a:	f020 000f 	bic.w	r0, r0, #15
 8000a7e:	4606      	mov	r6, r0
 8000a80:	4660      	mov	r0, ip
 8000a82:	4330      	orrs	r0, r6
 8000a84:	71c8      	strb	r0, [r1, #7]
    for (uint8_t i = 0; i <= second; i++) {
 8000a86:	7bf9      	ldrb	r1, [r7, #15]
 8000a88:	3101      	adds	r1, #1
 8000a8a:	73f9      	strb	r1, [r7, #15]
 8000a8c:	7bf8      	ldrb	r0, [r7, #15]
 8000a8e:	78f9      	ldrb	r1, [r7, #3]
 8000a90:	4288      	cmp	r0, r1
 8000a92:	d9af      	bls.n	80009f4 <SetSecondLedAccumulating2+0x42>
    }
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000aa0 <SetHourRing>:
    SetDots(clockBits, true, true);
  }
}

void SetHourRing(MyClockBitFields* clockBits, uint8_t hour, bool outerRing, bool innerRing)
{
 8000aa0:	b490      	push	{r4, r7}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	4611      	mov	r1, r2
 8000aac:	461a      	mov	r2, r3
 8000aae:	4603      	mov	r3, r0
 8000ab0:	70fb      	strb	r3, [r7, #3]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	70bb      	strb	r3, [r7, #2]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	707b      	strb	r3, [r7, #1]
  uint8_t h12 = hour % 12;
 8000aba:	78fa      	ldrb	r2, [r7, #3]
 8000abc:	4b2a      	ldr	r3, [pc, #168]	@ (8000b68 <SetHourRing+0xc8>)
 8000abe:	fba3 1302 	umull	r1, r3, r3, r2
 8000ac2:	08d9      	lsrs	r1, r3, #3
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	440b      	add	r3, r1
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	73fb      	strb	r3, [r7, #15]
  if (outerRing)
 8000ad0:	78bb      	ldrb	r3, [r7, #2]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d018      	beq.n	8000b08 <SetHourRing+0x68>
    clockBits->hoursRingOuter = (1U << h12);
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	2201      	movs	r2, #1
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f002 010f 	and.w	r1, r2, #15
 8000aea:	010c      	lsls	r4, r1, #4
 8000aec:	79d9      	ldrb	r1, [r3, #7]
 8000aee:	f001 010f 	and.w	r1, r1, #15
 8000af2:	4608      	mov	r0, r1
 8000af4:	4621      	mov	r1, r4
 8000af6:	4301      	orrs	r1, r0
 8000af8:	71d9      	strb	r1, [r3, #7]
 8000afa:	0912      	lsrs	r2, r2, #4
 8000afc:	b292      	uxth	r2, r2
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	2100      	movs	r1, #0
 8000b02:	430a      	orrs	r2, r1
 8000b04:	721a      	strb	r2, [r3, #8]
 8000b06:	e006      	b.n	8000b16 <SetHourRing+0x76>
  else
    clockBits->hoursRingOuter = 0;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	79da      	ldrb	r2, [r3, #7]
 8000b0c:	f002 020f 	and.w	r2, r2, #15
 8000b10:	71da      	strb	r2, [r3, #7]
 8000b12:	2200      	movs	r2, #0
 8000b14:	721a      	strb	r2, [r3, #8]

  if (innerRing)
 8000b16:	787b      	ldrb	r3, [r7, #1]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d019      	beq.n	8000b50 <SetHourRing+0xb0>
    clockBits->hoursRingInner = (1U << h12);
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	2201      	movs	r2, #1
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	b2d1      	uxtb	r1, r2
 8000b2e:	2000      	movs	r0, #0
 8000b30:	4301      	orrs	r1, r0
 8000b32:	7259      	strb	r1, [r3, #9]
 8000b34:	0a12      	lsrs	r2, r2, #8
 8000b36:	b292      	uxth	r2, r2
 8000b38:	f002 020f 	and.w	r2, r2, #15
 8000b3c:	f002 000f 	and.w	r0, r2, #15
 8000b40:	7a9a      	ldrb	r2, [r3, #10]
 8000b42:	f022 020f 	bic.w	r2, r2, #15
 8000b46:	4611      	mov	r1, r2
 8000b48:	4602      	mov	r2, r0
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	729a      	strb	r2, [r3, #10]
  else
    clockBits->hoursRingInner = 0;
}
 8000b4e:	e006      	b.n	8000b5e <SetHourRing+0xbe>
    clockBits->hoursRingInner = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	725a      	strb	r2, [r3, #9]
 8000b56:	7a9a      	ldrb	r2, [r3, #10]
 8000b58:	f022 020f 	bic.w	r2, r2, #15
 8000b5c:	729a      	strb	r2, [r3, #10]
}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc90      	pop	{r4, r7}
 8000b66:	4770      	bx	lr
 8000b68:	aaaaaaab 	.word	0xaaaaaaab

08000b6c <SetTime7Seg_Top>:

/**
 * Ustawia 6 wyświetlaczy 7-seg (top lub bottom) na HH:MM:SS
 */
void SetTime7Seg_Top(MyClockBitFields* clockBits, uint8_t h, uint8_t m, uint8_t s)
{
 8000b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b70:	b09d      	sub	sp, #116	@ 0x74
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8000b76:	4618      	mov	r0, r3
 8000b78:	460b      	mov	r3, r1
 8000b7a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8000b7e:	4613      	mov	r3, r2
 8000b80:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8000b84:	4603      	mov	r3, r0
 8000b86:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

	  // Bufor na segmenty wyświetlacza (6 pozycji)
	    uint8_t backBuffer[6] = {0};
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	    // Obsługa godzin
	    if (h < 10) {
 8000b94:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000b98:	2b09      	cmp	r3, #9
 8000b9a:	d80d      	bhi.n	8000bb8 <SetTime7Seg_Top+0x4c>
	        backBuffer[0] = segmentMap[10]; // Puste dziesiątki godzin
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = charToSegment('0' + h); // Jednostki godzin
 8000ba2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000ba6:	3330      	adds	r3, #48	@ 0x30
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fd20 	bl	80005f0 <charToSegment>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
 8000bb6:	e022      	b.n	8000bfe <SetTime7Seg_Top+0x92>
	    } else {
	        backBuffer[0] = charToSegment('0' + (h / 10)); // Dziesiątki godzin
 8000bb8:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000bbc:	4b87      	ldr	r3, [pc, #540]	@ (8000ddc <SetTime7Seg_Top+0x270>)
 8000bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8000bc2:	08db      	lsrs	r3, r3, #3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	3330      	adds	r3, #48	@ 0x30
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fd10 	bl	80005f0 <charToSegment>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = charToSegment('0' + (h % 10)); // Jednostki godzin
 8000bd6:	f897 105b 	ldrb.w	r1, [r7, #91]	@ 0x5b
 8000bda:	4b80      	ldr	r3, [pc, #512]	@ (8000ddc <SetTime7Seg_Top+0x270>)
 8000bdc:	fba3 2301 	umull	r2, r3, r3, r1
 8000be0:	08da      	lsrs	r2, r3, #3
 8000be2:	4613      	mov	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	1acb      	subs	r3, r1, r3
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	3330      	adds	r3, #48	@ 0x30
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fcfc 	bl	80005f0 <charToSegment>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	    }

	    // Obsługa minut
	    backBuffer[2] = charToSegment('0' + (m / 10)); // Dziesiątki minut
 8000bfe:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8000c02:	4b76      	ldr	r3, [pc, #472]	@ (8000ddc <SetTime7Seg_Top+0x270>)
 8000c04:	fba3 2302 	umull	r2, r3, r3, r2
 8000c08:	08db      	lsrs	r3, r3, #3
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	3330      	adds	r3, #48	@ 0x30
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fced 	bl	80005f0 <charToSegment>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	    backBuffer[3] = charToSegment('0' + (m % 10)); // Jednostki minut
 8000c1c:	f897 105a 	ldrb.w	r1, [r7, #90]	@ 0x5a
 8000c20:	4b6e      	ldr	r3, [pc, #440]	@ (8000ddc <SetTime7Seg_Top+0x270>)
 8000c22:	fba3 2301 	umull	r2, r3, r3, r1
 8000c26:	08da      	lsrs	r2, r3, #3
 8000c28:	4613      	mov	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	1acb      	subs	r3, r1, r3
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	3330      	adds	r3, #48	@ 0x30
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fcd9 	bl	80005f0 <charToSegment>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	    // Obsługa sekund
	    backBuffer[4] = charToSegment('0' + (s / 10)); // Dziesiątki sekund
 8000c44:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8000c48:	4b64      	ldr	r3, [pc, #400]	@ (8000ddc <SetTime7Seg_Top+0x270>)
 8000c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8000c4e:	08db      	lsrs	r3, r3, #3
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	3330      	adds	r3, #48	@ 0x30
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fcca 	bl	80005f0 <charToSegment>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	    backBuffer[5] = charToSegment('0' + (s % 10)); // Jednostki sekund
 8000c62:	f897 1059 	ldrb.w	r1, [r7, #89]	@ 0x59
 8000c66:	4b5d      	ldr	r3, [pc, #372]	@ (8000ddc <SetTime7Seg_Top+0x270>)
 8000c68:	fba3 2301 	umull	r2, r3, r3, r1
 8000c6c:	08da      	lsrs	r2, r3, #3
 8000c6e:	4613      	mov	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	1acb      	subs	r3, r1, r3
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	3330      	adds	r3, #48	@ 0x30
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fcb6 	bl	80005f0 <charToSegment>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	    // Zbudowanie wartości 48-bitowej na podstawie bufora
	    uint64_t displayVal = 0ULL;
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[5] << 40);
 8000c96:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8000ca0:	657a      	str	r2, [r7, #84]	@ 0x54
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	f04f 0100 	mov.w	r1, #0
 8000caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000cac:	0219      	lsls	r1, r3, #8
 8000cae:	2000      	movs	r0, #0
 8000cb0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000cb4:	ea42 0600 	orr.w	r6, r2, r0
 8000cb8:	62be      	str	r6, [r7, #40]	@ 0x28
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000cc2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[4] << 32);
 8000cc6:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2200      	movs	r2, #0
 8000cce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000cd0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	f04f 0100 	mov.w	r1, #0
 8000cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000cdc:	0019      	movs	r1, r3
 8000cde:	2000      	movs	r0, #0
 8000ce0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000ce4:	ea42 0600 	orr.w	r6, r2, r0
 8000ce8:	623e      	str	r6, [r7, #32]
 8000cea:	430b      	orrs	r3, r1
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000cf2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[0] << 24);
 8000cf6:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	643b      	str	r3, [r7, #64]	@ 0x40
 8000d00:	647a      	str	r2, [r7, #68]	@ 0x44
 8000d02:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8000d06:	460b      	mov	r3, r1
 8000d08:	0a1d      	lsrs	r5, r3, #8
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	061c      	lsls	r4, r3, #24
 8000d0e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000d12:	ea42 0104 	orr.w	r1, r2, r4
 8000d16:	61b9      	str	r1, [r7, #24]
 8000d18:	432b      	orrs	r3, r5
 8000d1a:	61fb      	str	r3, [r7, #28]
 8000d1c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000d20:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[1] << 16);
 8000d24:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	4698      	mov	r8, r3
 8000d2e:	4691      	mov	r9, r2
 8000d30:	f04f 0000 	mov.w	r0, #0
 8000d34:	f04f 0100 	mov.w	r1, #0
 8000d38:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8000d3c:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8000d40:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8000d44:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000d48:	ea42 0400 	orr.w	r4, r2, r0
 8000d4c:	613c      	str	r4, [r7, #16]
 8000d4e:	430b      	orrs	r3, r1
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000d56:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[2] << 8);
 8000d5a:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2200      	movs	r2, #0
 8000d62:	469a      	mov	sl, r3
 8000d64:	4693      	mov	fp, r2
 8000d66:	f04f 0200 	mov.w	r2, #0
 8000d6a:	f04f 0300 	mov.w	r3, #0
 8000d6e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8000d72:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8000d76:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8000d7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8000d7e:	ea40 0402 	orr.w	r4, r0, r2
 8000d82:	60bc      	str	r4, [r7, #8]
 8000d84:	430b      	orrs	r3, r1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000d8c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[3] << 0);
 8000d90:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2200      	movs	r2, #0
 8000d98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000d9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000d9c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000da0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8000da4:	4621      	mov	r1, r4
 8000da6:	4311      	orrs	r1, r2
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	4629      	mov	r1, r5
 8000dac:	4319      	orrs	r1, r3
 8000dae:	6079      	str	r1, [r7, #4]
 8000db0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000db4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68

	    clockBits->topDisplay = displayVal;
 8000db8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000dbc:	633a      	str	r2, [r7, #48]	@ 0x30
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000dc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000dc4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000dc8:	4602      	mov	r2, r0
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	460a      	mov	r2, r1
 8000dce:	821a      	strh	r2, [r3, #16]
}
 8000dd0:	bf00      	nop
 8000dd2:	3774      	adds	r7, #116	@ 0x74
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dda:	bf00      	nop
 8000ddc:	cccccccd 	.word	0xcccccccd

08000de0 <Set7Seg_DisplayLargeNumber>:
	    displayVal |= ((uint64_t)backBuffer[0] << 0);

	    clockBits->bottomDisplay = displayVal;
}

void Set7Seg_DisplayLargeNumber(MyClockBitFields* clockBits, uint64_t number) {
 8000de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000de4:	b0a1      	sub	sp, #132	@ 0x84
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6678      	str	r0, [r7, #100]	@ 0x64
 8000dea:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    // Bufor na segmenty wyświetlacza (6 pozycji)
    uint8_t backBuffer[6] = {0};
 8000dee:	2300      	movs	r3, #0
 8000df0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

    // Rozbicie liczby na cyfry i zapis do bufora od końca
    for (int i = 5; i >= 0; i--) {
 8000df8:	2305      	movs	r3, #5
 8000dfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000dfc:	e030      	b.n	8000e60 <Set7Seg_DisplayLargeNumber+0x80>
        if (number > 0) {
 8000dfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000e02:	4313      	orrs	r3, r2
 8000e04:	d022      	beq.n	8000e4c <Set7Seg_DisplayLargeNumber+0x6c>
            backBuffer[i] = charToSegment('0' + (number % 10));
 8000e06:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8000e0a:	f04f 020a 	mov.w	r2, #10
 8000e0e:	f04f 0300 	mov.w	r3, #0
 8000e12:	f7ff f9df 	bl	80001d4 <__aeabi_uldivmod>
 8000e16:	b2d3      	uxtb	r3, r2
 8000e18:	3330      	adds	r3, #48	@ 0x30
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fbe7 	bl	80005f0 <charToSegment>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4619      	mov	r1, r3
 8000e26:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8000e2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e2c:	441a      	add	r2, r3
 8000e2e:	460b      	mov	r3, r1
 8000e30:	7013      	strb	r3, [r2, #0]
            number /= 10;
 8000e32:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8000e36:	f04f 020a 	mov.w	r2, #10
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	f7ff f9c9 	bl	80001d4 <__aeabi_uldivmod>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8000e4a:	e006      	b.n	8000e5a <Set7Seg_DisplayLargeNumber+0x7a>
        } else {
            backBuffer[i] = segmentMap[10]; // Puste miejsce
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8000e52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e54:	441a      	add	r2, r3
 8000e56:	460b      	mov	r3, r1
 8000e58:	7013      	strb	r3, [r2, #0]
    for (int i = 5; i >= 0; i--) {
 8000e5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000e60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	dacb      	bge.n	8000dfe <Set7Seg_DisplayLargeNumber+0x1e>
        }
    }

    // Zbudowanie wartości 48-bitowej na podstawie bufora
    uint64_t displayVal = 0ULL;
 8000e66:	f04f 0200 	mov.w	r2, #0
 8000e6a:	f04f 0300 	mov.w	r3, #0
 8000e6e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)backBuffer[5] << 40);
 8000e72:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2200      	movs	r2, #0
 8000e7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8000e7c:	657a      	str	r2, [r7, #84]	@ 0x54
 8000e7e:	f04f 0000 	mov.w	r0, #0
 8000e82:	f04f 0100 	mov.w	r1, #0
 8000e86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e88:	0219      	lsls	r1, r3, #8
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000e90:	ea42 0600 	orr.w	r6, r2, r0
 8000e94:	62be      	str	r6, [r7, #40]	@ 0x28
 8000e96:	430b      	orrs	r3, r1
 8000e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000e9e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)backBuffer[4] << 32);
 8000ea2:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000eac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000eae:	f04f 0000 	mov.w	r0, #0
 8000eb2:	f04f 0100 	mov.w	r1, #0
 8000eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000eb8:	0019      	movs	r1, r3
 8000eba:	2000      	movs	r0, #0
 8000ebc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000ec0:	ea42 0600 	orr.w	r6, r2, r0
 8000ec4:	623e      	str	r6, [r7, #32]
 8000ec6:	430b      	orrs	r3, r1
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ece:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)backBuffer[3] << 24);
 8000ed2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2200      	movs	r2, #0
 8000eda:	643b      	str	r3, [r7, #64]	@ 0x40
 8000edc:	647a      	str	r2, [r7, #68]	@ 0x44
 8000ede:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	0a1d      	lsrs	r5, r3, #8
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	061c      	lsls	r4, r3, #24
 8000eea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000eee:	ea42 0104 	orr.w	r1, r2, r4
 8000ef2:	61b9      	str	r1, [r7, #24]
 8000ef4:	432b      	orrs	r3, r5
 8000ef6:	61fb      	str	r3, [r7, #28]
 8000ef8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000efc:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)backBuffer[2] << 16);
 8000f00:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2200      	movs	r2, #0
 8000f08:	4698      	mov	r8, r3
 8000f0a:	4691      	mov	r9, r2
 8000f0c:	f04f 0000 	mov.w	r0, #0
 8000f10:	f04f 0100 	mov.w	r1, #0
 8000f14:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8000f18:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8000f1c:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8000f20:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000f24:	ea42 0400 	orr.w	r4, r2, r0
 8000f28:	613c      	str	r4, [r7, #16]
 8000f2a:	430b      	orrs	r3, r1
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000f32:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)backBuffer[1]<< 8);
 8000f36:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	469a      	mov	sl, r3
 8000f40:	4693      	mov	fp, r2
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8000f4e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8000f52:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8000f56:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000f5a:	ea40 0402 	orr.w	r4, r0, r2
 8000f5e:	60bc      	str	r4, [r7, #8]
 8000f60:	430b      	orrs	r3, r1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000f68:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)backBuffer[0] << 0);
 8000f6c:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2200      	movs	r2, #0
 8000f74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f76:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000f78:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000f7c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8000f80:	4621      	mov	r1, r4
 8000f82:	4311      	orrs	r1, r2
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	4629      	mov	r1, r5
 8000f88:	4319      	orrs	r1, r3
 8000f8a:	6079      	str	r1, [r7, #4]
 8000f8c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f90:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    // Zapis do struktury
    clockBits->bottomDisplay = displayVal;
 8000f94:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000f98:	633a      	str	r2, [r7, #48]	@ 0x30
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fa0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f8c3 2012 	str.w	r2, [r3, #18]
 8000faa:	460a      	mov	r2, r1
 8000fac:	82da      	strh	r2, [r3, #22]
}
 8000fae:	bf00      	nop
 8000fb0:	3784      	adds	r7, #132	@ 0x84
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000fb8 <UpdateAllDisplays>:




void UpdateAllDisplays(const MyClockBitFields* clockBits)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    // Sprawdź, czy SPI jest zajęte
    if (spiTransferInProgress) {
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <UpdateAllDisplays+0x7c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d130      	bne.n	800102c <UpdateAllDisplays+0x74>
        return;
    }

    spiTransferInProgress = true;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <UpdateAllDisplays+0x7c>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]

    static uint8_t spiTxBuffer[24];
    memset(spiTxBuffer, 0, sizeof(spiTxBuffer));
 8000fd0:	2218      	movs	r2, #24
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4818      	ldr	r0, [pc, #96]	@ (8001038 <UpdateAllDisplays+0x80>)
 8000fd6:	f005 fbe7 	bl	80067a8 <memset>

    const uint8_t* p = (const uint8_t*)clockBits;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]
    int byteIndex = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]

    for (int partIndex = 11; partIndex >= 0; partIndex--)
 8000fe2:	230b      	movs	r3, #11
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	e018      	b.n	800101a <UpdateAllDisplays+0x62>
    {
        spiTxBuffer[byteIndex++] = p[2 * partIndex + 1];
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	3301      	adds	r3, #1
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	441a      	add	r2, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	1c59      	adds	r1, r3, #1
 8000ff6:	6179      	str	r1, [r7, #20]
 8000ff8:	7811      	ldrb	r1, [r2, #0]
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	@ (8001038 <UpdateAllDisplays+0x80>)
 8000ffc:	54d1      	strb	r1, [r2, r3]
        spiTxBuffer[byteIndex++] = p[2 * partIndex + 0];
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	461a      	mov	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	441a      	add	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	1c59      	adds	r1, r3, #1
 800100c:	6179      	str	r1, [r7, #20]
 800100e:	7811      	ldrb	r1, [r2, #0]
 8001010:	4a09      	ldr	r2, [pc, #36]	@ (8001038 <UpdateAllDisplays+0x80>)
 8001012:	54d1      	strb	r1, [r2, r3]
    for (int partIndex = 11; partIndex >= 0; partIndex--)
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	3b01      	subs	r3, #1
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	2b00      	cmp	r3, #0
 800101e:	dae3      	bge.n	8000fe8 <UpdateAllDisplays+0x30>
    }

    HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 24);
 8001020:	2218      	movs	r2, #24
 8001022:	4905      	ldr	r1, [pc, #20]	@ (8001038 <UpdateAllDisplays+0x80>)
 8001024:	4805      	ldr	r0, [pc, #20]	@ (800103c <UpdateAllDisplays+0x84>)
 8001026:	f003 ff99 	bl	8004f5c <HAL_SPI_Transmit_DMA>
 800102a:	e000      	b.n	800102e <UpdateAllDisplays+0x76>
        return;
 800102c:	bf00      	nop
}
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000070 	.word	0x20000070
 8001038:	20000074 	.word	0x20000074
 800103c:	200001f4 	.word	0x200001f4

08001040 <SetPWMPercentGamma>:
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
  uint32_t compare_value = (period + 1) - ((period + 1) * percent / 100);
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
}

void SetPWMPercentGamma(uint8_t percent) {
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if (percent > 100) {
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b64      	cmp	r3, #100	@ 0x64
 800104e:	d901      	bls.n	8001054 <SetPWMPercentGamma+0x14>
      percent = 100;
 8001050:	2364      	movs	r3, #100	@ 0x64
 8001052:	71fb      	strb	r3, [r7, #7]
  }
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8001054:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <SetPWMPercentGamma+0x4c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800105a:	617b      	str	r3, [r7, #20]
  uint8_t gamma_percent = gamma_table[percent];
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4a0c      	ldr	r2, [pc, #48]	@ (8001090 <SetPWMPercentGamma+0x50>)
 8001060:	5cd3      	ldrb	r3, [r2, r3]
 8001062:	74fb      	strb	r3, [r7, #19]
  uint32_t compare_value = (period + 1) * gamma_percent / 100;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	3301      	adds	r3, #1
 8001068:	7cfa      	ldrb	r2, [r7, #19]
 800106a:	fb02 f303 	mul.w	r3, r2, r3
 800106e:	4a09      	ldr	r2, [pc, #36]	@ (8001094 <SetPWMPercentGamma+0x54>)
 8001070:	fba2 2303 	umull	r2, r3, r2, r3
 8001074:	095b      	lsrs	r3, r3, #5
 8001076:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
 8001078:	4b04      	ldr	r3, [pc, #16]	@ (800108c <SetPWMPercentGamma+0x4c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001080:	bf00      	nop
 8001082:	371c      	adds	r7, #28
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	200002ac 	.word	0x200002ac
 8001090:	08006844 	.word	0x08006844
 8001094:	51eb851f 	.word	0x51eb851f

08001098 <SetSecondLedEvenOdd>:
        HAL_Delay(50);
    }
}

void SetSecondLedEvenOdd(MyClockBitFields* clockBits, uint8_t second, uint8_t minute)
{
 8001098:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800109c:	b08c      	sub	sp, #48	@ 0x30
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80010a2:	460b      	mov	r3, r1
 80010a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80010a8:	4613      	mov	r3, r2
 80010aa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (second >= 60) {
 80010ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010b2:	2b3b      	cmp	r3, #59	@ 0x3b
 80010b4:	d902      	bls.n	80010bc <SetSecondLedEvenOdd+0x24>
        second = 59;
 80010b6:	233b      	movs	r3, #59	@ 0x3b
 80010b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
    if ((minute % 2) == 0)
 80010bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d178      	bne.n	80011bc <SetSecondLedEvenOdd+0x124>
    {
        clockBits->secondsRing = 0ULL;
 80010ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	705a      	strb	r2, [r3, #1]
 80010d4:	2200      	movs	r2, #0
 80010d6:	709a      	strb	r2, [r3, #2]
 80010d8:	2200      	movs	r2, #0
 80010da:	70da      	strb	r2, [r3, #3]
 80010dc:	2200      	movs	r2, #0
 80010de:	711a      	strb	r2, [r3, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	715a      	strb	r2, [r3, #5]
 80010e4:	2200      	movs	r2, #0
 80010e6:	719a      	strb	r2, [r3, #6]
 80010e8:	79da      	ldrb	r2, [r3, #7]
 80010ea:	f022 020f 	bic.w	r2, r2, #15
 80010ee:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = 0; i <= second; i++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80010f6:	e05a      	b.n	80011ae <SetSecondLedEvenOdd+0x116>
        {
            clockBits->secondsRing |= (1ULL << i);
 80010f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	791a      	ldrb	r2, [r3, #4]
 80010fe:	795c      	ldrb	r4, [r3, #5]
 8001100:	0224      	lsls	r4, r4, #8
 8001102:	4322      	orrs	r2, r4
 8001104:	799c      	ldrb	r4, [r3, #6]
 8001106:	0424      	lsls	r4, r4, #16
 8001108:	4322      	orrs	r2, r4
 800110a:	79db      	ldrb	r3, [r3, #7]
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	061b      	lsls	r3, r3, #24
 8001112:	4313      	orrs	r3, r2
 8001114:	4619      	mov	r1, r3
 8001116:	4680      	mov	r8, r0
 8001118:	4689      	mov	r9, r1
 800111a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800111e:	f04f 0201 	mov.w	r2, #1
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	f1a1 0420 	sub.w	r4, r1, #32
 800112a:	f1c1 0020 	rsb	r0, r1, #32
 800112e:	fa03 f601 	lsl.w	r6, r3, r1
 8001132:	fa02 f404 	lsl.w	r4, r2, r4
 8001136:	4326      	orrs	r6, r4
 8001138:	fa22 f000 	lsr.w	r0, r2, r0
 800113c:	4306      	orrs	r6, r0
 800113e:	fa02 f501 	lsl.w	r5, r2, r1
 8001142:	ea48 0305 	orr.w	r3, r8, r5
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	ea49 0306 	orr.w	r3, r9, r6
 800114c:	61fb      	str	r3, [r7, #28]
 800114e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001152:	460b      	mov	r3, r1
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4613      	mov	r3, r2
 8001158:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001160:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001164:	4642      	mov	r2, r8
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	464a      	mov	r2, r9
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	2100      	movs	r1, #0
 800116e:	430a      	orrs	r2, r1
 8001170:	711a      	strb	r2, [r3, #4]
 8001172:	464a      	mov	r2, r9
 8001174:	0a12      	lsrs	r2, r2, #8
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	2100      	movs	r1, #0
 800117a:	430a      	orrs	r2, r1
 800117c:	715a      	strb	r2, [r3, #5]
 800117e:	464a      	mov	r2, r9
 8001180:	0c12      	lsrs	r2, r2, #16
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	2100      	movs	r1, #0
 8001186:	430a      	orrs	r2, r1
 8001188:	719a      	strb	r2, [r3, #6]
 800118a:	464a      	mov	r2, r9
 800118c:	0e12      	lsrs	r2, r2, #24
 800118e:	f002 020f 	and.w	r2, r2, #15
 8001192:	f002 000f 	and.w	r0, r2, #15
 8001196:	79da      	ldrb	r2, [r3, #7]
 8001198:	f022 020f 	bic.w	r2, r2, #15
 800119c:	4611      	mov	r1, r2
 800119e:	4602      	mov	r2, r0
 80011a0:	430a      	orrs	r2, r1
 80011a2:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = 0; i <= second; i++)
 80011a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011a8:	3301      	adds	r3, #1
 80011aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011ae:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80011b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d99e      	bls.n	80010f8 <SetSecondLedEvenOdd+0x60>
        for (uint8_t i = second + 1; i < 60; i++)
        {
            clockBits->secondsRing |= (1ULL << i);
        }
    }
}
 80011ba:	e079      	b.n	80012b0 <SetSecondLedEvenOdd+0x218>
        clockBits->secondsRing = 0ULL;
 80011bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	2200      	movs	r2, #0
 80011c4:	705a      	strb	r2, [r3, #1]
 80011c6:	2200      	movs	r2, #0
 80011c8:	709a      	strb	r2, [r3, #2]
 80011ca:	2200      	movs	r2, #0
 80011cc:	70da      	strb	r2, [r3, #3]
 80011ce:	2200      	movs	r2, #0
 80011d0:	711a      	strb	r2, [r3, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	715a      	strb	r2, [r3, #5]
 80011d6:	2200      	movs	r2, #0
 80011d8:	719a      	strb	r2, [r3, #6]
 80011da:	79da      	ldrb	r2, [r3, #7]
 80011dc:	f022 020f 	bic.w	r2, r2, #15
 80011e0:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = second + 1; i < 60; i++)
 80011e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011e6:	3301      	adds	r3, #1
 80011e8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80011ec:	e05c      	b.n	80012a8 <SetSecondLedEvenOdd+0x210>
            clockBits->secondsRing |= (1ULL << i);
 80011ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	791a      	ldrb	r2, [r3, #4]
 80011f4:	795c      	ldrb	r4, [r3, #5]
 80011f6:	0224      	lsls	r4, r4, #8
 80011f8:	4322      	orrs	r2, r4
 80011fa:	799c      	ldrb	r4, [r3, #6]
 80011fc:	0424      	lsls	r4, r4, #16
 80011fe:	4322      	orrs	r2, r4
 8001200:	79db      	ldrb	r3, [r3, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	061b      	lsls	r3, r3, #24
 8001208:	4313      	orrs	r3, r2
 800120a:	4619      	mov	r1, r3
 800120c:	4680      	mov	r8, r0
 800120e:	4689      	mov	r9, r1
 8001210:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8001214:	f04f 0201 	mov.w	r2, #1
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	f1a1 0420 	sub.w	r4, r1, #32
 8001220:	f1c1 0020 	rsb	r0, r1, #32
 8001224:	fa03 fb01 	lsl.w	fp, r3, r1
 8001228:	fa02 f404 	lsl.w	r4, r2, r4
 800122c:	ea4b 0b04 	orr.w	fp, fp, r4
 8001230:	fa22 f000 	lsr.w	r0, r2, r0
 8001234:	ea4b 0b00 	orr.w	fp, fp, r0
 8001238:	fa02 fa01 	lsl.w	sl, r2, r1
 800123c:	ea48 030a 	orr.w	r3, r8, sl
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	ea49 030b 	orr.w	r3, r9, fp
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800124c:	460b      	mov	r3, r1
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	4613      	mov	r3, r2
 8001252:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800125e:	4622      	mov	r2, r4
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	462a      	mov	r2, r5
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	2100      	movs	r1, #0
 8001268:	430a      	orrs	r2, r1
 800126a:	711a      	strb	r2, [r3, #4]
 800126c:	462a      	mov	r2, r5
 800126e:	0a12      	lsrs	r2, r2, #8
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	2100      	movs	r1, #0
 8001274:	430a      	orrs	r2, r1
 8001276:	715a      	strb	r2, [r3, #5]
 8001278:	462a      	mov	r2, r5
 800127a:	0c12      	lsrs	r2, r2, #16
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	2100      	movs	r1, #0
 8001280:	430a      	orrs	r2, r1
 8001282:	719a      	strb	r2, [r3, #6]
 8001284:	462a      	mov	r2, r5
 8001286:	0e12      	lsrs	r2, r2, #24
 8001288:	f002 020f 	and.w	r2, r2, #15
 800128c:	f002 000f 	and.w	r0, r2, #15
 8001290:	79da      	ldrb	r2, [r3, #7]
 8001292:	f022 020f 	bic.w	r2, r2, #15
 8001296:	4611      	mov	r1, r2
 8001298:	4602      	mov	r2, r0
 800129a:	430a      	orrs	r2, r1
 800129c:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = second + 1; i < 60; i++)
 800129e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80012a2:	3301      	adds	r3, #1
 80012a4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80012a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80012ac:	2b3b      	cmp	r3, #59	@ 0x3b
 80012ae:	d99e      	bls.n	80011ee <SetSecondLedEvenOdd+0x156>
}
 80012b0:	bf00      	nop
 80012b2:	3730      	adds	r7, #48	@ 0x30
 80012b4:	46bd      	mov	sp, r7
 80012b6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80012ba:	4770      	bx	lr

080012bc <SetDots>:
//  if (dot2) val |= (1ULL << 1);
//
//  clockBits->dots = val;
//}

void SetDots(MyClockBitFields* clockBits, bool dot1, bool dot2) {
 80012bc:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80012c0:	b085      	sub	sp, #20
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	70fb      	strb	r3, [r7, #3]
 80012ca:	4613      	mov	r3, r2
 80012cc:	70bb      	strb	r3, [r7, #2]
  uint64_t val = 0ULL;
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (dot1) val |= (1ULL << 0);
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <SetDots+0x32>
 80012e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012e4:	f042 0801 	orr.w	r8, r2, #1
 80012e8:	4699      	mov	r9, r3
 80012ea:	e9c7 8902 	strd	r8, r9, [r7, #8]
  if (dot2) val |= (1ULL << 1);
 80012ee:	78bb      	ldrb	r3, [r7, #2]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d006      	beq.n	8001302 <SetDots+0x46>
 80012f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012f8:	f042 0402 	orr.w	r4, r2, #2
 80012fc:	461d      	mov	r5, r3
 80012fe:	e9c7 4502 	strd	r4, r5, [r7, #8]
  clockBits->dots = val;
 8001302:	7a3b      	ldrb	r3, [r7, #8]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	b2d9      	uxtb	r1, r3
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	7a93      	ldrb	r3, [r2, #10]
 800130e:	f361 1305 	bfi	r3, r1, #4, #2
 8001312:	7293      	strb	r3, [r2, #10]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800131e:	4770      	bx	lr

08001320 <SetHourRingCustom>:


void SetHourRingCustom(MyClockBitFields* clockBits, uint8_t outerMode, uint8_t innerMode)
{
 8001320:	b490      	push	{r4, r7}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
 800132c:	4613      	mov	r3, r2
 800132e:	70bb      	strb	r3, [r7, #2]
    // Maska dla pełnego pierścienia (wszystkie 12 godzin)
    uint16_t fullMask = 0x0FFF;  // 12-bitowy: bity 0-11 ustawione na 1
 8001330:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001334:	81fb      	strh	r3, [r7, #14]
    // Maska dla kwadransów: godziny 12 (bit 0), 3 (bit 3), 6 (bit 6), 9 (bit 9)
    uint16_t quarterMask = (1U << 0) | (1U << 3) | (1U << 6) | (1U << 9);
 8001336:	f240 2349 	movw	r3, #585	@ 0x249
 800133a:	81bb      	strh	r3, [r7, #12]

    // Ustawienia dla zewnętrznego pierścienia
    switch(outerMode)
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d002      	beq.n	8001348 <SetHourRingCustom+0x28>
 8001342:	2b02      	cmp	r3, #2
 8001344:	d016      	beq.n	8001374 <SetHourRingCustom+0x54>
 8001346:	e02b      	b.n	80013a0 <SetHourRingCustom+0x80>
    {
        case 1:
            clockBits->hoursRingOuter = fullMask;
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134e:	b29a      	uxth	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f002 010f 	and.w	r1, r2, #15
 8001356:	010c      	lsls	r4, r1, #4
 8001358:	79d9      	ldrb	r1, [r3, #7]
 800135a:	f001 010f 	and.w	r1, r1, #15
 800135e:	4608      	mov	r0, r1
 8001360:	4621      	mov	r1, r4
 8001362:	4301      	orrs	r1, r0
 8001364:	71d9      	strb	r1, [r3, #7]
 8001366:	0912      	lsrs	r2, r2, #4
 8001368:	b292      	uxth	r2, r2
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	2100      	movs	r1, #0
 800136e:	430a      	orrs	r2, r1
 8001370:	721a      	strb	r2, [r3, #8]
            break;
 8001372:	e01d      	b.n	80013b0 <SetHourRingCustom+0x90>
        case 2:
            clockBits->hoursRingOuter = quarterMask;
 8001374:	89bb      	ldrh	r3, [r7, #12]
 8001376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800137a:	b29a      	uxth	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f002 010f 	and.w	r1, r2, #15
 8001382:	010c      	lsls	r4, r1, #4
 8001384:	79d9      	ldrb	r1, [r3, #7]
 8001386:	f001 010f 	and.w	r1, r1, #15
 800138a:	4608      	mov	r0, r1
 800138c:	4621      	mov	r1, r4
 800138e:	4301      	orrs	r1, r0
 8001390:	71d9      	strb	r1, [r3, #7]
 8001392:	0912      	lsrs	r2, r2, #4
 8001394:	b292      	uxth	r2, r2
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	2100      	movs	r1, #0
 800139a:	430a      	orrs	r2, r1
 800139c:	721a      	strb	r2, [r3, #8]
            break;
 800139e:	e007      	b.n	80013b0 <SetHourRingCustom+0x90>
        default:  // dla wartości 0 i innych nieznanych – wyłącz
            clockBits->hoursRingOuter = 0;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	79da      	ldrb	r2, [r3, #7]
 80013a4:	f002 020f 	and.w	r2, r2, #15
 80013a8:	71da      	strb	r2, [r3, #7]
 80013aa:	2200      	movs	r2, #0
 80013ac:	721a      	strb	r2, [r3, #8]
            break;
 80013ae:	bf00      	nop
    }

    // Ustawienia dla wewnętrznego pierścienia
    switch(innerMode)
 80013b0:	78bb      	ldrb	r3, [r7, #2]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d002      	beq.n	80013bc <SetHourRingCustom+0x9c>
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d017      	beq.n	80013ea <SetHourRingCustom+0xca>
 80013ba:	e02d      	b.n	8001418 <SetHourRingCustom+0xf8>
    {
        case 1:
            clockBits->hoursRingInner = fullMask;
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	b2d1      	uxtb	r1, r2
 80013c8:	2000      	movs	r0, #0
 80013ca:	4301      	orrs	r1, r0
 80013cc:	7259      	strb	r1, [r3, #9]
 80013ce:	0a12      	lsrs	r2, r2, #8
 80013d0:	b292      	uxth	r2, r2
 80013d2:	f002 020f 	and.w	r2, r2, #15
 80013d6:	f002 000f 	and.w	r0, r2, #15
 80013da:	7a9a      	ldrb	r2, [r3, #10]
 80013dc:	f022 020f 	bic.w	r2, r2, #15
 80013e0:	4611      	mov	r1, r2
 80013e2:	4602      	mov	r2, r0
 80013e4:	430a      	orrs	r2, r1
 80013e6:	729a      	strb	r2, [r3, #10]
            break;
 80013e8:	e01e      	b.n	8001428 <SetHourRingCustom+0x108>
        case 2:
            clockBits->hoursRingInner = quarterMask;
 80013ea:	89bb      	ldrh	r3, [r7, #12]
 80013ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	b2d1      	uxtb	r1, r2
 80013f6:	2000      	movs	r0, #0
 80013f8:	4301      	orrs	r1, r0
 80013fa:	7259      	strb	r1, [r3, #9]
 80013fc:	0a12      	lsrs	r2, r2, #8
 80013fe:	b292      	uxth	r2, r2
 8001400:	f002 020f 	and.w	r2, r2, #15
 8001404:	f002 000f 	and.w	r0, r2, #15
 8001408:	7a9a      	ldrb	r2, [r3, #10]
 800140a:	f022 020f 	bic.w	r2, r2, #15
 800140e:	4611      	mov	r1, r2
 8001410:	4602      	mov	r2, r0
 8001412:	430a      	orrs	r2, r1
 8001414:	729a      	strb	r2, [r3, #10]
            break;
 8001416:	e007      	b.n	8001428 <SetHourRingCustom+0x108>
        default:  // dla wartości 0 i innych nieznanych – wyłącz
            clockBits->hoursRingInner = 0;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	725a      	strb	r2, [r3, #9]
 800141e:	7a9a      	ldrb	r2, [r3, #10]
 8001420:	f022 020f 	bic.w	r2, r2, #15
 8001424:	729a      	strb	r2, [r3, #10]
            break;
 8001426:	bf00      	nop
    }
}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bc90      	pop	{r4, r7}
 8001430:	4770      	bx	lr
	...

08001434 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <MX_DMA_Init+0x78>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a1a      	ldr	r2, [pc, #104]	@ (80014ac <MX_DMA_Init+0x78>)
 8001444:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <MX_DMA_Init+0x78>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	603b      	str	r3, [r7, #0]
 800145a:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <MX_DMA_Init+0x78>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a13      	ldr	r2, [pc, #76]	@ (80014ac <MX_DMA_Init+0x78>)
 8001460:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_DMA_Init+0x78>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	200d      	movs	r0, #13
 8001478:	f001 fde9 	bl	800304e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800147c:	200d      	movs	r0, #13
 800147e:	f001 fe02 	bl	8003086 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	202f      	movs	r0, #47	@ 0x2f
 8001488:	f001 fde1 	bl	800304e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800148c:	202f      	movs	r0, #47	@ 0x2f
 800148e:	f001 fdfa 	bl	8003086 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	203b      	movs	r0, #59	@ 0x3b
 8001498:	f001 fdd9 	bl	800304e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800149c:	203b      	movs	r0, #59	@ 0x3b
 800149e:	f001 fdf2 	bl	8003086 <HAL_NVIC_EnableIRQ>

}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800

080014b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	@ 0x28
 80014b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b2c      	ldr	r3, [pc, #176]	@ (800157c <MX_GPIO_Init+0xcc>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a2b      	ldr	r2, [pc, #172]	@ (800157c <MX_GPIO_Init+0xcc>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b29      	ldr	r3, [pc, #164]	@ (800157c <MX_GPIO_Init+0xcc>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b25      	ldr	r3, [pc, #148]	@ (800157c <MX_GPIO_Init+0xcc>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a24      	ldr	r2, [pc, #144]	@ (800157c <MX_GPIO_Init+0xcc>)
 80014ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b22      	ldr	r3, [pc, #136]	@ (800157c <MX_GPIO_Init+0xcc>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <MX_GPIO_Init+0xcc>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a1d      	ldr	r2, [pc, #116]	@ (800157c <MX_GPIO_Init+0xcc>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <MX_GPIO_Init+0xcc>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b17      	ldr	r3, [pc, #92]	@ (800157c <MX_GPIO_Init+0xcc>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a16      	ldr	r2, [pc, #88]	@ (800157c <MX_GPIO_Init+0xcc>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_GPIO_Init+0xcc>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2140      	movs	r1, #64	@ 0x40
 800153a:	4811      	ldr	r0, [pc, #68]	@ (8001580 <MX_GPIO_Init+0xd0>)
 800153c:	f002 fad4 	bl	8003ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_LATCH_Pin;
 8001540:	2340      	movs	r3, #64	@ 0x40
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	480a      	ldr	r0, [pc, #40]	@ (8001580 <MX_GPIO_Init+0xd0>)
 8001558:	f002 f942 	bl	80037e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 800155c:	2320      	movs	r3, #32
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001564:	2301      	movs	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4805      	ldr	r0, [pc, #20]	@ (8001584 <MX_GPIO_Init+0xd4>)
 8001570:	f002 f936 	bl	80037e0 <HAL_GPIO_Init>

}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	@ 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800
 8001580:	40020000 	.word	0x40020000
 8001584:	40020400 	.word	0x40020400

08001588 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <MX_I2C2_Init+0x50>)
 800158e:	4a13      	ldr	r2, [pc, #76]	@ (80015dc <MX_I2C2_Init+0x54>)
 8001590:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_I2C2_Init+0x50>)
 8001594:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <MX_I2C2_Init+0x58>)
 8001596:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <MX_I2C2_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MX_I2C2_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_I2C2_Init+0x50>)
 80015a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <MX_I2C2_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015b2:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_I2C2_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b8:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <MX_I2C2_Init+0x50>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_I2C2_Init+0x50>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	@ (80015d8 <MX_I2C2_Init+0x50>)
 80015c6:	f002 faa9 	bl	8003b1c <HAL_I2C_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015d0:	f000 fd0c 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000008c 	.word	0x2000008c
 80015dc:	40005800 	.word	0x40005800
 80015e0:	000186a0 	.word	0x000186a0

080015e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	@ 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a50      	ldr	r2, [pc, #320]	@ (8001744 <HAL_I2C_MspInit+0x160>)
 8001602:	4293      	cmp	r3, r2
 8001604:	f040 8099 	bne.w	800173a <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	4b4e      	ldr	r3, [pc, #312]	@ (8001748 <HAL_I2C_MspInit+0x164>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001610:	4a4d      	ldr	r2, [pc, #308]	@ (8001748 <HAL_I2C_MspInit+0x164>)
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	6313      	str	r3, [r2, #48]	@ 0x30
 8001618:	4b4b      	ldr	r3, [pc, #300]	@ (8001748 <HAL_I2C_MspInit+0x164>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001624:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162a:	2312      	movs	r3, #18
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001636:	2304      	movs	r3, #4
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4842      	ldr	r0, [pc, #264]	@ (800174c <HAL_I2C_MspInit+0x168>)
 8001642:	f002 f8cd 	bl	80037e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001646:	2308      	movs	r3, #8
 8001648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164a:	2312      	movs	r3, #18
 800164c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001656:	2309      	movs	r3, #9
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	483a      	ldr	r0, [pc, #232]	@ (800174c <HAL_I2C_MspInit+0x168>)
 8001662:	f002 f8bd 	bl	80037e0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b37      	ldr	r3, [pc, #220]	@ (8001748 <HAL_I2C_MspInit+0x164>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	4a36      	ldr	r2, [pc, #216]	@ (8001748 <HAL_I2C_MspInit+0x164>)
 8001670:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001674:	6413      	str	r3, [r2, #64]	@ 0x40
 8001676:	4b34      	ldr	r3, [pc, #208]	@ (8001748 <HAL_I2C_MspInit+0x164>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001682:	4b33      	ldr	r3, [pc, #204]	@ (8001750 <HAL_I2C_MspInit+0x16c>)
 8001684:	4a33      	ldr	r2, [pc, #204]	@ (8001754 <HAL_I2C_MspInit+0x170>)
 8001686:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001688:	4b31      	ldr	r3, [pc, #196]	@ (8001750 <HAL_I2C_MspInit+0x16c>)
 800168a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800168e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001690:	4b2f      	ldr	r3, [pc, #188]	@ (8001750 <HAL_I2C_MspInit+0x16c>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001696:	4b2e      	ldr	r3, [pc, #184]	@ (8001750 <HAL_I2C_MspInit+0x16c>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800169c:	4b2c      	ldr	r3, [pc, #176]	@ (8001750 <HAL_I2C_MspInit+0x16c>)
 800169e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016a2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001750 <HAL_I2C_MspInit+0x16c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016aa:	4b29      	ldr	r3, [pc, #164]	@ (8001750 <HAL_I2C_MspInit+0x16c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80016b0:	4b27      	ldr	r3, [pc, #156]	@ (8001750 <HAL_I2C_MspInit+0x16c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016b6:	4b26      	ldr	r3, [pc, #152]	@ (8001750 <HAL_I2C_MspInit+0x16c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016bc:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <HAL_I2C_MspInit+0x16c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80016c2:	4823      	ldr	r0, [pc, #140]	@ (8001750 <HAL_I2C_MspInit+0x16c>)
 80016c4:	f001 fcfa 	bl	80030bc <HAL_DMA_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 80016ce:	f000 fc8d 	bl	8001fec <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001750 <HAL_I2C_MspInit+0x16c>)
 80016d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80016d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001750 <HAL_I2C_MspInit+0x16c>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80016de:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <HAL_I2C_MspInit+0x174>)
 80016e0:	4a1e      	ldr	r2, [pc, #120]	@ (800175c <HAL_I2C_MspInit+0x178>)
 80016e2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80016e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001758 <HAL_I2C_MspInit+0x174>)
 80016e6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80016ea:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <HAL_I2C_MspInit+0x174>)
 80016ee:	2240      	movs	r2, #64	@ 0x40
 80016f0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f2:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <HAL_I2C_MspInit+0x174>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016f8:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <HAL_I2C_MspInit+0x174>)
 80016fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016fe:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001700:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <HAL_I2C_MspInit+0x174>)
 8001702:	2200      	movs	r2, #0
 8001704:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001706:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <HAL_I2C_MspInit+0x174>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_I2C_MspInit+0x174>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001712:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <HAL_I2C_MspInit+0x174>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001718:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <HAL_I2C_MspInit+0x174>)
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800171e:	480e      	ldr	r0, [pc, #56]	@ (8001758 <HAL_I2C_MspInit+0x174>)
 8001720:	f001 fccc 	bl	80030bc <HAL_DMA_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_I2C_MspInit+0x14a>
    {
      Error_Handler();
 800172a:	f000 fc5f 	bl	8001fec <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a09      	ldr	r2, [pc, #36]	@ (8001758 <HAL_I2C_MspInit+0x174>)
 8001732:	635a      	str	r2, [r3, #52]	@ 0x34
 8001734:	4a08      	ldr	r2, [pc, #32]	@ (8001758 <HAL_I2C_MspInit+0x174>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800173a:	bf00      	nop
 800173c:	3728      	adds	r7, #40	@ 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40005800 	.word	0x40005800
 8001748:	40023800 	.word	0x40023800
 800174c:	40020400 	.word	0x40020400
 8001750:	200000e0 	.word	0x200000e0
 8001754:	40026040 	.word	0x40026040
 8001758:	20000140 	.word	0x20000140
 800175c:	400260b8 	.word	0x400260b8

08001760 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001760:	b5b0      	push	{r4, r5, r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001766:	f000 ffeb 	bl	8002740 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800176a:	f000 fb6d 	bl	8001e48 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	// Odblokowanie dostępu do backupu (dla RTC)
	HAL_PWR_EnableBkUpAccess();
 800176e:	f002 fb19 	bl	8003da4 <HAL_PWR_EnableBkUpAccess>

	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001780:	2302      	movs	r3, #2
 8001782:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001784:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001788:	613b      	str	r3, [r7, #16]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	4618      	mov	r0, r3
 800178e:	f002 ff61 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001792:	f7ff fe8d 	bl	80014b0 <MX_GPIO_Init>
	MX_DMA_Init();
 8001796:	f7ff fe4d 	bl	8001434 <MX_DMA_Init>
	MX_SPI1_Init();
 800179a:	f000 fcb3 	bl	8002104 <MX_SPI1_Init>
	MX_TIM1_Init();
 800179e:	f000 fe05 	bl	80023ac <MX_TIM1_Init>
	MX_RTC_Init();
 80017a2:	f000 fc29 	bl	8001ff8 <MX_RTC_Init>
	MX_I2C2_Init();
 80017a6:	f7ff feef 	bl	8001588 <MX_I2C2_Init>
	MX_ADC1_Init();
 80017aa:	f7fe fe8b 	bl	80004c4 <MX_ADC1_Init>
	MX_TIM4_Init();
 80017ae:	f000 fe9d 	bl	80024ec <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	// Start PWM na TIM1, kanał 1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017b2:	2100      	movs	r1, #0
 80017b4:	48a2      	ldr	r0, [pc, #648]	@ (8001a40 <main+0x2e0>)
 80017b6:	f003 ffa5 	bl	8005704 <HAL_TIM_PWM_Start>
	// Ustaw wypełnienie do połowy
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (htim1.Init.Period + 1) / 2);
 80017ba:	4ba1      	ldr	r3, [pc, #644]	@ (8001a40 <main+0x2e0>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	4b9f      	ldr	r3, [pc, #636]	@ (8001a40 <main+0x2e0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	0852      	lsrs	r2, r2, #1
 80017c6:	635a      	str	r2, [r3, #52]	@ 0x34

	// Ustaw przykładową jasność z korekcją gamma
	SetPWMPercentGamma(30);
 80017c8:	201e      	movs	r0, #30
 80017ca:	f7ff fc39 	bl	8001040 <SetPWMPercentGamma>

	// Wyczyść strukturę zegara i wyślij do rejestrów
	ClearClockBits(&clockReg);
 80017ce:	489d      	ldr	r0, [pc, #628]	@ (8001a44 <main+0x2e4>)
 80017d0:	f7ff f818 	bl	8000804 <ClearClockBits>
	UpdateAllDisplays(&clockReg);
 80017d4:	489b      	ldr	r0, [pc, #620]	@ (8001a44 <main+0x2e4>)
 80017d6:	f7ff fbef 	bl	8000fb8 <UpdateAllDisplays>

	// Ustaw czas RTC (przykładowo)
	Set_RTC_Time();
 80017da:	f000 fb95 	bl	8001f08 <Set_RTC_Time>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80017de:	213c      	movs	r1, #60	@ 0x3c
 80017e0:	4899      	ldr	r0, [pc, #612]	@ (8001a48 <main+0x2e8>)
 80017e2:	f004 f8e5 	bl	80059b0 <HAL_TIM_Encoder_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// Odczytaj aktualny czas z RTC
		Get_RTC_Time();
 80017e6:	f000 fbc7 	bl	8001f78 <Get_RTC_Time>

		// Sekundnik – zapal diody od 0 do sTime.Seconds
		//SetSecondLedAccumulating2(&clockReg, sTime.Seconds);
		if (encoderValue == 0) {
 80017ea:	4b98      	ldr	r3, [pc, #608]	@ (8001a4c <main+0x2ec>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d11a      	bne.n	8001828 <main+0xc8>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 80017f2:	4b97      	ldr	r3, [pc, #604]	@ (8001a50 <main+0x2f0>)
 80017f4:	789b      	ldrb	r3, [r3, #2]
 80017f6:	4a96      	ldr	r2, [pc, #600]	@ (8001a50 <main+0x2f0>)
 80017f8:	7852      	ldrb	r2, [r2, #1]
 80017fa:	4619      	mov	r1, r3
 80017fc:	4891      	ldr	r0, [pc, #580]	@ (8001a44 <main+0x2e4>)
 80017fe:	f7ff fc4b 	bl	8001098 <SetSecondLedEvenOdd>
			SetHourRingCustom(&clockReg, 1, 1);
 8001802:	2201      	movs	r2, #1
 8001804:	2101      	movs	r1, #1
 8001806:	488f      	ldr	r0, [pc, #572]	@ (8001a44 <main+0x2e4>)
 8001808:	f7ff fd8a 	bl	8001320 <SetHourRingCustom>
			SetDots(&clockReg, 1, 1);
 800180c:	2201      	movs	r2, #1
 800180e:	2101      	movs	r1, #1
 8001810:	488c      	ldr	r0, [pc, #560]	@ (8001a44 <main+0x2e4>)
 8001812:	f7ff fd53 	bl	80012bc <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001816:	4b8e      	ldr	r3, [pc, #568]	@ (8001a50 <main+0x2f0>)
 8001818:	7819      	ldrb	r1, [r3, #0]
 800181a:	4b8d      	ldr	r3, [pc, #564]	@ (8001a50 <main+0x2f0>)
 800181c:	785a      	ldrb	r2, [r3, #1]
 800181e:	4b8c      	ldr	r3, [pc, #560]	@ (8001a50 <main+0x2f0>)
 8001820:	789b      	ldrb	r3, [r3, #2]
 8001822:	4888      	ldr	r0, [pc, #544]	@ (8001a44 <main+0x2e4>)
 8001824:	f7ff f9a2 	bl	8000b6c <SetTime7Seg_Top>
					sTime.Seconds);
		}

		if (encoderValue == 1) {
 8001828:	4b88      	ldr	r3, [pc, #544]	@ (8001a4c <main+0x2ec>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d11a      	bne.n	8001866 <main+0x106>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 8001830:	4b87      	ldr	r3, [pc, #540]	@ (8001a50 <main+0x2f0>)
 8001832:	789b      	ldrb	r3, [r3, #2]
 8001834:	4a86      	ldr	r2, [pc, #536]	@ (8001a50 <main+0x2f0>)
 8001836:	7852      	ldrb	r2, [r2, #1]
 8001838:	4619      	mov	r1, r3
 800183a:	4882      	ldr	r0, [pc, #520]	@ (8001a44 <main+0x2e4>)
 800183c:	f7ff fc2c 	bl	8001098 <SetSecondLedEvenOdd>
			SetHourRingCustom(&clockReg, 0, 1);
 8001840:	2201      	movs	r2, #1
 8001842:	2100      	movs	r1, #0
 8001844:	487f      	ldr	r0, [pc, #508]	@ (8001a44 <main+0x2e4>)
 8001846:	f7ff fd6b 	bl	8001320 <SetHourRingCustom>
			SetDots(&clockReg, 1, 1);
 800184a:	2201      	movs	r2, #1
 800184c:	2101      	movs	r1, #1
 800184e:	487d      	ldr	r0, [pc, #500]	@ (8001a44 <main+0x2e4>)
 8001850:	f7ff fd34 	bl	80012bc <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001854:	4b7e      	ldr	r3, [pc, #504]	@ (8001a50 <main+0x2f0>)
 8001856:	7819      	ldrb	r1, [r3, #0]
 8001858:	4b7d      	ldr	r3, [pc, #500]	@ (8001a50 <main+0x2f0>)
 800185a:	785a      	ldrb	r2, [r3, #1]
 800185c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a50 <main+0x2f0>)
 800185e:	789b      	ldrb	r3, [r3, #2]
 8001860:	4878      	ldr	r0, [pc, #480]	@ (8001a44 <main+0x2e4>)
 8001862:	f7ff f983 	bl	8000b6c <SetTime7Seg_Top>
					sTime.Seconds);
		}
		if (encoderValue == 2) {
 8001866:	4b79      	ldr	r3, [pc, #484]	@ (8001a4c <main+0x2ec>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d11a      	bne.n	80018a4 <main+0x144>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 800186e:	4b78      	ldr	r3, [pc, #480]	@ (8001a50 <main+0x2f0>)
 8001870:	789b      	ldrb	r3, [r3, #2]
 8001872:	4a77      	ldr	r2, [pc, #476]	@ (8001a50 <main+0x2f0>)
 8001874:	7852      	ldrb	r2, [r2, #1]
 8001876:	4619      	mov	r1, r3
 8001878:	4872      	ldr	r0, [pc, #456]	@ (8001a44 <main+0x2e4>)
 800187a:	f7ff fc0d 	bl	8001098 <SetSecondLedEvenOdd>
			SetHourRingCustom(&clockReg, 1, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2101      	movs	r1, #1
 8001882:	4870      	ldr	r0, [pc, #448]	@ (8001a44 <main+0x2e4>)
 8001884:	f7ff fd4c 	bl	8001320 <SetHourRingCustom>
			SetDots(&clockReg, 1, 1);
 8001888:	2201      	movs	r2, #1
 800188a:	2101      	movs	r1, #1
 800188c:	486d      	ldr	r0, [pc, #436]	@ (8001a44 <main+0x2e4>)
 800188e:	f7ff fd15 	bl	80012bc <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001892:	4b6f      	ldr	r3, [pc, #444]	@ (8001a50 <main+0x2f0>)
 8001894:	7819      	ldrb	r1, [r3, #0]
 8001896:	4b6e      	ldr	r3, [pc, #440]	@ (8001a50 <main+0x2f0>)
 8001898:	785a      	ldrb	r2, [r3, #1]
 800189a:	4b6d      	ldr	r3, [pc, #436]	@ (8001a50 <main+0x2f0>)
 800189c:	789b      	ldrb	r3, [r3, #2]
 800189e:	4869      	ldr	r0, [pc, #420]	@ (8001a44 <main+0x2e4>)
 80018a0:	f7ff f964 	bl	8000b6c <SetTime7Seg_Top>
					sTime.Seconds);
		}

		if (encoderValue == 3) {
 80018a4:	4b69      	ldr	r3, [pc, #420]	@ (8001a4c <main+0x2ec>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d11a      	bne.n	80018e2 <main+0x182>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 80018ac:	4b68      	ldr	r3, [pc, #416]	@ (8001a50 <main+0x2f0>)
 80018ae:	789b      	ldrb	r3, [r3, #2]
 80018b0:	4a67      	ldr	r2, [pc, #412]	@ (8001a50 <main+0x2f0>)
 80018b2:	7852      	ldrb	r2, [r2, #1]
 80018b4:	4619      	mov	r1, r3
 80018b6:	4863      	ldr	r0, [pc, #396]	@ (8001a44 <main+0x2e4>)
 80018b8:	f7ff fbee 	bl	8001098 <SetSecondLedEvenOdd>
			SetHourRingCustom(&clockReg, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	4860      	ldr	r0, [pc, #384]	@ (8001a44 <main+0x2e4>)
 80018c2:	f7ff fd2d 	bl	8001320 <SetHourRingCustom>
			SetDots(&clockReg, 1, 1);
 80018c6:	2201      	movs	r2, #1
 80018c8:	2101      	movs	r1, #1
 80018ca:	485e      	ldr	r0, [pc, #376]	@ (8001a44 <main+0x2e4>)
 80018cc:	f7ff fcf6 	bl	80012bc <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 80018d0:	4b5f      	ldr	r3, [pc, #380]	@ (8001a50 <main+0x2f0>)
 80018d2:	7819      	ldrb	r1, [r3, #0]
 80018d4:	4b5e      	ldr	r3, [pc, #376]	@ (8001a50 <main+0x2f0>)
 80018d6:	785a      	ldrb	r2, [r3, #1]
 80018d8:	4b5d      	ldr	r3, [pc, #372]	@ (8001a50 <main+0x2f0>)
 80018da:	789b      	ldrb	r3, [r3, #2]
 80018dc:	4859      	ldr	r0, [pc, #356]	@ (8001a44 <main+0x2e4>)
 80018de:	f7ff f945 	bl	8000b6c <SetTime7Seg_Top>
					sTime.Seconds);
		}
		if (encoderValue == 4) {
 80018e2:	4b5a      	ldr	r3, [pc, #360]	@ (8001a4c <main+0x2ec>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d11d      	bne.n	8001926 <main+0x1c6>
					SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 80018ea:	4b59      	ldr	r3, [pc, #356]	@ (8001a50 <main+0x2f0>)
 80018ec:	789b      	ldrb	r3, [r3, #2]
 80018ee:	4a58      	ldr	r2, [pc, #352]	@ (8001a50 <main+0x2f0>)
 80018f0:	7852      	ldrb	r2, [r2, #1]
 80018f2:	4619      	mov	r1, r3
 80018f4:	4853      	ldr	r0, [pc, #332]	@ (8001a44 <main+0x2e4>)
 80018f6:	f7ff fbcf 	bl	8001098 <SetSecondLedEvenOdd>
					SetHourRingCustom(&clockReg, sTime.Hours, sTime.Hours);
 80018fa:	4b55      	ldr	r3, [pc, #340]	@ (8001a50 <main+0x2f0>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	4a54      	ldr	r2, [pc, #336]	@ (8001a50 <main+0x2f0>)
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	4619      	mov	r1, r3
 8001904:	484f      	ldr	r0, [pc, #316]	@ (8001a44 <main+0x2e4>)
 8001906:	f7ff fd0b 	bl	8001320 <SetHourRingCustom>
					SetDots(&clockReg, 1, 1);
 800190a:	2201      	movs	r2, #1
 800190c:	2101      	movs	r1, #1
 800190e:	484d      	ldr	r0, [pc, #308]	@ (8001a44 <main+0x2e4>)
 8001910:	f7ff fcd4 	bl	80012bc <SetDots>
					SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001914:	4b4e      	ldr	r3, [pc, #312]	@ (8001a50 <main+0x2f0>)
 8001916:	7819      	ldrb	r1, [r3, #0]
 8001918:	4b4d      	ldr	r3, [pc, #308]	@ (8001a50 <main+0x2f0>)
 800191a:	785a      	ldrb	r2, [r3, #1]
 800191c:	4b4c      	ldr	r3, [pc, #304]	@ (8001a50 <main+0x2f0>)
 800191e:	789b      	ldrb	r3, [r3, #2]
 8001920:	4848      	ldr	r0, [pc, #288]	@ (8001a44 <main+0x2e4>)
 8001922:	f7ff f923 	bl	8000b6c <SetTime7Seg_Top>
							sTime.Seconds);
				}
		if (encoderValue == 5) {
 8001926:	4b49      	ldr	r3, [pc, #292]	@ (8001a4c <main+0x2ec>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b05      	cmp	r3, #5
 800192c:	d11c      	bne.n	8001968 <main+0x208>
		SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 800192e:	4b48      	ldr	r3, [pc, #288]	@ (8001a50 <main+0x2f0>)
 8001930:	789b      	ldrb	r3, [r3, #2]
 8001932:	4a47      	ldr	r2, [pc, #284]	@ (8001a50 <main+0x2f0>)
 8001934:	7852      	ldrb	r2, [r2, #1]
 8001936:	4619      	mov	r1, r3
 8001938:	4842      	ldr	r0, [pc, #264]	@ (8001a44 <main+0x2e4>)
 800193a:	f7ff fbad 	bl	8001098 <SetSecondLedEvenOdd>
		SetHourRing(&clockReg, sTime.Hours,  1, 1);
 800193e:	4b44      	ldr	r3, [pc, #272]	@ (8001a50 <main+0x2f0>)
 8001940:	7819      	ldrb	r1, [r3, #0]
 8001942:	2301      	movs	r3, #1
 8001944:	2201      	movs	r2, #1
 8001946:	483f      	ldr	r0, [pc, #252]	@ (8001a44 <main+0x2e4>)
 8001948:	f7ff f8aa 	bl	8000aa0 <SetHourRing>
		SetDots(&clockReg, 1, 1);
 800194c:	2201      	movs	r2, #1
 800194e:	2101      	movs	r1, #1
 8001950:	483c      	ldr	r0, [pc, #240]	@ (8001a44 <main+0x2e4>)
 8001952:	f7ff fcb3 	bl	80012bc <SetDots>
		SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001956:	4b3e      	ldr	r3, [pc, #248]	@ (8001a50 <main+0x2f0>)
 8001958:	7819      	ldrb	r1, [r3, #0]
 800195a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a50 <main+0x2f0>)
 800195c:	785a      	ldrb	r2, [r3, #1]
 800195e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a50 <main+0x2f0>)
 8001960:	789b      	ldrb	r3, [r3, #2]
 8001962:	4838      	ldr	r0, [pc, #224]	@ (8001a44 <main+0x2e4>)
 8001964:	f7ff f902 	bl	8000b6c <SetTime7Seg_Top>
									sTime.Seconds);
						}
		if (encoderValue == 6) {
 8001968:	4b38      	ldr	r3, [pc, #224]	@ (8001a4c <main+0x2ec>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b06      	cmp	r3, #6
 800196e:	d118      	bne.n	80019a2 <main+0x242>
			SetSecondLedAccumulating2(&clockReg, sTime.Seconds);
 8001970:	4b37      	ldr	r3, [pc, #220]	@ (8001a50 <main+0x2f0>)
 8001972:	789b      	ldrb	r3, [r3, #2]
 8001974:	4619      	mov	r1, r3
 8001976:	4833      	ldr	r0, [pc, #204]	@ (8001a44 <main+0x2e4>)
 8001978:	f7ff f81b 	bl	80009b2 <SetSecondLedAccumulating2>
				SetHourRingCustom(&clockReg, 1, 1);
 800197c:	2201      	movs	r2, #1
 800197e:	2101      	movs	r1, #1
 8001980:	4830      	ldr	r0, [pc, #192]	@ (8001a44 <main+0x2e4>)
 8001982:	f7ff fccd 	bl	8001320 <SetHourRingCustom>
				SetDots(&clockReg, 1, 1);
 8001986:	2201      	movs	r2, #1
 8001988:	2101      	movs	r1, #1
 800198a:	482e      	ldr	r0, [pc, #184]	@ (8001a44 <main+0x2e4>)
 800198c:	f7ff fc96 	bl	80012bc <SetDots>
				SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001990:	4b2f      	ldr	r3, [pc, #188]	@ (8001a50 <main+0x2f0>)
 8001992:	7819      	ldrb	r1, [r3, #0]
 8001994:	4b2e      	ldr	r3, [pc, #184]	@ (8001a50 <main+0x2f0>)
 8001996:	785a      	ldrb	r2, [r3, #1]
 8001998:	4b2d      	ldr	r3, [pc, #180]	@ (8001a50 <main+0x2f0>)
 800199a:	789b      	ldrb	r3, [r3, #2]
 800199c:	4829      	ldr	r0, [pc, #164]	@ (8001a44 <main+0x2e4>)
 800199e:	f7ff f8e5 	bl	8000b6c <SetTime7Seg_Top>
						sTime.Seconds);
			}

			if (encoderValue == 7) {
 80019a2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a4c <main+0x2ec>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b07      	cmp	r3, #7
 80019a8:	d118      	bne.n	80019dc <main+0x27c>
				SetSecondLedAccumulating2(&clockReg, sTime.Seconds);
 80019aa:	4b29      	ldr	r3, [pc, #164]	@ (8001a50 <main+0x2f0>)
 80019ac:	789b      	ldrb	r3, [r3, #2]
 80019ae:	4619      	mov	r1, r3
 80019b0:	4824      	ldr	r0, [pc, #144]	@ (8001a44 <main+0x2e4>)
 80019b2:	f7fe fffe 	bl	80009b2 <SetSecondLedAccumulating2>
				SetHourRingCustom(&clockReg, 0, 1);
 80019b6:	2201      	movs	r2, #1
 80019b8:	2100      	movs	r1, #0
 80019ba:	4822      	ldr	r0, [pc, #136]	@ (8001a44 <main+0x2e4>)
 80019bc:	f7ff fcb0 	bl	8001320 <SetHourRingCustom>
				SetDots(&clockReg, 1, 1);
 80019c0:	2201      	movs	r2, #1
 80019c2:	2101      	movs	r1, #1
 80019c4:	481f      	ldr	r0, [pc, #124]	@ (8001a44 <main+0x2e4>)
 80019c6:	f7ff fc79 	bl	80012bc <SetDots>
				SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 80019ca:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <main+0x2f0>)
 80019cc:	7819      	ldrb	r1, [r3, #0]
 80019ce:	4b20      	ldr	r3, [pc, #128]	@ (8001a50 <main+0x2f0>)
 80019d0:	785a      	ldrb	r2, [r3, #1]
 80019d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <main+0x2f0>)
 80019d4:	789b      	ldrb	r3, [r3, #2]
 80019d6:	481b      	ldr	r0, [pc, #108]	@ (8001a44 <main+0x2e4>)
 80019d8:	f7ff f8c8 	bl	8000b6c <SetTime7Seg_Top>
						sTime.Seconds);
			}
			if (encoderValue == 8) {
 80019dc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <main+0x2ec>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d118      	bne.n	8001a16 <main+0x2b6>
				SetSecondLedAccumulating2(&clockReg, sTime.Seconds);
 80019e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a50 <main+0x2f0>)
 80019e6:	789b      	ldrb	r3, [r3, #2]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4816      	ldr	r0, [pc, #88]	@ (8001a44 <main+0x2e4>)
 80019ec:	f7fe ffe1 	bl	80009b2 <SetSecondLedAccumulating2>
				SetHourRingCustom(&clockReg, 1, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2101      	movs	r1, #1
 80019f4:	4813      	ldr	r0, [pc, #76]	@ (8001a44 <main+0x2e4>)
 80019f6:	f7ff fc93 	bl	8001320 <SetHourRingCustom>
				SetDots(&clockReg, 1, 1);
 80019fa:	2201      	movs	r2, #1
 80019fc:	2101      	movs	r1, #1
 80019fe:	4811      	ldr	r0, [pc, #68]	@ (8001a44 <main+0x2e4>)
 8001a00:	f7ff fc5c 	bl	80012bc <SetDots>
				SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <main+0x2f0>)
 8001a06:	7819      	ldrb	r1, [r3, #0]
 8001a08:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <main+0x2f0>)
 8001a0a:	785a      	ldrb	r2, [r3, #1]
 8001a0c:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <main+0x2f0>)
 8001a0e:	789b      	ldrb	r3, [r3, #2]
 8001a10:	480c      	ldr	r0, [pc, #48]	@ (8001a44 <main+0x2e4>)
 8001a12:	f7ff f8ab 	bl	8000b6c <SetTime7Seg_Top>
						sTime.Seconds);
			}

			if (encoderValue == 9) {
 8001a16:	4b0d      	ldr	r3, [pc, #52]	@ (8001a4c <main+0x2ec>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b09      	cmp	r3, #9
 8001a1c:	d123      	bne.n	8001a66 <main+0x306>
				SetSecondLedAccumulating2(&clockReg, sTime.Seconds);
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <main+0x2f0>)
 8001a20:	789b      	ldrb	r3, [r3, #2]
 8001a22:	4619      	mov	r1, r3
 8001a24:	4807      	ldr	r0, [pc, #28]	@ (8001a44 <main+0x2e4>)
 8001a26:	f7fe ffc4 	bl	80009b2 <SetSecondLedAccumulating2>
				SetHourRingCustom(&clockReg, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4805      	ldr	r0, [pc, #20]	@ (8001a44 <main+0x2e4>)
 8001a30:	f7ff fc76 	bl	8001320 <SetHourRingCustom>
				SetDots(&clockReg, 1, 1);
 8001a34:	2201      	movs	r2, #1
 8001a36:	2101      	movs	r1, #1
 8001a38:	4802      	ldr	r0, [pc, #8]	@ (8001a44 <main+0x2e4>)
 8001a3a:	f7ff fc3f 	bl	80012bc <SetDots>
 8001a3e:	e009      	b.n	8001a54 <main+0x2f4>
 8001a40:	200002ac 	.word	0x200002ac
 8001a44:	200001bc 	.word	0x200001bc
 8001a48:	200002f4 	.word	0x200002f4
 8001a4c:	200001b8 	.word	0x200001b8
 8001a50:	200001a0 	.word	0x200001a0
				SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001a54:	4b9f      	ldr	r3, [pc, #636]	@ (8001cd4 <main+0x574>)
 8001a56:	7819      	ldrb	r1, [r3, #0]
 8001a58:	4b9e      	ldr	r3, [pc, #632]	@ (8001cd4 <main+0x574>)
 8001a5a:	785a      	ldrb	r2, [r3, #1]
 8001a5c:	4b9d      	ldr	r3, [pc, #628]	@ (8001cd4 <main+0x574>)
 8001a5e:	789b      	ldrb	r3, [r3, #2]
 8001a60:	489d      	ldr	r0, [pc, #628]	@ (8001cd8 <main+0x578>)
 8001a62:	f7ff f883 	bl	8000b6c <SetTime7Seg_Top>
						sTime.Seconds);
			}
			if (encoderValue == 10) {
 8001a66:	4b9d      	ldr	r3, [pc, #628]	@ (8001cdc <main+0x57c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b0a      	cmp	r3, #10
 8001a6c:	d11b      	bne.n	8001aa6 <main+0x346>
				SetSecondLedAccumulating2(&clockReg, sTime.Seconds);
 8001a6e:	4b99      	ldr	r3, [pc, #612]	@ (8001cd4 <main+0x574>)
 8001a70:	789b      	ldrb	r3, [r3, #2]
 8001a72:	4619      	mov	r1, r3
 8001a74:	4898      	ldr	r0, [pc, #608]	@ (8001cd8 <main+0x578>)
 8001a76:	f7fe ff9c 	bl	80009b2 <SetSecondLedAccumulating2>
						SetHourRingCustom(&clockReg, sTime.Hours, sTime.Hours);
 8001a7a:	4b96      	ldr	r3, [pc, #600]	@ (8001cd4 <main+0x574>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	4a95      	ldr	r2, [pc, #596]	@ (8001cd4 <main+0x574>)
 8001a80:	7812      	ldrb	r2, [r2, #0]
 8001a82:	4619      	mov	r1, r3
 8001a84:	4894      	ldr	r0, [pc, #592]	@ (8001cd8 <main+0x578>)
 8001a86:	f7ff fc4b 	bl	8001320 <SetHourRingCustom>
						SetDots(&clockReg, 1, 1);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	4892      	ldr	r0, [pc, #584]	@ (8001cd8 <main+0x578>)
 8001a90:	f7ff fc14 	bl	80012bc <SetDots>
						SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001a94:	4b8f      	ldr	r3, [pc, #572]	@ (8001cd4 <main+0x574>)
 8001a96:	7819      	ldrb	r1, [r3, #0]
 8001a98:	4b8e      	ldr	r3, [pc, #568]	@ (8001cd4 <main+0x574>)
 8001a9a:	785a      	ldrb	r2, [r3, #1]
 8001a9c:	4b8d      	ldr	r3, [pc, #564]	@ (8001cd4 <main+0x574>)
 8001a9e:	789b      	ldrb	r3, [r3, #2]
 8001aa0:	488d      	ldr	r0, [pc, #564]	@ (8001cd8 <main+0x578>)
 8001aa2:	f7ff f863 	bl	8000b6c <SetTime7Seg_Top>
								sTime.Seconds);
					}
			if (encoderValue == 11) {
 8001aa6:	4b8d      	ldr	r3, [pc, #564]	@ (8001cdc <main+0x57c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b0b      	cmp	r3, #11
 8001aac:	d11b      	bne.n	8001ae6 <main+0x386>
				SetSecondLedAccumulating2(&clockReg, sTime.Seconds);
 8001aae:	4b89      	ldr	r3, [pc, #548]	@ (8001cd4 <main+0x574>)
 8001ab0:	789b      	ldrb	r3, [r3, #2]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4888      	ldr	r0, [pc, #544]	@ (8001cd8 <main+0x578>)
 8001ab6:	f7fe ff7c 	bl	80009b2 <SetSecondLedAccumulating2>
			SetHourRingCustom(&clockReg, sTime.Hours, sTime.Hours);
 8001aba:	4b86      	ldr	r3, [pc, #536]	@ (8001cd4 <main+0x574>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	4a85      	ldr	r2, [pc, #532]	@ (8001cd4 <main+0x574>)
 8001ac0:	7812      	ldrb	r2, [r2, #0]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4884      	ldr	r0, [pc, #528]	@ (8001cd8 <main+0x578>)
 8001ac6:	f7ff fc2b 	bl	8001320 <SetHourRingCustom>
			SetDots(&clockReg, 1, 1);
 8001aca:	2201      	movs	r2, #1
 8001acc:	2101      	movs	r1, #1
 8001ace:	4882      	ldr	r0, [pc, #520]	@ (8001cd8 <main+0x578>)
 8001ad0:	f7ff fbf4 	bl	80012bc <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001ad4:	4b7f      	ldr	r3, [pc, #508]	@ (8001cd4 <main+0x574>)
 8001ad6:	7819      	ldrb	r1, [r3, #0]
 8001ad8:	4b7e      	ldr	r3, [pc, #504]	@ (8001cd4 <main+0x574>)
 8001ada:	785a      	ldrb	r2, [r3, #1]
 8001adc:	4b7d      	ldr	r3, [pc, #500]	@ (8001cd4 <main+0x574>)
 8001ade:	789b      	ldrb	r3, [r3, #2]
 8001ae0:	487d      	ldr	r0, [pc, #500]	@ (8001cd8 <main+0x578>)
 8001ae2:	f7ff f843 	bl	8000b6c <SetTime7Seg_Top>
										sTime.Seconds);
							}



			if (encoderValue == 12) {
 8001ae6:	4b7d      	ldr	r3, [pc, #500]	@ (8001cdc <main+0x57c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b0c      	cmp	r3, #12
 8001aec:	d118      	bne.n	8001b20 <main+0x3c0>
				SetSecondLedSingle(&clockReg, sTime.Seconds);
 8001aee:	4b79      	ldr	r3, [pc, #484]	@ (8001cd4 <main+0x574>)
 8001af0:	789b      	ldrb	r3, [r3, #2]
 8001af2:	4619      	mov	r1, r3
 8001af4:	4878      	ldr	r0, [pc, #480]	@ (8001cd8 <main+0x578>)
 8001af6:	f7fe fe92 	bl	800081e <SetSecondLedSingle>
							SetHourRingCustom(&clockReg, 1, 1);
 8001afa:	2201      	movs	r2, #1
 8001afc:	2101      	movs	r1, #1
 8001afe:	4876      	ldr	r0, [pc, #472]	@ (8001cd8 <main+0x578>)
 8001b00:	f7ff fc0e 	bl	8001320 <SetHourRingCustom>
							SetDots(&clockReg, 1, 1);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2101      	movs	r1, #1
 8001b08:	4873      	ldr	r0, [pc, #460]	@ (8001cd8 <main+0x578>)
 8001b0a:	f7ff fbd7 	bl	80012bc <SetDots>
							SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001b0e:	4b71      	ldr	r3, [pc, #452]	@ (8001cd4 <main+0x574>)
 8001b10:	7819      	ldrb	r1, [r3, #0]
 8001b12:	4b70      	ldr	r3, [pc, #448]	@ (8001cd4 <main+0x574>)
 8001b14:	785a      	ldrb	r2, [r3, #1]
 8001b16:	4b6f      	ldr	r3, [pc, #444]	@ (8001cd4 <main+0x574>)
 8001b18:	789b      	ldrb	r3, [r3, #2]
 8001b1a:	486f      	ldr	r0, [pc, #444]	@ (8001cd8 <main+0x578>)
 8001b1c:	f7ff f826 	bl	8000b6c <SetTime7Seg_Top>
									sTime.Seconds);
						}

						if (encoderValue == 13) {
 8001b20:	4b6e      	ldr	r3, [pc, #440]	@ (8001cdc <main+0x57c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b0d      	cmp	r3, #13
 8001b26:	d118      	bne.n	8001b5a <main+0x3fa>
							SetSecondLedSingle(&clockReg, sTime.Seconds);
 8001b28:	4b6a      	ldr	r3, [pc, #424]	@ (8001cd4 <main+0x574>)
 8001b2a:	789b      	ldrb	r3, [r3, #2]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	486a      	ldr	r0, [pc, #424]	@ (8001cd8 <main+0x578>)
 8001b30:	f7fe fe75 	bl	800081e <SetSecondLedSingle>
							SetHourRingCustom(&clockReg, 0, 1);
 8001b34:	2201      	movs	r2, #1
 8001b36:	2100      	movs	r1, #0
 8001b38:	4867      	ldr	r0, [pc, #412]	@ (8001cd8 <main+0x578>)
 8001b3a:	f7ff fbf1 	bl	8001320 <SetHourRingCustom>
							SetDots(&clockReg, 1, 1);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	2101      	movs	r1, #1
 8001b42:	4865      	ldr	r0, [pc, #404]	@ (8001cd8 <main+0x578>)
 8001b44:	f7ff fbba 	bl	80012bc <SetDots>
							SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001b48:	4b62      	ldr	r3, [pc, #392]	@ (8001cd4 <main+0x574>)
 8001b4a:	7819      	ldrb	r1, [r3, #0]
 8001b4c:	4b61      	ldr	r3, [pc, #388]	@ (8001cd4 <main+0x574>)
 8001b4e:	785a      	ldrb	r2, [r3, #1]
 8001b50:	4b60      	ldr	r3, [pc, #384]	@ (8001cd4 <main+0x574>)
 8001b52:	789b      	ldrb	r3, [r3, #2]
 8001b54:	4860      	ldr	r0, [pc, #384]	@ (8001cd8 <main+0x578>)
 8001b56:	f7ff f809 	bl	8000b6c <SetTime7Seg_Top>
									sTime.Seconds);
						}
						if (encoderValue == 14) {
 8001b5a:	4b60      	ldr	r3, [pc, #384]	@ (8001cdc <main+0x57c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b0e      	cmp	r3, #14
 8001b60:	d118      	bne.n	8001b94 <main+0x434>
							SetSecondLedSingle(&clockReg, sTime.Seconds);
 8001b62:	4b5c      	ldr	r3, [pc, #368]	@ (8001cd4 <main+0x574>)
 8001b64:	789b      	ldrb	r3, [r3, #2]
 8001b66:	4619      	mov	r1, r3
 8001b68:	485b      	ldr	r0, [pc, #364]	@ (8001cd8 <main+0x578>)
 8001b6a:	f7fe fe58 	bl	800081e <SetSecondLedSingle>
							SetHourRingCustom(&clockReg, 1, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2101      	movs	r1, #1
 8001b72:	4859      	ldr	r0, [pc, #356]	@ (8001cd8 <main+0x578>)
 8001b74:	f7ff fbd4 	bl	8001320 <SetHourRingCustom>
							SetDots(&clockReg, 1, 1);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	4856      	ldr	r0, [pc, #344]	@ (8001cd8 <main+0x578>)
 8001b7e:	f7ff fb9d 	bl	80012bc <SetDots>
							SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001b82:	4b54      	ldr	r3, [pc, #336]	@ (8001cd4 <main+0x574>)
 8001b84:	7819      	ldrb	r1, [r3, #0]
 8001b86:	4b53      	ldr	r3, [pc, #332]	@ (8001cd4 <main+0x574>)
 8001b88:	785a      	ldrb	r2, [r3, #1]
 8001b8a:	4b52      	ldr	r3, [pc, #328]	@ (8001cd4 <main+0x574>)
 8001b8c:	789b      	ldrb	r3, [r3, #2]
 8001b8e:	4852      	ldr	r0, [pc, #328]	@ (8001cd8 <main+0x578>)
 8001b90:	f7fe ffec 	bl	8000b6c <SetTime7Seg_Top>
									sTime.Seconds);
						}

						if (encoderValue == 15) {
 8001b94:	4b51      	ldr	r3, [pc, #324]	@ (8001cdc <main+0x57c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b0f      	cmp	r3, #15
 8001b9a:	d118      	bne.n	8001bce <main+0x46e>
							SetSecondLedSingle(&clockReg, sTime.Seconds);
 8001b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd4 <main+0x574>)
 8001b9e:	789b      	ldrb	r3, [r3, #2]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	484d      	ldr	r0, [pc, #308]	@ (8001cd8 <main+0x578>)
 8001ba4:	f7fe fe3b 	bl	800081e <SetSecondLedSingle>
							SetHourRingCustom(&clockReg, 0, 0);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2100      	movs	r1, #0
 8001bac:	484a      	ldr	r0, [pc, #296]	@ (8001cd8 <main+0x578>)
 8001bae:	f7ff fbb7 	bl	8001320 <SetHourRingCustom>
							SetDots(&clockReg, 1, 1);
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	4848      	ldr	r0, [pc, #288]	@ (8001cd8 <main+0x578>)
 8001bb8:	f7ff fb80 	bl	80012bc <SetDots>
							SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001bbc:	4b45      	ldr	r3, [pc, #276]	@ (8001cd4 <main+0x574>)
 8001bbe:	7819      	ldrb	r1, [r3, #0]
 8001bc0:	4b44      	ldr	r3, [pc, #272]	@ (8001cd4 <main+0x574>)
 8001bc2:	785a      	ldrb	r2, [r3, #1]
 8001bc4:	4b43      	ldr	r3, [pc, #268]	@ (8001cd4 <main+0x574>)
 8001bc6:	789b      	ldrb	r3, [r3, #2]
 8001bc8:	4843      	ldr	r0, [pc, #268]	@ (8001cd8 <main+0x578>)
 8001bca:	f7fe ffcf 	bl	8000b6c <SetTime7Seg_Top>
									sTime.Seconds);
						}
						if (encoderValue == 16) {
 8001bce:	4b43      	ldr	r3, [pc, #268]	@ (8001cdc <main+0x57c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b10      	cmp	r3, #16
 8001bd4:	d11b      	bne.n	8001c0e <main+0x4ae>
							SetSecondLedSingle(&clockReg, sTime.Seconds);
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd4 <main+0x574>)
 8001bd8:	789b      	ldrb	r3, [r3, #2]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	483e      	ldr	r0, [pc, #248]	@ (8001cd8 <main+0x578>)
 8001bde:	f7fe fe1e 	bl	800081e <SetSecondLedSingle>
									SetHourRingCustom(&clockReg, sTime.Hours, sTime.Hours);
 8001be2:	4b3c      	ldr	r3, [pc, #240]	@ (8001cd4 <main+0x574>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	4a3b      	ldr	r2, [pc, #236]	@ (8001cd4 <main+0x574>)
 8001be8:	7812      	ldrb	r2, [r2, #0]
 8001bea:	4619      	mov	r1, r3
 8001bec:	483a      	ldr	r0, [pc, #232]	@ (8001cd8 <main+0x578>)
 8001bee:	f7ff fb97 	bl	8001320 <SetHourRingCustom>
									SetDots(&clockReg, 1, 1);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	4838      	ldr	r0, [pc, #224]	@ (8001cd8 <main+0x578>)
 8001bf8:	f7ff fb60 	bl	80012bc <SetDots>
									SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001bfc:	4b35      	ldr	r3, [pc, #212]	@ (8001cd4 <main+0x574>)
 8001bfe:	7819      	ldrb	r1, [r3, #0]
 8001c00:	4b34      	ldr	r3, [pc, #208]	@ (8001cd4 <main+0x574>)
 8001c02:	785a      	ldrb	r2, [r3, #1]
 8001c04:	4b33      	ldr	r3, [pc, #204]	@ (8001cd4 <main+0x574>)
 8001c06:	789b      	ldrb	r3, [r3, #2]
 8001c08:	4833      	ldr	r0, [pc, #204]	@ (8001cd8 <main+0x578>)
 8001c0a:	f7fe ffaf 	bl	8000b6c <SetTime7Seg_Top>
											sTime.Seconds);
								}
						if (encoderValue == 17) {
 8001c0e:	4b33      	ldr	r3, [pc, #204]	@ (8001cdc <main+0x57c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b11      	cmp	r3, #17
 8001c14:	d11b      	bne.n	8001c4e <main+0x4ee>
							SetSecondLedSingle(&clockReg, sTime.Seconds);
 8001c16:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd4 <main+0x574>)
 8001c18:	789b      	ldrb	r3, [r3, #2]
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	482e      	ldr	r0, [pc, #184]	@ (8001cd8 <main+0x578>)
 8001c1e:	f7fe fdfe 	bl	800081e <SetSecondLedSingle>
						SetHourRingCustom(&clockReg, sTime.Hours, sTime.Hours);
 8001c22:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd4 <main+0x574>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	4a2b      	ldr	r2, [pc, #172]	@ (8001cd4 <main+0x574>)
 8001c28:	7812      	ldrb	r2, [r2, #0]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	482a      	ldr	r0, [pc, #168]	@ (8001cd8 <main+0x578>)
 8001c2e:	f7ff fb77 	bl	8001320 <SetHourRingCustom>
						SetDots(&clockReg, 1, 1);
 8001c32:	2201      	movs	r2, #1
 8001c34:	2101      	movs	r1, #1
 8001c36:	4828      	ldr	r0, [pc, #160]	@ (8001cd8 <main+0x578>)
 8001c38:	f7ff fb40 	bl	80012bc <SetDots>
						SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001c3c:	4b25      	ldr	r3, [pc, #148]	@ (8001cd4 <main+0x574>)
 8001c3e:	7819      	ldrb	r1, [r3, #0]
 8001c40:	4b24      	ldr	r3, [pc, #144]	@ (8001cd4 <main+0x574>)
 8001c42:	785a      	ldrb	r2, [r3, #1]
 8001c44:	4b23      	ldr	r3, [pc, #140]	@ (8001cd4 <main+0x574>)
 8001c46:	789b      	ldrb	r3, [r3, #2]
 8001c48:	4823      	ldr	r0, [pc, #140]	@ (8001cd8 <main+0x578>)
 8001c4a:	f7fe ff8f 	bl	8000b6c <SetTime7Seg_Top>
													sTime.Seconds);
										}


						if (encoderValue == 18) {
 8001c4e:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <main+0x57c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b12      	cmp	r3, #18
 8001c54:	d118      	bne.n	8001c88 <main+0x528>
									SetSecondLedAccumulating(&clockReg, sTime.Seconds);
 8001c56:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd4 <main+0x574>)
 8001c58:	789b      	ldrb	r3, [r3, #2]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	481e      	ldr	r0, [pc, #120]	@ (8001cd8 <main+0x578>)
 8001c5e:	f7fe fe38 	bl	80008d2 <SetSecondLedAccumulating>
										SetHourRingCustom(&clockReg, 1, 1);
 8001c62:	2201      	movs	r2, #1
 8001c64:	2101      	movs	r1, #1
 8001c66:	481c      	ldr	r0, [pc, #112]	@ (8001cd8 <main+0x578>)
 8001c68:	f7ff fb5a 	bl	8001320 <SetHourRingCustom>
										SetDots(&clockReg, 1, 1);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4819      	ldr	r0, [pc, #100]	@ (8001cd8 <main+0x578>)
 8001c72:	f7ff fb23 	bl	80012bc <SetDots>
										SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001c76:	4b17      	ldr	r3, [pc, #92]	@ (8001cd4 <main+0x574>)
 8001c78:	7819      	ldrb	r1, [r3, #0]
 8001c7a:	4b16      	ldr	r3, [pc, #88]	@ (8001cd4 <main+0x574>)
 8001c7c:	785a      	ldrb	r2, [r3, #1]
 8001c7e:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <main+0x574>)
 8001c80:	789b      	ldrb	r3, [r3, #2]
 8001c82:	4815      	ldr	r0, [pc, #84]	@ (8001cd8 <main+0x578>)
 8001c84:	f7fe ff72 	bl	8000b6c <SetTime7Seg_Top>
												sTime.Seconds);
									}

									if (encoderValue == 19) {
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <main+0x57c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b13      	cmp	r3, #19
 8001c8e:	d118      	bne.n	8001cc2 <main+0x562>
										SetSecondLedAccumulating(&clockReg, sTime.Seconds);
 8001c90:	4b10      	ldr	r3, [pc, #64]	@ (8001cd4 <main+0x574>)
 8001c92:	789b      	ldrb	r3, [r3, #2]
 8001c94:	4619      	mov	r1, r3
 8001c96:	4810      	ldr	r0, [pc, #64]	@ (8001cd8 <main+0x578>)
 8001c98:	f7fe fe1b 	bl	80008d2 <SetSecondLedAccumulating>
										SetHourRingCustom(&clockReg, 0, 1);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	480d      	ldr	r0, [pc, #52]	@ (8001cd8 <main+0x578>)
 8001ca2:	f7ff fb3d 	bl	8001320 <SetHourRingCustom>
										SetDots(&clockReg, 1, 1);
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	2101      	movs	r1, #1
 8001caa:	480b      	ldr	r0, [pc, #44]	@ (8001cd8 <main+0x578>)
 8001cac:	f7ff fb06 	bl	80012bc <SetDots>
										SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001cb0:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <main+0x574>)
 8001cb2:	7819      	ldrb	r1, [r3, #0]
 8001cb4:	4b07      	ldr	r3, [pc, #28]	@ (8001cd4 <main+0x574>)
 8001cb6:	785a      	ldrb	r2, [r3, #1]
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <main+0x574>)
 8001cba:	789b      	ldrb	r3, [r3, #2]
 8001cbc:	4806      	ldr	r0, [pc, #24]	@ (8001cd8 <main+0x578>)
 8001cbe:	f7fe ff55 	bl	8000b6c <SetTime7Seg_Top>
												sTime.Seconds);
									}
									if (encoderValue == 20) {
 8001cc2:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <main+0x57c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b14      	cmp	r3, #20
 8001cc8:	d120      	bne.n	8001d0c <main+0x5ac>
										SetSecondLedAccumulating(&clockReg, sTime.Seconds);
 8001cca:	4b02      	ldr	r3, [pc, #8]	@ (8001cd4 <main+0x574>)
 8001ccc:	789b      	ldrb	r3, [r3, #2]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	e006      	b.n	8001ce0 <main+0x580>
 8001cd2:	bf00      	nop
 8001cd4:	200001a0 	.word	0x200001a0
 8001cd8:	200001bc 	.word	0x200001bc
 8001cdc:	200001b8 	.word	0x200001b8
 8001ce0:	4855      	ldr	r0, [pc, #340]	@ (8001e38 <main+0x6d8>)
 8001ce2:	f7fe fdf6 	bl	80008d2 <SetSecondLedAccumulating>
										SetHourRingCustom(&clockReg, 1, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4853      	ldr	r0, [pc, #332]	@ (8001e38 <main+0x6d8>)
 8001cec:	f7ff fb18 	bl	8001320 <SetHourRingCustom>
										SetDots(&clockReg, 1, 1);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	4850      	ldr	r0, [pc, #320]	@ (8001e38 <main+0x6d8>)
 8001cf6:	f7ff fae1 	bl	80012bc <SetDots>
										SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001cfa:	4b50      	ldr	r3, [pc, #320]	@ (8001e3c <main+0x6dc>)
 8001cfc:	7819      	ldrb	r1, [r3, #0]
 8001cfe:	4b4f      	ldr	r3, [pc, #316]	@ (8001e3c <main+0x6dc>)
 8001d00:	785a      	ldrb	r2, [r3, #1]
 8001d02:	4b4e      	ldr	r3, [pc, #312]	@ (8001e3c <main+0x6dc>)
 8001d04:	789b      	ldrb	r3, [r3, #2]
 8001d06:	484c      	ldr	r0, [pc, #304]	@ (8001e38 <main+0x6d8>)
 8001d08:	f7fe ff30 	bl	8000b6c <SetTime7Seg_Top>
												sTime.Seconds);
									}

									if (encoderValue == 21) {
 8001d0c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e40 <main+0x6e0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b15      	cmp	r3, #21
 8001d12:	d118      	bne.n	8001d46 <main+0x5e6>
										SetSecondLedAccumulating(&clockReg, sTime.Seconds);
 8001d14:	4b49      	ldr	r3, [pc, #292]	@ (8001e3c <main+0x6dc>)
 8001d16:	789b      	ldrb	r3, [r3, #2]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4847      	ldr	r0, [pc, #284]	@ (8001e38 <main+0x6d8>)
 8001d1c:	f7fe fdd9 	bl	80008d2 <SetSecondLedAccumulating>
										SetHourRingCustom(&clockReg, 0, 0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2100      	movs	r1, #0
 8001d24:	4844      	ldr	r0, [pc, #272]	@ (8001e38 <main+0x6d8>)
 8001d26:	f7ff fafb 	bl	8001320 <SetHourRingCustom>
										SetDots(&clockReg, 1, 1);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	4842      	ldr	r0, [pc, #264]	@ (8001e38 <main+0x6d8>)
 8001d30:	f7ff fac4 	bl	80012bc <SetDots>
										SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001d34:	4b41      	ldr	r3, [pc, #260]	@ (8001e3c <main+0x6dc>)
 8001d36:	7819      	ldrb	r1, [r3, #0]
 8001d38:	4b40      	ldr	r3, [pc, #256]	@ (8001e3c <main+0x6dc>)
 8001d3a:	785a      	ldrb	r2, [r3, #1]
 8001d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e3c <main+0x6dc>)
 8001d3e:	789b      	ldrb	r3, [r3, #2]
 8001d40:	483d      	ldr	r0, [pc, #244]	@ (8001e38 <main+0x6d8>)
 8001d42:	f7fe ff13 	bl	8000b6c <SetTime7Seg_Top>
												sTime.Seconds);
									}
									if (encoderValue == 22) {
 8001d46:	4b3e      	ldr	r3, [pc, #248]	@ (8001e40 <main+0x6e0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b16      	cmp	r3, #22
 8001d4c:	d11b      	bne.n	8001d86 <main+0x626>
										SetSecondLedAccumulating(&clockReg, sTime.Seconds);
 8001d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e3c <main+0x6dc>)
 8001d50:	789b      	ldrb	r3, [r3, #2]
 8001d52:	4619      	mov	r1, r3
 8001d54:	4838      	ldr	r0, [pc, #224]	@ (8001e38 <main+0x6d8>)
 8001d56:	f7fe fdbc 	bl	80008d2 <SetSecondLedAccumulating>
												SetHourRingCustom(&clockReg, sTime.Hours, sTime.Hours);
 8001d5a:	4b38      	ldr	r3, [pc, #224]	@ (8001e3c <main+0x6dc>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	4a37      	ldr	r2, [pc, #220]	@ (8001e3c <main+0x6dc>)
 8001d60:	7812      	ldrb	r2, [r2, #0]
 8001d62:	4619      	mov	r1, r3
 8001d64:	4834      	ldr	r0, [pc, #208]	@ (8001e38 <main+0x6d8>)
 8001d66:	f7ff fadb 	bl	8001320 <SetHourRingCustom>
												SetDots(&clockReg, 1, 1);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	4832      	ldr	r0, [pc, #200]	@ (8001e38 <main+0x6d8>)
 8001d70:	f7ff faa4 	bl	80012bc <SetDots>
												SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001d74:	4b31      	ldr	r3, [pc, #196]	@ (8001e3c <main+0x6dc>)
 8001d76:	7819      	ldrb	r1, [r3, #0]
 8001d78:	4b30      	ldr	r3, [pc, #192]	@ (8001e3c <main+0x6dc>)
 8001d7a:	785a      	ldrb	r2, [r3, #1]
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e3c <main+0x6dc>)
 8001d7e:	789b      	ldrb	r3, [r3, #2]
 8001d80:	482d      	ldr	r0, [pc, #180]	@ (8001e38 <main+0x6d8>)
 8001d82:	f7fe fef3 	bl	8000b6c <SetTime7Seg_Top>
														sTime.Seconds);
											}
									if (encoderValue == 23) {
 8001d86:	4b2e      	ldr	r3, [pc, #184]	@ (8001e40 <main+0x6e0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b17      	cmp	r3, #23
 8001d8c:	d11b      	bne.n	8001dc6 <main+0x666>
										SetSecondLedAccumulating(&clockReg, sTime.Seconds);
 8001d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e3c <main+0x6dc>)
 8001d90:	789b      	ldrb	r3, [r3, #2]
 8001d92:	4619      	mov	r1, r3
 8001d94:	4828      	ldr	r0, [pc, #160]	@ (8001e38 <main+0x6d8>)
 8001d96:	f7fe fd9c 	bl	80008d2 <SetSecondLedAccumulating>
									SetHourRingCustom(&clockReg, sTime.Hours, sTime.Hours);
 8001d9a:	4b28      	ldr	r3, [pc, #160]	@ (8001e3c <main+0x6dc>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	4a27      	ldr	r2, [pc, #156]	@ (8001e3c <main+0x6dc>)
 8001da0:	7812      	ldrb	r2, [r2, #0]
 8001da2:	4619      	mov	r1, r3
 8001da4:	4824      	ldr	r0, [pc, #144]	@ (8001e38 <main+0x6d8>)
 8001da6:	f7ff fabb 	bl	8001320 <SetHourRingCustom>
									SetDots(&clockReg, 1, 1);
 8001daa:	2201      	movs	r2, #1
 8001dac:	2101      	movs	r1, #1
 8001dae:	4822      	ldr	r0, [pc, #136]	@ (8001e38 <main+0x6d8>)
 8001db0:	f7ff fa84 	bl	80012bc <SetDots>
									SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001db4:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <main+0x6dc>)
 8001db6:	7819      	ldrb	r1, [r3, #0]
 8001db8:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <main+0x6dc>)
 8001dba:	785a      	ldrb	r2, [r3, #1]
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <main+0x6dc>)
 8001dbe:	789b      	ldrb	r3, [r3, #2]
 8001dc0:	481d      	ldr	r0, [pc, #116]	@ (8001e38 <main+0x6d8>)
 8001dc2:	f7fe fed3 	bl	8000b6c <SetTime7Seg_Top>
																sTime.Seconds);
													}

									if (encoderValue == 24) {
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e40 <main+0x6e0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b18      	cmp	r3, #24
 8001dcc:	d11b      	bne.n	8001e06 <main+0x6a6>
																		SetSecondLedAccumulating(&clockReg, sTime.Minutes);
 8001dce:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <main+0x6dc>)
 8001dd0:	785b      	ldrb	r3, [r3, #1]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4818      	ldr	r0, [pc, #96]	@ (8001e38 <main+0x6d8>)
 8001dd6:	f7fe fd7c 	bl	80008d2 <SetSecondLedAccumulating>
																	SetHourRingCustom(&clockReg, sTime.Hours, sTime.Hours);
 8001dda:	4b18      	ldr	r3, [pc, #96]	@ (8001e3c <main+0x6dc>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	4a17      	ldr	r2, [pc, #92]	@ (8001e3c <main+0x6dc>)
 8001de0:	7812      	ldrb	r2, [r2, #0]
 8001de2:	4619      	mov	r1, r3
 8001de4:	4814      	ldr	r0, [pc, #80]	@ (8001e38 <main+0x6d8>)
 8001de6:	f7ff fa9b 	bl	8001320 <SetHourRingCustom>
																	SetDots(&clockReg, 1, 1);
 8001dea:	2201      	movs	r2, #1
 8001dec:	2101      	movs	r1, #1
 8001dee:	4812      	ldr	r0, [pc, #72]	@ (8001e38 <main+0x6d8>)
 8001df0:	f7ff fa64 	bl	80012bc <SetDots>
																	SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <main+0x6dc>)
 8001df6:	7819      	ldrb	r1, [r3, #0]
 8001df8:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <main+0x6dc>)
 8001dfa:	785a      	ldrb	r2, [r3, #1]
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <main+0x6dc>)
 8001dfe:	789b      	ldrb	r3, [r3, #2]
 8001e00:	480d      	ldr	r0, [pc, #52]	@ (8001e38 <main+0x6d8>)
 8001e02:	f7fe feb3 	bl	8000b6c <SetTime7Seg_Top>





		Set7Seg_DisplayLargeNumber(&clockReg, encoderValue);
 8001e06:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <main+0x6e0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	17da      	asrs	r2, r3, #31
 8001e0c:	461c      	mov	r4, r3
 8001e0e:	4615      	mov	r5, r2
 8001e10:	4622      	mov	r2, r4
 8001e12:	462b      	mov	r3, r5
 8001e14:	4808      	ldr	r0, [pc, #32]	@ (8001e38 <main+0x6d8>)
 8001e16:	f7fe ffe3 	bl	8000de0 <Set7Seg_DisplayLargeNumber>

		// Dla przykładu – dolny wyświetlacz: stała wartość
		//SetTime7Seg(&clockReg, 0, encoderValue, 3, false);

		// Aktualizuj rejestry
		UpdateAllDisplays(&clockReg);
 8001e1a:	4807      	ldr	r0, [pc, #28]	@ (8001e38 <main+0x6d8>)
 8001e1c:	f7ff f8cc 	bl	8000fb8 <UpdateAllDisplays>

		// Opóźnij (np. 100 ms)
		// Rozpoczęcie konwersji ADC
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 8001e20:	4808      	ldr	r0, [pc, #32]	@ (8001e44 <main+0x6e4>)
 8001e22:	f000 fd67 	bl	80028f4 <HAL_ADC_Start>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <main+0x6d0>
			Error_Handler();
 8001e2c:	f000 f8de 	bl	8001fec <Error_Handler>
		}
		HAL_Delay(10);
 8001e30:	200a      	movs	r0, #10
 8001e32:	f000 fcf7 	bl	8002824 <HAL_Delay>
		Get_RTC_Time();
 8001e36:	e4d6      	b.n	80017e6 <main+0x86>
 8001e38:	200001bc 	.word	0x200001bc
 8001e3c:	200001a0 	.word	0x200001a0
 8001e40:	200001b8 	.word	0x200001b8
 8001e44:	20000028 	.word	0x20000028

08001e48 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b094      	sub	sp, #80	@ 0x50
 8001e4c:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e4e:	f107 0320 	add.w	r3, r7, #32
 8001e52:	2230      	movs	r2, #48	@ 0x30
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f004 fca6 	bl	80067a8 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]

/** Configure the main internal regulator output voltage
 */
__HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	4b23      	ldr	r3, [pc, #140]	@ (8001f00 <SystemClock_Config+0xb8>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e74:	4a22      	ldr	r2, [pc, #136]	@ (8001f00 <SystemClock_Config+0xb8>)
 8001e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7c:	4b20      	ldr	r3, [pc, #128]	@ (8001f00 <SystemClock_Config+0xb8>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <SystemClock_Config+0xbc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e94:	4a1b      	ldr	r2, [pc, #108]	@ (8001f04 <SystemClock_Config+0xbc>)
 8001e96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <SystemClock_Config+0xbc>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]

/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8001ea8:	2305      	movs	r3, #5
 8001eaa:	623b      	str	r3, [r7, #32]
		| RCC_OSCILLATORTYPE_LSE;
RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001eba:	f107 0320 	add.w	r3, r7, #32
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 ff84 	bl	8003dcc <HAL_RCC_OscConfig>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <SystemClock_Config+0x86>
	Error_Handler();
 8001eca:	f000 f88f 	bl	8001fec <Error_Handler>
}

/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001ece:	230f      	movs	r3, #15
 8001ed0:	60fb      	str	r3, [r7, #12]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f002 f9e7 	bl	80042bc <HAL_RCC_ClockConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <SystemClock_Config+0xb0>
	Error_Handler();
 8001ef4:	f000 f87a 	bl	8001fec <Error_Handler>
}
}
 8001ef8:	bf00      	nop
 8001efa:	3750      	adds	r7, #80	@ 0x50
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40007000 	.word	0x40007000

08001f08 <Set_RTC_Time>:

/* USER CODE BEGIN 4 */
/**
 * @brief Ustawia przykładowy czas w RTC.
 */
void Set_RTC_Time(void) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
RTC_TimeTypeDef time = { 0 };
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
RTC_DateTypeDef date = { 0 };
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	603b      	str	r3, [r7, #0]

time.Hours = 21;
 8001f20:	2315      	movs	r3, #21
 8001f22:	713b      	strb	r3, [r7, #4]
time.Minutes = 56;
 8001f24:	2338      	movs	r3, #56	@ 0x38
 8001f26:	717b      	strb	r3, [r7, #5]
time.Seconds = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	71bb      	strb	r3, [r7, #6]
time.TimeFormat = RTC_HOURFORMAT_24;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	71fb      	strb	r3, [r7, #7]
if (HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) {
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	2200      	movs	r2, #0
 8001f34:	4619      	mov	r1, r3
 8001f36:	480f      	ldr	r0, [pc, #60]	@ (8001f74 <Set_RTC_Time+0x6c>)
 8001f38:	f002 fcfd 	bl	8004936 <HAL_RTC_SetTime>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <Set_RTC_Time+0x3e>
	Error_Handler();
 8001f42:	f000 f853 	bl	8001fec <Error_Handler>
}

date.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001f46:	2302      	movs	r3, #2
 8001f48:	703b      	strb	r3, [r7, #0]
date.Month = RTC_MONTH_JANUARY;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	707b      	strb	r3, [r7, #1]
date.Date = 14;
 8001f4e:	230e      	movs	r3, #14
 8001f50:	70bb      	strb	r3, [r7, #2]
date.Year = 25;  // 2025
 8001f52:	2319      	movs	r3, #25
 8001f54:	70fb      	strb	r3, [r7, #3]
if (HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN) != HAL_OK) {
 8001f56:	463b      	mov	r3, r7
 8001f58:	2200      	movs	r2, #0
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4805      	ldr	r0, [pc, #20]	@ (8001f74 <Set_RTC_Time+0x6c>)
 8001f5e:	f002 fde2 	bl	8004b26 <HAL_RTC_SetDate>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <Set_RTC_Time+0x64>
	Error_Handler();
 8001f68:	f000 f840 	bl	8001fec <Error_Handler>
}
}
 8001f6c:	bf00      	nop
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200001d4 	.word	0x200001d4

08001f78 <Get_RTC_Time>:

/**
 * @brief Odczytuje bieżący czas z RTC.
 */
void Get_RTC_Time(void) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	4905      	ldr	r1, [pc, #20]	@ (8001f94 <Get_RTC_Time+0x1c>)
 8001f80:	4805      	ldr	r0, [pc, #20]	@ (8001f98 <Get_RTC_Time+0x20>)
 8001f82:	f002 fd72 	bl	8004a6a <HAL_RTC_GetTime>
HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001f86:	2200      	movs	r2, #0
 8001f88:	4904      	ldr	r1, [pc, #16]	@ (8001f9c <Get_RTC_Time+0x24>)
 8001f8a:	4803      	ldr	r0, [pc, #12]	@ (8001f98 <Get_RTC_Time+0x20>)
 8001f8c:	f002 fe4f 	bl	8004c2e <HAL_RTC_GetDate>
}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	200001a0 	.word	0x200001a0
 8001f98:	200001d4 	.word	0x200001d4
 8001f9c:	200001b4 	.word	0x200001b4

08001fa0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
// Sprawdź, czy źródłem przerwania jest TIM5
if (htim->Instance == TIM4) {
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe4 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d111      	bne.n	8001fd6 <HAL_TIM_IC_CaptureCallback+0x36>
	// (Opcjonalnie) sprawdź, z którego kanału przyszło wywołanie:
	// if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { ... }
	// albo if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) { ... }

	// Sprawdź kierunek (czy licznik zlicza w dół czy w górę):
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b10      	cmp	r3, #16
 8001fbe:	d105      	bne.n	8001fcc <HAL_TIM_IC_CaptureCallback+0x2c>
		// Liczymy w dół
		encoderValue--;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	4a08      	ldr	r2, [pc, #32]	@ (8001fe8 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001fc8:	6013      	str	r3, [r2, #0]
	} else {
		// Liczymy w górę
		encoderValue++;
	}
}
}
 8001fca:	e004      	b.n	8001fd6 <HAL_TIM_IC_CaptureCallback+0x36>
		encoderValue++;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	4a05      	ldr	r2, [pc, #20]	@ (8001fe8 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001fd4:	6013      	str	r3, [r2, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40000800 	.word	0x40000800
 8001fe8:	200001b8 	.word	0x200001b8

08001fec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff0:	b672      	cpsid	i
}
 8001ff2:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
__disable_irq();
while (1) {
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <Error_Handler+0x8>

08001ff8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800200c:	2300      	movs	r3, #0
 800200e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002010:	4b24      	ldr	r3, [pc, #144]	@ (80020a4 <MX_RTC_Init+0xac>)
 8002012:	4a25      	ldr	r2, [pc, #148]	@ (80020a8 <MX_RTC_Init+0xb0>)
 8002014:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002016:	4b23      	ldr	r3, [pc, #140]	@ (80020a4 <MX_RTC_Init+0xac>)
 8002018:	2200      	movs	r2, #0
 800201a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800201c:	4b21      	ldr	r3, [pc, #132]	@ (80020a4 <MX_RTC_Init+0xac>)
 800201e:	227f      	movs	r2, #127	@ 0x7f
 8002020:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002022:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <MX_RTC_Init+0xac>)
 8002024:	22ff      	movs	r2, #255	@ 0xff
 8002026:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002028:	4b1e      	ldr	r3, [pc, #120]	@ (80020a4 <MX_RTC_Init+0xac>)
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800202e:	4b1d      	ldr	r3, [pc, #116]	@ (80020a4 <MX_RTC_Init+0xac>)
 8002030:	2200      	movs	r2, #0
 8002032:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002034:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <MX_RTC_Init+0xac>)
 8002036:	2200      	movs	r2, #0
 8002038:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800203a:	481a      	ldr	r0, [pc, #104]	@ (80020a4 <MX_RTC_Init+0xac>)
 800203c:	f002 fbf8 	bl	8004830 <HAL_RTC_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002046:	f7ff ffd1 	bl	8001fec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800204a:	2300      	movs	r3, #0
 800204c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800204e:	2300      	movs	r3, #0
 8002050:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002052:	2300      	movs	r3, #0
 8002054:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2201      	movs	r2, #1
 8002062:	4619      	mov	r1, r3
 8002064:	480f      	ldr	r0, [pc, #60]	@ (80020a4 <MX_RTC_Init+0xac>)
 8002066:	f002 fc66 	bl	8004936 <HAL_RTC_SetTime>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002070:	f7ff ffbc 	bl	8001fec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002074:	2301      	movs	r3, #1
 8002076:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002078:	2301      	movs	r3, #1
 800207a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800207c:	2301      	movs	r3, #1
 800207e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002080:	2300      	movs	r3, #0
 8002082:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002084:	463b      	mov	r3, r7
 8002086:	2201      	movs	r2, #1
 8002088:	4619      	mov	r1, r3
 800208a:	4806      	ldr	r0, [pc, #24]	@ (80020a4 <MX_RTC_Init+0xac>)
 800208c:	f002 fd4b 	bl	8004b26 <HAL_RTC_SetDate>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002096:	f7ff ffa9 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200001d4 	.word	0x200001d4
 80020a8:	40002800 	.word	0x40002800

080020ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0c      	ldr	r2, [pc, #48]	@ (80020fc <HAL_RTC_MspInit+0x50>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d111      	bne.n	80020f2 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020ce:	2302      	movs	r3, #2
 80020d0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020d6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 fab9 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80020e8:	f7ff ff80 	bl	8001fec <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020ec:	4b04      	ldr	r3, [pc, #16]	@ (8002100 <HAL_RTC_MspInit+0x54>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80020f2:	bf00      	nop
 80020f4:	3720      	adds	r7, #32
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40002800 	.word	0x40002800
 8002100:	42470e3c 	.word	0x42470e3c

08002104 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002108:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <MX_SPI1_Init+0x64>)
 800210a:	4a18      	ldr	r2, [pc, #96]	@ (800216c <MX_SPI1_Init+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800210e:	4b16      	ldr	r3, [pc, #88]	@ (8002168 <MX_SPI1_Init+0x64>)
 8002110:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002114:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002116:	4b14      	ldr	r3, [pc, #80]	@ (8002168 <MX_SPI1_Init+0x64>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800211c:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <MX_SPI1_Init+0x64>)
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002122:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <MX_SPI1_Init+0x64>)
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002128:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <MX_SPI1_Init+0x64>)
 800212a:	2200      	movs	r2, #0
 800212c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800212e:	4b0e      	ldr	r3, [pc, #56]	@ (8002168 <MX_SPI1_Init+0x64>)
 8002130:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002134:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002136:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <MX_SPI1_Init+0x64>)
 8002138:	2220      	movs	r2, #32
 800213a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800213c:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <MX_SPI1_Init+0x64>)
 800213e:	2200      	movs	r2, #0
 8002140:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002142:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <MX_SPI1_Init+0x64>)
 8002144:	2200      	movs	r2, #0
 8002146:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002148:	4b07      	ldr	r3, [pc, #28]	@ (8002168 <MX_SPI1_Init+0x64>)
 800214a:	2200      	movs	r2, #0
 800214c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800214e:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <MX_SPI1_Init+0x64>)
 8002150:	220a      	movs	r2, #10
 8002152:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002154:	4804      	ldr	r0, [pc, #16]	@ (8002168 <MX_SPI1_Init+0x64>)
 8002156:	f002 fe77 	bl	8004e48 <HAL_SPI_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002160:	f7ff ff44 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}
 8002168:	200001f4 	.word	0x200001f4
 800216c:	40013000 	.word	0x40013000

08002170 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	@ 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a34      	ldr	r2, [pc, #208]	@ (8002260 <HAL_SPI_MspInit+0xf0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d161      	bne.n	8002256 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	4b33      	ldr	r3, [pc, #204]	@ (8002264 <HAL_SPI_MspInit+0xf4>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219a:	4a32      	ldr	r2, [pc, #200]	@ (8002264 <HAL_SPI_MspInit+0xf4>)
 800219c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021a2:	4b30      	ldr	r3, [pc, #192]	@ (8002264 <HAL_SPI_MspInit+0xf4>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002264 <HAL_SPI_MspInit+0xf4>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002264 <HAL_SPI_MspInit+0xf4>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021be:	4b29      	ldr	r3, [pc, #164]	@ (8002264 <HAL_SPI_MspInit+0xf4>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80021ca:	23a0      	movs	r3, #160	@ 0xa0
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021da:	2305      	movs	r3, #5
 80021dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	4820      	ldr	r0, [pc, #128]	@ (8002268 <HAL_SPI_MspInit+0xf8>)
 80021e6:	f001 fafb 	bl	80037e0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80021ea:	4b20      	ldr	r3, [pc, #128]	@ (800226c <HAL_SPI_MspInit+0xfc>)
 80021ec:	4a20      	ldr	r2, [pc, #128]	@ (8002270 <HAL_SPI_MspInit+0x100>)
 80021ee:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80021f0:	4b1e      	ldr	r3, [pc, #120]	@ (800226c <HAL_SPI_MspInit+0xfc>)
 80021f2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80021f6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021f8:	4b1c      	ldr	r3, [pc, #112]	@ (800226c <HAL_SPI_MspInit+0xfc>)
 80021fa:	2240      	movs	r2, #64	@ 0x40
 80021fc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021fe:	4b1b      	ldr	r3, [pc, #108]	@ (800226c <HAL_SPI_MspInit+0xfc>)
 8002200:	2200      	movs	r2, #0
 8002202:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002204:	4b19      	ldr	r3, [pc, #100]	@ (800226c <HAL_SPI_MspInit+0xfc>)
 8002206:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800220a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800220c:	4b17      	ldr	r3, [pc, #92]	@ (800226c <HAL_SPI_MspInit+0xfc>)
 800220e:	2200      	movs	r2, #0
 8002210:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002212:	4b16      	ldr	r3, [pc, #88]	@ (800226c <HAL_SPI_MspInit+0xfc>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002218:	4b14      	ldr	r3, [pc, #80]	@ (800226c <HAL_SPI_MspInit+0xfc>)
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800221e:	4b13      	ldr	r3, [pc, #76]	@ (800226c <HAL_SPI_MspInit+0xfc>)
 8002220:	2200      	movs	r2, #0
 8002222:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002224:	4b11      	ldr	r3, [pc, #68]	@ (800226c <HAL_SPI_MspInit+0xfc>)
 8002226:	2200      	movs	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800222a:	4810      	ldr	r0, [pc, #64]	@ (800226c <HAL_SPI_MspInit+0xfc>)
 800222c:	f000 ff46 	bl	80030bc <HAL_DMA_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8002236:	f7ff fed9 	bl	8001fec <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a0b      	ldr	r2, [pc, #44]	@ (800226c <HAL_SPI_MspInit+0xfc>)
 800223e:	649a      	str	r2, [r3, #72]	@ 0x48
 8002240:	4a0a      	ldr	r2, [pc, #40]	@ (800226c <HAL_SPI_MspInit+0xfc>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2100      	movs	r1, #0
 800224a:	2023      	movs	r0, #35	@ 0x23
 800224c:	f000 feff 	bl	800304e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002250:	2023      	movs	r0, #35	@ 0x23
 8002252:	f000 ff18 	bl	8003086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002256:	bf00      	nop
 8002258:	3728      	adds	r7, #40	@ 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40013000 	.word	0x40013000
 8002264:	40023800 	.word	0x40023800
 8002268:	40020000 	.word	0x40020000
 800226c:	2000024c 	.word	0x2000024c
 8002270:	40026458 	.word	0x40026458

08002274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	4b10      	ldr	r3, [pc, #64]	@ (80022c0 <HAL_MspInit+0x4c>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002282:	4a0f      	ldr	r2, [pc, #60]	@ (80022c0 <HAL_MspInit+0x4c>)
 8002284:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002288:	6453      	str	r3, [r2, #68]	@ 0x44
 800228a:	4b0d      	ldr	r3, [pc, #52]	@ (80022c0 <HAL_MspInit+0x4c>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <HAL_MspInit+0x4c>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	4a08      	ldr	r2, [pc, #32]	@ (80022c0 <HAL_MspInit+0x4c>)
 80022a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a6:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <HAL_MspInit+0x4c>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800

080022c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <NMI_Handler+0x4>

080022cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <HardFault_Handler+0x4>

080022d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <MemManage_Handler+0x4>

080022dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <BusFault_Handler+0x4>

080022e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <UsageFault_Handler+0x4>

080022ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800231a:	f000 fa63 	bl	80027e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002328:	4802      	ldr	r0, [pc, #8]	@ (8002334 <DMA1_Stream2_IRQHandler+0x10>)
 800232a:	f000 ffef 	bl	800330c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200000e0 	.word	0x200000e0

08002338 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800233c:	4802      	ldr	r0, [pc, #8]	@ (8002348 <TIM4_IRQHandler+0x10>)
 800233e:	f003 fbe5 	bl	8005b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200002f4 	.word	0x200002f4

0800234c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002350:	4802      	ldr	r0, [pc, #8]	@ (800235c <SPI1_IRQHandler+0x10>)
 8002352:	f002 feb5 	bl	80050c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200001f4 	.word	0x200001f4

08002360 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002364:	4802      	ldr	r0, [pc, #8]	@ (8002370 <DMA1_Stream7_IRQHandler+0x10>)
 8002366:	f000 ffd1 	bl	800330c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000140 	.word	0x20000140

08002374 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002378:	4802      	ldr	r0, [pc, #8]	@ (8002384 <DMA2_Stream3_IRQHandler+0x10>)
 800237a:	f000 ffc7 	bl	800330c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2000024c 	.word	0x2000024c

08002388 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800238c:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <SystemInit+0x20>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002392:	4a05      	ldr	r2, [pc, #20]	@ (80023a8 <SystemInit+0x20>)
 8002394:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002398:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b096      	sub	sp, #88	@ 0x58
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023b2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	611a      	str	r2, [r3, #16]
 80023da:	615a      	str	r2, [r3, #20]
 80023dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	2220      	movs	r2, #32
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f004 f9df 	bl	80067a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023ea:	4b3e      	ldr	r3, [pc, #248]	@ (80024e4 <MX_TIM1_Init+0x138>)
 80023ec:	4a3e      	ldr	r2, [pc, #248]	@ (80024e8 <MX_TIM1_Init+0x13c>)
 80023ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 80023f0:	4b3c      	ldr	r3, [pc, #240]	@ (80024e4 <MX_TIM1_Init+0x138>)
 80023f2:	2218      	movs	r2, #24
 80023f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f6:	4b3b      	ldr	r3, [pc, #236]	@ (80024e4 <MX_TIM1_Init+0x138>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80023fc:	4b39      	ldr	r3, [pc, #228]	@ (80024e4 <MX_TIM1_Init+0x138>)
 80023fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002402:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002404:	4b37      	ldr	r3, [pc, #220]	@ (80024e4 <MX_TIM1_Init+0x138>)
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800240a:	4b36      	ldr	r3, [pc, #216]	@ (80024e4 <MX_TIM1_Init+0x138>)
 800240c:	2200      	movs	r2, #0
 800240e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002410:	4b34      	ldr	r3, [pc, #208]	@ (80024e4 <MX_TIM1_Init+0x138>)
 8002412:	2200      	movs	r2, #0
 8002414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002416:	4833      	ldr	r0, [pc, #204]	@ (80024e4 <MX_TIM1_Init+0x138>)
 8002418:	f003 f8cc 	bl	80055b4 <HAL_TIM_Base_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002422:	f7ff fde3 	bl	8001fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002426:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800242a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800242c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002430:	4619      	mov	r1, r3
 8002432:	482c      	ldr	r0, [pc, #176]	@ (80024e4 <MX_TIM1_Init+0x138>)
 8002434:	f003 fd1c 	bl	8005e70 <HAL_TIM_ConfigClockSource>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800243e:	f7ff fdd5 	bl	8001fec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002442:	4828      	ldr	r0, [pc, #160]	@ (80024e4 <MX_TIM1_Init+0x138>)
 8002444:	f003 f905 	bl	8005652 <HAL_TIM_PWM_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800244e:	f7ff fdcd 	bl	8001fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800245a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800245e:	4619      	mov	r1, r3
 8002460:	4820      	ldr	r0, [pc, #128]	@ (80024e4 <MX_TIM1_Init+0x138>)
 8002462:	f004 f8cd 	bl	8006600 <HAL_TIMEx_MasterConfigSynchronization>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800246c:	f7ff fdbe 	bl	8001fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002470:	2360      	movs	r3, #96	@ 0x60
 8002472:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002478:	2302      	movs	r3, #2
 800247a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800247c:	2300      	movs	r3, #0
 800247e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002484:	2300      	movs	r3, #0
 8002486:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002488:	2300      	movs	r3, #0
 800248a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800248c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002490:	2200      	movs	r2, #0
 8002492:	4619      	mov	r1, r3
 8002494:	4813      	ldr	r0, [pc, #76]	@ (80024e4 <MX_TIM1_Init+0x138>)
 8002496:	f003 fc29 	bl	8005cec <HAL_TIM_PWM_ConfigChannel>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80024a0:	f7ff fda4 	bl	8001fec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	4619      	mov	r1, r3
 80024c6:	4807      	ldr	r0, [pc, #28]	@ (80024e4 <MX_TIM1_Init+0x138>)
 80024c8:	f004 f908 	bl	80066dc <HAL_TIMEx_ConfigBreakDeadTime>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80024d2:	f7ff fd8b 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024d6:	4803      	ldr	r0, [pc, #12]	@ (80024e4 <MX_TIM1_Init+0x138>)
 80024d8:	f000 f8ce 	bl	8002678 <HAL_TIM_MspPostInit>

}
 80024dc:	bf00      	nop
 80024de:	3758      	adds	r7, #88	@ 0x58
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200002ac 	.word	0x200002ac
 80024e8:	40010000 	.word	0x40010000

080024ec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08c      	sub	sp, #48	@ 0x30
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024f2:	f107 030c 	add.w	r3, r7, #12
 80024f6:	2224      	movs	r2, #36	@ 0x24
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f004 f954 	bl	80067a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002508:	4b20      	ldr	r3, [pc, #128]	@ (800258c <MX_TIM4_Init+0xa0>)
 800250a:	4a21      	ldr	r2, [pc, #132]	@ (8002590 <MX_TIM4_Init+0xa4>)
 800250c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800250e:	4b1f      	ldr	r3, [pc, #124]	@ (800258c <MX_TIM4_Init+0xa0>)
 8002510:	2200      	movs	r2, #0
 8002512:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002514:	4b1d      	ldr	r3, [pc, #116]	@ (800258c <MX_TIM4_Init+0xa0>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800251a:	4b1c      	ldr	r3, [pc, #112]	@ (800258c <MX_TIM4_Init+0xa0>)
 800251c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002520:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002522:	4b1a      	ldr	r3, [pc, #104]	@ (800258c <MX_TIM4_Init+0xa0>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002528:	4b18      	ldr	r3, [pc, #96]	@ (800258c <MX_TIM4_Init+0xa0>)
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800252e:	2301      	movs	r3, #1
 8002530:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002536:	2301      	movs	r3, #1
 8002538:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002542:	2302      	movs	r3, #2
 8002544:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002546:	2301      	movs	r3, #1
 8002548:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800254a:	2300      	movs	r3, #0
 800254c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002552:	f107 030c 	add.w	r3, r7, #12
 8002556:	4619      	mov	r1, r3
 8002558:	480c      	ldr	r0, [pc, #48]	@ (800258c <MX_TIM4_Init+0xa0>)
 800255a:	f003 f983 	bl	8005864 <HAL_TIM_Encoder_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002564:	f7ff fd42 	bl	8001fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002568:	2300      	movs	r3, #0
 800256a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	4619      	mov	r1, r3
 8002574:	4805      	ldr	r0, [pc, #20]	@ (800258c <MX_TIM4_Init+0xa0>)
 8002576:	f004 f843 	bl	8006600 <HAL_TIMEx_MasterConfigSynchronization>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002580:	f7ff fd34 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002584:	bf00      	nop
 8002586:	3730      	adds	r7, #48	@ 0x30
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	200002f4 	.word	0x200002f4
 8002590:	40000800 	.word	0x40000800

08002594 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0b      	ldr	r2, [pc, #44]	@ (80025d0 <HAL_TIM_Base_MspInit+0x3c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d10d      	bne.n	80025c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	4b0a      	ldr	r3, [pc, #40]	@ (80025d4 <HAL_TIM_Base_MspInit+0x40>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ae:	4a09      	ldr	r2, [pc, #36]	@ (80025d4 <HAL_TIM_Base_MspInit+0x40>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b6:	4b07      	ldr	r3, [pc, #28]	@ (80025d4 <HAL_TIM_Base_MspInit+0x40>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40010000 	.word	0x40010000
 80025d4:	40023800 	.word	0x40023800

080025d8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	@ 0x28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a1d      	ldr	r2, [pc, #116]	@ (800266c <HAL_TIM_Encoder_MspInit+0x94>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d133      	bne.n	8002662 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002670 <HAL_TIM_Encoder_MspInit+0x98>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	4a1b      	ldr	r2, [pc, #108]	@ (8002670 <HAL_TIM_Encoder_MspInit+0x98>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6413      	str	r3, [r2, #64]	@ 0x40
 800260a:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <HAL_TIM_Encoder_MspInit+0x98>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b15      	ldr	r3, [pc, #84]	@ (8002670 <HAL_TIM_Encoder_MspInit+0x98>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	4a14      	ldr	r2, [pc, #80]	@ (8002670 <HAL_TIM_Encoder_MspInit+0x98>)
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	6313      	str	r3, [r2, #48]	@ 0x30
 8002626:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <HAL_TIM_Encoder_MspInit+0x98>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002632:	23c0      	movs	r3, #192	@ 0xc0
 8002634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002636:	2302      	movs	r3, #2
 8002638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800263a:	2302      	movs	r3, #2
 800263c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263e:	2300      	movs	r3, #0
 8002640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002642:	2302      	movs	r3, #2
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002646:	f107 0314 	add.w	r3, r7, #20
 800264a:	4619      	mov	r1, r3
 800264c:	4809      	ldr	r0, [pc, #36]	@ (8002674 <HAL_TIM_Encoder_MspInit+0x9c>)
 800264e:	f001 f8c7 	bl	80037e0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	201e      	movs	r0, #30
 8002658:	f000 fcf9 	bl	800304e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800265c:	201e      	movs	r0, #30
 800265e:	f000 fd12 	bl	8003086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002662:	bf00      	nop
 8002664:	3728      	adds	r7, #40	@ 0x28
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40000800 	.word	0x40000800
 8002670:	40023800 	.word	0x40023800
 8002674:	40020400 	.word	0x40020400

08002678 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	f107 030c 	add.w	r3, r7, #12
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a12      	ldr	r2, [pc, #72]	@ (80026e0 <HAL_TIM_MspPostInit+0x68>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d11e      	bne.n	80026d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	4b11      	ldr	r3, [pc, #68]	@ (80026e4 <HAL_TIM_MspPostInit+0x6c>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	4a10      	ldr	r2, [pc, #64]	@ (80026e4 <HAL_TIM_MspPostInit+0x6c>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026aa:	4b0e      	ldr	r3, [pc, #56]	@ (80026e4 <HAL_TIM_MspPostInit+0x6c>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026c8:	2301      	movs	r3, #1
 80026ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026cc:	f107 030c 	add.w	r3, r7, #12
 80026d0:	4619      	mov	r1, r3
 80026d2:	4805      	ldr	r0, [pc, #20]	@ (80026e8 <HAL_TIM_MspPostInit+0x70>)
 80026d4:	f001 f884 	bl	80037e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026d8:	bf00      	nop
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40010000 	.word	0x40010000
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40020000 	.word	0x40020000

080026ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002724 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026f0:	f7ff fe4a 	bl	8002388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026f4:	480c      	ldr	r0, [pc, #48]	@ (8002728 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026f6:	490d      	ldr	r1, [pc, #52]	@ (800272c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002730 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026fc:	e002      	b.n	8002704 <LoopCopyDataInit>

080026fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002702:	3304      	adds	r3, #4

08002704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002708:	d3f9      	bcc.n	80026fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800270a:	4a0a      	ldr	r2, [pc, #40]	@ (8002734 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800270c:	4c0a      	ldr	r4, [pc, #40]	@ (8002738 <LoopFillZerobss+0x22>)
  movs r3, #0
 800270e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002710:	e001      	b.n	8002716 <LoopFillZerobss>

08002712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002714:	3204      	adds	r2, #4

08002716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002718:	d3fb      	bcc.n	8002712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800271a:	f004 f84d 	bl	80067b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800271e:	f7ff f81f 	bl	8001760 <main>
  bx  lr    
 8002722:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002724:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800272c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002730:	080068dc 	.word	0x080068dc
  ldr r2, =_sbss
 8002734:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002738:	20000340 	.word	0x20000340

0800273c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800273c:	e7fe      	b.n	800273c <ADC_IRQHandler>
	...

08002740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002744:	4b0e      	ldr	r3, [pc, #56]	@ (8002780 <HAL_Init+0x40>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0d      	ldr	r2, [pc, #52]	@ (8002780 <HAL_Init+0x40>)
 800274a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800274e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002750:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <HAL_Init+0x40>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a0a      	ldr	r2, [pc, #40]	@ (8002780 <HAL_Init+0x40>)
 8002756:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800275a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800275c:	4b08      	ldr	r3, [pc, #32]	@ (8002780 <HAL_Init+0x40>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a07      	ldr	r2, [pc, #28]	@ (8002780 <HAL_Init+0x40>)
 8002762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002768:	2003      	movs	r0, #3
 800276a:	f000 fc65 	bl	8003038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800276e:	200f      	movs	r0, #15
 8002770:	f000 f808 	bl	8002784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002774:	f7ff fd7e 	bl	8002274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023c00 	.word	0x40023c00

08002784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800278c:	4b12      	ldr	r3, [pc, #72]	@ (80027d8 <HAL_InitTick+0x54>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <HAL_InitTick+0x58>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	4619      	mov	r1, r3
 8002796:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800279a:	fbb3 f3f1 	udiv	r3, r3, r1
 800279e:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fc7d 	bl	80030a2 <HAL_SYSTICK_Config>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00e      	b.n	80027d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b0f      	cmp	r3, #15
 80027b6:	d80a      	bhi.n	80027ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027b8:	2200      	movs	r2, #0
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	f000 fc45 	bl	800304e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027c4:	4a06      	ldr	r2, [pc, #24]	@ (80027e0 <HAL_InitTick+0x5c>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e000      	b.n	80027d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000000 	.word	0x20000000
 80027dc:	20000008 	.word	0x20000008
 80027e0:	20000004 	.word	0x20000004

080027e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027e8:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_IncTick+0x20>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <HAL_IncTick+0x24>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	4a04      	ldr	r2, [pc, #16]	@ (8002808 <HAL_IncTick+0x24>)
 80027f6:	6013      	str	r3, [r2, #0]
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000008 	.word	0x20000008
 8002808:	2000033c 	.word	0x2000033c

0800280c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return uwTick;
 8002810:	4b03      	ldr	r3, [pc, #12]	@ (8002820 <HAL_GetTick+0x14>)
 8002812:	681b      	ldr	r3, [r3, #0]
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	2000033c 	.word	0x2000033c

08002824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800282c:	f7ff ffee 	bl	800280c <HAL_GetTick>
 8002830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d005      	beq.n	800284a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800283e:	4b0a      	ldr	r3, [pc, #40]	@ (8002868 <HAL_Delay+0x44>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4413      	add	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800284a:	bf00      	nop
 800284c:	f7ff ffde 	bl	800280c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	429a      	cmp	r2, r3
 800285a:	d8f7      	bhi.n	800284c <HAL_Delay+0x28>
  {
  }
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000008 	.word	0x20000008

0800286c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e033      	b.n	80028ea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fd fe6c 	bl	8000568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d118      	bne.n	80028dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028b2:	f023 0302 	bic.w	r3, r3, #2
 80028b6:	f043 0202 	orr.w	r2, r3, #2
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f9ee 	bl	8002ca0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	f023 0303 	bic.w	r3, r3, #3
 80028d2:	f043 0201 	orr.w	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80028da:	e001      	b.n	80028e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_ADC_Start+0x1a>
 800290a:	2302      	movs	r3, #2
 800290c:	e097      	b.n	8002a3e <HAL_ADC_Start+0x14a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b01      	cmp	r3, #1
 8002922:	d018      	beq.n	8002956 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002934:	4b45      	ldr	r3, [pc, #276]	@ (8002a4c <HAL_ADC_Start+0x158>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a45      	ldr	r2, [pc, #276]	@ (8002a50 <HAL_ADC_Start+0x15c>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	0c9a      	lsrs	r2, r3, #18
 8002940:	4613      	mov	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002948:	e002      	b.n	8002950 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	3b01      	subs	r3, #1
 800294e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f9      	bne.n	800294a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d15f      	bne.n	8002a24 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800298e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800299e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029a2:	d106      	bne.n	80029b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a8:	f023 0206 	bic.w	r2, r3, #6
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	645a      	str	r2, [r3, #68]	@ 0x44
 80029b0:	e002      	b.n	80029b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029c0:	4b24      	ldr	r3, [pc, #144]	@ (8002a54 <HAL_ADC_Start+0x160>)
 80029c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80029cc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10f      	bne.n	80029fa <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d129      	bne.n	8002a3c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	e020      	b.n	8002a3c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a16      	ldr	r2, [pc, #88]	@ (8002a58 <HAL_ADC_Start+0x164>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d11b      	bne.n	8002a3c <HAL_ADC_Start+0x148>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d114      	bne.n	8002a3c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	e00b      	b.n	8002a3c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a28:	f043 0210 	orr.w	r2, r3, #16
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a34:	f043 0201 	orr.w	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	431bde83 	.word	0x431bde83
 8002a54:	40012300 	.word	0x40012300
 8002a58:	40012000 	.word	0x40012000

08002a5c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x1c>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e105      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x228>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b09      	cmp	r3, #9
 8002a86:	d925      	bls.n	8002ad4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68d9      	ldr	r1, [r3, #12]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	4613      	mov	r3, r2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3b1e      	subs	r3, #30
 8002a9e:	2207      	movs	r2, #7
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43da      	mvns	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	400a      	ands	r2, r1
 8002aac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68d9      	ldr	r1, [r3, #12]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	4618      	mov	r0, r3
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4403      	add	r3, r0
 8002ac6:	3b1e      	subs	r3, #30
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	e022      	b.n	8002b1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6919      	ldr	r1, [r3, #16]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	2207      	movs	r2, #7
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43da      	mvns	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	400a      	ands	r2, r1
 8002af6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6919      	ldr	r1, [r3, #16]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	4618      	mov	r0, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4403      	add	r3, r0
 8002b10:	409a      	lsls	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b06      	cmp	r3, #6
 8002b20:	d824      	bhi.n	8002b6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	3b05      	subs	r3, #5
 8002b34:	221f      	movs	r2, #31
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	400a      	ands	r2, r1
 8002b42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4618      	mov	r0, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3b05      	subs	r3, #5
 8002b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b6a:	e04c      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b0c      	cmp	r3, #12
 8002b72:	d824      	bhi.n	8002bbe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	3b23      	subs	r3, #35	@ 0x23
 8002b86:	221f      	movs	r2, #31
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43da      	mvns	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	400a      	ands	r2, r1
 8002b94:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	3b23      	subs	r3, #35	@ 0x23
 8002bb0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bbc:	e023      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	3b41      	subs	r3, #65	@ 0x41
 8002bd0:	221f      	movs	r2, #31
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	400a      	ands	r2, r1
 8002bde:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	4618      	mov	r0, r3
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3b41      	subs	r3, #65	@ 0x41
 8002bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c06:	4b22      	ldr	r3, [pc, #136]	@ (8002c90 <HAL_ADC_ConfigChannel+0x234>)
 8002c08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a21      	ldr	r2, [pc, #132]	@ (8002c94 <HAL_ADC_ConfigChannel+0x238>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d109      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x1cc>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b12      	cmp	r3, #18
 8002c1a:	d105      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a19      	ldr	r2, [pc, #100]	@ (8002c94 <HAL_ADC_ConfigChannel+0x238>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d123      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x21e>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d003      	beq.n	8002c42 <HAL_ADC_ConfigChannel+0x1e6>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b11      	cmp	r3, #17
 8002c40:	d11b      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d111      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c56:	4b10      	ldr	r3, [pc, #64]	@ (8002c98 <HAL_ADC_ConfigChannel+0x23c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a10      	ldr	r2, [pc, #64]	@ (8002c9c <HAL_ADC_ConfigChannel+0x240>)
 8002c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c60:	0c9a      	lsrs	r2, r3, #18
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c6c:	e002      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f9      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	40012300 	.word	0x40012300
 8002c94:	40012000 	.word	0x40012000
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	431bde83 	.word	0x431bde83

08002ca0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ca8:	4b79      	ldr	r3, [pc, #484]	@ (8002e90 <ADC_Init+0x1f0>)
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6859      	ldr	r1, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	021a      	lsls	r2, r3, #8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6899      	ldr	r1, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d32:	4a58      	ldr	r2, [pc, #352]	@ (8002e94 <ADC_Init+0x1f4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d022      	beq.n	8002d7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6899      	ldr	r1, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6899      	ldr	r1, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	e00f      	b.n	8002d9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d9c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0202 	bic.w	r2, r2, #2
 8002dac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6899      	ldr	r1, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	7e1b      	ldrb	r3, [r3, #24]
 8002db8:	005a      	lsls	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01b      	beq.n	8002e04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dda:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002dea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6859      	ldr	r1, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	3b01      	subs	r3, #1
 8002df8:	035a      	lsls	r2, r3, #13
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	e007      	b.n	8002e14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e12:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002e22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	051a      	lsls	r2, r3, #20
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6899      	ldr	r1, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e56:	025a      	lsls	r2, r3, #9
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6899      	ldr	r1, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	029a      	lsls	r2, r3, #10
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	609a      	str	r2, [r3, #8]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	40012300 	.word	0x40012300
 8002e94:	0f000001 	.word	0x0f000001

08002e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <__NVIC_SetPriorityGrouping+0x44>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ec0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eca:	4a04      	ldr	r2, [pc, #16]	@ (8002edc <__NVIC_SetPriorityGrouping+0x44>)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	60d3      	str	r3, [r2, #12]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee4:	4b04      	ldr	r3, [pc, #16]	@ (8002ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	0a1b      	lsrs	r3, r3, #8
 8002eea:	f003 0307 	and.w	r3, r3, #7
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	db0b      	blt.n	8002f26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	f003 021f 	and.w	r2, r3, #31
 8002f14:	4907      	ldr	r1, [pc, #28]	@ (8002f34 <__NVIC_EnableIRQ+0x38>)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	e000e100 	.word	0xe000e100

08002f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	6039      	str	r1, [r7, #0]
 8002f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	db0a      	blt.n	8002f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	490c      	ldr	r1, [pc, #48]	@ (8002f84 <__NVIC_SetPriority+0x4c>)
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	0112      	lsls	r2, r2, #4
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f60:	e00a      	b.n	8002f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	4908      	ldr	r1, [pc, #32]	@ (8002f88 <__NVIC_SetPriority+0x50>)
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	3b04      	subs	r3, #4
 8002f70:	0112      	lsls	r2, r2, #4
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	440b      	add	r3, r1
 8002f76:	761a      	strb	r2, [r3, #24]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000e100 	.word	0xe000e100
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b089      	sub	sp, #36	@ 0x24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f1c3 0307 	rsb	r3, r3, #7
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	bf28      	it	cs
 8002faa:	2304      	movcs	r3, #4
 8002fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	2b06      	cmp	r3, #6
 8002fb4:	d902      	bls.n	8002fbc <NVIC_EncodePriority+0x30>
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3b03      	subs	r3, #3
 8002fba:	e000      	b.n	8002fbe <NVIC_EncodePriority+0x32>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43da      	mvns	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	401a      	ands	r2, r3
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	43d9      	mvns	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe4:	4313      	orrs	r3, r2
         );
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3724      	adds	r7, #36	@ 0x24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003004:	d301      	bcc.n	800300a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003006:	2301      	movs	r3, #1
 8003008:	e00f      	b.n	800302a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800300a:	4a0a      	ldr	r2, [pc, #40]	@ (8003034 <SysTick_Config+0x40>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003012:	210f      	movs	r1, #15
 8003014:	f04f 30ff 	mov.w	r0, #4294967295
 8003018:	f7ff ff8e 	bl	8002f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800301c:	4b05      	ldr	r3, [pc, #20]	@ (8003034 <SysTick_Config+0x40>)
 800301e:	2200      	movs	r2, #0
 8003020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003022:	4b04      	ldr	r3, [pc, #16]	@ (8003034 <SysTick_Config+0x40>)
 8003024:	2207      	movs	r2, #7
 8003026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	e000e010 	.word	0xe000e010

08003038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff ff29 	bl	8002e98 <__NVIC_SetPriorityGrouping>
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800304e:	b580      	push	{r7, lr}
 8003050:	b086      	sub	sp, #24
 8003052:	af00      	add	r7, sp, #0
 8003054:	4603      	mov	r3, r0
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003060:	f7ff ff3e 	bl	8002ee0 <__NVIC_GetPriorityGrouping>
 8003064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	6978      	ldr	r0, [r7, #20]
 800306c:	f7ff ff8e 	bl	8002f8c <NVIC_EncodePriority>
 8003070:	4602      	mov	r2, r0
 8003072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003076:	4611      	mov	r1, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff ff5d 	bl	8002f38 <__NVIC_SetPriority>
}
 800307e:	bf00      	nop
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	4603      	mov	r3, r0
 800308e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ff31 	bl	8002efc <__NVIC_EnableIRQ>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff ffa2 	bl	8002ff4 <SysTick_Config>
 80030b0:	4603      	mov	r3, r0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030c8:	f7ff fba0 	bl	800280c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e099      	b.n	800320c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f8:	e00f      	b.n	800311a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030fa:	f7ff fb87 	bl	800280c <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b05      	cmp	r3, #5
 8003106:	d908      	bls.n	800311a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2203      	movs	r2, #3
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e078      	b.n	800320c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e8      	bne.n	80030fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4b38      	ldr	r3, [pc, #224]	@ (8003214 <HAL_DMA_Init+0x158>)
 8003134:	4013      	ands	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003146:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003152:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	2b04      	cmp	r3, #4
 8003172:	d107      	bne.n	8003184 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317c:	4313      	orrs	r3, r2
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f023 0307 	bic.w	r3, r3, #7
 800319a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d117      	bne.n	80031de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00e      	beq.n	80031de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fa91 	bl	80036e8 <DMA_CheckFifoParam>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2240      	movs	r2, #64	@ 0x40
 80031d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80031da:	2301      	movs	r3, #1
 80031dc:	e016      	b.n	800320c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa48 	bl	800367c <DMA_CalcBaseAndBitshift>
 80031ec:	4603      	mov	r3, r0
 80031ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f4:	223f      	movs	r2, #63	@ 0x3f
 80031f6:	409a      	lsls	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	f010803f 	.word	0xf010803f

08003218 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_DMA_Start_IT+0x26>
 800323a:	2302      	movs	r3, #2
 800323c:	e040      	b.n	80032c0 <HAL_DMA_Start_IT+0xa8>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d12f      	bne.n	80032b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2202      	movs	r2, #2
 8003256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f9da 	bl	8003620 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003270:	223f      	movs	r2, #63	@ 0x3f
 8003272:	409a      	lsls	r2, r3
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0216 	orr.w	r2, r2, #22
 8003286:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0208 	orr.w	r2, r2, #8
 800329e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	e005      	b.n	80032be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
 80032bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032be:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d004      	beq.n	80032e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2280      	movs	r2, #128	@ 0x80
 80032e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e00c      	b.n	8003300 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2205      	movs	r2, #5
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003318:	4b8e      	ldr	r3, [pc, #568]	@ (8003554 <HAL_DMA_IRQHandler+0x248>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a8e      	ldr	r2, [pc, #568]	@ (8003558 <HAL_DMA_IRQHandler+0x24c>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	0a9b      	lsrs	r3, r3, #10
 8003324:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003336:	2208      	movs	r2, #8
 8003338:	409a      	lsls	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d01a      	beq.n	8003378 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d013      	beq.n	8003378 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0204 	bic.w	r2, r2, #4
 800335e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003364:	2208      	movs	r2, #8
 8003366:	409a      	lsls	r2, r3
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003370:	f043 0201 	orr.w	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337c:	2201      	movs	r2, #1
 800337e:	409a      	lsls	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d012      	beq.n	80033ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00b      	beq.n	80033ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339a:	2201      	movs	r2, #1
 800339c:	409a      	lsls	r2, r3
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a6:	f043 0202 	orr.w	r2, r3, #2
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b2:	2204      	movs	r2, #4
 80033b4:	409a      	lsls	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d012      	beq.n	80033e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00b      	beq.n	80033e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d0:	2204      	movs	r2, #4
 80033d2:	409a      	lsls	r2, r3
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033dc:	f043 0204 	orr.w	r2, r3, #4
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e8:	2210      	movs	r2, #16
 80033ea:	409a      	lsls	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d043      	beq.n	800347c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d03c      	beq.n	800347c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003406:	2210      	movs	r2, #16
 8003408:	409a      	lsls	r2, r3
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d018      	beq.n	800344e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d108      	bne.n	800343c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d024      	beq.n	800347c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
 800343a:	e01f      	b.n	800347c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01b      	beq.n	800347c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4798      	blx	r3
 800344c:	e016      	b.n	800347c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d107      	bne.n	800346c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0208 	bic.w	r2, r2, #8
 800346a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003480:	2220      	movs	r2, #32
 8003482:	409a      	lsls	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 808f 	beq.w	80035ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8087 	beq.w	80035ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a2:	2220      	movs	r2, #32
 80034a4:	409a      	lsls	r2, r3
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b05      	cmp	r3, #5
 80034b4:	d136      	bne.n	8003524 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0216 	bic.w	r2, r2, #22
 80034c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d103      	bne.n	80034e6 <HAL_DMA_IRQHandler+0x1da>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0208 	bic.w	r2, r2, #8
 80034f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fa:	223f      	movs	r2, #63	@ 0x3f
 80034fc:	409a      	lsls	r2, r3
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003516:	2b00      	cmp	r3, #0
 8003518:	d07e      	beq.n	8003618 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4798      	blx	r3
        }
        return;
 8003522:	e079      	b.n	8003618 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d01d      	beq.n	800356e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10d      	bne.n	800355c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003544:	2b00      	cmp	r3, #0
 8003546:	d031      	beq.n	80035ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	4798      	blx	r3
 8003550:	e02c      	b.n	80035ac <HAL_DMA_IRQHandler+0x2a0>
 8003552:	bf00      	nop
 8003554:	20000000 	.word	0x20000000
 8003558:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d023      	beq.n	80035ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
 800356c:	e01e      	b.n	80035ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10f      	bne.n	800359c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0210 	bic.w	r2, r2, #16
 800358a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d032      	beq.n	800361a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d022      	beq.n	8003606 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2205      	movs	r2, #5
 80035c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0201 	bic.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	3301      	adds	r3, #1
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d307      	bcc.n	80035f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f2      	bne.n	80035d8 <HAL_DMA_IRQHandler+0x2cc>
 80035f2:	e000      	b.n	80035f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4798      	blx	r3
 8003616:	e000      	b.n	800361a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003618:	bf00      	nop
    }
  }
}
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800363c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b40      	cmp	r3, #64	@ 0x40
 800364c:	d108      	bne.n	8003660 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800365e:	e007      	b.n	8003670 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	60da      	str	r2, [r3, #12]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	3b10      	subs	r3, #16
 800368c:	4a14      	ldr	r2, [pc, #80]	@ (80036e0 <DMA_CalcBaseAndBitshift+0x64>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	091b      	lsrs	r3, r3, #4
 8003694:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003696:	4a13      	ldr	r2, [pc, #76]	@ (80036e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d909      	bls.n	80036be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036b2:	f023 0303 	bic.w	r3, r3, #3
 80036b6:	1d1a      	adds	r2, r3, #4
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80036bc:	e007      	b.n	80036ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036c6:	f023 0303 	bic.w	r3, r3, #3
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	aaaaaaab 	.word	0xaaaaaaab
 80036e4:	080068c4 	.word	0x080068c4

080036e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d11f      	bne.n	8003742 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b03      	cmp	r3, #3
 8003706:	d856      	bhi.n	80037b6 <DMA_CheckFifoParam+0xce>
 8003708:	a201      	add	r2, pc, #4	@ (adr r2, 8003710 <DMA_CheckFifoParam+0x28>)
 800370a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370e:	bf00      	nop
 8003710:	08003721 	.word	0x08003721
 8003714:	08003733 	.word	0x08003733
 8003718:	08003721 	.word	0x08003721
 800371c:	080037b7 	.word	0x080037b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003724:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d046      	beq.n	80037ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003730:	e043      	b.n	80037ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003736:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800373a:	d140      	bne.n	80037be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003740:	e03d      	b.n	80037be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800374a:	d121      	bne.n	8003790 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b03      	cmp	r3, #3
 8003750:	d837      	bhi.n	80037c2 <DMA_CheckFifoParam+0xda>
 8003752:	a201      	add	r2, pc, #4	@ (adr r2, 8003758 <DMA_CheckFifoParam+0x70>)
 8003754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003758:	08003769 	.word	0x08003769
 800375c:	0800376f 	.word	0x0800376f
 8003760:	08003769 	.word	0x08003769
 8003764:	08003781 	.word	0x08003781
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
      break;
 800376c:	e030      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003772:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d025      	beq.n	80037c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377e:	e022      	b.n	80037c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003784:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003788:	d11f      	bne.n	80037ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800378e:	e01c      	b.n	80037ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d903      	bls.n	800379e <DMA_CheckFifoParam+0xb6>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d003      	beq.n	80037a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800379c:	e018      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
      break;
 80037a2:	e015      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00e      	beq.n	80037ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
      break;
 80037b4:	e00b      	b.n	80037ce <DMA_CheckFifoParam+0xe6>
      break;
 80037b6:	bf00      	nop
 80037b8:	e00a      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ba:	bf00      	nop
 80037bc:	e008      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
      break;
 80037be:	bf00      	nop
 80037c0:	e006      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
      break;
 80037c2:	bf00      	nop
 80037c4:	e004      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
      break;
 80037c6:	bf00      	nop
 80037c8:	e002      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037ca:	bf00      	nop
 80037cc:	e000      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ce:	bf00      	nop
    }
  } 
  
  return status; 
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop

080037e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	@ 0x24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037f6:	2300      	movs	r3, #0
 80037f8:	61fb      	str	r3, [r7, #28]
 80037fa:	e159      	b.n	8003ab0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037fc:	2201      	movs	r2, #1
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4013      	ands	r3, r2
 800380e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	429a      	cmp	r2, r3
 8003816:	f040 8148 	bne.w	8003aaa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b01      	cmp	r3, #1
 8003824:	d005      	beq.n	8003832 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800382e:	2b02      	cmp	r3, #2
 8003830:	d130      	bne.n	8003894 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	2203      	movs	r2, #3
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003868:	2201      	movs	r2, #1
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 0201 	and.w	r2, r3, #1
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4313      	orrs	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	2b03      	cmp	r3, #3
 800389e:	d017      	beq.n	80038d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	2203      	movs	r2, #3
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d123      	bne.n	8003924 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	08da      	lsrs	r2, r3, #3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3208      	adds	r2, #8
 80038e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	220f      	movs	r2, #15
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	08da      	lsrs	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3208      	adds	r2, #8
 800391e:	69b9      	ldr	r1, [r7, #24]
 8003920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	2203      	movs	r2, #3
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0203 	and.w	r2, r3, #3
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80a2 	beq.w	8003aaa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	4b57      	ldr	r3, [pc, #348]	@ (8003ac8 <HAL_GPIO_Init+0x2e8>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396e:	4a56      	ldr	r2, [pc, #344]	@ (8003ac8 <HAL_GPIO_Init+0x2e8>)
 8003970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003974:	6453      	str	r3, [r2, #68]	@ 0x44
 8003976:	4b54      	ldr	r3, [pc, #336]	@ (8003ac8 <HAL_GPIO_Init+0x2e8>)
 8003978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003982:	4a52      	ldr	r2, [pc, #328]	@ (8003acc <HAL_GPIO_Init+0x2ec>)
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	3302      	adds	r3, #2
 800398a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	220f      	movs	r2, #15
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4013      	ands	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a49      	ldr	r2, [pc, #292]	@ (8003ad0 <HAL_GPIO_Init+0x2f0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d019      	beq.n	80039e2 <HAL_GPIO_Init+0x202>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a48      	ldr	r2, [pc, #288]	@ (8003ad4 <HAL_GPIO_Init+0x2f4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <HAL_GPIO_Init+0x1fe>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a47      	ldr	r2, [pc, #284]	@ (8003ad8 <HAL_GPIO_Init+0x2f8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00d      	beq.n	80039da <HAL_GPIO_Init+0x1fa>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a46      	ldr	r2, [pc, #280]	@ (8003adc <HAL_GPIO_Init+0x2fc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d007      	beq.n	80039d6 <HAL_GPIO_Init+0x1f6>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a45      	ldr	r2, [pc, #276]	@ (8003ae0 <HAL_GPIO_Init+0x300>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d101      	bne.n	80039d2 <HAL_GPIO_Init+0x1f2>
 80039ce:	2304      	movs	r3, #4
 80039d0:	e008      	b.n	80039e4 <HAL_GPIO_Init+0x204>
 80039d2:	2307      	movs	r3, #7
 80039d4:	e006      	b.n	80039e4 <HAL_GPIO_Init+0x204>
 80039d6:	2303      	movs	r3, #3
 80039d8:	e004      	b.n	80039e4 <HAL_GPIO_Init+0x204>
 80039da:	2302      	movs	r3, #2
 80039dc:	e002      	b.n	80039e4 <HAL_GPIO_Init+0x204>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <HAL_GPIO_Init+0x204>
 80039e2:	2300      	movs	r3, #0
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	f002 0203 	and.w	r2, r2, #3
 80039ea:	0092      	lsls	r2, r2, #2
 80039ec:	4093      	lsls	r3, r2
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039f4:	4935      	ldr	r1, [pc, #212]	@ (8003acc <HAL_GPIO_Init+0x2ec>)
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	3302      	adds	r3, #2
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a02:	4b38      	ldr	r3, [pc, #224]	@ (8003ae4 <HAL_GPIO_Init+0x304>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a26:	4a2f      	ldr	r2, [pc, #188]	@ (8003ae4 <HAL_GPIO_Init+0x304>)
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae4 <HAL_GPIO_Init+0x304>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a50:	4a24      	ldr	r2, [pc, #144]	@ (8003ae4 <HAL_GPIO_Init+0x304>)
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a56:	4b23      	ldr	r3, [pc, #140]	@ (8003ae4 <HAL_GPIO_Init+0x304>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4013      	ands	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae4 <HAL_GPIO_Init+0x304>)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a80:	4b18      	ldr	r3, [pc, #96]	@ (8003ae4 <HAL_GPIO_Init+0x304>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae4 <HAL_GPIO_Init+0x304>)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3301      	adds	r3, #1
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	2b0f      	cmp	r3, #15
 8003ab4:	f67f aea2 	bls.w	80037fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	3724      	adds	r7, #36	@ 0x24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40013800 	.word	0x40013800
 8003ad0:	40020000 	.word	0x40020000
 8003ad4:	40020400 	.word	0x40020400
 8003ad8:	40020800 	.word	0x40020800
 8003adc:	40020c00 	.word	0x40020c00
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	40013c00 	.word	0x40013c00

08003ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	807b      	strh	r3, [r7, #2]
 8003af4:	4613      	mov	r3, r2
 8003af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003af8:	787b      	ldrb	r3, [r7, #1]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003afe:	887a      	ldrh	r2, [r7, #2]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b04:	e003      	b.n	8003b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b06:	887b      	ldrh	r3, [r7, #2]
 8003b08:	041a      	lsls	r2, r3, #16
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	619a      	str	r2, [r3, #24]
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e12b      	b.n	8003d86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fd fd4e 	bl	80015e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2224      	movs	r2, #36	@ 0x24
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b80:	f000 fd54 	bl	800462c <HAL_RCC_GetPCLK1Freq>
 8003b84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4a81      	ldr	r2, [pc, #516]	@ (8003d90 <HAL_I2C_Init+0x274>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d807      	bhi.n	8003ba0 <HAL_I2C_Init+0x84>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4a80      	ldr	r2, [pc, #512]	@ (8003d94 <HAL_I2C_Init+0x278>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	bf94      	ite	ls
 8003b98:	2301      	movls	r3, #1
 8003b9a:	2300      	movhi	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	e006      	b.n	8003bae <HAL_I2C_Init+0x92>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4a7d      	ldr	r2, [pc, #500]	@ (8003d98 <HAL_I2C_Init+0x27c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	bf94      	ite	ls
 8003ba8:	2301      	movls	r3, #1
 8003baa:	2300      	movhi	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e0e7      	b.n	8003d86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4a78      	ldr	r2, [pc, #480]	@ (8003d9c <HAL_I2C_Init+0x280>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	0c9b      	lsrs	r3, r3, #18
 8003bc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4a6a      	ldr	r2, [pc, #424]	@ (8003d90 <HAL_I2C_Init+0x274>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d802      	bhi.n	8003bf0 <HAL_I2C_Init+0xd4>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	3301      	adds	r3, #1
 8003bee:	e009      	b.n	8003c04 <HAL_I2C_Init+0xe8>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bf6:	fb02 f303 	mul.w	r3, r2, r3
 8003bfa:	4a69      	ldr	r2, [pc, #420]	@ (8003da0 <HAL_I2C_Init+0x284>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	099b      	lsrs	r3, r3, #6
 8003c02:	3301      	adds	r3, #1
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	495c      	ldr	r1, [pc, #368]	@ (8003d90 <HAL_I2C_Init+0x274>)
 8003c20:	428b      	cmp	r3, r1
 8003c22:	d819      	bhi.n	8003c58 <HAL_I2C_Init+0x13c>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1e59      	subs	r1, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c32:	1c59      	adds	r1, r3, #1
 8003c34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c38:	400b      	ands	r3, r1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_I2C_Init+0x138>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1e59      	subs	r1, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c52:	e051      	b.n	8003cf8 <HAL_I2C_Init+0x1dc>
 8003c54:	2304      	movs	r3, #4
 8003c56:	e04f      	b.n	8003cf8 <HAL_I2C_Init+0x1dc>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d111      	bne.n	8003c84 <HAL_I2C_Init+0x168>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1e58      	subs	r0, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6859      	ldr	r1, [r3, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	440b      	add	r3, r1
 8003c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	bf0c      	ite	eq
 8003c7c:	2301      	moveq	r3, #1
 8003c7e:	2300      	movne	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	e012      	b.n	8003caa <HAL_I2C_Init+0x18e>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1e58      	subs	r0, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	0099      	lsls	r1, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_I2C_Init+0x196>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e022      	b.n	8003cf8 <HAL_I2C_Init+0x1dc>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10e      	bne.n	8003cd8 <HAL_I2C_Init+0x1bc>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1e58      	subs	r0, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6859      	ldr	r1, [r3, #4]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	440b      	add	r3, r1
 8003cc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ccc:	3301      	adds	r3, #1
 8003cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cd6:	e00f      	b.n	8003cf8 <HAL_I2C_Init+0x1dc>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	1e58      	subs	r0, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6859      	ldr	r1, [r3, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	0099      	lsls	r1, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	6809      	ldr	r1, [r1, #0]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69da      	ldr	r2, [r3, #28]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6911      	ldr	r1, [r2, #16]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	68d2      	ldr	r2, [r2, #12]
 8003d32:	4311      	orrs	r1, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695a      	ldr	r2, [r3, #20]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	000186a0 	.word	0x000186a0
 8003d94:	001e847f 	.word	0x001e847f
 8003d98:	003d08ff 	.word	0x003d08ff
 8003d9c:	431bde83 	.word	0x431bde83
 8003da0:	10624dd3 	.word	0x10624dd3

08003da4 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003daa:	4b06      	ldr	r3, [pc, #24]	@ (8003dc4 <HAL_PWR_EnableBkUpAccess+0x20>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003db0:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <HAL_PWR_EnableBkUpAccess+0x24>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003db6:	687b      	ldr	r3, [r7, #4]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	420e0020 	.word	0x420e0020
 8003dc8:	40007000 	.word	0x40007000

08003dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e267      	b.n	80042ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d075      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dea:	4b88      	ldr	r3, [pc, #544]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d00c      	beq.n	8003e10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003df6:	4b85      	ldr	r3, [pc, #532]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d112      	bne.n	8003e28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e02:	4b82      	ldr	r3, [pc, #520]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e0e:	d10b      	bne.n	8003e28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e10:	4b7e      	ldr	r3, [pc, #504]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d05b      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x108>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d157      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e242      	b.n	80042ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e30:	d106      	bne.n	8003e40 <HAL_RCC_OscConfig+0x74>
 8003e32:	4b76      	ldr	r3, [pc, #472]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a75      	ldr	r2, [pc, #468]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	e01d      	b.n	8003e7c <HAL_RCC_OscConfig+0xb0>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e48:	d10c      	bne.n	8003e64 <HAL_RCC_OscConfig+0x98>
 8003e4a:	4b70      	ldr	r3, [pc, #448]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a6f      	ldr	r2, [pc, #444]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003e50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	4b6d      	ldr	r3, [pc, #436]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a6c      	ldr	r2, [pc, #432]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	e00b      	b.n	8003e7c <HAL_RCC_OscConfig+0xb0>
 8003e64:	4b69      	ldr	r3, [pc, #420]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a68      	ldr	r2, [pc, #416]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	4b66      	ldr	r3, [pc, #408]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a65      	ldr	r2, [pc, #404]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003e76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d013      	beq.n	8003eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fe fcc2 	bl	800280c <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e8c:	f7fe fcbe 	bl	800280c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b64      	cmp	r3, #100	@ 0x64
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e207      	b.n	80042ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCC_OscConfig+0xc0>
 8003eaa:	e014      	b.n	8003ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eac:	f7fe fcae 	bl	800280c <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb4:	f7fe fcaa 	bl	800280c <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b64      	cmp	r3, #100	@ 0x64
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e1f3      	b.n	80042ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec6:	4b51      	ldr	r3, [pc, #324]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0xe8>
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d063      	beq.n	8003faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00b      	beq.n	8003f06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eee:	4b47      	ldr	r3, [pc, #284]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d11c      	bne.n	8003f34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efa:	4b44      	ldr	r3, [pc, #272]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d116      	bne.n	8003f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f06:	4b41      	ldr	r3, [pc, #260]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d005      	beq.n	8003f1e <HAL_RCC_OscConfig+0x152>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d001      	beq.n	8003f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e1c7      	b.n	80042ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	4937      	ldr	r1, [pc, #220]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f32:	e03a      	b.n	8003faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d020      	beq.n	8003f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f3c:	4b34      	ldr	r3, [pc, #208]	@ (8004010 <HAL_RCC_OscConfig+0x244>)
 8003f3e:	2201      	movs	r2, #1
 8003f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f42:	f7fe fc63 	bl	800280c <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f4a:	f7fe fc5f 	bl	800280c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e1a8      	b.n	80042ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0f0      	beq.n	8003f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f68:	4b28      	ldr	r3, [pc, #160]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4925      	ldr	r1, [pc, #148]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	600b      	str	r3, [r1, #0]
 8003f7c:	e015      	b.n	8003faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f7e:	4b24      	ldr	r3, [pc, #144]	@ (8004010 <HAL_RCC_OscConfig+0x244>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fe fc42 	bl	800280c <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f8c:	f7fe fc3e 	bl	800280c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e187      	b.n	80042ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d036      	beq.n	8004024 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d016      	beq.n	8003fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fbe:	4b15      	ldr	r3, [pc, #84]	@ (8004014 <HAL_RCC_OscConfig+0x248>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc4:	f7fe fc22 	bl	800280c <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fcc:	f7fe fc1e 	bl	800280c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e167      	b.n	80042ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fde:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <HAL_RCC_OscConfig+0x240>)
 8003fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0x200>
 8003fea:	e01b      	b.n	8004024 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fec:	4b09      	ldr	r3, [pc, #36]	@ (8004014 <HAL_RCC_OscConfig+0x248>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff2:	f7fe fc0b 	bl	800280c <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff8:	e00e      	b.n	8004018 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ffa:	f7fe fc07 	bl	800280c <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d907      	bls.n	8004018 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e150      	b.n	80042ae <HAL_RCC_OscConfig+0x4e2>
 800400c:	40023800 	.word	0x40023800
 8004010:	42470000 	.word	0x42470000
 8004014:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004018:	4b88      	ldr	r3, [pc, #544]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 800401a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1ea      	bne.n	8003ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8097 	beq.w	8004160 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004032:	2300      	movs	r3, #0
 8004034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004036:	4b81      	ldr	r3, [pc, #516]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10f      	bne.n	8004062 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	4b7d      	ldr	r3, [pc, #500]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	4a7c      	ldr	r2, [pc, #496]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 800404c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004050:	6413      	str	r3, [r2, #64]	@ 0x40
 8004052:	4b7a      	ldr	r3, [pc, #488]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800405e:	2301      	movs	r3, #1
 8004060:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004062:	4b77      	ldr	r3, [pc, #476]	@ (8004240 <HAL_RCC_OscConfig+0x474>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800406a:	2b00      	cmp	r3, #0
 800406c:	d118      	bne.n	80040a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800406e:	4b74      	ldr	r3, [pc, #464]	@ (8004240 <HAL_RCC_OscConfig+0x474>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a73      	ldr	r2, [pc, #460]	@ (8004240 <HAL_RCC_OscConfig+0x474>)
 8004074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800407a:	f7fe fbc7 	bl	800280c <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004082:	f7fe fbc3 	bl	800280c <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e10c      	b.n	80042ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004094:	4b6a      	ldr	r3, [pc, #424]	@ (8004240 <HAL_RCC_OscConfig+0x474>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d106      	bne.n	80040b6 <HAL_RCC_OscConfig+0x2ea>
 80040a8:	4b64      	ldr	r3, [pc, #400]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ac:	4a63      	ldr	r2, [pc, #396]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b4:	e01c      	b.n	80040f0 <HAL_RCC_OscConfig+0x324>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b05      	cmp	r3, #5
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCC_OscConfig+0x30c>
 80040be:	4b5f      	ldr	r3, [pc, #380]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c2:	4a5e      	ldr	r2, [pc, #376]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 80040c4:	f043 0304 	orr.w	r3, r3, #4
 80040c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ca:	4b5c      	ldr	r3, [pc, #368]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 80040cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ce:	4a5b      	ldr	r2, [pc, #364]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d6:	e00b      	b.n	80040f0 <HAL_RCC_OscConfig+0x324>
 80040d8:	4b58      	ldr	r3, [pc, #352]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040dc:	4a57      	ldr	r2, [pc, #348]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 80040de:	f023 0301 	bic.w	r3, r3, #1
 80040e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e4:	4b55      	ldr	r3, [pc, #340]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 80040e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e8:	4a54      	ldr	r2, [pc, #336]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 80040ea:	f023 0304 	bic.w	r3, r3, #4
 80040ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d015      	beq.n	8004124 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f8:	f7fe fb88 	bl	800280c <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fe:	e00a      	b.n	8004116 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004100:	f7fe fb84 	bl	800280c <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e0cb      	b.n	80042ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004116:	4b49      	ldr	r3, [pc, #292]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0ee      	beq.n	8004100 <HAL_RCC_OscConfig+0x334>
 8004122:	e014      	b.n	800414e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004124:	f7fe fb72 	bl	800280c <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412a:	e00a      	b.n	8004142 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800412c:	f7fe fb6e 	bl	800280c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800413a:	4293      	cmp	r3, r2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e0b5      	b.n	80042ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004142:	4b3e      	ldr	r3, [pc, #248]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1ee      	bne.n	800412c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800414e:	7dfb      	ldrb	r3, [r7, #23]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d105      	bne.n	8004160 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004154:	4b39      	ldr	r3, [pc, #228]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 8004156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004158:	4a38      	ldr	r2, [pc, #224]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 800415a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800415e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80a1 	beq.w	80042ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800416a:	4b34      	ldr	r3, [pc, #208]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
 8004172:	2b08      	cmp	r3, #8
 8004174:	d05c      	beq.n	8004230 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d141      	bne.n	8004202 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417e:	4b31      	ldr	r3, [pc, #196]	@ (8004244 <HAL_RCC_OscConfig+0x478>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fe fb42 	bl	800280c <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418c:	f7fe fb3e 	bl	800280c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e087      	b.n	80042ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419e:	4b27      	ldr	r3, [pc, #156]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69da      	ldr	r2, [r3, #28]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	019b      	lsls	r3, r3, #6
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c0:	085b      	lsrs	r3, r3, #1
 80041c2:	3b01      	subs	r3, #1
 80041c4:	041b      	lsls	r3, r3, #16
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	061b      	lsls	r3, r3, #24
 80041ce:	491b      	ldr	r1, [pc, #108]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004244 <HAL_RCC_OscConfig+0x478>)
 80041d6:	2201      	movs	r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041da:	f7fe fb17 	bl	800280c <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e2:	f7fe fb13 	bl	800280c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e05c      	b.n	80042ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f4:	4b11      	ldr	r3, [pc, #68]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0f0      	beq.n	80041e2 <HAL_RCC_OscConfig+0x416>
 8004200:	e054      	b.n	80042ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004202:	4b10      	ldr	r3, [pc, #64]	@ (8004244 <HAL_RCC_OscConfig+0x478>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004208:	f7fe fb00 	bl	800280c <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004210:	f7fe fafc 	bl	800280c <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e045      	b.n	80042ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	4b06      	ldr	r3, [pc, #24]	@ (800423c <HAL_RCC_OscConfig+0x470>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x444>
 800422e:	e03d      	b.n	80042ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d107      	bne.n	8004248 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e038      	b.n	80042ae <HAL_RCC_OscConfig+0x4e2>
 800423c:	40023800 	.word	0x40023800
 8004240:	40007000 	.word	0x40007000
 8004244:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004248:	4b1b      	ldr	r3, [pc, #108]	@ (80042b8 <HAL_RCC_OscConfig+0x4ec>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d028      	beq.n	80042a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004260:	429a      	cmp	r2, r3
 8004262:	d121      	bne.n	80042a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d11a      	bne.n	80042a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004278:	4013      	ands	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800427e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004280:	4293      	cmp	r3, r2
 8004282:	d111      	bne.n	80042a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428e:	085b      	lsrs	r3, r3, #1
 8004290:	3b01      	subs	r3, #1
 8004292:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004294:	429a      	cmp	r2, r3
 8004296:	d107      	bne.n	80042a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40023800 	.word	0x40023800

080042bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0cc      	b.n	800446a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042d0:	4b68      	ldr	r3, [pc, #416]	@ (8004474 <HAL_RCC_ClockConfig+0x1b8>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d90c      	bls.n	80042f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042de:	4b65      	ldr	r3, [pc, #404]	@ (8004474 <HAL_RCC_ClockConfig+0x1b8>)
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e6:	4b63      	ldr	r3, [pc, #396]	@ (8004474 <HAL_RCC_ClockConfig+0x1b8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d001      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0b8      	b.n	800446a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d020      	beq.n	8004346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004310:	4b59      	ldr	r3, [pc, #356]	@ (8004478 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	4a58      	ldr	r2, [pc, #352]	@ (8004478 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800431a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004328:	4b53      	ldr	r3, [pc, #332]	@ (8004478 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	4a52      	ldr	r2, [pc, #328]	@ (8004478 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004334:	4b50      	ldr	r3, [pc, #320]	@ (8004478 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	494d      	ldr	r1, [pc, #308]	@ (8004478 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d044      	beq.n	80043dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d107      	bne.n	800436a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	4b47      	ldr	r3, [pc, #284]	@ (8004478 <HAL_RCC_ClockConfig+0x1bc>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d119      	bne.n	800439a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e07f      	b.n	800446a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b02      	cmp	r3, #2
 8004370:	d003      	beq.n	800437a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004376:	2b03      	cmp	r3, #3
 8004378:	d107      	bne.n	800438a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437a:	4b3f      	ldr	r3, [pc, #252]	@ (8004478 <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d109      	bne.n	800439a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e06f      	b.n	800446a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438a:	4b3b      	ldr	r3, [pc, #236]	@ (8004478 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e067      	b.n	800446a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800439a:	4b37      	ldr	r3, [pc, #220]	@ (8004478 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f023 0203 	bic.w	r2, r3, #3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	4934      	ldr	r1, [pc, #208]	@ (8004478 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043ac:	f7fe fa2e 	bl	800280c <HAL_GetTick>
 80043b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b2:	e00a      	b.n	80043ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b4:	f7fe fa2a 	bl	800280c <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e04f      	b.n	800446a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004478 <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 020c 	and.w	r2, r3, #12
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	429a      	cmp	r2, r3
 80043da:	d1eb      	bne.n	80043b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043dc:	4b25      	ldr	r3, [pc, #148]	@ (8004474 <HAL_RCC_ClockConfig+0x1b8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d20c      	bcs.n	8004404 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ea:	4b22      	ldr	r3, [pc, #136]	@ (8004474 <HAL_RCC_ClockConfig+0x1b8>)
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f2:	4b20      	ldr	r3, [pc, #128]	@ (8004474 <HAL_RCC_ClockConfig+0x1b8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d001      	beq.n	8004404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e032      	b.n	800446a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d008      	beq.n	8004422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004410:	4b19      	ldr	r3, [pc, #100]	@ (8004478 <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	4916      	ldr	r1, [pc, #88]	@ (8004478 <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	4313      	orrs	r3, r2
 8004420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d009      	beq.n	8004442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800442e:	4b12      	ldr	r3, [pc, #72]	@ (8004478 <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	490e      	ldr	r1, [pc, #56]	@ (8004478 <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	4313      	orrs	r3, r2
 8004440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004442:	f000 f821 	bl	8004488 <HAL_RCC_GetSysClockFreq>
 8004446:	4602      	mov	r2, r0
 8004448:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	091b      	lsrs	r3, r3, #4
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	490a      	ldr	r1, [pc, #40]	@ (800447c <HAL_RCC_ClockConfig+0x1c0>)
 8004454:	5ccb      	ldrb	r3, [r1, r3]
 8004456:	fa22 f303 	lsr.w	r3, r2, r3
 800445a:	4a09      	ldr	r2, [pc, #36]	@ (8004480 <HAL_RCC_ClockConfig+0x1c4>)
 800445c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800445e:	4b09      	ldr	r3, [pc, #36]	@ (8004484 <HAL_RCC_ClockConfig+0x1c8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe f98e 	bl	8002784 <HAL_InitTick>

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	40023c00 	.word	0x40023c00
 8004478:	40023800 	.word	0x40023800
 800447c:	080068ac 	.word	0x080068ac
 8004480:	20000000 	.word	0x20000000
 8004484:	20000004 	.word	0x20000004

08004488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800448c:	b090      	sub	sp, #64	@ 0x40
 800448e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044a0:	4b59      	ldr	r3, [pc, #356]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x180>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 030c 	and.w	r3, r3, #12
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d00d      	beq.n	80044c8 <HAL_RCC_GetSysClockFreq+0x40>
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	f200 80a1 	bhi.w	80045f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_RCC_GetSysClockFreq+0x34>
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d003      	beq.n	80044c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ba:	e09b      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044bc:	4b53      	ldr	r3, [pc, #332]	@ (800460c <HAL_RCC_GetSysClockFreq+0x184>)
 80044be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044c0:	e09b      	b.n	80045fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044c2:	4b53      	ldr	r3, [pc, #332]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x188>)
 80044c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044c6:	e098      	b.n	80045fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044c8:	4b4f      	ldr	r3, [pc, #316]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x180>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044d2:	4b4d      	ldr	r3, [pc, #308]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x180>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d028      	beq.n	8004530 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044de:	4b4a      	ldr	r3, [pc, #296]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x180>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	099b      	lsrs	r3, r3, #6
 80044e4:	2200      	movs	r2, #0
 80044e6:	623b      	str	r3, [r7, #32]
 80044e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044f0:	2100      	movs	r1, #0
 80044f2:	4b47      	ldr	r3, [pc, #284]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x188>)
 80044f4:	fb03 f201 	mul.w	r2, r3, r1
 80044f8:	2300      	movs	r3, #0
 80044fa:	fb00 f303 	mul.w	r3, r0, r3
 80044fe:	4413      	add	r3, r2
 8004500:	4a43      	ldr	r2, [pc, #268]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x188>)
 8004502:	fba0 1202 	umull	r1, r2, r0, r2
 8004506:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004508:	460a      	mov	r2, r1
 800450a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800450c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800450e:	4413      	add	r3, r2
 8004510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004514:	2200      	movs	r2, #0
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	61fa      	str	r2, [r7, #28]
 800451a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800451e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004522:	f7fb fe57 	bl	80001d4 <__aeabi_uldivmod>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	4613      	mov	r3, r2
 800452c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800452e:	e053      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004530:	4b35      	ldr	r3, [pc, #212]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x180>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	099b      	lsrs	r3, r3, #6
 8004536:	2200      	movs	r2, #0
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	617a      	str	r2, [r7, #20]
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004542:	f04f 0b00 	mov.w	fp, #0
 8004546:	4652      	mov	r2, sl
 8004548:	465b      	mov	r3, fp
 800454a:	f04f 0000 	mov.w	r0, #0
 800454e:	f04f 0100 	mov.w	r1, #0
 8004552:	0159      	lsls	r1, r3, #5
 8004554:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004558:	0150      	lsls	r0, r2, #5
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	ebb2 080a 	subs.w	r8, r2, sl
 8004562:	eb63 090b 	sbc.w	r9, r3, fp
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004572:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004576:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800457a:	ebb2 0408 	subs.w	r4, r2, r8
 800457e:	eb63 0509 	sbc.w	r5, r3, r9
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	00eb      	lsls	r3, r5, #3
 800458c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004590:	00e2      	lsls	r2, r4, #3
 8004592:	4614      	mov	r4, r2
 8004594:	461d      	mov	r5, r3
 8004596:	eb14 030a 	adds.w	r3, r4, sl
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	eb45 030b 	adc.w	r3, r5, fp
 80045a0:	607b      	str	r3, [r7, #4]
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045ae:	4629      	mov	r1, r5
 80045b0:	028b      	lsls	r3, r1, #10
 80045b2:	4621      	mov	r1, r4
 80045b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045b8:	4621      	mov	r1, r4
 80045ba:	028a      	lsls	r2, r1, #10
 80045bc:	4610      	mov	r0, r2
 80045be:	4619      	mov	r1, r3
 80045c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c2:	2200      	movs	r2, #0
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	60fa      	str	r2, [r7, #12]
 80045c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045cc:	f7fb fe02 	bl	80001d4 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4613      	mov	r3, r2
 80045d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80045d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x180>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	0c1b      	lsrs	r3, r3, #16
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	3301      	adds	r3, #1
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80045e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045f2:	e002      	b.n	80045fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045f4:	4b05      	ldr	r3, [pc, #20]	@ (800460c <HAL_RCC_GetSysClockFreq+0x184>)
 80045f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3740      	adds	r7, #64	@ 0x40
 8004600:	46bd      	mov	sp, r7
 8004602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004606:	bf00      	nop
 8004608:	40023800 	.word	0x40023800
 800460c:	00f42400 	.word	0x00f42400
 8004610:	017d7840 	.word	0x017d7840

08004614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004618:	4b03      	ldr	r3, [pc, #12]	@ (8004628 <HAL_RCC_GetHCLKFreq+0x14>)
 800461a:	681b      	ldr	r3, [r3, #0]
}
 800461c:	4618      	mov	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20000000 	.word	0x20000000

0800462c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004630:	f7ff fff0 	bl	8004614 <HAL_RCC_GetHCLKFreq>
 8004634:	4602      	mov	r2, r0
 8004636:	4b05      	ldr	r3, [pc, #20]	@ (800464c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	0a9b      	lsrs	r3, r3, #10
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	4903      	ldr	r1, [pc, #12]	@ (8004650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004642:	5ccb      	ldrb	r3, [r1, r3]
 8004644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004648:	4618      	mov	r0, r3
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40023800 	.word	0x40023800
 8004650:	080068bc 	.word	0x080068bc

08004654 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d105      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004678:	2b00      	cmp	r3, #0
 800467a:	d035      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800467c:	4b67      	ldr	r3, [pc, #412]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004682:	f7fe f8c3 	bl	800280c <HAL_GetTick>
 8004686:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004688:	e008      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800468a:	f7fe f8bf 	bl	800280c <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e0ba      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800469c:	4b60      	ldr	r3, [pc, #384]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	019a      	lsls	r2, r3, #6
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	071b      	lsls	r3, r3, #28
 80046b4:	495a      	ldr	r1, [pc, #360]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046bc:	4b57      	ldr	r3, [pc, #348]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80046be:	2201      	movs	r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046c2:	f7fe f8a3 	bl	800280c <HAL_GetTick>
 80046c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046c8:	e008      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046ca:	f7fe f89f 	bl	800280c <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e09a      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046dc:	4b50      	ldr	r3, [pc, #320]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8083 	beq.w	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	4b49      	ldr	r3, [pc, #292]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	4a48      	ldr	r2, [pc, #288]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004704:	6413      	str	r3, [r2, #64]	@ 0x40
 8004706:	4b46      	ldr	r3, [pc, #280]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004712:	4b44      	ldr	r3, [pc, #272]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a43      	ldr	r2, [pc, #268]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800471c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800471e:	f7fe f875 	bl	800280c <HAL_GetTick>
 8004722:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004724:	e008      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004726:	f7fe f871 	bl	800280c <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e06c      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004738:	4b3a      	ldr	r3, [pc, #232]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f0      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004744:	4b36      	ldr	r3, [pc, #216]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004748:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800474c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d02f      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	429a      	cmp	r2, r3
 8004760:	d028      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004762:	4b2f      	ldr	r3, [pc, #188]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800476a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800476c:	4b2e      	ldr	r3, [pc, #184]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800476e:	2201      	movs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004772:	4b2d      	ldr	r3, [pc, #180]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004778:	4a29      	ldr	r2, [pc, #164]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800477e:	4b28      	ldr	r3, [pc, #160]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b01      	cmp	r3, #1
 8004788:	d114      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800478a:	f7fe f83f 	bl	800280c <HAL_GetTick>
 800478e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004790:	e00a      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004792:	f7fe f83b 	bl	800280c <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e034      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0ee      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047c0:	d10d      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80047c2:	4b17      	ldr	r3, [pc, #92]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80047d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047d6:	4912      	ldr	r1, [pc, #72]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	608b      	str	r3, [r1, #8]
 80047dc:	e005      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047de:	4b10      	ldr	r3, [pc, #64]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	4a0f      	ldr	r2, [pc, #60]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047e4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80047e8:	6093      	str	r3, [r2, #8]
 80047ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047ec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f6:	490a      	ldr	r1, [pc, #40]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	7c1a      	ldrb	r2, [r3, #16]
 800480c:	4b07      	ldr	r3, [pc, #28]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800480e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	42470068 	.word	0x42470068
 8004820:	40023800 	.word	0x40023800
 8004824:	40007000 	.word	0x40007000
 8004828:	42470e40 	.word	0x42470e40
 800482c:	424711e0 	.word	0x424711e0

08004830 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e073      	b.n	800492e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	7f5b      	ldrb	r3, [r3, #29]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d105      	bne.n	800485c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fd fc28 	bl	80020ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	2b10      	cmp	r3, #16
 800486e:	d055      	beq.n	800491c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	22ca      	movs	r2, #202	@ 0xca
 8004876:	625a      	str	r2, [r3, #36]	@ 0x24
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2253      	movs	r2, #83	@ 0x53
 800487e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fa49 	bl	8004d18 <RTC_EnterInitMode>
 8004886:	4603      	mov	r3, r0
 8004888:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d12c      	bne.n	80048ea <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6812      	ldr	r2, [r2, #0]
 800489a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800489e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048a2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6899      	ldr	r1, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68d2      	ldr	r2, [r2, #12]
 80048ca:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6919      	ldr	r1, [r3, #16]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	041a      	lsls	r2, r3, #16
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fa50 	bl	8004d86 <RTC_ExitInitMode>
 80048e6:	4603      	mov	r3, r0
 80048e8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d110      	bne.n	8004912 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80048fe:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	22ff      	movs	r2, #255	@ 0xff
 8004918:	625a      	str	r2, [r3, #36]	@ 0x24
 800491a:	e001      	b.n	8004920 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d102      	bne.n	800492c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800492c:	7bfb      	ldrb	r3, [r7, #15]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004936:	b590      	push	{r4, r7, lr}
 8004938:	b087      	sub	sp, #28
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	7f1b      	ldrb	r3, [r3, #28]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_RTC_SetTime+0x1c>
 800494e:	2302      	movs	r3, #2
 8004950:	e087      	b.n	8004a62 <HAL_RTC_SetTime+0x12c>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2202      	movs	r2, #2
 800495c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d126      	bne.n	80049b2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	d102      	bne.n	8004978 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2200      	movs	r2, #0
 8004976:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fa27 	bl	8004dd0 <RTC_ByteToBcd2>
 8004982:	4603      	mov	r3, r0
 8004984:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	785b      	ldrb	r3, [r3, #1]
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fa20 	bl	8004dd0 <RTC_ByteToBcd2>
 8004990:	4603      	mov	r3, r0
 8004992:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004994:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	789b      	ldrb	r3, [r3, #2]
 800499a:	4618      	mov	r0, r3
 800499c:	f000 fa18 	bl	8004dd0 <RTC_ByteToBcd2>
 80049a0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049a2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	78db      	ldrb	r3, [r3, #3]
 80049aa:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	e018      	b.n	80049e4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d102      	bne.n	80049c6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2200      	movs	r2, #0
 80049c4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	785b      	ldrb	r3, [r3, #1]
 80049d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80049d2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80049d8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	78db      	ldrb	r3, [r3, #3]
 80049de:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	22ca      	movs	r2, #202	@ 0xca
 80049ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2253      	movs	r2, #83	@ 0x53
 80049f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f98f 	bl	8004d18 <RTC_EnterInitMode>
 80049fa:	4603      	mov	r3, r0
 80049fc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80049fe:	7cfb      	ldrb	r3, [r7, #19]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d120      	bne.n	8004a46 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004a0e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004a12:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a22:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6899      	ldr	r1, [r3, #8]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f9a2 	bl	8004d86 <RTC_ExitInitMode>
 8004a42:	4603      	mov	r3, r0
 8004a44:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	22ff      	movs	r2, #255	@ 0xff
 8004a58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	771a      	strb	r2, [r3, #28]

  return status;
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd90      	pop	{r4, r7, pc}

08004a6a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b086      	sub	sp, #24
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004a9c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	0c1b      	lsrs	r3, r3, #16
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	0a1b      	lsrs	r3, r3, #8
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	0d9b      	lsrs	r3, r3, #22
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d11a      	bne.n	8004b1c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f98e 	bl	8004e0c <RTC_Bcd2ToByte>
 8004af0:	4603      	mov	r3, r0
 8004af2:	461a      	mov	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	785b      	ldrb	r3, [r3, #1]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 f985 	bl	8004e0c <RTC_Bcd2ToByte>
 8004b02:	4603      	mov	r3, r0
 8004b04:	461a      	mov	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	789b      	ldrb	r3, [r3, #2]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 f97c 	bl	8004e0c <RTC_Bcd2ToByte>
 8004b14:	4603      	mov	r3, r0
 8004b16:	461a      	mov	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b26:	b590      	push	{r4, r7, lr}
 8004b28:	b087      	sub	sp, #28
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	7f1b      	ldrb	r3, [r3, #28]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_RTC_SetDate+0x1c>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e071      	b.n	8004c26 <HAL_RTC_SetDate+0x100>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10e      	bne.n	8004b72 <HAL_RTC_SetDate+0x4c>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	785b      	ldrb	r3, [r3, #1]
 8004b64:	f023 0310 	bic.w	r3, r3, #16
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	330a      	adds	r3, #10
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d11c      	bne.n	8004bb2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	78db      	ldrb	r3, [r3, #3]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 f927 	bl	8004dd0 <RTC_ByteToBcd2>
 8004b82:	4603      	mov	r3, r0
 8004b84:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 f920 	bl	8004dd0 <RTC_ByteToBcd2>
 8004b90:	4603      	mov	r3, r0
 8004b92:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b94:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	789b      	ldrb	r3, [r3, #2]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 f918 	bl	8004dd0 <RTC_ByteToBcd2>
 8004ba0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ba2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	e00e      	b.n	8004bd0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	78db      	ldrb	r3, [r3, #3]
 8004bb6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	785b      	ldrb	r3, [r3, #1]
 8004bbc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004bbe:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004bc4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	22ca      	movs	r2, #202	@ 0xca
 8004bd6:	625a      	str	r2, [r3, #36]	@ 0x24
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2253      	movs	r2, #83	@ 0x53
 8004bde:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f899 	bl	8004d18 <RTC_EnterInitMode>
 8004be6:	4603      	mov	r3, r0
 8004be8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004bea:	7cfb      	ldrb	r3, [r7, #19]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10c      	bne.n	8004c0a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004bfa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004bfe:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f8c0 	bl	8004d86 <RTC_ExitInitMode>
 8004c06:	4603      	mov	r3, r0
 8004c08:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004c0a:	7cfb      	ldrb	r3, [r7, #19]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d102      	bne.n	8004c16 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2201      	movs	r2, #1
 8004c14:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	22ff      	movs	r2, #255	@ 0xff
 8004c1c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]

  return status;
 8004c24:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd90      	pop	{r4, r7, pc}

08004c2e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b086      	sub	sp, #24
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004c48:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004c4c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	0c1b      	lsrs	r3, r3, #16
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	0a1b      	lsrs	r3, r3, #8
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	0b5b      	lsrs	r3, r3, #13
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d11a      	bne.n	8004cc2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	78db      	ldrb	r3, [r3, #3]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 f8bb 	bl	8004e0c <RTC_Bcd2ToByte>
 8004c96:	4603      	mov	r3, r0
 8004c98:	461a      	mov	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	785b      	ldrb	r3, [r3, #1]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f8b2 	bl	8004e0c <RTC_Bcd2ToByte>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	461a      	mov	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	789b      	ldrb	r3, [r3, #2]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 f8a9 	bl	8004e0c <RTC_Bcd2ToByte>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8004d14 <HAL_RTC_WaitForSynchro+0x48>)
 8004cde:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ce0:	f7fd fd94 	bl	800280c <HAL_GetTick>
 8004ce4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ce6:	e009      	b.n	8004cfc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ce8:	f7fd fd90 	bl	800280c <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004cf6:	d901      	bls.n	8004cfc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e007      	b.n	8004d0c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0ee      	beq.n	8004ce8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	00013f5f 	.word	0x00013f5f

08004d18 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d122      	bne.n	8004d7c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d44:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d46:	f7fd fd61 	bl	800280c <HAL_GetTick>
 8004d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004d4c:	e00c      	b.n	8004d68 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d4e:	f7fd fd5d 	bl	800280c <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d5c:	d904      	bls.n	8004d68 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2204      	movs	r2, #4
 8004d62:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <RTC_EnterInitMode+0x64>
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d1e8      	bne.n	8004d4e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004da0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ff8b 	bl	8004ccc <HAL_RTC_WaitForSynchro>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2204      	movs	r2, #4
 8004dc0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004dde:	e005      	b.n	8004dec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3301      	adds	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	3b0a      	subs	r3, #10
 8004dea:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	2b09      	cmp	r3, #9
 8004df0:	d8f6      	bhi.n	8004de0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	79fb      	ldrb	r3, [r7, #7]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	b2db      	uxtb	r3, r3
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	091b      	lsrs	r3, r3, #4
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	4413      	add	r3, r2
 8004e3a:	b2db      	uxtb	r3, r3
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e07b      	b.n	8004f52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d108      	bne.n	8004e74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e6a:	d009      	beq.n	8004e80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	61da      	str	r2, [r3, #28]
 8004e72:	e005      	b.n	8004e80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fd f968 	bl	8002170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f04:	ea42 0103 	orr.w	r1, r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	0c1b      	lsrs	r3, r3, #16
 8004f1e:	f003 0104 	and.w	r1, r3, #4
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f26:	f003 0210 	and.w	r2, r3, #16
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	4613      	mov	r3, r2
 8004f68:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d001      	beq.n	8004f7a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004f76:	2302      	movs	r3, #2
 8004f78:	e097      	b.n	80050aa <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <HAL_SPI_Transmit_DMA+0x2a>
 8004f80:	88fb      	ldrh	r3, [r7, #6]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e08f      	b.n	80050aa <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_SPI_Transmit_DMA+0x3c>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e088      	b.n	80050aa <HAL_SPI_Transmit_DMA+0x14e>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2203      	movs	r2, #3
 8004fa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	88fa      	ldrh	r2, [r7, #6]
 8004fb8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	88fa      	ldrh	r2, [r7, #6]
 8004fbe:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fe6:	d10f      	bne.n	8005008 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ff6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005006:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800500c:	4a29      	ldr	r2, [pc, #164]	@ (80050b4 <HAL_SPI_Transmit_DMA+0x158>)
 800500e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005014:	4a28      	ldr	r2, [pc, #160]	@ (80050b8 <HAL_SPI_Transmit_DMA+0x15c>)
 8005016:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800501c:	4a27      	ldr	r2, [pc, #156]	@ (80050bc <HAL_SPI_Transmit_DMA+0x160>)
 800501e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005024:	2200      	movs	r2, #0
 8005026:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005030:	4619      	mov	r1, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800503e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005040:	f7fe f8ea 	bl	8003218 <HAL_DMA_Start_IT>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800504e:	f043 0210 	orr.w	r2, r3, #16
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e023      	b.n	80050aa <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800506c:	2b40      	cmp	r3, #64	@ 0x40
 800506e:	d007      	beq.n	8005080 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800507e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0220 	orr.w	r2, r2, #32
 8005096:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0202 	orr.w	r2, r2, #2
 80050a6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	08005379 	.word	0x08005379
 80050b8:	080052d1 	.word	0x080052d1
 80050bc:	08005395 	.word	0x08005395

080050c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10e      	bne.n	8005100 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d009      	beq.n	8005100 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d004      	beq.n	8005100 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	4798      	blx	r3
    return;
 80050fe:	e0ce      	b.n	800529e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d009      	beq.n	800511e <HAL_SPI_IRQHandler+0x5e>
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005110:	2b00      	cmp	r3, #0
 8005112:	d004      	beq.n	800511e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	4798      	blx	r3
    return;
 800511c:	e0bf      	b.n	800529e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <HAL_SPI_IRQHandler+0x7e>
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d105      	bne.n	800513e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80b0 	beq.w	800529e <HAL_SPI_IRQHandler+0x1de>
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f003 0320 	and.w	r3, r3, #32
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 80aa 	beq.w	800529e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d023      	beq.n	800519c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b03      	cmp	r3, #3
 800515e:	d011      	beq.n	8005184 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005164:	f043 0204 	orr.w	r2, r3, #4
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	e00b      	b.n	800519c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005184:	2300      	movs	r3, #0
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	693b      	ldr	r3, [r7, #16]
        return;
 800519a:	e080      	b.n	800529e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d014      	beq.n	80051d0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051aa:	f043 0201 	orr.w	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00c      	beq.n	80051f4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051de:	f043 0208 	orr.w	r2, r3, #8
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80051e6:	2300      	movs	r3, #0
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d04f      	beq.n	800529c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800520a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d104      	bne.n	8005228 <HAL_SPI_IRQHandler+0x168>
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d034      	beq.n	8005292 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0203 	bic.w	r2, r2, #3
 8005236:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d011      	beq.n	8005264 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005244:	4a17      	ldr	r2, [pc, #92]	@ (80052a4 <HAL_SPI_IRQHandler+0x1e4>)
 8005246:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800524c:	4618      	mov	r0, r3
 800524e:	f7fe f83b 	bl	80032c8 <HAL_DMA_Abort_IT>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800525c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005268:	2b00      	cmp	r3, #0
 800526a:	d016      	beq.n	800529a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005270:	4a0c      	ldr	r2, [pc, #48]	@ (80052a4 <HAL_SPI_IRQHandler+0x1e4>)
 8005272:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005278:	4618      	mov	r0, r3
 800527a:	f7fe f825 	bl	80032c8 <HAL_DMA_Abort_IT>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005288:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005290:	e003      	b.n	800529a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f812 	bl	80052bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005298:	e000      	b.n	800529c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800529a:	bf00      	nop
    return;
 800529c:	bf00      	nop
  }
}
 800529e:	3720      	adds	r7, #32
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	080053d5 	.word	0x080053d5

080052a8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052dc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052de:	f7fd fa95 	bl	800280c <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052f2:	d03b      	beq.n	800536c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0220 	bic.w	r2, r2, #32
 8005302:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0202 	bic.w	r2, r2, #2
 8005312:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	2164      	movs	r1, #100	@ 0x64
 8005318:	6978      	ldr	r0, [r7, #20]
 800531a:	f000 f8f7 	bl	800550c <SPI_EndRxTxTransaction>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005328:	f043 0220 	orr.w	r2, r3, #32
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2200      	movs	r2, #0
 8005352:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005364:	6978      	ldr	r0, [r7, #20]
 8005366:	f7ff ffa9 	bl	80052bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800536a:	e002      	b.n	8005372 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800536c:	6978      	ldr	r0, [r7, #20]
 800536e:	f7fb fa29 	bl	80007c4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005384:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7ff ff8e 	bl	80052a8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800538c:	bf00      	nop
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0203 	bic.w	r2, r2, #3
 80053b0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b6:	f043 0210 	orr.w	r2, r3, #16
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f7ff ff78 	bl	80052bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053cc:	bf00      	nop
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7ff ff64 	bl	80052bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053f4:	bf00      	nop
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	4613      	mov	r3, r2
 800540a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800540c:	f7fd f9fe 	bl	800280c <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	4413      	add	r3, r2
 800541a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800541c:	f7fd f9f6 	bl	800280c <HAL_GetTick>
 8005420:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005422:	4b39      	ldr	r3, [pc, #228]	@ (8005508 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	015b      	lsls	r3, r3, #5
 8005428:	0d1b      	lsrs	r3, r3, #20
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	fb02 f303 	mul.w	r3, r2, r3
 8005430:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005432:	e054      	b.n	80054de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543a:	d050      	beq.n	80054de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800543c:	f7fd f9e6 	bl	800280c <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	429a      	cmp	r2, r3
 800544a:	d902      	bls.n	8005452 <SPI_WaitFlagStateUntilTimeout+0x56>
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d13d      	bne.n	80054ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005460:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800546a:	d111      	bne.n	8005490 <SPI_WaitFlagStateUntilTimeout+0x94>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005474:	d004      	beq.n	8005480 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800547e:	d107      	bne.n	8005490 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800548e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005494:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005498:	d10f      	bne.n	80054ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e017      	b.n	80054fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	3b01      	subs	r3, #1
 80054dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4013      	ands	r3, r2
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	bf0c      	ite	eq
 80054ee:	2301      	moveq	r3, #1
 80054f0:	2300      	movne	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d19b      	bne.n	8005434 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3720      	adds	r7, #32
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20000000 	.word	0x20000000

0800550c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af02      	add	r7, sp, #8
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2201      	movs	r2, #1
 8005520:	2102      	movs	r1, #2
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f7ff ff6a 	bl	80053fc <SPI_WaitFlagStateUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005532:	f043 0220 	orr.w	r2, r3, #32
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e032      	b.n	80055a4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800553e:	4b1b      	ldr	r3, [pc, #108]	@ (80055ac <SPI_EndRxTxTransaction+0xa0>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1b      	ldr	r2, [pc, #108]	@ (80055b0 <SPI_EndRxTxTransaction+0xa4>)
 8005544:	fba2 2303 	umull	r2, r3, r2, r3
 8005548:	0d5b      	lsrs	r3, r3, #21
 800554a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800554e:	fb02 f303 	mul.w	r3, r2, r3
 8005552:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800555c:	d112      	bne.n	8005584 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2200      	movs	r2, #0
 8005566:	2180      	movs	r1, #128	@ 0x80
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7ff ff47 	bl	80053fc <SPI_WaitFlagStateUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d016      	beq.n	80055a2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005578:	f043 0220 	orr.w	r2, r3, #32
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e00f      	b.n	80055a4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	3b01      	subs	r3, #1
 800558e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800559a:	2b80      	cmp	r3, #128	@ 0x80
 800559c:	d0f2      	beq.n	8005584 <SPI_EndRxTxTransaction+0x78>
 800559e:	e000      	b.n	80055a2 <SPI_EndRxTxTransaction+0x96>
        break;
 80055a0:	bf00      	nop
  }

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20000000 	.word	0x20000000
 80055b0:	165e9f81 	.word	0x165e9f81

080055b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e041      	b.n	800564a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7fc ffda 	bl	8002594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3304      	adds	r3, #4
 80055f0:	4619      	mov	r1, r3
 80055f2:	4610      	mov	r0, r2
 80055f4:	f000 fd2c 	bl	8006050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b082      	sub	sp, #8
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e041      	b.n	80056e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d106      	bne.n	800567e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f839 	bl	80056f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2202      	movs	r2, #2
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3304      	adds	r3, #4
 800568e:	4619      	mov	r1, r3
 8005690:	4610      	mov	r0, r2
 8005692:	f000 fcdd 	bl	8006050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <HAL_TIM_PWM_Start+0x24>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b01      	cmp	r3, #1
 800571e:	bf14      	ite	ne
 8005720:	2301      	movne	r3, #1
 8005722:	2300      	moveq	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	e022      	b.n	800576e <HAL_TIM_PWM_Start+0x6a>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b04      	cmp	r3, #4
 800572c:	d109      	bne.n	8005742 <HAL_TIM_PWM_Start+0x3e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b01      	cmp	r3, #1
 8005738:	bf14      	ite	ne
 800573a:	2301      	movne	r3, #1
 800573c:	2300      	moveq	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	e015      	b.n	800576e <HAL_TIM_PWM_Start+0x6a>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b08      	cmp	r3, #8
 8005746:	d109      	bne.n	800575c <HAL_TIM_PWM_Start+0x58>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	bf14      	ite	ne
 8005754:	2301      	movne	r3, #1
 8005756:	2300      	moveq	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	e008      	b.n	800576e <HAL_TIM_PWM_Start+0x6a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b01      	cmp	r3, #1
 8005766:	bf14      	ite	ne
 8005768:	2301      	movne	r3, #1
 800576a:	2300      	moveq	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e068      	b.n	8005848 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d104      	bne.n	8005786 <HAL_TIM_PWM_Start+0x82>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005784:	e013      	b.n	80057ae <HAL_TIM_PWM_Start+0xaa>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b04      	cmp	r3, #4
 800578a:	d104      	bne.n	8005796 <HAL_TIM_PWM_Start+0x92>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005794:	e00b      	b.n	80057ae <HAL_TIM_PWM_Start+0xaa>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d104      	bne.n	80057a6 <HAL_TIM_PWM_Start+0xa2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057a4:	e003      	b.n	80057ae <HAL_TIM_PWM_Start+0xaa>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2202      	movs	r2, #2
 80057aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2201      	movs	r2, #1
 80057b4:	6839      	ldr	r1, [r7, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fefc 	bl	80065b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a23      	ldr	r2, [pc, #140]	@ (8005850 <HAL_TIM_PWM_Start+0x14c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d107      	bne.n	80057d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a1d      	ldr	r2, [pc, #116]	@ (8005850 <HAL_TIM_PWM_Start+0x14c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d018      	beq.n	8005812 <HAL_TIM_PWM_Start+0x10e>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e8:	d013      	beq.n	8005812 <HAL_TIM_PWM_Start+0x10e>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a19      	ldr	r2, [pc, #100]	@ (8005854 <HAL_TIM_PWM_Start+0x150>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00e      	beq.n	8005812 <HAL_TIM_PWM_Start+0x10e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a17      	ldr	r2, [pc, #92]	@ (8005858 <HAL_TIM_PWM_Start+0x154>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d009      	beq.n	8005812 <HAL_TIM_PWM_Start+0x10e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a16      	ldr	r2, [pc, #88]	@ (800585c <HAL_TIM_PWM_Start+0x158>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d004      	beq.n	8005812 <HAL_TIM_PWM_Start+0x10e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a14      	ldr	r2, [pc, #80]	@ (8005860 <HAL_TIM_PWM_Start+0x15c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d111      	bne.n	8005836 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b06      	cmp	r3, #6
 8005822:	d010      	beq.n	8005846 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0201 	orr.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005834:	e007      	b.n	8005846 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f042 0201 	orr.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40010000 	.word	0x40010000
 8005854:	40000400 	.word	0x40000400
 8005858:	40000800 	.word	0x40000800
 800585c:	40000c00 	.word	0x40000c00
 8005860:	40014000 	.word	0x40014000

08005864 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e097      	b.n	80059a8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d106      	bne.n	8005892 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7fc fea3 	bl	80025d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2202      	movs	r2, #2
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6812      	ldr	r2, [r2, #0]
 80058a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058a8:	f023 0307 	bic.w	r3, r3, #7
 80058ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3304      	adds	r3, #4
 80058b6:	4619      	mov	r1, r3
 80058b8:	4610      	mov	r0, r2
 80058ba:	f000 fbc9 	bl	8006050 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058e6:	f023 0303 	bic.w	r3, r3, #3
 80058ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	4313      	orrs	r3, r2
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005904:	f023 030c 	bic.w	r3, r3, #12
 8005908:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005910:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005914:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	4313      	orrs	r3, r2
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	011a      	lsls	r2, r3, #4
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	031b      	lsls	r3, r3, #12
 8005934:	4313      	orrs	r3, r2
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005942:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800594a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	4313      	orrs	r3, r2
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80059d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d110      	bne.n	8005a02 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d102      	bne.n	80059ec <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80059e6:	7b7b      	ldrb	r3, [r7, #13]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d001      	beq.n	80059f0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e089      	b.n	8005b04 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a00:	e031      	b.n	8005a66 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d110      	bne.n	8005a2a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a08:	7bbb      	ldrb	r3, [r7, #14]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d102      	bne.n	8005a14 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a0e:	7b3b      	ldrb	r3, [r7, #12]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d001      	beq.n	8005a18 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e075      	b.n	8005b04 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a28:	e01d      	b.n	8005a66 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d108      	bne.n	8005a42 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a30:	7bbb      	ldrb	r3, [r7, #14]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d105      	bne.n	8005a42 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a36:	7b7b      	ldrb	r3, [r7, #13]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d102      	bne.n	8005a42 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a3c:	7b3b      	ldrb	r3, [r7, #12]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d001      	beq.n	8005a46 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e05e      	b.n	8005b04 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2202      	movs	r2, #2
 8005a52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2202      	movs	r2, #2
 8005a62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d010      	beq.n	8005a94 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005a72:	e01f      	b.n	8005ab4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 fd99 	bl	80065b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f042 0202 	orr.w	r2, r2, #2
 8005a90:	60da      	str	r2, [r3, #12]
      break;
 8005a92:	e02e      	b.n	8005af2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	2104      	movs	r1, #4
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 fd89 	bl	80065b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0204 	orr.w	r2, r2, #4
 8005ab0:	60da      	str	r2, [r3, #12]
      break;
 8005ab2:	e01e      	b.n	8005af2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	2100      	movs	r1, #0
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fd79 	bl	80065b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	2104      	movs	r1, #4
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fd72 	bl	80065b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0202 	orr.w	r2, r2, #2
 8005ade:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0204 	orr.w	r2, r2, #4
 8005aee:	60da      	str	r2, [r3, #12]
      break;
 8005af0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0201 	orr.w	r2, r2, #1
 8005b00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d020      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d01b      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f06f 0202 	mvn.w	r2, #2
 8005b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fc fa22 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8005b5c:	e005      	b.n	8005b6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fa57 	bl	8006012 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fa5e 	bl	8006026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d020      	beq.n	8005bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01b      	beq.n	8005bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0204 	mvn.w	r2, #4
 8005b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fc f9fc 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8005ba8:	e005      	b.n	8005bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fa31 	bl	8006012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fa38 	bl	8006026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d020      	beq.n	8005c08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01b      	beq.n	8005c08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f06f 0208 	mvn.w	r2, #8
 8005bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2204      	movs	r2, #4
 8005bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fc f9d6 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8005bf4:	e005      	b.n	8005c02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fa0b 	bl	8006012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fa12 	bl	8006026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f003 0310 	and.w	r3, r3, #16
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d020      	beq.n	8005c54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01b      	beq.n	8005c54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0210 	mvn.w	r2, #16
 8005c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2208      	movs	r2, #8
 8005c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fc f9b0 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8005c40:	e005      	b.n	8005c4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f9e5 	bl	8006012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f9ec 	bl	8006026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00c      	beq.n	8005c78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d007      	beq.n	8005c78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f06f 0201 	mvn.w	r2, #1
 8005c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f9c3 	bl	8005ffe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00c      	beq.n	8005c9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d007      	beq.n	8005c9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fd7c 	bl	8006794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00c      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d007      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f9bd 	bl	800603a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00c      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d007      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f06f 0220 	mvn.w	r2, #32
 8005cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fd4e 	bl	8006780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ce4:	bf00      	nop
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d06:	2302      	movs	r3, #2
 8005d08:	e0ae      	b.n	8005e68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b0c      	cmp	r3, #12
 8005d16:	f200 809f 	bhi.w	8005e58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d55 	.word	0x08005d55
 8005d24:	08005e59 	.word	0x08005e59
 8005d28:	08005e59 	.word	0x08005e59
 8005d2c:	08005e59 	.word	0x08005e59
 8005d30:	08005d95 	.word	0x08005d95
 8005d34:	08005e59 	.word	0x08005e59
 8005d38:	08005e59 	.word	0x08005e59
 8005d3c:	08005e59 	.word	0x08005e59
 8005d40:	08005dd7 	.word	0x08005dd7
 8005d44:	08005e59 	.word	0x08005e59
 8005d48:	08005e59 	.word	0x08005e59
 8005d4c:	08005e59 	.word	0x08005e59
 8005d50:	08005e17 	.word	0x08005e17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fa04 	bl	8006168 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699a      	ldr	r2, [r3, #24]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0208 	orr.w	r2, r2, #8
 8005d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699a      	ldr	r2, [r3, #24]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0204 	bic.w	r2, r2, #4
 8005d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6999      	ldr	r1, [r3, #24]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	691a      	ldr	r2, [r3, #16]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	619a      	str	r2, [r3, #24]
      break;
 8005d92:	e064      	b.n	8005e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fa4a 	bl	8006234 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699a      	ldr	r2, [r3, #24]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6999      	ldr	r1, [r3, #24]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	021a      	lsls	r2, r3, #8
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	619a      	str	r2, [r3, #24]
      break;
 8005dd4:	e043      	b.n	8005e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68b9      	ldr	r1, [r7, #8]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 fa95 	bl	800630c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69da      	ldr	r2, [r3, #28]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f042 0208 	orr.w	r2, r2, #8
 8005df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69da      	ldr	r2, [r3, #28]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 0204 	bic.w	r2, r2, #4
 8005e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69d9      	ldr	r1, [r3, #28]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	61da      	str	r2, [r3, #28]
      break;
 8005e14:	e023      	b.n	8005e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68b9      	ldr	r1, [r7, #8]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fadf 	bl	80063e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69da      	ldr	r2, [r3, #28]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69da      	ldr	r2, [r3, #28]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69d9      	ldr	r1, [r3, #28]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	021a      	lsls	r2, r3, #8
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	61da      	str	r2, [r3, #28]
      break;
 8005e56:	e002      	b.n	8005e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_TIM_ConfigClockSource+0x1c>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e0b4      	b.n	8005ff6 <HAL_TIM_ConfigClockSource+0x186>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ec4:	d03e      	beq.n	8005f44 <HAL_TIM_ConfigClockSource+0xd4>
 8005ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eca:	f200 8087 	bhi.w	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
 8005ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed2:	f000 8086 	beq.w	8005fe2 <HAL_TIM_ConfigClockSource+0x172>
 8005ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eda:	d87f      	bhi.n	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
 8005edc:	2b70      	cmp	r3, #112	@ 0x70
 8005ede:	d01a      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0xa6>
 8005ee0:	2b70      	cmp	r3, #112	@ 0x70
 8005ee2:	d87b      	bhi.n	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
 8005ee4:	2b60      	cmp	r3, #96	@ 0x60
 8005ee6:	d050      	beq.n	8005f8a <HAL_TIM_ConfigClockSource+0x11a>
 8005ee8:	2b60      	cmp	r3, #96	@ 0x60
 8005eea:	d877      	bhi.n	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
 8005eec:	2b50      	cmp	r3, #80	@ 0x50
 8005eee:	d03c      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0xfa>
 8005ef0:	2b50      	cmp	r3, #80	@ 0x50
 8005ef2:	d873      	bhi.n	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
 8005ef4:	2b40      	cmp	r3, #64	@ 0x40
 8005ef6:	d058      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x13a>
 8005ef8:	2b40      	cmp	r3, #64	@ 0x40
 8005efa:	d86f      	bhi.n	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
 8005efc:	2b30      	cmp	r3, #48	@ 0x30
 8005efe:	d064      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0x15a>
 8005f00:	2b30      	cmp	r3, #48	@ 0x30
 8005f02:	d86b      	bhi.n	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	d060      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0x15a>
 8005f08:	2b20      	cmp	r3, #32
 8005f0a:	d867      	bhi.n	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d05c      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0x15a>
 8005f10:	2b10      	cmp	r3, #16
 8005f12:	d05a      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0x15a>
 8005f14:	e062      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f26:	f000 fb25 	bl	8006574 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	609a      	str	r2, [r3, #8]
      break;
 8005f42:	e04f      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f54:	f000 fb0e 	bl	8006574 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f66:	609a      	str	r2, [r3, #8]
      break;
 8005f68:	e03c      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f76:	461a      	mov	r2, r3
 8005f78:	f000 fa82 	bl	8006480 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2150      	movs	r1, #80	@ 0x50
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fadb 	bl	800653e <TIM_ITRx_SetConfig>
      break;
 8005f88:	e02c      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f96:	461a      	mov	r2, r3
 8005f98:	f000 faa1 	bl	80064de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2160      	movs	r1, #96	@ 0x60
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 facb 	bl	800653e <TIM_ITRx_SetConfig>
      break;
 8005fa8:	e01c      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f000 fa62 	bl	8006480 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2140      	movs	r1, #64	@ 0x40
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fabb 	bl	800653e <TIM_ITRx_SetConfig>
      break;
 8005fc8:	e00c      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	f000 fab2 	bl	800653e <TIM_ITRx_SetConfig>
      break;
 8005fda:	e003      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe0:	e000      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
	...

08006050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a3a      	ldr	r2, [pc, #232]	@ (800614c <TIM_Base_SetConfig+0xfc>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00f      	beq.n	8006088 <TIM_Base_SetConfig+0x38>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800606e:	d00b      	beq.n	8006088 <TIM_Base_SetConfig+0x38>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a37      	ldr	r2, [pc, #220]	@ (8006150 <TIM_Base_SetConfig+0x100>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d007      	beq.n	8006088 <TIM_Base_SetConfig+0x38>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a36      	ldr	r2, [pc, #216]	@ (8006154 <TIM_Base_SetConfig+0x104>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d003      	beq.n	8006088 <TIM_Base_SetConfig+0x38>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a35      	ldr	r2, [pc, #212]	@ (8006158 <TIM_Base_SetConfig+0x108>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d108      	bne.n	800609a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800608e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a2b      	ldr	r2, [pc, #172]	@ (800614c <TIM_Base_SetConfig+0xfc>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d01b      	beq.n	80060da <TIM_Base_SetConfig+0x8a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060a8:	d017      	beq.n	80060da <TIM_Base_SetConfig+0x8a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a28      	ldr	r2, [pc, #160]	@ (8006150 <TIM_Base_SetConfig+0x100>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d013      	beq.n	80060da <TIM_Base_SetConfig+0x8a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a27      	ldr	r2, [pc, #156]	@ (8006154 <TIM_Base_SetConfig+0x104>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00f      	beq.n	80060da <TIM_Base_SetConfig+0x8a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a26      	ldr	r2, [pc, #152]	@ (8006158 <TIM_Base_SetConfig+0x108>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d00b      	beq.n	80060da <TIM_Base_SetConfig+0x8a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a25      	ldr	r2, [pc, #148]	@ (800615c <TIM_Base_SetConfig+0x10c>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d007      	beq.n	80060da <TIM_Base_SetConfig+0x8a>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a24      	ldr	r2, [pc, #144]	@ (8006160 <TIM_Base_SetConfig+0x110>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d003      	beq.n	80060da <TIM_Base_SetConfig+0x8a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a23      	ldr	r2, [pc, #140]	@ (8006164 <TIM_Base_SetConfig+0x114>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d108      	bne.n	80060ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a0e      	ldr	r2, [pc, #56]	@ (800614c <TIM_Base_SetConfig+0xfc>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d103      	bne.n	8006120 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	691a      	ldr	r2, [r3, #16]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b01      	cmp	r3, #1
 8006130:	d105      	bne.n	800613e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	f023 0201 	bic.w	r2, r3, #1
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	611a      	str	r2, [r3, #16]
  }
}
 800613e:	bf00      	nop
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40010000 	.word	0x40010000
 8006150:	40000400 	.word	0x40000400
 8006154:	40000800 	.word	0x40000800
 8006158:	40000c00 	.word	0x40000c00
 800615c:	40014000 	.word	0x40014000
 8006160:	40014400 	.word	0x40014400
 8006164:	40014800 	.word	0x40014800

08006168 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	f023 0201 	bic.w	r2, r3, #1
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0303 	bic.w	r3, r3, #3
 800619e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f023 0302 	bic.w	r3, r3, #2
 80061b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a1c      	ldr	r2, [pc, #112]	@ (8006230 <TIM_OC1_SetConfig+0xc8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d10c      	bne.n	80061de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f023 0308 	bic.w	r3, r3, #8
 80061ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f023 0304 	bic.w	r3, r3, #4
 80061dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a13      	ldr	r2, [pc, #76]	@ (8006230 <TIM_OC1_SetConfig+0xc8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d111      	bne.n	800620a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4313      	orrs	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	621a      	str	r2, [r3, #32]
}
 8006224:	bf00      	nop
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	40010000 	.word	0x40010000

08006234 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	f023 0210 	bic.w	r2, r3, #16
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800626a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	021b      	lsls	r3, r3, #8
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4313      	orrs	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f023 0320 	bic.w	r3, r3, #32
 800627e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	4313      	orrs	r3, r2
 800628a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a1e      	ldr	r2, [pc, #120]	@ (8006308 <TIM_OC2_SetConfig+0xd4>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d10d      	bne.n	80062b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800629a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a15      	ldr	r2, [pc, #84]	@ (8006308 <TIM_OC2_SetConfig+0xd4>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d113      	bne.n	80062e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	621a      	str	r2, [r3, #32]
}
 80062fa:	bf00      	nop
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40010000 	.word	0x40010000

0800630c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800633a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0303 	bic.w	r3, r3, #3
 8006342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	021b      	lsls	r3, r3, #8
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a1d      	ldr	r2, [pc, #116]	@ (80063dc <TIM_OC3_SetConfig+0xd0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d10d      	bne.n	8006386 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006370:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a14      	ldr	r2, [pc, #80]	@ (80063dc <TIM_OC3_SetConfig+0xd0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d113      	bne.n	80063b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800639c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	011b      	lsls	r3, r3, #4
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	621a      	str	r2, [r3, #32]
}
 80063d0:	bf00      	nop
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	40010000 	.word	0x40010000

080063e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800640e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	021b      	lsls	r3, r3, #8
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	4313      	orrs	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800642a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	031b      	lsls	r3, r3, #12
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	4313      	orrs	r3, r2
 8006436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a10      	ldr	r2, [pc, #64]	@ (800647c <TIM_OC4_SetConfig+0x9c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d109      	bne.n	8006454 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006446:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	019b      	lsls	r3, r3, #6
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	4313      	orrs	r3, r2
 8006452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	621a      	str	r2, [r3, #32]
}
 800646e:	bf00      	nop
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40010000 	.word	0x40010000

08006480 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	f023 0201 	bic.w	r2, r3, #1
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	011b      	lsls	r3, r3, #4
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f023 030a 	bic.w	r3, r3, #10
 80064bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	621a      	str	r2, [r3, #32]
}
 80064d2:	bf00      	nop
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064de:	b480      	push	{r7}
 80064e0:	b087      	sub	sp, #28
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	f023 0210 	bic.w	r2, r3, #16
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006508:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	031b      	lsls	r3, r3, #12
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800651a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	4313      	orrs	r3, r2
 8006524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	621a      	str	r2, [r3, #32]
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800653e:	b480      	push	{r7}
 8006540:	b085      	sub	sp, #20
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006554:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4313      	orrs	r3, r2
 800655c:	f043 0307 	orr.w	r3, r3, #7
 8006560:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	609a      	str	r2, [r3, #8]
}
 8006568:	bf00      	nop
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
 8006580:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800658e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	021a      	lsls	r2, r3, #8
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	431a      	orrs	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4313      	orrs	r3, r2
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	609a      	str	r2, [r3, #8]
}
 80065a8:	bf00      	nop
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f003 031f 	and.w	r3, r3, #31
 80065c6:	2201      	movs	r2, #1
 80065c8:	fa02 f303 	lsl.w	r3, r2, r3
 80065cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6a1a      	ldr	r2, [r3, #32]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	43db      	mvns	r3, r3
 80065d6:	401a      	ands	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a1a      	ldr	r2, [r3, #32]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f003 031f 	and.w	r3, r3, #31
 80065e6:	6879      	ldr	r1, [r7, #4]
 80065e8:	fa01 f303 	lsl.w	r3, r1, r3
 80065ec:	431a      	orrs	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	621a      	str	r2, [r3, #32]
}
 80065f2:	bf00      	nop
 80065f4:	371c      	adds	r7, #28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
	...

08006600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006610:	2b01      	cmp	r3, #1
 8006612:	d101      	bne.n	8006618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006614:	2302      	movs	r3, #2
 8006616:	e050      	b.n	80066ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800663e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a1c      	ldr	r2, [pc, #112]	@ (80066c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d018      	beq.n	800668e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006664:	d013      	beq.n	800668e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a18      	ldr	r2, [pc, #96]	@ (80066cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00e      	beq.n	800668e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a16      	ldr	r2, [pc, #88]	@ (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d009      	beq.n	800668e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a15      	ldr	r2, [pc, #84]	@ (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d004      	beq.n	800668e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a13      	ldr	r2, [pc, #76]	@ (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d10c      	bne.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	4313      	orrs	r3, r2
 800669e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	40010000 	.word	0x40010000
 80066cc:	40000400 	.word	0x40000400
 80066d0:	40000800 	.word	0x40000800
 80066d4:	40000c00 	.word	0x40000c00
 80066d8:	40014000 	.word	0x40014000

080066dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e03d      	b.n	8006774 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	4313      	orrs	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4313      	orrs	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <memset>:
 80067a8:	4402      	add	r2, r0
 80067aa:	4603      	mov	r3, r0
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d100      	bne.n	80067b2 <memset+0xa>
 80067b0:	4770      	bx	lr
 80067b2:	f803 1b01 	strb.w	r1, [r3], #1
 80067b6:	e7f9      	b.n	80067ac <memset+0x4>

080067b8 <__libc_init_array>:
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	4d0d      	ldr	r5, [pc, #52]	@ (80067f0 <__libc_init_array+0x38>)
 80067bc:	4c0d      	ldr	r4, [pc, #52]	@ (80067f4 <__libc_init_array+0x3c>)
 80067be:	1b64      	subs	r4, r4, r5
 80067c0:	10a4      	asrs	r4, r4, #2
 80067c2:	2600      	movs	r6, #0
 80067c4:	42a6      	cmp	r6, r4
 80067c6:	d109      	bne.n	80067dc <__libc_init_array+0x24>
 80067c8:	4d0b      	ldr	r5, [pc, #44]	@ (80067f8 <__libc_init_array+0x40>)
 80067ca:	4c0c      	ldr	r4, [pc, #48]	@ (80067fc <__libc_init_array+0x44>)
 80067cc:	f000 f818 	bl	8006800 <_init>
 80067d0:	1b64      	subs	r4, r4, r5
 80067d2:	10a4      	asrs	r4, r4, #2
 80067d4:	2600      	movs	r6, #0
 80067d6:	42a6      	cmp	r6, r4
 80067d8:	d105      	bne.n	80067e6 <__libc_init_array+0x2e>
 80067da:	bd70      	pop	{r4, r5, r6, pc}
 80067dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e0:	4798      	blx	r3
 80067e2:	3601      	adds	r6, #1
 80067e4:	e7ee      	b.n	80067c4 <__libc_init_array+0xc>
 80067e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ea:	4798      	blx	r3
 80067ec:	3601      	adds	r6, #1
 80067ee:	e7f2      	b.n	80067d6 <__libc_init_array+0x1e>
 80067f0:	080068d4 	.word	0x080068d4
 80067f4:	080068d4 	.word	0x080068d4
 80067f8:	080068d4 	.word	0x080068d4
 80067fc:	080068d8 	.word	0x080068d8

08006800 <_init>:
 8006800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006802:	bf00      	nop
 8006804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006806:	bc08      	pop	{r3}
 8006808:	469e      	mov	lr, r3
 800680a:	4770      	bx	lr

0800680c <_fini>:
 800680c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680e:	bf00      	nop
 8006810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006812:	bc08      	pop	{r3}
 8006814:	469e      	mov	lr, r3
 8006816:	4770      	bx	lr
