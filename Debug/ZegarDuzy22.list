
ZegarDuzy22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800c488  0800c488  0000d488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5f0  0800c5f0  0000e0a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5f0  0800c5f0  0000d5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5f8  0800c5f8  0000e0a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5f8  0800c5f8  0000d5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5fc  0800c5fc  0000d5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  0800c600  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b70  200000a4  0800c6a4  0000e0a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c14  0800c6a4  0000ec14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b9d1  00000000  00000000  0000e0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004660  00000000  00000000  00029aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  0002e108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012da  00000000  00000000  0002f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c2bc  00000000  00000000  00030c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021a19  00000000  00000000  0004cece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5a72  00000000  00000000  0006e8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114359  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a08  00000000  00000000  0011439c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0011ada4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c470 	.word	0x0800c470

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	0800c470 	.word	0x0800c470

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <MX_ADC1_Init+0x9c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_ADC1_Init+0x98>)
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058e:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000594:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059a:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <MX_ADC1_Init+0x98>)
 800059c:	2200      	movs	r2, #0
 800059e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a0:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a8:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ae:	4b16      	ldr	r3, [pc, #88]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b0:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <MX_ADC1_Init+0xa0>)
 80005b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b4:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ba:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005bc:	2201      	movs	r2, #1
 80005be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ce:	480e      	ldr	r0, [pc, #56]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005d0:	f004 f966 	bl	80048a0 <HAL_ADC_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005da:	f002 f8bd 	bl	8002758 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005de:	2303      	movs	r3, #3
 80005e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005f0:	f004 fa4e 	bl	8004a90 <HAL_ADC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80005fa:	f002 f8ad 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200000c0 	.word	0x200000c0
 800060c:	40012000 	.word	0x40012000
 8000610:	0f000001 	.word	0x0f000001

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a17      	ldr	r2, [pc, #92]	@ (8000690 <HAL_ADC_MspInit+0x7c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d127      	bne.n	8000686 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <HAL_ADC_MspInit+0x80>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063e:	4a15      	ldr	r2, [pc, #84]	@ (8000694 <HAL_ADC_MspInit+0x80>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000644:	6453      	str	r3, [r2, #68]	@ 0x44
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <HAL_ADC_MspInit+0x80>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <HAL_ADC_MspInit+0x80>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a0e      	ldr	r2, [pc, #56]	@ (8000694 <HAL_ADC_MspInit+0x80>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <HAL_ADC_MspInit+0x80>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800066e:	2308      	movs	r3, #8
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <HAL_ADC_MspInit+0x84>)
 8000682:	f005 f8e1 	bl	8005848 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000686:	bf00      	nop
 8000688:	3728      	adds	r7, #40	@ 0x28
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40012000 	.word	0x40012000
 8000694:	40023800 	.word	0x40023800
 8000698:	40020000 	.word	0x40020000

0800069c <Encoder_RegisterRotateCallback>:
volatile uint8_t counter=0;

static EncoderRotateCallback_t s_encoderCb = NULL;

void Encoder_RegisterRotateCallback(EncoderRotateCallback_t cb)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
    s_encoderCb = cb;
 80006a4:	4a04      	ldr	r2, [pc, #16]	@ (80006b8 <Encoder_RegisterRotateCallback+0x1c>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6013      	str	r3, [r2, #0]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	2000010c 	.word	0x2000010c

080006bc <Button_RegisterPressCallback>:
		0, 0, 0, false, 0, 0, false, NULL, NULL, NULL, NULL, NULL } //,
		//{BUTTON2_PORT, BUTTON2_PIN, BUTTON_RELEASED, 0, 0, 0, false, 0, 0, false, NULL, NULL, NULL, NULL, NULL}
};

// Implementacja funkcji rejestrujących callbacky
void Button_RegisterPressCallback(uint8_t buttonIndex, ButtonCallback cb) {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	6039      	str	r1, [r7, #0]
 80006c6:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d109      	bne.n	80006e2 <Button_RegisterPressCallback+0x26>
		buttons[buttonIndex].onPress = cb;
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	4907      	ldr	r1, [pc, #28]	@ (80006f0 <Button_RegisterPressCallback+0x34>)
 80006d2:	4613      	mov	r3, r2
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	4413      	add	r3, r2
 80006d8:	011b      	lsls	r3, r3, #4
 80006da:	440b      	add	r3, r1
 80006dc:	331c      	adds	r3, #28
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	601a      	str	r2, [r3, #0]
	}
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000000 	.word	0x20000000

080006f4 <Button_RegisterHoldCallback>:
	if (buttonIndex < NUM_BUTTONS) {
		buttons[buttonIndex].onRelease = cb;
	}
}

void Button_RegisterHoldCallback(uint8_t buttonIndex, ButtonCallback cb) {
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d109      	bne.n	800071a <Button_RegisterHoldCallback+0x26>
		buttons[buttonIndex].onHold = cb;
 8000706:	79fa      	ldrb	r2, [r7, #7]
 8000708:	4907      	ldr	r1, [pc, #28]	@ (8000728 <Button_RegisterHoldCallback+0x34>)
 800070a:	4613      	mov	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	011b      	lsls	r3, r3, #4
 8000712:	440b      	add	r3, r1
 8000714:	3324      	adds	r3, #36	@ 0x24
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	601a      	str	r2, [r3, #0]
	}
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <Button_RegisterDoubleClickCallback>:
	if (buttonIndex < NUM_BUTTONS) {
		buttons[buttonIndex].onRepeat = cb;
	}
}

void Button_RegisterDoubleClickCallback(uint8_t buttonIndex, ButtonCallback cb) {
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d109      	bne.n	8000752 <Button_RegisterDoubleClickCallback+0x26>
		buttons[buttonIndex].onDoubleClick = cb;
 800073e:	79fa      	ldrb	r2, [r7, #7]
 8000740:	4907      	ldr	r1, [pc, #28]	@ (8000760 <Button_RegisterDoubleClickCallback+0x34>)
 8000742:	4613      	mov	r3, r2
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	4413      	add	r3, r2
 8000748:	011b      	lsls	r3, r3, #4
 800074a:	440b      	add	r3, r1
 800074c:	332c      	adds	r3, #44	@ 0x2c
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	601a      	str	r2, [r3, #0]
	}
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20000000 	.word	0x20000000

08000764 <Button_Process>:

// Logika w przerwaniu timera
extern volatile uint32_t systemTicks;  // Globalny licznik taktów czasu

void Button_Process(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_BUTTONS; i++) {
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	e0e7      	b.n	8000940 <Button_Process+0x1dc>
        Button_t *btn = &buttons[i];
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	4613      	mov	r3, r2
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4413      	add	r3, r2
 8000778:	011b      	lsls	r3, r3, #4
 800077a:	4a76      	ldr	r2, [pc, #472]	@ (8000954 <Button_Process+0x1f0>)
 800077c:	4413      	add	r3, r2
 800077e:	60bb      	str	r3, [r7, #8]

        // Odczytaj aktualny stan przycisku
        bool rawState = (HAL_GPIO_ReadPin(btn->port, btn->pin) == GPIO_PIN_RESET);
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	889b      	ldrh	r3, [r3, #4]
 8000788:	4619      	mov	r1, r3
 800078a:	4610      	mov	r0, r2
 800078c:	f005 f9e0 	bl	8005b50 <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	bf0c      	ite	eq
 8000796:	2301      	moveq	r3, #1
 8000798:	2300      	movne	r3, #0
 800079a:	71fb      	strb	r3, [r7, #7]

        // Debounce
        if (rawState != (btn->state == BUTTON_PRESSED)) {
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	7992      	ldrb	r2, [r2, #6]
 80007a2:	2a01      	cmp	r2, #1
 80007a4:	bf0c      	ite	eq
 80007a6:	2201      	moveq	r2, #1
 80007a8:	2200      	movne	r2, #0
 80007aa:	b2d2      	uxtb	r2, r2
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d05d      	beq.n	800086c <Button_Process+0x108>
            btn->debounceCounter++;
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	79db      	ldrb	r3, [r3, #7]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	71da      	strb	r2, [r3, #7]
            if (btn->debounceCounter >= DEBOUNCE_TICKS) {
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	79db      	ldrb	r3, [r3, #7]
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	d956      	bls.n	8000872 <Button_Process+0x10e>
                btn->debounceCounter = 0;
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	2200      	movs	r2, #0
 80007c8:	71da      	strb	r2, [r3, #7]
                if (rawState) {
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00a      	beq.n	80007e6 <Button_Process+0x82>
                    // Naciśnięcie
                    btn->state = BUTTON_PRESSED;
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	2201      	movs	r2, #1
 80007d4:	719a      	strb	r2, [r3, #6]
                    btn->pressTime = systemTicks;
 80007d6:	4b60      	ldr	r3, [pc, #384]	@ (8000958 <Button_Process+0x1f4>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	609a      	str	r2, [r3, #8]
                    btn->holdTriggered = false;
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	2200      	movs	r2, #0
 80007e2:	741a      	strb	r2, [r3, #16]
 80007e4:	e045      	b.n	8000872 <Button_Process+0x10e>
                } else {
                    // Puszczenie
                    btn->state = BUTTON_RELEASED;
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	2200      	movs	r2, #0
 80007ea:	719a      	strb	r2, [r3, #6]

                    // Obsługa kliknięć (tylko jeśli nie było hold)
                    if (!btn->holdTriggered) {
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	7c1b      	ldrb	r3, [r3, #16]
 80007f0:	f083 0301 	eor.w	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d030      	beq.n	800085c <Button_Process+0xf8>
                        if (btn->waitingForDoubleClick) {
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	7e1b      	ldrb	r3, [r3, #24]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d011      	beq.n	8000826 <Button_Process+0xc2>
                            if ((systemTicks - btn->lastClickTime) <= DOUBLE_CLICK_THRESHOLD) {
 8000802:	4b55      	ldr	r3, [pc, #340]	@ (8000958 <Button_Process+0x1f4>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	2b1e      	cmp	r3, #30
 800080e:	d806      	bhi.n	800081e <Button_Process+0xba>
                                btn->clickCount++;
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	7c5b      	ldrb	r3, [r3, #17]
 8000814:	3301      	adds	r3, #1
 8000816:	b2da      	uxtb	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	745a      	strb	r2, [r3, #17]
 800081c:	e00d      	b.n	800083a <Button_Process+0xd6>
                            } else {
                                // Minął czas na dwuklik
                                btn->clickCount = 1;
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	2201      	movs	r2, #1
 8000822:	745a      	strb	r2, [r3, #17]
 8000824:	e009      	b.n	800083a <Button_Process+0xd6>
                            }
                        } else {
                            btn->clickCount = 1;
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	2201      	movs	r2, #1
 800082a:	745a      	strb	r2, [r3, #17]
                            btn->waitingForDoubleClick = true;
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	2201      	movs	r2, #1
 8000830:	761a      	strb	r2, [r3, #24]
                            btn->lastClickTime = systemTicks;
 8000832:	4b49      	ldr	r3, [pc, #292]	@ (8000958 <Button_Process+0x1f4>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	615a      	str	r2, [r3, #20]
                        }

                        if (btn->clickCount == 2) {
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	7c5b      	ldrb	r3, [r3, #17]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d10c      	bne.n	800085c <Button_Process+0xf8>
                            // Dwuklik
                            btn->waitingForDoubleClick = false;
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	2200      	movs	r2, #0
 8000846:	761a      	strb	r2, [r3, #24]
                            btn->clickCount = 0;
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	2200      	movs	r2, #0
 800084c:	745a      	strb	r2, [r3, #17]
                            if (btn->onDoubleClick) {
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <Button_Process+0xf8>
                                btn->onDoubleClick();
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800085a:	4798      	blx	r3
                            }
                        }
                    }

                    // Callback onRelease
                    if (btn->onRelease)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	6a1b      	ldr	r3, [r3, #32]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d006      	beq.n	8000872 <Button_Process+0x10e>
                        btn->onRelease();
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	6a1b      	ldr	r3, [r3, #32]
 8000868:	4798      	blx	r3
 800086a:	e002      	b.n	8000872 <Button_Process+0x10e>
                }
            }
        } else {
            btn->debounceCounter = 0;
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	2200      	movs	r2, #0
 8000870:	71da      	strb	r2, [r3, #7]
        }

        // Obsługa timeoutu dwukliku
        if (btn->waitingForDoubleClick
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	7e1b      	ldrb	r3, [r3, #24]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d01e      	beq.n	80008b8 <Button_Process+0x154>
            && ((systemTicks - btn->lastClickTime) > DOUBLE_CLICK_THRESHOLD)) {
 800087a:	4b37      	ldr	r3, [pc, #220]	@ (8000958 <Button_Process+0x1f4>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	2b1e      	cmp	r3, #30
 8000886:	d917      	bls.n	80008b8 <Button_Process+0x154>
            if (btn->clickCount == 1) {
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	7c5b      	ldrb	r3, [r3, #17]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d10d      	bne.n	80008ac <Button_Process+0x148>
                // Pojedynczy klik
                // warunek: jeżeli NIE było hold
                if (!btn->holdTriggered && btn->onPress) {
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	7c1b      	ldrb	r3, [r3, #16]
 8000894:	f083 0301 	eor.w	r3, r3, #1
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d006      	beq.n	80008ac <Button_Process+0x148>
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <Button_Process+0x148>
                    btn->onPress();
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	4798      	blx	r3
                }
            }
            btn->waitingForDoubleClick = false;
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	2200      	movs	r2, #0
 80008b0:	761a      	strb	r2, [r3, #24]
            btn->clickCount = 0;
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	2200      	movs	r2, #0
 80008b6:	745a      	strb	r2, [r3, #17]
        }

        // Obsługa hold i repeat
        if (btn->state == BUTTON_PRESSED) {
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	799b      	ldrb	r3, [r3, #6]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d13c      	bne.n	800093a <Button_Process+0x1d6>
            uint32_t elapsed = systemTicks - btn->pressTime;
 80008c0:	4b25      	ldr	r3, [pc, #148]	@ (8000958 <Button_Process+0x1f4>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	603b      	str	r3, [r7, #0]
            if (!btn->holdTriggered && (elapsed >= HOLD_THRESHOLD)) {
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	7c1b      	ldrb	r3, [r3, #16]
 80008d0:	f083 0301 	eor.w	r3, r3, #1
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d018      	beq.n	800090c <Button_Process+0x1a8>
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	2b63      	cmp	r3, #99	@ 0x63
 80008de:	d915      	bls.n	800090c <Button_Process+0x1a8>
                btn->holdTriggered = true;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	2201      	movs	r2, #1
 80008e4:	741a      	strb	r2, [r3, #16]
                // zerujemy liczniki kliknięć, by nie był liczony single-click
                btn->clickCount = 0;
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	2200      	movs	r2, #0
 80008ea:	745a      	strb	r2, [r3, #17]
                btn->waitingForDoubleClick = false;
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	2200      	movs	r2, #0
 80008f0:	761a      	strb	r2, [r3, #24]

                if (btn->onHold)
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d002      	beq.n	8000900 <Button_Process+0x19c>
                    btn->onHold();
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008fe:	4798      	blx	r3
                btn->nextRepeatTime = systemTicks + REPEAT_INTERVAL;
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <Button_Process+0x1f4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f103 0214 	add.w	r2, r3, #20
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	60da      	str	r2, [r3, #12]
            }
            if (btn->holdTriggered && (systemTicks >= btn->nextRepeatTime)) {
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	7c1b      	ldrb	r3, [r3, #16]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d012      	beq.n	800093a <Button_Process+0x1d6>
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	68da      	ldr	r2, [r3, #12]
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <Button_Process+0x1f4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	429a      	cmp	r2, r3
 800091e:	d80c      	bhi.n	800093a <Button_Process+0x1d6>
                if (btn->onRepeat)
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000924:	2b00      	cmp	r3, #0
 8000926:	d002      	beq.n	800092e <Button_Process+0x1ca>
                    btn->onRepeat();
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800092c:	4798      	blx	r3
                btn->nextRepeatTime += REPEAT_INTERVAL;
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	f103 0214 	add.w	r2, r3, #20
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < NUM_BUTTONS; i++) {
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3301      	adds	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	f77f af14 	ble.w	8000770 <Button_Process+0xc>
            }
        }
    }
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000000 	.word	0x20000000
 8000958:	200006ec 	.word	0x200006ec

0800095c <HAL_TIM_PeriodElapsedCallback>:

// Funkcja wywoływana w przerwaniu timera
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a23      	ldr	r2, [pc, #140]	@ (80009f8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d108      	bne.n	8000980 <HAL_TIM_PeriodElapsedCallback+0x24>

		SHT30_10msHandler();
 800096e:	f002 f8c9 	bl	8002b04 <SHT30_10msHandler>


		systemTicks++;  // Inkrementacja globalnego licznika czasu
 8000972:	4b22      	ldr	r3, [pc, #136]	@ (80009fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3301      	adds	r3, #1
 8000978:	4a20      	ldr	r2, [pc, #128]	@ (80009fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800097a:	6013      	str	r3, [r2, #0]
		SLIDER_Update();
 800097c:	f002 fca8 	bl	80032d0 <SLIDER_Update>
	}
	if (colon == 1) {
 8000980:	4b1f      	ldr	r3, [pc, #124]	@ (8000a00 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b01      	cmp	r3, #1
 8000988:	d112      	bne.n	80009b0 <HAL_TIM_PeriodElapsedCallback+0x54>
	        if (counter > 0) {
 800098a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	d007      	beq.n	80009a4 <HAL_TIM_PeriodElapsedCallback+0x48>
	            counter--; // Odliczanie licznika
 8000994:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	3b01      	subs	r3, #1
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	e005      	b.n	80009b0 <HAL_TIM_PeriodElapsedCallback+0x54>
	        } else {
	            counter = 50; // Reset licznika na 50
 80009a4:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80009a6:	2232      	movs	r2, #50	@ 0x32
 80009a8:	701a      	strb	r2, [r3, #0]
	            colon = 0;    // Ustawienie colon na 0
 80009aa:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
	        }
	    }

static volatile uint16_t cnter = 0 ;
		cnter++;
 80009b0:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	3301      	adds	r3, #1
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009bc:	801a      	strh	r2, [r3, #0]
		if  (cnter>400){
 80009be:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80009c8:	d911      	bls.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x92>
			cnter = 0 ;
 80009ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	801a      	strh	r2, [r3, #0]
			disp_mode++;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	3301      	adds	r3, #1
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80009dc:	701a      	strb	r2, [r3, #0]
			if (disp_mode > 1 )disp_mode = 0;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d902      	bls.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x92>
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
		}
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40000c00 	.word	0x40000c00
 80009fc:	200006ec 	.word	0x200006ec
 8000a00:	2000012d 	.word	0x2000012d
 8000a04:	20000108 	.word	0x20000108
 8000a08:	20000110 	.word	0x20000110
 8000a0c:	20000746 	.word	0x20000746

08000a10 <Encoder_HandleInterrupt>:

void Encoder_HandleInterrupt(int8_t direction)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
    if (s_encoderCb != NULL) {
 8000a1a:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <Encoder_HandleInterrupt+0x28>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d005      	beq.n	8000a2e <Encoder_HandleInterrupt+0x1e>
        s_encoderCb(direction);
 8000a22:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <Encoder_HandleInterrupt+0x28>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4798      	blx	r3
    }
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000010c 	.word	0x2000010c

08000a3c <charToSegment>:
//static Bits192 regValue;         // Przechowuje 192 bity rozbite na 12×16

// Implementacja tablicy segmentMap i funkcji charToSegment.
// (Zwykle segmentMap mamy w Display.h jako static const,
//  ale jeśli wolisz mieć ją w .c, możesz przenieść tutaj.)
uint8_t charToSegment(char c) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]

    switch (c) {
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	3b2a      	subs	r3, #42	@ 0x2a
 8000a4a:	2b50      	cmp	r3, #80	@ 0x50
 8000a4c:	f200 80dd 	bhi.w	8000c0a <charToSegment+0x1ce>
 8000a50:	a201      	add	r2, pc, #4	@ (adr r2, 8000a58 <charToSegment+0x1c>)
 8000a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a56:	bf00      	nop
 8000a58:	08000bab 	.word	0x08000bab
 8000a5c:	08000c0b 	.word	0x08000c0b
 8000a60:	08000c0b 	.word	0x08000c0b
 8000a64:	08000ba7 	.word	0x08000ba7
 8000a68:	08000c0b 	.word	0x08000c0b
 8000a6c:	08000c0b 	.word	0x08000c0b
 8000a70:	08000b9d 	.word	0x08000b9d
 8000a74:	08000b9d 	.word	0x08000b9d
 8000a78:	08000b9d 	.word	0x08000b9d
 8000a7c:	08000b9d 	.word	0x08000b9d
 8000a80:	08000b9d 	.word	0x08000b9d
 8000a84:	08000b9d 	.word	0x08000b9d
 8000a88:	08000b9d 	.word	0x08000b9d
 8000a8c:	08000b9d 	.word	0x08000b9d
 8000a90:	08000b9d 	.word	0x08000b9d
 8000a94:	08000b9d 	.word	0x08000b9d
 8000a98:	08000c0b 	.word	0x08000c0b
 8000a9c:	08000c0b 	.word	0x08000c0b
 8000aa0:	08000c0b 	.word	0x08000c0b
 8000aa4:	08000c0b 	.word	0x08000c0b
 8000aa8:	08000c0b 	.word	0x08000c0b
 8000aac:	08000c0b 	.word	0x08000c0b
 8000ab0:	08000c0b 	.word	0x08000c0b
 8000ab4:	08000bc7 	.word	0x08000bc7
 8000ab8:	08000bfb 	.word	0x08000bfb
 8000abc:	08000baf 	.word	0x08000baf
 8000ac0:	08000c0b 	.word	0x08000c0b
 8000ac4:	08000bdb 	.word	0x08000bdb
 8000ac8:	08000bc3 	.word	0x08000bc3
 8000acc:	08000c0b 	.word	0x08000c0b
 8000ad0:	08000c03 	.word	0x08000c03
 8000ad4:	08000c0b 	.word	0x08000c0b
 8000ad8:	08000c07 	.word	0x08000c07
 8000adc:	08000c0b 	.word	0x08000c0b
 8000ae0:	08000bf3 	.word	0x08000bf3
 8000ae4:	08000c0b 	.word	0x08000c0b
 8000ae8:	08000bd3 	.word	0x08000bd3
 8000aec:	08000beb 	.word	0x08000beb
 8000af0:	08000be3 	.word	0x08000be3
 8000af4:	08000c0b 	.word	0x08000c0b
 8000af8:	08000bb7 	.word	0x08000bb7
 8000afc:	08000bbf 	.word	0x08000bbf
 8000b00:	08000bcb 	.word	0x08000bcb
 8000b04:	08000bcf 	.word	0x08000bcf
 8000b08:	08000bcf 	.word	0x08000bcf
 8000b0c:	08000bcf 	.word	0x08000bcf
 8000b10:	08000c0b 	.word	0x08000c0b
 8000b14:	08000c0b 	.word	0x08000c0b
 8000b18:	08000bf7 	.word	0x08000bf7
 8000b1c:	08000c0b 	.word	0x08000c0b
 8000b20:	08000c0b 	.word	0x08000c0b
 8000b24:	08000c0b 	.word	0x08000c0b
 8000b28:	08000c0b 	.word	0x08000c0b
 8000b2c:	08000c0b 	.word	0x08000c0b
 8000b30:	08000c0b 	.word	0x08000c0b
 8000b34:	08000bc7 	.word	0x08000bc7
 8000b38:	08000bfb 	.word	0x08000bfb
 8000b3c:	08000bb3 	.word	0x08000bb3
 8000b40:	08000bdf 	.word	0x08000bdf
 8000b44:	08000bdb 	.word	0x08000bdb
 8000b48:	08000c0b 	.word	0x08000c0b
 8000b4c:	08000c0b 	.word	0x08000c0b
 8000b50:	08000bbb 	.word	0x08000bbb
 8000b54:	08000bd7 	.word	0x08000bd7
 8000b58:	08000c07 	.word	0x08000c07
 8000b5c:	08000c0b 	.word	0x08000c0b
 8000b60:	08000c0b 	.word	0x08000c0b
 8000b64:	08000c0b 	.word	0x08000c0b
 8000b68:	08000bd3 	.word	0x08000bd3
 8000b6c:	08000be7 	.word	0x08000be7
 8000b70:	08000be3 	.word	0x08000be3
 8000b74:	08000c0b 	.word	0x08000c0b
 8000b78:	08000bb7 	.word	0x08000bb7
 8000b7c:	08000bbf 	.word	0x08000bbf
 8000b80:	08000bcb 	.word	0x08000bcb
 8000b84:	08000bef 	.word	0x08000bef
 8000b88:	08000bef 	.word	0x08000bef
 8000b8c:	08000bef 	.word	0x08000bef
 8000b90:	08000c0b 	.word	0x08000c0b
 8000b94:	08000bff 	.word	0x08000bff
 8000b98:	08000bf7 	.word	0x08000bf7
    case '0' ... '9':
        return segmentMap[c - '0'];
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	3b30      	subs	r3, #48	@ 0x30
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c18 <charToSegment+0x1dc>)
 8000ba2:	5cd3      	ldrb	r3, [r2, r3]
 8000ba4:	e032      	b.n	8000c0c <charToSegment+0x1d0>
    case '-':
        return segmentMap[11];
 8000ba6:	2340      	movs	r3, #64	@ 0x40
 8000ba8:	e030      	b.n	8000c0c <charToSegment+0x1d0>
    case '*':// symbol  stopnia
        return segmentMap[12];
 8000baa:	2363      	movs	r3, #99	@ 0x63
 8000bac:	e02e      	b.n	8000c0c <charToSegment+0x1d0>
    case 'C':
        return segmentMap[13];
 8000bae:	2339      	movs	r3, #57	@ 0x39
 8000bb0:	e02c      	b.n	8000c0c <charToSegment+0x1d0>
    case 'c':
        return segmentMap[29];
 8000bb2:	236e      	movs	r3, #110	@ 0x6e
 8000bb4:	e02a      	b.n	8000c0c <charToSegment+0x1d0>
    case 'r':
    case 'R':
        return segmentMap[14];
 8000bb6:	2350      	movs	r3, #80	@ 0x50
 8000bb8:	e028      	b.n	8000c0c <charToSegment+0x1d0>
    case 'h':
        return segmentMap[15];
 8000bba:	2374      	movs	r3, #116	@ 0x74
 8000bbc:	e026      	b.n	8000c0c <charToSegment+0x1d0>
    case 's':
    case 'S':
        return segmentMap[5];
 8000bbe:	236d      	movs	r3, #109	@ 0x6d
 8000bc0:	e024      	b.n	8000c0c <charToSegment+0x1d0>
    case 'F':
        return segmentMap[16];
 8000bc2:	2371      	movs	r3, #113	@ 0x71
 8000bc4:	e022      	b.n	8000c0c <charToSegment+0x1d0>
    case 'A':
    case 'a':
        return segmentMap[17];
 8000bc6:	2377      	movs	r3, #119	@ 0x77
 8000bc8:	e020      	b.n	8000c0c <charToSegment+0x1d0>
    case 't':
    case 'T':
        return segmentMap[18];
 8000bca:	2378      	movs	r3, #120	@ 0x78
 8000bcc:	e01e      	b.n	8000c0c <charToSegment+0x1d0>
    case 'V':
    case 'U':
    case 'W':
        return segmentMap[19];
 8000bce:	233e      	movs	r3, #62	@ 0x3e
 8000bd0:	e01c      	b.n	8000c0c <charToSegment+0x1d0>
    case 'n':
    case 'N':
        return segmentMap[20];
 8000bd2:	2354      	movs	r3, #84	@ 0x54
 8000bd4:	e01a      	b.n	8000c0c <charToSegment+0x1d0>
    case 'i':
        return segmentMap[21];
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	e018      	b.n	8000c0c <charToSegment+0x1d0>
    case 'E':
    case 'e':
        return segmentMap[22];
 8000bda:	2379      	movs	r3, #121	@ 0x79
 8000bdc:	e016      	b.n	8000c0c <charToSegment+0x1d0>
    case 'd':
        return segmentMap[23];
 8000bde:	235e      	movs	r3, #94	@ 0x5e
 8000be0:	e014      	b.n	8000c0c <charToSegment+0x1d0>
    case 'P':
    case 'p':
        return segmentMap[24];
 8000be2:	2373      	movs	r3, #115	@ 0x73
 8000be4:	e012      	b.n	8000c0c <charToSegment+0x1d0>
    case 'o':
        return segmentMap[25];
 8000be6:	235c      	movs	r3, #92	@ 0x5c
 8000be8:	e010      	b.n	8000c0c <charToSegment+0x1d0>
    case 'O':
        return segmentMap[0];
 8000bea:	233f      	movs	r3, #63	@ 0x3f
 8000bec:	e00e      	b.n	8000c0c <charToSegment+0x1d0>
    case 'u':
    case 'w':
    case 'v':
        return segmentMap[26];
 8000bee:	231c      	movs	r3, #28
 8000bf0:	e00c      	b.n	8000c0c <charToSegment+0x1d0>
    case 'L':
        return segmentMap[27];
 8000bf2:	2338      	movs	r3, #56	@ 0x38
 8000bf4:	e00a      	b.n	8000c0c <charToSegment+0x1d0>
    case 'z':
    case 'Z':
        return segmentMap[2];
 8000bf6:	235b      	movs	r3, #91	@ 0x5b
 8000bf8:	e008      	b.n	8000c0c <charToSegment+0x1d0>
    case 'b':
    case 'B':
        return segmentMap[28];
 8000bfa:	237c      	movs	r3, #124	@ 0x7c
 8000bfc:	e006      	b.n	8000c0c <charToSegment+0x1d0>
    case 'y':
            return segmentMap[29];
 8000bfe:	236e      	movs	r3, #110	@ 0x6e
 8000c00:	e004      	b.n	8000c0c <charToSegment+0x1d0>
    case 'H':
            return segmentMap[30];
 8000c02:	2376      	movs	r3, #118	@ 0x76
 8000c04:	e002      	b.n	8000c0c <charToSegment+0x1d0>
    case 'j':
    case 'J':
                   return segmentMap[31];
 8000c06:	231e      	movs	r3, #30
 8000c08:	e000      	b.n	8000c0c <charToSegment+0x1d0>
    default:
        // spacja lub nieobsługiwany znak
        return segmentMap[10];
 8000c0a:	2300      	movs	r3, #0
    }
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	0800c4f0 	.word	0x0800c4f0

08000c1c <HAL_SPI_TxCpltCallback>:
 * ---------------------------------------------------------------------------
 * Implementacja funkcji obsługujących 192-bitowy rejestr wyświetlaczy
 * ---------------------------------------------------------------------------
 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if(hspi->Instance == SPI1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a09      	ldr	r2, [pc, #36]	@ (8000c50 <HAL_SPI_TxCpltCallback+0x34>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d10c      	bne.n	8000c48 <HAL_SPI_TxCpltCallback+0x2c>
  {
    // Krótki impuls na pin LATCH
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2140      	movs	r1, #64	@ 0x40
 8000c32:	4808      	ldr	r0, [pc, #32]	@ (8000c54 <HAL_SPI_TxCpltCallback+0x38>)
 8000c34:	f004 ffa4 	bl	8005b80 <HAL_GPIO_WritePin>
    // Ewentualnie opóźnienie
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2140      	movs	r1, #64	@ 0x40
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <HAL_SPI_TxCpltCallback+0x38>)
 8000c3e:	f004 ff9f 	bl	8005b80 <HAL_GPIO_WritePin>
    spiTransferInProgress = false;  // Zakończono transmisję
 8000c42:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <HAL_SPI_TxCpltCallback+0x3c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
  }

}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40013000 	.word	0x40013000
 8000c54:	40020000 	.word	0x40020000
 8000c58:	20000112 	.word	0x20000112

08000c5c <ClearClockBits>:
  HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 24);
}


void ClearClockBits(MyClockBitFields* clockBits)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  memset(clockBits, 0, sizeof(MyClockBitFields));
 8000c64:	2218      	movs	r2, #24
 8000c66:	2100      	movs	r1, #0
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f00a ff5b 	bl	800bb24 <memset>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <SetSecondLedSingle>:

void SetSecondLedSingle(MyClockBitFields* clockBits, uint8_t second)
{
 8000c76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c78:	b085      	sub	sp, #20
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 8000c80:	78f9      	ldrb	r1, [r7, #3]
 8000c82:	293b      	cmp	r1, #59	@ 0x3b
 8000c84:	d901      	bls.n	8000c8a <SetSecondLedSingle+0x14>
 8000c86:	213b      	movs	r1, #59	@ 0x3b
 8000c88:	70f9      	strb	r1, [r7, #3]

    clockBits->secondsRing = 0ULL;
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	7008      	strb	r0, [r1, #0]
 8000c90:	2000      	movs	r0, #0
 8000c92:	7048      	strb	r0, [r1, #1]
 8000c94:	2000      	movs	r0, #0
 8000c96:	7088      	strb	r0, [r1, #2]
 8000c98:	2000      	movs	r0, #0
 8000c9a:	70c8      	strb	r0, [r1, #3]
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	7108      	strb	r0, [r1, #4]
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	7148      	strb	r0, [r1, #5]
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	7188      	strb	r0, [r1, #6]
 8000ca8:	79c8      	ldrb	r0, [r1, #7]
 8000caa:	f020 000f 	bic.w	r0, r0, #15
 8000cae:	71c8      	strb	r0, [r1, #7]
    uint64_t mask = (1ULL << second);
 8000cb0:	78fe      	ldrb	r6, [r7, #3]
 8000cb2:	f04f 0001 	mov.w	r0, #1
 8000cb6:	f04f 0100 	mov.w	r1, #0
 8000cba:	f1a6 0e20 	sub.w	lr, r6, #32
 8000cbe:	f1c6 0c20 	rsb	ip, r6, #32
 8000cc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cc6:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000cca:	ea43 030e 	orr.w	r3, r3, lr
 8000cce:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cd2:	ea43 030c 	orr.w	r3, r3, ip
 8000cd6:	fa00 f206 	lsl.w	r2, r0, r6
 8000cda:	e9c7 2302 	strd	r2, r3, [r7, #8]
    clockBits->secondsRing = mask;
 8000cde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ce2:	4614      	mov	r4, r2
 8000ce4:	f023 4570 	bic.w	r5, r3, #4026531840	@ 0xf0000000
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	601c      	str	r4, [r3, #0]
 8000cec:	462a      	mov	r2, r5
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	711a      	strb	r2, [r3, #4]
 8000cf6:	0a2a      	lsrs	r2, r5, #8
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	715a      	strb	r2, [r3, #5]
 8000d00:	0c2a      	lsrs	r2, r5, #16
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	2100      	movs	r1, #0
 8000d06:	430a      	orrs	r2, r1
 8000d08:	719a      	strb	r2, [r3, #6]
 8000d0a:	0e2a      	lsrs	r2, r5, #24
 8000d0c:	f002 020f 	and.w	r2, r2, #15
 8000d10:	f002 000f 	and.w	r0, r2, #15
 8000d14:	79da      	ldrb	r2, [r3, #7]
 8000d16:	f022 020f 	bic.w	r2, r2, #15
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	71da      	strb	r2, [r3, #7]
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d2a <SetSecondLedAccumulating>:

void SetSecondLedAccumulating(MyClockBitFields* clockBits, uint8_t second)
{
 8000d2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 8000d36:	78f9      	ldrb	r1, [r7, #3]
 8000d38:	293b      	cmp	r1, #59	@ 0x3b
 8000d3a:	d901      	bls.n	8000d40 <SetSecondLedAccumulating+0x16>
 8000d3c:	213b      	movs	r1, #59	@ 0x3b
 8000d3e:	70f9      	strb	r1, [r7, #3]
    if (second == 0) {
 8000d40:	78f9      	ldrb	r1, [r7, #3]
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d113      	bne.n	8000d6e <SetSecondLedAccumulating+0x44>
        clockBits->secondsRing = 0ULL;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	705a      	strb	r2, [r3, #1]
 8000d50:	2200      	movs	r2, #0
 8000d52:	709a      	strb	r2, [r3, #2]
 8000d54:	2200      	movs	r2, #0
 8000d56:	70da      	strb	r2, [r3, #3]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	711a      	strb	r2, [r3, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	715a      	strb	r2, [r3, #5]
 8000d60:	2200      	movs	r2, #0
 8000d62:	719a      	strb	r2, [r3, #6]
 8000d64:	79da      	ldrb	r2, [r3, #7]
 8000d66:	f022 020f 	bic.w	r2, r2, #15
 8000d6a:	71da      	strb	r2, [r3, #7]
    } else {
        clockBits->secondsRing |= (1ULL << second);
    }
}
 8000d6c:	e048      	b.n	8000e00 <SetSecondLedAccumulating+0xd6>
        clockBits->secondsRing |= (1ULL << second);
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f8d1 a000 	ldr.w	sl, [r1]
 8000d74:	7908      	ldrb	r0, [r1, #4]
 8000d76:	794e      	ldrb	r6, [r1, #5]
 8000d78:	0236      	lsls	r6, r6, #8
 8000d7a:	4330      	orrs	r0, r6
 8000d7c:	798e      	ldrb	r6, [r1, #6]
 8000d7e:	0436      	lsls	r6, r6, #16
 8000d80:	4330      	orrs	r0, r6
 8000d82:	79c9      	ldrb	r1, [r1, #7]
 8000d84:	f001 010f 	and.w	r1, r1, #15
 8000d88:	0609      	lsls	r1, r1, #24
 8000d8a:	4301      	orrs	r1, r0
 8000d8c:	468b      	mov	fp, r1
 8000d8e:	78fe      	ldrb	r6, [r7, #3]
 8000d90:	f04f 0001 	mov.w	r0, #1
 8000d94:	f04f 0100 	mov.w	r1, #0
 8000d98:	f1a6 0e20 	sub.w	lr, r6, #32
 8000d9c:	f1c6 0c20 	rsb	ip, r6, #32
 8000da0:	fa01 f306 	lsl.w	r3, r1, r6
 8000da4:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000da8:	ea43 030e 	orr.w	r3, r3, lr
 8000dac:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000db0:	ea43 030c 	orr.w	r3, r3, ip
 8000db4:	fa00 f206 	lsl.w	r2, r0, r6
 8000db8:	ea4a 0802 	orr.w	r8, sl, r2
 8000dbc:	ea4b 0903 	orr.w	r9, fp, r3
 8000dc0:	4644      	mov	r4, r8
 8000dc2:	f029 4570 	bic.w	r5, r9, #4026531840	@ 0xf0000000
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	601c      	str	r4, [r3, #0]
 8000dca:	462a      	mov	r2, r5
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	2100      	movs	r1, #0
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	711a      	strb	r2, [r3, #4]
 8000dd4:	0a2a      	lsrs	r2, r5, #8
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	2100      	movs	r1, #0
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	715a      	strb	r2, [r3, #5]
 8000dde:	0c2a      	lsrs	r2, r5, #16
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	2100      	movs	r1, #0
 8000de4:	430a      	orrs	r2, r1
 8000de6:	719a      	strb	r2, [r3, #6]
 8000de8:	0e2a      	lsrs	r2, r5, #24
 8000dea:	f002 020f 	and.w	r2, r2, #15
 8000dee:	f002 000f 	and.w	r0, r2, #15
 8000df2:	79da      	ldrb	r2, [r3, #7]
 8000df4:	f022 020f 	bic.w	r2, r2, #15
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	71da      	strb	r2, [r3, #7]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e0a <SetSecondLedAccumulating2>:

void SetSecondLedAccumulating2(MyClockBitFields* clockBits, uint8_t second)
{
 8000e0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 8000e16:	78f9      	ldrb	r1, [r7, #3]
 8000e18:	293b      	cmp	r1, #59	@ 0x3b
 8000e1a:	d901      	bls.n	8000e20 <SetSecondLedAccumulating2+0x16>
 8000e1c:	213b      	movs	r1, #59	@ 0x3b
 8000e1e:	70f9      	strb	r1, [r7, #3]
    clockBits->secondsRing = 0ULL;
 8000e20:	6879      	ldr	r1, [r7, #4]
 8000e22:	2000      	movs	r0, #0
 8000e24:	7008      	strb	r0, [r1, #0]
 8000e26:	2000      	movs	r0, #0
 8000e28:	7048      	strb	r0, [r1, #1]
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	7088      	strb	r0, [r1, #2]
 8000e2e:	2000      	movs	r0, #0
 8000e30:	70c8      	strb	r0, [r1, #3]
 8000e32:	2000      	movs	r0, #0
 8000e34:	7108      	strb	r0, [r1, #4]
 8000e36:	2000      	movs	r0, #0
 8000e38:	7148      	strb	r0, [r1, #5]
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	7188      	strb	r0, [r1, #6]
 8000e3e:	79c8      	ldrb	r0, [r1, #7]
 8000e40:	f020 000f 	bic.w	r0, r0, #15
 8000e44:	71c8      	strb	r0, [r1, #7]
    for (uint8_t i = 0; i <= second; i++) {
 8000e46:	2100      	movs	r1, #0
 8000e48:	73f9      	strb	r1, [r7, #15]
 8000e4a:	e04b      	b.n	8000ee4 <SetSecondLedAccumulating2+0xda>
        clockBits->secondsRing |= (1ULL << i);
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	f8d1 a000 	ldr.w	sl, [r1]
 8000e52:	7908      	ldrb	r0, [r1, #4]
 8000e54:	794e      	ldrb	r6, [r1, #5]
 8000e56:	0236      	lsls	r6, r6, #8
 8000e58:	4330      	orrs	r0, r6
 8000e5a:	798e      	ldrb	r6, [r1, #6]
 8000e5c:	0436      	lsls	r6, r6, #16
 8000e5e:	4330      	orrs	r0, r6
 8000e60:	79c9      	ldrb	r1, [r1, #7]
 8000e62:	f001 010f 	and.w	r1, r1, #15
 8000e66:	0609      	lsls	r1, r1, #24
 8000e68:	4301      	orrs	r1, r0
 8000e6a:	468b      	mov	fp, r1
 8000e6c:	7bfe      	ldrb	r6, [r7, #15]
 8000e6e:	f04f 0001 	mov.w	r0, #1
 8000e72:	f04f 0100 	mov.w	r1, #0
 8000e76:	f1a6 0e20 	sub.w	lr, r6, #32
 8000e7a:	f1c6 0c20 	rsb	ip, r6, #32
 8000e7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e82:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000e86:	ea43 030e 	orr.w	r3, r3, lr
 8000e8a:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000e8e:	ea43 030c 	orr.w	r3, r3, ip
 8000e92:	fa00 f206 	lsl.w	r2, r0, r6
 8000e96:	ea4a 0802 	orr.w	r8, sl, r2
 8000e9a:	ea4b 0903 	orr.w	r9, fp, r3
 8000e9e:	4644      	mov	r4, r8
 8000ea0:	f029 4570 	bic.w	r5, r9, #4026531840	@ 0xf0000000
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	600c      	str	r4, [r1, #0]
 8000ea8:	4628      	mov	r0, r5
 8000eaa:	b2c0      	uxtb	r0, r0
 8000eac:	2600      	movs	r6, #0
 8000eae:	4330      	orrs	r0, r6
 8000eb0:	7108      	strb	r0, [r1, #4]
 8000eb2:	0a28      	lsrs	r0, r5, #8
 8000eb4:	b2c0      	uxtb	r0, r0
 8000eb6:	2600      	movs	r6, #0
 8000eb8:	4330      	orrs	r0, r6
 8000eba:	7148      	strb	r0, [r1, #5]
 8000ebc:	0c28      	lsrs	r0, r5, #16
 8000ebe:	b2c0      	uxtb	r0, r0
 8000ec0:	2600      	movs	r6, #0
 8000ec2:	4330      	orrs	r0, r6
 8000ec4:	7188      	strb	r0, [r1, #6]
 8000ec6:	0e28      	lsrs	r0, r5, #24
 8000ec8:	f000 000f 	and.w	r0, r0, #15
 8000ecc:	f000 0c0f 	and.w	ip, r0, #15
 8000ed0:	79c8      	ldrb	r0, [r1, #7]
 8000ed2:	f020 000f 	bic.w	r0, r0, #15
 8000ed6:	4606      	mov	r6, r0
 8000ed8:	4660      	mov	r0, ip
 8000eda:	4330      	orrs	r0, r6
 8000edc:	71c8      	strb	r0, [r1, #7]
    for (uint8_t i = 0; i <= second; i++) {
 8000ede:	7bf9      	ldrb	r1, [r7, #15]
 8000ee0:	3101      	adds	r1, #1
 8000ee2:	73f9      	strb	r1, [r7, #15]
 8000ee4:	7bf8      	ldrb	r0, [r7, #15]
 8000ee6:	78f9      	ldrb	r1, [r7, #3]
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	d9af      	bls.n	8000e4c <SetSecondLedAccumulating2+0x42>
    }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000ef8 <SetTime7Seg_Top>:

/**
 * Ustawia 6 wyświetlaczy 7-seg (top lub bottom) na HH:MM:SS
 */
void SetTime7Seg_Top(MyClockBitFields* clockBits, uint8_t h, uint8_t m, uint8_t s)
{
 8000ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000efc:	b09d      	sub	sp, #116	@ 0x74
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8000f02:	4618      	mov	r0, r3
 8000f04:	460b      	mov	r3, r1
 8000f06:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8000f10:	4603      	mov	r3, r0
 8000f12:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

	  // Bufor na segmenty wyświetlacza (6 pozycji)
	    uint8_t backBuffer[6] = {0};
 8000f16:	2300      	movs	r3, #0
 8000f18:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	    // Obsługa godzin
	    if (h < 10) {
 8000f20:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000f24:	2b09      	cmp	r3, #9
 8000f26:	d80d      	bhi.n	8000f44 <SetTime7Seg_Top+0x4c>
	        backBuffer[0] = segmentMap[10]; // Puste dziesiątki godzin
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = charToSegment('0' + h); // Jednostki godzin
 8000f2e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000f32:	3330      	adds	r3, #48	@ 0x30
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fd80 	bl	8000a3c <charToSegment>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
 8000f42:	e022      	b.n	8000f8a <SetTime7Seg_Top+0x92>
	    } else {
	        backBuffer[0] = charToSegment('0' + (h / 10)); // Dziesiątki godzin
 8000f44:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000f48:	4b87      	ldr	r3, [pc, #540]	@ (8001168 <SetTime7Seg_Top+0x270>)
 8000f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8000f4e:	08db      	lsrs	r3, r3, #3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	3330      	adds	r3, #48	@ 0x30
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fd70 	bl	8000a3c <charToSegment>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = charToSegment('0' + (h % 10)); // Jednostki godzin
 8000f62:	f897 105b 	ldrb.w	r1, [r7, #91]	@ 0x5b
 8000f66:	4b80      	ldr	r3, [pc, #512]	@ (8001168 <SetTime7Seg_Top+0x270>)
 8000f68:	fba3 2301 	umull	r2, r3, r3, r1
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	1acb      	subs	r3, r1, r3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	3330      	adds	r3, #48	@ 0x30
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fd5c 	bl	8000a3c <charToSegment>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	    }

	    // Obsługa minut
	    backBuffer[2] = charToSegment('0' + (m / 10)); // Dziesiątki minut
 8000f8a:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8000f8e:	4b76      	ldr	r3, [pc, #472]	@ (8001168 <SetTime7Seg_Top+0x270>)
 8000f90:	fba3 2302 	umull	r2, r3, r3, r2
 8000f94:	08db      	lsrs	r3, r3, #3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	3330      	adds	r3, #48	@ 0x30
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fd4d 	bl	8000a3c <charToSegment>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	    backBuffer[3] = charToSegment('0' + (m % 10)); // Jednostki minut
 8000fa8:	f897 105a 	ldrb.w	r1, [r7, #90]	@ 0x5a
 8000fac:	4b6e      	ldr	r3, [pc, #440]	@ (8001168 <SetTime7Seg_Top+0x270>)
 8000fae:	fba3 2301 	umull	r2, r3, r3, r1
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	1acb      	subs	r3, r1, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	3330      	adds	r3, #48	@ 0x30
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fd39 	bl	8000a3c <charToSegment>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	    // Obsługa sekund
	    backBuffer[4] = charToSegment('0' + (s / 10)); // Dziesiątki sekund
 8000fd0:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8000fd4:	4b64      	ldr	r3, [pc, #400]	@ (8001168 <SetTime7Seg_Top+0x270>)
 8000fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8000fda:	08db      	lsrs	r3, r3, #3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	3330      	adds	r3, #48	@ 0x30
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fd2a 	bl	8000a3c <charToSegment>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	    backBuffer[5] = charToSegment('0' + (s % 10)); // Jednostki sekund
 8000fee:	f897 1059 	ldrb.w	r1, [r7, #89]	@ 0x59
 8000ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8001168 <SetTime7Seg_Top+0x270>)
 8000ff4:	fba3 2301 	umull	r2, r3, r3, r1
 8000ff8:	08da      	lsrs	r2, r3, #3
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	1acb      	subs	r3, r1, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	3330      	adds	r3, #48	@ 0x30
 8001008:	b2db      	uxtb	r3, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fd16 	bl	8000a3c <charToSegment>
 8001010:	4603      	mov	r3, r0
 8001012:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	    // Zbudowanie wartości 48-bitowej na podstawie bufora
	    uint64_t displayVal = 0ULL;
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	f04f 0300 	mov.w	r3, #0
 800101e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[5] << 40);
 8001022:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2200      	movs	r2, #0
 800102a:	653b      	str	r3, [r7, #80]	@ 0x50
 800102c:	657a      	str	r2, [r7, #84]	@ 0x54
 800102e:	f04f 0000 	mov.w	r0, #0
 8001032:	f04f 0100 	mov.w	r1, #0
 8001036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001038:	0219      	lsls	r1, r3, #8
 800103a:	2000      	movs	r0, #0
 800103c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001040:	ea42 0600 	orr.w	r6, r2, r0
 8001044:	62be      	str	r6, [r7, #40]	@ 0x28
 8001046:	430b      	orrs	r3, r1
 8001048:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800104a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800104e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[4] << 32);
 8001052:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2200      	movs	r2, #0
 800105a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800105c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800105e:	f04f 0000 	mov.w	r0, #0
 8001062:	f04f 0100 	mov.w	r1, #0
 8001066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001068:	0019      	movs	r1, r3
 800106a:	2000      	movs	r0, #0
 800106c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001070:	ea42 0600 	orr.w	r6, r2, r0
 8001074:	623e      	str	r6, [r7, #32]
 8001076:	430b      	orrs	r3, r1
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
 800107a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800107e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[0] << 24);
 8001082:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2200      	movs	r2, #0
 800108a:	643b      	str	r3, [r7, #64]	@ 0x40
 800108c:	647a      	str	r2, [r7, #68]	@ 0x44
 800108e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8001092:	460b      	mov	r3, r1
 8001094:	0a1d      	lsrs	r5, r3, #8
 8001096:	460b      	mov	r3, r1
 8001098:	061c      	lsls	r4, r3, #24
 800109a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800109e:	ea42 0104 	orr.w	r1, r2, r4
 80010a2:	61b9      	str	r1, [r7, #24]
 80010a4:	432b      	orrs	r3, r5
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80010ac:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[1] << 16);
 80010b0:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2200      	movs	r2, #0
 80010b8:	4698      	mov	r8, r3
 80010ba:	4691      	mov	r9, r2
 80010bc:	f04f 0000 	mov.w	r0, #0
 80010c0:	f04f 0100 	mov.w	r1, #0
 80010c4:	ea4f 4109 	mov.w	r1, r9, lsl #16
 80010c8:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 80010cc:	ea4f 4008 	mov.w	r0, r8, lsl #16
 80010d0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80010d4:	ea42 0400 	orr.w	r4, r2, r0
 80010d8:	613c      	str	r4, [r7, #16]
 80010da:	430b      	orrs	r3, r1
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80010e2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[2] << 8);
 80010e6:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2200      	movs	r2, #0
 80010ee:	469a      	mov	sl, r3
 80010f0:	4693      	mov	fp, r2
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80010fe:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8001102:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8001106:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800110a:	ea40 0402 	orr.w	r4, r0, r2
 800110e:	60bc      	str	r4, [r7, #8]
 8001110:	430b      	orrs	r3, r1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001118:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[3] << 0);
 800111c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2200      	movs	r2, #0
 8001124:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001126:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001128:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800112c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001130:	4621      	mov	r1, r4
 8001132:	4311      	orrs	r1, r2
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	4629      	mov	r1, r5
 8001138:	4319      	orrs	r1, r3
 800113a:	6079      	str	r1, [r7, #4]
 800113c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001140:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68

	    clockBits->topDisplay = displayVal;
 8001144:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001148:	633a      	str	r2, [r7, #48]	@ 0x30
 800114a:	b29b      	uxth	r3, r3
 800114c:	637b      	str	r3, [r7, #52]	@ 0x34
 800114e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001150:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001154:	4602      	mov	r2, r0
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	460a      	mov	r2, r1
 800115a:	821a      	strh	r2, [r3, #16]
}
 800115c:	bf00      	nop
 800115e:	3774      	adds	r7, #116	@ 0x74
 8001160:	46bd      	mov	sp, r7
 8001162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001166:	bf00      	nop
 8001168:	cccccccd 	.word	0xcccccccd

0800116c <SetTime7Seg_Void>:



void SetTime7Seg_Void(MyClockBitFields* clockBits)
{
 800116c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001170:	b09c      	sub	sp, #112	@ 0x70
 8001172:	af00      	add	r7, sp, #0
 8001174:	65f8      	str	r0, [r7, #92]	@ 0x5c

	  // Bufor na segmenty wyświetlacza (6 pozycji)
	    uint8_t backBuffer[6] = {0};
 8001176:	2300      	movs	r3, #0
 8001178:	663b      	str	r3, [r7, #96]	@ 0x60
 800117a:	2300      	movs	r3, #0
 800117c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	    // Obsługa godzin

	        backBuffer[0] = segmentMap[10]; // Puste dziesiątki godzin
 8001180:	2300      	movs	r3, #0
 8001182:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = segmentMap[10]; // Jednostki godzin
 8001186:	2300      	movs	r3, #0
 8001188:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61


	    // Obsługa minut
	    backBuffer[2] = segmentMap[10]; // Dziesiątki minut
 800118c:	2300      	movs	r3, #0
 800118e:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	    backBuffer[3] = segmentMap[10]; // Jednostki minut
 8001192:	2300      	movs	r3, #0
 8001194:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	    // Obsługa sekund
	    backBuffer[4] = segmentMap[10]; // Dziesiątki sekund
 8001198:	2300      	movs	r3, #0
 800119a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	    backBuffer[5] = segmentMap[10]; // Jednostki sekund
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	    // Zbudowanie wartości 48-bitowej na podstawie bufora
	    uint64_t displayVal = 0ULL;
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	f04f 0300 	mov.w	r3, #0
 80011ac:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[5] << 40);
 80011b0:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2200      	movs	r2, #0
 80011b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80011ba:	657a      	str	r2, [r7, #84]	@ 0x54
 80011bc:	f04f 0000 	mov.w	r0, #0
 80011c0:	f04f 0100 	mov.w	r1, #0
 80011c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011c6:	0219      	lsls	r1, r3, #8
 80011c8:	2000      	movs	r0, #0
 80011ca:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80011ce:	ea42 0800 	orr.w	r8, r2, r0
 80011d2:	ea43 0901 	orr.w	r9, r3, r1
 80011d6:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[4] << 32);
 80011da:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2200      	movs	r2, #0
 80011e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80011e4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80011e6:	f04f 0000 	mov.w	r0, #0
 80011ea:	f04f 0100 	mov.w	r1, #0
 80011ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011f0:	0019      	movs	r1, r3
 80011f2:	2000      	movs	r0, #0
 80011f4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80011f8:	ea42 0600 	orr.w	r6, r2, r0
 80011fc:	623e      	str	r6, [r7, #32]
 80011fe:	430b      	orrs	r3, r1
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
 8001202:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001206:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[0] << 24);
 800120a:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2200      	movs	r2, #0
 8001212:	643b      	str	r3, [r7, #64]	@ 0x40
 8001214:	647a      	str	r2, [r7, #68]	@ 0x44
 8001216:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800121a:	460b      	mov	r3, r1
 800121c:	0a1d      	lsrs	r5, r3, #8
 800121e:	460b      	mov	r3, r1
 8001220:	061c      	lsls	r4, r3, #24
 8001222:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001226:	ea42 0104 	orr.w	r1, r2, r4
 800122a:	61b9      	str	r1, [r7, #24]
 800122c:	432b      	orrs	r3, r5
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001234:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[1] << 16);
 8001238:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2200      	movs	r2, #0
 8001240:	469a      	mov	sl, r3
 8001242:	4693      	mov	fp, r2
 8001244:	f04f 0000 	mov.w	r0, #0
 8001248:	f04f 0100 	mov.w	r1, #0
 800124c:	ea4f 410b 	mov.w	r1, fp, lsl #16
 8001250:	ea41 411a 	orr.w	r1, r1, sl, lsr #16
 8001254:	ea4f 400a 	mov.w	r0, sl, lsl #16
 8001258:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800125c:	ea42 0400 	orr.w	r4, r2, r0
 8001260:	613c      	str	r4, [r7, #16]
 8001262:	430b      	orrs	r3, r1
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800126a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[2] << 8);
 800126e:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2200      	movs	r2, #0
 8001276:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001278:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	f04f 0300 	mov.w	r3, #0
 8001282:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001286:	4629      	mov	r1, r5
 8001288:	020b      	lsls	r3, r1, #8
 800128a:	4621      	mov	r1, r4
 800128c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001290:	4621      	mov	r1, r4
 8001292:	020a      	lsls	r2, r1, #8
 8001294:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001298:	ea40 0402 	orr.w	r4, r0, r2
 800129c:	60bc      	str	r4, [r7, #8]
 800129e:	430b      	orrs	r3, r1
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80012a6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[3] << 0);
 80012aa:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2200      	movs	r2, #0
 80012b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80012b4:	637a      	str	r2, [r7, #52]	@ 0x34
 80012b6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80012ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80012be:	4621      	mov	r1, r4
 80012c0:	4311      	orrs	r1, r2
 80012c2:	6039      	str	r1, [r7, #0]
 80012c4:	4629      	mov	r1, r5
 80012c6:	4319      	orrs	r1, r3
 80012c8:	6079      	str	r1, [r7, #4]
 80012ca:	e9d7 3400 	ldrd	r3, r4, [r7]
 80012ce:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68

	    clockBits->topDisplay = displayVal;
 80012d2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80012d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80012d8:	b29b      	uxth	r3, r3
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80012e2:	4602      	mov	r2, r0
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	460a      	mov	r2, r1
 80012e8:	821a      	strh	r2, [r3, #16]
}
 80012ea:	bf00      	nop
 80012ec:	3770      	adds	r7, #112	@ 0x70
 80012ee:	46bd      	mov	sp, r7
 80012f0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80012f4:	4770      	bx	lr
	...

080012f8 <UpdateAllDisplays>:




void UpdateAllDisplays(const MyClockBitFields* clockBits)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
    // Sprawdź, czy SPI jest zajęte
    if (spiTransferInProgress) {
 8001300:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <UpdateAllDisplays+0x7c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d130      	bne.n	800136c <UpdateAllDisplays+0x74>
        return;
    }

    spiTransferInProgress = true;
 800130a:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <UpdateAllDisplays+0x7c>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]

    static uint8_t spiTxBuffer[24];
    memset(spiTxBuffer, 0, sizeof(spiTxBuffer));
 8001310:	2218      	movs	r2, #24
 8001312:	2100      	movs	r1, #0
 8001314:	4818      	ldr	r0, [pc, #96]	@ (8001378 <UpdateAllDisplays+0x80>)
 8001316:	f00a fc05 	bl	800bb24 <memset>

    const uint8_t* p = (const uint8_t*)clockBits;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]
    int byteIndex = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]

    for (int partIndex = 11; partIndex >= 0; partIndex--)
 8001322:	230b      	movs	r3, #11
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	e018      	b.n	800135a <UpdateAllDisplays+0x62>
    {
        spiTxBuffer[byteIndex++] = p[2 * partIndex + 1];
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	3301      	adds	r3, #1
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	441a      	add	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	1c59      	adds	r1, r3, #1
 8001336:	6179      	str	r1, [r7, #20]
 8001338:	7811      	ldrb	r1, [r2, #0]
 800133a:	4a0f      	ldr	r2, [pc, #60]	@ (8001378 <UpdateAllDisplays+0x80>)
 800133c:	54d1      	strb	r1, [r2, r3]
        spiTxBuffer[byteIndex++] = p[2 * partIndex + 0];
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	441a      	add	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	1c59      	adds	r1, r3, #1
 800134c:	6179      	str	r1, [r7, #20]
 800134e:	7811      	ldrb	r1, [r2, #0]
 8001350:	4a09      	ldr	r2, [pc, #36]	@ (8001378 <UpdateAllDisplays+0x80>)
 8001352:	54d1      	strb	r1, [r2, r3]
    for (int partIndex = 11; partIndex >= 0; partIndex--)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	3b01      	subs	r3, #1
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	2b00      	cmp	r3, #0
 800135e:	dae3      	bge.n	8001328 <UpdateAllDisplays+0x30>
    }

    HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 24);
 8001360:	2218      	movs	r2, #24
 8001362:	4905      	ldr	r1, [pc, #20]	@ (8001378 <UpdateAllDisplays+0x80>)
 8001364:	4805      	ldr	r0, [pc, #20]	@ (800137c <UpdateAllDisplays+0x84>)
 8001366:	f008 f9f1 	bl	800974c <HAL_SPI_Transmit_DMA>
 800136a:	e000      	b.n	800136e <UpdateAllDisplays+0x76>
        return;
 800136c:	bf00      	nop
}
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000112 	.word	0x20000112
 8001378:	20000114 	.word	0x20000114
 800137c:	20000774 	.word	0x20000774

08001380 <SetPWMPercentGamma>:
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
  uint32_t compare_value = (period + 1) - ((period + 1) * percent / 100);
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
}

void SetPWMPercentGamma(uint8_t percent) {
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if (percent > 100) {
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b64      	cmp	r3, #100	@ 0x64
 800138e:	d901      	bls.n	8001394 <SetPWMPercentGamma+0x14>
      percent = 100;
 8001390:	2364      	movs	r3, #100	@ 0x64
 8001392:	71fb      	strb	r3, [r7, #7]
  }
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8001394:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <SetPWMPercentGamma+0x4c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800139a:	617b      	str	r3, [r7, #20]
  uint8_t gamma_percent = gamma_table[percent];
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <SetPWMPercentGamma+0x50>)
 80013a0:	5cd3      	ldrb	r3, [r2, r3]
 80013a2:	74fb      	strb	r3, [r7, #19]
  uint32_t compare_value = (period + 1) * gamma_percent / 100;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3301      	adds	r3, #1
 80013a8:	7cfa      	ldrb	r2, [r7, #19]
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	4a09      	ldr	r2, [pc, #36]	@ (80013d4 <SetPWMPercentGamma+0x54>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	095b      	lsrs	r3, r3, #5
 80013b6:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
 80013b8:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <SetPWMPercentGamma+0x4c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80013c0:	bf00      	nop
 80013c2:	371c      	adds	r7, #28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	20000948 	.word	0x20000948
 80013d0:	0800c51c 	.word	0x0800c51c
 80013d4:	51eb851f 	.word	0x51eb851f

080013d8 <SetSecondLedEvenOdd>:
        HAL_Delay(50);
    }
}

void SetSecondLedEvenOdd(MyClockBitFields* clockBits, uint8_t second, uint8_t minute)
{
 80013d8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80013dc:	b08c      	sub	sp, #48	@ 0x30
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80013e2:	460b      	mov	r3, r1
 80013e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80013e8:	4613      	mov	r3, r2
 80013ea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (second >= 60) {
 80013ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013f2:	2b3b      	cmp	r3, #59	@ 0x3b
 80013f4:	d902      	bls.n	80013fc <SetSecondLedEvenOdd+0x24>
        second = 59;
 80013f6:	233b      	movs	r3, #59	@ 0x3b
 80013f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
    if ((minute % 2) == 0)
 80013fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d178      	bne.n	80014fc <SetSecondLedEvenOdd+0x124>
    {
        clockBits->secondsRing = 0ULL;
 800140a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	705a      	strb	r2, [r3, #1]
 8001414:	2200      	movs	r2, #0
 8001416:	709a      	strb	r2, [r3, #2]
 8001418:	2200      	movs	r2, #0
 800141a:	70da      	strb	r2, [r3, #3]
 800141c:	2200      	movs	r2, #0
 800141e:	711a      	strb	r2, [r3, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	715a      	strb	r2, [r3, #5]
 8001424:	2200      	movs	r2, #0
 8001426:	719a      	strb	r2, [r3, #6]
 8001428:	79da      	ldrb	r2, [r3, #7]
 800142a:	f022 020f 	bic.w	r2, r2, #15
 800142e:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = 0; i <= second; i++)
 8001430:	2300      	movs	r3, #0
 8001432:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001436:	e05a      	b.n	80014ee <SetSecondLedEvenOdd+0x116>
        {
            clockBits->secondsRing |= (1ULL << i);
 8001438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	791a      	ldrb	r2, [r3, #4]
 800143e:	795c      	ldrb	r4, [r3, #5]
 8001440:	0224      	lsls	r4, r4, #8
 8001442:	4322      	orrs	r2, r4
 8001444:	799c      	ldrb	r4, [r3, #6]
 8001446:	0424      	lsls	r4, r4, #16
 8001448:	4322      	orrs	r2, r4
 800144a:	79db      	ldrb	r3, [r3, #7]
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	061b      	lsls	r3, r3, #24
 8001452:	4313      	orrs	r3, r2
 8001454:	4619      	mov	r1, r3
 8001456:	4680      	mov	r8, r0
 8001458:	4689      	mov	r9, r1
 800145a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800145e:	f04f 0201 	mov.w	r2, #1
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	f1a1 0420 	sub.w	r4, r1, #32
 800146a:	f1c1 0020 	rsb	r0, r1, #32
 800146e:	fa03 f601 	lsl.w	r6, r3, r1
 8001472:	fa02 f404 	lsl.w	r4, r2, r4
 8001476:	4326      	orrs	r6, r4
 8001478:	fa22 f000 	lsr.w	r0, r2, r0
 800147c:	4306      	orrs	r6, r0
 800147e:	fa02 f501 	lsl.w	r5, r2, r1
 8001482:	ea48 0305 	orr.w	r3, r8, r5
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	ea49 0306 	orr.w	r3, r9, r6
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001492:	460b      	mov	r3, r1
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4613      	mov	r3, r2
 8001498:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80014a4:	4642      	mov	r2, r8
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	464a      	mov	r2, r9
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	2100      	movs	r1, #0
 80014ae:	430a      	orrs	r2, r1
 80014b0:	711a      	strb	r2, [r3, #4]
 80014b2:	464a      	mov	r2, r9
 80014b4:	0a12      	lsrs	r2, r2, #8
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	2100      	movs	r1, #0
 80014ba:	430a      	orrs	r2, r1
 80014bc:	715a      	strb	r2, [r3, #5]
 80014be:	464a      	mov	r2, r9
 80014c0:	0c12      	lsrs	r2, r2, #16
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	2100      	movs	r1, #0
 80014c6:	430a      	orrs	r2, r1
 80014c8:	719a      	strb	r2, [r3, #6]
 80014ca:	464a      	mov	r2, r9
 80014cc:	0e12      	lsrs	r2, r2, #24
 80014ce:	f002 020f 	and.w	r2, r2, #15
 80014d2:	f002 000f 	and.w	r0, r2, #15
 80014d6:	79da      	ldrb	r2, [r3, #7]
 80014d8:	f022 020f 	bic.w	r2, r2, #15
 80014dc:	4611      	mov	r1, r2
 80014de:	4602      	mov	r2, r0
 80014e0:	430a      	orrs	r2, r1
 80014e2:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = 0; i <= second; i++)
 80014e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014e8:	3301      	adds	r3, #1
 80014ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80014ee:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80014f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d99e      	bls.n	8001438 <SetSecondLedEvenOdd+0x60>
        for (uint8_t i = second + 1; i < 60; i++)
        {
            clockBits->secondsRing |= (1ULL << i);
        }
    }
}
 80014fa:	e079      	b.n	80015f0 <SetSecondLedEvenOdd+0x218>
        clockBits->secondsRing = 0ULL;
 80014fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	2200      	movs	r2, #0
 8001504:	705a      	strb	r2, [r3, #1]
 8001506:	2200      	movs	r2, #0
 8001508:	709a      	strb	r2, [r3, #2]
 800150a:	2200      	movs	r2, #0
 800150c:	70da      	strb	r2, [r3, #3]
 800150e:	2200      	movs	r2, #0
 8001510:	711a      	strb	r2, [r3, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	715a      	strb	r2, [r3, #5]
 8001516:	2200      	movs	r2, #0
 8001518:	719a      	strb	r2, [r3, #6]
 800151a:	79da      	ldrb	r2, [r3, #7]
 800151c:	f022 020f 	bic.w	r2, r2, #15
 8001520:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = second + 1; i < 60; i++)
 8001522:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001526:	3301      	adds	r3, #1
 8001528:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800152c:	e05c      	b.n	80015e8 <SetSecondLedEvenOdd+0x210>
            clockBits->secondsRing |= (1ULL << i);
 800152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	791a      	ldrb	r2, [r3, #4]
 8001534:	795c      	ldrb	r4, [r3, #5]
 8001536:	0224      	lsls	r4, r4, #8
 8001538:	4322      	orrs	r2, r4
 800153a:	799c      	ldrb	r4, [r3, #6]
 800153c:	0424      	lsls	r4, r4, #16
 800153e:	4322      	orrs	r2, r4
 8001540:	79db      	ldrb	r3, [r3, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	061b      	lsls	r3, r3, #24
 8001548:	4313      	orrs	r3, r2
 800154a:	4619      	mov	r1, r3
 800154c:	4680      	mov	r8, r0
 800154e:	4689      	mov	r9, r1
 8001550:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8001554:	f04f 0201 	mov.w	r2, #1
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	f1a1 0420 	sub.w	r4, r1, #32
 8001560:	f1c1 0020 	rsb	r0, r1, #32
 8001564:	fa03 fb01 	lsl.w	fp, r3, r1
 8001568:	fa02 f404 	lsl.w	r4, r2, r4
 800156c:	ea4b 0b04 	orr.w	fp, fp, r4
 8001570:	fa22 f000 	lsr.w	r0, r2, r0
 8001574:	ea4b 0b00 	orr.w	fp, fp, r0
 8001578:	fa02 fa01 	lsl.w	sl, r2, r1
 800157c:	ea48 030a 	orr.w	r3, r8, sl
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	ea49 030b 	orr.w	r3, r9, fp
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800158c:	460b      	mov	r3, r1
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800159e:	4622      	mov	r2, r4
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	462a      	mov	r2, r5
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	2100      	movs	r1, #0
 80015a8:	430a      	orrs	r2, r1
 80015aa:	711a      	strb	r2, [r3, #4]
 80015ac:	462a      	mov	r2, r5
 80015ae:	0a12      	lsrs	r2, r2, #8
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	2100      	movs	r1, #0
 80015b4:	430a      	orrs	r2, r1
 80015b6:	715a      	strb	r2, [r3, #5]
 80015b8:	462a      	mov	r2, r5
 80015ba:	0c12      	lsrs	r2, r2, #16
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	2100      	movs	r1, #0
 80015c0:	430a      	orrs	r2, r1
 80015c2:	719a      	strb	r2, [r3, #6]
 80015c4:	462a      	mov	r2, r5
 80015c6:	0e12      	lsrs	r2, r2, #24
 80015c8:	f002 020f 	and.w	r2, r2, #15
 80015cc:	f002 000f 	and.w	r0, r2, #15
 80015d0:	79da      	ldrb	r2, [r3, #7]
 80015d2:	f022 020f 	bic.w	r2, r2, #15
 80015d6:	4611      	mov	r1, r2
 80015d8:	4602      	mov	r2, r0
 80015da:	430a      	orrs	r2, r1
 80015dc:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = second + 1; i < 60; i++)
 80015de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80015e2:	3301      	adds	r3, #1
 80015e4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80015e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80015ec:	2b3b      	cmp	r3, #59	@ 0x3b
 80015ee:	d99e      	bls.n	800152e <SetSecondLedEvenOdd+0x156>
}
 80015f0:	bf00      	nop
 80015f2:	3730      	adds	r7, #48	@ 0x30
 80015f4:	46bd      	mov	sp, r7
 80015f6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80015fa:	4770      	bx	lr

080015fc <SetDots>:
//  if (dot2) val |= (1ULL << 1);
//
//  clockBits->dots = val;
//}

void SetDots(MyClockBitFields* clockBits, bool dot1, bool dot2) {
 80015fc:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	70fb      	strb	r3, [r7, #3]
 800160a:	4613      	mov	r3, r2
 800160c:	70bb      	strb	r3, [r7, #2]
  uint64_t val = 0ULL;
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (dot1) val |= (1ULL << 0);
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <SetDots+0x32>
 8001620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001624:	f042 0801 	orr.w	r8, r2, #1
 8001628:	4699      	mov	r9, r3
 800162a:	e9c7 8902 	strd	r8, r9, [r7, #8]
  if (dot2) val |= (1ULL << 1);
 800162e:	78bb      	ldrb	r3, [r7, #2]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d006      	beq.n	8001642 <SetDots+0x46>
 8001634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001638:	f042 0402 	orr.w	r4, r2, #2
 800163c:	461d      	mov	r5, r3
 800163e:	e9c7 4502 	strd	r4, r5, [r7, #8]
  clockBits->dots = val;
 8001642:	7a3b      	ldrb	r3, [r7, #8]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	b2d9      	uxtb	r1, r3
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	7a93      	ldrb	r3, [r2, #10]
 800164e:	f361 1305 	bfi	r3, r1, #4, #2
 8001652:	7293      	strb	r3, [r2, #10]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800165e:	4770      	bx	lr

08001660 <SetHourRingCustom>:


void SetHourRingCustom(MyClockBitFields* clockBits, uint8_t outerMode, uint8_t innerMode)
{
 8001660:	b490      	push	{r4, r7}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
 800166c:	4613      	mov	r3, r2
 800166e:	70bb      	strb	r3, [r7, #2]
    // Maska dla pełnego pierścienia (wszystkie 12 godzin)
    uint16_t fullMask = 0x0FFF;  // 12-bitowy: bity 0-11 ustawione na 1
 8001670:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001674:	81fb      	strh	r3, [r7, #14]
    // Maska dla kwadransów: godziny 12 (bit 0), 3 (bit 3), 6 (bit 6), 9 (bit 9)
    uint16_t quarterMask = (1U << 0) | (1U << 3) | (1U << 6) | (1U << 9);
 8001676:	f240 2349 	movw	r3, #585	@ 0x249
 800167a:	81bb      	strh	r3, [r7, #12]

    // Ustawienia dla zewnętrznego pierścienia
    switch(outerMode)
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d002      	beq.n	8001688 <SetHourRingCustom+0x28>
 8001682:	2b02      	cmp	r3, #2
 8001684:	d016      	beq.n	80016b4 <SetHourRingCustom+0x54>
 8001686:	e02b      	b.n	80016e0 <SetHourRingCustom+0x80>
    {
        case 1:
            clockBits->hoursRingOuter = fullMask;
 8001688:	89fb      	ldrh	r3, [r7, #14]
 800168a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168e:	b29a      	uxth	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f002 010f 	and.w	r1, r2, #15
 8001696:	010c      	lsls	r4, r1, #4
 8001698:	79d9      	ldrb	r1, [r3, #7]
 800169a:	f001 010f 	and.w	r1, r1, #15
 800169e:	4608      	mov	r0, r1
 80016a0:	4621      	mov	r1, r4
 80016a2:	4301      	orrs	r1, r0
 80016a4:	71d9      	strb	r1, [r3, #7]
 80016a6:	0912      	lsrs	r2, r2, #4
 80016a8:	b292      	uxth	r2, r2
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	2100      	movs	r1, #0
 80016ae:	430a      	orrs	r2, r1
 80016b0:	721a      	strb	r2, [r3, #8]
            break;
 80016b2:	e01d      	b.n	80016f0 <SetHourRingCustom+0x90>
        case 2:
            clockBits->hoursRingOuter = quarterMask;
 80016b4:	89bb      	ldrh	r3, [r7, #12]
 80016b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f002 010f 	and.w	r1, r2, #15
 80016c2:	010c      	lsls	r4, r1, #4
 80016c4:	79d9      	ldrb	r1, [r3, #7]
 80016c6:	f001 010f 	and.w	r1, r1, #15
 80016ca:	4608      	mov	r0, r1
 80016cc:	4621      	mov	r1, r4
 80016ce:	4301      	orrs	r1, r0
 80016d0:	71d9      	strb	r1, [r3, #7]
 80016d2:	0912      	lsrs	r2, r2, #4
 80016d4:	b292      	uxth	r2, r2
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	2100      	movs	r1, #0
 80016da:	430a      	orrs	r2, r1
 80016dc:	721a      	strb	r2, [r3, #8]
            break;
 80016de:	e007      	b.n	80016f0 <SetHourRingCustom+0x90>
        default:  // dla wartości 0 i innych nieznanych – wyłącz
            clockBits->hoursRingOuter = 0;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	79da      	ldrb	r2, [r3, #7]
 80016e4:	f002 020f 	and.w	r2, r2, #15
 80016e8:	71da      	strb	r2, [r3, #7]
 80016ea:	2200      	movs	r2, #0
 80016ec:	721a      	strb	r2, [r3, #8]
            break;
 80016ee:	bf00      	nop
    }

    // Ustawienia dla wewnętrznego pierścienia
    switch(innerMode)
 80016f0:	78bb      	ldrb	r3, [r7, #2]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d002      	beq.n	80016fc <SetHourRingCustom+0x9c>
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d017      	beq.n	800172a <SetHourRingCustom+0xca>
 80016fa:	e02d      	b.n	8001758 <SetHourRingCustom+0xf8>
    {
        case 1:
            clockBits->hoursRingInner = fullMask;
 80016fc:	89fb      	ldrh	r3, [r7, #14]
 80016fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001702:	b29a      	uxth	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	b2d1      	uxtb	r1, r2
 8001708:	2000      	movs	r0, #0
 800170a:	4301      	orrs	r1, r0
 800170c:	7259      	strb	r1, [r3, #9]
 800170e:	0a12      	lsrs	r2, r2, #8
 8001710:	b292      	uxth	r2, r2
 8001712:	f002 020f 	and.w	r2, r2, #15
 8001716:	f002 000f 	and.w	r0, r2, #15
 800171a:	7a9a      	ldrb	r2, [r3, #10]
 800171c:	f022 020f 	bic.w	r2, r2, #15
 8001720:	4611      	mov	r1, r2
 8001722:	4602      	mov	r2, r0
 8001724:	430a      	orrs	r2, r1
 8001726:	729a      	strb	r2, [r3, #10]
            break;
 8001728:	e01e      	b.n	8001768 <SetHourRingCustom+0x108>
        case 2:
            clockBits->hoursRingInner = quarterMask;
 800172a:	89bb      	ldrh	r3, [r7, #12]
 800172c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001730:	b29a      	uxth	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	b2d1      	uxtb	r1, r2
 8001736:	2000      	movs	r0, #0
 8001738:	4301      	orrs	r1, r0
 800173a:	7259      	strb	r1, [r3, #9]
 800173c:	0a12      	lsrs	r2, r2, #8
 800173e:	b292      	uxth	r2, r2
 8001740:	f002 020f 	and.w	r2, r2, #15
 8001744:	f002 000f 	and.w	r0, r2, #15
 8001748:	7a9a      	ldrb	r2, [r3, #10]
 800174a:	f022 020f 	bic.w	r2, r2, #15
 800174e:	4611      	mov	r1, r2
 8001750:	4602      	mov	r2, r0
 8001752:	430a      	orrs	r2, r1
 8001754:	729a      	strb	r2, [r3, #10]
            break;
 8001756:	e007      	b.n	8001768 <SetHourRingCustom+0x108>
        default:  // dla wartości 0 i innych nieznanych – wyłącz
            clockBits->hoursRingInner = 0;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	725a      	strb	r2, [r3, #9]
 800175e:	7a9a      	ldrb	r2, [r3, #10]
 8001760:	f022 020f 	bic.w	r2, r2, #15
 8001764:	729a      	strb	r2, [r3, #10]
            break;
 8001766:	bf00      	nop
    }
}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bc90      	pop	{r4, r7}
 8001770:	4770      	bx	lr
	...

08001774 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4b27      	ldr	r3, [pc, #156]	@ (800181c <MX_DMA_Init+0xa8>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a26      	ldr	r2, [pc, #152]	@ (800181c <MX_DMA_Init+0xa8>)
 8001784:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b24      	ldr	r3, [pc, #144]	@ (800181c <MX_DMA_Init+0xa8>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	4b20      	ldr	r3, [pc, #128]	@ (800181c <MX_DMA_Init+0xa8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a1f      	ldr	r2, [pc, #124]	@ (800181c <MX_DMA_Init+0xa8>)
 80017a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b1d      	ldr	r3, [pc, #116]	@ (800181c <MX_DMA_Init+0xa8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	200d      	movs	r0, #13
 80017b8:	f003 fc63 	bl	8005082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80017bc:	200d      	movs	r0, #13
 80017be:	f003 fc7c 	bl	80050ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	200e      	movs	r0, #14
 80017c8:	f003 fc5b 	bl	8005082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80017cc:	200e      	movs	r0, #14
 80017ce:	f003 fc74 	bl	80050ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	200f      	movs	r0, #15
 80017d8:	f003 fc53 	bl	8005082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80017dc:	200f      	movs	r0, #15
 80017de:	f003 fc6c 	bl	80050ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	202f      	movs	r0, #47	@ 0x2f
 80017e8:	f003 fc4b 	bl	8005082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80017ec:	202f      	movs	r0, #47	@ 0x2f
 80017ee:	f003 fc64 	bl	80050ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	203a      	movs	r0, #58	@ 0x3a
 80017f8:	f003 fc43 	bl	8005082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017fc:	203a      	movs	r0, #58	@ 0x3a
 80017fe:	f003 fc5c 	bl	80050ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	203b      	movs	r0, #59	@ 0x3b
 8001808:	f003 fc3b 	bl	8005082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800180c:	203b      	movs	r0, #59	@ 0x3b
 800180e:	f003 fc54 	bl	80050ba <HAL_NVIC_EnableIRQ>

}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800

08001820 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b2c      	ldr	r3, [pc, #176]	@ (80018ec <MX_GPIO_Init+0xcc>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a2b      	ldr	r2, [pc, #172]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b29      	ldr	r3, [pc, #164]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a24      	ldr	r2, [pc, #144]	@ (80018ec <MX_GPIO_Init+0xcc>)
 800185c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4a1d      	ldr	r2, [pc, #116]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	4b17      	ldr	r3, [pc, #92]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a16      	ldr	r2, [pc, #88]	@ (80018ec <MX_GPIO_Init+0xcc>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <MX_GPIO_Init+0xcc>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2140      	movs	r1, #64	@ 0x40
 80018aa:	4811      	ldr	r0, [pc, #68]	@ (80018f0 <MX_GPIO_Init+0xd0>)
 80018ac:	f004 f968 	bl	8005b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_LATCH_Pin;
 80018b0:	2340      	movs	r3, #64	@ 0x40
 80018b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_LATCH_GPIO_Port, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	480a      	ldr	r0, [pc, #40]	@ (80018f0 <MX_GPIO_Init+0xd0>)
 80018c8:	f003 ffbe 	bl	8005848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 80018cc:	2320      	movs	r3, #32
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4619      	mov	r1, r3
 80018de:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <MX_GPIO_Init+0xd4>)
 80018e0:	f003 ffb2 	bl	8005848 <HAL_GPIO_Init>

}
 80018e4:	bf00      	nop
 80018e6:	3728      	adds	r7, #40	@ 0x28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020000 	.word	0x40020000
 80018f4:	40020400 	.word	0x40020400

080018f8 <IsNmeaSeparator>:
extern DMA_HandleTypeDef hdma_usart1_rx;
uint8_t gps_dma_buffer[GPS_DMA_BUFFER_SIZE];
gps_data_t gps_data = {0};
static uint16_t old_pos = 0;
static bool IsNmeaSeparator(char c)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
    return (c == ',' || c == '*');  // Zwraca true, jeśli znak jest ',' lub '*'
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	2b2c      	cmp	r3, #44	@ 0x2c
 8001906:	d002      	beq.n	800190e <IsNmeaSeparator+0x16>
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	2b2a      	cmp	r3, #42	@ 0x2a
 800190c:	d101      	bne.n	8001912 <IsNmeaSeparator+0x1a>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <IsNmeaSeparator+0x1c>
 8001912:	2300      	movs	r3, #0
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	b2db      	uxtb	r3, r3
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <ParseUInt8>:
static uint8_t ParseUInt8(const char *startingPtr, uint8_t maxLen)
{
 8001926:	b480      	push	{r7}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;  // Inicjalizacja zmiennej do przechowywania wyniku
 8001932:	2300      	movs	r3, #0
 8001934:	73fb      	strb	r3, [r7, #15]
    // Iteracja przez każdy znak w ciągu, do maksymalnej długości
    for (uint8_t i = 0; i < maxLen; i++)
 8001936:	2300      	movs	r3, #0
 8001938:	73bb      	strb	r3, [r7, #14]
 800193a:	e01c      	b.n	8001976 <ParseUInt8+0x50>
    {
        // Sprawdzenie, czy znak jest cyfrą ('0' - '9')
        if (startingPtr[i] < '0' || startingPtr[i] > '9')
 800193c:	7bbb      	ldrb	r3, [r7, #14]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b2f      	cmp	r3, #47	@ 0x2f
 8001946:	d91a      	bls.n	800197e <ParseUInt8+0x58>
 8001948:	7bbb      	ldrb	r3, [r7, #14]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b39      	cmp	r3, #57	@ 0x39
 8001952:	d814      	bhi.n	800197e <ParseUInt8+0x58>
            break;  // Przerwanie pętli, jeśli znak nie jest cyfrą
        // Aktualizacja wartości poprzez przesunięcie dziesiętne i dodanie nowej cyfry
        value = (uint8_t)(value * 10 + (startingPtr[i] - '0'));
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	461a      	mov	r2, r3
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	b2da      	uxtb	r2, r3
 8001960:	7bbb      	ldrb	r3, [r7, #14]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	440b      	add	r3, r1
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4413      	add	r3, r2
 800196a:	b2db      	uxtb	r3, r3
 800196c:	3b30      	subs	r3, #48	@ 0x30
 800196e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < maxLen; i++)
 8001970:	7bbb      	ldrb	r3, [r7, #14]
 8001972:	3301      	adds	r3, #1
 8001974:	73bb      	strb	r3, [r7, #14]
 8001976:	7bba      	ldrb	r2, [r7, #14]
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	429a      	cmp	r2, r3
 800197c:	d3de      	bcc.n	800193c <ParseUInt8+0x16>
    }
    return value;  // Zwrócenie sparsowanej wartości
 800197e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <ParseGPRMC>:
 * // gps_data.day = 23
 * // gps_data.month = 03
 * // gps_data.year = 94
 */
static void ParseGPRMC(const char *nmeaLine)
{
 800198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198e:	b091      	sub	sp, #68	@ 0x44
 8001990:	af04      	add	r7, sp, #16
 8001992:	6078      	str	r0, [r7, #4]
    const char *p = nmeaLine;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t fieldIndex = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    const char *fieldPtr = NULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
    for (; *p != '\0'; p++)
 80019a2:	e071      	b.n	8001a88 <ParseGPRMC+0xfc>
    {
        if (IsNmeaSeparator(*p) || *p == '\r' || *p == '\n')
 80019a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ffa5 	bl	80018f8 <IsNmeaSeparator>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d107      	bne.n	80019c4 <ParseGPRMC+0x38>
 80019b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b0d      	cmp	r3, #13
 80019ba:	d003      	beq.n	80019c4 <ParseGPRMC+0x38>
 80019bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b0a      	cmp	r3, #10
 80019c2:	d155      	bne.n	8001a70 <ParseGPRMC+0xe4>
        {
            if (fieldPtr)
 80019c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d04a      	beq.n	8001a60 <ParseGPRMC+0xd4>
            {
                switch(fieldIndex)
 80019ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80019ce:	2b09      	cmp	r3, #9
 80019d0:	d028      	beq.n	8001a24 <ParseGPRMC+0x98>
 80019d2:	2b09      	cmp	r3, #9
 80019d4:	dc43      	bgt.n	8001a5e <ParseGPRMC+0xd2>
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d002      	beq.n	80019e0 <ParseGPRMC+0x54>
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d01d      	beq.n	8001a1a <ParseGPRMC+0x8e>
                        gps_data.day   = ParseUInt8(fieldPtr, 2);
                        gps_data.month = ParseUInt8(fieldPtr+2, 2);
                        gps_data.year  = ParseUInt8(fieldPtr+4, 2);
                        break;
                    default:
                        break;
 80019de:	e03e      	b.n	8001a5e <ParseGPRMC+0xd2>
                        gps_data.hours   = ParseUInt8(fieldPtr, 2);
 80019e0:	2102      	movs	r1, #2
 80019e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019e4:	f7ff ff9f 	bl	8001926 <ParseUInt8>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b42      	ldr	r3, [pc, #264]	@ (8001af8 <ParseGPRMC+0x16c>)
 80019ee:	701a      	strb	r2, [r3, #0]
                        gps_data.minutes = ParseUInt8(fieldPtr+2, 2);
 80019f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f2:	3302      	adds	r3, #2
 80019f4:	2102      	movs	r1, #2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ff95 	bl	8001926 <ParseUInt8>
 80019fc:	4603      	mov	r3, r0
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b3d      	ldr	r3, [pc, #244]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001a02:	705a      	strb	r2, [r3, #1]
                        gps_data.seconds = ParseUInt8(fieldPtr+4, 2);
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	3304      	adds	r3, #4
 8001a08:	2102      	movs	r1, #2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff8b 	bl	8001926 <ParseUInt8>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b38      	ldr	r3, [pc, #224]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001a16:	709a      	strb	r2, [r3, #2]
                        break;
 8001a18:	e022      	b.n	8001a60 <ParseGPRMC+0xd4>
                        gps_data.fix = *fieldPtr;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	4b36      	ldr	r3, [pc, #216]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001a20:	71da      	strb	r2, [r3, #7]
                        break;
 8001a22:	e01d      	b.n	8001a60 <ParseGPRMC+0xd4>
                        gps_data.day   = ParseUInt8(fieldPtr, 2);
 8001a24:	2102      	movs	r1, #2
 8001a26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a28:	f7ff ff7d 	bl	8001926 <ParseUInt8>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b31      	ldr	r3, [pc, #196]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001a32:	70da      	strb	r2, [r3, #3]
                        gps_data.month = ParseUInt8(fieldPtr+2, 2);
 8001a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a36:	3302      	adds	r3, #2
 8001a38:	2102      	movs	r1, #2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff73 	bl	8001926 <ParseUInt8>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001a46:	711a      	strb	r2, [r3, #4]
                        gps_data.year  = ParseUInt8(fieldPtr+4, 2);
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ff69 	bl	8001926 <ParseUInt8>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001a5a:	715a      	strb	r2, [r3, #5]
                        break;
 8001a5c:	e000      	b.n	8001a60 <ParseGPRMC+0xd4>
                        break;
 8001a5e:	bf00      	nop
                }
            }
            fieldPtr = NULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
            fieldIndex++;
 8001a64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001a68:	3301      	adds	r3, #1
 8001a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001a6e:	e004      	b.n	8001a7a <ParseGPRMC+0xee>
        }
        else
        {
            if (!fieldPtr) fieldPtr = p;
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <ParseGPRMC+0xee>
 8001a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (*p == '*') break;
 8001a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a80:	d007      	beq.n	8001a92 <ParseGPRMC+0x106>
    for (; *p != '\0'; p++)
 8001a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a84:	3301      	adds	r3, #1
 8001a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d189      	bne.n	80019a4 <ParseGPRMC+0x18>
 8001a90:	e000      	b.n	8001a94 <ParseGPRMC+0x108>
        if (*p == '*') break;
 8001a92:	bf00      	nop
    }
    // Natychmiastowa aktualizacja RTC zaraz po poprawnym odczycie GPRMC
    // (sprawdzamy czy fix jest 'A'):
    if (gps_data.fix == 'A')
 8001a94:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001a96:	79db      	ldrb	r3, [r3, #7]
 8001a98:	2b41      	cmp	r3, #65	@ 0x41
 8001a9a:	d129      	bne.n	8001af0 <ParseGPRMC+0x164>
        // Tworzymy struktury dla lokalnego czasu
        RTC_TimeTypeDef localTime;
        RTC_DateTypeDef localDate;

        // Konwertuj z GPS (UTC) na czas lokalny
        ConvertUtcToLocalTime(gps_data.hours, gps_data.minutes, gps_data.seconds,
 8001a9c:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001a9e:	7818      	ldrb	r0, [r3, #0]
 8001aa0:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001aa2:	785c      	ldrb	r4, [r3, #1]
 8001aa4:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001aa6:	789d      	ldrb	r5, [r3, #2]
 8001aa8:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001aaa:	78de      	ldrb	r6, [r3, #3]
 8001aac:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001aae:	791b      	ldrb	r3, [r3, #4]
 8001ab0:	4a11      	ldr	r2, [pc, #68]	@ (8001af8 <ParseGPRMC+0x16c>)
 8001ab2:	7952      	ldrb	r2, [r2, #5]
 8001ab4:	f107 010c 	add.w	r1, r7, #12
 8001ab8:	9103      	str	r1, [sp, #12]
 8001aba:	f107 0110 	add.w	r1, r7, #16
 8001abe:	9102      	str	r1, [sp, #8]
 8001ac0:	9201      	str	r2, [sp, #4]
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	4633      	mov	r3, r6
 8001ac6:	462a      	mov	r2, r5
 8001ac8:	4621      	mov	r1, r4
 8001aca:	f000 f911 	bl	8001cf0 <ConvertUtcToLocalTime>
                              gps_data.day,   gps_data.month,  gps_data.year,
                              &localTime, &localDate);
        // I wpisz do RTC
        HAL_RTC_SetTime(&hrtc, &localTime, RTC_FORMAT_BIN);
 8001ace:	f107 0310 	add.w	r3, r7, #16
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4809      	ldr	r0, [pc, #36]	@ (8001afc <ParseGPRMC+0x170>)
 8001ad8:	f007 fb25 	bl	8009126 <HAL_RTC_SetTime>
        HAL_RTC_SetDate(&hrtc, &localDate, RTC_FORMAT_BIN);
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	@ (8001afc <ParseGPRMC+0x170>)
 8001ae6:	f007 fc16 	bl	8009316 <HAL_RTC_SetDate>
        colon =1;
 8001aea:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <ParseGPRMC+0x174>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
    }
}
 8001af0:	bf00      	nop
 8001af2:	3734      	adds	r7, #52	@ 0x34
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af8:	20000530 	.word	0x20000530
 8001afc:	20000710 	.word	0x20000710
 8001b00:	2000012d 	.word	0x2000012d

08001b04 <ParseGPGGA>:

static void ParseGPGGA(const char *nmeaLine)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
    const char *p = nmeaLine;          // Wskaźnik do iteracji przez ciąg znaków
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	617b      	str	r3, [r7, #20]
    uint8_t fieldIndex = 0;            // Indeks aktualnie przetwarzanego pola
 8001b10:	2300      	movs	r3, #0
 8001b12:	74fb      	strb	r3, [r7, #19]
    const char *fieldPtr = NULL;       // Wskaźnik do początku aktualnego pola
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
    // Iteracja przez każdy znak w linii NMEA
    for (; *p != '\0'; p++)
 8001b18:	e02f      	b.n	8001b7a <ParseGPGGA+0x76>
    {
        // Sprawdzenie, czy znak jest separatorem lub końcem linii
        if (IsNmeaSeparator(*p) || *p == '\r' || *p == '\n')
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff feea 	bl	80018f8 <IsNmeaSeparator>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d107      	bne.n	8001b3a <ParseGPGGA+0x36>
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b0d      	cmp	r3, #13
 8001b30:	d003      	beq.n	8001b3a <ParseGPGGA+0x36>
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b0a      	cmp	r3, #10
 8001b38:	d113      	bne.n	8001b62 <ParseGPGGA+0x5e>
        {
            // Jeśli aktualne pole nie jest puste i indeks pola to 7, przetwarzamy jego zawartość
            if (fieldPtr && fieldIndex == 7)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00a      	beq.n	8001b56 <ParseGPGGA+0x52>
 8001b40:	7cfb      	ldrb	r3, [r7, #19]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	d107      	bne.n	8001b56 <ParseGPGGA+0x52>
            {
                gps_data.satellites = ParseUInt8(fieldPtr, 2);    // Liczba satelit (np. '08' oznacza 8)
 8001b46:	2102      	movs	r1, #2
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f7ff feec 	bl	8001926 <ParseUInt8>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <ParseGPGGA+0x8c>)
 8001b54:	719a      	strb	r2, [r3, #6]
            }
            fieldPtr = NULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
            fieldIndex++;
 8001b5a:	7cfb      	ldrb	r3, [r7, #19]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	74fb      	strb	r3, [r7, #19]
 8001b60:	e004      	b.n	8001b6c <ParseGPGGA+0x68>
        }
        else
        {
            // Jeśli jeszcze nie ustawiono początku pola, ustawiamy wskaźnik
            if (!fieldPtr)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <ParseGPGGA+0x68>
                fieldPtr = p;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	60fb      	str	r3, [r7, #12]
        }
        // Jeśli napotkano '*', kończymy parsowanie tej linii
        if (*p == '*')
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b72:	d007      	beq.n	8001b84 <ParseGPGGA+0x80>
    for (; *p != '\0'; p++)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3301      	adds	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1cb      	bne.n	8001b1a <ParseGPGGA+0x16>
            break;
    }
}
 8001b82:	e000      	b.n	8001b86 <ParseGPGGA+0x82>
            break;
 8001b84:	bf00      	nop
}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000530 	.word	0x20000530

08001b94 <GPS_ProcessBuffer>:

void GPS_ProcessBuffer(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
    /* Obliczenie aktualnej pozycji w buforze */
    uint16_t now_pos = GPS_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8001b9a:	4b40      	ldr	r3, [pc, #256]	@ (8001c9c <GPS_ProcessBuffer+0x108>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8001ba6:	80fb      	strh	r3, [r7, #6]
    while (old_pos != now_pos)
 8001ba8:	e06d      	b.n	8001c86 <GPS_ProcessBuffer+0xf2>
    {
        char c = (char)gps_dma_buffer[old_pos];
 8001baa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca0 <GPS_ProcessBuffer+0x10c>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca4 <GPS_ProcessBuffer+0x110>)
 8001bb2:	5c9b      	ldrb	r3, [r3, r2]
 8001bb4:	717b      	strb	r3, [r7, #5]
        static char lineBuf[128];
        static uint8_t lineIndex = 0;
        if (lineIndex < sizeof(lineBuf) - 1)
 8001bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca8 <GPS_ProcessBuffer+0x114>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b7e      	cmp	r3, #126	@ 0x7e
 8001bbc:	d809      	bhi.n	8001bd2 <GPS_ProcessBuffer+0x3e>
        {
            lineBuf[lineIndex++] = c;
 8001bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca8 <GPS_ProcessBuffer+0x114>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	b2d1      	uxtb	r1, r2
 8001bc6:	4a38      	ldr	r2, [pc, #224]	@ (8001ca8 <GPS_ProcessBuffer+0x114>)
 8001bc8:	7011      	strb	r1, [r2, #0]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4a37      	ldr	r2, [pc, #220]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001bce:	797b      	ldrb	r3, [r7, #5]
 8001bd0:	5453      	strb	r3, [r2, r1]
        }
        if (c == '\n' || c == '\r')
 8001bd2:	797b      	ldrb	r3, [r7, #5]
 8001bd4:	2b0a      	cmp	r3, #10
 8001bd6:	d002      	beq.n	8001bde <GPS_ProcessBuffer+0x4a>
 8001bd8:	797b      	ldrb	r3, [r7, #5]
 8001bda:	2b0d      	cmp	r3, #13
 8001bdc:	d145      	bne.n	8001c6a <GPS_ProcessBuffer+0xd6>
        {
            lineBuf[lineIndex] = '\0';
 8001bde:	4b32      	ldr	r3, [pc, #200]	@ (8001ca8 <GPS_ProcessBuffer+0x114>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b31      	ldr	r3, [pc, #196]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001be6:	2100      	movs	r1, #0
 8001be8:	5499      	strb	r1, [r3, r2]
            if (strncmp(lineBuf, "$GPRMC", 6) == 0)
 8001bea:	2206      	movs	r2, #6
 8001bec:	4930      	ldr	r1, [pc, #192]	@ (8001cb0 <GPS_ProcessBuffer+0x11c>)
 8001bee:	482f      	ldr	r0, [pc, #188]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001bf0:	f009 ffa0 	bl	800bb34 <strncmp>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <GPS_ProcessBuffer+0x6c>
            {
                ParseGPRMC(lineBuf);
 8001bfa:	482c      	ldr	r0, [pc, #176]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001bfc:	f7ff fec6 	bl	800198c <ParseGPRMC>
            }
          if (strncmp(lineBuf, "$GPGGA", 6) == 0)
 8001c00:	2206      	movs	r2, #6
 8001c02:	492c      	ldr	r1, [pc, #176]	@ (8001cb4 <GPS_ProcessBuffer+0x120>)
 8001c04:	4829      	ldr	r0, [pc, #164]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001c06:	f009 ff95 	bl	800bb34 <strncmp>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <GPS_ProcessBuffer+0x82>
            {
                ParseGPGGA(lineBuf);
 8001c10:	4826      	ldr	r0, [pc, #152]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001c12:	f7ff ff77 	bl	8001b04 <ParseGPGGA>
            }
            if (strncmp(lineBuf, "$GPRMC", 6) == 0 || strncmp(lineBuf, "$GNRMC", 6) == 0)
 8001c16:	2206      	movs	r2, #6
 8001c18:	4925      	ldr	r1, [pc, #148]	@ (8001cb0 <GPS_ProcessBuffer+0x11c>)
 8001c1a:	4824      	ldr	r0, [pc, #144]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001c1c:	f009 ff8a 	bl	800bb34 <strncmp>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <GPS_ProcessBuffer+0xa2>
 8001c26:	2206      	movs	r2, #6
 8001c28:	4923      	ldr	r1, [pc, #140]	@ (8001cb8 <GPS_ProcessBuffer+0x124>)
 8001c2a:	4820      	ldr	r0, [pc, #128]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001c2c:	f009 ff82 	bl	800bb34 <strncmp>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d103      	bne.n	8001c3e <GPS_ProcessBuffer+0xaa>
            {
                ParseGPRMC(lineBuf);
 8001c36:	481d      	ldr	r0, [pc, #116]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001c38:	f7ff fea8 	bl	800198c <ParseGPRMC>
 8001c3c:	e012      	b.n	8001c64 <GPS_ProcessBuffer+0xd0>
            }
            else if (strncmp(lineBuf, "$GPGGA", 6) == 0 || strncmp(lineBuf, "$GNGGA", 6) == 0)
 8001c3e:	2206      	movs	r2, #6
 8001c40:	491c      	ldr	r1, [pc, #112]	@ (8001cb4 <GPS_ProcessBuffer+0x120>)
 8001c42:	481a      	ldr	r0, [pc, #104]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001c44:	f009 ff76 	bl	800bb34 <strncmp>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <GPS_ProcessBuffer+0xca>
 8001c4e:	2206      	movs	r2, #6
 8001c50:	491a      	ldr	r1, [pc, #104]	@ (8001cbc <GPS_ProcessBuffer+0x128>)
 8001c52:	4816      	ldr	r0, [pc, #88]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001c54:	f009 ff6e 	bl	800bb34 <strncmp>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d102      	bne.n	8001c64 <GPS_ProcessBuffer+0xd0>
            {
                ParseGPGGA(lineBuf);
 8001c5e:	4813      	ldr	r0, [pc, #76]	@ (8001cac <GPS_ProcessBuffer+0x118>)
 8001c60:	f7ff ff50 	bl	8001b04 <ParseGPGGA>
            }
            lineIndex = 0;
 8001c64:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <GPS_ProcessBuffer+0x114>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
        }
        old_pos++;
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca0 <GPS_ProcessBuffer+0x10c>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <GPS_ProcessBuffer+0x10c>)
 8001c74:	801a      	strh	r2, [r3, #0]
        if (old_pos >= GPS_DMA_BUFFER_SIZE)
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <GPS_ProcessBuffer+0x10c>)
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c7e:	d302      	bcc.n	8001c86 <GPS_ProcessBuffer+0xf2>
            old_pos = 0;
 8001c80:	4b07      	ldr	r3, [pc, #28]	@ (8001ca0 <GPS_ProcessBuffer+0x10c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	801a      	strh	r2, [r3, #0]
    while (old_pos != now_pos)
 8001c86:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <GPS_ProcessBuffer+0x10c>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	88fa      	ldrh	r2, [r7, #6]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d18c      	bne.n	8001baa <GPS_ProcessBuffer+0x16>
    }
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000a68 	.word	0x20000a68
 8001ca0:	20000538 	.word	0x20000538
 8001ca4:	20000130 	.word	0x20000130
 8001ca8:	2000053a 	.word	0x2000053a
 8001cac:	2000053c 	.word	0x2000053c
 8001cb0:	0800c488 	.word	0x0800c488
 8001cb4:	0800c490 	.word	0x0800c490
 8001cb8:	0800c498 	.word	0x0800c498
 8001cbc:	0800c4a0 	.word	0x0800c4a0

08001cc0 <GPS_Init>:

void GPS_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
    memset(&gps_data, 0, sizeof(gps_data));
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4806      	ldr	r0, [pc, #24]	@ (8001ce4 <GPS_Init+0x24>)
 8001cca:	f009 ff2b 	bl	800bb24 <memset>
    memset(gps_dma_buffer, 0, GPS_DMA_BUFFER_SIZE);
 8001cce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4804      	ldr	r0, [pc, #16]	@ (8001ce8 <GPS_Init+0x28>)
 8001cd6:	f009 ff25 	bl	800bb24 <memset>
    old_pos = 0;
 8001cda:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <GPS_Init+0x2c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	801a      	strh	r2, [r3, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000530 	.word	0x20000530
 8001ce8:	20000130 	.word	0x20000130
 8001cec:	20000538 	.word	0x20000538

08001cf0 <ConvertUtcToLocalTime>:

void ConvertUtcToLocalTime(uint8_t utcHours, uint8_t utcMinutes,
		uint8_t utcSeconds, uint8_t utcDay, uint8_t utcMonth, uint8_t utcYear,
		RTC_TimeTypeDef *localTime, RTC_DateTypeDef *localDate) {
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b08d      	sub	sp, #52	@ 0x34
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	4608      	mov	r0, r1
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4623      	mov	r3, r4
 8001d00:	71fb      	strb	r3, [r7, #7]
 8001d02:	4603      	mov	r3, r0
 8001d04:	71bb      	strb	r3, [r7, #6]
 8001d06:	460b      	mov	r3, r1
 8001d08:	717b      	strb	r3, [r7, #5]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	713b      	strb	r3, [r7, #4]
	// UTC+1 dla Polski w czasie zimowym, a UTC+2 latem:
	// year w RTC to 00..99, można przerobić na 20xx itp.
	// Załóżmy, że gps_data.year = 24 oznacza 2024 (proste uproszczenie)
	uint16_t fullYear = 2000 + utcYear;
 8001d0e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001d18:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int offset = 1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (IsDstActive(fullYear, utcMonth, utcDay)) {
 8001d1e:	793a      	ldrb	r2, [r7, #4]
 8001d20:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 8001d24:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f909 	bl	8001f3e <IsDstActive>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <ConvertUtcToLocalTime+0x46>
		offset = 2;
 8001d32:	2302      	movs	r3, #2
 8001d34:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	int hour = utcHours + offset;
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d3a:	4413      	add	r3, r2
 8001d3c:	627b      	str	r3, [r7, #36]	@ 0x24
	int minute = utcMinutes;
 8001d3e:	79bb      	ldrb	r3, [r7, #6]
 8001d40:	61bb      	str	r3, [r7, #24]
	int second = utcSeconds;
 8001d42:	797b      	ldrb	r3, [r7, #5]
 8001d44:	617b      	str	r3, [r7, #20]

	int day = utcDay;
 8001d46:	793b      	ldrb	r3, [r7, #4]
 8001d48:	623b      	str	r3, [r7, #32]
	int month = utcMonth;
 8001d4a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001d4e:	61fb      	str	r3, [r7, #28]
	int yearXX = utcYear;   // 0..99 w RTC
 8001d50:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001d54:	613b      	str	r3, [r7, #16]


	DOW = GetDayOfWeek(fullYear, utcMonth, utcDay);
 8001d56:	793a      	ldrb	r2, [r7, #4]
 8001d58:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 8001d5c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 f92a 	bl	8001fb8 <GetDayOfWeek>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b3b      	ldr	r3, [pc, #236]	@ (8001e58 <ConvertUtcToLocalTime+0x168>)
 8001d6a:	701a      	strb	r2, [r3, #0]

	// Ale do obliczeń powyżej używamy fullYear (np. 2024)
	// Korekty przekroczeń doby
	if (hour >= 24) {
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	2b17      	cmp	r3, #23
 8001d70:	dd20      	ble.n	8001db4 <ConvertUtcToLocalTime+0xc4>
		hour -= 24;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	3b18      	subs	r3, #24
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
		day++;
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	623b      	str	r3, [r7, #32]
		// sprawdź, czy nie przekraczamy dni w tym miesiącu
		uint8_t mdays = DaysInMonth(fullYear, month);
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d84:	4611      	mov	r1, r2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f86a 	bl	8001e60 <DaysInMonth>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	73fb      	strb	r3, [r7, #15]
		if (day > mdays) {
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	6a3a      	ldr	r2, [r7, #32]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dd2d      	ble.n	8001df4 <ConvertUtcToLocalTime+0x104>
			day = 1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	623b      	str	r3, [r7, #32]
			month++;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	61fb      	str	r3, [r7, #28]
			if (month > 12) {
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	2b0c      	cmp	r3, #12
 8001da6:	dd25      	ble.n	8001df4 <ConvertUtcToLocalTime+0x104>
				month = 1;
 8001da8:	2301      	movs	r3, #1
 8001daa:	61fb      	str	r3, [r7, #28]
				fullYear++;
 8001dac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001dae:	3301      	adds	r3, #1
 8001db0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001db2:	e01f      	b.n	8001df4 <ConvertUtcToLocalTime+0x104>
			}
		}
	} else if (hour < 0) {
 8001db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	da1c      	bge.n	8001df4 <ConvertUtcToLocalTime+0x104>
		hour += 24;
 8001dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbc:	3318      	adds	r3, #24
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
		day--;
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	623b      	str	r3, [r7, #32]
		if (day < 1) {
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	dc13      	bgt.n	8001df4 <ConvertUtcToLocalTime+0x104>
			// cofka do poprzedniego miesiąca
			month--;
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	61fb      	str	r3, [r7, #28]
			if (month < 1) {
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	dc04      	bgt.n	8001de2 <ConvertUtcToLocalTime+0xf2>
				month = 12;
 8001dd8:	230c      	movs	r3, #12
 8001dda:	61fb      	str	r3, [r7, #28]
				fullYear--;
 8001ddc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001dde:	3b01      	subs	r3, #1
 8001de0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			}
			day = DaysInMonth(fullYear, month);
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001de8:	4611      	mov	r1, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f838 	bl	8001e60 <DaysInMonth>
 8001df0:	4603      	mov	r3, r0
 8001df2:	623b      	str	r3, [r7, #32]
		}
	}
	// fullYear z powrotem do 00..99
	// Proste: np. 2025 -> 25
	yearXX = (uint8_t) (fullYear % 100);
 8001df4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001df6:	4a19      	ldr	r2, [pc, #100]	@ (8001e5c <ConvertUtcToLocalTime+0x16c>)
 8001df8:	fba2 1203 	umull	r1, r2, r2, r3
 8001dfc:	0952      	lsrs	r2, r2, #5
 8001dfe:	2164      	movs	r1, #100	@ 0x64
 8001e00:	fb01 f202 	mul.w	r2, r1, r2
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	613b      	str	r3, [r7, #16]
	// Zapis do struktur RTC
	localTime->Hours = hour;
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e12:	701a      	strb	r2, [r3, #0]
	localTime->Minutes = minute;
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e1a:	705a      	strb	r2, [r3, #1]
	localTime->Seconds = second;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e22:	709a      	strb	r2, [r3, #2]
	localTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
	localTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8001e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
	localDate->Date = (uint8_t) day;
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e36:	709a      	strb	r2, [r3, #2]
	localDate->Month = (uint8_t) month;
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e3e:	705a      	strb	r2, [r3, #1]
	localDate->Year = (uint8_t) yearXX;
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e46:	70da      	strb	r2, [r3, #3]
	localDate->WeekDay = RTC_WEEKDAY_MONDAY; // albo oblicz w oparciu o GetDayOfWeek
 8001e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	3734      	adds	r7, #52	@ 0x34
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd90      	pop	{r4, r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2000012c 	.word	0x2000012c
 8001e5c:	51eb851f 	.word	0x51eb851f

08001e60 <DaysInMonth>:
uint8_t DaysInMonth(uint16_t year, uint8_t month) {
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	460a      	mov	r2, r1
 8001e6a:	80fb      	strh	r3, [r7, #6]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	717b      	strb	r3, [r7, #5]
	static const uint8_t daysTable[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30,
			31, 30, 31 };
	if (month == 2)  // luty
 8001e70:	797b      	ldrb	r3, [r7, #5]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d12f      	bne.n	8001ed6 <DaysInMonth+0x76>
			{
		// Sprawdź, czy rok przestępny
		// „Rok przestępny” jeżeli:
		//  - rok % 4 == 0 i rok % 100 != 0
		//  - lub rok % 400 == 0
		bool leap = false;
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]
		if ((year % 400) == 0) {
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001eec <DaysInMonth+0x8c>)
 8001e7e:	fba2 1203 	umull	r1, r2, r2, r3
 8001e82:	09d2      	lsrs	r2, r2, #7
 8001e84:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001e88:	fb01 f202 	mul.w	r2, r1, r2
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d102      	bne.n	8001e9a <DaysInMonth+0x3a>
			leap = true;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e016      	b.n	8001ec8 <DaysInMonth+0x68>
		} else if ((year % 100) == 0) {
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	4a13      	ldr	r2, [pc, #76]	@ (8001eec <DaysInMonth+0x8c>)
 8001e9e:	fba2 1203 	umull	r1, r2, r2, r3
 8001ea2:	0952      	lsrs	r2, r2, #5
 8001ea4:	2164      	movs	r1, #100	@ 0x64
 8001ea6:	fb01 f202 	mul.w	r2, r1, r2
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <DaysInMonth+0x58>
			leap = false;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
 8001eb6:	e007      	b.n	8001ec8 <DaysInMonth+0x68>
		} else if ((year % 4) == 0) {
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <DaysInMonth+0x68>
			leap = true;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
		}
		return (leap ? 29 : 28);
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <DaysInMonth+0x72>
 8001ece:	231d      	movs	r3, #29
 8001ed0:	e005      	b.n	8001ede <DaysInMonth+0x7e>
 8001ed2:	231c      	movs	r3, #28
 8001ed4:	e003      	b.n	8001ede <DaysInMonth+0x7e>
	}
	return daysTable[month - 1];
 8001ed6:	797b      	ldrb	r3, [r7, #5]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	4a05      	ldr	r2, [pc, #20]	@ (8001ef0 <DaysInMonth+0x90>)
 8001edc:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	51eb851f 	.word	0x51eb851f
 8001ef0:	0800c584 	.word	0x0800c584

08001ef4 <GetLastSundayOfMonth>:
/**
 * @brief Zwraca numer dnia (1..31) będący ostatnią niedzielą w danym miesiącu.
 *        Np. dla roku=2024, marzec=3, może zwrócić 31, 30, 29... w zależności,
 *        co jest faktycznie niedzielą.
 */
uint8_t GetLastSundayOfMonth(uint16_t year, uint8_t month) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	460a      	mov	r2, r1
 8001efe:	80fb      	strh	r3, [r7, #6]
 8001f00:	4613      	mov	r3, r2
 8001f02:	717b      	strb	r3, [r7, #5]
	uint8_t d = DaysInMonth(year, month);
 8001f04:	797a      	ldrb	r2, [r7, #5]
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ffa8 	bl	8001e60 <DaysInMonth>
 8001f10:	4603      	mov	r3, r0
 8001f12:	73fb      	strb	r3, [r7, #15]
	while (1) {
		uint8_t dow = GetDayOfWeek(year, month, d);
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	7979      	ldrb	r1, [r7, #5]
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f84c 	bl	8001fb8 <GetDayOfWeek>
 8001f20:	4603      	mov	r3, r0
 8001f22:	73bb      	strb	r3, [r7, #14]



		if (dow == 0) { // 0 = niedziela (Sunday)
 8001f24:	7bbb      	ldrb	r3, [r7, #14]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <GetLastSundayOfMonth+0x3a>
			return d;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	e003      	b.n	8001f36 <GetLastSundayOfMonth+0x42>
		}
		d--;
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
	while (1) {
 8001f34:	e7ee      	b.n	8001f14 <GetLastSundayOfMonth+0x20>
	}
	// Teoretycznie dojdziemy na pewno do jakiejś niedzieli,
	// więc break nie jest potrzebny.
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <IsDstActive>:

bool IsDstActive(uint16_t year, uint8_t month, uint8_t day) {
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	80fb      	strh	r3, [r7, #6]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	717b      	strb	r3, [r7, #5]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	713b      	strb	r3, [r7, #4]
	// Ostatnia niedziela marca
	uint8_t lastSundayMarch = GetLastSundayOfMonth(year, 3);
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	2103      	movs	r1, #3
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ffcd 	bl	8001ef4 <GetLastSundayOfMonth>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	73fb      	strb	r3, [r7, #15]
	// Ostatnia niedziela października
	uint8_t lastSundayOctober = GetLastSundayOfMonth(year, 10);
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	210a      	movs	r1, #10
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ffc6 	bl	8001ef4 <GetLastSundayOfMonth>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	73bb      	strb	r3, [r7, #14]
	// Warunek: jeżeli data >= (3, lastSundayMarch) i data < (10, lastSundayOctober),
	// to DST = true.
	// Oczywiście trzeba uwzględnić, że jeśli month < 3 to zawsze false,
	// jeśli month > 10 to zawsze false, itd.
	// A) Jeżeli miesiąc < 3 -> zima
	if (month < 3) {
 8001f6c:	797b      	ldrb	r3, [r7, #5]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d801      	bhi.n	8001f76 <IsDstActive+0x38>
		return false;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e01b      	b.n	8001fae <IsDstActive+0x70>
	}
	// B) Jeżeli miesiąc > 10 -> zima
	if (month > 10) {
 8001f76:	797b      	ldrb	r3, [r7, #5]
 8001f78:	2b0a      	cmp	r3, #10
 8001f7a:	d901      	bls.n	8001f80 <IsDstActive+0x42>
		return false;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e016      	b.n	8001fae <IsDstActive+0x70>
	}
	// C) Jeżeli to marzec:
	if (month == 3) {
 8001f80:	797b      	ldrb	r3, [r7, #5]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d107      	bne.n	8001f96 <IsDstActive+0x58>
		// czy w danym dniu jest >= ostatniej niedzieli?
		// jeśli tak -> letni
		// jeśli nie -> zimowy
		if (day < lastSundayMarch) {
 8001f86:	793a      	ldrb	r2, [r7, #4]
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d201      	bcs.n	8001f92 <IsDstActive+0x54>
			return false;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e00d      	b.n	8001fae <IsDstActive+0x70>
		} else {
			return true;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00b      	b.n	8001fae <IsDstActive+0x70>
		}
	}
	// D) Jeżeli to październik
	if (month == 10) {
 8001f96:	797b      	ldrb	r3, [r7, #5]
 8001f98:	2b0a      	cmp	r3, #10
 8001f9a:	d107      	bne.n	8001fac <IsDstActive+0x6e>
		// czy w danym dniu jest < ostatniej niedzieli?
		// jeśli tak -> letni
		// jeśli >= -> zimowy
		if (day < lastSundayOctober) {
 8001f9c:	793a      	ldrb	r2, [r7, #4]
 8001f9e:	7bbb      	ldrb	r3, [r7, #14]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d201      	bcs.n	8001fa8 <IsDstActive+0x6a>
			return true;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e002      	b.n	8001fae <IsDstActive+0x70>
		} else {
			return false;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e000      	b.n	8001fae <IsDstActive+0x70>
		}
	}
	// E) W pozostałych miesiącach 4..9 włącznie mamy 100% DST:
	return true;
 8001fac:	2301      	movs	r3, #1
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <GetDayOfWeek>:
			// Obsługa błędu ustawiania daty
			Error_Handler();
		}
	}
}
uint8_t GetDayOfWeek(uint16_t year, uint8_t month, uint8_t day) {
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	717b      	strb	r3, [r7, #5]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	713b      	strb	r3, [r7, #4]
	// Zeller’s Congruence – wersja dla kalendarza gregoriańskiego
	// Aby działała poprawnie dla stycznia i lutego, „przesuwamy” je na poprzedni rok:
	// styczeń -> 13 poprzedniego roku
	// luty    -> 14 poprzedniego roku
	if (month < 3) {
 8001fca:	797b      	ldrb	r3, [r7, #5]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d805      	bhi.n	8001fdc <GetDayOfWeek+0x24>
		month += 12;
 8001fd0:	797b      	ldrb	r3, [r7, #5]
 8001fd2:	330c      	adds	r3, #12
 8001fd4:	717b      	strb	r3, [r7, #5]
		year -= 1;
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	80fb      	strh	r3, [r7, #6]
	}
	uint16_t K = (uint16_t) (year % 100);
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	4a23      	ldr	r2, [pc, #140]	@ (800206c <GetDayOfWeek+0xb4>)
 8001fe0:	fba2 1203 	umull	r1, r2, r2, r3
 8001fe4:	0952      	lsrs	r2, r2, #5
 8001fe6:	2164      	movs	r1, #100	@ 0x64
 8001fe8:	fb01 f202 	mul.w	r2, r1, r2
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	817b      	strh	r3, [r7, #10]
	uint16_t J = (uint16_t) (year / 100);
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800206c <GetDayOfWeek+0xb4>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	813b      	strh	r3, [r7, #8]
	// day of week in [0..6], 0=Sunday
	int32_t h = (int32_t) (day + (13 * (month + 1)) / 5 + K + (K / 4) + (J / 4)
 8001ffc:	7939      	ldrb	r1, [r7, #4]
 8001ffe:	797b      	ldrb	r3, [r7, #5]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	4a18      	ldr	r2, [pc, #96]	@ (8002070 <GetDayOfWeek+0xb8>)
 800200e:	fb82 0203 	smull	r0, r2, r2, r3
 8002012:	1052      	asrs	r2, r2, #1
 8002014:	17db      	asrs	r3, r3, #31
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	18ca      	adds	r2, r1, r3
 800201a:	897b      	ldrh	r3, [r7, #10]
 800201c:	4413      	add	r3, r2
 800201e:	897a      	ldrh	r2, [r7, #10]
 8002020:	0892      	lsrs	r2, r2, #2
 8002022:	b292      	uxth	r2, r2
 8002024:	4413      	add	r3, r2
 8002026:	893a      	ldrh	r2, [r7, #8]
 8002028:	0892      	lsrs	r2, r2, #2
 800202a:	b292      	uxth	r2, r2
 800202c:	441a      	add	r2, r3
			- (2 * J));
 800202e:	893b      	ldrh	r3, [r7, #8]
 8002030:	005b      	lsls	r3, r3, #1
	int32_t h = (int32_t) (day + (13 * (month + 1)) / 5 + K + (K / 4) + (J / 4)
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	60fb      	str	r3, [r7, #12]
	// W C++: h = (h % 7 + 7) % 7  (żeby się upewnić, że jest w 0..6):
	h = h % 7;
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4b0e      	ldr	r3, [pc, #56]	@ (8002074 <GetDayOfWeek+0xbc>)
 800203a:	fb83 1302 	smull	r1, r3, r3, r2
 800203e:	4413      	add	r3, r2
 8002040:	1099      	asrs	r1, r3, #2
 8002042:	17d3      	asrs	r3, r2, #31
 8002044:	1ac9      	subs	r1, r1, r3
 8002046:	460b      	mov	r3, r1
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	1a5b      	subs	r3, r3, r1
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	60fb      	str	r3, [r7, #12]
	if (h < 0) {
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	da02      	bge.n	800205c <GetDayOfWeek+0xa4>
		h += 7;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3307      	adds	r3, #7
 800205a:	60fb      	str	r3, [r7, #12]
	}
	return (uint8_t) h;  // 0..6
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	b2db      	uxtb	r3, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	51eb851f 	.word	0x51eb851f
 8002070:	66666667 	.word	0x66666667
 8002074:	92492493 	.word	0x92492493

08002078 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800207c:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <MX_I2C2_Init+0x50>)
 800207e:	4a13      	ldr	r2, [pc, #76]	@ (80020cc <MX_I2C2_Init+0x54>)
 8002080:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002082:	4b11      	ldr	r3, [pc, #68]	@ (80020c8 <MX_I2C2_Init+0x50>)
 8002084:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <MX_I2C2_Init+0x58>)
 8002086:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002088:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <MX_I2C2_Init+0x50>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800208e:	4b0e      	ldr	r3, [pc, #56]	@ (80020c8 <MX_I2C2_Init+0x50>)
 8002090:	2200      	movs	r2, #0
 8002092:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002094:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <MX_I2C2_Init+0x50>)
 8002096:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800209a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800209c:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <MX_I2C2_Init+0x50>)
 800209e:	2200      	movs	r2, #0
 80020a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <MX_I2C2_Init+0x50>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020a8:	4b07      	ldr	r3, [pc, #28]	@ (80020c8 <MX_I2C2_Init+0x50>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ae:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <MX_I2C2_Init+0x50>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020b4:	4804      	ldr	r0, [pc, #16]	@ (80020c8 <MX_I2C2_Init+0x50>)
 80020b6:	f003 fd7d 	bl	8005bb4 <HAL_I2C_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80020c0:	f000 fb4a 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200005bc 	.word	0x200005bc
 80020cc:	40005800 	.word	0x40005800
 80020d0:	000186a0 	.word	0x000186a0

080020d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	@ 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a58      	ldr	r2, [pc, #352]	@ (8002254 <HAL_I2C_MspInit+0x180>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	f040 80a9 	bne.w	800224a <HAL_I2C_MspInit+0x176>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	4b56      	ldr	r3, [pc, #344]	@ (8002258 <HAL_I2C_MspInit+0x184>)
 80020fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002100:	4a55      	ldr	r2, [pc, #340]	@ (8002258 <HAL_I2C_MspInit+0x184>)
 8002102:	f043 0302 	orr.w	r3, r3, #2
 8002106:	6313      	str	r3, [r2, #48]	@ 0x30
 8002108:	4b53      	ldr	r3, [pc, #332]	@ (8002258 <HAL_I2C_MspInit+0x184>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002114:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800211a:	2312      	movs	r3, #18
 800211c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002122:	2303      	movs	r3, #3
 8002124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002126:	2304      	movs	r3, #4
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212a:	f107 0314 	add.w	r3, r7, #20
 800212e:	4619      	mov	r1, r3
 8002130:	484a      	ldr	r0, [pc, #296]	@ (800225c <HAL_I2C_MspInit+0x188>)
 8002132:	f003 fb89 	bl	8005848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002136:	2308      	movs	r3, #8
 8002138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800213a:	2312      	movs	r3, #18
 800213c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002146:	2309      	movs	r3, #9
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	4842      	ldr	r0, [pc, #264]	@ (800225c <HAL_I2C_MspInit+0x188>)
 8002152:	f003 fb79 	bl	8005848 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b3f      	ldr	r3, [pc, #252]	@ (8002258 <HAL_I2C_MspInit+0x184>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	4a3e      	ldr	r2, [pc, #248]	@ (8002258 <HAL_I2C_MspInit+0x184>)
 8002160:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002164:	6413      	str	r3, [r2, #64]	@ 0x40
 8002166:	4b3c      	ldr	r3, [pc, #240]	@ (8002258 <HAL_I2C_MspInit+0x184>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8002172:	4b3b      	ldr	r3, [pc, #236]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 8002174:	4a3b      	ldr	r2, [pc, #236]	@ (8002264 <HAL_I2C_MspInit+0x190>)
 8002176:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8002178:	4b39      	ldr	r3, [pc, #228]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 800217a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800217e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002180:	4b37      	ldr	r3, [pc, #220]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002186:	4b36      	ldr	r3, [pc, #216]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 8002188:	2200      	movs	r2, #0
 800218a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800218c:	4b34      	ldr	r3, [pc, #208]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 800218e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002192:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002194:	4b32      	ldr	r3, [pc, #200]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 8002196:	2200      	movs	r2, #0
 8002198:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800219a:	4b31      	ldr	r3, [pc, #196]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80021a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80021b2:	482b      	ldr	r0, [pc, #172]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 80021b4:	f002 ff9c 	bl	80050f0 <HAL_DMA_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 80021be:	f000 facb 	bl	8002758 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a26      	ldr	r2, [pc, #152]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 80021c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80021c8:	4a25      	ldr	r2, [pc, #148]	@ (8002260 <HAL_I2C_MspInit+0x18c>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80021ce:	4b26      	ldr	r3, [pc, #152]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 80021d0:	4a26      	ldr	r2, [pc, #152]	@ (800226c <HAL_I2C_MspInit+0x198>)
 80021d2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80021d4:	4b24      	ldr	r3, [pc, #144]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 80021d6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80021da:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021dc:	4b22      	ldr	r3, [pc, #136]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 80021de:	2240      	movs	r2, #64	@ 0x40
 80021e0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e2:	4b21      	ldr	r3, [pc, #132]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 80021ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021ee:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80021fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002202:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002208:	4b17      	ldr	r3, [pc, #92]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 800220a:	2200      	movs	r2, #0
 800220c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800220e:	4816      	ldr	r0, [pc, #88]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 8002210:	f002 ff6e 	bl	80050f0 <HAL_DMA_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_I2C_MspInit+0x14a>
    {
      Error_Handler();
 800221a:	f000 fa9d 	bl	8002758 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a11      	ldr	r2, [pc, #68]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 8002222:	635a      	str	r2, [r3, #52]	@ 0x34
 8002224:	4a10      	ldr	r2, [pc, #64]	@ (8002268 <HAL_I2C_MspInit+0x194>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	2021      	movs	r0, #33	@ 0x21
 8002230:	f002 ff27 	bl	8005082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002234:	2021      	movs	r0, #33	@ 0x21
 8002236:	f002 ff40 	bl	80050ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	2022      	movs	r0, #34	@ 0x22
 8002240:	f002 ff1f 	bl	8005082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002244:	2022      	movs	r0, #34	@ 0x22
 8002246:	f002 ff38 	bl	80050ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800224a:	bf00      	nop
 800224c:	3728      	adds	r7, #40	@ 0x28
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40005800 	.word	0x40005800
 8002258:	40023800 	.word	0x40023800
 800225c:	40020400 	.word	0x40020400
 8002260:	20000610 	.word	0x20000610
 8002264:	40026040 	.word	0x40026040
 8002268:	20000670 	.word	0x20000670
 800226c:	400260b8 	.word	0x400260b8

08002270 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	@ 0x28
 8002274:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002276:	f002 fa7d 	bl	8004774 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800227a:	f000 f997 	bl	80025ac <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	// Odblokowanie dostępu do backupu (dla RTC)
	HAL_PWR_EnableBkUpAccess();
 800227e:	f006 f975 	bl	800856c <HAL_PWR_EnableBkUpAccess>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002282:	f107 030c 	add.w	r3, r7, #12
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	60da      	str	r2, [r3, #12]
 8002290:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002292:	2302      	movs	r3, #2
 8002294:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002296:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800229a:	61bb      	str	r3, [r7, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	4618      	mov	r0, r3
 80022a2:	f006 fdcf 	bl	8008e44 <HAL_RCCEx_PeriphCLKConfig>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022a6:	f7ff fabb 	bl	8001820 <MX_GPIO_Init>
	MX_DMA_Init();
 80022aa:	f7ff fa63 	bl	8001774 <MX_DMA_Init>
	MX_SPI1_Init();
 80022ae:	f001 fcdf 	bl	8003c70 <MX_SPI1_Init>
	MX_TIM1_Init();
 80022b2:	f001 ff85 	bl	80041c0 <MX_TIM1_Init>
	MX_RTC_Init();
 80022b6:	f000 fb73 	bl	80029a0 <MX_RTC_Init>
	MX_I2C2_Init();
 80022ba:	f7ff fedd 	bl	8002078 <MX_I2C2_Init>
	MX_ADC1_Init();
 80022be:	f7fe f957 	bl	8000570 <MX_ADC1_Init>
	MX_TIM4_Init();
 80022c2:	f002 f81d 	bl	8004300 <MX_TIM4_Init>
	MX_TIM5_Init();
 80022c6:	f002 f86f 	bl	80043a8 <MX_TIM5_Init>
	MX_USART1_UART_Init();
 80022ca:	f002 f983 	bl	80045d4 <MX_USART1_UART_Init>
	MX_SPI2_Init();
 80022ce:	f001 fd05 	bl	8003cdc <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80022d2:	2100      	movs	r1, #0
 80022d4:	48a8      	ldr	r0, [pc, #672]	@ (8002578 <main+0x308>)
 80022d6:	f007 fe71 	bl	8009fbc <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (htim1.Init.Period + 1) / 2);
 80022da:	4ba7      	ldr	r3, [pc, #668]	@ (8002578 <main+0x308>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	4ba5      	ldr	r3, [pc, #660]	@ (8002578 <main+0x308>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0852      	lsrs	r2, r2, #1
 80022e6:	635a      	str	r2, [r3, #52]	@ 0x34

	SetPWMPercentGamma(30);
 80022e8:	201e      	movs	r0, #30
 80022ea:	f7ff f849 	bl	8001380 <SetPWMPercentGamma>
	ClearClockBits(&clockReg);
 80022ee:	48a3      	ldr	r0, [pc, #652]	@ (800257c <main+0x30c>)
 80022f0:	f7fe fcb4 	bl	8000c5c <ClearClockBits>
	UpdateAllDisplays(&clockReg);
 80022f4:	48a1      	ldr	r0, [pc, #644]	@ (800257c <main+0x30c>)
 80022f6:	f7fe ffff 	bl	80012f8 <UpdateAllDisplays>
	SLIDER_Init();
 80022fa:	f000 ff0f 	bl	800311c <SLIDER_Init>
	SHT30_Init();
 80022fe:	f000 fbd5 	bl	8002aac <SHT30_Init>
	//Set_RTC_Time();
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8002302:	213c      	movs	r1, #60	@ 0x3c
 8002304:	489e      	ldr	r0, [pc, #632]	@ (8002580 <main+0x310>)
 8002306:	f007 ffaf 	bl	800a268 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 800230a:	489e      	ldr	r0, [pc, #632]	@ (8002584 <main+0x314>)
 800230c:	f007 fd9a 	bl	8009e44 <HAL_TIM_Base_Start_IT>
	GPS_Init();
 8002310:	f7ff fcd6 	bl	8001cc0 <GPS_Init>
	if (HAL_UART_Receive_DMA(&huart1, gps_dma_buffer, GPS_DMA_BUFFER_SIZE)
 8002314:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002318:	499b      	ldr	r1, [pc, #620]	@ (8002588 <main+0x318>)
 800231a:	489c      	ldr	r0, [pc, #624]	@ (800258c <main+0x31c>)
 800231c:	f008 fee6 	bl	800b0ec <HAL_UART_Receive_DMA>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <main+0xba>
			!= HAL_OK) {
		Error_Handler();
 8002326:	f000 fa17 	bl	8002758 <Error_Handler>
	}
	MENU_Init();  // Zainicjuj stan menu (IDLE)
 800232a:	f000 fa4b 	bl	80027c4 <MENU_Init>
	// Rejestracja callbacków
	Button_RegisterPressCallback(0, Button1_Pressed);
 800232e:	4998      	ldr	r1, [pc, #608]	@ (8002590 <main+0x320>)
 8002330:	2000      	movs	r0, #0
 8002332:	f7fe f9c3 	bl	80006bc <Button_RegisterPressCallback>
	Button_RegisterDoubleClickCallback(0, Button1_DoubleClicked);
 8002336:	4997      	ldr	r1, [pc, #604]	@ (8002594 <main+0x324>)
 8002338:	2000      	movs	r0, #0
 800233a:	f7fe f9f7 	bl	800072c <Button_RegisterDoubleClickCallback>
	Button_RegisterHoldCallback(0, Button1_Held);
 800233e:	4996      	ldr	r1, [pc, #600]	@ (8002598 <main+0x328>)
 8002340:	2000      	movs	r0, #0
 8002342:	f7fe f9d7 	bl	80006f4 <Button_RegisterHoldCallback>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// Odczytaj aktualny czas z RTC
		GPS_ProcessBuffer();
 8002346:	f7ff fc25 	bl	8001b94 <GPS_ProcessBuffer>
		Get_RTC_Time();
 800234a:	f000 f98f 	bl	800266c <Get_RTC_Time>
		//MENU_Process();
		//   - to jest jedyna funkcja z menu, którą regularnie wołamy w pętli
		//     (zajmie się ewentualnym auto-wyjściem, odświeżaniem, itp.)

		// 3) Odczyt aktualnych trybów i sterowanie ringiem godzin / sekund:
		uint8_t hourMode = MENU_GetMode(MENU_ITEM_HOUR);
 800234e:	2000      	movs	r0, #0
 8002350:	f000 fac0 	bl	80028d4 <MENU_GetMode>
 8002354:	4603      	mov	r3, r0
 8002356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		uint8_t secdMode = MENU_GetMode(MENU_ITEM_SECD);
 800235a:	2001      	movs	r0, #1
 800235c:	f000 faba 	bl	80028d4 <MENU_GetMode>
 8002360:	4603      	mov	r3, r0
 8002362:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		uint8_t colonMode = MENU_GetMode(MENU_ITEM_COLN);
 8002366:	2002      	movs	r0, #2
 8002368:	f000 fab4 	bl	80028d4 <MENU_GetMode>
 800236c:	4603      	mov	r3, r0
 800236e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		uint8_t topMode = MENU_GetMode(MENU_ITEM_TOP);
 8002372:	2003      	movs	r0, #3
 8002374:	f000 faae 	bl	80028d4 <MENU_GetMode>
 8002378:	4603      	mov	r3, r0
 800237a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		uint8_t custMode = MENU_GetMode(MENU_ITEM_CUST);
 800237e:	2004      	movs	r0, #4
 8002380:	f000 faa8 	bl	80028d4 <MENU_GetMode>
 8002384:	4603      	mov	r3, r0
 8002386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		// (END nie ma sensu brać, bo to tylko wyjście z menu)

		// Teraz w zależności od wybranego hourMode robimy ring:
		switch (hourMode) {
 800238a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800238e:	2b04      	cmp	r3, #4
 8002390:	d824      	bhi.n	80023dc <main+0x16c>
 8002392:	a201      	add	r2, pc, #4	@ (adr r2, 8002398 <main+0x128>)
 8002394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002398:	080023ad 	.word	0x080023ad
 800239c:	080023b9 	.word	0x080023b9
 80023a0:	080023c5 	.word	0x080023c5
 80023a4:	080023d1 	.word	0x080023d1
 80023a8:	080023dd 	.word	0x080023dd
		case 0: /* np. ring OFF */
			SetHourRingCustom(&clockReg, 1, 1);
 80023ac:	2201      	movs	r2, #1
 80023ae:	2101      	movs	r1, #1
 80023b0:	4872      	ldr	r0, [pc, #456]	@ (800257c <main+0x30c>)
 80023b2:	f7ff f955 	bl	8001660 <SetHourRingCustom>
			break;
 80023b6:	e011      	b.n	80023dc <main+0x16c>
		case 1:
			SetHourRingCustom(&clockReg, 0, 1);
 80023b8:	2201      	movs	r2, #1
 80023ba:	2100      	movs	r1, #0
 80023bc:	486f      	ldr	r0, [pc, #444]	@ (800257c <main+0x30c>)
 80023be:	f7ff f94f 	bl	8001660 <SetHourRingCustom>
			// ...
			break;
 80023c2:	e00b      	b.n	80023dc <main+0x16c>
		case 2:
			SetHourRingCustom(&clockReg, 1, 0);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2101      	movs	r1, #1
 80023c8:	486c      	ldr	r0, [pc, #432]	@ (800257c <main+0x30c>)
 80023ca:	f7ff f949 	bl	8001660 <SetHourRingCustom>
			// ...
			break;
 80023ce:	e005      	b.n	80023dc <main+0x16c>
		case 3:
			SetHourRingCustom(&clockReg, 0, 0);
 80023d0:	2200      	movs	r2, #0
 80023d2:	2100      	movs	r1, #0
 80023d4:	4869      	ldr	r0, [pc, #420]	@ (800257c <main+0x30c>)
 80023d6:	f7ff f943 	bl	8001660 <SetHourRingCustom>
			// ...
			break;
 80023da:	bf00      	nop
			// ...
			break;
		}

		// Podobnie second ring:
		switch (secdMode) {
 80023dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d82b      	bhi.n	800243c <main+0x1cc>
 80023e4:	a201      	add	r2, pc, #4	@ (adr r2, 80023ec <main+0x17c>)
 80023e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ea:	bf00      	nop
 80023ec:	08002401 	.word	0x08002401
 80023f0:	0800240f 	.word	0x0800240f
 80023f4:	0800241d 	.word	0x0800241d
 80023f8:	0800242b 	.word	0x0800242b
 80023fc:	0800243d 	.word	0x0800243d
		case 0:
			SetSecondLedSingle(&clockReg, sTime.Seconds);
 8002400:	4b66      	ldr	r3, [pc, #408]	@ (800259c <main+0x32c>)
 8002402:	789b      	ldrb	r3, [r3, #2]
 8002404:	4619      	mov	r1, r3
 8002406:	485d      	ldr	r0, [pc, #372]	@ (800257c <main+0x30c>)
 8002408:	f7fe fc35 	bl	8000c76 <SetSecondLedSingle>
			// ...
			break;
 800240c:	e016      	b.n	800243c <main+0x1cc>
		case 1:
			SetSecondLedAccumulating(&clockReg, sTime.Seconds);
 800240e:	4b63      	ldr	r3, [pc, #396]	@ (800259c <main+0x32c>)
 8002410:	789b      	ldrb	r3, [r3, #2]
 8002412:	4619      	mov	r1, r3
 8002414:	4859      	ldr	r0, [pc, #356]	@ (800257c <main+0x30c>)
 8002416:	f7fe fc88 	bl	8000d2a <SetSecondLedAccumulating>
			// ...
			break;
 800241a:	e00f      	b.n	800243c <main+0x1cc>
		case 2:
			SetSecondLedAccumulating2(&clockReg, sTime.Seconds);
 800241c:	4b5f      	ldr	r3, [pc, #380]	@ (800259c <main+0x32c>)
 800241e:	789b      	ldrb	r3, [r3, #2]
 8002420:	4619      	mov	r1, r3
 8002422:	4856      	ldr	r0, [pc, #344]	@ (800257c <main+0x30c>)
 8002424:	f7fe fcf1 	bl	8000e0a <SetSecondLedAccumulating2>
			// ...
			break;
 8002428:	e008      	b.n	800243c <main+0x1cc>
		case 3:
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 800242a:	4b5c      	ldr	r3, [pc, #368]	@ (800259c <main+0x32c>)
 800242c:	789b      	ldrb	r3, [r3, #2]
 800242e:	4a5b      	ldr	r2, [pc, #364]	@ (800259c <main+0x32c>)
 8002430:	7852      	ldrb	r2, [r2, #1]
 8002432:	4619      	mov	r1, r3
 8002434:	4851      	ldr	r0, [pc, #324]	@ (800257c <main+0x30c>)
 8002436:	f7fe ffcf 	bl	80013d8 <SetSecondLedEvenOdd>
			// ...
			break;
 800243a:	bf00      	nop
			// ...
			break;
		}

		// colonMode (0..4, ale np. używamy 0->OFF, 1->ON, reszta – ignoruj):
		switch (colonMode) {
 800243c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002440:	2b04      	cmp	r3, #4
 8002442:	d844      	bhi.n	80024ce <main+0x25e>
 8002444:	a201      	add	r2, pc, #4	@ (adr r2, 800244c <main+0x1dc>)
 8002446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244a:	bf00      	nop
 800244c:	08002461 	.word	0x08002461
 8002450:	0800248b 	.word	0x0800248b
 8002454:	080024a7 	.word	0x080024a7
 8002458:	080024c3 	.word	0x080024c3
 800245c:	080024cf 	.word	0x080024cf
		case 0:
			SetDots(&clockReg, colon, colon);
 8002460:	4b4f      	ldr	r3, [pc, #316]	@ (80025a0 <main+0x330>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	bf14      	ite	ne
 800246a:	2301      	movne	r3, #1
 800246c:	2300      	moveq	r3, #0
 800246e:	b2d9      	uxtb	r1, r3
 8002470:	4b4b      	ldr	r3, [pc, #300]	@ (80025a0 <main+0x330>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf14      	ite	ne
 800247a:	2301      	movne	r3, #1
 800247c:	2300      	moveq	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	483e      	ldr	r0, [pc, #248]	@ (800257c <main+0x30c>)
 8002484:	f7ff f8ba 	bl	80015fc <SetDots>
			// ...
			break;
 8002488:	e021      	b.n	80024ce <main+0x25e>
		case 1:
			SetDots(&clockReg, 0, colon);
 800248a:	4b45      	ldr	r3, [pc, #276]	@ (80025a0 <main+0x330>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf14      	ite	ne
 8002494:	2301      	movne	r3, #1
 8002496:	2300      	moveq	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	2100      	movs	r1, #0
 800249e:	4837      	ldr	r0, [pc, #220]	@ (800257c <main+0x30c>)
 80024a0:	f7ff f8ac 	bl	80015fc <SetDots>
			// ...
			break;
 80024a4:	e013      	b.n	80024ce <main+0x25e>
		case 2:
			SetDots(&clockReg, colon, 0);
 80024a6:	4b3e      	ldr	r3, [pc, #248]	@ (80025a0 <main+0x330>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2200      	movs	r2, #0
 80024b8:	4619      	mov	r1, r3
 80024ba:	4830      	ldr	r0, [pc, #192]	@ (800257c <main+0x30c>)
 80024bc:	f7ff f89e 	bl	80015fc <SetDots>
			// ...
			break;
 80024c0:	e005      	b.n	80024ce <main+0x25e>
		case 3:
			SetDots(&clockReg, 0, 0);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2100      	movs	r1, #0
 80024c6:	482d      	ldr	r0, [pc, #180]	@ (800257c <main+0x30c>)
 80024c8:	f7ff f898 	bl	80015fc <SetDots>
			// ...
			break;
 80024cc:	bf00      	nop
			break;
		}

		// topMode (0..4, np. 0 -> normal time, 1->time off, 2->scrolling, 3->test...):
		// itd.
		switch (topMode) {
 80024ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <main+0x26c>
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d00a      	beq.n	80024f0 <main+0x280>
 80024da:	e00d      	b.n	80024f8 <main+0x288>
		case 0:
			// normal HH:MM:SS
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 80024dc:	4b2f      	ldr	r3, [pc, #188]	@ (800259c <main+0x32c>)
 80024de:	7819      	ldrb	r1, [r3, #0]
 80024e0:	4b2e      	ldr	r3, [pc, #184]	@ (800259c <main+0x32c>)
 80024e2:	785a      	ldrb	r2, [r3, #1]
 80024e4:	4b2d      	ldr	r3, [pc, #180]	@ (800259c <main+0x32c>)
 80024e6:	789b      	ldrb	r3, [r3, #2]
 80024e8:	4824      	ldr	r0, [pc, #144]	@ (800257c <main+0x30c>)
 80024ea:	f7fe fd05 	bl	8000ef8 <SetTime7Seg_Top>
					sTime.Seconds);
			break;
 80024ee:	e003      	b.n	80024f8 <main+0x288>
		case 1:
			// wyłączony
			SetTime7Seg_Void(&clockReg);
 80024f0:	4822      	ldr	r0, [pc, #136]	@ (800257c <main+0x30c>)
 80024f2:	f7fe fe3b 	bl	800116c <SetTime7Seg_Void>
			break;
 80024f6:	bf00      	nop
			// ...
		}

		// custMode (0..4), w menu wyświetlamy "CUS0", "CUS1"...
		// tu w pętli głównej może to np. sterować jakąś inną funkcjonalnością
		switch (custMode) {
 80024f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d80d      	bhi.n	800251c <main+0x2ac>
 8002500:	a201      	add	r2, pc, #4	@ (adr r2, 8002508 <main+0x298>)
 8002502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002506:	bf00      	nop
 8002508:	0800251d 	.word	0x0800251d
 800250c:	0800251d 	.word	0x0800251d
 8002510:	0800251d 	.word	0x0800251d
 8002514:	0800251d 	.word	0x0800251d
 8002518:	0800251d 	.word	0x0800251d
//		SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes, sTime.Seconds);

		// Aktualizuj rejestry

		SHT30_Data_t data; // Zadeklarowanie zmiennej 'data'
		if (!MENU_IsActive()) {
 800251c:	f000 f978 	bl	8002810 <MENU_IsActive>
 8002520:	4603      	mov	r3, r0
 8002522:	f083 0301 	eor.w	r3, r3, #1
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d014      	beq.n	8002556 <main+0x2e6>
			if (SHT30_GetLatestData(&data)) {
 800252c:	463b      	mov	r3, r7
 800252e:	4618      	mov	r0, r3
 8002530:	f000 fb52 	bl	8002bd8 <SHT30_GetLatestData>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00d      	beq.n	8002556 <main+0x2e6>
				disp_mode?  SLIDER_DisplayTemperature( data.temperature):SLIDER_DisplayHumidity( data.humidity);
 800253a:	4b1a      	ldr	r3, [pc, #104]	@ (80025a4 <main+0x334>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d004      	beq.n	800254e <main+0x2de>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f001 f8b4 	bl	80036b4 <SLIDER_DisplayTemperature>
 800254c:	e003      	b.n	8002556 <main+0x2e6>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4618      	mov	r0, r3
 8002552:	f001 fa3b 	bl	80039cc <SLIDER_DisplayHumidity>
			}
		} else {
		}


		UpdateAllDisplays(&clockReg);
 8002556:	4809      	ldr	r0, [pc, #36]	@ (800257c <main+0x30c>)
 8002558:	f7fe fece 	bl	80012f8 <UpdateAllDisplays>

		// Opóźnij (np. 100 ms)
		// Rozpoczęcie konwersji ADC
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 800255c:	4812      	ldr	r0, [pc, #72]	@ (80025a8 <main+0x338>)
 800255e:	f002 f9e3 	bl	8004928 <HAL_ADC_Start>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <main+0x2fc>
			Error_Handler();
 8002568:	f000 f8f6 	bl	8002758 <Error_Handler>
		}
		Button_Process();
 800256c:	f7fe f8fa 	bl	8000764 <Button_Process>
		HAL_Delay(10);
 8002570:	200a      	movs	r0, #10
 8002572:	f002 f971 	bl	8004858 <HAL_Delay>
	while (1) {
 8002576:	e6e6      	b.n	8002346 <main+0xd6>
 8002578:	20000948 	.word	0x20000948
 800257c:	200006f0 	.word	0x200006f0
 8002580:	20000990 	.word	0x20000990
 8002584:	200009d8 	.word	0x200009d8
 8002588:	20000130 	.word	0x20000130
 800258c:	20000a20 	.word	0x20000a20
 8002590:	080026f9 	.word	0x080026f9
 8002594:	08002721 	.word	0x08002721
 8002598:	08002737 	.word	0x08002737
 800259c:	200006d0 	.word	0x200006d0
 80025a0:	2000012d 	.word	0x2000012d
 80025a4:	20000746 	.word	0x20000746
 80025a8:	200000c0 	.word	0x200000c0

080025ac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b094      	sub	sp, #80	@ 0x50
 80025b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80025b2:	f107 0320 	add.w	r3, r7, #32
 80025b6:	2230      	movs	r2, #48	@ 0x30
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f009 fab2 	bl	800bb24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80025c0:	f107 030c 	add.w	r3, r7, #12
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	4b23      	ldr	r3, [pc, #140]	@ (8002664 <SystemClock_Config+0xb8>)
 80025d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d8:	4a22      	ldr	r2, [pc, #136]	@ (8002664 <SystemClock_Config+0xb8>)
 80025da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025de:	6413      	str	r3, [r2, #64]	@ 0x40
 80025e0:	4b20      	ldr	r3, [pc, #128]	@ (8002664 <SystemClock_Config+0xb8>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80025ec:	2300      	movs	r3, #0
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002668 <SystemClock_Config+0xbc>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80025f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002668 <SystemClock_Config+0xbc>)
 80025fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b19      	ldr	r3, [pc, #100]	@ (8002668 <SystemClock_Config+0xbc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 800260c:	2305      	movs	r3, #5
 800260e:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002610:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002616:	2301      	movs	r3, #1
 8002618:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800261a:	2300      	movs	r3, #0
 800261c:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800261e:	f107 0320 	add.w	r3, r7, #32
 8002622:	4618      	mov	r0, r3
 8002624:	f005 ffb6 	bl	8008594 <HAL_RCC_OscConfig>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <SystemClock_Config+0x86>
		Error_Handler();
 800262e:	f000 f893 	bl	8002758 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002632:	230f      	movs	r3, #15
 8002634:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002636:	2301      	movs	r3, #1
 8002638:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800263e:	2300      	movs	r3, #0
 8002640:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002646:	f107 030c 	add.w	r3, r7, #12
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f006 fa19 	bl	8008a84 <HAL_RCC_ClockConfig>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <SystemClock_Config+0xb0>
		Error_Handler();
 8002658:	f000 f87e 	bl	8002758 <Error_Handler>
	}
}
 800265c:	bf00      	nop
 800265e:	3750      	adds	r7, #80	@ 0x50
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40023800 	.word	0x40023800
 8002668:	40007000 	.word	0x40007000

0800266c <Get_RTC_Time>:
}

/**
 * @brief Odczytuje bieżący czas z RTC.
 */
void Get_RTC_Time(void) {
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002670:	2200      	movs	r2, #0
 8002672:	4905      	ldr	r1, [pc, #20]	@ (8002688 <Get_RTC_Time+0x1c>)
 8002674:	4805      	ldr	r0, [pc, #20]	@ (800268c <Get_RTC_Time+0x20>)
 8002676:	f006 fdf0 	bl	800925a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800267a:	2200      	movs	r2, #0
 800267c:	4904      	ldr	r1, [pc, #16]	@ (8002690 <Get_RTC_Time+0x24>)
 800267e:	4803      	ldr	r0, [pc, #12]	@ (800268c <Get_RTC_Time+0x20>)
 8002680:	f006 fecd 	bl	800941e <HAL_RTC_GetDate>
}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	200006d0 	.word	0x200006d0
 800268c:	20000710 	.word	0x20000710
 8002690:	200006e4 	.word	0x200006e4

08002694 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a13      	ldr	r2, [pc, #76]	@ (80026f0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d11f      	bne.n	80026e6 <HAL_TIM_IC_CaptureCallback+0x52>
		int8_t direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(htim) ? -1 : +1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b10      	cmp	r3, #16
 80026b2:	d102      	bne.n	80026ba <HAL_TIM_IC_CaptureCallback+0x26>
 80026b4:	f04f 33ff 	mov.w	r3, #4294967295
 80026b8:	e000      	b.n	80026bc <HAL_TIM_IC_CaptureCallback+0x28>
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
		// Zamiast sprawdzać s_encoderCb, wołamy:
		Encoder_HandleInterrupt(direction);
 80026be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe f9a4 	bl	8000a10 <Encoder_HandleInterrupt>

		// Ewentualnie liczymy też encoderValue
		if (direction < 0)
 80026c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	da05      	bge.n	80026dc <HAL_TIM_IC_CaptureCallback+0x48>
			encoderValue--;
 80026d0:	4b08      	ldr	r3, [pc, #32]	@ (80026f4 <HAL_TIM_IC_CaptureCallback+0x60>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	4a07      	ldr	r2, [pc, #28]	@ (80026f4 <HAL_TIM_IC_CaptureCallback+0x60>)
 80026d8:	6013      	str	r3, [r2, #0]
		else
			encoderValue++;
	}
}
 80026da:	e004      	b.n	80026e6 <HAL_TIM_IC_CaptureCallback+0x52>
			encoderValue++;
 80026dc:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <HAL_TIM_IC_CaptureCallback+0x60>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3301      	adds	r3, #1
 80026e2:	4a04      	ldr	r2, [pc, #16]	@ (80026f4 <HAL_TIM_IC_CaptureCallback+0x60>)
 80026e4:	6013      	str	r3, [r2, #0]
}
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40000800 	.word	0x40000800
 80026f4:	200006e8 	.word	0x200006e8

080026f8 <Button1_Pressed>:

/* USER CODE BEGIN 0 */
void Button1_Pressed(void) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	// Jeśli menu jest aktywne, przechodzimy do kolejnego stanu w menu:
	if (MENU_IsActive()) {
 80026fc:	f000 f888 	bl	8002810 <MENU_IsActive>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <Button1_Pressed+0x14>
		MENU_Next();
 8002706:	f000 f8bf 	bl	8002888 <MENU_Next>
	} else {
		// Jeśli menu nie jest aktywne – można wyświetlić np. HELLO
		SLIDER_SetString("HELLO", SCROLL_RIGHT_TO_LEFT, 10);
	}
}
 800270a:	e004      	b.n	8002716 <Button1_Pressed+0x1e>
		SLIDER_SetString("HELLO", SCROLL_RIGHT_TO_LEFT, 10);
 800270c:	220a      	movs	r2, #10
 800270e:	2100      	movs	r1, #0
 8002710:	4802      	ldr	r0, [pc, #8]	@ (800271c <Button1_Pressed+0x24>)
 8002712:	f000 fd7d 	bl	8003210 <SLIDER_SetString>
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	0800c4a8 	.word	0x0800c4a8

08002720 <Button1_DoubleClicked>:

void Button1_DoubleClicked(void) {
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
	// Jeśli menu jest aktywne, wychodzimy o poziom wyżej:
	if (MENU_IsActive()) {
 8002724:	f000 f874 	bl	8002810 <MENU_IsActive>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <Button1_DoubleClicked+0x12>
		MENU_Exit();
 800272e:	f000 f893 	bl	8002858 <MENU_Exit>
	} else {
		// Jeśli menu nieaktywne – np. uruchom coś innego
		//SLIDER_SetString("DBLCL", SCROLL_RIGHT_TO_LEFT, 10);
	}
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}

08002736 <Button1_Held>:

void Button1_Held(void) {
 8002736:	b580      	push	{r7, lr}
 8002738:	af00      	add	r7, sp, #0
	// Długie przyciśnięcie – wchodzimy do menu (o ile nie jest aktywne)

	// Długie naciśnięcie – wejście do menu (lub wyjście, jeśli chcemy).
	if (!MENU_IsActive())
 800273a:	f000 f869 	bl	8002810 <MENU_IsActive>
 800273e:	4603      	mov	r3, r0
 8002740:	f083 0301 	eor.w	r3, r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <Button1_Held+0x1a>
		MENU_Enter();
 800274a:	f000 f86d 	bl	8002828 <MENU_Enter>
	else
		MENU_Exit();

}
 800274e:	e001      	b.n	8002754 <Button1_Held+0x1e>
		MENU_Exit();
 8002750:	f000 f882 	bl	8002858 <MENU_Exit>
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}

08002758 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800275c:	b672      	cpsid	i
}
 800275e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();
	while (1) {
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <Error_Handler+0x8>

08002764 <MENU_ShowCurrent>:
// Wyświetla aktualną pozycję menu (np. "HOUR"),
// + ewentualnie tryb w CUST.
// Jeśli to "END", to czekamy na kolejne naciśnięcie, żeby wyjść.

static void MENU_ShowCurrent(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af02      	add	r7, sp, #8
    // Jeżeli to ostatnia pozycja "END " -> pokaż tylko "END " i wyjdź.
    if (s_currentItem == MENU_ITEM_END)
 800276a:	4b11      	ldr	r3, [pc, #68]	@ (80027b0 <MENU_ShowCurrent+0x4c>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d104      	bne.n	800277c <MENU_ShowCurrent+0x18>
    {
        SLIDER_SetStringAndStay("END ", SCROLL_RIGHT_TO_LEFT);
 8002772:	2100      	movs	r1, #0
 8002774:	480f      	ldr	r0, [pc, #60]	@ (80027b4 <MENU_ShowCurrent+0x50>)
 8002776:	f000 fd09 	bl	800318c <SLIDER_SetStringAndStay>
 800277a:	e015      	b.n	80027a8 <MENU_ShowCurrent+0x44>
    // "Nazwa + cyfra" w jednej linijce.
    // Mamy tablicę s_menuLabels (np. "HOUR", "SECD"...) i s_menuModes (0..4).
    // Musimy uważać na max 6 znaków (slider cina do 6).

    char temp[7]; // 6 znaków + null
    snprintf(temp, sizeof(temp), "%s%d", s_menuLabels[s_currentItem], (int)s_menuModes[s_currentItem]);
 800277c:	4b0c      	ldr	r3, [pc, #48]	@ (80027b0 <MENU_ShowCurrent+0x4c>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	4b0d      	ldr	r3, [pc, #52]	@ (80027b8 <MENU_ShowCurrent+0x54>)
 8002784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002788:	4a09      	ldr	r2, [pc, #36]	@ (80027b0 <MENU_ShowCurrent+0x4c>)
 800278a:	7812      	ldrb	r2, [r2, #0]
 800278c:	4611      	mov	r1, r2
 800278e:	4a0b      	ldr	r2, [pc, #44]	@ (80027bc <MENU_ShowCurrent+0x58>)
 8002790:	5c52      	ldrb	r2, [r2, r1]
 8002792:	4638      	mov	r0, r7
 8002794:	9200      	str	r2, [sp, #0]
 8002796:	4a0a      	ldr	r2, [pc, #40]	@ (80027c0 <MENU_ShowCurrent+0x5c>)
 8002798:	2107      	movs	r1, #7
 800279a:	f009 f98f 	bl	800babc <sniprintf>
    // np. "HOUR0", "HOUR1", "SECD3", "CUST0"...

    SLIDER_SetStringAndStay(temp, SCROLL_RIGHT_TO_LEFT);
 800279e:	463b      	mov	r3, r7
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fcf2 	bl	800318c <SLIDER_SetStringAndStay>
}
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	2000070f 	.word	0x2000070f
 80027b4:	0800c4d8 	.word	0x0800c4d8
 80027b8:	20000030 	.word	0x20000030
 80027bc:	20000708 	.word	0x20000708
 80027c0:	0800c4e0 	.word	0x0800c4e0

080027c4 <MENU_Init>:

// -------------------------------------------------------------------------
// Funkcje z interfejsu publicznego:

void MENU_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
    s_menuActive    = false;
 80027ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002800 <MENU_Init+0x3c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
    s_currentItem   = 0;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <MENU_Init+0x40>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]

    // Wyzeruj tablicę trybów (na start wszystko = 0)
    for (int i=0; i<MENU_ITEM_COUNT; i++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]
 80027da:	e007      	b.n	80027ec <MENU_Init+0x28>
    {
        s_menuModes[i] = 0;
 80027dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002808 <MENU_Init+0x44>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<MENU_ITEM_COUNT; i++)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3301      	adds	r3, #1
 80027ea:	607b      	str	r3, [r7, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b05      	cmp	r3, #5
 80027f0:	ddf4      	ble.n	80027dc <MENU_Init+0x18>
    }

    // Zarejestruj callback obrotu enkodera:
    Encoder_RegisterRotateCallback(MENU_OnEncoderRotate);
 80027f2:	4806      	ldr	r0, [pc, #24]	@ (800280c <MENU_Init+0x48>)
 80027f4:	f7fd ff52 	bl	800069c <Encoder_RegisterRotateCallback>
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	2000070e 	.word	0x2000070e
 8002804:	2000070f 	.word	0x2000070f
 8002808:	20000708 	.word	0x20000708
 800280c:	08002901 	.word	0x08002901

08002810 <MENU_IsActive>:

bool MENU_IsActive(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
    return s_menuActive;
 8002814:	4b03      	ldr	r3, [pc, #12]	@ (8002824 <MENU_IsActive+0x14>)
 8002816:	781b      	ldrb	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	2000070e 	.word	0x2000070e

08002828 <MENU_Enter>:

void MENU_Enter(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
    if (!s_menuActive)
 800282c:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <MENU_Enter+0x28>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	f083 0301 	eor.w	r3, r3, #1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d007      	beq.n	800284a <MENU_Enter+0x22>
    {
        s_menuActive  = true;
 800283a:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <MENU_Enter+0x28>)
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
        s_currentItem = 0;
 8002840:	4b04      	ldr	r3, [pc, #16]	@ (8002854 <MENU_Enter+0x2c>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
        MENU_ShowCurrent();
 8002846:	f7ff ff8d 	bl	8002764 <MENU_ShowCurrent>
    }
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	2000070e 	.word	0x2000070e
 8002854:	2000070f 	.word	0x2000070f

08002858 <MENU_Exit>:

void MENU_Exit(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
    if (s_menuActive)
 800285c:	4b07      	ldr	r3, [pc, #28]	@ (800287c <MENU_Exit+0x24>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d009      	beq.n	8002878 <MENU_Exit+0x20>
    {
        s_menuActive  = false;
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <MENU_Exit+0x24>)
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
        s_currentItem = 0;
 800286a:	4b05      	ldr	r3, [pc, #20]	@ (8002880 <MENU_Exit+0x28>)
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]

        // Możesz też zresetować slider, np.:
        SLIDER_SetStringAndStay("    ", SCROLL_RIGHT_TO_LEFT);
 8002870:	2100      	movs	r1, #0
 8002872:	4804      	ldr	r0, [pc, #16]	@ (8002884 <MENU_Exit+0x2c>)
 8002874:	f000 fc8a 	bl	800318c <SLIDER_SetStringAndStay>
    }
}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}
 800287c:	2000070e 	.word	0x2000070e
 8002880:	2000070f 	.word	0x2000070f
 8002884:	0800c4e8 	.word	0x0800c4e8

08002888 <MENU_Next>:

void MENU_Next(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
    if (!s_menuActive) return;
 800288c:	4b0f      	ldr	r3, [pc, #60]	@ (80028cc <MENU_Next+0x44>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	f083 0301 	eor.w	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d116      	bne.n	80028c8 <MENU_Next+0x40>

    s_currentItem++;
 800289a:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <MENU_Next+0x48>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	3301      	adds	r3, #1
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <MENU_Next+0x48>)
 80028a4:	701a      	strb	r2, [r3, #0]
    if (s_currentItem >= MENU_ITEM_COUNT)
 80028a6:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <MENU_Next+0x48>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b05      	cmp	r3, #5
 80028ac:	d902      	bls.n	80028b4 <MENU_Next+0x2c>
    {
        // Jeśli przekroczyliśmy "END" -> wyjdź z menu
        MENU_Exit();
 80028ae:	f7ff ffd3 	bl	8002858 <MENU_Exit>
        return;
 80028b2:	e00a      	b.n	80028ca <MENU_Next+0x42>
    }

    // Jeżeli jesteśmy np. na "END" i user znów wciśnie – też wychodzimy w pętli:
    if (s_currentItem == MENU_ITEM_END)
 80028b4:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <MENU_Next+0x48>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d102      	bne.n	80028c2 <MENU_Next+0x3a>
    {
        // Pokaż "END "
        MENU_ShowCurrent();
 80028bc:	f7ff ff52 	bl	8002764 <MENU_ShowCurrent>
        // I czekamy, aż user naciśnie przycisk -> wtedy s_currentItem++ -> exit
        return;
 80028c0:	e003      	b.n	80028ca <MENU_Next+0x42>
    }

    // W innym przypadku normalnie pokaż nowy item
    MENU_ShowCurrent();
 80028c2:	f7ff ff4f 	bl	8002764 <MENU_ShowCurrent>
 80028c6:	e000      	b.n	80028ca <MENU_Next+0x42>
    if (!s_menuActive) return;
 80028c8:	bf00      	nop
}
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	2000070e 	.word	0x2000070e
 80028d0:	2000070f 	.word	0x2000070f

080028d4 <MENU_GetMode>:
    // ewentualne odświeżanie stanu, logika do automatycznego wyjścia, itp.
    // ...
}

uint8_t MENU_GetMode(MenuItem_t item)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
    if (item >= MENU_ITEM_COUNT) return 0;
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d901      	bls.n	80028e8 <MENU_GetMode+0x14>
 80028e4:	2300      	movs	r3, #0
 80028e6:	e002      	b.n	80028ee <MENU_GetMode+0x1a>
    return s_menuModes[item];
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	4a04      	ldr	r2, [pc, #16]	@ (80028fc <MENU_GetMode+0x28>)
 80028ec:	5cd3      	ldrb	r3, [r2, r3]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000708 	.word	0x20000708

08002900 <MENU_OnEncoderRotate>:

// -------------------------------------------------------------------------
// Obsługa enkodera:
// (wołana w przerwaniu TIM4 przez Encoder_HandleInterrupt -> s_encoderCb)
void MENU_OnEncoderRotate(int8_t direction)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
    if (!s_menuActive)
 800290a:	4b21      	ldr	r3, [pc, #132]	@ (8002990 <MENU_OnEncoderRotate+0x90>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	f083 0301 	eor.w	r3, r3, #1
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d134      	bne.n	8002982 <MENU_OnEncoderRotate+0x82>
    {
        // Menu nieaktywne – ignoruj
        return;
    }

    if (s_currentItem >= MENU_ITEM_COUNT)
 8002918:	4b1e      	ldr	r3, [pc, #120]	@ (8002994 <MENU_OnEncoderRotate+0x94>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b05      	cmp	r3, #5
 800291e:	d832      	bhi.n	8002986 <MENU_OnEncoderRotate+0x86>
    {
        return;
    }

    // Zwiększ/zmniejsz s_menuModes[s_currentItem] w przedziale [0..4]
    uint8_t maxVal = s_menuMaxModes[s_currentItem];
 8002920:	4b1c      	ldr	r3, [pc, #112]	@ (8002994 <MENU_OnEncoderRotate+0x94>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4b1c      	ldr	r3, [pc, #112]	@ (8002998 <MENU_OnEncoderRotate+0x98>)
 8002928:	5c9b      	ldrb	r3, [r3, r2]
 800292a:	73fb      	strb	r3, [r7, #15]

    if (direction > 0)
 800292c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002930:	2b00      	cmp	r3, #0
 8002932:	dd10      	ble.n	8002956 <MENU_OnEncoderRotate+0x56>
    {
        if (s_menuModes[s_currentItem] < maxVal)
 8002934:	4b17      	ldr	r3, [pc, #92]	@ (8002994 <MENU_OnEncoderRotate+0x94>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	4b18      	ldr	r3, [pc, #96]	@ (800299c <MENU_OnEncoderRotate+0x9c>)
 800293c:	5c9b      	ldrb	r3, [r3, r2]
 800293e:	7bfa      	ldrb	r2, [r7, #15]
 8002940:	429a      	cmp	r2, r3
 8002942:	d917      	bls.n	8002974 <MENU_OnEncoderRotate+0x74>
            s_menuModes[s_currentItem]++;
 8002944:	4b13      	ldr	r3, [pc, #76]	@ (8002994 <MENU_OnEncoderRotate+0x94>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	4a14      	ldr	r2, [pc, #80]	@ (800299c <MENU_OnEncoderRotate+0x9c>)
 800294a:	5cd2      	ldrb	r2, [r2, r3]
 800294c:	3201      	adds	r2, #1
 800294e:	b2d1      	uxtb	r1, r2
 8002950:	4a12      	ldr	r2, [pc, #72]	@ (800299c <MENU_OnEncoderRotate+0x9c>)
 8002952:	54d1      	strb	r1, [r2, r3]
 8002954:	e00e      	b.n	8002974 <MENU_OnEncoderRotate+0x74>
    }
    else
    {
        // kierunek ujemny
        if (s_menuModes[s_currentItem] > 0)
 8002956:	4b0f      	ldr	r3, [pc, #60]	@ (8002994 <MENU_OnEncoderRotate+0x94>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	4b0f      	ldr	r3, [pc, #60]	@ (800299c <MENU_OnEncoderRotate+0x9c>)
 800295e:	5c9b      	ldrb	r3, [r3, r2]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <MENU_OnEncoderRotate+0x74>
            s_menuModes[s_currentItem]--;
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <MENU_OnEncoderRotate+0x94>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4a0c      	ldr	r2, [pc, #48]	@ (800299c <MENU_OnEncoderRotate+0x9c>)
 800296a:	5cd2      	ldrb	r2, [r2, r3]
 800296c:	3a01      	subs	r2, #1
 800296e:	b2d1      	uxtb	r1, r2
 8002970:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <MENU_OnEncoderRotate+0x9c>)
 8002972:	54d1      	strb	r1, [r2, r3]
    }

    // Ponownie wyświetl nazwę i ewentualny tryb (np. "CUST2")
    // – ale TYLKO jeśli to nie "END".
    if (s_currentItem != MENU_ITEM_END)
 8002974:	4b07      	ldr	r3, [pc, #28]	@ (8002994 <MENU_OnEncoderRotate+0x94>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b05      	cmp	r3, #5
 800297a:	d005      	beq.n	8002988 <MENU_OnEncoderRotate+0x88>
    {
        MENU_ShowCurrent();
 800297c:	f7ff fef2 	bl	8002764 <MENU_ShowCurrent>
 8002980:	e002      	b.n	8002988 <MENU_OnEncoderRotate+0x88>
        return;
 8002982:	bf00      	nop
 8002984:	e000      	b.n	8002988 <MENU_OnEncoderRotate+0x88>
        return;
 8002986:	bf00      	nop
    }
}
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	2000070e 	.word	0x2000070e
 8002994:	2000070f 	.word	0x2000070f
 8002998:	0800c590 	.word	0x0800c590
 800299c:	20000708 	.word	0x20000708

080029a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80029a6:	1d3b      	adds	r3, r7, #4
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80029b4:	2300      	movs	r3, #0
 80029b6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80029b8:	4b24      	ldr	r3, [pc, #144]	@ (8002a4c <MX_RTC_Init+0xac>)
 80029ba:	4a25      	ldr	r2, [pc, #148]	@ (8002a50 <MX_RTC_Init+0xb0>)
 80029bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80029be:	4b23      	ldr	r3, [pc, #140]	@ (8002a4c <MX_RTC_Init+0xac>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80029c4:	4b21      	ldr	r3, [pc, #132]	@ (8002a4c <MX_RTC_Init+0xac>)
 80029c6:	227f      	movs	r2, #127	@ 0x7f
 80029c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80029ca:	4b20      	ldr	r3, [pc, #128]	@ (8002a4c <MX_RTC_Init+0xac>)
 80029cc:	22ff      	movs	r2, #255	@ 0xff
 80029ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80029d0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a4c <MX_RTC_Init+0xac>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80029d6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a4c <MX_RTC_Init+0xac>)
 80029d8:	2200      	movs	r2, #0
 80029da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80029dc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a4c <MX_RTC_Init+0xac>)
 80029de:	2200      	movs	r2, #0
 80029e0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80029e2:	481a      	ldr	r0, [pc, #104]	@ (8002a4c <MX_RTC_Init+0xac>)
 80029e4:	f006 fb1c 	bl	8009020 <HAL_RTC_Init>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80029ee:	f7ff feb3 	bl	8002758 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	480f      	ldr	r0, [pc, #60]	@ (8002a4c <MX_RTC_Init+0xac>)
 8002a0e:	f006 fb8a 	bl	8009126 <HAL_RTC_SetTime>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002a18:	f7ff fe9e 	bl	8002758 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002a20:	2301      	movs	r3, #1
 8002a22:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002a24:	2301      	movs	r3, #1
 8002a26:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002a2c:	463b      	mov	r3, r7
 8002a2e:	2201      	movs	r2, #1
 8002a30:	4619      	mov	r1, r3
 8002a32:	4806      	ldr	r0, [pc, #24]	@ (8002a4c <MX_RTC_Init+0xac>)
 8002a34:	f006 fc6f 	bl	8009316 <HAL_RTC_SetDate>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002a3e:	f7ff fe8b 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a42:	bf00      	nop
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000710 	.word	0x20000710
 8002a50:	40002800 	.word	0x40002800

08002a54 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a5c:	f107 030c 	add.w	r3, r7, #12
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa4 <HAL_RTC_MspInit+0x50>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d111      	bne.n	8002a9a <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a76:	2302      	movs	r3, #2
 8002a78:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002a7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a7e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a80:	f107 030c 	add.w	r3, r7, #12
 8002a84:	4618      	mov	r0, r3
 8002a86:	f006 f9dd 	bl	8008e44 <HAL_RCCEx_PeriphCLKConfig>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002a90:	f7ff fe62 	bl	8002758 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a94:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <HAL_RTC_MspInit+0x54>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	3720      	adds	r7, #32
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40002800 	.word	0x40002800
 8002aa8:	42470e3c 	.word	0x42470e3c

08002aac <SHT30_Init>:

/* =========================================================================
   Funkcja inicjalizacyjna
   ========================================================================= */
void SHT30_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af02      	add	r7, sp, #8
    g_measState = SHT30_STATE_IDLE;
 8002ab2:	4b10      	ldr	r3, [pc, #64]	@ (8002af4 <SHT30_Init+0x48>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
    g_timerMs   = 0;
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8002af8 <SHT30_Init+0x4c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	801a      	strh	r2, [r3, #0]
    memset(&g_latestData, 0, sizeof(g_latestData));
 8002abe:	220c      	movs	r2, #12
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	480e      	ldr	r0, [pc, #56]	@ (8002afc <SHT30_Init+0x50>)
 8002ac4:	f009 f82e 	bl	800bb24 <memset>
    g_latestData.valid = false;
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8002afc <SHT30_Init+0x50>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	721a      	strb	r2, [r3, #8]

    // Opcjonalny Soft Reset (0x30A2) – wysyłamy synchronicznie
    uint8_t cmdReset[2] = {0x30, 0xA2};
 8002ace:	f24a 2330 	movw	r3, #41520	@ 0xa230
 8002ad2:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&hi2c2, (SHT30_I2C_ADDR << 1), cmdReset, 2, 100);
 8002ad4:	1d3a      	adds	r2, r7, #4
 8002ad6:	2364      	movs	r3, #100	@ 0x64
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	2302      	movs	r3, #2
 8002adc:	2188      	movs	r1, #136	@ 0x88
 8002ade:	4808      	ldr	r0, [pc, #32]	@ (8002b00 <SHT30_Init+0x54>)
 8002ae0:	f003 f9c2 	bl	8005e68 <HAL_I2C_Master_Transmit>
    HAL_Delay(10); // Odczekaj chwilę po resecie
 8002ae4:	200a      	movs	r0, #10
 8002ae6:	f001 feb7 	bl	8004858 <HAL_Delay>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000736 	.word	0x20000736
 8002af8:	20000744 	.word	0x20000744
 8002afc:	20000738 	.word	0x20000738
 8002b00:	200005bc 	.word	0x200005bc

08002b04 <SHT30_10msHandler>:

/* =========================================================================
   Funkcja wywoływana co 10 ms (z przerwania timera)
   ========================================================================= */
void SHT30_10msHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
    switch (g_measState)
 8002b08:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc0 <SHT30_10msHandler+0xbc>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d84c      	bhi.n	8002baa <SHT30_10msHandler+0xa6>
 8002b10:	a201      	add	r2, pc, #4	@ (adr r2, 8002b18 <SHT30_10msHandler+0x14>)
 8002b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b16:	bf00      	nop
 8002b18:	08002b2d 	.word	0x08002b2d
 8002b1c:	08002bb3 	.word	0x08002bb3
 8002b20:	08002b61 	.word	0x08002b61
 8002b24:	08002bb3 	.word	0x08002bb3
 8002b28:	08002ba3 	.word	0x08002ba3
    {
    case SHT30_STATE_IDLE:
        // Czekamy aż minie 30 ms od poprzedniego pomiaru
        g_timerMs += 10;
 8002b2c:	4b25      	ldr	r3, [pc, #148]	@ (8002bc4 <SHT30_10msHandler+0xc0>)
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	330a      	adds	r3, #10
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	4b23      	ldr	r3, [pc, #140]	@ (8002bc4 <SHT30_10msHandler+0xc0>)
 8002b36:	801a      	strh	r2, [r3, #0]
        if (g_timerMs >= SHT30_PERIOD_MS)
 8002b38:	4b22      	ldr	r3, [pc, #136]	@ (8002bc4 <SHT30_10msHandler+0xc0>)
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	2b77      	cmp	r3, #119	@ 0x77
 8002b3e:	d93a      	bls.n	8002bb6 <SHT30_10msHandler+0xb2>
        {
            // Reset licznika
            g_timerMs = 0;
 8002b40:	4b20      	ldr	r3, [pc, #128]	@ (8002bc4 <SHT30_10msHandler+0xc0>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	801a      	strh	r2, [r3, #0]

            // Start transmisji DMA – wysyłamy komendę Single Shot
            if (HAL_I2C_Master_Transmit_DMA(&hi2c2, (SHT30_I2C_ADDR << 1),
 8002b46:	2302      	movs	r3, #2
 8002b48:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc8 <SHT30_10msHandler+0xc4>)
 8002b4a:	2188      	movs	r1, #136	@ 0x88
 8002b4c:	481f      	ldr	r0, [pc, #124]	@ (8002bcc <SHT30_10msHandler+0xc8>)
 8002b4e:	f003 fa89 	bl	8006064 <HAL_I2C_Master_Transmit_DMA>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d12e      	bne.n	8002bb6 <SHT30_10msHandler+0xb2>
                                            (uint8_t*)SHT30_CMD_SINGLE_SHOT, 2) == HAL_OK)
            {
                g_measState = SHT30_STATE_TX_IN_PROGRESS;
 8002b58:	4b19      	ldr	r3, [pc, #100]	@ (8002bc0 <SHT30_10msHandler+0xbc>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
            {
                // Błąd startu DMA – pozostajemy w stanie IDLE
                // Można dodać obsługę błędu tutaj
            }
        }
        break;
 8002b5e:	e02a      	b.n	8002bb6 <SHT30_10msHandler+0xb2>
        // Nic nie robimy – czekamy na callback TX
        break;

    case SHT30_STATE_WAITING_FOR_MEAS:
        // Odliczamy czas konwersji (15 ms)
        g_timerMs += 10;
 8002b60:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <SHT30_10msHandler+0xc0>)
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	330a      	adds	r3, #10
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b16      	ldr	r3, [pc, #88]	@ (8002bc4 <SHT30_10msHandler+0xc0>)
 8002b6a:	801a      	strh	r2, [r3, #0]
        if (g_timerMs >= SHT30_MEAS_TIME_MS)
 8002b6c:	4b15      	ldr	r3, [pc, #84]	@ (8002bc4 <SHT30_10msHandler+0xc0>)
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	2b59      	cmp	r3, #89	@ 0x59
 8002b72:	d922      	bls.n	8002bba <SHT30_10msHandler+0xb6>
        {
            // Minął czas potrzebny na konwersję
            g_timerMs = 0; // Reset licznika
 8002b74:	4b13      	ldr	r3, [pc, #76]	@ (8002bc4 <SHT30_10msHandler+0xc0>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	801a      	strh	r2, [r3, #0]

            // Rozpoczynamy odbiór surowych danych (6 bajtów) przez DMA
            if (HAL_I2C_Master_Receive_DMA(&hi2c2, (SHT30_I2C_ADDR << 1),
 8002b7a:	2306      	movs	r3, #6
 8002b7c:	4a14      	ldr	r2, [pc, #80]	@ (8002bd0 <SHT30_10msHandler+0xcc>)
 8002b7e:	2188      	movs	r1, #136	@ 0x88
 8002b80:	4812      	ldr	r0, [pc, #72]	@ (8002bcc <SHT30_10msHandler+0xc8>)
 8002b82:	f003 fb9b 	bl	80062bc <HAL_I2C_Master_Receive_DMA>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d103      	bne.n	8002b94 <SHT30_10msHandler+0x90>
                                           g_rxBuffer, 6) == HAL_OK)
            {
                g_measState = SHT30_STATE_RX_IN_PROGRESS;
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc0 <SHT30_10msHandler+0xbc>)
 8002b8e:	2203      	movs	r2, #3
 8002b90:	701a      	strb	r2, [r3, #0]
                // Błąd startu DMA – powrót do IDLE
                g_measState = SHT30_STATE_IDLE;
                g_latestData.valid = false;
            }
        }
        break;
 8002b92:	e012      	b.n	8002bba <SHT30_10msHandler+0xb6>
                g_measState = SHT30_STATE_IDLE;
 8002b94:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc0 <SHT30_10msHandler+0xbc>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
                g_latestData.valid = false;
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd4 <SHT30_10msHandler+0xd0>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	721a      	strb	r2, [r3, #8]
        break;
 8002ba0:	e00b      	b.n	8002bba <SHT30_10msHandler+0xb6>
        break;

    case SHT30_STATE_DONE:
        // Pomiar skończony. Przechodzimy do stanu IDLE.
        // Dalsze pomiary będą inicjowane po upływie kolejnych 30 ms
        g_measState = SHT30_STATE_IDLE;
 8002ba2:	4b07      	ldr	r3, [pc, #28]	@ (8002bc0 <SHT30_10msHandler+0xbc>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
        break;
 8002ba8:	e008      	b.n	8002bbc <SHT30_10msHandler+0xb8>

    default:
        g_measState = SHT30_STATE_IDLE;
 8002baa:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <SHT30_10msHandler+0xbc>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]
        break;
 8002bb0:	e004      	b.n	8002bbc <SHT30_10msHandler+0xb8>
        break;
 8002bb2:	bf00      	nop
 8002bb4:	e002      	b.n	8002bbc <SHT30_10msHandler+0xb8>
        break;
 8002bb6:	bf00      	nop
 8002bb8:	e000      	b.n	8002bbc <SHT30_10msHandler+0xb8>
        break;
 8002bba:	bf00      	nop
    }
}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20000736 	.word	0x20000736
 8002bc4:	20000744 	.word	0x20000744
 8002bc8:	0800c598 	.word	0x0800c598
 8002bcc:	200005bc 	.word	0x200005bc
 8002bd0:	20000730 	.word	0x20000730
 8002bd4:	20000738 	.word	0x20000738

08002bd8 <SHT30_GetLatestData>:

/* =========================================================================
   Funkcja pobierająca najnowsze dane pomiarowe
   ========================================================================= */
bool SHT30_GetLatestData(SHT30_Data_t *pData)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
    if (pData == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <SHT30_GetLatestData+0x12>
        return false;
 8002be6:	2300      	movs	r3, #0
 8002be8:	e00e      	b.n	8002c08 <SHT30_GetLatestData+0x30>

    if (!g_latestData.valid)
 8002bea:	4b0a      	ldr	r3, [pc, #40]	@ (8002c14 <SHT30_GetLatestData+0x3c>)
 8002bec:	7a1b      	ldrb	r3, [r3, #8]
 8002bee:	f083 0301 	eor.w	r3, r3, #1
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <SHT30_GetLatestData+0x24>
        return false;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e005      	b.n	8002c08 <SHT30_GetLatestData+0x30>

    *pData = g_latestData;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a05      	ldr	r2, [pc, #20]	@ (8002c14 <SHT30_GetLatestData+0x3c>)
 8002c00:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return true;
 8002c06:	2301      	movs	r3, #1
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	20000738 	.word	0x20000738

08002c18 <HAL_I2C_MasterTxCpltCallback>:

/* =========================================================================
   Callback zakończenia transmisji DMA (MasterTxCplt)
   ========================================================================= */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a09      	ldr	r2, [pc, #36]	@ (8002c4c <HAL_I2C_MasterTxCpltCallback+0x34>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d109      	bne.n	8002c3e <HAL_I2C_MasterTxCpltCallback+0x26>
    {
        if (g_measState == SHT30_STATE_TX_IN_PROGRESS)
 8002c2a:	4b09      	ldr	r3, [pc, #36]	@ (8002c50 <HAL_I2C_MasterTxCpltCallback+0x38>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d105      	bne.n	8002c3e <HAL_I2C_MasterTxCpltCallback+0x26>
        {
            // Przejście do stanu oczekiwania na konwersję
            g_measState = SHT30_STATE_WAITING_FOR_MEAS;
 8002c32:	4b07      	ldr	r3, [pc, #28]	@ (8002c50 <HAL_I2C_MasterTxCpltCallback+0x38>)
 8002c34:	2202      	movs	r2, #2
 8002c36:	701a      	strb	r2, [r3, #0]
            g_timerMs = 0; // Reset licznika
 8002c38:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40005800 	.word	0x40005800
 8002c50:	20000736 	.word	0x20000736
 8002c54:	20000744 	.word	0x20000744

08002c58 <HAL_I2C_MasterRxCpltCallback>:

/* =========================================================================
   Callback zakończenia odbioru DMA (MasterRxCplt)
   ========================================================================= */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C2)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a13      	ldr	r2, [pc, #76]	@ (8002cb4 <HAL_I2C_MasterRxCpltCallback+0x5c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d120      	bne.n	8002cac <HAL_I2C_MasterRxCpltCallback+0x54>
    {
        if (g_measState == SHT30_STATE_RX_IN_PROGRESS)
 8002c6a:	4b13      	ldr	r3, [pc, #76]	@ (8002cb8 <HAL_I2C_MasterRxCpltCallback+0x60>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d11c      	bne.n	8002cac <HAL_I2C_MasterRxCpltCallback+0x54>
        {
            int32_t temp;   // Temperatura w 0.01°C
            uint32_t rh;    // Wilgotność w 0.01% RH

            bool ok = SHT30_ConvertRawData(g_rxBuffer, &temp, &rh);
 8002c72:	f107 020c 	add.w	r2, r7, #12
 8002c76:	f107 0310 	add.w	r3, r7, #16
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	480f      	ldr	r0, [pc, #60]	@ (8002cbc <HAL_I2C_MasterRxCpltCallback+0x64>)
 8002c7e:	f000 f83d 	bl	8002cfc <SHT30_ConvertRawData>
 8002c82:	4603      	mov	r3, r0
 8002c84:	75fb      	strb	r3, [r7, #23]
            if (ok)
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d009      	beq.n	8002ca0 <HAL_I2C_MasterRxCpltCallback+0x48>
            {
                g_latestData.temperature = temp;
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc0 <HAL_I2C_MasterRxCpltCallback+0x68>)
 8002c90:	6013      	str	r3, [r2, #0]
                g_latestData.humidity    = rh;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc0 <HAL_I2C_MasterRxCpltCallback+0x68>)
 8002c96:	6053      	str	r3, [r2, #4]
                g_latestData.valid       = true;
 8002c98:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <HAL_I2C_MasterRxCpltCallback+0x68>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	721a      	strb	r2, [r3, #8]
 8002c9e:	e002      	b.n	8002ca6 <HAL_I2C_MasterRxCpltCallback+0x4e>
            }
            else
            {
                g_latestData.valid = false;
 8002ca0:	4b07      	ldr	r3, [pc, #28]	@ (8002cc0 <HAL_I2C_MasterRxCpltCallback+0x68>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	721a      	strb	r2, [r3, #8]
            }

            // Przejście do stanu DONE
            g_measState = SHT30_STATE_DONE;
 8002ca6:	4b04      	ldr	r3, [pc, #16]	@ (8002cb8 <HAL_I2C_MasterRxCpltCallback+0x60>)
 8002ca8:	2204      	movs	r2, #4
 8002caa:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8002cac:	bf00      	nop
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40005800 	.word	0x40005800
 8002cb8:	20000736 	.word	0x20000736
 8002cbc:	20000730 	.word	0x20000730
 8002cc0:	20000738 	.word	0x20000738

08002cc4 <HAL_I2C_ErrorCallback>:

/* =========================================================================
   Callback błędu transmisji DMA (Error)
   ========================================================================= */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a07      	ldr	r2, [pc, #28]	@ (8002cf0 <HAL_I2C_ErrorCallback+0x2c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d105      	bne.n	8002ce2 <HAL_I2C_ErrorCallback+0x1e>
    {
        // Obsługa błędu transmisji DMA/I2C
        g_measState = SHT30_STATE_IDLE;
 8002cd6:	4b07      	ldr	r3, [pc, #28]	@ (8002cf4 <HAL_I2C_ErrorCallback+0x30>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
        g_latestData.valid = false;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <HAL_I2C_ErrorCallback+0x34>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	721a      	strb	r2, [r3, #8]
    }
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40005800 	.word	0x40005800
 8002cf4:	20000736 	.word	0x20000736
 8002cf8:	20000738 	.word	0x20000738

08002cfc <SHT30_ConvertRawData>:

/* =========================================================================
   Funkcja konwertująca surowe dane na wartości całkowite
   ========================================================================= */
static bool SHT30_ConvertRawData(const uint8_t *raw, int32_t *pTemp, uint32_t *pRH)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
    if (raw == NULL || pTemp == NULL || pRH == NULL)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <SHT30_ConvertRawData+0x1e>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <SHT30_ConvertRawData+0x1e>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <SHT30_ConvertRawData+0x22>
        return false;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e04f      	b.n	8002dbe <SHT30_ConvertRawData+0xc2>

    // Sprawdzenie CRC
    if (SHT30_CalcCrc8(&raw[0], 2) != raw[2])
 8002d1e:	2102      	movs	r1, #2
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f853 	bl	8002dcc <SHT30_CalcCrc8>
 8002d26:	4603      	mov	r3, r0
 8002d28:	461a      	mov	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <SHT30_ConvertRawData+0x3c>
        return false; // Błędny CRC temperatury
 8002d34:	2300      	movs	r3, #0
 8002d36:	e042      	b.n	8002dbe <SHT30_ConvertRawData+0xc2>

    if (SHT30_CalcCrc8(&raw[3], 2) != raw[5])
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	3303      	adds	r3, #3
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f844 	bl	8002dcc <SHT30_CalcCrc8>
 8002d44:	4603      	mov	r3, r0
 8002d46:	461a      	mov	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3305      	adds	r3, #5
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d001      	beq.n	8002d56 <SHT30_ConvertRawData+0x5a>
        return false; // Błędny CRC wilgotności
 8002d52:	2300      	movs	r3, #0
 8002d54:	e033      	b.n	8002dbe <SHT30_ConvertRawData+0xc2>

    // Surowa temperatura i wilgotność
    uint16_t rawT = (raw[0] << 8) | raw[1];
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	021b      	lsls	r3, r3, #8
 8002d5c:	b21a      	sxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3301      	adds	r3, #1
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	b21b      	sxth	r3, r3
 8002d66:	4313      	orrs	r3, r2
 8002d68:	b21b      	sxth	r3, r3
 8002d6a:	82fb      	strh	r3, [r7, #22]
    uint16_t rawH = (raw[3] << 8) | raw[4];
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	3303      	adds	r3, #3
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	b21a      	sxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	b21b      	sxth	r3, r3
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	b21b      	sxth	r3, r3
 8002d82:	82bb      	strh	r3, [r7, #20]

    // Konwersja na wartości całkowite:
    // T = -4500 + (17500 * rawT) / 65535
    // H = (10000 * rawH) / 65535
    *pTemp = (-4500) + ((17500 * (int32_t)rawT) / 65535);
 8002d84:	8afb      	ldrh	r3, [r7, #22]
 8002d86:	f244 425c 	movw	r2, #17500	@ 0x445c
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8002dc8 <SHT30_ConvertRawData+0xcc>)
 8002d90:	fb82 1203 	smull	r1, r2, r2, r3
 8002d94:	441a      	add	r2, r3
 8002d96:	13d2      	asrs	r2, r2, #15
 8002d98:	17db      	asrs	r3, r3, #31
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f5a3 538c 	sub.w	r3, r3, #4480	@ 0x1180
 8002da0:	3b14      	subs	r3, #20
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	6013      	str	r3, [r2, #0]
    *pRH   = (10000 * (uint32_t)rawH) / 65535;
 8002da6:	8abb      	ldrh	r3, [r7, #20]
 8002da8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002dac:	fb02 f303 	mul.w	r3, r2, r3
 8002db0:	4a05      	ldr	r2, [pc, #20]	@ (8002dc8 <SHT30_ConvertRawData+0xcc>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0bda      	lsrs	r2, r3, #15
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	601a      	str	r2, [r3, #0]

    return true;
 8002dbc:	2301      	movs	r3, #1
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	80008001 	.word	0x80008001

08002dcc <SHT30_CalcCrc8>:
/* =========================================================================
   Funkcja obliczająca CRC8 wg specyfikacji SHT3x
   Polinom: 0x31, inicjalizacja: 0xFF
   ========================================================================= */
static uint8_t SHT30_CalcCrc8(const uint8_t *data, int len)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xFF;
 8002dd6:	23ff      	movs	r3, #255	@ 0xff
 8002dd8:	75fb      	strb	r3, [r7, #23]

    for (int i = 0; i < len; i++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	e021      	b.n	8002e24 <SHT30_CalcCrc8+0x58>
    {
        crc ^= data[i];
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	781a      	ldrb	r2, [r3, #0]
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	4053      	eors	r3, r2
 8002dec:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++)
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	e011      	b.n	8002e18 <SHT30_CalcCrc8+0x4c>
        {
            if (crc & 0x80)
 8002df4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	da07      	bge.n	8002e0c <SHT30_CalcCrc8+0x40>
                crc = (crc << 1) ^ 0x31;
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	b25b      	sxtb	r3, r3
 8002e02:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8002e06:	b25b      	sxtb	r3, r3
 8002e08:	75fb      	strb	r3, [r7, #23]
 8002e0a:	e002      	b.n	8002e12 <SHT30_CalcCrc8+0x46>
            else
                crc <<= 1;
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3301      	adds	r3, #1
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b07      	cmp	r3, #7
 8002e1c:	ddea      	ble.n	8002df4 <SHT30_CalcCrc8+0x28>
    for (int i = 0; i < len; i++)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	3301      	adds	r3, #1
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	dbd9      	blt.n	8002de0 <SHT30_CalcCrc8+0x14>
        }
    }

    return crc;
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <PrepareBuffer18>:
 *         [0..5] = puste, [6..11] = 6 znaków napisu, [12..17] = puste.
 *         Jeśli text ma mniej niż 6 znaków, dopełniamy pustymi;
 *         jeśli ma więcej, obcinamy do 6.
 */
static void PrepareBuffer18(const char* text)
{
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
    // Wyczyść cały bufor
    memset(buffer, 0, sizeof(buffer));
 8002e44:	2212      	movs	r2, #18
 8002e46:	2100      	movs	r1, #0
 8002e48:	481a      	ldr	r0, [pc, #104]	@ (8002eb4 <PrepareBuffer18+0x78>)
 8002e4a:	f008 fe6b 	bl	800bb24 <memset>

    // Kopiujemy do tymczasowego stringa tylko 6 znaków
    char temp[7];
    strncpy(temp, text, 6);
 8002e4e:	f107 030c 	add.w	r3, r7, #12
 8002e52:	2206      	movs	r2, #6
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f008 fe7e 	bl	800bb58 <strncpy>
    temp[6] = '\0';   // na wszelki wypadek
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	74bb      	strb	r3, [r7, #18]

    // 1) Pierwsze 6 = puste
    // (już jest 0 po memset, więc nic nie trzeba robić)

    // 2) Indeksy 6..11 = treść napisu
    for (int i = 0; i < 6; i++)
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	e01d      	b.n	8002ea2 <PrepareBuffer18+0x66>
    {
        if (temp[i] == '\0') {
 8002e66:	f107 020c 	add.w	r2, r7, #12
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <PrepareBuffer18+0x44>
            // Jak się skończył tekst => puste
            buffer[6 + i] = 0;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	3306      	adds	r3, #6
 8002e78:	4a0e      	ldr	r2, [pc, #56]	@ (8002eb4 <PrepareBuffer18+0x78>)
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	54d1      	strb	r1, [r2, r3]
 8002e7e:	e00d      	b.n	8002e9c <PrepareBuffer18+0x60>
        }
        else {
            buffer[6 + i] = (uint8_t)charToSegment(temp[i]);
 8002e80:	f107 020c 	add.w	r2, r7, #12
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	4413      	add	r3, r2
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	1d9c      	adds	r4, r3, #6
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f7fd fdd4 	bl	8000a3c <charToSegment>
 8002e94:	4603      	mov	r3, r0
 8002e96:	461a      	mov	r2, r3
 8002e98:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <PrepareBuffer18+0x78>)
 8002e9a:	551a      	strb	r2, [r3, r4]
    for (int i = 0; i < 6; i++)
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b05      	cmp	r3, #5
 8002ea6:	ddde      	ble.n	8002e66 <PrepareBuffer18+0x2a>
        }
    }

    // 3) Ostatnie 6 (12..17) = puste
    // (znów, już jest 0 po memset)
}
 8002ea8:	bf00      	nop
 8002eaa:	bf00      	nop
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd90      	pop	{r4, r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000748 	.word	0x20000748

08002eb8 <ShowWindow>:
 *
 *         Digit0 (najbardziej lewy) - wstawiamy w bity [47..40],
 *         Digit5 (najbardziej prawy) - w bity [7..0].
 */
static void ShowWindow(void)
{
 8002eb8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002ebc:	b09a      	sub	sp, #104	@ 0x68
 8002ebe:	af00      	add	r7, sp, #0
    // Zabezpieczenie – jeśli windowIndex < 0 lub windowIndex+5 >= 18,
    // to niektóre odczyty będą poza [0..17], ale wtedy możemy dać 0 (puste).
    // Najprościej – brać "safe read".
    uint64_t val = 0ULL;
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    // digit0 (lewa pozycja wyświetlacza)
    uint8_t d0 = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (windowIndex + 0 >= 0 && windowIndex + 0 < TOTAL_LEN)
 8002ed2:	4b8f      	ldr	r3, [pc, #572]	@ (8003110 <ShowWindow+0x258>)
 8002ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	db0c      	blt.n	8002ef6 <ShowWindow+0x3e>
 8002edc:	4b8c      	ldr	r3, [pc, #560]	@ (8003110 <ShowWindow+0x258>)
 8002ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ee2:	2b11      	cmp	r3, #17
 8002ee4:	dc07      	bgt.n	8002ef6 <ShowWindow+0x3e>
        d0 = buffer[windowIndex + 0];
 8002ee6:	4b8a      	ldr	r3, [pc, #552]	@ (8003110 <ShowWindow+0x258>)
 8002ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b89      	ldr	r3, [pc, #548]	@ (8003114 <ShowWindow+0x25c>)
 8002ef0:	5c9b      	ldrb	r3, [r3, r2]
 8002ef2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

    // digit1
    uint8_t d1 = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
    if (windowIndex + 1 >= 0 && windowIndex + 1 < TOTAL_LEN)
 8002efc:	4b84      	ldr	r3, [pc, #528]	@ (8003110 <ShowWindow+0x258>)
 8002efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f06:	db0c      	blt.n	8002f22 <ShowWindow+0x6a>
 8002f08:	4b81      	ldr	r3, [pc, #516]	@ (8003110 <ShowWindow+0x258>)
 8002f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	dc07      	bgt.n	8002f22 <ShowWindow+0x6a>
        d1 = buffer[windowIndex + 1];
 8002f12:	4b7f      	ldr	r3, [pc, #508]	@ (8003110 <ShowWindow+0x258>)
 8002f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	4b7e      	ldr	r3, [pc, #504]	@ (8003114 <ShowWindow+0x25c>)
 8002f1c:	5c9b      	ldrb	r3, [r3, r2]
 8002f1e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // digit2
    uint8_t d2 = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
    if (windowIndex + 2 >= 0 && windowIndex + 2 < TOTAL_LEN)
 8002f28:	4b79      	ldr	r3, [pc, #484]	@ (8003110 <ShowWindow+0x258>)
 8002f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f2e:	f113 0f02 	cmn.w	r3, #2
 8002f32:	db0c      	blt.n	8002f4e <ShowWindow+0x96>
 8002f34:	4b76      	ldr	r3, [pc, #472]	@ (8003110 <ShowWindow+0x258>)
 8002f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f3a:	2b0f      	cmp	r3, #15
 8002f3c:	dc07      	bgt.n	8002f4e <ShowWindow+0x96>
        d2 = buffer[windowIndex + 2];
 8002f3e:	4b74      	ldr	r3, [pc, #464]	@ (8003110 <ShowWindow+0x258>)
 8002f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f44:	1c9a      	adds	r2, r3, #2
 8002f46:	4b73      	ldr	r3, [pc, #460]	@ (8003114 <ShowWindow+0x25c>)
 8002f48:	5c9b      	ldrb	r3, [r3, r2]
 8002f4a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

    // digit3
    uint8_t d3 = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
    if (windowIndex + 3 >= 0 && windowIndex + 3 < TOTAL_LEN)
 8002f54:	4b6e      	ldr	r3, [pc, #440]	@ (8003110 <ShowWindow+0x258>)
 8002f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f5a:	f113 0f03 	cmn.w	r3, #3
 8002f5e:	db0c      	blt.n	8002f7a <ShowWindow+0xc2>
 8002f60:	4b6b      	ldr	r3, [pc, #428]	@ (8003110 <ShowWindow+0x258>)
 8002f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f66:	2b0e      	cmp	r3, #14
 8002f68:	dc07      	bgt.n	8002f7a <ShowWindow+0xc2>
        d3 = buffer[windowIndex + 3];
 8002f6a:	4b69      	ldr	r3, [pc, #420]	@ (8003110 <ShowWindow+0x258>)
 8002f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f70:	1cda      	adds	r2, r3, #3
 8002f72:	4b68      	ldr	r3, [pc, #416]	@ (8003114 <ShowWindow+0x25c>)
 8002f74:	5c9b      	ldrb	r3, [r3, r2]
 8002f76:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

    // digit4
    uint8_t d4 = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    if (windowIndex + 4 >= 0 && windowIndex + 4 < TOTAL_LEN)
 8002f80:	4b63      	ldr	r3, [pc, #396]	@ (8003110 <ShowWindow+0x258>)
 8002f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f86:	f113 0f04 	cmn.w	r3, #4
 8002f8a:	db0c      	blt.n	8002fa6 <ShowWindow+0xee>
 8002f8c:	4b60      	ldr	r3, [pc, #384]	@ (8003110 <ShowWindow+0x258>)
 8002f8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f92:	2b0d      	cmp	r3, #13
 8002f94:	dc07      	bgt.n	8002fa6 <ShowWindow+0xee>
        d4 = buffer[windowIndex + 4];
 8002f96:	4b5e      	ldr	r3, [pc, #376]	@ (8003110 <ShowWindow+0x258>)
 8002f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f9c:	1d1a      	adds	r2, r3, #4
 8002f9e:	4b5d      	ldr	r3, [pc, #372]	@ (8003114 <ShowWindow+0x25c>)
 8002fa0:	5c9b      	ldrb	r3, [r3, r2]
 8002fa2:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

    // digit5 (prawa pozycja wyświetlacza)
    uint8_t d5 = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
    if (windowIndex + 5 >= 0 && windowIndex + 5 < TOTAL_LEN)
 8002fac:	4b58      	ldr	r3, [pc, #352]	@ (8003110 <ShowWindow+0x258>)
 8002fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb2:	f113 0f05 	cmn.w	r3, #5
 8002fb6:	db0c      	blt.n	8002fd2 <ShowWindow+0x11a>
 8002fb8:	4b55      	ldr	r3, [pc, #340]	@ (8003110 <ShowWindow+0x258>)
 8002fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	dc07      	bgt.n	8002fd2 <ShowWindow+0x11a>
        d5 = buffer[windowIndex + 5];
 8002fc2:	4b53      	ldr	r3, [pc, #332]	@ (8003110 <ShowWindow+0x258>)
 8002fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc8:	1d5a      	adds	r2, r3, #5
 8002fca:	4b52      	ldr	r3, [pc, #328]	@ (8003114 <ShowWindow+0x25c>)
 8002fcc:	5c9b      	ldrb	r3, [r3, r2]
 8002fce:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

    // Złóż do 48-bitów (digit0 w [47..40], digit1 w [39..32], ...)
    // UWAGA: digit0 to LEWA, digit5 to PRAWA
    val |= ((uint64_t)d5 << 40);
 8002fd2:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fda:	657a      	str	r2, [r7, #84]	@ 0x54
 8002fdc:	f04f 0000 	mov.w	r0, #0
 8002fe0:	f04f 0100 	mov.w	r1, #0
 8002fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fe6:	0219      	lsls	r1, r3, #8
 8002fe8:	2000      	movs	r0, #0
 8002fea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fee:	ea42 0600 	orr.w	r6, r2, r0
 8002ff2:	62be      	str	r6, [r7, #40]	@ 0x28
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ff8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ffc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    val |= ((uint64_t)d4 << 32);
 8003000:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8003004:	2200      	movs	r2, #0
 8003006:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003008:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800300a:	f04f 0000 	mov.w	r0, #0
 800300e:	f04f 0100 	mov.w	r1, #0
 8003012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003014:	0019      	movs	r1, r3
 8003016:	2000      	movs	r0, #0
 8003018:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800301c:	ea42 0600 	orr.w	r6, r2, r0
 8003020:	623e      	str	r6, [r7, #32]
 8003022:	430b      	orrs	r3, r1
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
 8003026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800302a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    val |= ((uint64_t)d3 << 24);
 800302e:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8003032:	2200      	movs	r2, #0
 8003034:	643b      	str	r3, [r7, #64]	@ 0x40
 8003036:	647a      	str	r2, [r7, #68]	@ 0x44
 8003038:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800303c:	460b      	mov	r3, r1
 800303e:	0a1d      	lsrs	r5, r3, #8
 8003040:	460b      	mov	r3, r1
 8003042:	061c      	lsls	r4, r3, #24
 8003044:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003048:	ea42 0104 	orr.w	r1, r2, r4
 800304c:	61b9      	str	r1, [r7, #24]
 800304e:	432b      	orrs	r3, r5
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003056:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d2 << 16);
 800305a:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800305e:	2200      	movs	r2, #0
 8003060:	4698      	mov	r8, r3
 8003062:	4691      	mov	r9, r2
 8003064:	f04f 0000 	mov.w	r0, #0
 8003068:	f04f 0100 	mov.w	r1, #0
 800306c:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8003070:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8003074:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8003078:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800307c:	ea42 0400 	orr.w	r4, r2, r0
 8003080:	613c      	str	r4, [r7, #16]
 8003082:	430b      	orrs	r3, r1
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800308a:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d1 << 8);
 800308e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003092:	2200      	movs	r2, #0
 8003094:	469a      	mov	sl, r3
 8003096:	4693      	mov	fp, r2
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80030a4:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80030a8:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80030ac:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80030b0:	ea40 0402 	orr.w	r4, r0, r2
 80030b4:	60bc      	str	r4, [r7, #8]
 80030b6:	430b      	orrs	r3, r1
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80030be:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d0 << 0);
 80030c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80030c6:	2200      	movs	r2, #0
 80030c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030d0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80030d4:	4621      	mov	r1, r4
 80030d6:	4311      	orrs	r1, r2
 80030d8:	6039      	str	r1, [r7, #0]
 80030da:	4629      	mov	r1, r5
 80030dc:	4319      	orrs	r1, r3
 80030de:	6079      	str	r1, [r7, #4]
 80030e0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80030e4:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

    clockReg.bottomDisplay = val;
 80030e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80030f2:	4b09      	ldr	r3, [pc, #36]	@ (8003118 <ShowWindow+0x260>)
 80030f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80030f8:	4602      	mov	r2, r0
 80030fa:	f8c3 2012 	str.w	r2, [r3, #18]
 80030fe:	460a      	mov	r2, r1
 8003100:	82da      	strh	r2, [r3, #22]
   // UpdateAllDisplays(&clockReg);
}
 8003102:	bf00      	nop
 8003104:	3768      	adds	r7, #104	@ 0x68
 8003106:	46bd      	mov	sp, r7
 8003108:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	20000764 	.word	0x20000764
 8003114:	20000748 	.word	0x20000748
 8003118:	200006f0 	.word	0x200006f0

0800311c <SLIDER_Init>:

/** ---------------------------------------------------------------------------
 *  @brief Inicjuje wszystkie zmienne slidera w stan "spoczynku". */
void SLIDER_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
    isScrolling        = false;
 8003120:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <SLIDER_Init+0x48>)
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
    scrollPhase        = SCROLL_PHASE_NONE;
 8003126:	4b10      	ldr	r3, [pc, #64]	@ (8003168 <SLIDER_Init+0x4c>)
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]
    currentDirection   = SCROLL_RIGHT_TO_LEFT;
 800312c:	4b0f      	ldr	r3, [pc, #60]	@ (800316c <SLIDER_Init+0x50>)
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]
    windowIndex        = 0;
 8003132:	4b0f      	ldr	r3, [pc, #60]	@ (8003170 <SLIDER_Init+0x54>)
 8003134:	2200      	movs	r2, #0
 8003136:	801a      	strh	r2, [r3, #0]
    scrollSpeedCounter = 0;
 8003138:	4b0e      	ldr	r3, [pc, #56]	@ (8003174 <SLIDER_Init+0x58>)
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]

    doStayForever  = false;
 800313e:	4b0e      	ldr	r3, [pc, #56]	@ (8003178 <SLIDER_Init+0x5c>)
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
    doPauseThenOut = false;
 8003144:	4b0d      	ldr	r3, [pc, #52]	@ (800317c <SLIDER_Init+0x60>)
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
    pauseCounter   = 0;
 800314a:	4b0d      	ldr	r3, [pc, #52]	@ (8003180 <SLIDER_Init+0x64>)
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
    pauseTicks     = 0;
 8003150:	4b0c      	ldr	r3, [pc, #48]	@ (8003184 <SLIDER_Init+0x68>)
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]

    memset(buffer, 0, sizeof(buffer));
 8003156:	2212      	movs	r2, #18
 8003158:	2100      	movs	r1, #0
 800315a:	480b      	ldr	r0, [pc, #44]	@ (8003188 <SLIDER_Init+0x6c>)
 800315c:	f008 fce2 	bl	800bb24 <memset>
}
 8003160:	bf00      	nop
 8003162:	bd80      	pop	{r7, pc}
 8003164:	2000075a 	.word	0x2000075a
 8003168:	2000075b 	.word	0x2000075b
 800316c:	2000075c 	.word	0x2000075c
 8003170:	20000764 	.word	0x20000764
 8003174:	20000766 	.word	0x20000766
 8003178:	20000767 	.word	0x20000767
 800317c:	20000768 	.word	0x20000768
 8003180:	2000076c 	.word	0x2000076c
 8003184:	20000770 	.word	0x20000770
 8003188:	20000748 	.word	0x20000748

0800318c <SLIDER_SetStringAndStay>:

/** ---------------------------------------------------------------------------
 *  @brief Wjeżdża i zostaje na ekranie (bez fazy OUT).
 */
void SLIDER_SetStringAndStay(const char* text, ScrollDirection dir)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	70fb      	strb	r3, [r7, #3]
    if (!text) return;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d024      	beq.n	80031e8 <SLIDER_SetStringAndStay+0x5c>

    PrepareBuffer18(text);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff fe4c 	bl	8002e3c <PrepareBuffer18>

    currentDirection = dir;
 80031a4:	4a12      	ldr	r2, [pc, #72]	@ (80031f0 <SLIDER_SetStringAndStay+0x64>)
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	7013      	strb	r3, [r2, #0]
    scrollPhase      = SCROLL_PHASE_IN;
 80031aa:	4b12      	ldr	r3, [pc, #72]	@ (80031f4 <SLIDER_SetStringAndStay+0x68>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	701a      	strb	r2, [r3, #0]
    isScrolling      = true;
 80031b0:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <SLIDER_SetStringAndStay+0x6c>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]

    doStayForever    = true;
 80031b6:	4b11      	ldr	r3, [pc, #68]	@ (80031fc <SLIDER_SetStringAndStay+0x70>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
    doPauseThenOut   = false;
 80031bc:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <SLIDER_SetStringAndStay+0x74>)
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
    pauseCounter     = 0;
 80031c2:	4b10      	ldr	r3, [pc, #64]	@ (8003204 <SLIDER_SetStringAndStay+0x78>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
    pauseTicks       = 0;
 80031c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003208 <SLIDER_SetStringAndStay+0x7c>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]

    if (dir == SCROLL_RIGHT_TO_LEFT)
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d103      	bne.n	80031dc <SLIDER_SetStringAndStay+0x50>
    {
        windowIndex = 12;
 80031d4:	4b0d      	ldr	r3, [pc, #52]	@ (800320c <SLIDER_SetStringAndStay+0x80>)
 80031d6:	220c      	movs	r2, #12
 80031d8:	801a      	strh	r2, [r3, #0]
 80031da:	e002      	b.n	80031e2 <SLIDER_SetStringAndStay+0x56>
    }
    else
    {
        windowIndex = 0;
 80031dc:	4b0b      	ldr	r3, [pc, #44]	@ (800320c <SLIDER_SetStringAndStay+0x80>)
 80031de:	2200      	movs	r2, #0
 80031e0:	801a      	strh	r2, [r3, #0]
    }

    ShowWindow();
 80031e2:	f7ff fe69 	bl	8002eb8 <ShowWindow>
 80031e6:	e000      	b.n	80031ea <SLIDER_SetStringAndStay+0x5e>
    if (!text) return;
 80031e8:	bf00      	nop
}
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	2000075c 	.word	0x2000075c
 80031f4:	2000075b 	.word	0x2000075b
 80031f8:	2000075a 	.word	0x2000075a
 80031fc:	20000767 	.word	0x20000767
 8003200:	20000768 	.word	0x20000768
 8003204:	2000076c 	.word	0x2000076c
 8003208:	20000770 	.word	0x20000770
 800320c:	20000764 	.word	0x20000764

08003210 <SLIDER_SetString>:
 *  @brief Proste przewinięcie (bez fazy IN i pauzy) – tylko OUT.
 *         Załóżmy, że "startowo" cały napis jest na ekranie
 *         i jedzie na zewnątrz.
 */
void SLIDER_SetString(const char* text, ScrollDirection dir, uint32_t pauseTime)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	460b      	mov	r3, r1
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	72fb      	strb	r3, [r7, #11]
	 if (!text) return;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01d      	beq.n	8003260 <SLIDER_SetString+0x50>

	    PrepareBuffer18(text);
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f7ff fe09 	bl	8002e3c <PrepareBuffer18>

	    currentDirection = dir;
 800322a:	4a0f      	ldr	r2, [pc, #60]	@ (8003268 <SLIDER_SetString+0x58>)
 800322c:	7afb      	ldrb	r3, [r7, #11]
 800322e:	7013      	strb	r3, [r2, #0]
	    scrollPhase      = SCROLL_PHASE_PAUSE;  // Rozpoczynamy od pauzy
 8003230:	4b0e      	ldr	r3, [pc, #56]	@ (800326c <SLIDER_SetString+0x5c>)
 8003232:	2202      	movs	r2, #2
 8003234:	701a      	strb	r2, [r3, #0]
	    isScrolling      = true;
 8003236:	4b0e      	ldr	r3, [pc, #56]	@ (8003270 <SLIDER_SetString+0x60>)
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]

	    doStayForever    = false;
 800323c:	4b0d      	ldr	r3, [pc, #52]	@ (8003274 <SLIDER_SetString+0x64>)
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
	    doPauseThenOut   = true;
 8003242:	4b0d      	ldr	r3, [pc, #52]	@ (8003278 <SLIDER_SetString+0x68>)
 8003244:	2201      	movs	r2, #1
 8003246:	701a      	strb	r2, [r3, #0]
	    pauseTicks       = pauseTime;
 8003248:	4a0c      	ldr	r2, [pc, #48]	@ (800327c <SLIDER_SetString+0x6c>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6013      	str	r3, [r2, #0]
	    pauseCounter     = pauseTime;
 800324e:	4a0c      	ldr	r2, [pc, #48]	@ (8003280 <SLIDER_SetString+0x70>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6013      	str	r3, [r2, #0]

	    // Ustawienie widocznego napisu od razu
	    windowIndex = 6;  // Miejsce, gdzie napis jest w pełni widoczny
 8003254:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <SLIDER_SetString+0x74>)
 8003256:	2206      	movs	r2, #6
 8003258:	801a      	strh	r2, [r3, #0]
	    ShowWindow();
 800325a:	f7ff fe2d 	bl	8002eb8 <ShowWindow>
 800325e:	e000      	b.n	8003262 <SLIDER_SetString+0x52>
	 if (!text) return;
 8003260:	bf00      	nop
}
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	2000075c 	.word	0x2000075c
 800326c:	2000075b 	.word	0x2000075b
 8003270:	2000075a 	.word	0x2000075a
 8003274:	20000767 	.word	0x20000767
 8003278:	20000768 	.word	0x20000768
 800327c:	20000770 	.word	0x20000770
 8003280:	2000076c 	.word	0x2000076c
 8003284:	20000764 	.word	0x20000764

08003288 <SLIDER_Stop>:

/** ---------------------------------------------------------------------------
 *  @brief Zatrzymuje scrolling natychmiast.
 */
void SLIDER_Stop(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
    isScrolling = false;
 800328c:	4b0b      	ldr	r3, [pc, #44]	@ (80032bc <SLIDER_Stop+0x34>)
 800328e:	2200      	movs	r2, #0
 8003290:	701a      	strb	r2, [r3, #0]
    scrollPhase = SCROLL_PHASE_NONE;
 8003292:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <SLIDER_Stop+0x38>)
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
    windowIndex = 0;
 8003298:	4b0a      	ldr	r3, [pc, #40]	@ (80032c4 <SLIDER_Stop+0x3c>)
 800329a:	2200      	movs	r2, #0
 800329c:	801a      	strh	r2, [r3, #0]

    // Jeśli istnieje oczekujące żądanie wyświetlenia liczby, realizujemy je.
    if (displayNumberPending) {
 800329e:	4b0a      	ldr	r3, [pc, #40]	@ (80032c8 <SLIDER_Stop+0x40>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <SLIDER_Stop+0x2e>
        // Wyświetlamy zapamiętaną liczbę
        SLIDER_DisplayNumber(pendingNumberToDisplay);
 80032a6:	4b09      	ldr	r3, [pc, #36]	@ (80032cc <SLIDER_Stop+0x44>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f8f6 	bl	800349c <SLIDER_DisplayNumber>
        // Resetujemy flagę, bo żądanie zostało obsłużone
        displayNumberPending = false;
 80032b0:	4b05      	ldr	r3, [pc, #20]	@ (80032c8 <SLIDER_Stop+0x40>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
    }
}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	2000075a 	.word	0x2000075a
 80032c0:	2000075b 	.word	0x2000075b
 80032c4:	20000764 	.word	0x20000764
 80032c8:	2000075d 	.word	0x2000075d
 80032cc:	20000760 	.word	0x20000760

080032d0 <SLIDER_Update>:

/** ---------------------------------------------------------------------------
 *  @brief Główna funkcja wywoływana cyklicznie (np. co 10 ms w przerwaniu).
 */
void SLIDER_Update(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
    if (!isScrolling) return;
 80032d4:	4b60      	ldr	r3, [pc, #384]	@ (8003458 <SLIDER_Update+0x188>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	f083 0301 	eor.w	r3, r3, #1
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f040 80b5 	bne.w	800344e <SLIDER_Update+0x17e>

    // Co scrollSpeedTicks odświeżamy
    if (scrollSpeedCounter < scrollSpeedTicks)
 80032e4:	4b5d      	ldr	r3, [pc, #372]	@ (800345c <SLIDER_Update+0x18c>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2205      	movs	r2, #5
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d206      	bcs.n	80032fc <SLIDER_Update+0x2c>
    {
        scrollSpeedCounter++;
 80032ee:	4b5b      	ldr	r3, [pc, #364]	@ (800345c <SLIDER_Update+0x18c>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	3301      	adds	r3, #1
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4b59      	ldr	r3, [pc, #356]	@ (800345c <SLIDER_Update+0x18c>)
 80032f8:	701a      	strb	r2, [r3, #0]
        return;
 80032fa:	e0ab      	b.n	8003454 <SLIDER_Update+0x184>
    }
    scrollSpeedCounter = 0;
 80032fc:	4b57      	ldr	r3, [pc, #348]	@ (800345c <SLIDER_Update+0x18c>)
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]

    switch (scrollPhase)
 8003302:	4b57      	ldr	r3, [pc, #348]	@ (8003460 <SLIDER_Update+0x190>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b03      	cmp	r3, #3
 8003308:	d075      	beq.n	80033f6 <SLIDER_Update+0x126>
 800330a:	2b03      	cmp	r3, #3
 800330c:	f300 80a1 	bgt.w	8003452 <SLIDER_Update+0x182>
 8003310:	2b01      	cmp	r3, #1
 8003312:	d002      	beq.n	800331a <SLIDER_Update+0x4a>
 8003314:	2b02      	cmp	r3, #2
 8003316:	d060      	beq.n	80033da <SLIDER_Update+0x10a>
        break;
    }

    default:
        // SCROLL_PHASE_NONE => nic
        return;
 8003318:	e09b      	b.n	8003452 <SLIDER_Update+0x182>
        if (currentDirection == SCROLL_RIGHT_TO_LEFT)
 800331a:	4b52      	ldr	r3, [pc, #328]	@ (8003464 <SLIDER_Update+0x194>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d12d      	bne.n	800337e <SLIDER_Update+0xae>
            windowIndex--;
 8003322:	4b51      	ldr	r3, [pc, #324]	@ (8003468 <SLIDER_Update+0x198>)
 8003324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29b      	uxth	r3, r3
 800332e:	b21a      	sxth	r2, r3
 8003330:	4b4d      	ldr	r3, [pc, #308]	@ (8003468 <SLIDER_Update+0x198>)
 8003332:	801a      	strh	r2, [r3, #0]
            if (windowIndex == 6)
 8003334:	4b4c      	ldr	r3, [pc, #304]	@ (8003468 <SLIDER_Update+0x198>)
 8003336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800333a:	2b06      	cmp	r3, #6
 800333c:	f040 8081 	bne.w	8003442 <SLIDER_Update+0x172>
                if (doStayForever)
 8003340:	4b4a      	ldr	r3, [pc, #296]	@ (800346c <SLIDER_Update+0x19c>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d006      	beq.n	8003356 <SLIDER_Update+0x86>
                    isScrolling = false;
 8003348:	4b43      	ldr	r3, [pc, #268]	@ (8003458 <SLIDER_Update+0x188>)
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
                    scrollPhase = SCROLL_PHASE_NONE;
 800334e:	4b44      	ldr	r3, [pc, #272]	@ (8003460 <SLIDER_Update+0x190>)
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]
        break;
 8003354:	e075      	b.n	8003442 <SLIDER_Update+0x172>
                else if (doPauseThenOut && pauseTicks > 0)
 8003356:	4b46      	ldr	r3, [pc, #280]	@ (8003470 <SLIDER_Update+0x1a0>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00b      	beq.n	8003376 <SLIDER_Update+0xa6>
 800335e:	4b45      	ldr	r3, [pc, #276]	@ (8003474 <SLIDER_Update+0x1a4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <SLIDER_Update+0xa6>
                    scrollPhase = SCROLL_PHASE_PAUSE;
 8003366:	4b3e      	ldr	r3, [pc, #248]	@ (8003460 <SLIDER_Update+0x190>)
 8003368:	2202      	movs	r2, #2
 800336a:	701a      	strb	r2, [r3, #0]
                    pauseCounter = pauseTicks;
 800336c:	4b41      	ldr	r3, [pc, #260]	@ (8003474 <SLIDER_Update+0x1a4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a41      	ldr	r2, [pc, #260]	@ (8003478 <SLIDER_Update+0x1a8>)
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	e030      	b.n	80033d8 <SLIDER_Update+0x108>
                    scrollPhase = SCROLL_PHASE_OUT;
 8003376:	4b3a      	ldr	r3, [pc, #232]	@ (8003460 <SLIDER_Update+0x190>)
 8003378:	2203      	movs	r2, #3
 800337a:	701a      	strb	r2, [r3, #0]
        break;
 800337c:	e061      	b.n	8003442 <SLIDER_Update+0x172>
            windowIndex++;
 800337e:	4b3a      	ldr	r3, [pc, #232]	@ (8003468 <SLIDER_Update+0x198>)
 8003380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003384:	b29b      	uxth	r3, r3
 8003386:	3301      	adds	r3, #1
 8003388:	b29b      	uxth	r3, r3
 800338a:	b21a      	sxth	r2, r3
 800338c:	4b36      	ldr	r3, [pc, #216]	@ (8003468 <SLIDER_Update+0x198>)
 800338e:	801a      	strh	r2, [r3, #0]
            if (windowIndex == 6)
 8003390:	4b35      	ldr	r3, [pc, #212]	@ (8003468 <SLIDER_Update+0x198>)
 8003392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003396:	2b06      	cmp	r3, #6
 8003398:	d153      	bne.n	8003442 <SLIDER_Update+0x172>
                if (doStayForever)
 800339a:	4b34      	ldr	r3, [pc, #208]	@ (800346c <SLIDER_Update+0x19c>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d006      	beq.n	80033b0 <SLIDER_Update+0xe0>
                    isScrolling = false;
 80033a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003458 <SLIDER_Update+0x188>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
                    scrollPhase = SCROLL_PHASE_NONE;
 80033a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003460 <SLIDER_Update+0x190>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	701a      	strb	r2, [r3, #0]
        break;
 80033ae:	e048      	b.n	8003442 <SLIDER_Update+0x172>
                else if (doPauseThenOut && pauseTicks > 0)
 80033b0:	4b2f      	ldr	r3, [pc, #188]	@ (8003470 <SLIDER_Update+0x1a0>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00b      	beq.n	80033d0 <SLIDER_Update+0x100>
 80033b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003474 <SLIDER_Update+0x1a4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d007      	beq.n	80033d0 <SLIDER_Update+0x100>
                    scrollPhase = SCROLL_PHASE_PAUSE;
 80033c0:	4b27      	ldr	r3, [pc, #156]	@ (8003460 <SLIDER_Update+0x190>)
 80033c2:	2202      	movs	r2, #2
 80033c4:	701a      	strb	r2, [r3, #0]
                    pauseCounter = pauseTicks;
 80033c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003474 <SLIDER_Update+0x1a4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003478 <SLIDER_Update+0x1a8>)
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e003      	b.n	80033d8 <SLIDER_Update+0x108>
                    scrollPhase = SCROLL_PHASE_OUT;
 80033d0:	4b23      	ldr	r3, [pc, #140]	@ (8003460 <SLIDER_Update+0x190>)
 80033d2:	2203      	movs	r2, #3
 80033d4:	701a      	strb	r2, [r3, #0]
        break;
 80033d6:	e034      	b.n	8003442 <SLIDER_Update+0x172>
 80033d8:	e033      	b.n	8003442 <SLIDER_Update+0x172>
        if (pauseCounter > 0)
 80033da:	4b27      	ldr	r3, [pc, #156]	@ (8003478 <SLIDER_Update+0x1a8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <SLIDER_Update+0x11e>
            pauseCounter--;
 80033e2:	4b25      	ldr	r3, [pc, #148]	@ (8003478 <SLIDER_Update+0x1a8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	4a23      	ldr	r2, [pc, #140]	@ (8003478 <SLIDER_Update+0x1a8>)
 80033ea:	6013      	str	r3, [r2, #0]
        break;
 80033ec:	e02c      	b.n	8003448 <SLIDER_Update+0x178>
            scrollPhase = SCROLL_PHASE_OUT;
 80033ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003460 <SLIDER_Update+0x190>)
 80033f0:	2203      	movs	r2, #3
 80033f2:	701a      	strb	r2, [r3, #0]
        break;
 80033f4:	e028      	b.n	8003448 <SLIDER_Update+0x178>
        if (currentDirection == SCROLL_RIGHT_TO_LEFT)
 80033f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003464 <SLIDER_Update+0x194>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d110      	bne.n	8003420 <SLIDER_Update+0x150>
            windowIndex--;
 80033fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003468 <SLIDER_Update+0x198>)
 8003400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29b      	uxth	r3, r3
 800340a:	b21a      	sxth	r2, r3
 800340c:	4b16      	ldr	r3, [pc, #88]	@ (8003468 <SLIDER_Update+0x198>)
 800340e:	801a      	strh	r2, [r3, #0]
            if (windowIndex < 0)
 8003410:	4b15      	ldr	r3, [pc, #84]	@ (8003468 <SLIDER_Update+0x198>)
 8003412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003416:	2b00      	cmp	r3, #0
 8003418:	da15      	bge.n	8003446 <SLIDER_Update+0x176>
                SLIDER_Stop();
 800341a:	f7ff ff35 	bl	8003288 <SLIDER_Stop>
        break;
 800341e:	e012      	b.n	8003446 <SLIDER_Update+0x176>
            windowIndex++;
 8003420:	4b11      	ldr	r3, [pc, #68]	@ (8003468 <SLIDER_Update+0x198>)
 8003422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003426:	b29b      	uxth	r3, r3
 8003428:	3301      	adds	r3, #1
 800342a:	b29b      	uxth	r3, r3
 800342c:	b21a      	sxth	r2, r3
 800342e:	4b0e      	ldr	r3, [pc, #56]	@ (8003468 <SLIDER_Update+0x198>)
 8003430:	801a      	strh	r2, [r3, #0]
            if (windowIndex > 12)
 8003432:	4b0d      	ldr	r3, [pc, #52]	@ (8003468 <SLIDER_Update+0x198>)
 8003434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003438:	2b0c      	cmp	r3, #12
 800343a:	dd04      	ble.n	8003446 <SLIDER_Update+0x176>
                SLIDER_Stop();
 800343c:	f7ff ff24 	bl	8003288 <SLIDER_Stop>
        break;
 8003440:	e001      	b.n	8003446 <SLIDER_Update+0x176>
        break;
 8003442:	bf00      	nop
 8003444:	e000      	b.n	8003448 <SLIDER_Update+0x178>
        break;
 8003446:	bf00      	nop
    }

    // Po zmianie windowIndex – odśwież wyświetlacz
    ShowWindow();
 8003448:	f7ff fd36 	bl	8002eb8 <ShowWindow>
 800344c:	e002      	b.n	8003454 <SLIDER_Update+0x184>
    if (!isScrolling) return;
 800344e:	bf00      	nop
 8003450:	e000      	b.n	8003454 <SLIDER_Update+0x184>
        return;
 8003452:	bf00      	nop
}
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	2000075a 	.word	0x2000075a
 800345c:	20000766 	.word	0x20000766
 8003460:	2000075b 	.word	0x2000075b
 8003464:	2000075c 	.word	0x2000075c
 8003468:	20000764 	.word	0x20000764
 800346c:	20000767 	.word	0x20000767
 8003470:	20000768 	.word	0x20000768
 8003474:	20000770 	.word	0x20000770
 8003478:	2000076c 	.word	0x2000076c

0800347c <SLIDER_IsStopped>:
bool SLIDER_IsStopped(void) {
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
    return (scrollPhase == SCROLL_PHASE_NONE);
 8003480:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <SLIDER_IsStopped+0x1c>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
}
 800348e:	4618      	mov	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	2000075b 	.word	0x2000075b

0800349c <SLIDER_DisplayNumber>:



void SLIDER_DisplayNumber(uint32_t number)
{
 800349c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a0:	b09f      	sub	sp, #124	@ 0x7c
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	65f8      	str	r0, [r7, #92]	@ 0x5c
    // Jeżeli slider nie jest zatrzymany, zapamiętaj żądanie i wyjdź
    if (!SLIDER_IsStopped()) {
 80034a6:	f7ff ffe9 	bl	800347c <SLIDER_IsStopped>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f083 0301 	eor.w	r3, r3, #1
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <SLIDER_DisplayNumber+0x30>
        displayNumberPending = true;
 80034b6:	4b7a      	ldr	r3, [pc, #488]	@ (80036a0 <SLIDER_DisplayNumber+0x204>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	701a      	strb	r2, [r3, #0]
        pendingNumberToDisplay = (number > 999999) ? 999999 : number;
 80034bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034be:	4a79      	ldr	r2, [pc, #484]	@ (80036a4 <SLIDER_DisplayNumber+0x208>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	bf28      	it	cs
 80034c4:	4613      	movcs	r3, r2
 80034c6:	4a78      	ldr	r2, [pc, #480]	@ (80036a8 <SLIDER_DisplayNumber+0x20c>)
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e0e4      	b.n	8003696 <SLIDER_DisplayNumber+0x1fa>
    }

    // Slider jest zatrzymany – wyświetlamy liczbę od razu

    // Ograniczamy liczbę do maksimum 999999
    if (number > 999999)
 80034cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80034ce:	4b75      	ldr	r3, [pc, #468]	@ (80036a4 <SLIDER_DisplayNumber+0x208>)
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d901      	bls.n	80034d8 <SLIDER_DisplayNumber+0x3c>
        number = 999999;
 80034d4:	4b73      	ldr	r3, [pc, #460]	@ (80036a4 <SLIDER_DisplayNumber+0x208>)
 80034d6:	65fb      	str	r3, [r7, #92]	@ 0x5c

    uint8_t digits[6];

    // Inicjujemy wszystkie cyfry jako puste (segment odpowiadający spacji)
    for (int i = 0; i < 6; i++) {
 80034d8:	2300      	movs	r3, #0
 80034da:	677b      	str	r3, [r7, #116]	@ 0x74
 80034dc:	e00d      	b.n	80034fa <SLIDER_DisplayNumber+0x5e>
        digits[i] = charToSegment(' ');
 80034de:	2020      	movs	r0, #32
 80034e0:	f7fd faac 	bl	8000a3c <charToSegment>
 80034e4:	4603      	mov	r3, r0
 80034e6:	4619      	mov	r1, r3
 80034e8:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80034ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ee:	441a      	add	r2, r3
 80034f0:	460b      	mov	r3, r1
 80034f2:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < 6; i++) {
 80034f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034f6:	3301      	adds	r3, #1
 80034f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80034fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034fc:	2b05      	cmp	r3, #5
 80034fe:	ddee      	ble.n	80034de <SLIDER_DisplayNumber+0x42>
    }

    // Zamieniamy liczbę na cyfry od końca
    for (int i = 5; i >= 0; i--) {
 8003500:	2305      	movs	r3, #5
 8003502:	673b      	str	r3, [r7, #112]	@ 0x70
 8003504:	e020      	b.n	8003548 <SLIDER_DisplayNumber+0xac>
        digits[i] = charToSegment('0' + (number % 10));
 8003506:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003508:	4b68      	ldr	r3, [pc, #416]	@ (80036ac <SLIDER_DisplayNumber+0x210>)
 800350a:	fba3 2301 	umull	r2, r3, r3, r1
 800350e:	08da      	lsrs	r2, r3, #3
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	1aca      	subs	r2, r1, r3
 800351a:	b2d3      	uxtb	r3, r2
 800351c:	3330      	adds	r3, #48	@ 0x30
 800351e:	b2db      	uxtb	r3, r3
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd fa8b 	bl	8000a3c <charToSegment>
 8003526:	4603      	mov	r3, r0
 8003528:	4619      	mov	r1, r3
 800352a:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800352e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003530:	441a      	add	r2, r3
 8003532:	460b      	mov	r3, r1
 8003534:	7013      	strb	r3, [r2, #0]
        number /= 10;
 8003536:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003538:	4b5c      	ldr	r3, [pc, #368]	@ (80036ac <SLIDER_DisplayNumber+0x210>)
 800353a:	fba3 2302 	umull	r2, r3, r3, r2
 800353e:	08db      	lsrs	r3, r3, #3
 8003540:	65fb      	str	r3, [r7, #92]	@ 0x5c
    for (int i = 5; i >= 0; i--) {
 8003542:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003544:	3b01      	subs	r3, #1
 8003546:	673b      	str	r3, [r7, #112]	@ 0x70
 8003548:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800354a:	2b00      	cmp	r3, #0
 800354c:	dadb      	bge.n	8003506 <SLIDER_DisplayNumber+0x6a>
    }

    // Składamy 6 cyfr do 48-bitowej wartości
    uint64_t displayVal = 0ULL;
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[5] << 40);
 800355a:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2200      	movs	r2, #0
 8003562:	653b      	str	r3, [r7, #80]	@ 0x50
 8003564:	657a      	str	r2, [r7, #84]	@ 0x54
 8003566:	f04f 0000 	mov.w	r0, #0
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003570:	0219      	lsls	r1, r3, #8
 8003572:	2000      	movs	r0, #0
 8003574:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003578:	ea42 0600 	orr.w	r6, r2, r0
 800357c:	62be      	str	r6, [r7, #40]	@ 0x28
 800357e:	430b      	orrs	r3, r1
 8003580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003582:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003586:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[4] << 32);
 800358a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2200      	movs	r2, #0
 8003592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003594:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003596:	f04f 0000 	mov.w	r0, #0
 800359a:	f04f 0100 	mov.w	r1, #0
 800359e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035a0:	0019      	movs	r1, r3
 80035a2:	2000      	movs	r0, #0
 80035a4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80035a8:	ea42 0600 	orr.w	r6, r2, r0
 80035ac:	623e      	str	r6, [r7, #32]
 80035ae:	430b      	orrs	r3, r1
 80035b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035b6:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[3] << 24);
 80035ba:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2200      	movs	r2, #0
 80035c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80035c4:	647a      	str	r2, [r7, #68]	@ 0x44
 80035c6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80035ca:	460b      	mov	r3, r1
 80035cc:	0a1d      	lsrs	r5, r3, #8
 80035ce:	460b      	mov	r3, r1
 80035d0:	061c      	lsls	r4, r3, #24
 80035d2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80035d6:	ea42 0104 	orr.w	r1, r2, r4
 80035da:	61b9      	str	r1, [r7, #24]
 80035dc:	432b      	orrs	r3, r5
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80035e4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[2] << 16);
 80035e8:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2200      	movs	r2, #0
 80035f0:	4698      	mov	r8, r3
 80035f2:	4691      	mov	r9, r2
 80035f4:	f04f 0000 	mov.w	r0, #0
 80035f8:	f04f 0100 	mov.w	r1, #0
 80035fc:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8003600:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8003604:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8003608:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800360c:	ea42 0400 	orr.w	r4, r2, r0
 8003610:	613c      	str	r4, [r7, #16]
 8003612:	430b      	orrs	r3, r1
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800361a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[1] << 8);
 800361e:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2200      	movs	r2, #0
 8003626:	469a      	mov	sl, r3
 8003628:	4693      	mov	fp, r2
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003636:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800363a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800363e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003642:	ea40 0402 	orr.w	r4, r0, r2
 8003646:	60bc      	str	r4, [r7, #8]
 8003648:	430b      	orrs	r3, r1
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003650:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[0] << 0);
 8003654:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2200      	movs	r2, #0
 800365c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800365e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003660:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003664:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003668:	4621      	mov	r1, r4
 800366a:	4311      	orrs	r1, r2
 800366c:	6039      	str	r1, [r7, #0]
 800366e:	4629      	mov	r1, r5
 8003670:	4319      	orrs	r1, r3
 8003672:	6079      	str	r1, [r7, #4]
 8003674:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003678:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68





    clockReg.bottomDisplay = displayVal;
 800367c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003680:	633a      	str	r2, [r7, #48]	@ 0x30
 8003682:	b29b      	uxth	r3, r3
 8003684:	637b      	str	r3, [r7, #52]	@ 0x34
 8003686:	4b0a      	ldr	r3, [pc, #40]	@ (80036b0 <SLIDER_DisplayNumber+0x214>)
 8003688:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800368c:	4602      	mov	r2, r0
 800368e:	f8c3 2012 	str.w	r2, [r3, #18]
 8003692:	460a      	mov	r2, r1
 8003694:	82da      	strh	r2, [r3, #22]
    //UpdateAllDisplays(&clockReg);
}
 8003696:	377c      	adds	r7, #124	@ 0x7c
 8003698:	46bd      	mov	sp, r7
 800369a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800369e:	bf00      	nop
 80036a0:	2000075d 	.word	0x2000075d
 80036a4:	000f423f 	.word	0x000f423f
 80036a8:	20000760 	.word	0x20000760
 80036ac:	cccccccd 	.word	0xcccccccd
 80036b0:	200006f0 	.word	0x200006f0

080036b4 <SLIDER_DisplayTemperature>:

void SLIDER_DisplayTemperature(int32_t temperature)
{
 80036b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b8:	b0a3      	sub	sp, #140	@ 0x8c
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6678      	str	r0, [r7, #100]	@ 0x64
    // Jeżeli slider nie jest zatrzymany, zapamiętaj żądanie i wyjdź
    if (!SLIDER_IsStopped()) {
 80036be:	f7ff fedd 	bl	800347c <SLIDER_IsStopped>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f083 0301 	eor.w	r3, r3, #1
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01a      	beq.n	8003704 <SLIDER_DisplayTemperature+0x50>
        displayNumberPending = true;
 80036ce:	4bb9      	ldr	r3, [pc, #740]	@ (80039b4 <SLIDER_DisplayTemperature+0x300>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	701a      	strb	r2, [r3, #0]
        // Ograniczamy temperaturę do zakresu -99999 do 99999
        if (temperature > 99999) {
 80036d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036d6:	4ab8      	ldr	r2, [pc, #736]	@ (80039b8 <SLIDER_DisplayTemperature+0x304>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	dd03      	ble.n	80036e4 <SLIDER_DisplayTemperature+0x30>
            pendingNumberToDisplay = 99999;
 80036dc:	4bb7      	ldr	r3, [pc, #732]	@ (80039bc <SLIDER_DisplayTemperature+0x308>)
 80036de:	4ab6      	ldr	r2, [pc, #728]	@ (80039b8 <SLIDER_DisplayTemperature+0x304>)
 80036e0:	601a      	str	r2, [r3, #0]
        } else if (temperature < -99999) {
            pendingNumberToDisplay = 99999; // Można dodać osobną zmienną dla znaku minus
        } else {
            pendingNumberToDisplay = (temperature < 0) ? (uint32_t)(-temperature) : (uint32_t)temperature;
        }
        return;
 80036e2:	e163      	b.n	80039ac <SLIDER_DisplayTemperature+0x2f8>
        } else if (temperature < -99999) {
 80036e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036e6:	4ab6      	ldr	r2, [pc, #728]	@ (80039c0 <SLIDER_DisplayTemperature+0x30c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	da03      	bge.n	80036f4 <SLIDER_DisplayTemperature+0x40>
            pendingNumberToDisplay = 99999; // Można dodać osobną zmienną dla znaku minus
 80036ec:	4bb3      	ldr	r3, [pc, #716]	@ (80039bc <SLIDER_DisplayTemperature+0x308>)
 80036ee:	4ab2      	ldr	r2, [pc, #712]	@ (80039b8 <SLIDER_DisplayTemperature+0x304>)
 80036f0:	601a      	str	r2, [r3, #0]
        return;
 80036f2:	e15b      	b.n	80039ac <SLIDER_DisplayTemperature+0x2f8>
            pendingNumberToDisplay = (temperature < 0) ? (uint32_t)(-temperature) : (uint32_t)temperature;
 80036f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bfb8      	it	lt
 80036fa:	425b      	neglt	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	4baf      	ldr	r3, [pc, #700]	@ (80039bc <SLIDER_DisplayTemperature+0x308>)
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e153      	b.n	80039ac <SLIDER_DisplayTemperature+0x2f8>
    }

    // Slider jest zatrzymany – wyświetlamy temperaturę od razu

    // Ograniczamy temperaturę do zakresu -99999 do 99999
    if (temperature > 99999)
 8003704:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003706:	4bac      	ldr	r3, [pc, #688]	@ (80039b8 <SLIDER_DisplayTemperature+0x304>)
 8003708:	429a      	cmp	r2, r3
 800370a:	dd02      	ble.n	8003712 <SLIDER_DisplayTemperature+0x5e>
        temperature = 99999;
 800370c:	4baa      	ldr	r3, [pc, #680]	@ (80039b8 <SLIDER_DisplayTemperature+0x304>)
 800370e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003710:	e005      	b.n	800371e <SLIDER_DisplayTemperature+0x6a>
    else if (temperature < -99999)
 8003712:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003714:	4baa      	ldr	r3, [pc, #680]	@ (80039c0 <SLIDER_DisplayTemperature+0x30c>)
 8003716:	429a      	cmp	r2, r3
 8003718:	da01      	bge.n	800371e <SLIDER_DisplayTemperature+0x6a>
        temperature = -99999;
 800371a:	4ba9      	ldr	r3, [pc, #676]	@ (80039c0 <SLIDER_DisplayTemperature+0x30c>)
 800371c:	667b      	str	r3, [r7, #100]	@ 0x64

    uint8_t digits[6];

    // Inicjujemy wszystkie cyfry jako puste (segment odpowiadający spacji)
    for (int i = 0; i < 6; i++) {
 800371e:	2300      	movs	r3, #0
 8003720:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003724:	e010      	b.n	8003748 <SLIDER_DisplayTemperature+0x94>
        digits[i] = charToSegment(' ');
 8003726:	2020      	movs	r0, #32
 8003728:	f7fd f988 	bl	8000a3c <charToSegment>
 800372c:	4603      	mov	r3, r0
 800372e:	4619      	mov	r1, r3
 8003730:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8003734:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003738:	441a      	add	r2, r3
 800373a:	460b      	mov	r3, r1
 800373c:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < 6; i++) {
 800373e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003742:	3301      	adds	r3, #1
 8003744:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003748:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800374c:	2b05      	cmp	r3, #5
 800374e:	ddea      	ble.n	8003726 <SLIDER_DisplayTemperature+0x72>
    }

    bool isNegative = false;
 8003750:	2300      	movs	r3, #0
 8003752:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
    if (temperature < 0) {
 8003756:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003758:	2b00      	cmp	r3, #0
 800375a:	da05      	bge.n	8003768 <SLIDER_DisplayTemperature+0xb4>
        isNegative = true;
 800375c:	2301      	movs	r3, #1
 800375e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
        temperature = -temperature;
 8003762:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003764:	425b      	negs	r3, r3
 8003766:	667b      	str	r3, [r7, #100]	@ 0x64
    }

    // Przypisujemy symbole 'C' i '°' w zależności od warunków
    if (isNegative && temperature >= 10000) {
 8003768:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00b      	beq.n	8003788 <SLIDER_DisplayTemperature+0xd4>
 8003770:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003772:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003776:	429a      	cmp	r2, r3
 8003778:	dd06      	ble.n	8003788 <SLIDER_DisplayTemperature+0xd4>
        // Dla ujemnych wartości z 5 cyframi, wyświetlamy tylko '°'
        //digits[5] = charToSegment(' '); // Brak 'C'
        digits[5] = charToSegment('*'); // Symbol stopnia
 800377a:	202a      	movs	r0, #42	@ 0x2a
 800377c:	f7fd f95e 	bl	8000a3c <charToSegment>
 8003780:	4603      	mov	r3, r0
 8003782:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8003786:	e00b      	b.n	80037a0 <SLIDER_DisplayTemperature+0xec>

    } else {
        // Dla dodatnich lub ujemnych wartości z mniej niż 5 cyframi, wyświetlamy '°C'
        digits[5] = charToSegment('C'); // Litera 'C'
 8003788:	2043      	movs	r0, #67	@ 0x43
 800378a:	f7fd f957 	bl	8000a3c <charToSegment>
 800378e:	4603      	mov	r3, r0
 8003790:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
        digits[4] = charToSegment('*'); // Symbol stopnia
 8003794:	202a      	movs	r0, #42	@ 0x2a
 8003796:	f7fd f951 	bl	8000a3c <charToSegment>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
    }

    // Wypełniamy cyfry od prawej strony, zaczynając od indeksu 3
    int digitPos = 3;
 80037a0:	2303      	movs	r3, #3
 80037a2:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 4; i++) {
 80037a4:	2300      	movs	r3, #0
 80037a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80037a8:	e044      	b.n	8003834 <SLIDER_DisplayTemperature+0x180>
        if (temperature > 0 || i > 0) { // Zapobiega wstawianiu '0' na początku
 80037aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	dc02      	bgt.n	80037b6 <SLIDER_DisplayTemperature+0x102>
 80037b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	dd25      	ble.n	8003802 <SLIDER_DisplayTemperature+0x14e>
            digits[digitPos - i] = charToSegment('0' + (temperature % 10));
 80037b6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80037b8:	4b82      	ldr	r3, [pc, #520]	@ (80039c4 <SLIDER_DisplayTemperature+0x310>)
 80037ba:	fb83 2301 	smull	r2, r3, r3, r1
 80037be:	109a      	asrs	r2, r3, #2
 80037c0:	17cb      	asrs	r3, r1, #31
 80037c2:	1ad2      	subs	r2, r2, r3
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	1aca      	subs	r2, r1, r3
 80037ce:	b2d3      	uxtb	r3, r2
 80037d0:	3330      	adds	r3, #48	@ 0x30
 80037d2:	b2d9      	uxtb	r1, r3
 80037d4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80037d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037d8:	1ad4      	subs	r4, r2, r3
 80037da:	4608      	mov	r0, r1
 80037dc:	f7fd f92e 	bl	8000a3c <charToSegment>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 80037e6:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80037ea:	440a      	add	r2, r1
 80037ec:	f802 3c20 	strb.w	r3, [r2, #-32]
            temperature /= 10;
 80037f0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80037f2:	4b74      	ldr	r3, [pc, #464]	@ (80039c4 <SLIDER_DisplayTemperature+0x310>)
 80037f4:	fb83 2301 	smull	r2, r3, r3, r1
 80037f8:	109a      	asrs	r2, r3, #2
 80037fa:	17cb      	asrs	r3, r1, #31
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8003800:	e015      	b.n	800382e <SLIDER_DisplayTemperature+0x17a>
        } else {
            digits[digitPos - i] = charToSegment('0');
 8003802:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003804:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003806:	1ad4      	subs	r4, r2, r3
 8003808:	2030      	movs	r0, #48	@ 0x30
 800380a:	f7fd f917 	bl	8000a3c <charToSegment>
 800380e:	4603      	mov	r3, r0
 8003810:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8003814:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8003818:	440a      	add	r2, r1
 800381a:	f802 3c20 	strb.w	r3, [r2, #-32]
            temperature /= 10;
 800381e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003820:	4b68      	ldr	r3, [pc, #416]	@ (80039c4 <SLIDER_DisplayTemperature+0x310>)
 8003822:	fb83 2301 	smull	r2, r3, r3, r1
 8003826:	109a      	asrs	r2, r3, #2
 8003828:	17cb      	asrs	r3, r1, #31
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	667b      	str	r3, [r7, #100]	@ 0x64
    for (int i = 0; i < 4; i++) {
 800382e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003830:	3301      	adds	r3, #1
 8003832:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003834:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003836:	2b03      	cmp	r3, #3
 8003838:	ddb7      	ble.n	80037aa <SLIDER_DisplayTemperature+0xf6>
        }
    }

    // Jeśli temperatura jest ujemna, ustawiamy znak minus
    if (isNegative) {
 800383a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <SLIDER_DisplayTemperature+0x19a>
        digits[0] = charToSegment('-');
 8003842:	202d      	movs	r0, #45	@ 0x2d
 8003844:	f7fd f8fa 	bl	8000a3c <charToSegment>
 8003848:	4603      	mov	r3, r0
 800384a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
    }

    // Składamy 6 cyfr do 48-bitowej wartości
    uint64_t displayVal = 0ULL;
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[5] << 40);
 800385a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2200      	movs	r2, #0
 8003862:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003864:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003866:	f04f 0000 	mov.w	r0, #0
 800386a:	f04f 0100 	mov.w	r1, #0
 800386e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003870:	0219      	lsls	r1, r3, #8
 8003872:	2000      	movs	r0, #0
 8003874:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003878:	ea42 0400 	orr.w	r4, r2, r0
 800387c:	633c      	str	r4, [r7, #48]	@ 0x30
 800387e:	430b      	orrs	r3, r1
 8003880:	637b      	str	r3, [r7, #52]	@ 0x34
 8003882:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003886:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[4] << 32);
 800388a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2200      	movs	r2, #0
 8003892:	653b      	str	r3, [r7, #80]	@ 0x50
 8003894:	657a      	str	r2, [r7, #84]	@ 0x54
 8003896:	f04f 0000 	mov.w	r0, #0
 800389a:	f04f 0100 	mov.w	r1, #0
 800389e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038a0:	0019      	movs	r1, r3
 80038a2:	2000      	movs	r0, #0
 80038a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80038a8:	ea42 0400 	orr.w	r4, r2, r0
 80038ac:	62bc      	str	r4, [r7, #40]	@ 0x28
 80038ae:	430b      	orrs	r3, r1
 80038b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038b2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80038b6:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[3] << 24);
 80038ba:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2200      	movs	r2, #0
 80038c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038c4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80038c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80038ca:	460b      	mov	r3, r1
 80038cc:	ea4f 2913 	mov.w	r9, r3, lsr #8
 80038d0:	460b      	mov	r3, r1
 80038d2:	ea4f 6803 	mov.w	r8, r3, lsl #24
 80038d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80038da:	ea42 0108 	orr.w	r1, r2, r8
 80038de:	6239      	str	r1, [r7, #32]
 80038e0:	ea43 0309 	orr.w	r3, r3, r9
 80038e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80038ea:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[2] << 16);
 80038ee:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2200      	movs	r2, #0
 80038f6:	469a      	mov	sl, r3
 80038f8:	4693      	mov	fp, r2
 80038fa:	f04f 0000 	mov.w	r0, #0
 80038fe:	f04f 0100 	mov.w	r1, #0
 8003902:	ea4f 410b 	mov.w	r1, fp, lsl #16
 8003906:	ea41 411a 	orr.w	r1, r1, sl, lsr #16
 800390a:	ea4f 400a 	mov.w	r0, sl, lsl #16
 800390e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003912:	ea42 0400 	orr.w	r4, r2, r0
 8003916:	61bc      	str	r4, [r7, #24]
 8003918:	430b      	orrs	r3, r1
 800391a:	61fb      	str	r3, [r7, #28]
 800391c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003920:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[1] << 8);
 8003924:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2200      	movs	r2, #0
 800392c:	461d      	mov	r5, r3
 800392e:	4616      	mov	r6, r2
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	0233      	lsls	r3, r6, #8
 800393a:	ea43 6315 	orr.w	r3, r3, r5, lsr #24
 800393e:	022a      	lsls	r2, r5, #8
 8003940:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003944:	ea40 0402 	orr.w	r4, r0, r2
 8003948:	613c      	str	r4, [r7, #16]
 800394a:	430b      	orrs	r3, r1
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003952:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[0] << 0);
 8003956:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2200      	movs	r2, #0
 800395e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003960:	647a      	str	r2, [r7, #68]	@ 0x44
 8003962:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003966:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800396a:	4621      	mov	r1, r4
 800396c:	4311      	orrs	r1, r2
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	4629      	mov	r1, r5
 8003972:	4319      	orrs	r1, r3
 8003974:	60f9      	str	r1, [r7, #12]
 8003976:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800397a:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    displayVal |= ((uint64_t)0b10000000 << 8); // Kropka dziesiętna na digit[1]
 800397e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003982:	f442 4100 	orr.w	r1, r2, #32768	@ 0x8000
 8003986:	6039      	str	r1, [r7, #0]
 8003988:	607b      	str	r3, [r7, #4]
 800398a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800398e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70



    // Ustawiamy wartość wyświetlacza i aktualizujemy wyświetlacze
    clockReg.bottomDisplay = displayVal;
 8003992:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003996:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003998:	b29b      	uxth	r3, r3
 800399a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800399c:	4b0a      	ldr	r3, [pc, #40]	@ (80039c8 <SLIDER_DisplayTemperature+0x314>)
 800399e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80039a2:	4602      	mov	r2, r0
 80039a4:	f8c3 2012 	str.w	r2, [r3, #18]
 80039a8:	460a      	mov	r2, r1
 80039aa:	82da      	strh	r2, [r3, #22]
    //UpdateAllDisplays(&clockReg);
}
 80039ac:	378c      	adds	r7, #140	@ 0x8c
 80039ae:	46bd      	mov	sp, r7
 80039b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039b4:	2000075d 	.word	0x2000075d
 80039b8:	0001869f 	.word	0x0001869f
 80039bc:	20000760 	.word	0x20000760
 80039c0:	fffe7961 	.word	0xfffe7961
 80039c4:	66666667 	.word	0x66666667
 80039c8:	200006f0 	.word	0x200006f0

080039cc <SLIDER_DisplayHumidity>:
    clockReg.bottomDisplay = displayVal;
    //UpdateAllDisplays(&clockReg);
}

void SLIDER_DisplayHumidity(uint32_t humidity)
{
 80039cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d0:	b0a3      	sub	sp, #140	@ 0x8c
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6678      	str	r0, [r7, #100]	@ 0x64
    // Jeżeli slider nie jest zatrzymany, zapamiętaj żądanie i wyjdź
    if (!SLIDER_IsStopped()) {
 80039d6:	f7ff fd51 	bl	800347c <SLIDER_IsStopped>
 80039da:	4603      	mov	r3, r0
 80039dc:	f083 0301 	eor.w	r3, r3, #1
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00e      	beq.n	8003a04 <SLIDER_DisplayHumidity+0x38>
        displayNumberPending = true;
 80039e6:	4b9d      	ldr	r3, [pc, #628]	@ (8003c5c <SLIDER_DisplayHumidity+0x290>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]
        // Ograniczamy wilgotność do zakresu 0 do 999999
        if (humidity > 999999) {
 80039ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039ee:	4a9c      	ldr	r2, [pc, #624]	@ (8003c60 <SLIDER_DisplayHumidity+0x294>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d903      	bls.n	80039fc <SLIDER_DisplayHumidity+0x30>
            pendingNumberToDisplay = 999999;
 80039f4:	4b9b      	ldr	r3, [pc, #620]	@ (8003c64 <SLIDER_DisplayHumidity+0x298>)
 80039f6:	4a9a      	ldr	r2, [pc, #616]	@ (8003c60 <SLIDER_DisplayHumidity+0x294>)
 80039f8:	601a      	str	r2, [r3, #0]
        } else {
            pendingNumberToDisplay = humidity;
        }
        return;
 80039fa:	e12b      	b.n	8003c54 <SLIDER_DisplayHumidity+0x288>
            pendingNumberToDisplay = humidity;
 80039fc:	4a99      	ldr	r2, [pc, #612]	@ (8003c64 <SLIDER_DisplayHumidity+0x298>)
 80039fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e127      	b.n	8003c54 <SLIDER_DisplayHumidity+0x288>
    }

    // Slider jest zatrzymany – wyświetlamy wilgotność od razu

    // Ograniczamy wilgotność do zakresu 0 do 999999
    if (humidity > 999999)
 8003a04:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a06:	4b96      	ldr	r3, [pc, #600]	@ (8003c60 <SLIDER_DisplayHumidity+0x294>)
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d901      	bls.n	8003a10 <SLIDER_DisplayHumidity+0x44>
        humidity = 999999;
 8003a0c:	4b94      	ldr	r3, [pc, #592]	@ (8003c60 <SLIDER_DisplayHumidity+0x294>)
 8003a0e:	667b      	str	r3, [r7, #100]	@ 0x64

    uint8_t digits[6];

    // Inicjujemy wszystkie cyfry jako puste (segment odpowiadający spacji)
    for (int i = 0; i < 6; i++) {
 8003a10:	2300      	movs	r3, #0
 8003a12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a16:	e010      	b.n	8003a3a <SLIDER_DisplayHumidity+0x6e>
        digits[i] = charToSegment(' ');
 8003a18:	2020      	movs	r0, #32
 8003a1a:	f7fd f80f 	bl	8000a3c <charToSegment>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	4619      	mov	r1, r3
 8003a22:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8003a26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a2a:	441a      	add	r2, r3
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < 6; i++) {
 8003a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a34:	3301      	adds	r3, #1
 8003a36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a3e:	2b05      	cmp	r3, #5
 8003a40:	ddea      	ble.n	8003a18 <SLIDER_DisplayHumidity+0x4c>
    }

    // Przypisujemy litery 'R' i 'H' na ostatnich dwóch pozycjach
    digits[5] = charToSegment('h'); // Litera 'H'
 8003a42:	2068      	movs	r0, #104	@ 0x68
 8003a44:	f7fc fffa 	bl	8000a3c <charToSegment>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
    digits[4] = charToSegment('R'); // Litera 'R'
 8003a4e:	2052      	movs	r0, #82	@ 0x52
 8003a50:	f7fc fff4 	bl	8000a3c <charToSegment>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c

    // Wypełniamy cyfry wilgotności od prawej strony, zaczynając od indeksu 3
    int digitPos = 3;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for (int i = 0; i < 4; i++) { // Cztery cyfry dla wilgotności (0-9999)
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a64:	e043      	b.n	8003aee <SLIDER_DisplayHumidity+0x122>
        if (humidity > 0 || i > 0) { // Zapobiega wstawianiu '0' na początku
 8003a66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d103      	bne.n	8003a74 <SLIDER_DisplayHumidity+0xa8>
 8003a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	dd22      	ble.n	8003aba <SLIDER_DisplayHumidity+0xee>
            digits[digitPos - i] = charToSegment('0' + (humidity % 10));
 8003a74:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003a76:	4b7c      	ldr	r3, [pc, #496]	@ (8003c68 <SLIDER_DisplayHumidity+0x29c>)
 8003a78:	fba3 2301 	umull	r2, r3, r3, r1
 8003a7c:	08da      	lsrs	r2, r3, #3
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	1aca      	subs	r2, r1, r3
 8003a88:	b2d3      	uxtb	r3, r2
 8003a8a:	3330      	adds	r3, #48	@ 0x30
 8003a8c:	b2d9      	uxtb	r1, r3
 8003a8e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a94:	1ad4      	subs	r4, r2, r3
 8003a96:	4608      	mov	r0, r1
 8003a98:	f7fc ffd0 	bl	8000a3c <charToSegment>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8003aa2:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8003aa6:	440a      	add	r2, r1
 8003aa8:	f802 3c20 	strb.w	r3, [r2, #-32]
            humidity /= 10;
 8003aac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003aae:	4b6e      	ldr	r3, [pc, #440]	@ (8003c68 <SLIDER_DisplayHumidity+0x29c>)
 8003ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ab4:	08db      	lsrs	r3, r3, #3
 8003ab6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ab8:	e014      	b.n	8003ae4 <SLIDER_DisplayHumidity+0x118>
        } else {
            digits[digitPos - i] = charToSegment('0');
 8003aba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003abc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ac0:	1ad4      	subs	r4, r2, r3
 8003ac2:	2030      	movs	r0, #48	@ 0x30
 8003ac4:	f7fc ffba 	bl	8000a3c <charToSegment>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8003ace:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8003ad2:	440a      	add	r2, r1
 8003ad4:	f802 3c20 	strb.w	r3, [r2, #-32]
            humidity /= 10;
 8003ad8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003ada:	4b63      	ldr	r3, [pc, #396]	@ (8003c68 <SLIDER_DisplayHumidity+0x29c>)
 8003adc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae0:	08db      	lsrs	r3, r3, #3
 8003ae2:	667b      	str	r3, [r7, #100]	@ 0x64
    for (int i = 0; i < 4; i++) { // Cztery cyfry dla wilgotności (0-9999)
 8003ae4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ae8:	3301      	adds	r3, #1
 8003aea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003aee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	ddb7      	ble.n	8003a66 <SLIDER_DisplayHumidity+0x9a>
        }
    }

    // Składamy 6 cyfr do 48-bitowej wartości
    uint64_t displayVal = 0ULL;
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[5] << 40);
 8003b02:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2200      	movs	r2, #0
 8003b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b0c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003b0e:	f04f 0000 	mov.w	r0, #0
 8003b12:	f04f 0100 	mov.w	r1, #0
 8003b16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b18:	0219      	lsls	r1, r3, #8
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b20:	ea42 0400 	orr.w	r4, r2, r0
 8003b24:	633c      	str	r4, [r7, #48]	@ 0x30
 8003b26:	430b      	orrs	r3, r1
 8003b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b2a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003b2e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[4] << 32);
 8003b32:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2200      	movs	r2, #0
 8003b3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b3c:	657a      	str	r2, [r7, #84]	@ 0x54
 8003b3e:	f04f 0000 	mov.w	r0, #0
 8003b42:	f04f 0100 	mov.w	r1, #0
 8003b46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b48:	0019      	movs	r1, r3
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b50:	ea42 0400 	orr.w	r4, r2, r0
 8003b54:	62bc      	str	r4, [r7, #40]	@ 0x28
 8003b56:	430b      	orrs	r3, r1
 8003b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b5a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8003b5e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[3] << 24);
 8003b62:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2200      	movs	r2, #0
 8003b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b6c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003b6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003b72:	460b      	mov	r3, r1
 8003b74:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8003b78:	460b      	mov	r3, r1
 8003b7a:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8003b7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b82:	ea42 0108 	orr.w	r1, r2, r8
 8003b86:	6239      	str	r1, [r7, #32]
 8003b88:	ea43 0309 	orr.w	r3, r3, r9
 8003b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b8e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003b92:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[2] << 16);
 8003b96:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	469a      	mov	sl, r3
 8003ba0:	4693      	mov	fp, r2
 8003ba2:	f04f 0000 	mov.w	r0, #0
 8003ba6:	f04f 0100 	mov.w	r1, #0
 8003baa:	ea4f 410b 	mov.w	r1, fp, lsl #16
 8003bae:	ea41 411a 	orr.w	r1, r1, sl, lsr #16
 8003bb2:	ea4f 400a 	mov.w	r0, sl, lsl #16
 8003bb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003bba:	ea42 0400 	orr.w	r4, r2, r0
 8003bbe:	61bc      	str	r4, [r7, #24]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	61fb      	str	r3, [r7, #28]
 8003bc4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003bc8:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[1] << 8);
 8003bcc:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	461d      	mov	r5, r3
 8003bd6:	4616      	mov	r6, r2
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	0233      	lsls	r3, r6, #8
 8003be2:	ea43 6315 	orr.w	r3, r3, r5, lsr #24
 8003be6:	022a      	lsls	r2, r5, #8
 8003be8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003bec:	ea40 0402 	orr.w	r4, r0, r2
 8003bf0:	613c      	str	r4, [r7, #16]
 8003bf2:	430b      	orrs	r3, r1
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003bfa:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[0] << 0);
 8003bfe:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2200      	movs	r2, #0
 8003c06:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c08:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c0e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8003c12:	4621      	mov	r1, r4
 8003c14:	4311      	orrs	r1, r2
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	4629      	mov	r1, r5
 8003c1a:	4319      	orrs	r1, r3
 8003c1c:	60f9      	str	r1, [r7, #12]
 8003c1e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003c22:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    // **Miejsce dodania maski kropki dziesiętnej**
    // Możesz dodać maskę kropki dziesiętnej na dowolnej pozycji, np. na drugiej cyfrze (indeks 1)
    // Przykład: Ustawienie kropki dziesiętnej na digit[1]
     displayVal |= ((uint64_t)0b10000000 << 8); // Opcjonalnie, możesz to zrobić w swoim kodzie
 8003c26:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c2a:	f442 4100 	orr.w	r1, r2, #32768	@ 0x8000
 8003c2e:	6039      	str	r1, [r7, #0]
 8003c30:	607b      	str	r3, [r7, #4]
 8003c32:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003c36:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    // Ustawiamy wartość wyświetlacza i aktualizujemy wyświetlacze
    clockReg.bottomDisplay = displayVal;
 8003c3a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c3e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c44:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <SLIDER_DisplayHumidity+0x2a0>)
 8003c46:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	f8c3 2012 	str.w	r2, [r3, #18]
 8003c50:	460a      	mov	r2, r1
 8003c52:	82da      	strh	r2, [r3, #22]
    //UpdateAllDisplays(&clockReg);
}
 8003c54:	378c      	adds	r7, #140	@ 0x8c
 8003c56:	46bd      	mov	sp, r7
 8003c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5c:	2000075d 	.word	0x2000075d
 8003c60:	000f423f 	.word	0x000f423f
 8003c64:	20000760 	.word	0x20000760
 8003c68:	cccccccd 	.word	0xcccccccd
 8003c6c:	200006f0 	.word	0x200006f0

08003c70 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003c74:	4b17      	ldr	r3, [pc, #92]	@ (8003cd4 <MX_SPI1_Init+0x64>)
 8003c76:	4a18      	ldr	r2, [pc, #96]	@ (8003cd8 <MX_SPI1_Init+0x68>)
 8003c78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c7a:	4b16      	ldr	r3, [pc, #88]	@ (8003cd4 <MX_SPI1_Init+0x64>)
 8003c7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003c80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c82:	4b14      	ldr	r3, [pc, #80]	@ (8003cd4 <MX_SPI1_Init+0x64>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c88:	4b12      	ldr	r3, [pc, #72]	@ (8003cd4 <MX_SPI1_Init+0x64>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c8e:	4b11      	ldr	r3, [pc, #68]	@ (8003cd4 <MX_SPI1_Init+0x64>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c94:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd4 <MX_SPI1_Init+0x64>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd4 <MX_SPI1_Init+0x64>)
 8003c9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ca0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd4 <MX_SPI1_Init+0x64>)
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <MX_SPI1_Init+0x64>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cae:	4b09      	ldr	r3, [pc, #36]	@ (8003cd4 <MX_SPI1_Init+0x64>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cb4:	4b07      	ldr	r3, [pc, #28]	@ (8003cd4 <MX_SPI1_Init+0x64>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003cba:	4b06      	ldr	r3, [pc, #24]	@ (8003cd4 <MX_SPI1_Init+0x64>)
 8003cbc:	220a      	movs	r2, #10
 8003cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cc0:	4804      	ldr	r0, [pc, #16]	@ (8003cd4 <MX_SPI1_Init+0x64>)
 8003cc2:	f005 fcb9 	bl	8009638 <HAL_SPI_Init>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003ccc:	f7fe fd44 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003cd0:	bf00      	nop
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000774 	.word	0x20000774
 8003cd8:	40013000 	.word	0x40013000

08003cdc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003ce0:	4b17      	ldr	r3, [pc, #92]	@ (8003d40 <MX_SPI2_Init+0x64>)
 8003ce2:	4a18      	ldr	r2, [pc, #96]	@ (8003d44 <MX_SPI2_Init+0x68>)
 8003ce4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003ce6:	4b16      	ldr	r3, [pc, #88]	@ (8003d40 <MX_SPI2_Init+0x64>)
 8003ce8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003cec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003cee:	4b14      	ldr	r3, [pc, #80]	@ (8003d40 <MX_SPI2_Init+0x64>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cf4:	4b12      	ldr	r3, [pc, #72]	@ (8003d40 <MX_SPI2_Init+0x64>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cfa:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <MX_SPI2_Init+0x64>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d00:	4b0f      	ldr	r3, [pc, #60]	@ (8003d40 <MX_SPI2_Init+0x64>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003d06:	4b0e      	ldr	r3, [pc, #56]	@ (8003d40 <MX_SPI2_Init+0x64>)
 8003d08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d0c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d40 <MX_SPI2_Init+0x64>)
 8003d10:	2208      	movs	r2, #8
 8003d12:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d14:	4b0a      	ldr	r3, [pc, #40]	@ (8003d40 <MX_SPI2_Init+0x64>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d1a:	4b09      	ldr	r3, [pc, #36]	@ (8003d40 <MX_SPI2_Init+0x64>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d20:	4b07      	ldr	r3, [pc, #28]	@ (8003d40 <MX_SPI2_Init+0x64>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d26:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <MX_SPI2_Init+0x64>)
 8003d28:	220a      	movs	r2, #10
 8003d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d2c:	4804      	ldr	r0, [pc, #16]	@ (8003d40 <MX_SPI2_Init+0x64>)
 8003d2e:	f005 fc83 	bl	8009638 <HAL_SPI_Init>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003d38:	f7fe fd0e 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003d3c:	bf00      	nop
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	200007cc 	.word	0x200007cc
 8003d44:	40003800 	.word	0x40003800

08003d48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08c      	sub	sp, #48	@ 0x30
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d50:	f107 031c 	add.w	r3, r7, #28
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	60da      	str	r2, [r3, #12]
 8003d5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a7f      	ldr	r2, [pc, #508]	@ (8003f64 <HAL_SPI_MspInit+0x21c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d162      	bne.n	8003e30 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	4b7e      	ldr	r3, [pc, #504]	@ (8003f68 <HAL_SPI_MspInit+0x220>)
 8003d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d72:	4a7d      	ldr	r2, [pc, #500]	@ (8003f68 <HAL_SPI_MspInit+0x220>)
 8003d74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d7a:	4b7b      	ldr	r3, [pc, #492]	@ (8003f68 <HAL_SPI_MspInit+0x220>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d82:	61bb      	str	r3, [r7, #24]
 8003d84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	4b77      	ldr	r3, [pc, #476]	@ (8003f68 <HAL_SPI_MspInit+0x220>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8e:	4a76      	ldr	r2, [pc, #472]	@ (8003f68 <HAL_SPI_MspInit+0x220>)
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d96:	4b74      	ldr	r3, [pc, #464]	@ (8003f68 <HAL_SPI_MspInit+0x220>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003da2:	23a0      	movs	r3, #160	@ 0xa0
 8003da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da6:	2302      	movs	r3, #2
 8003da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dae:	2303      	movs	r3, #3
 8003db0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003db2:	2305      	movs	r3, #5
 8003db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db6:	f107 031c 	add.w	r3, r7, #28
 8003dba:	4619      	mov	r1, r3
 8003dbc:	486b      	ldr	r0, [pc, #428]	@ (8003f6c <HAL_SPI_MspInit+0x224>)
 8003dbe:	f001 fd43 	bl	8005848 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003dc2:	4b6b      	ldr	r3, [pc, #428]	@ (8003f70 <HAL_SPI_MspInit+0x228>)
 8003dc4:	4a6b      	ldr	r2, [pc, #428]	@ (8003f74 <HAL_SPI_MspInit+0x22c>)
 8003dc6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003dc8:	4b69      	ldr	r3, [pc, #420]	@ (8003f70 <HAL_SPI_MspInit+0x228>)
 8003dca:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003dce:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dd0:	4b67      	ldr	r3, [pc, #412]	@ (8003f70 <HAL_SPI_MspInit+0x228>)
 8003dd2:	2240      	movs	r2, #64	@ 0x40
 8003dd4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dd6:	4b66      	ldr	r3, [pc, #408]	@ (8003f70 <HAL_SPI_MspInit+0x228>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ddc:	4b64      	ldr	r3, [pc, #400]	@ (8003f70 <HAL_SPI_MspInit+0x228>)
 8003dde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003de2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003de4:	4b62      	ldr	r3, [pc, #392]	@ (8003f70 <HAL_SPI_MspInit+0x228>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dea:	4b61      	ldr	r3, [pc, #388]	@ (8003f70 <HAL_SPI_MspInit+0x228>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003df0:	4b5f      	ldr	r3, [pc, #380]	@ (8003f70 <HAL_SPI_MspInit+0x228>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003df6:	4b5e      	ldr	r3, [pc, #376]	@ (8003f70 <HAL_SPI_MspInit+0x228>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8003f70 <HAL_SPI_MspInit+0x228>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003e02:	485b      	ldr	r0, [pc, #364]	@ (8003f70 <HAL_SPI_MspInit+0x228>)
 8003e04:	f001 f974 	bl	80050f0 <HAL_DMA_Init>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8003e0e:	f7fe fca3 	bl	8002758 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a56      	ldr	r2, [pc, #344]	@ (8003f70 <HAL_SPI_MspInit+0x228>)
 8003e16:	649a      	str	r2, [r3, #72]	@ 0x48
 8003e18:	4a55      	ldr	r2, [pc, #340]	@ (8003f70 <HAL_SPI_MspInit+0x228>)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2100      	movs	r1, #0
 8003e22:	2023      	movs	r0, #35	@ 0x23
 8003e24:	f001 f92d 	bl	8005082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003e28:	2023      	movs	r0, #35	@ 0x23
 8003e2a:	f001 f946 	bl	80050ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003e2e:	e094      	b.n	8003f5a <HAL_SPI_MspInit+0x212>
  else if(spiHandle->Instance==SPI2)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a50      	ldr	r2, [pc, #320]	@ (8003f78 <HAL_SPI_MspInit+0x230>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	f040 808f 	bne.w	8003f5a <HAL_SPI_MspInit+0x212>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	4b49      	ldr	r3, [pc, #292]	@ (8003f68 <HAL_SPI_MspInit+0x220>)
 8003e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e44:	4a48      	ldr	r2, [pc, #288]	@ (8003f68 <HAL_SPI_MspInit+0x220>)
 8003e46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e4c:	4b46      	ldr	r3, [pc, #280]	@ (8003f68 <HAL_SPI_MspInit+0x220>)
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	4b42      	ldr	r3, [pc, #264]	@ (8003f68 <HAL_SPI_MspInit+0x220>)
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e60:	4a41      	ldr	r2, [pc, #260]	@ (8003f68 <HAL_SPI_MspInit+0x220>)
 8003e62:	f043 0302 	orr.w	r3, r3, #2
 8003e66:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e68:	4b3f      	ldr	r3, [pc, #252]	@ (8003f68 <HAL_SPI_MspInit+0x220>)
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003e74:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e82:	2303      	movs	r3, #3
 8003e84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e86:	2305      	movs	r3, #5
 8003e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e8a:	f107 031c 	add.w	r3, r7, #28
 8003e8e:	4619      	mov	r1, r3
 8003e90:	483a      	ldr	r0, [pc, #232]	@ (8003f7c <HAL_SPI_MspInit+0x234>)
 8003e92:	f001 fcd9 	bl	8005848 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003e96:	4b3a      	ldr	r3, [pc, #232]	@ (8003f80 <HAL_SPI_MspInit+0x238>)
 8003e98:	4a3a      	ldr	r2, [pc, #232]	@ (8003f84 <HAL_SPI_MspInit+0x23c>)
 8003e9a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003e9c:	4b38      	ldr	r3, [pc, #224]	@ (8003f80 <HAL_SPI_MspInit+0x238>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ea2:	4b37      	ldr	r3, [pc, #220]	@ (8003f80 <HAL_SPI_MspInit+0x238>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ea8:	4b35      	ldr	r3, [pc, #212]	@ (8003f80 <HAL_SPI_MspInit+0x238>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003eae:	4b34      	ldr	r3, [pc, #208]	@ (8003f80 <HAL_SPI_MspInit+0x238>)
 8003eb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003eb4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eb6:	4b32      	ldr	r3, [pc, #200]	@ (8003f80 <HAL_SPI_MspInit+0x238>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ebc:	4b30      	ldr	r3, [pc, #192]	@ (8003f80 <HAL_SPI_MspInit+0x238>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8003f80 <HAL_SPI_MspInit+0x238>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f80 <HAL_SPI_MspInit+0x238>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ece:	4b2c      	ldr	r3, [pc, #176]	@ (8003f80 <HAL_SPI_MspInit+0x238>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003ed4:	482a      	ldr	r0, [pc, #168]	@ (8003f80 <HAL_SPI_MspInit+0x238>)
 8003ed6:	f001 f90b 	bl	80050f0 <HAL_DMA_Init>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_SPI_MspInit+0x19c>
      Error_Handler();
 8003ee0:	f7fe fc3a 	bl	8002758 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a26      	ldr	r2, [pc, #152]	@ (8003f80 <HAL_SPI_MspInit+0x238>)
 8003ee8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003eea:	4a25      	ldr	r2, [pc, #148]	@ (8003f80 <HAL_SPI_MspInit+0x238>)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003ef0:	4b25      	ldr	r3, [pc, #148]	@ (8003f88 <HAL_SPI_MspInit+0x240>)
 8003ef2:	4a26      	ldr	r2, [pc, #152]	@ (8003f8c <HAL_SPI_MspInit+0x244>)
 8003ef4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003ef6:	4b24      	ldr	r3, [pc, #144]	@ (8003f88 <HAL_SPI_MspInit+0x240>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003efc:	4b22      	ldr	r3, [pc, #136]	@ (8003f88 <HAL_SPI_MspInit+0x240>)
 8003efe:	2240      	movs	r2, #64	@ 0x40
 8003f00:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f02:	4b21      	ldr	r3, [pc, #132]	@ (8003f88 <HAL_SPI_MspInit+0x240>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f08:	4b1f      	ldr	r3, [pc, #124]	@ (8003f88 <HAL_SPI_MspInit+0x240>)
 8003f0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f0e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f10:	4b1d      	ldr	r3, [pc, #116]	@ (8003f88 <HAL_SPI_MspInit+0x240>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f16:	4b1c      	ldr	r3, [pc, #112]	@ (8003f88 <HAL_SPI_MspInit+0x240>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003f88 <HAL_SPI_MspInit+0x240>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f22:	4b19      	ldr	r3, [pc, #100]	@ (8003f88 <HAL_SPI_MspInit+0x240>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f28:	4b17      	ldr	r3, [pc, #92]	@ (8003f88 <HAL_SPI_MspInit+0x240>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003f2e:	4816      	ldr	r0, [pc, #88]	@ (8003f88 <HAL_SPI_MspInit+0x240>)
 8003f30:	f001 f8de 	bl	80050f0 <HAL_DMA_Init>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_SPI_MspInit+0x1f6>
      Error_Handler();
 8003f3a:	f7fe fc0d 	bl	8002758 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a11      	ldr	r2, [pc, #68]	@ (8003f88 <HAL_SPI_MspInit+0x240>)
 8003f42:	649a      	str	r2, [r3, #72]	@ 0x48
 8003f44:	4a10      	ldr	r2, [pc, #64]	@ (8003f88 <HAL_SPI_MspInit+0x240>)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	2024      	movs	r0, #36	@ 0x24
 8003f50:	f001 f897 	bl	8005082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003f54:	2024      	movs	r0, #36	@ 0x24
 8003f56:	f001 f8b0 	bl	80050ba <HAL_NVIC_EnableIRQ>
}
 8003f5a:	bf00      	nop
 8003f5c:	3730      	adds	r7, #48	@ 0x30
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40013000 	.word	0x40013000
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	40020000 	.word	0x40020000
 8003f70:	20000824 	.word	0x20000824
 8003f74:	40026458 	.word	0x40026458
 8003f78:	40003800 	.word	0x40003800
 8003f7c:	40020400 	.word	0x40020400
 8003f80:	20000884 	.word	0x20000884
 8003f84:	40026058 	.word	0x40026058
 8003f88:	200008e4 	.word	0x200008e4
 8003f8c:	40026070 	.word	0x40026070

08003f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	4b10      	ldr	r3, [pc, #64]	@ (8003fdc <HAL_MspInit+0x4c>)
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8003fdc <HAL_MspInit+0x4c>)
 8003fa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <HAL_MspInit+0x4c>)
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	4b09      	ldr	r3, [pc, #36]	@ (8003fdc <HAL_MspInit+0x4c>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	4a08      	ldr	r2, [pc, #32]	@ (8003fdc <HAL_MspInit+0x4c>)
 8003fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fc2:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <HAL_MspInit+0x4c>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40023800 	.word	0x40023800

08003fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003fe4:	bf00      	nop
 8003fe6:	e7fd      	b.n	8003fe4 <NMI_Handler+0x4>

08003fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fec:	bf00      	nop
 8003fee:	e7fd      	b.n	8003fec <HardFault_Handler+0x4>

08003ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ff4:	bf00      	nop
 8003ff6:	e7fd      	b.n	8003ff4 <MemManage_Handler+0x4>

08003ff8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ffc:	bf00      	nop
 8003ffe:	e7fd      	b.n	8003ffc <BusFault_Handler+0x4>

08004000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004004:	bf00      	nop
 8004006:	e7fd      	b.n	8004004 <UsageFault_Handler+0x4>

08004008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800400c:	bf00      	nop
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004016:	b480      	push	{r7}
 8004018:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800401a:	bf00      	nop
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004028:	bf00      	nop
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004036:	f000 fbef 	bl	8004818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800403a:	bf00      	nop
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8004044:	4802      	ldr	r0, [pc, #8]	@ (8004050 <DMA1_Stream2_IRQHandler+0x10>)
 8004046:	f001 f97b 	bl	8005340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800404a:	bf00      	nop
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000610 	.word	0x20000610

08004054 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004058:	4802      	ldr	r0, [pc, #8]	@ (8004064 <DMA1_Stream3_IRQHandler+0x10>)
 800405a:	f001 f971 	bl	8005340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800405e:	bf00      	nop
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000884 	.word	0x20000884

08004068 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800406c:	4802      	ldr	r0, [pc, #8]	@ (8004078 <DMA1_Stream4_IRQHandler+0x10>)
 800406e:	f001 f967 	bl	8005340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004072:	bf00      	nop
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	200008e4 	.word	0x200008e4

0800407c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004080:	4802      	ldr	r0, [pc, #8]	@ (800408c <TIM4_IRQHandler+0x10>)
 8004082:	f006 f99f 	bl	800a3c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20000990 	.word	0x20000990

08004090 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004094:	4802      	ldr	r0, [pc, #8]	@ (80040a0 <I2C2_EV_IRQHandler+0x10>)
 8004096:	f002 fa3d 	bl	8006514 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	200005bc 	.word	0x200005bc

080040a4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80040a8:	4802      	ldr	r0, [pc, #8]	@ (80040b4 <I2C2_ER_IRQHandler+0x10>)
 80040aa:	f002 fb86 	bl	80067ba <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	200005bc 	.word	0x200005bc

080040b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80040bc:	4802      	ldr	r0, [pc, #8]	@ (80040c8 <SPI1_IRQHandler+0x10>)
 80040be:	f005 fbf7 	bl	80098b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80040c2:	bf00      	nop
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20000774 	.word	0x20000774

080040cc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80040d0:	4802      	ldr	r0, [pc, #8]	@ (80040dc <SPI2_IRQHandler+0x10>)
 80040d2:	f005 fbed 	bl	80098b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80040d6:	bf00      	nop
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	200007cc 	.word	0x200007cc

080040e0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80040e4:	4802      	ldr	r0, [pc, #8]	@ (80040f0 <DMA1_Stream7_IRQHandler+0x10>)
 80040e6:	f001 f92b 	bl	8005340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000670 	.word	0x20000670

080040f4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80040f8:	4802      	ldr	r0, [pc, #8]	@ (8004104 <TIM5_IRQHandler+0x10>)
 80040fa:	f006 f963 	bl	800a3c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80040fe:	bf00      	nop
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	200009d8 	.word	0x200009d8

08004108 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800410c:	4802      	ldr	r0, [pc, #8]	@ (8004118 <DMA2_Stream2_IRQHandler+0x10>)
 800410e:	f001 f917 	bl	8005340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000a68 	.word	0x20000a68

0800411c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004120:	4802      	ldr	r0, [pc, #8]	@ (800412c <DMA2_Stream3_IRQHandler+0x10>)
 8004122:	f001 f90d 	bl	8005340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004126:	bf00      	nop
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000824 	.word	0x20000824

08004130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004138:	4a14      	ldr	r2, [pc, #80]	@ (800418c <_sbrk+0x5c>)
 800413a:	4b15      	ldr	r3, [pc, #84]	@ (8004190 <_sbrk+0x60>)
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004144:	4b13      	ldr	r3, [pc, #76]	@ (8004194 <_sbrk+0x64>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d102      	bne.n	8004152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800414c:	4b11      	ldr	r3, [pc, #68]	@ (8004194 <_sbrk+0x64>)
 800414e:	4a12      	ldr	r2, [pc, #72]	@ (8004198 <_sbrk+0x68>)
 8004150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004152:	4b10      	ldr	r3, [pc, #64]	@ (8004194 <_sbrk+0x64>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4413      	add	r3, r2
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	429a      	cmp	r2, r3
 800415e:	d207      	bcs.n	8004170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004160:	f007 fd0e 	bl	800bb80 <__errno>
 8004164:	4603      	mov	r3, r0
 8004166:	220c      	movs	r2, #12
 8004168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800416a:	f04f 33ff 	mov.w	r3, #4294967295
 800416e:	e009      	b.n	8004184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004170:	4b08      	ldr	r3, [pc, #32]	@ (8004194 <_sbrk+0x64>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004176:	4b07      	ldr	r3, [pc, #28]	@ (8004194 <_sbrk+0x64>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4413      	add	r3, r2
 800417e:	4a05      	ldr	r2, [pc, #20]	@ (8004194 <_sbrk+0x64>)
 8004180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004182:	68fb      	ldr	r3, [r7, #12]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20010000 	.word	0x20010000
 8004190:	00000400 	.word	0x00000400
 8004194:	20000944 	.word	0x20000944
 8004198:	20000c18 	.word	0x20000c18

0800419c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041a0:	4b06      	ldr	r3, [pc, #24]	@ (80041bc <SystemInit+0x20>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a6:	4a05      	ldr	r2, [pc, #20]	@ (80041bc <SystemInit+0x20>)
 80041a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	e000ed00 	.word	0xe000ed00

080041c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b096      	sub	sp, #88	@ 0x58
 80041c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041c6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	605a      	str	r2, [r3, #4]
 80041d0:	609a      	str	r2, [r3, #8]
 80041d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	605a      	str	r2, [r3, #4]
 80041e8:	609a      	str	r2, [r3, #8]
 80041ea:	60da      	str	r2, [r3, #12]
 80041ec:	611a      	str	r2, [r3, #16]
 80041ee:	615a      	str	r2, [r3, #20]
 80041f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80041f2:	1d3b      	adds	r3, r7, #4
 80041f4:	2220      	movs	r2, #32
 80041f6:	2100      	movs	r1, #0
 80041f8:	4618      	mov	r0, r3
 80041fa:	f007 fc93 	bl	800bb24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80041fe:	4b3e      	ldr	r3, [pc, #248]	@ (80042f8 <MX_TIM1_Init+0x138>)
 8004200:	4a3e      	ldr	r2, [pc, #248]	@ (80042fc <MX_TIM1_Init+0x13c>)
 8004202:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 8004204:	4b3c      	ldr	r3, [pc, #240]	@ (80042f8 <MX_TIM1_Init+0x138>)
 8004206:	2218      	movs	r2, #24
 8004208:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800420a:	4b3b      	ldr	r3, [pc, #236]	@ (80042f8 <MX_TIM1_Init+0x138>)
 800420c:	2200      	movs	r2, #0
 800420e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8004210:	4b39      	ldr	r3, [pc, #228]	@ (80042f8 <MX_TIM1_Init+0x138>)
 8004212:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004216:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004218:	4b37      	ldr	r3, [pc, #220]	@ (80042f8 <MX_TIM1_Init+0x138>)
 800421a:	2200      	movs	r2, #0
 800421c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800421e:	4b36      	ldr	r3, [pc, #216]	@ (80042f8 <MX_TIM1_Init+0x138>)
 8004220:	2200      	movs	r2, #0
 8004222:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004224:	4b34      	ldr	r3, [pc, #208]	@ (80042f8 <MX_TIM1_Init+0x138>)
 8004226:	2200      	movs	r2, #0
 8004228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800422a:	4833      	ldr	r0, [pc, #204]	@ (80042f8 <MX_TIM1_Init+0x138>)
 800422c:	f005 fdba 	bl	8009da4 <HAL_TIM_Base_Init>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004236:	f7fe fa8f 	bl	8002758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800423a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800423e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004240:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004244:	4619      	mov	r1, r3
 8004246:	482c      	ldr	r0, [pc, #176]	@ (80042f8 <MX_TIM1_Init+0x138>)
 8004248:	f006 fa6e 	bl	800a728 <HAL_TIM_ConfigClockSource>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004252:	f7fe fa81 	bl	8002758 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004256:	4828      	ldr	r0, [pc, #160]	@ (80042f8 <MX_TIM1_Init+0x138>)
 8004258:	f005 fe56 	bl	8009f08 <HAL_TIM_PWM_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004262:	f7fe fa79 	bl	8002758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004266:	2300      	movs	r3, #0
 8004268:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800426a:	2300      	movs	r3, #0
 800426c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800426e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004272:	4619      	mov	r1, r3
 8004274:	4820      	ldr	r0, [pc, #128]	@ (80042f8 <MX_TIM1_Init+0x138>)
 8004276:	f006 fe15 	bl	800aea4 <HAL_TIMEx_MasterConfigSynchronization>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004280:	f7fe fa6a 	bl	8002758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004284:	2360      	movs	r3, #96	@ 0x60
 8004286:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800428c:	2302      	movs	r3, #2
 800428e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004290:	2300      	movs	r3, #0
 8004292:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004294:	2300      	movs	r3, #0
 8004296:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004298:	2300      	movs	r3, #0
 800429a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800429c:	2300      	movs	r3, #0
 800429e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042a4:	2200      	movs	r2, #0
 80042a6:	4619      	mov	r1, r3
 80042a8:	4813      	ldr	r0, [pc, #76]	@ (80042f8 <MX_TIM1_Init+0x138>)
 80042aa:	f006 f97b 	bl	800a5a4 <HAL_TIM_PWM_ConfigChannel>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80042b4:	f7fe fa50 	bl	8002758 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80042b8:	2300      	movs	r3, #0
 80042ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80042bc:	2300      	movs	r3, #0
 80042be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80042cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80042d6:	1d3b      	adds	r3, r7, #4
 80042d8:	4619      	mov	r1, r3
 80042da:	4807      	ldr	r0, [pc, #28]	@ (80042f8 <MX_TIM1_Init+0x138>)
 80042dc:	f006 fe50 	bl	800af80 <HAL_TIMEx_ConfigBreakDeadTime>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80042e6:	f7fe fa37 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80042ea:	4803      	ldr	r0, [pc, #12]	@ (80042f8 <MX_TIM1_Init+0x138>)
 80042ec:	f000 f938 	bl	8004560 <HAL_TIM_MspPostInit>

}
 80042f0:	bf00      	nop
 80042f2:	3758      	adds	r7, #88	@ 0x58
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000948 	.word	0x20000948
 80042fc:	40010000 	.word	0x40010000

08004300 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08c      	sub	sp, #48	@ 0x30
 8004304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004306:	f107 030c 	add.w	r3, r7, #12
 800430a:	2224      	movs	r2, #36	@ 0x24
 800430c:	2100      	movs	r1, #0
 800430e:	4618      	mov	r0, r3
 8004310:	f007 fc08 	bl	800bb24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004314:	1d3b      	adds	r3, r7, #4
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800431c:	4b20      	ldr	r3, [pc, #128]	@ (80043a0 <MX_TIM4_Init+0xa0>)
 800431e:	4a21      	ldr	r2, [pc, #132]	@ (80043a4 <MX_TIM4_Init+0xa4>)
 8004320:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004322:	4b1f      	ldr	r3, [pc, #124]	@ (80043a0 <MX_TIM4_Init+0xa0>)
 8004324:	2200      	movs	r2, #0
 8004326:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004328:	4b1d      	ldr	r3, [pc, #116]	@ (80043a0 <MX_TIM4_Init+0xa0>)
 800432a:	2200      	movs	r2, #0
 800432c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800432e:	4b1c      	ldr	r3, [pc, #112]	@ (80043a0 <MX_TIM4_Init+0xa0>)
 8004330:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004334:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004336:	4b1a      	ldr	r3, [pc, #104]	@ (80043a0 <MX_TIM4_Init+0xa0>)
 8004338:	2200      	movs	r2, #0
 800433a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800433c:	4b18      	ldr	r3, [pc, #96]	@ (80043a0 <MX_TIM4_Init+0xa0>)
 800433e:	2200      	movs	r2, #0
 8004340:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004342:	2301      	movs	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800434a:	2301      	movs	r3, #1
 800434c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800434e:	2300      	movs	r3, #0
 8004350:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004356:	2302      	movs	r3, #2
 8004358:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800435a:	2301      	movs	r3, #1
 800435c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800435e:	2300      	movs	r3, #0
 8004360:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004362:	2300      	movs	r3, #0
 8004364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004366:	f107 030c 	add.w	r3, r7, #12
 800436a:	4619      	mov	r1, r3
 800436c:	480c      	ldr	r0, [pc, #48]	@ (80043a0 <MX_TIM4_Init+0xa0>)
 800436e:	f005 fed5 	bl	800a11c <HAL_TIM_Encoder_Init>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004378:	f7fe f9ee 	bl	8002758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800437c:	2300      	movs	r3, #0
 800437e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004380:	2300      	movs	r3, #0
 8004382:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004384:	1d3b      	adds	r3, r7, #4
 8004386:	4619      	mov	r1, r3
 8004388:	4805      	ldr	r0, [pc, #20]	@ (80043a0 <MX_TIM4_Init+0xa0>)
 800438a:	f006 fd8b 	bl	800aea4 <HAL_TIMEx_MasterConfigSynchronization>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004394:	f7fe f9e0 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004398:	bf00      	nop
 800439a:	3730      	adds	r7, #48	@ 0x30
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20000990 	.word	0x20000990
 80043a4:	40000800 	.word	0x40000800

080043a8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043ae:	f107 0308 	add.w	r3, r7, #8
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	605a      	str	r2, [r3, #4]
 80043b8:	609a      	str	r2, [r3, #8]
 80043ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043bc:	463b      	mov	r3, r7
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80043c4:	4b1d      	ldr	r3, [pc, #116]	@ (800443c <MX_TIM5_Init+0x94>)
 80043c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004440 <MX_TIM5_Init+0x98>)
 80043c8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 24999;
 80043ca:	4b1c      	ldr	r3, [pc, #112]	@ (800443c <MX_TIM5_Init+0x94>)
 80043cc:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 80043d0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043d2:	4b1a      	ldr	r3, [pc, #104]	@ (800443c <MX_TIM5_Init+0x94>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9;
 80043d8:	4b18      	ldr	r3, [pc, #96]	@ (800443c <MX_TIM5_Init+0x94>)
 80043da:	2209      	movs	r2, #9
 80043dc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043de:	4b17      	ldr	r3, [pc, #92]	@ (800443c <MX_TIM5_Init+0x94>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043e4:	4b15      	ldr	r3, [pc, #84]	@ (800443c <MX_TIM5_Init+0x94>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80043ea:	4814      	ldr	r0, [pc, #80]	@ (800443c <MX_TIM5_Init+0x94>)
 80043ec:	f005 fcda 	bl	8009da4 <HAL_TIM_Base_Init>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80043f6:	f7fe f9af 	bl	8002758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004400:	f107 0308 	add.w	r3, r7, #8
 8004404:	4619      	mov	r1, r3
 8004406:	480d      	ldr	r0, [pc, #52]	@ (800443c <MX_TIM5_Init+0x94>)
 8004408:	f006 f98e 	bl	800a728 <HAL_TIM_ConfigClockSource>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8004412:	f7fe f9a1 	bl	8002758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004416:	2300      	movs	r3, #0
 8004418:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800441a:	2300      	movs	r3, #0
 800441c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800441e:	463b      	mov	r3, r7
 8004420:	4619      	mov	r1, r3
 8004422:	4806      	ldr	r0, [pc, #24]	@ (800443c <MX_TIM5_Init+0x94>)
 8004424:	f006 fd3e 	bl	800aea4 <HAL_TIMEx_MasterConfigSynchronization>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800442e:	f7fe f993 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004432:	bf00      	nop
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	200009d8 	.word	0x200009d8
 8004440:	40000c00 	.word	0x40000c00

08004444 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a18      	ldr	r2, [pc, #96]	@ (80044b4 <HAL_TIM_Base_MspInit+0x70>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d10e      	bne.n	8004474 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	4b17      	ldr	r3, [pc, #92]	@ (80044b8 <HAL_TIM_Base_MspInit+0x74>)
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	4a16      	ldr	r2, [pc, #88]	@ (80044b8 <HAL_TIM_Base_MspInit+0x74>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6453      	str	r3, [r2, #68]	@ 0x44
 8004466:	4b14      	ldr	r3, [pc, #80]	@ (80044b8 <HAL_TIM_Base_MspInit+0x74>)
 8004468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004472:	e01a      	b.n	80044aa <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a10      	ldr	r2, [pc, #64]	@ (80044bc <HAL_TIM_Base_MspInit+0x78>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d115      	bne.n	80044aa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	4b0d      	ldr	r3, [pc, #52]	@ (80044b8 <HAL_TIM_Base_MspInit+0x74>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	4a0c      	ldr	r2, [pc, #48]	@ (80044b8 <HAL_TIM_Base_MspInit+0x74>)
 8004488:	f043 0308 	orr.w	r3, r3, #8
 800448c:	6413      	str	r3, [r2, #64]	@ 0x40
 800448e:	4b0a      	ldr	r3, [pc, #40]	@ (80044b8 <HAL_TIM_Base_MspInit+0x74>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800449a:	2200      	movs	r2, #0
 800449c:	2100      	movs	r1, #0
 800449e:	2032      	movs	r0, #50	@ 0x32
 80044a0:	f000 fdef 	bl	8005082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80044a4:	2032      	movs	r0, #50	@ 0x32
 80044a6:	f000 fe08 	bl	80050ba <HAL_NVIC_EnableIRQ>
}
 80044aa:	bf00      	nop
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40010000 	.word	0x40010000
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40000c00 	.word	0x40000c00

080044c0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08a      	sub	sp, #40	@ 0x28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c8:	f107 0314 	add.w	r3, r7, #20
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	609a      	str	r2, [r3, #8]
 80044d4:	60da      	str	r2, [r3, #12]
 80044d6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004554 <HAL_TIM_Encoder_MspInit+0x94>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d133      	bne.n	800454a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044e2:	2300      	movs	r3, #0
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004558 <HAL_TIM_Encoder_MspInit+0x98>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004558 <HAL_TIM_Encoder_MspInit+0x98>)
 80044ec:	f043 0304 	orr.w	r3, r3, #4
 80044f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80044f2:	4b19      	ldr	r3, [pc, #100]	@ (8004558 <HAL_TIM_Encoder_MspInit+0x98>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	4b15      	ldr	r3, [pc, #84]	@ (8004558 <HAL_TIM_Encoder_MspInit+0x98>)
 8004504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004506:	4a14      	ldr	r2, [pc, #80]	@ (8004558 <HAL_TIM_Encoder_MspInit+0x98>)
 8004508:	f043 0302 	orr.w	r3, r3, #2
 800450c:	6313      	str	r3, [r2, #48]	@ 0x30
 800450e:	4b12      	ldr	r3, [pc, #72]	@ (8004558 <HAL_TIM_Encoder_MspInit+0x98>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800451a:	23c0      	movs	r3, #192	@ 0xc0
 800451c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451e:	2302      	movs	r3, #2
 8004520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004522:	2302      	movs	r3, #2
 8004524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004526:	2300      	movs	r3, #0
 8004528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800452a:	2302      	movs	r3, #2
 800452c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800452e:	f107 0314 	add.w	r3, r7, #20
 8004532:	4619      	mov	r1, r3
 8004534:	4809      	ldr	r0, [pc, #36]	@ (800455c <HAL_TIM_Encoder_MspInit+0x9c>)
 8004536:	f001 f987 	bl	8005848 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800453a:	2200      	movs	r2, #0
 800453c:	2100      	movs	r1, #0
 800453e:	201e      	movs	r0, #30
 8004540:	f000 fd9f 	bl	8005082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004544:	201e      	movs	r0, #30
 8004546:	f000 fdb8 	bl	80050ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800454a:	bf00      	nop
 800454c:	3728      	adds	r7, #40	@ 0x28
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40000800 	.word	0x40000800
 8004558:	40023800 	.word	0x40023800
 800455c:	40020400 	.word	0x40020400

08004560 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004568:	f107 030c 	add.w	r3, r7, #12
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	60da      	str	r2, [r3, #12]
 8004576:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a12      	ldr	r2, [pc, #72]	@ (80045c8 <HAL_TIM_MspPostInit+0x68>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d11e      	bne.n	80045c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	4b11      	ldr	r3, [pc, #68]	@ (80045cc <HAL_TIM_MspPostInit+0x6c>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458a:	4a10      	ldr	r2, [pc, #64]	@ (80045cc <HAL_TIM_MspPostInit+0x6c>)
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	6313      	str	r3, [r2, #48]	@ 0x30
 8004592:	4b0e      	ldr	r3, [pc, #56]	@ (80045cc <HAL_TIM_MspPostInit+0x6c>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800459e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a4:	2302      	movs	r3, #2
 80045a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80045b0:	2301      	movs	r3, #1
 80045b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b4:	f107 030c 	add.w	r3, r7, #12
 80045b8:	4619      	mov	r1, r3
 80045ba:	4805      	ldr	r0, [pc, #20]	@ (80045d0 <HAL_TIM_MspPostInit+0x70>)
 80045bc:	f001 f944 	bl	8005848 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80045c0:	bf00      	nop
 80045c2:	3720      	adds	r7, #32
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40010000 	.word	0x40010000
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40020000 	.word	0x40020000

080045d4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045d8:	4b11      	ldr	r3, [pc, #68]	@ (8004620 <MX_USART1_UART_Init+0x4c>)
 80045da:	4a12      	ldr	r2, [pc, #72]	@ (8004624 <MX_USART1_UART_Init+0x50>)
 80045dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80045de:	4b10      	ldr	r3, [pc, #64]	@ (8004620 <MX_USART1_UART_Init+0x4c>)
 80045e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80045e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004620 <MX_USART1_UART_Init+0x4c>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004620 <MX_USART1_UART_Init+0x4c>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <MX_USART1_UART_Init+0x4c>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045f8:	4b09      	ldr	r3, [pc, #36]	@ (8004620 <MX_USART1_UART_Init+0x4c>)
 80045fa:	220c      	movs	r2, #12
 80045fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045fe:	4b08      	ldr	r3, [pc, #32]	@ (8004620 <MX_USART1_UART_Init+0x4c>)
 8004600:	2200      	movs	r2, #0
 8004602:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004604:	4b06      	ldr	r3, [pc, #24]	@ (8004620 <MX_USART1_UART_Init+0x4c>)
 8004606:	2200      	movs	r2, #0
 8004608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800460a:	4805      	ldr	r0, [pc, #20]	@ (8004620 <MX_USART1_UART_Init+0x4c>)
 800460c:	f006 fd1e 	bl	800b04c <HAL_UART_Init>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004616:	f7fe f89f 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800461a:	bf00      	nop
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000a20 	.word	0x20000a20
 8004624:	40011000 	.word	0x40011000

08004628 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08a      	sub	sp, #40	@ 0x28
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004630:	f107 0314 	add.w	r3, r7, #20
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	605a      	str	r2, [r3, #4]
 800463a:	609a      	str	r2, [r3, #8]
 800463c:	60da      	str	r2, [r3, #12]
 800463e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a31      	ldr	r2, [pc, #196]	@ (800470c <HAL_UART_MspInit+0xe4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d15b      	bne.n	8004702 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	4b30      	ldr	r3, [pc, #192]	@ (8004710 <HAL_UART_MspInit+0xe8>)
 8004650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004652:	4a2f      	ldr	r2, [pc, #188]	@ (8004710 <HAL_UART_MspInit+0xe8>)
 8004654:	f043 0310 	orr.w	r3, r3, #16
 8004658:	6453      	str	r3, [r2, #68]	@ 0x44
 800465a:	4b2d      	ldr	r3, [pc, #180]	@ (8004710 <HAL_UART_MspInit+0xe8>)
 800465c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	4b29      	ldr	r3, [pc, #164]	@ (8004710 <HAL_UART_MspInit+0xe8>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466e:	4a28      	ldr	r2, [pc, #160]	@ (8004710 <HAL_UART_MspInit+0xe8>)
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	6313      	str	r3, [r2, #48]	@ 0x30
 8004676:	4b26      	ldr	r3, [pc, #152]	@ (8004710 <HAL_UART_MspInit+0xe8>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004682:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004688:	2302      	movs	r3, #2
 800468a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468c:	2300      	movs	r3, #0
 800468e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004690:	2303      	movs	r3, #3
 8004692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004694:	2307      	movs	r3, #7
 8004696:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004698:	f107 0314 	add.w	r3, r7, #20
 800469c:	4619      	mov	r1, r3
 800469e:	481d      	ldr	r0, [pc, #116]	@ (8004714 <HAL_UART_MspInit+0xec>)
 80046a0:	f001 f8d2 	bl	8005848 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80046a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004718 <HAL_UART_MspInit+0xf0>)
 80046a6:	4a1d      	ldr	r2, [pc, #116]	@ (800471c <HAL_UART_MspInit+0xf4>)
 80046a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80046aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004718 <HAL_UART_MspInit+0xf0>)
 80046ac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80046b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046b2:	4b19      	ldr	r3, [pc, #100]	@ (8004718 <HAL_UART_MspInit+0xf0>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046b8:	4b17      	ldr	r3, [pc, #92]	@ (8004718 <HAL_UART_MspInit+0xf0>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046be:	4b16      	ldr	r3, [pc, #88]	@ (8004718 <HAL_UART_MspInit+0xf0>)
 80046c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046c4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046c6:	4b14      	ldr	r3, [pc, #80]	@ (8004718 <HAL_UART_MspInit+0xf0>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046cc:	4b12      	ldr	r3, [pc, #72]	@ (8004718 <HAL_UART_MspInit+0xf0>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80046d2:	4b11      	ldr	r3, [pc, #68]	@ (8004718 <HAL_UART_MspInit+0xf0>)
 80046d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046d8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80046da:	4b0f      	ldr	r3, [pc, #60]	@ (8004718 <HAL_UART_MspInit+0xf0>)
 80046dc:	2200      	movs	r2, #0
 80046de:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004718 <HAL_UART_MspInit+0xf0>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80046e6:	480c      	ldr	r0, [pc, #48]	@ (8004718 <HAL_UART_MspInit+0xf0>)
 80046e8:	f000 fd02 	bl	80050f0 <HAL_DMA_Init>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80046f2:	f7fe f831 	bl	8002758 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a07      	ldr	r2, [pc, #28]	@ (8004718 <HAL_UART_MspInit+0xf0>)
 80046fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80046fc:	4a06      	ldr	r2, [pc, #24]	@ (8004718 <HAL_UART_MspInit+0xf0>)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004702:	bf00      	nop
 8004704:	3728      	adds	r7, #40	@ 0x28
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40011000 	.word	0x40011000
 8004710:	40023800 	.word	0x40023800
 8004714:	40020000 	.word	0x40020000
 8004718:	20000a68 	.word	0x20000a68
 800471c:	40026440 	.word	0x40026440

08004720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004720:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004758 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004724:	f7ff fd3a 	bl	800419c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004728:	480c      	ldr	r0, [pc, #48]	@ (800475c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800472a:	490d      	ldr	r1, [pc, #52]	@ (8004760 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800472c:	4a0d      	ldr	r2, [pc, #52]	@ (8004764 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800472e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004730:	e002      	b.n	8004738 <LoopCopyDataInit>

08004732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004736:	3304      	adds	r3, #4

08004738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800473a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800473c:	d3f9      	bcc.n	8004732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800473e:	4a0a      	ldr	r2, [pc, #40]	@ (8004768 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004740:	4c0a      	ldr	r4, [pc, #40]	@ (800476c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004744:	e001      	b.n	800474a <LoopFillZerobss>

08004746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004748:	3204      	adds	r2, #4

0800474a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800474a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800474c:	d3fb      	bcc.n	8004746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800474e:	f007 fa1d 	bl	800bb8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004752:	f7fd fd8d 	bl	8002270 <main>
  bx  lr    
 8004756:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004758:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800475c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004760:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8004764:	0800c600 	.word	0x0800c600
  ldr r2, =_sbss
 8004768:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 800476c:	20000c14 	.word	0x20000c14

08004770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004770:	e7fe      	b.n	8004770 <ADC_IRQHandler>
	...

08004774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004778:	4b0e      	ldr	r3, [pc, #56]	@ (80047b4 <HAL_Init+0x40>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a0d      	ldr	r2, [pc, #52]	@ (80047b4 <HAL_Init+0x40>)
 800477e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004784:	4b0b      	ldr	r3, [pc, #44]	@ (80047b4 <HAL_Init+0x40>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a0a      	ldr	r2, [pc, #40]	@ (80047b4 <HAL_Init+0x40>)
 800478a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800478e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004790:	4b08      	ldr	r3, [pc, #32]	@ (80047b4 <HAL_Init+0x40>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a07      	ldr	r2, [pc, #28]	@ (80047b4 <HAL_Init+0x40>)
 8004796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800479a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800479c:	2003      	movs	r0, #3
 800479e:	f000 fc65 	bl	800506c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047a2:	200f      	movs	r0, #15
 80047a4:	f000 f808 	bl	80047b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047a8:	f7ff fbf2 	bl	8003f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40023c00 	.word	0x40023c00

080047b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047c0:	4b12      	ldr	r3, [pc, #72]	@ (800480c <HAL_InitTick+0x54>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	4b12      	ldr	r3, [pc, #72]	@ (8004810 <HAL_InitTick+0x58>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	4619      	mov	r1, r3
 80047ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80047d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fc7d 	bl	80050d6 <HAL_SYSTICK_Config>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e00e      	b.n	8004804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b0f      	cmp	r3, #15
 80047ea:	d80a      	bhi.n	8004802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047ec:	2200      	movs	r2, #0
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	f04f 30ff 	mov.w	r0, #4294967295
 80047f4:	f000 fc45 	bl	8005082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047f8:	4a06      	ldr	r2, [pc, #24]	@ (8004814 <HAL_InitTick+0x5c>)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	e000      	b.n	8004804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20000048 	.word	0x20000048
 8004810:	20000050 	.word	0x20000050
 8004814:	2000004c 	.word	0x2000004c

08004818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800481c:	4b06      	ldr	r3, [pc, #24]	@ (8004838 <HAL_IncTick+0x20>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	4b06      	ldr	r3, [pc, #24]	@ (800483c <HAL_IncTick+0x24>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4413      	add	r3, r2
 8004828:	4a04      	ldr	r2, [pc, #16]	@ (800483c <HAL_IncTick+0x24>)
 800482a:	6013      	str	r3, [r2, #0]
}
 800482c:	bf00      	nop
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	20000050 	.word	0x20000050
 800483c:	20000ac8 	.word	0x20000ac8

08004840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return uwTick;
 8004844:	4b03      	ldr	r3, [pc, #12]	@ (8004854 <HAL_GetTick+0x14>)
 8004846:	681b      	ldr	r3, [r3, #0]
}
 8004848:	4618      	mov	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	20000ac8 	.word	0x20000ac8

08004858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004860:	f7ff ffee 	bl	8004840 <HAL_GetTick>
 8004864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004870:	d005      	beq.n	800487e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004872:	4b0a      	ldr	r3, [pc, #40]	@ (800489c <HAL_Delay+0x44>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800487e:	bf00      	nop
 8004880:	f7ff ffde 	bl	8004840 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	429a      	cmp	r2, r3
 800488e:	d8f7      	bhi.n	8004880 <HAL_Delay+0x28>
  {
  }
}
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	20000050 	.word	0x20000050

080048a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e033      	b.n	800491e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fb fea8 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d118      	bne.n	8004910 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80048e6:	f023 0302 	bic.w	r3, r3, #2
 80048ea:	f043 0202 	orr.w	r2, r3, #2
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f9ee 	bl	8004cd4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	f023 0303 	bic.w	r3, r3, #3
 8004906:	f043 0201 	orr.w	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	641a      	str	r2, [r3, #64]	@ 0x40
 800490e:	e001      	b.n	8004914 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <HAL_ADC_Start+0x1a>
 800493e:	2302      	movs	r3, #2
 8004940:	e097      	b.n	8004a72 <HAL_ADC_Start+0x14a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b01      	cmp	r3, #1
 8004956:	d018      	beq.n	800498a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004968:	4b45      	ldr	r3, [pc, #276]	@ (8004a80 <HAL_ADC_Start+0x158>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a45      	ldr	r2, [pc, #276]	@ (8004a84 <HAL_ADC_Start+0x15c>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	0c9a      	lsrs	r2, r3, #18
 8004974:	4613      	mov	r3, r2
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	4413      	add	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800497c:	e002      	b.n	8004984 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	3b01      	subs	r3, #1
 8004982:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f9      	bne.n	800497e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b01      	cmp	r3, #1
 8004996:	d15f      	bne.n	8004a58 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d007      	beq.n	80049ca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80049c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049d6:	d106      	bne.n	80049e6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049dc:	f023 0206 	bic.w	r2, r3, #6
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80049e4:	e002      	b.n	80049ec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049f4:	4b24      	ldr	r3, [pc, #144]	@ (8004a88 <HAL_ADC_Start+0x160>)
 80049f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004a00:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10f      	bne.n	8004a2e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d129      	bne.n	8004a70 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004a2a:	609a      	str	r2, [r3, #8]
 8004a2c:	e020      	b.n	8004a70 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a16      	ldr	r2, [pc, #88]	@ (8004a8c <HAL_ADC_Start+0x164>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d11b      	bne.n	8004a70 <HAL_ADC_Start+0x148>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d114      	bne.n	8004a70 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004a54:	609a      	str	r2, [r3, #8]
 8004a56:	e00b      	b.n	8004a70 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5c:	f043 0210 	orr.w	r2, r3, #16
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a68:	f043 0201 	orr.w	r2, r3, #1
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	20000048 	.word	0x20000048
 8004a84:	431bde83 	.word	0x431bde83
 8004a88:	40012300 	.word	0x40012300
 8004a8c:	40012000 	.word	0x40012000

08004a90 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x1c>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e105      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x228>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b09      	cmp	r3, #9
 8004aba:	d925      	bls.n	8004b08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68d9      	ldr	r1, [r3, #12]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	4613      	mov	r3, r2
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	4413      	add	r3, r2
 8004ad0:	3b1e      	subs	r3, #30
 8004ad2:	2207      	movs	r2, #7
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	43da      	mvns	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	400a      	ands	r2, r1
 8004ae0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68d9      	ldr	r1, [r3, #12]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	4618      	mov	r0, r3
 8004af4:	4603      	mov	r3, r0
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	4403      	add	r3, r0
 8004afa:	3b1e      	subs	r3, #30
 8004afc:	409a      	lsls	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	60da      	str	r2, [r3, #12]
 8004b06:	e022      	b.n	8004b4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6919      	ldr	r1, [r3, #16]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	4613      	mov	r3, r2
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	4413      	add	r3, r2
 8004b1c:	2207      	movs	r2, #7
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43da      	mvns	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	400a      	ands	r2, r1
 8004b2a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6919      	ldr	r1, [r3, #16]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	4403      	add	r3, r0
 8004b44:	409a      	lsls	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b06      	cmp	r3, #6
 8004b54:	d824      	bhi.n	8004ba0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	3b05      	subs	r3, #5
 8004b68:	221f      	movs	r2, #31
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43da      	mvns	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	400a      	ands	r2, r1
 8004b76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	4618      	mov	r0, r3
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	3b05      	subs	r3, #5
 8004b92:	fa00 f203 	lsl.w	r2, r0, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b9e:	e04c      	b.n	8004c3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b0c      	cmp	r3, #12
 8004ba6:	d824      	bhi.n	8004bf2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3b23      	subs	r3, #35	@ 0x23
 8004bba:	221f      	movs	r2, #31
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	43da      	mvns	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	400a      	ands	r2, r1
 8004bc8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	3b23      	subs	r3, #35	@ 0x23
 8004be4:	fa00 f203 	lsl.w	r2, r0, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bf0:	e023      	b.n	8004c3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	3b41      	subs	r3, #65	@ 0x41
 8004c04:	221f      	movs	r2, #31
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43da      	mvns	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	400a      	ands	r2, r1
 8004c12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	4618      	mov	r0, r3
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	3b41      	subs	r3, #65	@ 0x41
 8004c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c3a:	4b22      	ldr	r3, [pc, #136]	@ (8004cc4 <HAL_ADC_ConfigChannel+0x234>)
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a21      	ldr	r2, [pc, #132]	@ (8004cc8 <HAL_ADC_ConfigChannel+0x238>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d109      	bne.n	8004c5c <HAL_ADC_ConfigChannel+0x1cc>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b12      	cmp	r3, #18
 8004c4e:	d105      	bne.n	8004c5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a19      	ldr	r2, [pc, #100]	@ (8004cc8 <HAL_ADC_ConfigChannel+0x238>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d123      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x21e>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d003      	beq.n	8004c76 <HAL_ADC_ConfigChannel+0x1e6>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b11      	cmp	r3, #17
 8004c74:	d11b      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b10      	cmp	r3, #16
 8004c88:	d111      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c8a:	4b10      	ldr	r3, [pc, #64]	@ (8004ccc <HAL_ADC_ConfigChannel+0x23c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a10      	ldr	r2, [pc, #64]	@ (8004cd0 <HAL_ADC_ConfigChannel+0x240>)
 8004c90:	fba2 2303 	umull	r2, r3, r2, r3
 8004c94:	0c9a      	lsrs	r2, r3, #18
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004ca0:	e002      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f9      	bne.n	8004ca2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	40012300 	.word	0x40012300
 8004cc8:	40012000 	.word	0x40012000
 8004ccc:	20000048 	.word	0x20000048
 8004cd0:	431bde83 	.word	0x431bde83

08004cd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cdc:	4b79      	ldr	r3, [pc, #484]	@ (8004ec4 <ADC_Init+0x1f0>)
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6859      	ldr	r1, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	021a      	lsls	r2, r3, #8
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004d2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6859      	ldr	r1, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6899      	ldr	r1, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d66:	4a58      	ldr	r2, [pc, #352]	@ (8004ec8 <ADC_Init+0x1f4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d022      	beq.n	8004db2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6899      	ldr	r1, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004d9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6899      	ldr	r1, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	609a      	str	r2, [r3, #8]
 8004db0:	e00f      	b.n	8004dd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004dc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004dd0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0202 	bic.w	r2, r2, #2
 8004de0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6899      	ldr	r1, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	7e1b      	ldrb	r3, [r3, #24]
 8004dec:	005a      	lsls	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01b      	beq.n	8004e38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e0e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004e1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6859      	ldr	r1, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	035a      	lsls	r2, r3, #13
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
 8004e36:	e007      	b.n	8004e48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e46:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004e56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	051a      	lsls	r2, r3, #20
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6899      	ldr	r1, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e8a:	025a      	lsls	r2, r3, #9
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6899      	ldr	r1, [r3, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	029a      	lsls	r2, r3, #10
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	609a      	str	r2, [r3, #8]
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40012300 	.word	0x40012300
 8004ec8:	0f000001 	.word	0x0f000001

08004ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004edc:	4b0c      	ldr	r3, [pc, #48]	@ (8004f10 <__NVIC_SetPriorityGrouping+0x44>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ee8:	4013      	ands	r3, r2
 8004eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ef4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004efe:	4a04      	ldr	r2, [pc, #16]	@ (8004f10 <__NVIC_SetPriorityGrouping+0x44>)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	60d3      	str	r3, [r2, #12]
}
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	e000ed00 	.word	0xe000ed00

08004f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f18:	4b04      	ldr	r3, [pc, #16]	@ (8004f2c <__NVIC_GetPriorityGrouping+0x18>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	0a1b      	lsrs	r3, r3, #8
 8004f1e:	f003 0307 	and.w	r3, r3, #7
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	e000ed00 	.word	0xe000ed00

08004f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	db0b      	blt.n	8004f5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	f003 021f 	and.w	r2, r3, #31
 8004f48:	4907      	ldr	r1, [pc, #28]	@ (8004f68 <__NVIC_EnableIRQ+0x38>)
 8004f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	2001      	movs	r0, #1
 8004f52:	fa00 f202 	lsl.w	r2, r0, r2
 8004f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	e000e100 	.word	0xe000e100

08004f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	6039      	str	r1, [r7, #0]
 8004f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	db0a      	blt.n	8004f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	490c      	ldr	r1, [pc, #48]	@ (8004fb8 <__NVIC_SetPriority+0x4c>)
 8004f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8a:	0112      	lsls	r2, r2, #4
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	440b      	add	r3, r1
 8004f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f94:	e00a      	b.n	8004fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	4908      	ldr	r1, [pc, #32]	@ (8004fbc <__NVIC_SetPriority+0x50>)
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	3b04      	subs	r3, #4
 8004fa4:	0112      	lsls	r2, r2, #4
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	440b      	add	r3, r1
 8004faa:	761a      	strb	r2, [r3, #24]
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	e000e100 	.word	0xe000e100
 8004fbc:	e000ed00 	.word	0xe000ed00

08004fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b089      	sub	sp, #36	@ 0x24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f1c3 0307 	rsb	r3, r3, #7
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	bf28      	it	cs
 8004fde:	2304      	movcs	r3, #4
 8004fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	2b06      	cmp	r3, #6
 8004fe8:	d902      	bls.n	8004ff0 <NVIC_EncodePriority+0x30>
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	3b03      	subs	r3, #3
 8004fee:	e000      	b.n	8004ff2 <NVIC_EncodePriority+0x32>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	43da      	mvns	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	401a      	ands	r2, r3
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005008:	f04f 31ff 	mov.w	r1, #4294967295
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	fa01 f303 	lsl.w	r3, r1, r3
 8005012:	43d9      	mvns	r1, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005018:	4313      	orrs	r3, r2
         );
}
 800501a:	4618      	mov	r0, r3
 800501c:	3724      	adds	r7, #36	@ 0x24
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
	...

08005028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3b01      	subs	r3, #1
 8005034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005038:	d301      	bcc.n	800503e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800503a:	2301      	movs	r3, #1
 800503c:	e00f      	b.n	800505e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800503e:	4a0a      	ldr	r2, [pc, #40]	@ (8005068 <SysTick_Config+0x40>)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3b01      	subs	r3, #1
 8005044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005046:	210f      	movs	r1, #15
 8005048:	f04f 30ff 	mov.w	r0, #4294967295
 800504c:	f7ff ff8e 	bl	8004f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005050:	4b05      	ldr	r3, [pc, #20]	@ (8005068 <SysTick_Config+0x40>)
 8005052:	2200      	movs	r2, #0
 8005054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005056:	4b04      	ldr	r3, [pc, #16]	@ (8005068 <SysTick_Config+0x40>)
 8005058:	2207      	movs	r2, #7
 800505a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	e000e010 	.word	0xe000e010

0800506c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff ff29 	bl	8004ecc <__NVIC_SetPriorityGrouping>
}
 800507a:	bf00      	nop
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005082:	b580      	push	{r7, lr}
 8005084:	b086      	sub	sp, #24
 8005086:	af00      	add	r7, sp, #0
 8005088:	4603      	mov	r3, r0
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
 800508e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005094:	f7ff ff3e 	bl	8004f14 <__NVIC_GetPriorityGrouping>
 8005098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	6978      	ldr	r0, [r7, #20]
 80050a0:	f7ff ff8e 	bl	8004fc0 <NVIC_EncodePriority>
 80050a4:	4602      	mov	r2, r0
 80050a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050aa:	4611      	mov	r1, r2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff ff5d 	bl	8004f6c <__NVIC_SetPriority>
}
 80050b2:	bf00      	nop
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	4603      	mov	r3, r0
 80050c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff ff31 	bl	8004f30 <__NVIC_EnableIRQ>
}
 80050ce:	bf00      	nop
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff ffa2 	bl	8005028 <SysTick_Config>
 80050e4:	4603      	mov	r3, r0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80050fc:	f7ff fba0 	bl	8004840 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e099      	b.n	8005240 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0201 	bic.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800512c:	e00f      	b.n	800514e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800512e:	f7ff fb87 	bl	8004840 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b05      	cmp	r3, #5
 800513a:	d908      	bls.n	800514e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2220      	movs	r2, #32
 8005140:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2203      	movs	r2, #3
 8005146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e078      	b.n	8005240 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e8      	bne.n	800512e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4b38      	ldr	r3, [pc, #224]	@ (8005248 <HAL_DMA_Init+0x158>)
 8005168:	4013      	ands	r3, r2
 800516a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800517a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005186:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005192:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d107      	bne.n	80051b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b0:	4313      	orrs	r3, r2
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0307 	bic.w	r3, r3, #7
 80051ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d117      	bne.n	8005212 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00e      	beq.n	8005212 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 faab 	bl	8005750 <DMA_CheckFifoParam>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2240      	movs	r2, #64	@ 0x40
 8005204:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800520e:	2301      	movs	r3, #1
 8005210:	e016      	b.n	8005240 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fa62 	bl	80056e4 <DMA_CalcBaseAndBitshift>
 8005220:	4603      	mov	r3, r0
 8005222:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005228:	223f      	movs	r2, #63	@ 0x3f
 800522a:	409a      	lsls	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	f010803f 	.word	0xf010803f

0800524c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005262:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_DMA_Start_IT+0x26>
 800526e:	2302      	movs	r3, #2
 8005270:	e040      	b.n	80052f4 <HAL_DMA_Start_IT+0xa8>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	d12f      	bne.n	80052e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2202      	movs	r2, #2
 800528a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68b9      	ldr	r1, [r7, #8]
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 f9f4 	bl	8005688 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a4:	223f      	movs	r2, #63	@ 0x3f
 80052a6:	409a      	lsls	r2, r3
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0216 	orr.w	r2, r2, #22
 80052ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d007      	beq.n	80052d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0208 	orr.w	r2, r2, #8
 80052d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	e005      	b.n	80052f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80052ee:	2302      	movs	r3, #2
 80052f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d004      	beq.n	800531a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2280      	movs	r2, #128	@ 0x80
 8005314:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e00c      	b.n	8005334 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2205      	movs	r2, #5
 800531e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0201 	bic.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800534c:	4b8e      	ldr	r3, [pc, #568]	@ (8005588 <HAL_DMA_IRQHandler+0x248>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a8e      	ldr	r2, [pc, #568]	@ (800558c <HAL_DMA_IRQHandler+0x24c>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	0a9b      	lsrs	r3, r3, #10
 8005358:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800536a:	2208      	movs	r2, #8
 800536c:	409a      	lsls	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4013      	ands	r3, r2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d01a      	beq.n	80053ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d013      	beq.n	80053ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0204 	bic.w	r2, r2, #4
 8005392:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005398:	2208      	movs	r2, #8
 800539a:	409a      	lsls	r2, r3
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a4:	f043 0201 	orr.w	r2, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b0:	2201      	movs	r2, #1
 80053b2:	409a      	lsls	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4013      	ands	r3, r2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d012      	beq.n	80053e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00b      	beq.n	80053e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ce:	2201      	movs	r2, #1
 80053d0:	409a      	lsls	r2, r3
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053da:	f043 0202 	orr.w	r2, r3, #2
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e6:	2204      	movs	r2, #4
 80053e8:	409a      	lsls	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d012      	beq.n	8005418 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00b      	beq.n	8005418 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005404:	2204      	movs	r2, #4
 8005406:	409a      	lsls	r2, r3
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005410:	f043 0204 	orr.w	r2, r3, #4
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800541c:	2210      	movs	r2, #16
 800541e:	409a      	lsls	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4013      	ands	r3, r2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d043      	beq.n	80054b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d03c      	beq.n	80054b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800543a:	2210      	movs	r2, #16
 800543c:	409a      	lsls	r2, r3
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d018      	beq.n	8005482 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d108      	bne.n	8005470 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	d024      	beq.n	80054b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	4798      	blx	r3
 800546e:	e01f      	b.n	80054b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01b      	beq.n	80054b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	4798      	blx	r3
 8005480:	e016      	b.n	80054b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548c:	2b00      	cmp	r3, #0
 800548e:	d107      	bne.n	80054a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0208 	bic.w	r2, r2, #8
 800549e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b4:	2220      	movs	r2, #32
 80054b6:	409a      	lsls	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 808f 	beq.w	80055e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 8087 	beq.w	80055e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d6:	2220      	movs	r2, #32
 80054d8:	409a      	lsls	r2, r3
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b05      	cmp	r3, #5
 80054e8:	d136      	bne.n	8005558 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0216 	bic.w	r2, r2, #22
 80054f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695a      	ldr	r2, [r3, #20]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005508:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d103      	bne.n	800551a <HAL_DMA_IRQHandler+0x1da>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0208 	bic.w	r2, r2, #8
 8005528:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800552e:	223f      	movs	r2, #63	@ 0x3f
 8005530:	409a      	lsls	r2, r3
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800554a:	2b00      	cmp	r3, #0
 800554c:	d07e      	beq.n	800564c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	4798      	blx	r3
        }
        return;
 8005556:	e079      	b.n	800564c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01d      	beq.n	80055a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10d      	bne.n	8005590 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005578:	2b00      	cmp	r3, #0
 800557a:	d031      	beq.n	80055e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	4798      	blx	r3
 8005584:	e02c      	b.n	80055e0 <HAL_DMA_IRQHandler+0x2a0>
 8005586:	bf00      	nop
 8005588:	20000048 	.word	0x20000048
 800558c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d023      	beq.n	80055e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	4798      	blx	r3
 80055a0:	e01e      	b.n	80055e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10f      	bne.n	80055d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0210 	bic.w	r2, r2, #16
 80055be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d032      	beq.n	800564e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d022      	beq.n	800563a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2205      	movs	r2, #5
 80055f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0201 	bic.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	3301      	adds	r3, #1
 8005610:	60bb      	str	r3, [r7, #8]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	429a      	cmp	r2, r3
 8005616:	d307      	bcc.n	8005628 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f2      	bne.n	800560c <HAL_DMA_IRQHandler+0x2cc>
 8005626:	e000      	b.n	800562a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005628:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	4798      	blx	r3
 800564a:	e000      	b.n	800564e <HAL_DMA_IRQHandler+0x30e>
        return;
 800564c:	bf00      	nop
    }
  }
}
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005662:	b2db      	uxtb	r3, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800567c:	4618      	mov	r0, r3
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80056a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	2b40      	cmp	r3, #64	@ 0x40
 80056b4:	d108      	bne.n	80056c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80056c6:	e007      	b.n	80056d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	60da      	str	r2, [r3, #12]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	3b10      	subs	r3, #16
 80056f4:	4a14      	ldr	r2, [pc, #80]	@ (8005748 <DMA_CalcBaseAndBitshift+0x64>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056fe:	4a13      	ldr	r2, [pc, #76]	@ (800574c <DMA_CalcBaseAndBitshift+0x68>)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b03      	cmp	r3, #3
 8005710:	d909      	bls.n	8005726 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800571a:	f023 0303 	bic.w	r3, r3, #3
 800571e:	1d1a      	adds	r2, r3, #4
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	659a      	str	r2, [r3, #88]	@ 0x58
 8005724:	e007      	b.n	8005736 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800572e:	f023 0303 	bic.w	r3, r3, #3
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	aaaaaaab 	.word	0xaaaaaaab
 800574c:	0800c5b4 	.word	0x0800c5b4

08005750 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005760:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d11f      	bne.n	80057aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b03      	cmp	r3, #3
 800576e:	d856      	bhi.n	800581e <DMA_CheckFifoParam+0xce>
 8005770:	a201      	add	r2, pc, #4	@ (adr r2, 8005778 <DMA_CheckFifoParam+0x28>)
 8005772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005776:	bf00      	nop
 8005778:	08005789 	.word	0x08005789
 800577c:	0800579b 	.word	0x0800579b
 8005780:	08005789 	.word	0x08005789
 8005784:	0800581f 	.word	0x0800581f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d046      	beq.n	8005822 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005798:	e043      	b.n	8005822 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057a2:	d140      	bne.n	8005826 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057a8:	e03d      	b.n	8005826 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057b2:	d121      	bne.n	80057f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d837      	bhi.n	800582a <DMA_CheckFifoParam+0xda>
 80057ba:	a201      	add	r2, pc, #4	@ (adr r2, 80057c0 <DMA_CheckFifoParam+0x70>)
 80057bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c0:	080057d1 	.word	0x080057d1
 80057c4:	080057d7 	.word	0x080057d7
 80057c8:	080057d1 	.word	0x080057d1
 80057cc:	080057e9 	.word	0x080057e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]
      break;
 80057d4:	e030      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d025      	beq.n	800582e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057e6:	e022      	b.n	800582e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057f0:	d11f      	bne.n	8005832 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057f6:	e01c      	b.n	8005832 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d903      	bls.n	8005806 <DMA_CheckFifoParam+0xb6>
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2b03      	cmp	r3, #3
 8005802:	d003      	beq.n	800580c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005804:	e018      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	73fb      	strb	r3, [r7, #15]
      break;
 800580a:	e015      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00e      	beq.n	8005836 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
      break;
 800581c:	e00b      	b.n	8005836 <DMA_CheckFifoParam+0xe6>
      break;
 800581e:	bf00      	nop
 8005820:	e00a      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
      break;
 8005822:	bf00      	nop
 8005824:	e008      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
      break;
 8005826:	bf00      	nop
 8005828:	e006      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
      break;
 800582a:	bf00      	nop
 800582c:	e004      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
      break;
 800582e:	bf00      	nop
 8005830:	e002      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
      break;   
 8005832:	bf00      	nop
 8005834:	e000      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
      break;
 8005836:	bf00      	nop
    }
  } 
  
  return status; 
 8005838:	7bfb      	ldrb	r3, [r7, #15]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop

08005848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005848:	b480      	push	{r7}
 800584a:	b089      	sub	sp, #36	@ 0x24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005852:	2300      	movs	r3, #0
 8005854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005856:	2300      	movs	r3, #0
 8005858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800585a:	2300      	movs	r3, #0
 800585c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
 8005862:	e159      	b.n	8005b18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005864:	2201      	movs	r2, #1
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4013      	ands	r3, r2
 8005876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	429a      	cmp	r2, r3
 800587e:	f040 8148 	bne.w	8005b12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	2b01      	cmp	r3, #1
 800588c:	d005      	beq.n	800589a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005896:	2b02      	cmp	r3, #2
 8005898:	d130      	bne.n	80058fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	2203      	movs	r2, #3
 80058a6:	fa02 f303 	lsl.w	r3, r2, r3
 80058aa:	43db      	mvns	r3, r3
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	4013      	ands	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058d0:	2201      	movs	r2, #1
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	43db      	mvns	r3, r3
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	4013      	ands	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	091b      	lsrs	r3, r3, #4
 80058e6:	f003 0201 	and.w	r2, r3, #1
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f003 0303 	and.w	r3, r3, #3
 8005904:	2b03      	cmp	r3, #3
 8005906:	d017      	beq.n	8005938 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	2203      	movs	r2, #3
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	43db      	mvns	r3, r3
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4013      	ands	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	4313      	orrs	r3, r2
 8005930:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f003 0303 	and.w	r3, r3, #3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d123      	bne.n	800598c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	08da      	lsrs	r2, r3, #3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3208      	adds	r2, #8
 800594c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005950:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	220f      	movs	r2, #15
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	43db      	mvns	r3, r3
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	4013      	ands	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	4313      	orrs	r3, r2
 800597c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	08da      	lsrs	r2, r3, #3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	3208      	adds	r2, #8
 8005986:	69b9      	ldr	r1, [r7, #24]
 8005988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	2203      	movs	r2, #3
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	43db      	mvns	r3, r3
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	4013      	ands	r3, r2
 80059a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f003 0203 	and.w	r2, r3, #3
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80a2 	beq.w	8005b12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ce:	2300      	movs	r3, #0
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	4b57      	ldr	r3, [pc, #348]	@ (8005b30 <HAL_GPIO_Init+0x2e8>)
 80059d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d6:	4a56      	ldr	r2, [pc, #344]	@ (8005b30 <HAL_GPIO_Init+0x2e8>)
 80059d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80059de:	4b54      	ldr	r3, [pc, #336]	@ (8005b30 <HAL_GPIO_Init+0x2e8>)
 80059e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059ea:	4a52      	ldr	r2, [pc, #328]	@ (8005b34 <HAL_GPIO_Init+0x2ec>)
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	089b      	lsrs	r3, r3, #2
 80059f0:	3302      	adds	r3, #2
 80059f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	220f      	movs	r2, #15
 8005a02:	fa02 f303 	lsl.w	r3, r2, r3
 8005a06:	43db      	mvns	r3, r3
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a49      	ldr	r2, [pc, #292]	@ (8005b38 <HAL_GPIO_Init+0x2f0>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d019      	beq.n	8005a4a <HAL_GPIO_Init+0x202>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a48      	ldr	r2, [pc, #288]	@ (8005b3c <HAL_GPIO_Init+0x2f4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d013      	beq.n	8005a46 <HAL_GPIO_Init+0x1fe>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a47      	ldr	r2, [pc, #284]	@ (8005b40 <HAL_GPIO_Init+0x2f8>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00d      	beq.n	8005a42 <HAL_GPIO_Init+0x1fa>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a46      	ldr	r2, [pc, #280]	@ (8005b44 <HAL_GPIO_Init+0x2fc>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d007      	beq.n	8005a3e <HAL_GPIO_Init+0x1f6>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a45      	ldr	r2, [pc, #276]	@ (8005b48 <HAL_GPIO_Init+0x300>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d101      	bne.n	8005a3a <HAL_GPIO_Init+0x1f2>
 8005a36:	2304      	movs	r3, #4
 8005a38:	e008      	b.n	8005a4c <HAL_GPIO_Init+0x204>
 8005a3a:	2307      	movs	r3, #7
 8005a3c:	e006      	b.n	8005a4c <HAL_GPIO_Init+0x204>
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e004      	b.n	8005a4c <HAL_GPIO_Init+0x204>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e002      	b.n	8005a4c <HAL_GPIO_Init+0x204>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e000      	b.n	8005a4c <HAL_GPIO_Init+0x204>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	f002 0203 	and.w	r2, r2, #3
 8005a52:	0092      	lsls	r2, r2, #2
 8005a54:	4093      	lsls	r3, r2
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a5c:	4935      	ldr	r1, [pc, #212]	@ (8005b34 <HAL_GPIO_Init+0x2ec>)
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	089b      	lsrs	r3, r3, #2
 8005a62:	3302      	adds	r3, #2
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a6a:	4b38      	ldr	r3, [pc, #224]	@ (8005b4c <HAL_GPIO_Init+0x304>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	43db      	mvns	r3, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4013      	ands	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8005b4c <HAL_GPIO_Init+0x304>)
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a94:	4b2d      	ldr	r3, [pc, #180]	@ (8005b4c <HAL_GPIO_Init+0x304>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ab8:	4a24      	ldr	r2, [pc, #144]	@ (8005b4c <HAL_GPIO_Init+0x304>)
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005abe:	4b23      	ldr	r3, [pc, #140]	@ (8005b4c <HAL_GPIO_Init+0x304>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4013      	ands	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8005b4c <HAL_GPIO_Init+0x304>)
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ae8:	4b18      	ldr	r3, [pc, #96]	@ (8005b4c <HAL_GPIO_Init+0x304>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	43db      	mvns	r3, r3
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	4013      	ands	r3, r2
 8005af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8005b4c <HAL_GPIO_Init+0x304>)
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	3301      	adds	r3, #1
 8005b16:	61fb      	str	r3, [r7, #28]
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	2b0f      	cmp	r3, #15
 8005b1c:	f67f aea2 	bls.w	8005864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b20:	bf00      	nop
 8005b22:	bf00      	nop
 8005b24:	3724      	adds	r7, #36	@ 0x24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40023800 	.word	0x40023800
 8005b34:	40013800 	.word	0x40013800
 8005b38:	40020000 	.word	0x40020000
 8005b3c:	40020400 	.word	0x40020400
 8005b40:	40020800 	.word	0x40020800
 8005b44:	40020c00 	.word	0x40020c00
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	40013c00 	.word	0x40013c00

08005b50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	887b      	ldrh	r3, [r7, #2]
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	73fb      	strb	r3, [r7, #15]
 8005b6c:	e001      	b.n	8005b72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	807b      	strh	r3, [r7, #2]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b90:	787b      	ldrb	r3, [r7, #1]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b96:	887a      	ldrh	r2, [r7, #2]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b9c:	e003      	b.n	8005ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b9e:	887b      	ldrh	r3, [r7, #2]
 8005ba0:	041a      	lsls	r2, r3, #16
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	619a      	str	r2, [r3, #24]
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
	...

08005bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e12b      	b.n	8005e1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d106      	bne.n	8005be0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7fc fa7a 	bl	80020d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2224      	movs	r2, #36	@ 0x24
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0201 	bic.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c18:	f003 f8ec 	bl	8008df4 <HAL_RCC_GetPCLK1Freq>
 8005c1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	4a81      	ldr	r2, [pc, #516]	@ (8005e28 <HAL_I2C_Init+0x274>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d807      	bhi.n	8005c38 <HAL_I2C_Init+0x84>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4a80      	ldr	r2, [pc, #512]	@ (8005e2c <HAL_I2C_Init+0x278>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	bf94      	ite	ls
 8005c30:	2301      	movls	r3, #1
 8005c32:	2300      	movhi	r3, #0
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	e006      	b.n	8005c46 <HAL_I2C_Init+0x92>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4a7d      	ldr	r2, [pc, #500]	@ (8005e30 <HAL_I2C_Init+0x27c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	bf94      	ite	ls
 8005c40:	2301      	movls	r3, #1
 8005c42:	2300      	movhi	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e0e7      	b.n	8005e1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4a78      	ldr	r2, [pc, #480]	@ (8005e34 <HAL_I2C_Init+0x280>)
 8005c52:	fba2 2303 	umull	r2, r3, r2, r3
 8005c56:	0c9b      	lsrs	r3, r3, #18
 8005c58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	4a6a      	ldr	r2, [pc, #424]	@ (8005e28 <HAL_I2C_Init+0x274>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d802      	bhi.n	8005c88 <HAL_I2C_Init+0xd4>
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	3301      	adds	r3, #1
 8005c86:	e009      	b.n	8005c9c <HAL_I2C_Init+0xe8>
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	4a69      	ldr	r2, [pc, #420]	@ (8005e38 <HAL_I2C_Init+0x284>)
 8005c94:	fba2 2303 	umull	r2, r3, r2, r3
 8005c98:	099b      	lsrs	r3, r3, #6
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005cae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	495c      	ldr	r1, [pc, #368]	@ (8005e28 <HAL_I2C_Init+0x274>)
 8005cb8:	428b      	cmp	r3, r1
 8005cba:	d819      	bhi.n	8005cf0 <HAL_I2C_Init+0x13c>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	1e59      	subs	r1, r3, #1
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cca:	1c59      	adds	r1, r3, #1
 8005ccc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005cd0:	400b      	ands	r3, r1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <HAL_I2C_Init+0x138>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	1e59      	subs	r1, r3, #1
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cea:	e051      	b.n	8005d90 <HAL_I2C_Init+0x1dc>
 8005cec:	2304      	movs	r3, #4
 8005cee:	e04f      	b.n	8005d90 <HAL_I2C_Init+0x1dc>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d111      	bne.n	8005d1c <HAL_I2C_Init+0x168>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	1e58      	subs	r0, r3, #1
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6859      	ldr	r1, [r3, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	440b      	add	r3, r1
 8005d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	bf0c      	ite	eq
 8005d14:	2301      	moveq	r3, #1
 8005d16:	2300      	movne	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	e012      	b.n	8005d42 <HAL_I2C_Init+0x18e>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	1e58      	subs	r0, r3, #1
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6859      	ldr	r1, [r3, #4]
 8005d24:	460b      	mov	r3, r1
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	440b      	add	r3, r1
 8005d2a:	0099      	lsls	r1, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d32:	3301      	adds	r3, #1
 8005d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bf0c      	ite	eq
 8005d3c:	2301      	moveq	r3, #1
 8005d3e:	2300      	movne	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <HAL_I2C_Init+0x196>
 8005d46:	2301      	movs	r3, #1
 8005d48:	e022      	b.n	8005d90 <HAL_I2C_Init+0x1dc>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10e      	bne.n	8005d70 <HAL_I2C_Init+0x1bc>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	1e58      	subs	r0, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6859      	ldr	r1, [r3, #4]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	440b      	add	r3, r1
 8005d60:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d64:	3301      	adds	r3, #1
 8005d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d6e:	e00f      	b.n	8005d90 <HAL_I2C_Init+0x1dc>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	1e58      	subs	r0, r3, #1
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6859      	ldr	r1, [r3, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	0099      	lsls	r1, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d86:	3301      	adds	r3, #1
 8005d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	6809      	ldr	r1, [r1, #0]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69da      	ldr	r2, [r3, #28]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005dbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6911      	ldr	r1, [r2, #16]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	68d2      	ldr	r2, [r2, #12]
 8005dca:	4311      	orrs	r1, r2
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6812      	ldr	r2, [r2, #0]
 8005dd0:	430b      	orrs	r3, r1
 8005dd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	695a      	ldr	r2, [r3, #20]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0201 	orr.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	000186a0 	.word	0x000186a0
 8005e2c:	001e847f 	.word	0x001e847f
 8005e30:	003d08ff 	.word	0x003d08ff
 8005e34:	431bde83 	.word	0x431bde83
 8005e38:	10624dd3 	.word	0x10624dd3

08005e3c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e4e:	2b80      	cmp	r3, #128	@ 0x80
 8005e50:	d103      	bne.n	8005e5a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2200      	movs	r2, #0
 8005e58:	611a      	str	r2, [r3, #16]
  }
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
	...

08005e68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	607a      	str	r2, [r7, #4]
 8005e72:	461a      	mov	r2, r3
 8005e74:	460b      	mov	r3, r1
 8005e76:	817b      	strh	r3, [r7, #10]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e7c:	f7fe fce0 	bl	8004840 <HAL_GetTick>
 8005e80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	f040 80e0 	bne.w	8006050 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	2319      	movs	r3, #25
 8005e96:	2201      	movs	r2, #1
 8005e98:	4970      	ldr	r1, [pc, #448]	@ (800605c <HAL_I2C_Master_Transmit+0x1f4>)
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f002 f940 	bl	8008120 <I2C_WaitOnFlagUntilTimeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e0d3      	b.n	8006052 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_I2C_Master_Transmit+0x50>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e0cc      	b.n	8006052 <HAL_I2C_Master_Transmit+0x1ea>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d007      	beq.n	8005ede <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f042 0201 	orr.w	r2, r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2221      	movs	r2, #33	@ 0x21
 8005ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2210      	movs	r2, #16
 8005efa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	893a      	ldrh	r2, [r7, #8]
 8005f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4a50      	ldr	r2, [pc, #320]	@ (8006060 <HAL_I2C_Master_Transmit+0x1f8>)
 8005f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005f20:	8979      	ldrh	r1, [r7, #10]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	6a3a      	ldr	r2, [r7, #32]
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f001 feb4 	bl	8007c94 <I2C_MasterRequestWrite>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e08d      	b.n	8006052 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f36:	2300      	movs	r3, #0
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	613b      	str	r3, [r7, #16]
 8005f4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005f4c:	e066      	b.n	800601c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	6a39      	ldr	r1, [r7, #32]
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f002 f9fe 	bl	8008354 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00d      	beq.n	8005f7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	d107      	bne.n	8005f76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e06b      	b.n	8006052 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7e:	781a      	ldrb	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d11b      	bne.n	8005ff0 <HAL_I2C_Master_Transmit+0x188>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d017      	beq.n	8005ff0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc4:	781a      	ldrb	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	6a39      	ldr	r1, [r7, #32]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f002 f9f5 	bl	80083e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00d      	beq.n	800601c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006004:	2b04      	cmp	r3, #4
 8006006:	d107      	bne.n	8006018 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006016:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e01a      	b.n	8006052 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006020:	2b00      	cmp	r3, #0
 8006022:	d194      	bne.n	8005f4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	e000      	b.n	8006052 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006050:	2302      	movs	r3, #2
  }
}
 8006052:	4618      	mov	r0, r3
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	00100002 	.word	0x00100002
 8006060:	ffff0000 	.word	0xffff0000

08006064 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	607a      	str	r2, [r7, #4]
 800606e:	461a      	mov	r2, r3
 8006070:	460b      	mov	r3, r1
 8006072:	817b      	strh	r3, [r7, #10]
 8006074:	4613      	mov	r3, r2
 8006076:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b20      	cmp	r3, #32
 8006086:	f040 8109 	bne.w	800629c <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800608a:	4b87      	ldr	r3, [pc, #540]	@ (80062a8 <HAL_I2C_Master_Transmit_DMA+0x244>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	08db      	lsrs	r3, r3, #3
 8006090:	4a86      	ldr	r2, [pc, #536]	@ (80062ac <HAL_I2C_Master_Transmit_DMA+0x248>)
 8006092:	fba2 2303 	umull	r2, r3, r2, r3
 8006096:	0a1a      	lsrs	r2, r3, #8
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	009a      	lsls	r2, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d112      	bne.n	80060d6 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ca:	f043 0220 	orr.w	r2, r3, #32
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80060d2:	2302      	movs	r3, #2
 80060d4:	e0e3      	b.n	800629e <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d0df      	beq.n	80060a4 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d101      	bne.n	80060f2 <HAL_I2C_Master_Transmit_DMA+0x8e>
 80060ee:	2302      	movs	r3, #2
 80060f0:	e0d5      	b.n	800629e <HAL_I2C_Master_Transmit_DMA+0x23a>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b01      	cmp	r3, #1
 8006106:	d007      	beq.n	8006118 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006126:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2221      	movs	r2, #33	@ 0x21
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2210      	movs	r2, #16
 8006134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	893a      	ldrh	r2, [r7, #8]
 8006148:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800614e:	b29a      	uxth	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4a56      	ldr	r2, [pc, #344]	@ (80062b0 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8006158:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800615a:	897a      	ldrh	r2, [r7, #10]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006164:	2b00      	cmp	r3, #0
 8006166:	d07b      	beq.n	8006260 <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800616c:	2b00      	cmp	r3, #0
 800616e:	d02a      	beq.n	80061c6 <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006174:	4a4f      	ldr	r2, [pc, #316]	@ (80062b4 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8006176:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800617c:	4a4e      	ldr	r2, [pc, #312]	@ (80062b8 <HAL_I2C_Master_Transmit_DMA+0x254>)
 800617e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006184:	2200      	movs	r2, #0
 8006186:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800618c:	2200      	movs	r2, #0
 800618e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006194:	2200      	movs	r2, #0
 8006196:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800619c:	2200      	movs	r2, #0
 800619e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a8:	4619      	mov	r1, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3310      	adds	r3, #16
 80061b0:	461a      	mov	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b6:	f7ff f849 	bl	800524c <HAL_DMA_Start_IT>
 80061ba:	4603      	mov	r3, r0
 80061bc:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80061be:	7dfb      	ldrb	r3, [r7, #23]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d139      	bne.n	8006238 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 80061c4:	e013      	b.n	80061ee <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e057      	b.n	800629e <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006204:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006214:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006224:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	e02f      	b.n	8006298 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624c:	f043 0210 	orr.w	r2, r3, #16
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e01e      	b.n	800629e <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800626e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800627e:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8006296:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	e000      	b.n	800629e <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 800629c:	2302      	movs	r3, #2
  }
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20000048 	.word	0x20000048
 80062ac:	14f8b589 	.word	0x14f8b589
 80062b0:	ffff0000 	.word	0xffff0000
 80062b4:	08007d99 	.word	0x08007d99
 80062b8:	08007f57 	.word	0x08007f57

080062bc <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	607a      	str	r2, [r7, #4]
 80062c6:	461a      	mov	r2, r3
 80062c8:	460b      	mov	r3, r1
 80062ca:	817b      	strh	r3, [r7, #10]
 80062cc:	4613      	mov	r3, r2
 80062ce:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b20      	cmp	r3, #32
 80062de:	f040 8109 	bne.w	80064f4 <HAL_I2C_Master_Receive_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80062e2:	4b87      	ldr	r3, [pc, #540]	@ (8006500 <HAL_I2C_Master_Receive_DMA+0x244>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	08db      	lsrs	r3, r3, #3
 80062e8:	4a86      	ldr	r2, [pc, #536]	@ (8006504 <HAL_I2C_Master_Receive_DMA+0x248>)
 80062ea:	fba2 2303 	umull	r2, r3, r2, r3
 80062ee:	0a1a      	lsrs	r2, r3, #8
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	009a      	lsls	r2, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	3b01      	subs	r3, #1
 8006300:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d112      	bne.n	800632e <HAL_I2C_Master_Receive_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006322:	f043 0220 	orr.w	r2, r3, #32
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800632a:	2302      	movs	r3, #2
 800632c:	e0e3      	b.n	80064f6 <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b02      	cmp	r3, #2
 800633a:	d0df      	beq.n	80062fc <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006342:	2b01      	cmp	r3, #1
 8006344:	d101      	bne.n	800634a <HAL_I2C_Master_Receive_DMA+0x8e>
 8006346:	2302      	movs	r3, #2
 8006348:	e0d5      	b.n	80064f6 <HAL_I2C_Master_Receive_DMA+0x23a>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b01      	cmp	r3, #1
 800635e:	d007      	beq.n	8006370 <HAL_I2C_Master_Receive_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0201 	orr.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800637e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2222      	movs	r2, #34	@ 0x22
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2210      	movs	r2, #16
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	893a      	ldrh	r2, [r7, #8]
 80063a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4a56      	ldr	r2, [pc, #344]	@ (8006508 <HAL_I2C_Master_Receive_DMA+0x24c>)
 80063b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80063b2:	897a      	ldrh	r2, [r7, #10]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d07b      	beq.n	80064b8 <HAL_I2C_Master_Receive_DMA+0x1fc>
    {
      if (hi2c->hdmarx != NULL)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d02a      	beq.n	800641e <HAL_I2C_Master_Receive_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063cc:	4a4f      	ldr	r2, [pc, #316]	@ (800650c <HAL_I2C_Master_Receive_DMA+0x250>)
 80063ce:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d4:	4a4e      	ldr	r2, [pc, #312]	@ (8006510 <HAL_I2C_Master_Receive_DMA+0x254>)
 80063d6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063dc:	2200      	movs	r2, #0
 80063de:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e4:	2200      	movs	r2, #0
 80063e6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	2200      	movs	r2, #0
 80063ee:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f4:	2200      	movs	r2, #0
 80063f6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3310      	adds	r3, #16
 8006402:	4619      	mov	r1, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006408:	461a      	mov	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800640e:	f7fe ff1d 	bl	800524c <HAL_DMA_Start_IT>
 8006412:	4603      	mov	r3, r0
 8006414:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006416:	7dfb      	ldrb	r3, [r7, #23]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d139      	bne.n	8006490 <HAL_I2C_Master_Receive_DMA+0x1d4>
 800641c:	e013      	b.n	8006446 <HAL_I2C_Master_Receive_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2220      	movs	r2, #32
 8006422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006432:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e057      	b.n	80064f6 <HAL_I2C_Master_Receive_DMA+0x23a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006454:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006464:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800647c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800648c:	605a      	str	r2, [r3, #4]
 800648e:	e02f      	b.n	80064f0 <HAL_I2C_Master_Receive_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a4:	f043 0210 	orr.w	r2, r3, #16
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e01e      	b.n	80064f6 <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80064ce:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80064de:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064ee:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	e000      	b.n	80064f6 <HAL_I2C_Master_Receive_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 80064f4:	2302      	movs	r3, #2
  }
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000048 	.word	0x20000048
 8006504:	14f8b589 	.word	0x14f8b589
 8006508:	ffff0000 	.word	0xffff0000
 800650c:	08007d99 	.word	0x08007d99
 8006510:	08007f57 	.word	0x08007f57

08006514 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006534:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800653c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800653e:	7bfb      	ldrb	r3, [r7, #15]
 8006540:	2b10      	cmp	r3, #16
 8006542:	d003      	beq.n	800654c <HAL_I2C_EV_IRQHandler+0x38>
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	2b40      	cmp	r3, #64	@ 0x40
 8006548:	f040 80b1 	bne.w	80066ae <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10d      	bne.n	8006582 <HAL_I2C_EV_IRQHandler+0x6e>
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800656c:	d003      	beq.n	8006576 <HAL_I2C_EV_IRQHandler+0x62>
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006574:	d101      	bne.n	800657a <HAL_I2C_EV_IRQHandler+0x66>
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <HAL_I2C_EV_IRQHandler+0x68>
 800657a:	2300      	movs	r3, #0
 800657c:	2b01      	cmp	r3, #1
 800657e:	f000 8114 	beq.w	80067aa <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00b      	beq.n	80065a4 <HAL_I2C_EV_IRQHandler+0x90>
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006592:	2b00      	cmp	r3, #0
 8006594:	d006      	beq.n	80065a4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f001 ffcd 	bl	8008536 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fd5c 	bl	800705a <I2C_Master_SB>
 80065a2:	e083      	b.n	80066ac <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	f003 0308 	and.w	r3, r3, #8
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d008      	beq.n	80065c0 <HAL_I2C_EV_IRQHandler+0xac>
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fdd4 	bl	8007166 <I2C_Master_ADD10>
 80065be:	e075      	b.n	80066ac <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d008      	beq.n	80065dc <HAL_I2C_EV_IRQHandler+0xc8>
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fdf0 	bl	80071ba <I2C_Master_ADDR>
 80065da:	e067      	b.n	80066ac <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d036      	beq.n	8006654 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065f4:	f000 80db 	beq.w	80067ae <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00d      	beq.n	800661e <HAL_I2C_EV_IRQHandler+0x10a>
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006608:	2b00      	cmp	r3, #0
 800660a:	d008      	beq.n	800661e <HAL_I2C_EV_IRQHandler+0x10a>
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	2b00      	cmp	r3, #0
 8006614:	d103      	bne.n	800661e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f9b8 	bl	800698c <I2C_MasterTransmit_TXE>
 800661c:	e046      	b.n	80066ac <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 80c2 	beq.w	80067ae <HAL_I2C_EV_IRQHandler+0x29a>
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 80bc 	beq.w	80067ae <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006636:	7bbb      	ldrb	r3, [r7, #14]
 8006638:	2b21      	cmp	r3, #33	@ 0x21
 800663a:	d103      	bne.n	8006644 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fa41 	bl	8006ac4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006642:	e0b4      	b.n	80067ae <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	2b40      	cmp	r3, #64	@ 0x40
 8006648:	f040 80b1 	bne.w	80067ae <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 faaf 	bl	8006bb0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006652:	e0ac      	b.n	80067ae <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800665e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006662:	f000 80a4 	beq.w	80067ae <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00d      	beq.n	800668c <HAL_I2C_EV_IRQHandler+0x178>
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006676:	2b00      	cmp	r3, #0
 8006678:	d008      	beq.n	800668c <HAL_I2C_EV_IRQHandler+0x178>
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d103      	bne.n	800668c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fb2b 	bl	8006ce0 <I2C_MasterReceive_RXNE>
 800668a:	e00f      	b.n	80066ac <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 808b 	beq.w	80067ae <HAL_I2C_EV_IRQHandler+0x29a>
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 8085 	beq.w	80067ae <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fbe3 	bl	8006e70 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066aa:	e080      	b.n	80067ae <HAL_I2C_EV_IRQHandler+0x29a>
 80066ac:	e07f      	b.n	80067ae <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d004      	beq.n	80066c0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	61fb      	str	r3, [r7, #28]
 80066be:	e007      	b.n	80066d0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d011      	beq.n	80066fe <HAL_I2C_EV_IRQHandler+0x1ea>
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00c      	beq.n	80066fe <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80066f4:	69b9      	ldr	r1, [r7, #24]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 ffae 	bl	8007658 <I2C_Slave_ADDR>
 80066fc:	e05a      	b.n	80067b4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b00      	cmp	r3, #0
 8006706:	d008      	beq.n	800671a <HAL_I2C_EV_IRQHandler+0x206>
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 ffe8 	bl	80076e8 <I2C_Slave_STOPF>
 8006718:	e04c      	b.n	80067b4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800671a:	7bbb      	ldrb	r3, [r7, #14]
 800671c:	2b21      	cmp	r3, #33	@ 0x21
 800671e:	d002      	beq.n	8006726 <HAL_I2C_EV_IRQHandler+0x212>
 8006720:	7bbb      	ldrb	r3, [r7, #14]
 8006722:	2b29      	cmp	r3, #41	@ 0x29
 8006724:	d120      	bne.n	8006768 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00d      	beq.n	800674c <HAL_I2C_EV_IRQHandler+0x238>
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006736:	2b00      	cmp	r3, #0
 8006738:	d008      	beq.n	800674c <HAL_I2C_EV_IRQHandler+0x238>
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d103      	bne.n	800674c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fec9 	bl	80074dc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800674a:	e032      	b.n	80067b2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b00      	cmp	r3, #0
 8006754:	d02d      	beq.n	80067b2 <HAL_I2C_EV_IRQHandler+0x29e>
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800675c:	2b00      	cmp	r3, #0
 800675e:	d028      	beq.n	80067b2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fef8 	bl	8007556 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006766:	e024      	b.n	80067b2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00d      	beq.n	800678e <HAL_I2C_EV_IRQHandler+0x27a>
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006778:	2b00      	cmp	r3, #0
 800677a:	d008      	beq.n	800678e <HAL_I2C_EV_IRQHandler+0x27a>
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	f003 0304 	and.w	r3, r3, #4
 8006782:	2b00      	cmp	r3, #0
 8006784:	d103      	bne.n	800678e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 ff06 	bl	8007598 <I2C_SlaveReceive_RXNE>
 800678c:	e012      	b.n	80067b4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00d      	beq.n	80067b4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d008      	beq.n	80067b4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 ff36 	bl	8007614 <I2C_SlaveReceive_BTF>
 80067a8:	e004      	b.n	80067b4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80067aa:	bf00      	nop
 80067ac:	e002      	b.n	80067b4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067ae:	bf00      	nop
 80067b0:	e000      	b.n	80067b4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067b2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80067b4:	3720      	adds	r7, #32
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b08a      	sub	sp, #40	@ 0x28
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80067d2:	2300      	movs	r3, #0
 80067d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067dc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00d      	beq.n	8006804 <HAL_I2C_ER_IRQHandler+0x4a>
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d008      	beq.n	8006804 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	f043 0301 	orr.w	r3, r3, #1
 80067f8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006802:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00d      	beq.n	800682a <HAL_I2C_ER_IRQHandler+0x70>
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006814:	2b00      	cmp	r3, #0
 8006816:	d008      	beq.n	800682a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681a:	f043 0302 	orr.w	r3, r3, #2
 800681e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8006828:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006830:	2b00      	cmp	r3, #0
 8006832:	d03e      	beq.n	80068b2 <HAL_I2C_ER_IRQHandler+0xf8>
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800683a:	2b00      	cmp	r3, #0
 800683c:	d039      	beq.n	80068b2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800683e:	7efb      	ldrb	r3, [r7, #27]
 8006840:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006846:	b29b      	uxth	r3, r3
 8006848:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006850:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006856:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006858:	7ebb      	ldrb	r3, [r7, #26]
 800685a:	2b20      	cmp	r3, #32
 800685c:	d112      	bne.n	8006884 <HAL_I2C_ER_IRQHandler+0xca>
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10f      	bne.n	8006884 <HAL_I2C_ER_IRQHandler+0xca>
 8006864:	7cfb      	ldrb	r3, [r7, #19]
 8006866:	2b21      	cmp	r3, #33	@ 0x21
 8006868:	d008      	beq.n	800687c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800686a:	7cfb      	ldrb	r3, [r7, #19]
 800686c:	2b29      	cmp	r3, #41	@ 0x29
 800686e:	d005      	beq.n	800687c <HAL_I2C_ER_IRQHandler+0xc2>
 8006870:	7cfb      	ldrb	r3, [r7, #19]
 8006872:	2b28      	cmp	r3, #40	@ 0x28
 8006874:	d106      	bne.n	8006884 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b21      	cmp	r3, #33	@ 0x21
 800687a:	d103      	bne.n	8006884 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f001 f863 	bl	8007948 <I2C_Slave_AF>
 8006882:	e016      	b.n	80068b2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800688c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	f043 0304 	orr.w	r3, r3, #4
 8006894:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006896:	7efb      	ldrb	r3, [r7, #27]
 8006898:	2b10      	cmp	r3, #16
 800689a:	d002      	beq.n	80068a2 <HAL_I2C_ER_IRQHandler+0xe8>
 800689c:	7efb      	ldrb	r3, [r7, #27]
 800689e:	2b40      	cmp	r3, #64	@ 0x40
 80068a0:	d107      	bne.n	80068b2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068b0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00d      	beq.n	80068d8 <HAL_I2C_ER_IRQHandler+0x11e>
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d008      	beq.n	80068d8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	f043 0308 	orr.w	r3, r3, #8
 80068cc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80068d6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80068d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d008      	beq.n	80068f0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e4:	431a      	orrs	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 f8a0 	bl	8007a30 <I2C_ITError>
  }
}
 80068f0:	bf00      	nop
 80068f2:	3728      	adds	r7, #40	@ 0x28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	460b      	mov	r3, r1
 800692a:	70fb      	strb	r3, [r7, #3]
 800692c:	4613      	mov	r3, r2
 800692e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800699a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d150      	bne.n	8006a54 <I2C_MasterTransmit_TXE+0xc8>
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	2b21      	cmp	r3, #33	@ 0x21
 80069b6:	d14d      	bne.n	8006a54 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d01d      	beq.n	80069fa <I2C_MasterTransmit_TXE+0x6e>
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d01a      	beq.n	80069fa <I2C_MasterTransmit_TXE+0x6e>
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80069ca:	d016      	beq.n	80069fa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80069da:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2211      	movs	r2, #17
 80069e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2220      	movs	r2, #32
 80069ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fc f910 	bl	8002c18 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80069f8:	e060      	b.n	8006abc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006a08:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a18:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b40      	cmp	r3, #64	@ 0x40
 8006a32:	d107      	bne.n	8006a44 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff ff87 	bl	8006950 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a42:	e03b      	b.n	8006abc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7fc f8e3 	bl	8002c18 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a52:	e033      	b.n	8006abc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
 8006a56:	2b21      	cmp	r3, #33	@ 0x21
 8006a58:	d005      	beq.n	8006a66 <I2C_MasterTransmit_TXE+0xda>
 8006a5a:	7bbb      	ldrb	r3, [r7, #14]
 8006a5c:	2b40      	cmp	r3, #64	@ 0x40
 8006a5e:	d12d      	bne.n	8006abc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	2b22      	cmp	r3, #34	@ 0x22
 8006a64:	d12a      	bne.n	8006abc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d108      	bne.n	8006a82 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a7e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006a80:	e01c      	b.n	8006abc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b40      	cmp	r3, #64	@ 0x40
 8006a8c:	d103      	bne.n	8006a96 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f88e 	bl	8006bb0 <I2C_MemoryTransmit_TXE_BTF>
}
 8006a94:	e012      	b.n	8006abc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9a:	781a      	ldrb	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006aba:	e7ff      	b.n	8006abc <I2C_MasterTransmit_TXE+0x130>
 8006abc:	bf00      	nop
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b21      	cmp	r3, #33	@ 0x21
 8006adc:	d164      	bne.n	8006ba8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d012      	beq.n	8006b0e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aec:	781a      	ldrb	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	3b01      	subs	r3, #1
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006b0c:	e04c      	b.n	8006ba8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d01d      	beq.n	8006b50 <I2C_MasterTransmit_BTF+0x8c>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d01a      	beq.n	8006b50 <I2C_MasterTransmit_BTF+0x8c>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b20:	d016      	beq.n	8006b50 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b30:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2211      	movs	r2, #17
 8006b36:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7fc f865 	bl	8002c18 <HAL_I2C_MasterTxCpltCallback>
}
 8006b4e:	e02b      	b.n	8006ba8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b5e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b6e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b40      	cmp	r3, #64	@ 0x40
 8006b88:	d107      	bne.n	8006b9a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7ff fedc 	bl	8006950 <HAL_I2C_MemTxCpltCallback>
}
 8006b98:	e006      	b.n	8006ba8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fc f838 	bl	8002c18 <HAL_I2C_MasterTxCpltCallback>
}
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bbe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d11d      	bne.n	8006c04 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d10b      	bne.n	8006be8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006be0:	1c9a      	adds	r2, r3, #2
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006be6:	e077      	b.n	8006cd8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	121b      	asrs	r3, r3, #8
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006c02:	e069      	b.n	8006cd8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d10b      	bne.n	8006c24 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006c22:	e059      	b.n	8006cd8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d152      	bne.n	8006cd2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	2b22      	cmp	r3, #34	@ 0x22
 8006c30:	d10d      	bne.n	8006c4e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c40:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006c4c:	e044      	b.n	8006cd8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d015      	beq.n	8006c84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
 8006c5a:	2b21      	cmp	r3, #33	@ 0x21
 8006c5c:	d112      	bne.n	8006c84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c62:	781a      	ldrb	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006c82:	e029      	b.n	8006cd8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d124      	bne.n	8006cd8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
 8006c90:	2b21      	cmp	r3, #33	@ 0x21
 8006c92:	d121      	bne.n	8006cd8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ca2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cb2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff fe40 	bl	8006950 <HAL_I2C_MemTxCpltCallback>
}
 8006cd0:	e002      	b.n	8006cd8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff f8b2 	bl	8005e3c <I2C_Flush_DR>
}
 8006cd8:	bf00      	nop
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b22      	cmp	r3, #34	@ 0x22
 8006cf2:	f040 80b9 	bne.w	8006e68 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfa:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d921      	bls.n	8006d4e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	691a      	ldr	r2, [r3, #16]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d14:	b2d2      	uxtb	r2, r2
 8006d16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	f040 8096 	bne.w	8006e68 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d4a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006d4c:	e08c      	b.n	8006e68 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d07f      	beq.n	8006e56 <I2C_MasterReceive_RXNE+0x176>
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d002      	beq.n	8006d62 <I2C_MasterReceive_RXNE+0x82>
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d179      	bne.n	8006e56 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f001 fb86 	bl	8008474 <I2C_WaitOnSTOPRequestThroughIT>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d14c      	bne.n	8006e08 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d7c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006d8c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	3b01      	subs	r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b40      	cmp	r3, #64	@ 0x40
 8006dc6:	d10a      	bne.n	8006dde <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff fdc4 	bl	8006964 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006ddc:	e044      	b.n	8006e68 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d002      	beq.n	8006df2 <I2C_MasterReceive_RXNE+0x112>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2b20      	cmp	r3, #32
 8006df0:	d103      	bne.n	8006dfa <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006df8:	e002      	b.n	8006e00 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2212      	movs	r2, #18
 8006dfe:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7fb ff29 	bl	8002c58 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e06:	e02f      	b.n	8006e68 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006e16:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691a      	ldr	r2, [r3, #16]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7fb ff38 	bl	8002cc4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e54:	e008      	b.n	8006e68 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e64:	605a      	str	r2, [r3, #4]
}
 8006e66:	e7ff      	b.n	8006e68 <I2C_MasterReceive_RXNE+0x188>
 8006e68:	bf00      	nop
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d11b      	bne.n	8006ec0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e96:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	691a      	ldr	r2, [r3, #16]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006ebe:	e0c8      	b.n	8007052 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d129      	bne.n	8006f1e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ed8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d00a      	beq.n	8006ef6 <I2C_MasterReceive_BTF+0x86>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d007      	beq.n	8006ef6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ef4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006f1c:	e099      	b.n	8007052 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	f040 8081 	bne.w	800702c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d002      	beq.n	8006f36 <I2C_MasterReceive_BTF+0xc6>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b10      	cmp	r3, #16
 8006f34:	d108      	bne.n	8006f48 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	e019      	b.n	8006f7c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d002      	beq.n	8006f54 <I2C_MasterReceive_BTF+0xe4>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d108      	bne.n	8006f66 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	e00a      	b.n	8006f7c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b10      	cmp	r3, #16
 8006f6a:	d007      	beq.n	8006f7c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f7a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	691a      	ldr	r2, [r3, #16]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f86:	b2d2      	uxtb	r2, r2
 8006f88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	691a      	ldr	r2, [r3, #16]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fac:	b2d2      	uxtb	r2, r2
 8006fae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006fd6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b40      	cmp	r3, #64	@ 0x40
 8006fea:	d10a      	bne.n	8007002 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff fcb2 	bl	8006964 <HAL_I2C_MemRxCpltCallback>
}
 8007000:	e027      	b.n	8007052 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b08      	cmp	r3, #8
 800700e:	d002      	beq.n	8007016 <I2C_MasterReceive_BTF+0x1a6>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2b20      	cmp	r3, #32
 8007014:	d103      	bne.n	800701e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	631a      	str	r2, [r3, #48]	@ 0x30
 800701c:	e002      	b.n	8007024 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2212      	movs	r2, #18
 8007022:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7fb fe17 	bl	8002c58 <HAL_I2C_MasterRxCpltCallback>
}
 800702a:	e012      	b.n	8007052 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691a      	ldr	r2, [r3, #16]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007048:	b29b      	uxth	r3, r3
 800704a:	3b01      	subs	r3, #1
 800704c:	b29a      	uxth	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007052:	bf00      	nop
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b40      	cmp	r3, #64	@ 0x40
 800706c:	d117      	bne.n	800709e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007072:	2b00      	cmp	r3, #0
 8007074:	d109      	bne.n	800708a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800707a:	b2db      	uxtb	r3, r3
 800707c:	461a      	mov	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007086:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007088:	e067      	b.n	800715a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708e:	b2db      	uxtb	r3, r3
 8007090:	f043 0301 	orr.w	r3, r3, #1
 8007094:	b2da      	uxtb	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	611a      	str	r2, [r3, #16]
}
 800709c:	e05d      	b.n	800715a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070a6:	d133      	bne.n	8007110 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b21      	cmp	r3, #33	@ 0x21
 80070b2:	d109      	bne.n	80070c8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	461a      	mov	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80070c4:	611a      	str	r2, [r3, #16]
 80070c6:	e008      	b.n	80070da <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	f043 0301 	orr.w	r3, r3, #1
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d004      	beq.n	80070ec <I2C_Master_SB+0x92>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d108      	bne.n	80070fe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d032      	beq.n	800715a <I2C_Master_SB+0x100>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d02d      	beq.n	800715a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800710c:	605a      	str	r2, [r3, #4]
}
 800710e:	e024      	b.n	800715a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10e      	bne.n	8007136 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800711c:	b29b      	uxth	r3, r3
 800711e:	11db      	asrs	r3, r3, #7
 8007120:	b2db      	uxtb	r3, r3
 8007122:	f003 0306 	and.w	r3, r3, #6
 8007126:	b2db      	uxtb	r3, r3
 8007128:	f063 030f 	orn	r3, r3, #15
 800712c:	b2da      	uxtb	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	611a      	str	r2, [r3, #16]
}
 8007134:	e011      	b.n	800715a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800713a:	2b01      	cmp	r3, #1
 800713c:	d10d      	bne.n	800715a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007142:	b29b      	uxth	r3, r3
 8007144:	11db      	asrs	r3, r3, #7
 8007146:	b2db      	uxtb	r3, r3
 8007148:	f003 0306 	and.w	r3, r3, #6
 800714c:	b2db      	uxtb	r3, r3
 800714e:	f063 030e 	orn	r3, r3, #14
 8007152:	b2da      	uxtb	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	611a      	str	r2, [r3, #16]
}
 800715a:	bf00      	nop
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007166:	b480      	push	{r7}
 8007168:	b083      	sub	sp, #12
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007172:	b2da      	uxtb	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800717e:	2b00      	cmp	r3, #0
 8007180:	d004      	beq.n	800718c <I2C_Master_ADD10+0x26>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007188:	2b00      	cmp	r3, #0
 800718a:	d108      	bne.n	800719e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00c      	beq.n	80071ae <I2C_Master_ADD10+0x48>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800719a:	2b00      	cmp	r3, #0
 800719c:	d007      	beq.n	80071ae <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071ac:	605a      	str	r2, [r3, #4]
  }
}
 80071ae:	bf00      	nop
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b091      	sub	sp, #68	@ 0x44
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b22      	cmp	r3, #34	@ 0x22
 80071e2:	f040 8169 	bne.w	80074b8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10f      	bne.n	800720e <I2C_Master_ADDR+0x54>
 80071ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80071f2:	2b40      	cmp	r3, #64	@ 0x40
 80071f4:	d10b      	bne.n	800720e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071f6:	2300      	movs	r3, #0
 80071f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	633b      	str	r3, [r7, #48]	@ 0x30
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	633b      	str	r3, [r7, #48]	@ 0x30
 800720a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720c:	e160      	b.n	80074d0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007212:	2b00      	cmp	r3, #0
 8007214:	d11d      	bne.n	8007252 <I2C_Master_ADDR+0x98>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800721e:	d118      	bne.n	8007252 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007220:	2300      	movs	r3, #0
 8007222:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007244:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007250:	e13e      	b.n	80074d0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007256:	b29b      	uxth	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	d113      	bne.n	8007284 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800725c:	2300      	movs	r3, #0
 800725e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007270:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	e115      	b.n	80074b0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007288:	b29b      	uxth	r3, r3
 800728a:	2b01      	cmp	r3, #1
 800728c:	f040 808a 	bne.w	80073a4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007292:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007296:	d137      	bne.n	8007308 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072a6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072b6:	d113      	bne.n	80072e0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072c6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072c8:	2300      	movs	r3, #0
 80072ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	627b      	str	r3, [r7, #36]	@ 0x24
 80072dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072de:	e0e7      	b.n	80074b0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072e0:	2300      	movs	r3, #0
 80072e2:	623b      	str	r3, [r7, #32]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	623b      	str	r3, [r7, #32]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	623b      	str	r3, [r7, #32]
 80072f4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	e0d3      	b.n	80074b0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730a:	2b08      	cmp	r3, #8
 800730c:	d02e      	beq.n	800736c <I2C_Master_ADDR+0x1b2>
 800730e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007310:	2b20      	cmp	r3, #32
 8007312:	d02b      	beq.n	800736c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007316:	2b12      	cmp	r3, #18
 8007318:	d102      	bne.n	8007320 <I2C_Master_ADDR+0x166>
 800731a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731c:	2b01      	cmp	r3, #1
 800731e:	d125      	bne.n	800736c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007322:	2b04      	cmp	r3, #4
 8007324:	d00e      	beq.n	8007344 <I2C_Master_ADDR+0x18a>
 8007326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007328:	2b02      	cmp	r3, #2
 800732a:	d00b      	beq.n	8007344 <I2C_Master_ADDR+0x18a>
 800732c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732e:	2b10      	cmp	r3, #16
 8007330:	d008      	beq.n	8007344 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007340:	601a      	str	r2, [r3, #0]
 8007342:	e007      	b.n	8007354 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007352:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007354:	2300      	movs	r3, #0
 8007356:	61fb      	str	r3, [r7, #28]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	61fb      	str	r3, [r7, #28]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	61fb      	str	r3, [r7, #28]
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	e0a1      	b.n	80074b0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800737a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800737c:	2300      	movs	r3, #0
 800737e:	61bb      	str	r3, [r7, #24]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	61bb      	str	r3, [r7, #24]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	61bb      	str	r3, [r7, #24]
 8007390:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	e085      	b.n	80074b0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d14d      	bne.n	800744a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80073ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d016      	beq.n	80073e2 <I2C_Master_ADDR+0x228>
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d013      	beq.n	80073e2 <I2C_Master_ADDR+0x228>
 80073ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073bc:	2b10      	cmp	r3, #16
 80073be:	d010      	beq.n	80073e2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073ce:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	e007      	b.n	80073f2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80073f0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007400:	d117      	bne.n	8007432 <I2C_Master_ADDR+0x278>
 8007402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007404:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007408:	d00b      	beq.n	8007422 <I2C_Master_ADDR+0x268>
 800740a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740c:	2b01      	cmp	r3, #1
 800740e:	d008      	beq.n	8007422 <I2C_Master_ADDR+0x268>
 8007410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007412:	2b08      	cmp	r3, #8
 8007414:	d005      	beq.n	8007422 <I2C_Master_ADDR+0x268>
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	2b10      	cmp	r3, #16
 800741a:	d002      	beq.n	8007422 <I2C_Master_ADDR+0x268>
 800741c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741e:	2b20      	cmp	r3, #32
 8007420:	d107      	bne.n	8007432 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007430:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007432:	2300      	movs	r3, #0
 8007434:	617b      	str	r3, [r7, #20]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	617b      	str	r3, [r7, #20]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	617b      	str	r3, [r7, #20]
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	e032      	b.n	80074b0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007458:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007468:	d117      	bne.n	800749a <I2C_Master_ADDR+0x2e0>
 800746a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007470:	d00b      	beq.n	800748a <I2C_Master_ADDR+0x2d0>
 8007472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007474:	2b01      	cmp	r3, #1
 8007476:	d008      	beq.n	800748a <I2C_Master_ADDR+0x2d0>
 8007478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747a:	2b08      	cmp	r3, #8
 800747c:	d005      	beq.n	800748a <I2C_Master_ADDR+0x2d0>
 800747e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007480:	2b10      	cmp	r3, #16
 8007482:	d002      	beq.n	800748a <I2C_Master_ADDR+0x2d0>
 8007484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007486:	2b20      	cmp	r3, #32
 8007488:	d107      	bne.n	800749a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007498:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800749a:	2300      	movs	r3, #0
 800749c:	613b      	str	r3, [r7, #16]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	613b      	str	r3, [r7, #16]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	613b      	str	r3, [r7, #16]
 80074ae:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80074b6:	e00b      	b.n	80074d0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074b8:	2300      	movs	r3, #0
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
}
 80074ce:	e7ff      	b.n	80074d0 <I2C_Master_ADDR+0x316>
 80074d0:	bf00      	nop
 80074d2:	3744      	adds	r7, #68	@ 0x44
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d02b      	beq.n	800754e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074fa:	781a      	ldrb	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007510:	b29b      	uxth	r3, r3
 8007512:	3b01      	subs	r3, #1
 8007514:	b29a      	uxth	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800751e:	b29b      	uxth	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d114      	bne.n	800754e <I2C_SlaveTransmit_TXE+0x72>
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	2b29      	cmp	r3, #41	@ 0x29
 8007528:	d111      	bne.n	800754e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007538:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2221      	movs	r2, #33	@ 0x21
 800753e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2228      	movs	r2, #40	@ 0x28
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7ff f9d5 	bl	80068f8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800754e:	bf00      	nop
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007562:	b29b      	uxth	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d011      	beq.n	800758c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756c:	781a      	ldrb	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007582:	b29b      	uxth	r3, r3
 8007584:	3b01      	subs	r3, #1
 8007586:	b29a      	uxth	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d02c      	beq.n	800760c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	691a      	ldr	r2, [r3, #16]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075bc:	b2d2      	uxtb	r2, r2
 80075be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	3b01      	subs	r3, #1
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075dc:	b29b      	uxth	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d114      	bne.n	800760c <I2C_SlaveReceive_RXNE+0x74>
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
 80075e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80075e6:	d111      	bne.n	800760c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075f6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2222      	movs	r2, #34	@ 0x22
 80075fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2228      	movs	r2, #40	@ 0x28
 8007602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7ff f980 	bl	800690c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800760c:	bf00      	nop
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007620:	b29b      	uxth	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d012      	beq.n	800764c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	691a      	ldr	r2, [r3, #16]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007630:	b2d2      	uxtb	r2, r2
 8007632:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007642:	b29b      	uxth	r3, r3
 8007644:	3b01      	subs	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007662:	2300      	movs	r3, #0
 8007664:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800766c:	b2db      	uxtb	r3, r3
 800766e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007672:	2b28      	cmp	r3, #40	@ 0x28
 8007674:	d125      	bne.n	80076c2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007684:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007690:	2301      	movs	r3, #1
 8007692:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800769a:	2b00      	cmp	r3, #0
 800769c:	d103      	bne.n	80076a6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	81bb      	strh	r3, [r7, #12]
 80076a4:	e002      	b.n	80076ac <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80076b4:	89ba      	ldrh	r2, [r7, #12]
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7ff f930 	bl	8006920 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80076c0:	e00e      	b.n	80076e0 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076c2:	2300      	movs	r3, #0
 80076c4:	60bb      	str	r3, [r7, #8]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	60bb      	str	r3, [r7, #8]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	60bb      	str	r3, [r7, #8]
 80076d6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80076e0:	bf00      	nop
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076f6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007706:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007708:	2300      	movs	r3, #0
 800770a:	60bb      	str	r3, [r7, #8]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	60bb      	str	r3, [r7, #8]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0201 	orr.w	r2, r2, #1
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007734:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007744:	d172      	bne.n	800782c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	2b22      	cmp	r3, #34	@ 0x22
 800774a:	d002      	beq.n	8007752 <I2C_Slave_STOPF+0x6a>
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007750:	d135      	bne.n	80077be <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	b29a      	uxth	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d005      	beq.n	8007776 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776e:	f043 0204 	orr.w	r2, r3, #4
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007784:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778a:	4618      	mov	r0, r3
 800778c:	f7fd ff62 	bl	8005654 <HAL_DMA_GetState>
 8007790:	4603      	mov	r3, r0
 8007792:	2b01      	cmp	r3, #1
 8007794:	d049      	beq.n	800782a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779a:	4a69      	ldr	r2, [pc, #420]	@ (8007940 <I2C_Slave_STOPF+0x258>)
 800779c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fd fdaa 	bl	80052fc <HAL_DMA_Abort_IT>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d03d      	beq.n	800782a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80077b8:	4610      	mov	r0, r2
 80077ba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077bc:	e035      	b.n	800782a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d005      	beq.n	80077e2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077da:	f043 0204 	orr.w	r2, r3, #4
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fd ff2c 	bl	8005654 <HAL_DMA_GetState>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d014      	beq.n	800782c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007806:	4a4e      	ldr	r2, [pc, #312]	@ (8007940 <I2C_Slave_STOPF+0x258>)
 8007808:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800780e:	4618      	mov	r0, r3
 8007810:	f7fd fd74 	bl	80052fc <HAL_DMA_Abort_IT>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d008      	beq.n	800782c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800781e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007824:	4610      	mov	r0, r2
 8007826:	4798      	blx	r3
 8007828:	e000      	b.n	800782c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800782a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007830:	b29b      	uxth	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d03e      	beq.n	80078b4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b04      	cmp	r3, #4
 8007842:	d112      	bne.n	800786a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	691a      	ldr	r2, [r3, #16]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784e:	b2d2      	uxtb	r2, r2
 8007850:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007860:	b29b      	uxth	r3, r3
 8007862:	3b01      	subs	r3, #1
 8007864:	b29a      	uxth	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007874:	2b40      	cmp	r3, #64	@ 0x40
 8007876:	d112      	bne.n	800789e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691a      	ldr	r2, [r3, #16]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007882:	b2d2      	uxtb	r2, r2
 8007884:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007894:	b29b      	uxth	r3, r3
 8007896:	3b01      	subs	r3, #1
 8007898:	b29a      	uxth	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d005      	beq.n	80078b4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ac:	f043 0204 	orr.w	r2, r3, #4
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f8b7 	bl	8007a30 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80078c2:	e039      	b.n	8007938 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80078c8:	d109      	bne.n	80078de <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2228      	movs	r2, #40	@ 0x28
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7ff f817 	bl	800690c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b28      	cmp	r3, #40	@ 0x28
 80078e8:	d111      	bne.n	800790e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a15      	ldr	r2, [pc, #84]	@ (8007944 <I2C_Slave_STOPF+0x25c>)
 80078ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2220      	movs	r2, #32
 80078fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff f818 	bl	800693c <HAL_I2C_ListenCpltCallback>
}
 800790c:	e014      	b.n	8007938 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007912:	2b22      	cmp	r3, #34	@ 0x22
 8007914:	d002      	beq.n	800791c <I2C_Slave_STOPF+0x234>
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	2b22      	cmp	r3, #34	@ 0x22
 800791a:	d10d      	bne.n	8007938 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2220      	movs	r2, #32
 8007926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fe ffea 	bl	800690c <HAL_I2C_SlaveRxCpltCallback>
}
 8007938:	bf00      	nop
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	08007fd1 	.word	0x08007fd1
 8007944:	ffff0000 	.word	0xffff0000

08007948 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007956:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2b08      	cmp	r3, #8
 8007962:	d002      	beq.n	800796a <I2C_Slave_AF+0x22>
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2b20      	cmp	r3, #32
 8007968:	d129      	bne.n	80079be <I2C_Slave_AF+0x76>
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	2b28      	cmp	r3, #40	@ 0x28
 800796e:	d126      	bne.n	80079be <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a2e      	ldr	r2, [pc, #184]	@ (8007a2c <I2C_Slave_AF+0xe4>)
 8007974:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007984:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800798e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800799e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7fe ffc0 	bl	800693c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80079bc:	e031      	b.n	8007a22 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80079be:	7bfb      	ldrb	r3, [r7, #15]
 80079c0:	2b21      	cmp	r3, #33	@ 0x21
 80079c2:	d129      	bne.n	8007a18 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a19      	ldr	r2, [pc, #100]	@ (8007a2c <I2C_Slave_AF+0xe4>)
 80079c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2221      	movs	r2, #33	@ 0x21
 80079ce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2220      	movs	r2, #32
 80079d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80079ee:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80079f8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a08:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7fe fa16 	bl	8005e3c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7fe ff71 	bl	80068f8 <HAL_I2C_SlaveTxCpltCallback>
}
 8007a16:	e004      	b.n	8007a22 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007a20:	615a      	str	r2, [r3, #20]
}
 8007a22:	bf00      	nop
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	ffff0000 	.word	0xffff0000

08007a30 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b10      	cmp	r3, #16
 8007a4c:	d002      	beq.n	8007a54 <I2C_ITError+0x24>
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	2b40      	cmp	r3, #64	@ 0x40
 8007a52:	d10a      	bne.n	8007a6a <I2C_ITError+0x3a>
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
 8007a56:	2b22      	cmp	r3, #34	@ 0x22
 8007a58:	d107      	bne.n	8007a6a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a68:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007a70:	2b28      	cmp	r3, #40	@ 0x28
 8007a72:	d107      	bne.n	8007a84 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2228      	movs	r2, #40	@ 0x28
 8007a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007a82:	e015      	b.n	8007ab0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a92:	d00a      	beq.n	8007aaa <I2C_ITError+0x7a>
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	2b60      	cmp	r3, #96	@ 0x60
 8007a98:	d007      	beq.n	8007aaa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007aba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007abe:	d162      	bne.n	8007b86 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ace:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d020      	beq.n	8007b20 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ae2:	4a6a      	ldr	r2, [pc, #424]	@ (8007c8c <I2C_ITError+0x25c>)
 8007ae4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fd fc06 	bl	80052fc <HAL_DMA_Abort_IT>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 8089 	beq.w	8007c0a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f022 0201 	bic.w	r2, r2, #1
 8007b06:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	4798      	blx	r3
 8007b1e:	e074      	b.n	8007c0a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b24:	4a59      	ldr	r2, [pc, #356]	@ (8007c8c <I2C_ITError+0x25c>)
 8007b26:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fd fbe5 	bl	80052fc <HAL_DMA_Abort_IT>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d068      	beq.n	8007c0a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b42:	2b40      	cmp	r3, #64	@ 0x40
 8007b44:	d10b      	bne.n	8007b5e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	691a      	ldr	r2, [r3, #16]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b50:	b2d2      	uxtb	r2, r2
 8007b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b58:	1c5a      	adds	r2, r3, #1
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 0201 	bic.w	r2, r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
 8007b84:	e041      	b.n	8007c0a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b60      	cmp	r3, #96	@ 0x60
 8007b90:	d125      	bne.n	8007bde <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007baa:	2b40      	cmp	r3, #64	@ 0x40
 8007bac:	d10b      	bne.n	8007bc6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	691a      	ldr	r2, [r3, #16]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb8:	b2d2      	uxtb	r2, r2
 8007bba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc0:	1c5a      	adds	r2, r3, #1
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 0201 	bic.w	r2, r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7fe fece 	bl	8006978 <HAL_I2C_AbortCpltCallback>
 8007bdc:	e015      	b.n	8007c0a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be8:	2b40      	cmp	r3, #64	@ 0x40
 8007bea:	d10b      	bne.n	8007c04 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	691a      	ldr	r2, [r3, #16]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf6:	b2d2      	uxtb	r2, r2
 8007bf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7fb f85d 	bl	8002cc4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c0e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10e      	bne.n	8007c38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d109      	bne.n	8007c38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d104      	bne.n	8007c38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d007      	beq.n	8007c48 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007c46:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c4e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c54:	f003 0304 	and.w	r3, r3, #4
 8007c58:	2b04      	cmp	r3, #4
 8007c5a:	d113      	bne.n	8007c84 <I2C_ITError+0x254>
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	2b28      	cmp	r3, #40	@ 0x28
 8007c60:	d110      	bne.n	8007c84 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a0a      	ldr	r2, [pc, #40]	@ (8007c90 <I2C_ITError+0x260>)
 8007c66:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7fe fe5c 	bl	800693c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007c84:	bf00      	nop
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	08007fd1 	.word	0x08007fd1
 8007c90:	ffff0000 	.word	0xffff0000

08007c94 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b088      	sub	sp, #32
 8007c98:	af02      	add	r7, sp, #8
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	607a      	str	r2, [r7, #4]
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	d006      	beq.n	8007cbe <I2C_MasterRequestWrite+0x2a>
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d003      	beq.n	8007cbe <I2C_MasterRequestWrite+0x2a>
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007cbc:	d108      	bne.n	8007cd0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	e00b      	b.n	8007ce8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd4:	2b12      	cmp	r3, #18
 8007cd6:	d107      	bne.n	8007ce8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ce6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 fa13 	bl	8008120 <I2C_WaitOnFlagUntilTimeout>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00d      	beq.n	8007d1c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d0e:	d103      	bne.n	8007d18 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d16:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e035      	b.n	8007d88 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d24:	d108      	bne.n	8007d38 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d26:	897b      	ldrh	r3, [r7, #10]
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007d34:	611a      	str	r2, [r3, #16]
 8007d36:	e01b      	b.n	8007d70 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007d38:	897b      	ldrh	r3, [r7, #10]
 8007d3a:	11db      	asrs	r3, r3, #7
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	f003 0306 	and.w	r3, r3, #6
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f063 030f 	orn	r3, r3, #15
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	490e      	ldr	r1, [pc, #56]	@ (8007d90 <I2C_MasterRequestWrite+0xfc>)
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 fa5c 	bl	8008214 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e010      	b.n	8007d88 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007d66:	897b      	ldrh	r3, [r7, #10]
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	4907      	ldr	r1, [pc, #28]	@ (8007d94 <I2C_MasterRequestWrite+0x100>)
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 fa4c 	bl	8008214 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e000      	b.n	8007d88 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	00010008 	.word	0x00010008
 8007d94:	00010002 	.word	0x00010002

08007d98 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dac:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007db4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007dca:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d003      	beq.n	8007ddc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dd8:	2200      	movs	r2, #0
 8007dda:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de8:	2200      	movs	r2, #0
 8007dea:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8007dec:	7cfb      	ldrb	r3, [r7, #19]
 8007dee:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8007df2:	2b21      	cmp	r3, #33	@ 0x21
 8007df4:	d007      	beq.n	8007e06 <I2C_DMAXferCplt+0x6e>
 8007df6:	7cfb      	ldrb	r3, [r7, #19]
 8007df8:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8007dfc:	2b22      	cmp	r3, #34	@ 0x22
 8007dfe:	d131      	bne.n	8007e64 <I2C_DMAXferCplt+0xcc>
 8007e00:	7cbb      	ldrb	r3, [r7, #18]
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	d12e      	bne.n	8007e64 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e14:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007e1c:	7cfb      	ldrb	r3, [r7, #19]
 8007e1e:	2b29      	cmp	r3, #41	@ 0x29
 8007e20:	d10a      	bne.n	8007e38 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2221      	movs	r2, #33	@ 0x21
 8007e26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	2228      	movs	r2, #40	@ 0x28
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e30:	6978      	ldr	r0, [r7, #20]
 8007e32:	f7fe fd61 	bl	80068f8 <HAL_I2C_SlaveTxCpltCallback>
 8007e36:	e00c      	b.n	8007e52 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007e38:	7cfb      	ldrb	r3, [r7, #19]
 8007e3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e3c:	d109      	bne.n	8007e52 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2222      	movs	r2, #34	@ 0x22
 8007e42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	2228      	movs	r2, #40	@ 0x28
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e4c:	6978      	ldr	r0, [r7, #20]
 8007e4e:	f7fe fd5d 	bl	800690c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007e60:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007e62:	e074      	b.n	8007f4e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d06e      	beq.n	8007f4e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d107      	bne.n	8007e8a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e88:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007e98:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ea0:	d009      	beq.n	8007eb6 <I2C_DMAXferCplt+0x11e>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d006      	beq.n	8007eb6 <I2C_DMAXferCplt+0x11e>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007eae:	d002      	beq.n	8007eb6 <I2C_DMAXferCplt+0x11e>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2b20      	cmp	r3, #32
 8007eb4:	d107      	bne.n	8007ec6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ec4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007ed4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ee4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d003      	beq.n	8007efc <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8007ef4:	6978      	ldr	r0, [r7, #20]
 8007ef6:	f7fa fee5 	bl	8002cc4 <HAL_I2C_ErrorCallback>
}
 8007efa:	e028      	b.n	8007f4e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	2220      	movs	r2, #32
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b40      	cmp	r3, #64	@ 0x40
 8007f0e:	d10a      	bne.n	8007f26 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007f1e:	6978      	ldr	r0, [r7, #20]
 8007f20:	f7fe fd20 	bl	8006964 <HAL_I2C_MemRxCpltCallback>
}
 8007f24:	e013      	b.n	8007f4e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2b08      	cmp	r3, #8
 8007f32:	d002      	beq.n	8007f3a <I2C_DMAXferCplt+0x1a2>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b20      	cmp	r3, #32
 8007f38:	d103      	bne.n	8007f42 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f40:	e002      	b.n	8007f48 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2212      	movs	r2, #18
 8007f46:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007f48:	6978      	ldr	r0, [r7, #20]
 8007f4a:	f7fa fe85 	bl	8002c58 <HAL_I2C_MasterRxCpltCallback>
}
 8007f4e:	bf00      	nop
 8007f50:	3718      	adds	r7, #24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b084      	sub	sp, #16
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f70:	2200      	movs	r2, #0
 8007f72:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f80:	2200      	movs	r2, #0
 8007f82:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7fd fb73 	bl	8005670 <HAL_DMA_GetError>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d01b      	beq.n	8007fc8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f9e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fba:	f043 0210 	orr.w	r2, r3, #16
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f7fa fe7e 	bl	8002cc4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007fc8:	bf00      	nop
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fe8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007fea:	4b4b      	ldr	r3, [pc, #300]	@ (8008118 <I2C_DMAAbort+0x148>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	08db      	lsrs	r3, r3, #3
 8007ff0:	4a4a      	ldr	r2, [pc, #296]	@ (800811c <I2C_DMAAbort+0x14c>)
 8007ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff6:	0a1a      	lsrs	r2, r3, #8
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	00da      	lsls	r2, r3, #3
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d106      	bne.n	8008018 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800800e:	f043 0220 	orr.w	r2, r3, #32
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8008016:	e00a      	b.n	800802e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3b01      	subs	r3, #1
 800801c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800802c:	d0ea      	beq.n	8008004 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800803a:	2200      	movs	r2, #0
 800803c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800804a:	2200      	movs	r2, #0
 800804c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800805c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2200      	movs	r2, #0
 8008062:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008070:	2200      	movs	r2, #0
 8008072:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008080:	2200      	movs	r2, #0
 8008082:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0201 	bic.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b60      	cmp	r3, #96	@ 0x60
 800809e:	d10e      	bne.n	80080be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	2220      	movs	r2, #32
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	2200      	movs	r2, #0
 80080b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80080b6:	6978      	ldr	r0, [r7, #20]
 80080b8:	f7fe fc5e 	bl	8006978 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80080bc:	e027      	b.n	800810e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80080be:	7cfb      	ldrb	r3, [r7, #19]
 80080c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80080c4:	2b28      	cmp	r3, #40	@ 0x28
 80080c6:	d117      	bne.n	80080f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f042 0201 	orr.w	r2, r2, #1
 80080d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80080e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2200      	movs	r2, #0
 80080ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2228      	movs	r2, #40	@ 0x28
 80080f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80080f6:	e007      	b.n	8008108 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2220      	movs	r2, #32
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008108:	6978      	ldr	r0, [r7, #20]
 800810a:	f7fa fddb 	bl	8002cc4 <HAL_I2C_ErrorCallback>
}
 800810e:	bf00      	nop
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20000048 	.word	0x20000048
 800811c:	14f8b589 	.word	0x14f8b589

08008120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	603b      	str	r3, [r7, #0]
 800812c:	4613      	mov	r3, r2
 800812e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008130:	e048      	b.n	80081c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008138:	d044      	beq.n	80081c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800813a:	f7fc fb81 	bl	8004840 <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	429a      	cmp	r2, r3
 8008148:	d302      	bcc.n	8008150 <I2C_WaitOnFlagUntilTimeout+0x30>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d139      	bne.n	80081c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	0c1b      	lsrs	r3, r3, #16
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b01      	cmp	r3, #1
 8008158:	d10d      	bne.n	8008176 <I2C_WaitOnFlagUntilTimeout+0x56>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	43da      	mvns	r2, r3
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	4013      	ands	r3, r2
 8008166:	b29b      	uxth	r3, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	bf0c      	ite	eq
 800816c:	2301      	moveq	r3, #1
 800816e:	2300      	movne	r3, #0
 8008170:	b2db      	uxtb	r3, r3
 8008172:	461a      	mov	r2, r3
 8008174:	e00c      	b.n	8008190 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	43da      	mvns	r2, r3
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	4013      	ands	r3, r2
 8008182:	b29b      	uxth	r3, r3
 8008184:	2b00      	cmp	r3, #0
 8008186:	bf0c      	ite	eq
 8008188:	2301      	moveq	r3, #1
 800818a:	2300      	movne	r3, #0
 800818c:	b2db      	uxtb	r3, r3
 800818e:	461a      	mov	r2, r3
 8008190:	79fb      	ldrb	r3, [r7, #7]
 8008192:	429a      	cmp	r2, r3
 8008194:	d116      	bne.n	80081c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2220      	movs	r2, #32
 80081a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b0:	f043 0220 	orr.w	r2, r3, #32
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e023      	b.n	800820c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	0c1b      	lsrs	r3, r3, #16
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d10d      	bne.n	80081ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	695b      	ldr	r3, [r3, #20]
 80081d4:	43da      	mvns	r2, r3
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	4013      	ands	r3, r2
 80081da:	b29b      	uxth	r3, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	bf0c      	ite	eq
 80081e0:	2301      	moveq	r3, #1
 80081e2:	2300      	movne	r3, #0
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	461a      	mov	r2, r3
 80081e8:	e00c      	b.n	8008204 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	43da      	mvns	r2, r3
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	4013      	ands	r3, r2
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	bf0c      	ite	eq
 80081fc:	2301      	moveq	r3, #1
 80081fe:	2300      	movne	r3, #0
 8008200:	b2db      	uxtb	r3, r3
 8008202:	461a      	mov	r2, r3
 8008204:	79fb      	ldrb	r3, [r7, #7]
 8008206:	429a      	cmp	r2, r3
 8008208:	d093      	beq.n	8008132 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
 8008220:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008222:	e071      	b.n	8008308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800822e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008232:	d123      	bne.n	800827c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008242:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800824c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2220      	movs	r2, #32
 8008258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008268:	f043 0204 	orr.w	r2, r3, #4
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e067      	b.n	800834c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008282:	d041      	beq.n	8008308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008284:	f7fc fadc 	bl	8004840 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	429a      	cmp	r2, r3
 8008292:	d302      	bcc.n	800829a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d136      	bne.n	8008308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	0c1b      	lsrs	r3, r3, #16
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d10c      	bne.n	80082be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	43da      	mvns	r2, r3
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	4013      	ands	r3, r2
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	bf14      	ite	ne
 80082b6:	2301      	movne	r3, #1
 80082b8:	2300      	moveq	r3, #0
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	e00b      	b.n	80082d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	43da      	mvns	r2, r3
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	4013      	ands	r3, r2
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	bf14      	ite	ne
 80082d0:	2301      	movne	r3, #1
 80082d2:	2300      	moveq	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d016      	beq.n	8008308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f4:	f043 0220 	orr.w	r2, r3, #32
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e021      	b.n	800834c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	0c1b      	lsrs	r3, r3, #16
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b01      	cmp	r3, #1
 8008310:	d10c      	bne.n	800832c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	43da      	mvns	r2, r3
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	4013      	ands	r3, r2
 800831e:	b29b      	uxth	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	bf14      	ite	ne
 8008324:	2301      	movne	r3, #1
 8008326:	2300      	moveq	r3, #0
 8008328:	b2db      	uxtb	r3, r3
 800832a:	e00b      	b.n	8008344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	43da      	mvns	r2, r3
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	4013      	ands	r3, r2
 8008338:	b29b      	uxth	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	bf14      	ite	ne
 800833e:	2301      	movne	r3, #1
 8008340:	2300      	moveq	r3, #0
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b00      	cmp	r3, #0
 8008346:	f47f af6d 	bne.w	8008224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008360:	e034      	b.n	80083cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 f8b8 	bl	80084d8 <I2C_IsAcknowledgeFailed>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e034      	b.n	80083dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008378:	d028      	beq.n	80083cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800837a:	f7fc fa61 	bl	8004840 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	429a      	cmp	r2, r3
 8008388:	d302      	bcc.n	8008390 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d11d      	bne.n	80083cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800839a:	2b80      	cmp	r3, #128	@ 0x80
 800839c:	d016      	beq.n	80083cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2220      	movs	r2, #32
 80083a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b8:	f043 0220 	orr.w	r2, r3, #32
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e007      	b.n	80083dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083d6:	2b80      	cmp	r3, #128	@ 0x80
 80083d8:	d1c3      	bne.n	8008362 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80083f0:	e034      	b.n	800845c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 f870 	bl	80084d8 <I2C_IsAcknowledgeFailed>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e034      	b.n	800846c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008408:	d028      	beq.n	800845c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800840a:	f7fc fa19 	bl	8004840 <HAL_GetTick>
 800840e:	4602      	mov	r2, r0
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	429a      	cmp	r2, r3
 8008418:	d302      	bcc.n	8008420 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d11d      	bne.n	800845c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	f003 0304 	and.w	r3, r3, #4
 800842a:	2b04      	cmp	r3, #4
 800842c:	d016      	beq.n	800845c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2220      	movs	r2, #32
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008448:	f043 0220 	orr.w	r2, r3, #32
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e007      	b.n	800846c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	f003 0304 	and.w	r3, r3, #4
 8008466:	2b04      	cmp	r3, #4
 8008468:	d1c3      	bne.n	80083f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800847c:	2300      	movs	r3, #0
 800847e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008480:	4b13      	ldr	r3, [pc, #76]	@ (80084d0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	08db      	lsrs	r3, r3, #3
 8008486:	4a13      	ldr	r2, [pc, #76]	@ (80084d4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008488:	fba2 2303 	umull	r2, r3, r2, r3
 800848c:	0a1a      	lsrs	r2, r3, #8
 800848e:	4613      	mov	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3b01      	subs	r3, #1
 800849a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d107      	bne.n	80084b2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a6:	f043 0220 	orr.w	r2, r3, #32
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e008      	b.n	80084c4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084c0:	d0e9      	beq.n	8008496 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	20000048 	.word	0x20000048
 80084d4:	14f8b589 	.word	0x14f8b589

080084d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084ee:	d11b      	bne.n	8008528 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80084f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2220      	movs	r2, #32
 8008504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008514:	f043 0204 	orr.w	r2, r3, #4
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e000      	b.n	800852a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008536:	b480      	push	{r7}
 8008538:	b083      	sub	sp, #12
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008542:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008546:	d103      	bne.n	8008550 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800854e:	e007      	b.n	8008560 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008554:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008558:	d102      	bne.n	8008560 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2208      	movs	r2, #8
 800855e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008572:	4b06      	ldr	r3, [pc, #24]	@ (800858c <HAL_PWR_EnableBkUpAccess+0x20>)
 8008574:	2201      	movs	r2, #1
 8008576:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008578:	4b05      	ldr	r3, [pc, #20]	@ (8008590 <HAL_PWR_EnableBkUpAccess+0x24>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800857e:	687b      	ldr	r3, [r7, #4]
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	420e0020 	.word	0x420e0020
 8008590:	40007000 	.word	0x40007000

08008594 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e267      	b.n	8008a76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d075      	beq.n	800869e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80085b2:	4b88      	ldr	r3, [pc, #544]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f003 030c 	and.w	r3, r3, #12
 80085ba:	2b04      	cmp	r3, #4
 80085bc:	d00c      	beq.n	80085d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085be:	4b85      	ldr	r3, [pc, #532]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80085c6:	2b08      	cmp	r3, #8
 80085c8:	d112      	bne.n	80085f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085ca:	4b82      	ldr	r3, [pc, #520]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085d6:	d10b      	bne.n	80085f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085d8:	4b7e      	ldr	r3, [pc, #504]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d05b      	beq.n	800869c <HAL_RCC_OscConfig+0x108>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d157      	bne.n	800869c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e242      	b.n	8008a76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085f8:	d106      	bne.n	8008608 <HAL_RCC_OscConfig+0x74>
 80085fa:	4b76      	ldr	r3, [pc, #472]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a75      	ldr	r2, [pc, #468]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 8008600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	e01d      	b.n	8008644 <HAL_RCC_OscConfig+0xb0>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008610:	d10c      	bne.n	800862c <HAL_RCC_OscConfig+0x98>
 8008612:	4b70      	ldr	r3, [pc, #448]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a6f      	ldr	r2, [pc, #444]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 8008618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	4b6d      	ldr	r3, [pc, #436]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a6c      	ldr	r2, [pc, #432]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 8008624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	e00b      	b.n	8008644 <HAL_RCC_OscConfig+0xb0>
 800862c:	4b69      	ldr	r3, [pc, #420]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a68      	ldr	r2, [pc, #416]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 8008632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	4b66      	ldr	r3, [pc, #408]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a65      	ldr	r2, [pc, #404]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 800863e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d013      	beq.n	8008674 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800864c:	f7fc f8f8 	bl	8004840 <HAL_GetTick>
 8008650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008652:	e008      	b.n	8008666 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008654:	f7fc f8f4 	bl	8004840 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	2b64      	cmp	r3, #100	@ 0x64
 8008660:	d901      	bls.n	8008666 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e207      	b.n	8008a76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008666:	4b5b      	ldr	r3, [pc, #364]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d0f0      	beq.n	8008654 <HAL_RCC_OscConfig+0xc0>
 8008672:	e014      	b.n	800869e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008674:	f7fc f8e4 	bl	8004840 <HAL_GetTick>
 8008678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800867a:	e008      	b.n	800868e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800867c:	f7fc f8e0 	bl	8004840 <HAL_GetTick>
 8008680:	4602      	mov	r2, r0
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	2b64      	cmp	r3, #100	@ 0x64
 8008688:	d901      	bls.n	800868e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e1f3      	b.n	8008a76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800868e:	4b51      	ldr	r3, [pc, #324]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1f0      	bne.n	800867c <HAL_RCC_OscConfig+0xe8>
 800869a:	e000      	b.n	800869e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800869c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 0302 	and.w	r3, r3, #2
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d063      	beq.n	8008772 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80086aa:	4b4a      	ldr	r3, [pc, #296]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f003 030c 	and.w	r3, r3, #12
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00b      	beq.n	80086ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086b6:	4b47      	ldr	r3, [pc, #284]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80086be:	2b08      	cmp	r3, #8
 80086c0:	d11c      	bne.n	80086fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086c2:	4b44      	ldr	r3, [pc, #272]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d116      	bne.n	80086fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086ce:	4b41      	ldr	r3, [pc, #260]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 0302 	and.w	r3, r3, #2
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d005      	beq.n	80086e6 <HAL_RCC_OscConfig+0x152>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d001      	beq.n	80086e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e1c7      	b.n	8008a76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086e6:	4b3b      	ldr	r3, [pc, #236]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	00db      	lsls	r3, r3, #3
 80086f4:	4937      	ldr	r1, [pc, #220]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086fa:	e03a      	b.n	8008772 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d020      	beq.n	8008746 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008704:	4b34      	ldr	r3, [pc, #208]	@ (80087d8 <HAL_RCC_OscConfig+0x244>)
 8008706:	2201      	movs	r2, #1
 8008708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800870a:	f7fc f899 	bl	8004840 <HAL_GetTick>
 800870e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008710:	e008      	b.n	8008724 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008712:	f7fc f895 	bl	8004840 <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	2b02      	cmp	r3, #2
 800871e:	d901      	bls.n	8008724 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e1a8      	b.n	8008a76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008724:	4b2b      	ldr	r3, [pc, #172]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0302 	and.w	r3, r3, #2
 800872c:	2b00      	cmp	r3, #0
 800872e:	d0f0      	beq.n	8008712 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008730:	4b28      	ldr	r3, [pc, #160]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	4925      	ldr	r1, [pc, #148]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 8008740:	4313      	orrs	r3, r2
 8008742:	600b      	str	r3, [r1, #0]
 8008744:	e015      	b.n	8008772 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008746:	4b24      	ldr	r3, [pc, #144]	@ (80087d8 <HAL_RCC_OscConfig+0x244>)
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800874c:	f7fc f878 	bl	8004840 <HAL_GetTick>
 8008750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008752:	e008      	b.n	8008766 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008754:	f7fc f874 	bl	8004840 <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	2b02      	cmp	r3, #2
 8008760:	d901      	bls.n	8008766 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e187      	b.n	8008a76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008766:	4b1b      	ldr	r3, [pc, #108]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0302 	and.w	r3, r3, #2
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1f0      	bne.n	8008754 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 0308 	and.w	r3, r3, #8
 800877a:	2b00      	cmp	r3, #0
 800877c:	d036      	beq.n	80087ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d016      	beq.n	80087b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008786:	4b15      	ldr	r3, [pc, #84]	@ (80087dc <HAL_RCC_OscConfig+0x248>)
 8008788:	2201      	movs	r2, #1
 800878a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800878c:	f7fc f858 	bl	8004840 <HAL_GetTick>
 8008790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008792:	e008      	b.n	80087a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008794:	f7fc f854 	bl	8004840 <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d901      	bls.n	80087a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e167      	b.n	8008a76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087a6:	4b0b      	ldr	r3, [pc, #44]	@ (80087d4 <HAL_RCC_OscConfig+0x240>)
 80087a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087aa:	f003 0302 	and.w	r3, r3, #2
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d0f0      	beq.n	8008794 <HAL_RCC_OscConfig+0x200>
 80087b2:	e01b      	b.n	80087ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087b4:	4b09      	ldr	r3, [pc, #36]	@ (80087dc <HAL_RCC_OscConfig+0x248>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087ba:	f7fc f841 	bl	8004840 <HAL_GetTick>
 80087be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087c0:	e00e      	b.n	80087e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087c2:	f7fc f83d 	bl	8004840 <HAL_GetTick>
 80087c6:	4602      	mov	r2, r0
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d907      	bls.n	80087e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e150      	b.n	8008a76 <HAL_RCC_OscConfig+0x4e2>
 80087d4:	40023800 	.word	0x40023800
 80087d8:	42470000 	.word	0x42470000
 80087dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087e0:	4b88      	ldr	r3, [pc, #544]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 80087e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087e4:	f003 0302 	and.w	r3, r3, #2
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1ea      	bne.n	80087c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 0304 	and.w	r3, r3, #4
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 8097 	beq.w	8008928 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087fa:	2300      	movs	r3, #0
 80087fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087fe:	4b81      	ldr	r3, [pc, #516]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 8008800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10f      	bne.n	800882a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800880a:	2300      	movs	r3, #0
 800880c:	60bb      	str	r3, [r7, #8]
 800880e:	4b7d      	ldr	r3, [pc, #500]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 8008810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008812:	4a7c      	ldr	r2, [pc, #496]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 8008814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008818:	6413      	str	r3, [r2, #64]	@ 0x40
 800881a:	4b7a      	ldr	r3, [pc, #488]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 800881c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800881e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008822:	60bb      	str	r3, [r7, #8]
 8008824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008826:	2301      	movs	r3, #1
 8008828:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800882a:	4b77      	ldr	r3, [pc, #476]	@ (8008a08 <HAL_RCC_OscConfig+0x474>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008832:	2b00      	cmp	r3, #0
 8008834:	d118      	bne.n	8008868 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008836:	4b74      	ldr	r3, [pc, #464]	@ (8008a08 <HAL_RCC_OscConfig+0x474>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a73      	ldr	r2, [pc, #460]	@ (8008a08 <HAL_RCC_OscConfig+0x474>)
 800883c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008842:	f7fb fffd 	bl	8004840 <HAL_GetTick>
 8008846:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008848:	e008      	b.n	800885c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800884a:	f7fb fff9 	bl	8004840 <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	2b02      	cmp	r3, #2
 8008856:	d901      	bls.n	800885c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e10c      	b.n	8008a76 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800885c:	4b6a      	ldr	r3, [pc, #424]	@ (8008a08 <HAL_RCC_OscConfig+0x474>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0f0      	beq.n	800884a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d106      	bne.n	800887e <HAL_RCC_OscConfig+0x2ea>
 8008870:	4b64      	ldr	r3, [pc, #400]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 8008872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008874:	4a63      	ldr	r2, [pc, #396]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 8008876:	f043 0301 	orr.w	r3, r3, #1
 800887a:	6713      	str	r3, [r2, #112]	@ 0x70
 800887c:	e01c      	b.n	80088b8 <HAL_RCC_OscConfig+0x324>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	2b05      	cmp	r3, #5
 8008884:	d10c      	bne.n	80088a0 <HAL_RCC_OscConfig+0x30c>
 8008886:	4b5f      	ldr	r3, [pc, #380]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 8008888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800888a:	4a5e      	ldr	r2, [pc, #376]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 800888c:	f043 0304 	orr.w	r3, r3, #4
 8008890:	6713      	str	r3, [r2, #112]	@ 0x70
 8008892:	4b5c      	ldr	r3, [pc, #368]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 8008894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008896:	4a5b      	ldr	r2, [pc, #364]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 8008898:	f043 0301 	orr.w	r3, r3, #1
 800889c:	6713      	str	r3, [r2, #112]	@ 0x70
 800889e:	e00b      	b.n	80088b8 <HAL_RCC_OscConfig+0x324>
 80088a0:	4b58      	ldr	r3, [pc, #352]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 80088a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088a4:	4a57      	ldr	r2, [pc, #348]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 80088a6:	f023 0301 	bic.w	r3, r3, #1
 80088aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80088ac:	4b55      	ldr	r3, [pc, #340]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 80088ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088b0:	4a54      	ldr	r2, [pc, #336]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 80088b2:	f023 0304 	bic.w	r3, r3, #4
 80088b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d015      	beq.n	80088ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088c0:	f7fb ffbe 	bl	8004840 <HAL_GetTick>
 80088c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088c6:	e00a      	b.n	80088de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088c8:	f7fb ffba 	bl	8004840 <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d901      	bls.n	80088de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e0cb      	b.n	8008a76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088de:	4b49      	ldr	r3, [pc, #292]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 80088e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d0ee      	beq.n	80088c8 <HAL_RCC_OscConfig+0x334>
 80088ea:	e014      	b.n	8008916 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088ec:	f7fb ffa8 	bl	8004840 <HAL_GetTick>
 80088f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088f2:	e00a      	b.n	800890a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088f4:	f7fb ffa4 	bl	8004840 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008902:	4293      	cmp	r3, r2
 8008904:	d901      	bls.n	800890a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e0b5      	b.n	8008a76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800890a:	4b3e      	ldr	r3, [pc, #248]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 800890c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800890e:	f003 0302 	and.w	r3, r3, #2
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1ee      	bne.n	80088f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008916:	7dfb      	ldrb	r3, [r7, #23]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d105      	bne.n	8008928 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800891c:	4b39      	ldr	r3, [pc, #228]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 800891e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008920:	4a38      	ldr	r2, [pc, #224]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 8008922:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008926:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 80a1 	beq.w	8008a74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008932:	4b34      	ldr	r3, [pc, #208]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f003 030c 	and.w	r3, r3, #12
 800893a:	2b08      	cmp	r3, #8
 800893c:	d05c      	beq.n	80089f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	2b02      	cmp	r3, #2
 8008944:	d141      	bne.n	80089ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008946:	4b31      	ldr	r3, [pc, #196]	@ (8008a0c <HAL_RCC_OscConfig+0x478>)
 8008948:	2200      	movs	r2, #0
 800894a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800894c:	f7fb ff78 	bl	8004840 <HAL_GetTick>
 8008950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008952:	e008      	b.n	8008966 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008954:	f7fb ff74 	bl	8004840 <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	2b02      	cmp	r3, #2
 8008960:	d901      	bls.n	8008966 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e087      	b.n	8008a76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008966:	4b27      	ldr	r3, [pc, #156]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1f0      	bne.n	8008954 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	69da      	ldr	r2, [r3, #28]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	431a      	orrs	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008980:	019b      	lsls	r3, r3, #6
 8008982:	431a      	orrs	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008988:	085b      	lsrs	r3, r3, #1
 800898a:	3b01      	subs	r3, #1
 800898c:	041b      	lsls	r3, r3, #16
 800898e:	431a      	orrs	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008994:	061b      	lsls	r3, r3, #24
 8008996:	491b      	ldr	r1, [pc, #108]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 8008998:	4313      	orrs	r3, r2
 800899a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800899c:	4b1b      	ldr	r3, [pc, #108]	@ (8008a0c <HAL_RCC_OscConfig+0x478>)
 800899e:	2201      	movs	r2, #1
 80089a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089a2:	f7fb ff4d 	bl	8004840 <HAL_GetTick>
 80089a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089a8:	e008      	b.n	80089bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089aa:	f7fb ff49 	bl	8004840 <HAL_GetTick>
 80089ae:	4602      	mov	r2, r0
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d901      	bls.n	80089bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e05c      	b.n	8008a76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089bc:	4b11      	ldr	r3, [pc, #68]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d0f0      	beq.n	80089aa <HAL_RCC_OscConfig+0x416>
 80089c8:	e054      	b.n	8008a74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089ca:	4b10      	ldr	r3, [pc, #64]	@ (8008a0c <HAL_RCC_OscConfig+0x478>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089d0:	f7fb ff36 	bl	8004840 <HAL_GetTick>
 80089d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089d6:	e008      	b.n	80089ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089d8:	f7fb ff32 	bl	8004840 <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d901      	bls.n	80089ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e045      	b.n	8008a76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089ea:	4b06      	ldr	r3, [pc, #24]	@ (8008a04 <HAL_RCC_OscConfig+0x470>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1f0      	bne.n	80089d8 <HAL_RCC_OscConfig+0x444>
 80089f6:	e03d      	b.n	8008a74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d107      	bne.n	8008a10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e038      	b.n	8008a76 <HAL_RCC_OscConfig+0x4e2>
 8008a04:	40023800 	.word	0x40023800
 8008a08:	40007000 	.word	0x40007000
 8008a0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a10:	4b1b      	ldr	r3, [pc, #108]	@ (8008a80 <HAL_RCC_OscConfig+0x4ec>)
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d028      	beq.n	8008a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d121      	bne.n	8008a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d11a      	bne.n	8008a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008a40:	4013      	ands	r3, r2
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008a46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d111      	bne.n	8008a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a56:	085b      	lsrs	r3, r3, #1
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d107      	bne.n	8008a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d001      	beq.n	8008a74 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e000      	b.n	8008a76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3718      	adds	r7, #24
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	40023800 	.word	0x40023800

08008a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d101      	bne.n	8008a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e0cc      	b.n	8008c32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a98:	4b68      	ldr	r3, [pc, #416]	@ (8008c3c <HAL_RCC_ClockConfig+0x1b8>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0307 	and.w	r3, r3, #7
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d90c      	bls.n	8008ac0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008aa6:	4b65      	ldr	r3, [pc, #404]	@ (8008c3c <HAL_RCC_ClockConfig+0x1b8>)
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	b2d2      	uxtb	r2, r2
 8008aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aae:	4b63      	ldr	r3, [pc, #396]	@ (8008c3c <HAL_RCC_ClockConfig+0x1b8>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0307 	and.w	r3, r3, #7
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d001      	beq.n	8008ac0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e0b8      	b.n	8008c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0302 	and.w	r3, r3, #2
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d020      	beq.n	8008b0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 0304 	and.w	r3, r3, #4
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d005      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ad8:	4b59      	ldr	r3, [pc, #356]	@ (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	4a58      	ldr	r2, [pc, #352]	@ (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008ade:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008ae2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0308 	and.w	r3, r3, #8
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d005      	beq.n	8008afc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008af0:	4b53      	ldr	r3, [pc, #332]	@ (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	4a52      	ldr	r2, [pc, #328]	@ (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008af6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008afa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008afc:	4b50      	ldr	r3, [pc, #320]	@ (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	494d      	ldr	r1, [pc, #308]	@ (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d044      	beq.n	8008ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d107      	bne.n	8008b32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b22:	4b47      	ldr	r3, [pc, #284]	@ (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d119      	bne.n	8008b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e07f      	b.n	8008c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d003      	beq.n	8008b42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	d107      	bne.n	8008b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b42:	4b3f      	ldr	r3, [pc, #252]	@ (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d109      	bne.n	8008b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e06f      	b.n	8008c32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b52:	4b3b      	ldr	r3, [pc, #236]	@ (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0302 	and.w	r3, r3, #2
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e067      	b.n	8008c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b62:	4b37      	ldr	r3, [pc, #220]	@ (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	f023 0203 	bic.w	r2, r3, #3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	4934      	ldr	r1, [pc, #208]	@ (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008b70:	4313      	orrs	r3, r2
 8008b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b74:	f7fb fe64 	bl	8004840 <HAL_GetTick>
 8008b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b7a:	e00a      	b.n	8008b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b7c:	f7fb fe60 	bl	8004840 <HAL_GetTick>
 8008b80:	4602      	mov	r2, r0
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d901      	bls.n	8008b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e04f      	b.n	8008c32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b92:	4b2b      	ldr	r3, [pc, #172]	@ (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f003 020c 	and.w	r2, r3, #12
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d1eb      	bne.n	8008b7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ba4:	4b25      	ldr	r3, [pc, #148]	@ (8008c3c <HAL_RCC_ClockConfig+0x1b8>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 0307 	and.w	r3, r3, #7
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d20c      	bcs.n	8008bcc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bb2:	4b22      	ldr	r3, [pc, #136]	@ (8008c3c <HAL_RCC_ClockConfig+0x1b8>)
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	b2d2      	uxtb	r2, r2
 8008bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bba:	4b20      	ldr	r3, [pc, #128]	@ (8008c3c <HAL_RCC_ClockConfig+0x1b8>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0307 	and.w	r3, r3, #7
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d001      	beq.n	8008bcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e032      	b.n	8008c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d008      	beq.n	8008bea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bd8:	4b19      	ldr	r3, [pc, #100]	@ (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	4916      	ldr	r1, [pc, #88]	@ (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008be6:	4313      	orrs	r3, r2
 8008be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0308 	and.w	r3, r3, #8
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d009      	beq.n	8008c0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008bf6:	4b12      	ldr	r3, [pc, #72]	@ (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	00db      	lsls	r3, r3, #3
 8008c04:	490e      	ldr	r1, [pc, #56]	@ (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008c06:	4313      	orrs	r3, r2
 8008c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008c0a:	f000 f821 	bl	8008c50 <HAL_RCC_GetSysClockFreq>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	4b0b      	ldr	r3, [pc, #44]	@ (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	091b      	lsrs	r3, r3, #4
 8008c16:	f003 030f 	and.w	r3, r3, #15
 8008c1a:	490a      	ldr	r1, [pc, #40]	@ (8008c44 <HAL_RCC_ClockConfig+0x1c0>)
 8008c1c:	5ccb      	ldrb	r3, [r1, r3]
 8008c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c22:	4a09      	ldr	r2, [pc, #36]	@ (8008c48 <HAL_RCC_ClockConfig+0x1c4>)
 8008c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008c26:	4b09      	ldr	r3, [pc, #36]	@ (8008c4c <HAL_RCC_ClockConfig+0x1c8>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fb fdc4 	bl	80047b8 <HAL_InitTick>

  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	40023c00 	.word	0x40023c00
 8008c40:	40023800 	.word	0x40023800
 8008c44:	0800c59c 	.word	0x0800c59c
 8008c48:	20000048 	.word	0x20000048
 8008c4c:	2000004c 	.word	0x2000004c

08008c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c54:	b090      	sub	sp, #64	@ 0x40
 8008c56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008c60:	2300      	movs	r3, #0
 8008c62:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c68:	4b59      	ldr	r3, [pc, #356]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	f003 030c 	and.w	r3, r3, #12
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	d00d      	beq.n	8008c90 <HAL_RCC_GetSysClockFreq+0x40>
 8008c74:	2b08      	cmp	r3, #8
 8008c76:	f200 80a1 	bhi.w	8008dbc <HAL_RCC_GetSysClockFreq+0x16c>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <HAL_RCC_GetSysClockFreq+0x34>
 8008c7e:	2b04      	cmp	r3, #4
 8008c80:	d003      	beq.n	8008c8a <HAL_RCC_GetSysClockFreq+0x3a>
 8008c82:	e09b      	b.n	8008dbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c84:	4b53      	ldr	r3, [pc, #332]	@ (8008dd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008c86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008c88:	e09b      	b.n	8008dc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c8a:	4b53      	ldr	r3, [pc, #332]	@ (8008dd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008c8e:	e098      	b.n	8008dc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c90:	4b4f      	ldr	r3, [pc, #316]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c98:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c9a:	4b4d      	ldr	r3, [pc, #308]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d028      	beq.n	8008cf8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	099b      	lsrs	r3, r3, #6
 8008cac:	2200      	movs	r2, #0
 8008cae:	623b      	str	r3, [r7, #32]
 8008cb0:	627a      	str	r2, [r7, #36]	@ 0x24
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008cb8:	2100      	movs	r1, #0
 8008cba:	4b47      	ldr	r3, [pc, #284]	@ (8008dd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008cbc:	fb03 f201 	mul.w	r2, r3, r1
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	fb00 f303 	mul.w	r3, r0, r3
 8008cc6:	4413      	add	r3, r2
 8008cc8:	4a43      	ldr	r2, [pc, #268]	@ (8008dd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008cca:	fba0 1202 	umull	r1, r2, r0, r2
 8008cce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cd0:	460a      	mov	r2, r1
 8008cd2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008cd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cd6:	4413      	add	r3, r2
 8008cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cdc:	2200      	movs	r2, #0
 8008cde:	61bb      	str	r3, [r7, #24]
 8008ce0:	61fa      	str	r2, [r7, #28]
 8008ce2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ce6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008cea:	f7f7 fac9 	bl	8000280 <__aeabi_uldivmod>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cf6:	e053      	b.n	8008da0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cf8:	4b35      	ldr	r3, [pc, #212]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	099b      	lsrs	r3, r3, #6
 8008cfe:	2200      	movs	r2, #0
 8008d00:	613b      	str	r3, [r7, #16]
 8008d02:	617a      	str	r2, [r7, #20]
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008d0a:	f04f 0b00 	mov.w	fp, #0
 8008d0e:	4652      	mov	r2, sl
 8008d10:	465b      	mov	r3, fp
 8008d12:	f04f 0000 	mov.w	r0, #0
 8008d16:	f04f 0100 	mov.w	r1, #0
 8008d1a:	0159      	lsls	r1, r3, #5
 8008d1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d20:	0150      	lsls	r0, r2, #5
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	ebb2 080a 	subs.w	r8, r2, sl
 8008d2a:	eb63 090b 	sbc.w	r9, r3, fp
 8008d2e:	f04f 0200 	mov.w	r2, #0
 8008d32:	f04f 0300 	mov.w	r3, #0
 8008d36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008d3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008d3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008d42:	ebb2 0408 	subs.w	r4, r2, r8
 8008d46:	eb63 0509 	sbc.w	r5, r3, r9
 8008d4a:	f04f 0200 	mov.w	r2, #0
 8008d4e:	f04f 0300 	mov.w	r3, #0
 8008d52:	00eb      	lsls	r3, r5, #3
 8008d54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d58:	00e2      	lsls	r2, r4, #3
 8008d5a:	4614      	mov	r4, r2
 8008d5c:	461d      	mov	r5, r3
 8008d5e:	eb14 030a 	adds.w	r3, r4, sl
 8008d62:	603b      	str	r3, [r7, #0]
 8008d64:	eb45 030b 	adc.w	r3, r5, fp
 8008d68:	607b      	str	r3, [r7, #4]
 8008d6a:	f04f 0200 	mov.w	r2, #0
 8008d6e:	f04f 0300 	mov.w	r3, #0
 8008d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d76:	4629      	mov	r1, r5
 8008d78:	028b      	lsls	r3, r1, #10
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d80:	4621      	mov	r1, r4
 8008d82:	028a      	lsls	r2, r1, #10
 8008d84:	4610      	mov	r0, r2
 8008d86:	4619      	mov	r1, r3
 8008d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	60bb      	str	r3, [r7, #8]
 8008d8e:	60fa      	str	r2, [r7, #12]
 8008d90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d94:	f7f7 fa74 	bl	8000280 <__aeabi_uldivmod>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008da0:	4b0b      	ldr	r3, [pc, #44]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	0c1b      	lsrs	r3, r3, #16
 8008da6:	f003 0303 	and.w	r3, r3, #3
 8008daa:	3301      	adds	r3, #1
 8008dac:	005b      	lsls	r3, r3, #1
 8008dae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008db0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008db8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008dba:	e002      	b.n	8008dc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008dbc:	4b05      	ldr	r3, [pc, #20]	@ (8008dd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3740      	adds	r7, #64	@ 0x40
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dce:	bf00      	nop
 8008dd0:	40023800 	.word	0x40023800
 8008dd4:	00f42400 	.word	0x00f42400
 8008dd8:	017d7840 	.word	0x017d7840

08008ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008de0:	4b03      	ldr	r3, [pc, #12]	@ (8008df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008de2:	681b      	ldr	r3, [r3, #0]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	20000048 	.word	0x20000048

08008df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008df8:	f7ff fff0 	bl	8008ddc <HAL_RCC_GetHCLKFreq>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	4b05      	ldr	r3, [pc, #20]	@ (8008e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	0a9b      	lsrs	r3, r3, #10
 8008e04:	f003 0307 	and.w	r3, r3, #7
 8008e08:	4903      	ldr	r1, [pc, #12]	@ (8008e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e0a:	5ccb      	ldrb	r3, [r1, r3]
 8008e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	40023800 	.word	0x40023800
 8008e18:	0800c5ac 	.word	0x0800c5ac

08008e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008e20:	f7ff ffdc 	bl	8008ddc <HAL_RCC_GetHCLKFreq>
 8008e24:	4602      	mov	r2, r0
 8008e26:	4b05      	ldr	r3, [pc, #20]	@ (8008e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	0b5b      	lsrs	r3, r3, #13
 8008e2c:	f003 0307 	and.w	r3, r3, #7
 8008e30:	4903      	ldr	r1, [pc, #12]	@ (8008e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e32:	5ccb      	ldrb	r3, [r1, r3]
 8008e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	40023800 	.word	0x40023800
 8008e40:	0800c5ac 	.word	0x0800c5ac

08008e44 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 0301 	and.w	r3, r3, #1
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d105      	bne.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d035      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008e6c:	4b67      	ldr	r3, [pc, #412]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e72:	f7fb fce5 	bl	8004840 <HAL_GetTick>
 8008e76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008e78:	e008      	b.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008e7a:	f7fb fce1 	bl	8004840 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d901      	bls.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e0ba      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008e8c:	4b60      	ldr	r3, [pc, #384]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1f0      	bne.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	019a      	lsls	r2, r3, #6
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	071b      	lsls	r3, r3, #28
 8008ea4:	495a      	ldr	r1, [pc, #360]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008eac:	4b57      	ldr	r3, [pc, #348]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008eae:	2201      	movs	r2, #1
 8008eb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008eb2:	f7fb fcc5 	bl	8004840 <HAL_GetTick>
 8008eb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008eb8:	e008      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008eba:	f7fb fcc1 	bl	8004840 <HAL_GetTick>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d901      	bls.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e09a      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008ecc:	4b50      	ldr	r3, [pc, #320]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d0f0      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 0302 	and.w	r3, r3, #2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f000 8083 	beq.w	8008fec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	60fb      	str	r3, [r7, #12]
 8008eea:	4b49      	ldr	r3, [pc, #292]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eee:	4a48      	ldr	r2, [pc, #288]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8008ef6:	4b46      	ldr	r3, [pc, #280]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008efe:	60fb      	str	r3, [r7, #12]
 8008f00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008f02:	4b44      	ldr	r3, [pc, #272]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a43      	ldr	r2, [pc, #268]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f0e:	f7fb fc97 	bl	8004840 <HAL_GetTick>
 8008f12:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008f14:	e008      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f16:	f7fb fc93 	bl	8004840 <HAL_GetTick>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d901      	bls.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e06c      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008f28:	4b3a      	ldr	r3, [pc, #232]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d0f0      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f34:	4b36      	ldr	r3, [pc, #216]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f3c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d02f      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d028      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f52:	4b2f      	ldr	r3, [pc, #188]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8009018 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008f5e:	2201      	movs	r2, #1
 8008f60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f62:	4b2d      	ldr	r3, [pc, #180]	@ (8009018 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008f68:	4a29      	ldr	r2, [pc, #164]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008f6e:	4b28      	ldr	r3, [pc, #160]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d114      	bne.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008f7a:	f7fb fc61 	bl	8004840 <HAL_GetTick>
 8008f7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f80:	e00a      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f82:	f7fb fc5d 	bl	8004840 <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d901      	bls.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e034      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f98:	4b1d      	ldr	r3, [pc, #116]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f9c:	f003 0302 	and.w	r3, r3, #2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d0ee      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fb0:	d10d      	bne.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008fb2:	4b17      	ldr	r3, [pc, #92]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fc6:	4912      	ldr	r1, [pc, #72]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	608b      	str	r3, [r1, #8]
 8008fcc:	e005      	b.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008fce:	4b10      	ldr	r3, [pc, #64]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	4a0f      	ldr	r2, [pc, #60]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008fd4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008fd8:	6093      	str	r3, [r2, #8]
 8008fda:	4b0d      	ldr	r3, [pc, #52]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008fdc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fe6:	490a      	ldr	r1, [pc, #40]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0308 	and.w	r3, r3, #8
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d003      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	7c1a      	ldrb	r2, [r3, #16]
 8008ffc:	4b07      	ldr	r3, [pc, #28]	@ (800901c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008ffe:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3718      	adds	r7, #24
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	42470068 	.word	0x42470068
 8009010:	40023800 	.word	0x40023800
 8009014:	40007000 	.word	0x40007000
 8009018:	42470e40 	.word	0x42470e40
 800901c:	424711e0 	.word	0x424711e0

08009020 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e073      	b.n	800911e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	7f5b      	ldrb	r3, [r3, #29]
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	d105      	bne.n	800904c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7f9 fd04 	bl	8002a54 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2202      	movs	r2, #2
 8009050:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f003 0310 	and.w	r3, r3, #16
 800905c:	2b10      	cmp	r3, #16
 800905e:	d055      	beq.n	800910c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	22ca      	movs	r2, #202	@ 0xca
 8009066:	625a      	str	r2, [r3, #36]	@ 0x24
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2253      	movs	r2, #83	@ 0x53
 800906e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fa49 	bl	8009508 <RTC_EnterInitMode>
 8009076:	4603      	mov	r3, r0
 8009078:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d12c      	bne.n	80090da <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	6812      	ldr	r2, [r2, #0]
 800908a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800908e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009092:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6899      	ldr	r1, [r3, #8]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	431a      	orrs	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	431a      	orrs	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	430a      	orrs	r2, r1
 80090b0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	68d2      	ldr	r2, [r2, #12]
 80090ba:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6919      	ldr	r1, [r3, #16]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	041a      	lsls	r2, r3, #16
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	430a      	orrs	r2, r1
 80090ce:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fa50 	bl	8009576 <RTC_ExitInitMode>
 80090d6:	4603      	mov	r3, r0
 80090d8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d110      	bne.n	8009102 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80090ee:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	430a      	orrs	r2, r1
 8009100:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	22ff      	movs	r2, #255	@ 0xff
 8009108:	625a      	str	r2, [r3, #36]	@ 0x24
 800910a:	e001      	b.n	8009110 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009110:	7bfb      	ldrb	r3, [r7, #15]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d102      	bne.n	800911c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800911c:	7bfb      	ldrb	r3, [r7, #15]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009126:	b590      	push	{r4, r7, lr}
 8009128:	b087      	sub	sp, #28
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	60b9      	str	r1, [r7, #8]
 8009130:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009132:	2300      	movs	r3, #0
 8009134:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	7f1b      	ldrb	r3, [r3, #28]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d101      	bne.n	8009142 <HAL_RTC_SetTime+0x1c>
 800913e:	2302      	movs	r3, #2
 8009140:	e087      	b.n	8009252 <HAL_RTC_SetTime+0x12c>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2201      	movs	r2, #1
 8009146:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2202      	movs	r2, #2
 800914c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d126      	bne.n	80091a2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800915e:	2b00      	cmp	r3, #0
 8009160:	d102      	bne.n	8009168 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	2200      	movs	r2, #0
 8009166:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	4618      	mov	r0, r3
 800916e:	f000 fa27 	bl	80095c0 <RTC_ByteToBcd2>
 8009172:	4603      	mov	r3, r0
 8009174:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	785b      	ldrb	r3, [r3, #1]
 800917a:	4618      	mov	r0, r3
 800917c:	f000 fa20 	bl	80095c0 <RTC_ByteToBcd2>
 8009180:	4603      	mov	r3, r0
 8009182:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009184:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	789b      	ldrb	r3, [r3, #2]
 800918a:	4618      	mov	r0, r3
 800918c:	f000 fa18 	bl	80095c0 <RTC_ByteToBcd2>
 8009190:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009192:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	78db      	ldrb	r3, [r3, #3]
 800919a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800919c:	4313      	orrs	r3, r2
 800919e:	617b      	str	r3, [r7, #20]
 80091a0:	e018      	b.n	80091d4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d102      	bne.n	80091b6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2200      	movs	r2, #0
 80091b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	785b      	ldrb	r3, [r3, #1]
 80091c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80091c2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80091c8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	78db      	ldrb	r3, [r3, #3]
 80091ce:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80091d0:	4313      	orrs	r3, r2
 80091d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	22ca      	movs	r2, #202	@ 0xca
 80091da:	625a      	str	r2, [r3, #36]	@ 0x24
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2253      	movs	r2, #83	@ 0x53
 80091e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f000 f98f 	bl	8009508 <RTC_EnterInitMode>
 80091ea:	4603      	mov	r3, r0
 80091ec:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80091ee:	7cfb      	ldrb	r3, [r7, #19]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d120      	bne.n	8009236 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80091fe:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009202:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689a      	ldr	r2, [r3, #8]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009212:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6899      	ldr	r1, [r3, #8]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	68da      	ldr	r2, [r3, #12]
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	431a      	orrs	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f9a2 	bl	8009576 <RTC_ExitInitMode>
 8009232:	4603      	mov	r3, r0
 8009234:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009236:	7cfb      	ldrb	r3, [r7, #19]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d102      	bne.n	8009242 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2201      	movs	r2, #1
 8009240:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	22ff      	movs	r2, #255	@ 0xff
 8009248:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	771a      	strb	r2, [r3, #28]

  return status;
 8009250:	7cfb      	ldrb	r3, [r7, #19]
}
 8009252:	4618      	mov	r0, r3
 8009254:	371c      	adds	r7, #28
 8009256:	46bd      	mov	sp, r7
 8009258:	bd90      	pop	{r4, r7, pc}

0800925a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b086      	sub	sp, #24
 800925e:	af00      	add	r7, sp, #0
 8009260:	60f8      	str	r0, [r7, #12]
 8009262:	60b9      	str	r1, [r7, #8]
 8009264:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800928c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009290:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	0c1b      	lsrs	r3, r3, #16
 8009296:	b2db      	uxtb	r3, r3
 8009298:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800929c:	b2da      	uxtb	r2, r3
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	0a1b      	lsrs	r3, r3, #8
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092ba:	b2da      	uxtb	r2, r3
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	0d9b      	lsrs	r3, r3, #22
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	f003 0301 	and.w	r3, r3, #1
 80092ca:	b2da      	uxtb	r2, r3
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d11a      	bne.n	800930c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	4618      	mov	r0, r3
 80092dc:	f000 f98e 	bl	80095fc <RTC_Bcd2ToByte>
 80092e0:	4603      	mov	r3, r0
 80092e2:	461a      	mov	r2, r3
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	785b      	ldrb	r3, [r3, #1]
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 f985 	bl	80095fc <RTC_Bcd2ToByte>
 80092f2:	4603      	mov	r3, r0
 80092f4:	461a      	mov	r2, r3
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	789b      	ldrb	r3, [r3, #2]
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 f97c 	bl	80095fc <RTC_Bcd2ToByte>
 8009304:	4603      	mov	r3, r0
 8009306:	461a      	mov	r2, r3
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009316:	b590      	push	{r4, r7, lr}
 8009318:	b087      	sub	sp, #28
 800931a:	af00      	add	r7, sp, #0
 800931c:	60f8      	str	r0, [r7, #12]
 800931e:	60b9      	str	r1, [r7, #8]
 8009320:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009322:	2300      	movs	r3, #0
 8009324:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	7f1b      	ldrb	r3, [r3, #28]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d101      	bne.n	8009332 <HAL_RTC_SetDate+0x1c>
 800932e:	2302      	movs	r3, #2
 8009330:	e071      	b.n	8009416 <HAL_RTC_SetDate+0x100>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2201      	movs	r2, #1
 8009336:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2202      	movs	r2, #2
 800933c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10e      	bne.n	8009362 <HAL_RTC_SetDate+0x4c>
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	785b      	ldrb	r3, [r3, #1]
 8009348:	f003 0310 	and.w	r3, r3, #16
 800934c:	2b00      	cmp	r3, #0
 800934e:	d008      	beq.n	8009362 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	785b      	ldrb	r3, [r3, #1]
 8009354:	f023 0310 	bic.w	r3, r3, #16
 8009358:	b2db      	uxtb	r3, r3
 800935a:	330a      	adds	r3, #10
 800935c:	b2da      	uxtb	r2, r3
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d11c      	bne.n	80093a2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	78db      	ldrb	r3, [r3, #3]
 800936c:	4618      	mov	r0, r3
 800936e:	f000 f927 	bl	80095c0 <RTC_ByteToBcd2>
 8009372:	4603      	mov	r3, r0
 8009374:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	785b      	ldrb	r3, [r3, #1]
 800937a:	4618      	mov	r0, r3
 800937c:	f000 f920 	bl	80095c0 <RTC_ByteToBcd2>
 8009380:	4603      	mov	r3, r0
 8009382:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009384:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	789b      	ldrb	r3, [r3, #2]
 800938a:	4618      	mov	r0, r3
 800938c:	f000 f918 	bl	80095c0 <RTC_ByteToBcd2>
 8009390:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009392:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800939c:	4313      	orrs	r3, r2
 800939e:	617b      	str	r3, [r7, #20]
 80093a0:	e00e      	b.n	80093c0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	78db      	ldrb	r3, [r3, #3]
 80093a6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	785b      	ldrb	r3, [r3, #1]
 80093ac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80093ae:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80093b4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80093bc:	4313      	orrs	r3, r2
 80093be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	22ca      	movs	r2, #202	@ 0xca
 80093c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2253      	movs	r2, #83	@ 0x53
 80093ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 f899 	bl	8009508 <RTC_EnterInitMode>
 80093d6:	4603      	mov	r3, r0
 80093d8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80093da:	7cfb      	ldrb	r3, [r7, #19]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10c      	bne.n	80093fa <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80093ea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80093ee:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 f8c0 	bl	8009576 <RTC_ExitInitMode>
 80093f6:	4603      	mov	r3, r0
 80093f8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80093fa:	7cfb      	ldrb	r3, [r7, #19]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d102      	bne.n	8009406 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2201      	movs	r2, #1
 8009404:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	22ff      	movs	r2, #255	@ 0xff
 800940c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	771a      	strb	r2, [r3, #28]

  return status;
 8009414:	7cfb      	ldrb	r3, [r7, #19]
}
 8009416:	4618      	mov	r0, r3
 8009418:	371c      	adds	r7, #28
 800941a:	46bd      	mov	sp, r7
 800941c:	bd90      	pop	{r4, r7, pc}

0800941e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b086      	sub	sp, #24
 8009422:	af00      	add	r7, sp, #0
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	60b9      	str	r1, [r7, #8]
 8009428:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800942a:	2300      	movs	r3, #0
 800942c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009438:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800943c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	0c1b      	lsrs	r3, r3, #16
 8009442:	b2da      	uxtb	r2, r3
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	0a1b      	lsrs	r3, r3, #8
 800944c:	b2db      	uxtb	r3, r3
 800944e:	f003 031f 	and.w	r3, r3, #31
 8009452:	b2da      	uxtb	r2, r3
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	b2db      	uxtb	r3, r3
 800945c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009460:	b2da      	uxtb	r2, r3
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	0b5b      	lsrs	r3, r3, #13
 800946a:	b2db      	uxtb	r3, r3
 800946c:	f003 0307 	and.w	r3, r3, #7
 8009470:	b2da      	uxtb	r2, r3
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d11a      	bne.n	80094b2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	78db      	ldrb	r3, [r3, #3]
 8009480:	4618      	mov	r0, r3
 8009482:	f000 f8bb 	bl	80095fc <RTC_Bcd2ToByte>
 8009486:	4603      	mov	r3, r0
 8009488:	461a      	mov	r2, r3
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	785b      	ldrb	r3, [r3, #1]
 8009492:	4618      	mov	r0, r3
 8009494:	f000 f8b2 	bl	80095fc <RTC_Bcd2ToByte>
 8009498:	4603      	mov	r3, r0
 800949a:	461a      	mov	r2, r3
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	789b      	ldrb	r3, [r3, #2]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 f8a9 	bl	80095fc <RTC_Bcd2ToByte>
 80094aa:	4603      	mov	r3, r0
 80094ac:	461a      	mov	r2, r3
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3718      	adds	r7, #24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80094c4:	2300      	movs	r3, #0
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a0d      	ldr	r2, [pc, #52]	@ (8009504 <HAL_RTC_WaitForSynchro+0x48>)
 80094ce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80094d0:	f7fb f9b6 	bl	8004840 <HAL_GetTick>
 80094d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80094d6:	e009      	b.n	80094ec <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80094d8:	f7fb f9b2 	bl	8004840 <HAL_GetTick>
 80094dc:	4602      	mov	r2, r0
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	1ad3      	subs	r3, r2, r3
 80094e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80094e6:	d901      	bls.n	80094ec <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e007      	b.n	80094fc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f003 0320 	and.w	r3, r3, #32
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d0ee      	beq.n	80094d8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	00013f5f 	.word	0x00013f5f

08009508 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009510:	2300      	movs	r3, #0
 8009512:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009514:	2300      	movs	r3, #0
 8009516:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009522:	2b00      	cmp	r3, #0
 8009524:	d122      	bne.n	800956c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68da      	ldr	r2, [r3, #12]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009534:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009536:	f7fb f983 	bl	8004840 <HAL_GetTick>
 800953a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800953c:	e00c      	b.n	8009558 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800953e:	f7fb f97f 	bl	8004840 <HAL_GetTick>
 8009542:	4602      	mov	r2, r0
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800954c:	d904      	bls.n	8009558 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2204      	movs	r2, #4
 8009552:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009562:	2b00      	cmp	r3, #0
 8009564:	d102      	bne.n	800956c <RTC_EnterInitMode+0x64>
 8009566:	7bfb      	ldrb	r3, [r7, #15]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d1e8      	bne.n	800953e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800956c:	7bfb      	ldrb	r3, [r7, #15]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b084      	sub	sp, #16
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68da      	ldr	r2, [r3, #12]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009590:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f003 0320 	and.w	r3, r3, #32
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10a      	bne.n	80095b6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7ff ff8b 	bl	80094bc <HAL_RTC_WaitForSynchro>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d004      	beq.n	80095b6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2204      	movs	r2, #4
 80095b0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	4603      	mov	r3, r0
 80095c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80095ca:	2300      	movs	r3, #0
 80095cc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80095ce:	e005      	b.n	80095dc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	3301      	adds	r3, #1
 80095d4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80095d6:	79fb      	ldrb	r3, [r7, #7]
 80095d8:	3b0a      	subs	r3, #10
 80095da:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80095dc:	79fb      	ldrb	r3, [r7, #7]
 80095de:	2b09      	cmp	r3, #9
 80095e0:	d8f6      	bhi.n	80095d0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	011b      	lsls	r3, r3, #4
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	79fb      	ldrb	r3, [r7, #7]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	b2db      	uxtb	r3, r3
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	4603      	mov	r3, r0
 8009604:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8009606:	2300      	movs	r3, #0
 8009608:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800960a:	79fb      	ldrb	r3, [r7, #7]
 800960c:	091b      	lsrs	r3, r3, #4
 800960e:	b2db      	uxtb	r3, r3
 8009610:	461a      	mov	r2, r3
 8009612:	4613      	mov	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	005b      	lsls	r3, r3, #1
 800961a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	b2da      	uxtb	r2, r3
 8009620:	79fb      	ldrb	r3, [r7, #7]
 8009622:	f003 030f 	and.w	r3, r3, #15
 8009626:	b2db      	uxtb	r3, r3
 8009628:	4413      	add	r3, r2
 800962a:	b2db      	uxtb	r3, r3
}
 800962c:	4618      	mov	r0, r3
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d101      	bne.n	800964a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e07b      	b.n	8009742 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800964e:	2b00      	cmp	r3, #0
 8009650:	d108      	bne.n	8009664 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800965a:	d009      	beq.n	8009670 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	61da      	str	r2, [r3, #28]
 8009662:	e005      	b.n	8009670 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800967c:	b2db      	uxtb	r3, r3
 800967e:	2b00      	cmp	r3, #0
 8009680:	d106      	bne.n	8009690 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7fa fb5c 	bl	8003d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2202      	movs	r2, #2
 8009694:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80096b8:	431a      	orrs	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096c2:	431a      	orrs	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	f003 0302 	and.w	r3, r3, #2
 80096cc:	431a      	orrs	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	695b      	ldr	r3, [r3, #20]
 80096d2:	f003 0301 	and.w	r3, r3, #1
 80096d6:	431a      	orrs	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096e0:	431a      	orrs	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096ea:	431a      	orrs	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096f4:	ea42 0103 	orr.w	r1, r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	430a      	orrs	r2, r1
 8009706:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	0c1b      	lsrs	r3, r3, #16
 800970e:	f003 0104 	and.w	r1, r3, #4
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009716:	f003 0210 	and.w	r2, r3, #16
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	430a      	orrs	r2, r1
 8009720:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	69da      	ldr	r2, [r3, #28]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009730:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
	...

0800974c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	4613      	mov	r3, r2
 8009758:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b01      	cmp	r3, #1
 8009764:	d001      	beq.n	800976a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8009766:	2302      	movs	r3, #2
 8009768:	e097      	b.n	800989a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d002      	beq.n	8009776 <HAL_SPI_Transmit_DMA+0x2a>
 8009770:	88fb      	ldrh	r3, [r7, #6]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d101      	bne.n	800977a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e08f      	b.n	800989a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009780:	2b01      	cmp	r3, #1
 8009782:	d101      	bne.n	8009788 <HAL_SPI_Transmit_DMA+0x3c>
 8009784:	2302      	movs	r3, #2
 8009786:	e088      	b.n	800989a <HAL_SPI_Transmit_DMA+0x14e>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2203      	movs	r2, #3
 8009794:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	88fa      	ldrh	r2, [r7, #6]
 80097a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	88fa      	ldrh	r2, [r7, #6]
 80097ae:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097d6:	d10f      	bne.n	80097f8 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80097f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097fc:	4a29      	ldr	r2, [pc, #164]	@ (80098a4 <HAL_SPI_Transmit_DMA+0x158>)
 80097fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009804:	4a28      	ldr	r2, [pc, #160]	@ (80098a8 <HAL_SPI_Transmit_DMA+0x15c>)
 8009806:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800980c:	4a27      	ldr	r2, [pc, #156]	@ (80098ac <HAL_SPI_Transmit_DMA+0x160>)
 800980e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009814:	2200      	movs	r2, #0
 8009816:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009820:	4619      	mov	r1, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	330c      	adds	r3, #12
 8009828:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800982e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009830:	f7fb fd0c 	bl	800524c <HAL_DMA_Start_IT>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00b      	beq.n	8009852 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800983e:	f043 0210 	orr.w	r2, r3, #16
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e023      	b.n	800989a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800985c:	2b40      	cmp	r3, #64	@ 0x40
 800985e:	d007      	beq.n	8009870 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800986e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	685a      	ldr	r2, [r3, #4]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f042 0220 	orr.w	r2, r2, #32
 8009886:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f042 0202 	orr.w	r2, r2, #2
 8009896:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	08009b69 	.word	0x08009b69
 80098a8:	08009ac1 	.word	0x08009ac1
 80098ac:	08009b85 	.word	0x08009b85

080098b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b088      	sub	sp, #32
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10e      	bne.n	80098f0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d009      	beq.n	80098f0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d004      	beq.n	80098f0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	4798      	blx	r3
    return;
 80098ee:	e0ce      	b.n	8009a8e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d009      	beq.n	800990e <HAL_SPI_IRQHandler+0x5e>
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009900:	2b00      	cmp	r3, #0
 8009902:	d004      	beq.n	800990e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	4798      	blx	r3
    return;
 800990c:	e0bf      	b.n	8009a8e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	f003 0320 	and.w	r3, r3, #32
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10a      	bne.n	800992e <HAL_SPI_IRQHandler+0x7e>
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800991e:	2b00      	cmp	r3, #0
 8009920:	d105      	bne.n	800992e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009928:	2b00      	cmp	r3, #0
 800992a:	f000 80b0 	beq.w	8009a8e <HAL_SPI_IRQHandler+0x1de>
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	f003 0320 	and.w	r3, r3, #32
 8009934:	2b00      	cmp	r3, #0
 8009936:	f000 80aa 	beq.w	8009a8e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009940:	2b00      	cmp	r3, #0
 8009942:	d023      	beq.n	800998c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800994a:	b2db      	uxtb	r3, r3
 800994c:	2b03      	cmp	r3, #3
 800994e:	d011      	beq.n	8009974 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009954:	f043 0204 	orr.w	r2, r3, #4
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800995c:	2300      	movs	r3, #0
 800995e:	617b      	str	r3, [r7, #20]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	617b      	str	r3, [r7, #20]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	617b      	str	r3, [r7, #20]
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	e00b      	b.n	800998c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009974:	2300      	movs	r3, #0
 8009976:	613b      	str	r3, [r7, #16]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	613b      	str	r3, [r7, #16]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	613b      	str	r3, [r7, #16]
 8009988:	693b      	ldr	r3, [r7, #16]
        return;
 800998a:	e080      	b.n	8009a8e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	f003 0320 	and.w	r3, r3, #32
 8009992:	2b00      	cmp	r3, #0
 8009994:	d014      	beq.n	80099c0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800999a:	f043 0201 	orr.w	r2, r3, #1
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80099a2:	2300      	movs	r3, #0
 80099a4:	60fb      	str	r3, [r7, #12]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	60fb      	str	r3, [r7, #12]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00c      	beq.n	80099e4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099ce:	f043 0208 	orr.w	r2, r3, #8
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80099d6:	2300      	movs	r3, #0
 80099d8:	60bb      	str	r3, [r7, #8]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	60bb      	str	r3, [r7, #8]
 80099e2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d04f      	beq.n	8009a8c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	685a      	ldr	r2, [r3, #4]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80099fa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	f003 0302 	and.w	r3, r3, #2
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d104      	bne.n	8009a18 <HAL_SPI_IRQHandler+0x168>
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	f003 0301 	and.w	r3, r3, #1
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d034      	beq.n	8009a82 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	685a      	ldr	r2, [r3, #4]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f022 0203 	bic.w	r2, r2, #3
 8009a26:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d011      	beq.n	8009a54 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a34:	4a17      	ldr	r2, [pc, #92]	@ (8009a94 <HAL_SPI_IRQHandler+0x1e4>)
 8009a36:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7fb fc5d 	bl	80052fc <HAL_DMA_Abort_IT>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d005      	beq.n	8009a54 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d016      	beq.n	8009a8a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a60:	4a0c      	ldr	r2, [pc, #48]	@ (8009a94 <HAL_SPI_IRQHandler+0x1e4>)
 8009a62:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fb fc47 	bl	80052fc <HAL_DMA_Abort_IT>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00a      	beq.n	8009a8a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8009a80:	e003      	b.n	8009a8a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f812 	bl	8009aac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009a88:	e000      	b.n	8009a8c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8009a8a:	bf00      	nop
    return;
 8009a8c:	bf00      	nop
  }
}
 8009a8e:	3720      	adds	r7, #32
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	08009bc5 	.word	0x08009bc5

08009a98 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b086      	sub	sp, #24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009acc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ace:	f7fa feb7 	bl	8004840 <HAL_GetTick>
 8009ad2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ae2:	d03b      	beq.n	8009b5c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f022 0220 	bic.w	r2, r2, #32
 8009af2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685a      	ldr	r2, [r3, #4]
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f022 0202 	bic.w	r2, r2, #2
 8009b02:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	2164      	movs	r1, #100	@ 0x64
 8009b08:	6978      	ldr	r0, [r7, #20]
 8009b0a:	f000 f8f7 	bl	8009cfc <SPI_EndRxTxTransaction>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d005      	beq.n	8009b20 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b18:	f043 0220 	orr.w	r2, r3, #32
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10a      	bne.n	8009b3e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b28:	2300      	movs	r3, #0
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	60fb      	str	r3, [r7, #12]
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	60fb      	str	r3, [r7, #12]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2200      	movs	r2, #0
 8009b42:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d003      	beq.n	8009b5c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009b54:	6978      	ldr	r0, [r7, #20]
 8009b56:	f7ff ffa9 	bl	8009aac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009b5a:	e002      	b.n	8009b62 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009b5c:	6978      	ldr	r0, [r7, #20]
 8009b5e:	f7f7 f85d 	bl	8000c1c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b74:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f7ff ff8e 	bl	8009a98 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b7c:	bf00      	nop
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b90:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	685a      	ldr	r2, [r3, #4]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f022 0203 	bic.w	r2, r2, #3
 8009ba0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ba6:	f043 0210 	orr.w	r2, r3, #16
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f7ff ff78 	bl	8009aac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009bbc:	bf00      	nop
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bd0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f7ff ff64 	bl	8009aac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009be4:	bf00      	nop
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b088      	sub	sp, #32
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	603b      	str	r3, [r7, #0]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009bfc:	f7fa fe20 	bl	8004840 <HAL_GetTick>
 8009c00:	4602      	mov	r2, r0
 8009c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c04:	1a9b      	subs	r3, r3, r2
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	4413      	add	r3, r2
 8009c0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009c0c:	f7fa fe18 	bl	8004840 <HAL_GetTick>
 8009c10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009c12:	4b39      	ldr	r3, [pc, #228]	@ (8009cf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	015b      	lsls	r3, r3, #5
 8009c18:	0d1b      	lsrs	r3, r3, #20
 8009c1a:	69fa      	ldr	r2, [r7, #28]
 8009c1c:	fb02 f303 	mul.w	r3, r2, r3
 8009c20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c22:	e054      	b.n	8009cce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2a:	d050      	beq.n	8009cce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c2c:	f7fa fe08 	bl	8004840 <HAL_GetTick>
 8009c30:	4602      	mov	r2, r0
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d902      	bls.n	8009c42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d13d      	bne.n	8009cbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009c50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c5a:	d111      	bne.n	8009c80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c64:	d004      	beq.n	8009c70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c6e:	d107      	bne.n	8009c80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c88:	d10f      	bne.n	8009caa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009ca8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	e017      	b.n	8009cee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d101      	bne.n	8009cc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	689a      	ldr	r2, [r3, #8]
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	bf0c      	ite	eq
 8009cde:	2301      	moveq	r3, #1
 8009ce0:	2300      	movne	r3, #0
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	79fb      	ldrb	r3, [r7, #7]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d19b      	bne.n	8009c24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3720      	adds	r7, #32
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20000048 	.word	0x20000048

08009cfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af02      	add	r7, sp, #8
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	2102      	movs	r1, #2
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f7ff ff6a 	bl	8009bec <SPI_WaitFlagStateUntilTimeout>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d007      	beq.n	8009d2e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d22:	f043 0220 	orr.w	r2, r3, #32
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	e032      	b.n	8009d94 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8009d9c <SPI_EndRxTxTransaction+0xa0>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a1b      	ldr	r2, [pc, #108]	@ (8009da0 <SPI_EndRxTxTransaction+0xa4>)
 8009d34:	fba2 2303 	umull	r2, r3, r2, r3
 8009d38:	0d5b      	lsrs	r3, r3, #21
 8009d3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009d3e:	fb02 f303 	mul.w	r3, r2, r3
 8009d42:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d4c:	d112      	bne.n	8009d74 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2200      	movs	r2, #0
 8009d56:	2180      	movs	r1, #128	@ 0x80
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f7ff ff47 	bl	8009bec <SPI_WaitFlagStateUntilTimeout>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d016      	beq.n	8009d92 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d68:	f043 0220 	orr.w	r2, r3, #32
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009d70:	2303      	movs	r3, #3
 8009d72:	e00f      	b.n	8009d94 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00a      	beq.n	8009d90 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d8a:	2b80      	cmp	r3, #128	@ 0x80
 8009d8c:	d0f2      	beq.n	8009d74 <SPI_EndRxTxTransaction+0x78>
 8009d8e:	e000      	b.n	8009d92 <SPI_EndRxTxTransaction+0x96>
        break;
 8009d90:	bf00      	nop
  }

  return HAL_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3718      	adds	r7, #24
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	20000048 	.word	0x20000048
 8009da0:	165e9f81 	.word	0x165e9f81

08009da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d101      	bne.n	8009db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e041      	b.n	8009e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d106      	bne.n	8009dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f7fa fb3a 	bl	8004444 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	3304      	adds	r3, #4
 8009de0:	4619      	mov	r1, r3
 8009de2:	4610      	mov	r0, r2
 8009de4:	f000 fd86 	bl	800a8f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2201      	movs	r2, #1
 8009e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
	...

08009e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d001      	beq.n	8009e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e044      	b.n	8009ee6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2202      	movs	r2, #2
 8009e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68da      	ldr	r2, [r3, #12]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f042 0201 	orr.w	r2, r2, #1
 8009e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a1e      	ldr	r2, [pc, #120]	@ (8009ef4 <HAL_TIM_Base_Start_IT+0xb0>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d018      	beq.n	8009eb0 <HAL_TIM_Base_Start_IT+0x6c>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e86:	d013      	beq.n	8009eb0 <HAL_TIM_Base_Start_IT+0x6c>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a1a      	ldr	r2, [pc, #104]	@ (8009ef8 <HAL_TIM_Base_Start_IT+0xb4>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d00e      	beq.n	8009eb0 <HAL_TIM_Base_Start_IT+0x6c>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a19      	ldr	r2, [pc, #100]	@ (8009efc <HAL_TIM_Base_Start_IT+0xb8>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d009      	beq.n	8009eb0 <HAL_TIM_Base_Start_IT+0x6c>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a17      	ldr	r2, [pc, #92]	@ (8009f00 <HAL_TIM_Base_Start_IT+0xbc>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d004      	beq.n	8009eb0 <HAL_TIM_Base_Start_IT+0x6c>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a16      	ldr	r2, [pc, #88]	@ (8009f04 <HAL_TIM_Base_Start_IT+0xc0>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d111      	bne.n	8009ed4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	f003 0307 	and.w	r3, r3, #7
 8009eba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2b06      	cmp	r3, #6
 8009ec0:	d010      	beq.n	8009ee4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f042 0201 	orr.w	r2, r2, #1
 8009ed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ed2:	e007      	b.n	8009ee4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f042 0201 	orr.w	r2, r2, #1
 8009ee2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	40010000 	.word	0x40010000
 8009ef8:	40000400 	.word	0x40000400
 8009efc:	40000800 	.word	0x40000800
 8009f00:	40000c00 	.word	0x40000c00
 8009f04:	40014000 	.word	0x40014000

08009f08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d101      	bne.n	8009f1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	e041      	b.n	8009f9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d106      	bne.n	8009f34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f839 	bl	8009fa6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2202      	movs	r2, #2
 8009f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	3304      	adds	r3, #4
 8009f44:	4619      	mov	r1, r3
 8009f46:	4610      	mov	r0, r2
 8009f48:	f000 fcd4 	bl	800a8f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b083      	sub	sp, #12
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009fae:	bf00      	nop
 8009fb0:	370c      	adds	r7, #12
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
	...

08009fbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d109      	bne.n	8009fe0 <HAL_TIM_PWM_Start+0x24>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	bf14      	ite	ne
 8009fd8:	2301      	movne	r3, #1
 8009fda:	2300      	moveq	r3, #0
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	e022      	b.n	800a026 <HAL_TIM_PWM_Start+0x6a>
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	2b04      	cmp	r3, #4
 8009fe4:	d109      	bne.n	8009ffa <HAL_TIM_PWM_Start+0x3e>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	bf14      	ite	ne
 8009ff2:	2301      	movne	r3, #1
 8009ff4:	2300      	moveq	r3, #0
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	e015      	b.n	800a026 <HAL_TIM_PWM_Start+0x6a>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b08      	cmp	r3, #8
 8009ffe:	d109      	bne.n	800a014 <HAL_TIM_PWM_Start+0x58>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a006:	b2db      	uxtb	r3, r3
 800a008:	2b01      	cmp	r3, #1
 800a00a:	bf14      	ite	ne
 800a00c:	2301      	movne	r3, #1
 800a00e:	2300      	moveq	r3, #0
 800a010:	b2db      	uxtb	r3, r3
 800a012:	e008      	b.n	800a026 <HAL_TIM_PWM_Start+0x6a>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	bf14      	ite	ne
 800a020:	2301      	movne	r3, #1
 800a022:	2300      	moveq	r3, #0
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b00      	cmp	r3, #0
 800a028:	d001      	beq.n	800a02e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e068      	b.n	800a100 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d104      	bne.n	800a03e <HAL_TIM_PWM_Start+0x82>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2202      	movs	r2, #2
 800a038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a03c:	e013      	b.n	800a066 <HAL_TIM_PWM_Start+0xaa>
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2b04      	cmp	r3, #4
 800a042:	d104      	bne.n	800a04e <HAL_TIM_PWM_Start+0x92>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2202      	movs	r2, #2
 800a048:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a04c:	e00b      	b.n	800a066 <HAL_TIM_PWM_Start+0xaa>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	2b08      	cmp	r3, #8
 800a052:	d104      	bne.n	800a05e <HAL_TIM_PWM_Start+0xa2>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2202      	movs	r2, #2
 800a058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a05c:	e003      	b.n	800a066 <HAL_TIM_PWM_Start+0xaa>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2202      	movs	r2, #2
 800a062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2201      	movs	r2, #1
 800a06c:	6839      	ldr	r1, [r7, #0]
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 fef2 	bl	800ae58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a23      	ldr	r2, [pc, #140]	@ (800a108 <HAL_TIM_PWM_Start+0x14c>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d107      	bne.n	800a08e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a08c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a1d      	ldr	r2, [pc, #116]	@ (800a108 <HAL_TIM_PWM_Start+0x14c>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d018      	beq.n	800a0ca <HAL_TIM_PWM_Start+0x10e>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0a0:	d013      	beq.n	800a0ca <HAL_TIM_PWM_Start+0x10e>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a19      	ldr	r2, [pc, #100]	@ (800a10c <HAL_TIM_PWM_Start+0x150>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d00e      	beq.n	800a0ca <HAL_TIM_PWM_Start+0x10e>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a17      	ldr	r2, [pc, #92]	@ (800a110 <HAL_TIM_PWM_Start+0x154>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d009      	beq.n	800a0ca <HAL_TIM_PWM_Start+0x10e>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a16      	ldr	r2, [pc, #88]	@ (800a114 <HAL_TIM_PWM_Start+0x158>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d004      	beq.n	800a0ca <HAL_TIM_PWM_Start+0x10e>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a14      	ldr	r2, [pc, #80]	@ (800a118 <HAL_TIM_PWM_Start+0x15c>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d111      	bne.n	800a0ee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f003 0307 	and.w	r3, r3, #7
 800a0d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b06      	cmp	r3, #6
 800a0da:	d010      	beq.n	800a0fe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f042 0201 	orr.w	r2, r2, #1
 800a0ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ec:	e007      	b.n	800a0fe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f042 0201 	orr.w	r2, r2, #1
 800a0fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	40010000 	.word	0x40010000
 800a10c:	40000400 	.word	0x40000400
 800a110:	40000800 	.word	0x40000800
 800a114:	40000c00 	.word	0x40000c00
 800a118:	40014000 	.word	0x40014000

0800a11c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d101      	bne.n	800a130 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	e097      	b.n	800a260 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a136:	b2db      	uxtb	r3, r3
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d106      	bne.n	800a14a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7fa f9bb 	bl	80044c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2202      	movs	r2, #2
 800a14e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	6812      	ldr	r2, [r2, #0]
 800a15c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a160:	f023 0307 	bic.w	r3, r3, #7
 800a164:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	3304      	adds	r3, #4
 800a16e:	4619      	mov	r1, r3
 800a170:	4610      	mov	r0, r2
 800a172:	f000 fbbf 	bl	800a8f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	6a1b      	ldr	r3, [r3, #32]
 800a18c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	697a      	ldr	r2, [r7, #20]
 800a194:	4313      	orrs	r3, r2
 800a196:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a19e:	f023 0303 	bic.w	r3, r3, #3
 800a1a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	021b      	lsls	r3, r3, #8
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a1bc:	f023 030c 	bic.w	r3, r3, #12
 800a1c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a1c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	68da      	ldr	r2, [r3, #12]
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	69db      	ldr	r3, [r3, #28]
 800a1d6:	021b      	lsls	r3, r3, #8
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	011a      	lsls	r2, r3, #4
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	031b      	lsls	r3, r3, #12
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a1fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a202:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	695b      	ldr	r3, [r3, #20]
 800a20c:	011b      	lsls	r3, r3, #4
 800a20e:	4313      	orrs	r3, r2
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	4313      	orrs	r3, r2
 800a214:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2201      	movs	r2, #1
 800a23a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3718      	adds	r7, #24
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a278:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a280:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a288:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a290:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d110      	bne.n	800a2ba <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a298:	7bfb      	ldrb	r3, [r7, #15]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d102      	bne.n	800a2a4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a29e:	7b7b      	ldrb	r3, [r7, #13]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d001      	beq.n	800a2a8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e089      	b.n	800a3bc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2202      	movs	r2, #2
 800a2ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2b8:	e031      	b.n	800a31e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	2b04      	cmp	r3, #4
 800a2be:	d110      	bne.n	800a2e2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2c0:	7bbb      	ldrb	r3, [r7, #14]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d102      	bne.n	800a2cc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a2c6:	7b3b      	ldrb	r3, [r7, #12]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d001      	beq.n	800a2d0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e075      	b.n	800a3bc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2202      	movs	r2, #2
 800a2dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a2e0:	e01d      	b.n	800a31e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d108      	bne.n	800a2fa <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2e8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d105      	bne.n	800a2fa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2ee:	7b7b      	ldrb	r3, [r7, #13]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d102      	bne.n	800a2fa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a2f4:	7b3b      	ldrb	r3, [r7, #12]
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d001      	beq.n	800a2fe <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e05e      	b.n	800a3bc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2202      	movs	r2, #2
 800a302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2202      	movs	r2, #2
 800a30a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2202      	movs	r2, #2
 800a312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2202      	movs	r2, #2
 800a31a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d003      	beq.n	800a32c <HAL_TIM_Encoder_Start_IT+0xc4>
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	2b04      	cmp	r3, #4
 800a328:	d010      	beq.n	800a34c <HAL_TIM_Encoder_Start_IT+0xe4>
 800a32a:	e01f      	b.n	800a36c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2201      	movs	r2, #1
 800a332:	2100      	movs	r1, #0
 800a334:	4618      	mov	r0, r3
 800a336:	f000 fd8f 	bl	800ae58 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68da      	ldr	r2, [r3, #12]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f042 0202 	orr.w	r2, r2, #2
 800a348:	60da      	str	r2, [r3, #12]
      break;
 800a34a:	e02e      	b.n	800a3aa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2201      	movs	r2, #1
 800a352:	2104      	movs	r1, #4
 800a354:	4618      	mov	r0, r3
 800a356:	f000 fd7f 	bl	800ae58 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68da      	ldr	r2, [r3, #12]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f042 0204 	orr.w	r2, r2, #4
 800a368:	60da      	str	r2, [r3, #12]
      break;
 800a36a:	e01e      	b.n	800a3aa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2201      	movs	r2, #1
 800a372:	2100      	movs	r1, #0
 800a374:	4618      	mov	r0, r3
 800a376:	f000 fd6f 	bl	800ae58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2201      	movs	r2, #1
 800a380:	2104      	movs	r1, #4
 800a382:	4618      	mov	r0, r3
 800a384:	f000 fd68 	bl	800ae58 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68da      	ldr	r2, [r3, #12]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f042 0202 	orr.w	r2, r2, #2
 800a396:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68da      	ldr	r2, [r3, #12]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f042 0204 	orr.w	r2, r2, #4
 800a3a6:	60da      	str	r2, [r3, #12]
      break;
 800a3a8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f042 0201 	orr.w	r2, r2, #1
 800a3b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	f003 0302 	and.w	r3, r3, #2
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d020      	beq.n	800a428 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f003 0302 	and.w	r3, r3, #2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d01b      	beq.n	800a428 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f06f 0202 	mvn.w	r2, #2
 800a3f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	f003 0303 	and.w	r3, r3, #3
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d003      	beq.n	800a416 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7f8 f940 	bl	8002694 <HAL_TIM_IC_CaptureCallback>
 800a414:	e005      	b.n	800a422 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 fa4d 	bl	800a8b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 fa54 	bl	800a8ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	f003 0304 	and.w	r3, r3, #4
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d020      	beq.n	800a474 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f003 0304 	and.w	r3, r3, #4
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d01b      	beq.n	800a474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f06f 0204 	mvn.w	r2, #4
 800a444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2202      	movs	r2, #2
 800a44a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a456:	2b00      	cmp	r3, #0
 800a458:	d003      	beq.n	800a462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f7f8 f91a 	bl	8002694 <HAL_TIM_IC_CaptureCallback>
 800a460:	e005      	b.n	800a46e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fa27 	bl	800a8b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 fa2e 	bl	800a8ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	f003 0308 	and.w	r3, r3, #8
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d020      	beq.n	800a4c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f003 0308 	and.w	r3, r3, #8
 800a484:	2b00      	cmp	r3, #0
 800a486:	d01b      	beq.n	800a4c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f06f 0208 	mvn.w	r2, #8
 800a490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2204      	movs	r2, #4
 800a496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	f003 0303 	and.w	r3, r3, #3
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d003      	beq.n	800a4ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7f8 f8f4 	bl	8002694 <HAL_TIM_IC_CaptureCallback>
 800a4ac:	e005      	b.n	800a4ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fa01 	bl	800a8b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fa08 	bl	800a8ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	f003 0310 	and.w	r3, r3, #16
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d020      	beq.n	800a50c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f003 0310 	and.w	r3, r3, #16
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d01b      	beq.n	800a50c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f06f 0210 	mvn.w	r2, #16
 800a4dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2208      	movs	r2, #8
 800a4e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d003      	beq.n	800a4fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f7f8 f8ce 	bl	8002694 <HAL_TIM_IC_CaptureCallback>
 800a4f8:	e005      	b.n	800a506 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f9db 	bl	800a8b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f9e2 	bl	800a8ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00c      	beq.n	800a530 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f003 0301 	and.w	r3, r3, #1
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d007      	beq.n	800a530 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f06f 0201 	mvn.w	r2, #1
 800a528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f7f6 fa16 	bl	800095c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00c      	beq.n	800a554 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a540:	2b00      	cmp	r3, #0
 800a542:	d007      	beq.n	800a554 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a54c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fd72 	bl	800b038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00c      	beq.n	800a578 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a564:	2b00      	cmp	r3, #0
 800a566:	d007      	beq.n	800a578 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f9b3 	bl	800a8de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	f003 0320 	and.w	r3, r3, #32
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00c      	beq.n	800a59c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f003 0320 	and.w	r3, r3, #32
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d007      	beq.n	800a59c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f06f 0220 	mvn.w	r2, #32
 800a594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fd44 	bl	800b024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a59c:	bf00      	nop
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d101      	bne.n	800a5c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a5be:	2302      	movs	r3, #2
 800a5c0:	e0ae      	b.n	800a720 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b0c      	cmp	r3, #12
 800a5ce:	f200 809f 	bhi.w	800a710 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a5d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a5d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d8:	0800a60d 	.word	0x0800a60d
 800a5dc:	0800a711 	.word	0x0800a711
 800a5e0:	0800a711 	.word	0x0800a711
 800a5e4:	0800a711 	.word	0x0800a711
 800a5e8:	0800a64d 	.word	0x0800a64d
 800a5ec:	0800a711 	.word	0x0800a711
 800a5f0:	0800a711 	.word	0x0800a711
 800a5f4:	0800a711 	.word	0x0800a711
 800a5f8:	0800a68f 	.word	0x0800a68f
 800a5fc:	0800a711 	.word	0x0800a711
 800a600:	0800a711 	.word	0x0800a711
 800a604:	0800a711 	.word	0x0800a711
 800a608:	0800a6cf 	.word	0x0800a6cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68b9      	ldr	r1, [r7, #8]
 800a612:	4618      	mov	r0, r3
 800a614:	f000 f9fa 	bl	800aa0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	699a      	ldr	r2, [r3, #24]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f042 0208 	orr.w	r2, r2, #8
 800a626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	699a      	ldr	r2, [r3, #24]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f022 0204 	bic.w	r2, r2, #4
 800a636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6999      	ldr	r1, [r3, #24]
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	691a      	ldr	r2, [r3, #16]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	430a      	orrs	r2, r1
 800a648:	619a      	str	r2, [r3, #24]
      break;
 800a64a:	e064      	b.n	800a716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68b9      	ldr	r1, [r7, #8]
 800a652:	4618      	mov	r0, r3
 800a654:	f000 fa40 	bl	800aad8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	699a      	ldr	r2, [r3, #24]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	699a      	ldr	r2, [r3, #24]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6999      	ldr	r1, [r3, #24]
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	021a      	lsls	r2, r3, #8
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	430a      	orrs	r2, r1
 800a68a:	619a      	str	r2, [r3, #24]
      break;
 800a68c:	e043      	b.n	800a716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68b9      	ldr	r1, [r7, #8]
 800a694:	4618      	mov	r0, r3
 800a696:	f000 fa8b 	bl	800abb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	69da      	ldr	r2, [r3, #28]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f042 0208 	orr.w	r2, r2, #8
 800a6a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	69da      	ldr	r2, [r3, #28]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f022 0204 	bic.w	r2, r2, #4
 800a6b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	69d9      	ldr	r1, [r3, #28]
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	691a      	ldr	r2, [r3, #16]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	430a      	orrs	r2, r1
 800a6ca:	61da      	str	r2, [r3, #28]
      break;
 800a6cc:	e023      	b.n	800a716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68b9      	ldr	r1, [r7, #8]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 fad5 	bl	800ac84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	69da      	ldr	r2, [r3, #28]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	69da      	ldr	r2, [r3, #28]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	69d9      	ldr	r1, [r3, #28]
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	021a      	lsls	r2, r3, #8
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	430a      	orrs	r2, r1
 800a70c:	61da      	str	r2, [r3, #28]
      break;
 800a70e:	e002      	b.n	800a716 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	75fb      	strb	r3, [r7, #23]
      break;
 800a714:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3718      	adds	r7, #24
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a732:	2300      	movs	r3, #0
 800a734:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d101      	bne.n	800a744 <HAL_TIM_ConfigClockSource+0x1c>
 800a740:	2302      	movs	r3, #2
 800a742:	e0b4      	b.n	800a8ae <HAL_TIM_ConfigClockSource+0x186>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2202      	movs	r2, #2
 800a750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a76a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a77c:	d03e      	beq.n	800a7fc <HAL_TIM_ConfigClockSource+0xd4>
 800a77e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a782:	f200 8087 	bhi.w	800a894 <HAL_TIM_ConfigClockSource+0x16c>
 800a786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a78a:	f000 8086 	beq.w	800a89a <HAL_TIM_ConfigClockSource+0x172>
 800a78e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a792:	d87f      	bhi.n	800a894 <HAL_TIM_ConfigClockSource+0x16c>
 800a794:	2b70      	cmp	r3, #112	@ 0x70
 800a796:	d01a      	beq.n	800a7ce <HAL_TIM_ConfigClockSource+0xa6>
 800a798:	2b70      	cmp	r3, #112	@ 0x70
 800a79a:	d87b      	bhi.n	800a894 <HAL_TIM_ConfigClockSource+0x16c>
 800a79c:	2b60      	cmp	r3, #96	@ 0x60
 800a79e:	d050      	beq.n	800a842 <HAL_TIM_ConfigClockSource+0x11a>
 800a7a0:	2b60      	cmp	r3, #96	@ 0x60
 800a7a2:	d877      	bhi.n	800a894 <HAL_TIM_ConfigClockSource+0x16c>
 800a7a4:	2b50      	cmp	r3, #80	@ 0x50
 800a7a6:	d03c      	beq.n	800a822 <HAL_TIM_ConfigClockSource+0xfa>
 800a7a8:	2b50      	cmp	r3, #80	@ 0x50
 800a7aa:	d873      	bhi.n	800a894 <HAL_TIM_ConfigClockSource+0x16c>
 800a7ac:	2b40      	cmp	r3, #64	@ 0x40
 800a7ae:	d058      	beq.n	800a862 <HAL_TIM_ConfigClockSource+0x13a>
 800a7b0:	2b40      	cmp	r3, #64	@ 0x40
 800a7b2:	d86f      	bhi.n	800a894 <HAL_TIM_ConfigClockSource+0x16c>
 800a7b4:	2b30      	cmp	r3, #48	@ 0x30
 800a7b6:	d064      	beq.n	800a882 <HAL_TIM_ConfigClockSource+0x15a>
 800a7b8:	2b30      	cmp	r3, #48	@ 0x30
 800a7ba:	d86b      	bhi.n	800a894 <HAL_TIM_ConfigClockSource+0x16c>
 800a7bc:	2b20      	cmp	r3, #32
 800a7be:	d060      	beq.n	800a882 <HAL_TIM_ConfigClockSource+0x15a>
 800a7c0:	2b20      	cmp	r3, #32
 800a7c2:	d867      	bhi.n	800a894 <HAL_TIM_ConfigClockSource+0x16c>
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d05c      	beq.n	800a882 <HAL_TIM_ConfigClockSource+0x15a>
 800a7c8:	2b10      	cmp	r3, #16
 800a7ca:	d05a      	beq.n	800a882 <HAL_TIM_ConfigClockSource+0x15a>
 800a7cc:	e062      	b.n	800a894 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a7de:	f000 fb1b 	bl	800ae18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a7f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	609a      	str	r2, [r3, #8]
      break;
 800a7fa:	e04f      	b.n	800a89c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a80c:	f000 fb04 	bl	800ae18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	689a      	ldr	r2, [r3, #8]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a81e:	609a      	str	r2, [r3, #8]
      break;
 800a820:	e03c      	b.n	800a89c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a82e:	461a      	mov	r2, r3
 800a830:	f000 fa78 	bl	800ad24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2150      	movs	r1, #80	@ 0x50
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 fad1 	bl	800ade2 <TIM_ITRx_SetConfig>
      break;
 800a840:	e02c      	b.n	800a89c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a84e:	461a      	mov	r2, r3
 800a850:	f000 fa97 	bl	800ad82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2160      	movs	r1, #96	@ 0x60
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 fac1 	bl	800ade2 <TIM_ITRx_SetConfig>
      break;
 800a860:	e01c      	b.n	800a89c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a86e:	461a      	mov	r2, r3
 800a870:	f000 fa58 	bl	800ad24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2140      	movs	r1, #64	@ 0x40
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 fab1 	bl	800ade2 <TIM_ITRx_SetConfig>
      break;
 800a880:	e00c      	b.n	800a89c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4619      	mov	r1, r3
 800a88c:	4610      	mov	r0, r2
 800a88e:	f000 faa8 	bl	800ade2 <TIM_ITRx_SetConfig>
      break;
 800a892:	e003      	b.n	800a89c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	73fb      	strb	r3, [r7, #15]
      break;
 800a898:	e000      	b.n	800a89c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a89a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8b6:	b480      	push	{r7}
 800a8b8:	b083      	sub	sp, #12
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8be:	bf00      	nop
 800a8c0:	370c      	adds	r7, #12
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr

0800a8ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8ca:	b480      	push	{r7}
 800a8cc:	b083      	sub	sp, #12
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8d2:	bf00      	nop
 800a8d4:	370c      	adds	r7, #12
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr

0800a8de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8de:	b480      	push	{r7}
 800a8e0:	b083      	sub	sp, #12
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8e6:	bf00      	nop
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
	...

0800a8f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a3a      	ldr	r2, [pc, #232]	@ (800a9f0 <TIM_Base_SetConfig+0xfc>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d00f      	beq.n	800a92c <TIM_Base_SetConfig+0x38>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a912:	d00b      	beq.n	800a92c <TIM_Base_SetConfig+0x38>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a37      	ldr	r2, [pc, #220]	@ (800a9f4 <TIM_Base_SetConfig+0x100>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d007      	beq.n	800a92c <TIM_Base_SetConfig+0x38>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4a36      	ldr	r2, [pc, #216]	@ (800a9f8 <TIM_Base_SetConfig+0x104>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d003      	beq.n	800a92c <TIM_Base_SetConfig+0x38>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a35      	ldr	r2, [pc, #212]	@ (800a9fc <TIM_Base_SetConfig+0x108>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d108      	bne.n	800a93e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a2b      	ldr	r2, [pc, #172]	@ (800a9f0 <TIM_Base_SetConfig+0xfc>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d01b      	beq.n	800a97e <TIM_Base_SetConfig+0x8a>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a94c:	d017      	beq.n	800a97e <TIM_Base_SetConfig+0x8a>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a28      	ldr	r2, [pc, #160]	@ (800a9f4 <TIM_Base_SetConfig+0x100>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d013      	beq.n	800a97e <TIM_Base_SetConfig+0x8a>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a27      	ldr	r2, [pc, #156]	@ (800a9f8 <TIM_Base_SetConfig+0x104>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d00f      	beq.n	800a97e <TIM_Base_SetConfig+0x8a>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a26      	ldr	r2, [pc, #152]	@ (800a9fc <TIM_Base_SetConfig+0x108>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d00b      	beq.n	800a97e <TIM_Base_SetConfig+0x8a>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a25      	ldr	r2, [pc, #148]	@ (800aa00 <TIM_Base_SetConfig+0x10c>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d007      	beq.n	800a97e <TIM_Base_SetConfig+0x8a>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a24      	ldr	r2, [pc, #144]	@ (800aa04 <TIM_Base_SetConfig+0x110>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d003      	beq.n	800a97e <TIM_Base_SetConfig+0x8a>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a23      	ldr	r2, [pc, #140]	@ (800aa08 <TIM_Base_SetConfig+0x114>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d108      	bne.n	800a990 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	695b      	ldr	r3, [r3, #20]
 800a99a:	4313      	orrs	r3, r2
 800a99c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	689a      	ldr	r2, [r3, #8]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a0e      	ldr	r2, [pc, #56]	@ (800a9f0 <TIM_Base_SetConfig+0xfc>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d103      	bne.n	800a9c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	691a      	ldr	r2, [r3, #16]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	f003 0301 	and.w	r3, r3, #1
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d105      	bne.n	800a9e2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	f023 0201 	bic.w	r2, r3, #1
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	611a      	str	r2, [r3, #16]
  }
}
 800a9e2:	bf00      	nop
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	40010000 	.word	0x40010000
 800a9f4:	40000400 	.word	0x40000400
 800a9f8:	40000800 	.word	0x40000800
 800a9fc:	40000c00 	.word	0x40000c00
 800aa00:	40014000 	.word	0x40014000
 800aa04:	40014400 	.word	0x40014400
 800aa08:	40014800 	.word	0x40014800

0800aa0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a1b      	ldr	r3, [r3, #32]
 800aa20:	f023 0201 	bic.w	r2, r3, #1
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f023 0303 	bic.w	r3, r3, #3
 800aa42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f023 0302 	bic.w	r3, r3, #2
 800aa54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a1c      	ldr	r2, [pc, #112]	@ (800aad4 <TIM_OC1_SetConfig+0xc8>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d10c      	bne.n	800aa82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	f023 0308 	bic.w	r3, r3, #8
 800aa6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	697a      	ldr	r2, [r7, #20]
 800aa76:	4313      	orrs	r3, r2
 800aa78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f023 0304 	bic.w	r3, r3, #4
 800aa80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a13      	ldr	r2, [pc, #76]	@ (800aad4 <TIM_OC1_SetConfig+0xc8>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d111      	bne.n	800aaae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aa98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	699b      	ldr	r3, [r3, #24]
 800aaa8:	693a      	ldr	r2, [r7, #16]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	697a      	ldr	r2, [r7, #20]
 800aac6:	621a      	str	r2, [r3, #32]
}
 800aac8:	bf00      	nop
 800aaca:	371c      	adds	r7, #28
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	40010000 	.word	0x40010000

0800aad8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aad8:	b480      	push	{r7}
 800aada:	b087      	sub	sp, #28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a1b      	ldr	r3, [r3, #32]
 800aae6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a1b      	ldr	r3, [r3, #32]
 800aaec:	f023 0210 	bic.w	r2, r3, #16
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	699b      	ldr	r3, [r3, #24]
 800aafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	021b      	lsls	r3, r3, #8
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	f023 0320 	bic.w	r3, r3, #32
 800ab22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	011b      	lsls	r3, r3, #4
 800ab2a:	697a      	ldr	r2, [r7, #20]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a1e      	ldr	r2, [pc, #120]	@ (800abac <TIM_OC2_SetConfig+0xd4>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d10d      	bne.n	800ab54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	011b      	lsls	r3, r3, #4
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a15      	ldr	r2, [pc, #84]	@ (800abac <TIM_OC2_SetConfig+0xd4>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d113      	bne.n	800ab84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ab62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ab6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	695b      	ldr	r3, [r3, #20]
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	693a      	ldr	r2, [r7, #16]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	699b      	ldr	r3, [r3, #24]
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	693a      	ldr	r2, [r7, #16]
 800ab80:	4313      	orrs	r3, r2
 800ab82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	693a      	ldr	r2, [r7, #16]
 800ab88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	685a      	ldr	r2, [r3, #4]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	697a      	ldr	r2, [r7, #20]
 800ab9c:	621a      	str	r2, [r3, #32]
}
 800ab9e:	bf00      	nop
 800aba0:	371c      	adds	r7, #28
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	40010000 	.word	0x40010000

0800abb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b087      	sub	sp, #28
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a1b      	ldr	r3, [r3, #32]
 800abbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a1b      	ldr	r3, [r3, #32]
 800abc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f023 0303 	bic.w	r3, r3, #3
 800abe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	4313      	orrs	r3, r2
 800abf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800abf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	021b      	lsls	r3, r3, #8
 800ac00:	697a      	ldr	r2, [r7, #20]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a1d      	ldr	r2, [pc, #116]	@ (800ac80 <TIM_OC3_SetConfig+0xd0>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d10d      	bne.n	800ac2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ac14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	021b      	lsls	r3, r3, #8
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ac28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a14      	ldr	r2, [pc, #80]	@ (800ac80 <TIM_OC3_SetConfig+0xd0>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d113      	bne.n	800ac5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ac40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	695b      	ldr	r3, [r3, #20]
 800ac46:	011b      	lsls	r3, r3, #4
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	011b      	lsls	r3, r3, #4
 800ac54:	693a      	ldr	r2, [r7, #16]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	685a      	ldr	r2, [r3, #4]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	697a      	ldr	r2, [r7, #20]
 800ac72:	621a      	str	r2, [r3, #32]
}
 800ac74:	bf00      	nop
 800ac76:	371c      	adds	r7, #28
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	40010000 	.word	0x40010000

0800ac84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b087      	sub	sp, #28
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a1b      	ldr	r3, [r3, #32]
 800ac92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a1b      	ldr	r3, [r3, #32]
 800ac98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	69db      	ldr	r3, [r3, #28]
 800acaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	021b      	lsls	r3, r3, #8
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800acce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	031b      	lsls	r3, r3, #12
 800acd6:	693a      	ldr	r2, [r7, #16]
 800acd8:	4313      	orrs	r3, r2
 800acda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a10      	ldr	r2, [pc, #64]	@ (800ad20 <TIM_OC4_SetConfig+0x9c>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d109      	bne.n	800acf8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800acea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	695b      	ldr	r3, [r3, #20]
 800acf0:	019b      	lsls	r3, r3, #6
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	697a      	ldr	r2, [r7, #20]
 800acfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	685a      	ldr	r2, [r3, #4]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	693a      	ldr	r2, [r7, #16]
 800ad10:	621a      	str	r2, [r3, #32]
}
 800ad12:	bf00      	nop
 800ad14:	371c      	adds	r7, #28
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	40010000 	.word	0x40010000

0800ad24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b087      	sub	sp, #28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6a1b      	ldr	r3, [r3, #32]
 800ad34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	f023 0201 	bic.w	r2, r3, #1
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	699b      	ldr	r3, [r3, #24]
 800ad46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	011b      	lsls	r3, r3, #4
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	f023 030a 	bic.w	r3, r3, #10
 800ad60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	693a      	ldr	r2, [r7, #16]
 800ad6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	621a      	str	r2, [r3, #32]
}
 800ad76:	bf00      	nop
 800ad78:	371c      	adds	r7, #28
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr

0800ad82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad82:	b480      	push	{r7}
 800ad84:	b087      	sub	sp, #28
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	60f8      	str	r0, [r7, #12]
 800ad8a:	60b9      	str	r1, [r7, #8]
 800ad8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	6a1b      	ldr	r3, [r3, #32]
 800ad92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6a1b      	ldr	r3, [r3, #32]
 800ad98:	f023 0210 	bic.w	r2, r3, #16
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800adac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	031b      	lsls	r3, r3, #12
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800adbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	011b      	lsls	r3, r3, #4
 800adc4:	697a      	ldr	r2, [r7, #20]
 800adc6:	4313      	orrs	r3, r2
 800adc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	697a      	ldr	r2, [r7, #20]
 800add4:	621a      	str	r2, [r3, #32]
}
 800add6:	bf00      	nop
 800add8:	371c      	adds	r7, #28
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr

0800ade2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ade2:	b480      	push	{r7}
 800ade4:	b085      	sub	sp, #20
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adfa:	683a      	ldr	r2, [r7, #0]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	4313      	orrs	r3, r2
 800ae00:	f043 0307 	orr.w	r3, r3, #7
 800ae04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	609a      	str	r2, [r3, #8]
}
 800ae0c:	bf00      	nop
 800ae0e:	3714      	adds	r7, #20
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b087      	sub	sp, #28
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	607a      	str	r2, [r7, #4]
 800ae24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	021a      	lsls	r2, r3, #8
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	431a      	orrs	r2, r3
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	697a      	ldr	r2, [r7, #20]
 800ae42:	4313      	orrs	r3, r2
 800ae44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	697a      	ldr	r2, [r7, #20]
 800ae4a:	609a      	str	r2, [r3, #8]
}
 800ae4c:	bf00      	nop
 800ae4e:	371c      	adds	r7, #28
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b087      	sub	sp, #28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	f003 031f 	and.w	r3, r3, #31
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6a1a      	ldr	r2, [r3, #32]
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	43db      	mvns	r3, r3
 800ae7a:	401a      	ands	r2, r3
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6a1a      	ldr	r2, [r3, #32]
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	f003 031f 	and.w	r3, r3, #31
 800ae8a:	6879      	ldr	r1, [r7, #4]
 800ae8c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae90:	431a      	orrs	r2, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	621a      	str	r2, [r3, #32]
}
 800ae96:	bf00      	nop
 800ae98:	371c      	adds	r7, #28
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
	...

0800aea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d101      	bne.n	800aebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aeb8:	2302      	movs	r3, #2
 800aeba:	e050      	b.n	800af5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2202      	movs	r2, #2
 800aec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68fa      	ldr	r2, [r7, #12]
 800aef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a1c      	ldr	r2, [pc, #112]	@ (800af6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d018      	beq.n	800af32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af08:	d013      	beq.n	800af32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a18      	ldr	r2, [pc, #96]	@ (800af70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d00e      	beq.n	800af32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a16      	ldr	r2, [pc, #88]	@ (800af74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d009      	beq.n	800af32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a15      	ldr	r2, [pc, #84]	@ (800af78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d004      	beq.n	800af32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a13      	ldr	r2, [pc, #76]	@ (800af7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d10c      	bne.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	4313      	orrs	r3, r2
 800af42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3714      	adds	r7, #20
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	40010000 	.word	0x40010000
 800af70:	40000400 	.word	0x40000400
 800af74:	40000800 	.word	0x40000800
 800af78:	40000c00 	.word	0x40000c00
 800af7c:	40014000 	.word	0x40014000

0800af80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af8a:	2300      	movs	r3, #0
 800af8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af94:	2b01      	cmp	r3, #1
 800af96:	d101      	bne.n	800af9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af98:	2302      	movs	r3, #2
 800af9a:	e03d      	b.n	800b018 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	4313      	orrs	r3, r2
 800afb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	4313      	orrs	r3, r2
 800afbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	4313      	orrs	r3, r2
 800afcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4313      	orrs	r3, r2
 800afda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	691b      	ldr	r3, [r3, #16]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	695b      	ldr	r3, [r3, #20]
 800aff4:	4313      	orrs	r3, r2
 800aff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	69db      	ldr	r3, [r3, #28]
 800b002:	4313      	orrs	r3, r2
 800b004:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b016:	2300      	movs	r3, #0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3714      	adds	r7, #20
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b02c:	bf00      	nop
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b040:	bf00      	nop
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d101      	bne.n	800b05e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	e042      	b.n	800b0e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b064:	b2db      	uxtb	r3, r3
 800b066:	2b00      	cmp	r3, #0
 800b068:	d106      	bne.n	800b078 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7f9 fad8 	bl	8004628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2224      	movs	r2, #36	@ 0x24
 800b07c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	68da      	ldr	r2, [r3, #12]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b08e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 fa9f 	bl	800b5d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	691a      	ldr	r2, [r3, #16]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b0a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	695a      	ldr	r2, [r3, #20]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b0b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	68da      	ldr	r2, [r3, #12]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b0c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2220      	movs	r2, #32
 800b0d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2220      	movs	r2, #32
 800b0d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b100:	b2db      	uxtb	r3, r3
 800b102:	2b20      	cmp	r3, #32
 800b104:	d112      	bne.n	800b12c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d002      	beq.n	800b112 <HAL_UART_Receive_DMA+0x26>
 800b10c:	88fb      	ldrh	r3, [r7, #6]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d101      	bne.n	800b116 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	e00b      	b.n	800b12e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b11c:	88fb      	ldrh	r3, [r7, #6]
 800b11e:	461a      	mov	r2, r3
 800b120:	68b9      	ldr	r1, [r7, #8]
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f000 f930 	bl	800b388 <UART_Start_Receive_DMA>
 800b128:	4603      	mov	r3, r0
 800b12a:	e000      	b.n	800b12e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b12c:	2302      	movs	r3, #2
  }
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b136:	b480      	push	{r7}
 800b138:	b083      	sub	sp, #12
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b13e:	bf00      	nop
 800b140:	370c      	adds	r7, #12
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b14a:	b480      	push	{r7}
 800b14c:	b083      	sub	sp, #12
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b152:	bf00      	nop
 800b154:	370c      	adds	r7, #12
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b15e:	b480      	push	{r7}
 800b160:	b083      	sub	sp, #12
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b166:	bf00      	nop
 800b168:	370c      	adds	r7, #12
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b172:	b480      	push	{r7}
 800b174:	b083      	sub	sp, #12
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	460b      	mov	r3, r1
 800b17c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b17e:	bf00      	nop
 800b180:	370c      	adds	r7, #12
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr

0800b18a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b09c      	sub	sp, #112	@ 0x70
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b196:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d172      	bne.n	800b28c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b1a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	330c      	adds	r3, #12
 800b1b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1b6:	e853 3f00 	ldrex	r3, [r3]
 800b1ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b1bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b1c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b1c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	330c      	adds	r3, #12
 800b1ca:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b1cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b1ce:	657b      	str	r3, [r7, #84]	@ 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b1d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1d4:	e841 2300 	strex	r3, r2, [r1]
 800b1d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b1da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d1e5      	bne.n	800b1ac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	3314      	adds	r3, #20
 800b1e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ea:	e853 3f00 	ldrex	r3, [r3]
 800b1ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b1f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1f2:	f023 0301 	bic.w	r3, r3, #1
 800b1f6:	667b      	str	r3, [r7, #100]	@ 0x64
 800b1f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	3314      	adds	r3, #20
 800b1fe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b200:	647a      	str	r2, [r7, #68]	@ 0x44
 800b202:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b204:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b206:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b208:	e841 2300 	strex	r3, r2, [r1]
 800b20c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b20e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1e5      	bne.n	800b1e0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b214:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	3314      	adds	r3, #20
 800b21a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21e:	e853 3f00 	ldrex	r3, [r3]
 800b222:	623b      	str	r3, [r7, #32]
   return(result);
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b22a:	663b      	str	r3, [r7, #96]	@ 0x60
 800b22c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	3314      	adds	r3, #20
 800b232:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b234:	633a      	str	r2, [r7, #48]	@ 0x30
 800b236:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b238:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b23a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b23c:	e841 2300 	strex	r3, r2, [r1]
 800b240:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b244:	2b00      	cmp	r3, #0
 800b246:	d1e5      	bne.n	800b214 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b248:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b24a:	2220      	movs	r2, #32
 800b24c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b250:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b254:	2b01      	cmp	r3, #1
 800b256:	d119      	bne.n	800b28c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b258:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	330c      	adds	r3, #12
 800b25e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	e853 3f00 	ldrex	r3, [r3]
 800b266:	60fb      	str	r3, [r7, #12]
   return(result);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f023 0310 	bic.w	r3, r3, #16
 800b26e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	330c      	adds	r3, #12
 800b276:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b278:	61fa      	str	r2, [r7, #28]
 800b27a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27c:	69b9      	ldr	r1, [r7, #24]
 800b27e:	69fa      	ldr	r2, [r7, #28]
 800b280:	e841 2300 	strex	r3, r2, [r1]
 800b284:	617b      	str	r3, [r7, #20]
   return(result);
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1e5      	bne.n	800b258 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b28c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b28e:	2200      	movs	r2, #0
 800b290:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b292:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b296:	2b01      	cmp	r3, #1
 800b298:	d106      	bne.n	800b2a8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b29a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b29c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b29e:	4619      	mov	r1, r3
 800b2a0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b2a2:	f7ff ff66 	bl	800b172 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b2a6:	e002      	b.n	800b2ae <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b2a8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b2aa:	f7ff ff44 	bl	800b136 <HAL_UART_RxCpltCallback>
}
 800b2ae:	bf00      	nop
 800b2b0:	3770      	adds	r7, #112	@ 0x70
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b084      	sub	sp, #16
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2c2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d108      	bne.n	800b2e4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b2d6:	085b      	lsrs	r3, r3, #1
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	4619      	mov	r1, r3
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f7ff ff48 	bl	800b172 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b2e2:	e002      	b.n	800b2ea <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b2e4:	68f8      	ldr	r0, [r7, #12]
 800b2e6:	f7ff ff30 	bl	800b14a <HAL_UART_RxHalfCpltCallback>
}
 800b2ea:	bf00      	nop
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b084      	sub	sp, #16
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b302:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b30e:	2b80      	cmp	r3, #128	@ 0x80
 800b310:	bf0c      	ite	eq
 800b312:	2301      	moveq	r3, #1
 800b314:	2300      	movne	r3, #0
 800b316:	b2db      	uxtb	r3, r3
 800b318:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b320:	b2db      	uxtb	r3, r3
 800b322:	2b21      	cmp	r3, #33	@ 0x21
 800b324:	d108      	bne.n	800b338 <UART_DMAError+0x46>
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d005      	beq.n	800b338 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	2200      	movs	r2, #0
 800b330:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800b332:	68b8      	ldr	r0, [r7, #8]
 800b334:	f000 f8c2 	bl	800b4bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	695b      	ldr	r3, [r3, #20]
 800b33e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b342:	2b40      	cmp	r3, #64	@ 0x40
 800b344:	bf0c      	ite	eq
 800b346:	2301      	moveq	r3, #1
 800b348:	2300      	movne	r3, #0
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b22      	cmp	r3, #34	@ 0x22
 800b358:	d108      	bne.n	800b36c <UART_DMAError+0x7a>
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d005      	beq.n	800b36c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	2200      	movs	r2, #0
 800b364:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800b366:	68b8      	ldr	r0, [r7, #8]
 800b368:	f000 f8d0 	bl	800b50c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b370:	f043 0210 	orr.w	r2, r3, #16
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b378:	68b8      	ldr	r0, [r7, #8]
 800b37a:	f7ff fef0 	bl	800b15e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b37e:	bf00      	nop
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
	...

0800b388 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b098      	sub	sp, #96	@ 0x60
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	4613      	mov	r3, r2
 800b394:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	88fa      	ldrh	r2, [r7, #6]
 800b3a0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2222      	movs	r2, #34	@ 0x22
 800b3ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3b4:	4a3e      	ldr	r2, [pc, #248]	@ (800b4b0 <UART_Start_Receive_DMA+0x128>)
 800b3b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3bc:	4a3d      	ldr	r2, [pc, #244]	@ (800b4b4 <UART_Start_Receive_DMA+0x12c>)
 800b3be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3c4:	4a3c      	ldr	r2, [pc, #240]	@ (800b4b8 <UART_Start_Receive_DMA+0x130>)
 800b3c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b3d0:	f107 0308 	add.w	r3, r7, #8
 800b3d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	3304      	adds	r3, #4
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	88fb      	ldrh	r3, [r7, #6]
 800b3e8:	f7f9 ff30 	bl	800524c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	613b      	str	r3, [r7, #16]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	613b      	str	r3, [r7, #16]
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	613b      	str	r3, [r7, #16]
 800b400:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d019      	beq.n	800b43e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	330c      	adds	r3, #12
 800b410:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b414:	e853 3f00 	ldrex	r3, [r3]
 800b418:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b41a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b41c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b420:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	330c      	adds	r3, #12
 800b428:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b42a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b42c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b42e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b430:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b432:	e841 2300 	strex	r3, r2, [r1]
 800b436:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1e5      	bne.n	800b40a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	3314      	adds	r3, #20
 800b444:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b448:	e853 3f00 	ldrex	r3, [r3]
 800b44c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b450:	f043 0301 	orr.w	r3, r3, #1
 800b454:	657b      	str	r3, [r7, #84]	@ 0x54
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	3314      	adds	r3, #20
 800b45c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b45e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b460:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b462:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b464:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b466:	e841 2300 	strex	r3, r2, [r1]
 800b46a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1e5      	bne.n	800b43e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	3314      	adds	r3, #20
 800b478:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47a:	69bb      	ldr	r3, [r7, #24]
 800b47c:	e853 3f00 	ldrex	r3, [r3]
 800b480:	617b      	str	r3, [r7, #20]
   return(result);
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b488:	653b      	str	r3, [r7, #80]	@ 0x50
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	3314      	adds	r3, #20
 800b490:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b492:	627a      	str	r2, [r7, #36]	@ 0x24
 800b494:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b496:	6a39      	ldr	r1, [r7, #32]
 800b498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b49a:	e841 2300 	strex	r3, r2, [r1]
 800b49e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d1e5      	bne.n	800b472 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b4a6:	2300      	movs	r3, #0
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3760      	adds	r7, #96	@ 0x60
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	0800b18b 	.word	0x0800b18b
 800b4b4:	0800b2b7 	.word	0x0800b2b7
 800b4b8:	0800b2f3 	.word	0x0800b2f3

0800b4bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b089      	sub	sp, #36	@ 0x24
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	330c      	adds	r3, #12
 800b4ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	e853 3f00 	ldrex	r3, [r3]
 800b4d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b4da:	61fb      	str	r3, [r7, #28]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	330c      	adds	r3, #12
 800b4e2:	69fa      	ldr	r2, [r7, #28]
 800b4e4:	61ba      	str	r2, [r7, #24]
 800b4e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e8:	6979      	ldr	r1, [r7, #20]
 800b4ea:	69ba      	ldr	r2, [r7, #24]
 800b4ec:	e841 2300 	strex	r3, r2, [r1]
 800b4f0:	613b      	str	r3, [r7, #16]
   return(result);
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1e5      	bne.n	800b4c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2220      	movs	r2, #32
 800b4fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800b500:	bf00      	nop
 800b502:	3724      	adds	r7, #36	@ 0x24
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b095      	sub	sp, #84	@ 0x54
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	330c      	adds	r3, #12
 800b51a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b51e:	e853 3f00 	ldrex	r3, [r3]
 800b522:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b526:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b52a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	330c      	adds	r3, #12
 800b532:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b534:	643a      	str	r2, [r7, #64]	@ 0x40
 800b536:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b538:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b53a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b53c:	e841 2300 	strex	r3, r2, [r1]
 800b540:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b544:	2b00      	cmp	r3, #0
 800b546:	d1e5      	bne.n	800b514 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3314      	adds	r3, #20
 800b54e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b550:	6a3b      	ldr	r3, [r7, #32]
 800b552:	e853 3f00 	ldrex	r3, [r3]
 800b556:	61fb      	str	r3, [r7, #28]
   return(result);
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	f023 0301 	bic.w	r3, r3, #1
 800b55e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3314      	adds	r3, #20
 800b566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b568:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b56a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b56e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b570:	e841 2300 	strex	r3, r2, [r1]
 800b574:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1e5      	bne.n	800b548 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b580:	2b01      	cmp	r3, #1
 800b582:	d119      	bne.n	800b5b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	330c      	adds	r3, #12
 800b58a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	e853 3f00 	ldrex	r3, [r3]
 800b592:	60bb      	str	r3, [r7, #8]
   return(result);
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	f023 0310 	bic.w	r3, r3, #16
 800b59a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	330c      	adds	r3, #12
 800b5a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b5a4:	61ba      	str	r2, [r7, #24]
 800b5a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a8:	6979      	ldr	r1, [r7, #20]
 800b5aa:	69ba      	ldr	r2, [r7, #24]
 800b5ac:	e841 2300 	strex	r3, r2, [r1]
 800b5b0:	613b      	str	r3, [r7, #16]
   return(result);
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1e5      	bne.n	800b584 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2220      	movs	r2, #32
 800b5bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b5c6:	bf00      	nop
 800b5c8:	3754      	adds	r7, #84	@ 0x54
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
	...

0800b5d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5d8:	b0c0      	sub	sp, #256	@ 0x100
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b5ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b5f0:	68d9      	ldr	r1, [r3, #12]
 800b5f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	ea40 0301 	orr.w	r3, r0, r1
 800b5fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b5fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b602:	689a      	ldr	r2, [r3, #8]
 800b604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	431a      	orrs	r2, r3
 800b60c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b610:	695b      	ldr	r3, [r3, #20]
 800b612:	431a      	orrs	r2, r3
 800b614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b618:	69db      	ldr	r3, [r3, #28]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b62c:	f021 010c 	bic.w	r1, r1, #12
 800b630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b63a:	430b      	orrs	r3, r1
 800b63c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b63e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	695b      	ldr	r3, [r3, #20]
 800b646:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b64a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b64e:	6999      	ldr	r1, [r3, #24]
 800b650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	ea40 0301 	orr.w	r3, r0, r1
 800b65a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b65c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	4b8f      	ldr	r3, [pc, #572]	@ (800b8a0 <UART_SetConfig+0x2cc>)
 800b664:	429a      	cmp	r2, r3
 800b666:	d005      	beq.n	800b674 <UART_SetConfig+0xa0>
 800b668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	4b8d      	ldr	r3, [pc, #564]	@ (800b8a4 <UART_SetConfig+0x2d0>)
 800b670:	429a      	cmp	r2, r3
 800b672:	d104      	bne.n	800b67e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b674:	f7fd fbd2 	bl	8008e1c <HAL_RCC_GetPCLK2Freq>
 800b678:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b67c:	e003      	b.n	800b686 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b67e:	f7fd fbb9 	bl	8008df4 <HAL_RCC_GetPCLK1Freq>
 800b682:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b68a:	69db      	ldr	r3, [r3, #28]
 800b68c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b690:	f040 810c 	bne.w	800b8ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b698:	2200      	movs	r2, #0
 800b69a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b69e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b6a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b6a6:	4622      	mov	r2, r4
 800b6a8:	462b      	mov	r3, r5
 800b6aa:	1891      	adds	r1, r2, r2
 800b6ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b6ae:	415b      	adcs	r3, r3
 800b6b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b6b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b6b6:	4621      	mov	r1, r4
 800b6b8:	eb12 0801 	adds.w	r8, r2, r1
 800b6bc:	4629      	mov	r1, r5
 800b6be:	eb43 0901 	adc.w	r9, r3, r1
 800b6c2:	f04f 0200 	mov.w	r2, #0
 800b6c6:	f04f 0300 	mov.w	r3, #0
 800b6ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b6ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b6d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b6d6:	4690      	mov	r8, r2
 800b6d8:	4699      	mov	r9, r3
 800b6da:	4623      	mov	r3, r4
 800b6dc:	eb18 0303 	adds.w	r3, r8, r3
 800b6e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b6e4:	462b      	mov	r3, r5
 800b6e6:	eb49 0303 	adc.w	r3, r9, r3
 800b6ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b6ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b6fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b6fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b702:	460b      	mov	r3, r1
 800b704:	18db      	adds	r3, r3, r3
 800b706:	653b      	str	r3, [r7, #80]	@ 0x50
 800b708:	4613      	mov	r3, r2
 800b70a:	eb42 0303 	adc.w	r3, r2, r3
 800b70e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b710:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b714:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b718:	f7f4 fdb2 	bl	8000280 <__aeabi_uldivmod>
 800b71c:	4602      	mov	r2, r0
 800b71e:	460b      	mov	r3, r1
 800b720:	4b61      	ldr	r3, [pc, #388]	@ (800b8a8 <UART_SetConfig+0x2d4>)
 800b722:	fba3 2302 	umull	r2, r3, r3, r2
 800b726:	095b      	lsrs	r3, r3, #5
 800b728:	011c      	lsls	r4, r3, #4
 800b72a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b72e:	2200      	movs	r2, #0
 800b730:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b734:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b738:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b73c:	4642      	mov	r2, r8
 800b73e:	464b      	mov	r3, r9
 800b740:	1891      	adds	r1, r2, r2
 800b742:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b744:	415b      	adcs	r3, r3
 800b746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b748:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b74c:	4641      	mov	r1, r8
 800b74e:	eb12 0a01 	adds.w	sl, r2, r1
 800b752:	4649      	mov	r1, r9
 800b754:	eb43 0b01 	adc.w	fp, r3, r1
 800b758:	f04f 0200 	mov.w	r2, #0
 800b75c:	f04f 0300 	mov.w	r3, #0
 800b760:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b764:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b76c:	4692      	mov	sl, r2
 800b76e:	469b      	mov	fp, r3
 800b770:	4643      	mov	r3, r8
 800b772:	eb1a 0303 	adds.w	r3, sl, r3
 800b776:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b77a:	464b      	mov	r3, r9
 800b77c:	eb4b 0303 	adc.w	r3, fp, r3
 800b780:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b790:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b794:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b798:	460b      	mov	r3, r1
 800b79a:	18db      	adds	r3, r3, r3
 800b79c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b79e:	4613      	mov	r3, r2
 800b7a0:	eb42 0303 	adc.w	r3, r2, r3
 800b7a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b7aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b7ae:	f7f4 fd67 	bl	8000280 <__aeabi_uldivmod>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	4611      	mov	r1, r2
 800b7b8:	4b3b      	ldr	r3, [pc, #236]	@ (800b8a8 <UART_SetConfig+0x2d4>)
 800b7ba:	fba3 2301 	umull	r2, r3, r3, r1
 800b7be:	095b      	lsrs	r3, r3, #5
 800b7c0:	2264      	movs	r2, #100	@ 0x64
 800b7c2:	fb02 f303 	mul.w	r3, r2, r3
 800b7c6:	1acb      	subs	r3, r1, r3
 800b7c8:	00db      	lsls	r3, r3, #3
 800b7ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b7ce:	4b36      	ldr	r3, [pc, #216]	@ (800b8a8 <UART_SetConfig+0x2d4>)
 800b7d0:	fba3 2302 	umull	r2, r3, r3, r2
 800b7d4:	095b      	lsrs	r3, r3, #5
 800b7d6:	005b      	lsls	r3, r3, #1
 800b7d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b7dc:	441c      	add	r4, r3
 800b7de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b7e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b7ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b7f0:	4642      	mov	r2, r8
 800b7f2:	464b      	mov	r3, r9
 800b7f4:	1891      	adds	r1, r2, r2
 800b7f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b7f8:	415b      	adcs	r3, r3
 800b7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b800:	4641      	mov	r1, r8
 800b802:	1851      	adds	r1, r2, r1
 800b804:	6339      	str	r1, [r7, #48]	@ 0x30
 800b806:	4649      	mov	r1, r9
 800b808:	414b      	adcs	r3, r1
 800b80a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b80c:	f04f 0200 	mov.w	r2, #0
 800b810:	f04f 0300 	mov.w	r3, #0
 800b814:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b818:	4659      	mov	r1, fp
 800b81a:	00cb      	lsls	r3, r1, #3
 800b81c:	4651      	mov	r1, sl
 800b81e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b822:	4651      	mov	r1, sl
 800b824:	00ca      	lsls	r2, r1, #3
 800b826:	4610      	mov	r0, r2
 800b828:	4619      	mov	r1, r3
 800b82a:	4603      	mov	r3, r0
 800b82c:	4642      	mov	r2, r8
 800b82e:	189b      	adds	r3, r3, r2
 800b830:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b834:	464b      	mov	r3, r9
 800b836:	460a      	mov	r2, r1
 800b838:	eb42 0303 	adc.w	r3, r2, r3
 800b83c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b84c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b850:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b854:	460b      	mov	r3, r1
 800b856:	18db      	adds	r3, r3, r3
 800b858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b85a:	4613      	mov	r3, r2
 800b85c:	eb42 0303 	adc.w	r3, r2, r3
 800b860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b866:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b86a:	f7f4 fd09 	bl	8000280 <__aeabi_uldivmod>
 800b86e:	4602      	mov	r2, r0
 800b870:	460b      	mov	r3, r1
 800b872:	4b0d      	ldr	r3, [pc, #52]	@ (800b8a8 <UART_SetConfig+0x2d4>)
 800b874:	fba3 1302 	umull	r1, r3, r3, r2
 800b878:	095b      	lsrs	r3, r3, #5
 800b87a:	2164      	movs	r1, #100	@ 0x64
 800b87c:	fb01 f303 	mul.w	r3, r1, r3
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	00db      	lsls	r3, r3, #3
 800b884:	3332      	adds	r3, #50	@ 0x32
 800b886:	4a08      	ldr	r2, [pc, #32]	@ (800b8a8 <UART_SetConfig+0x2d4>)
 800b888:	fba2 2303 	umull	r2, r3, r2, r3
 800b88c:	095b      	lsrs	r3, r3, #5
 800b88e:	f003 0207 	and.w	r2, r3, #7
 800b892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4422      	add	r2, r4
 800b89a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b89c:	e106      	b.n	800baac <UART_SetConfig+0x4d8>
 800b89e:	bf00      	nop
 800b8a0:	40011000 	.word	0x40011000
 800b8a4:	40011400 	.word	0x40011400
 800b8a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b8ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b8b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b8ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b8be:	4642      	mov	r2, r8
 800b8c0:	464b      	mov	r3, r9
 800b8c2:	1891      	adds	r1, r2, r2
 800b8c4:	6239      	str	r1, [r7, #32]
 800b8c6:	415b      	adcs	r3, r3
 800b8c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b8ce:	4641      	mov	r1, r8
 800b8d0:	1854      	adds	r4, r2, r1
 800b8d2:	4649      	mov	r1, r9
 800b8d4:	eb43 0501 	adc.w	r5, r3, r1
 800b8d8:	f04f 0200 	mov.w	r2, #0
 800b8dc:	f04f 0300 	mov.w	r3, #0
 800b8e0:	00eb      	lsls	r3, r5, #3
 800b8e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b8e6:	00e2      	lsls	r2, r4, #3
 800b8e8:	4614      	mov	r4, r2
 800b8ea:	461d      	mov	r5, r3
 800b8ec:	4643      	mov	r3, r8
 800b8ee:	18e3      	adds	r3, r4, r3
 800b8f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b8f4:	464b      	mov	r3, r9
 800b8f6:	eb45 0303 	adc.w	r3, r5, r3
 800b8fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b8fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b90a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b90e:	f04f 0200 	mov.w	r2, #0
 800b912:	f04f 0300 	mov.w	r3, #0
 800b916:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b91a:	4629      	mov	r1, r5
 800b91c:	008b      	lsls	r3, r1, #2
 800b91e:	4621      	mov	r1, r4
 800b920:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b924:	4621      	mov	r1, r4
 800b926:	008a      	lsls	r2, r1, #2
 800b928:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b92c:	f7f4 fca8 	bl	8000280 <__aeabi_uldivmod>
 800b930:	4602      	mov	r2, r0
 800b932:	460b      	mov	r3, r1
 800b934:	4b60      	ldr	r3, [pc, #384]	@ (800bab8 <UART_SetConfig+0x4e4>)
 800b936:	fba3 2302 	umull	r2, r3, r3, r2
 800b93a:	095b      	lsrs	r3, r3, #5
 800b93c:	011c      	lsls	r4, r3, #4
 800b93e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b942:	2200      	movs	r2, #0
 800b944:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b948:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b94c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b950:	4642      	mov	r2, r8
 800b952:	464b      	mov	r3, r9
 800b954:	1891      	adds	r1, r2, r2
 800b956:	61b9      	str	r1, [r7, #24]
 800b958:	415b      	adcs	r3, r3
 800b95a:	61fb      	str	r3, [r7, #28]
 800b95c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b960:	4641      	mov	r1, r8
 800b962:	1851      	adds	r1, r2, r1
 800b964:	6139      	str	r1, [r7, #16]
 800b966:	4649      	mov	r1, r9
 800b968:	414b      	adcs	r3, r1
 800b96a:	617b      	str	r3, [r7, #20]
 800b96c:	f04f 0200 	mov.w	r2, #0
 800b970:	f04f 0300 	mov.w	r3, #0
 800b974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b978:	4659      	mov	r1, fp
 800b97a:	00cb      	lsls	r3, r1, #3
 800b97c:	4651      	mov	r1, sl
 800b97e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b982:	4651      	mov	r1, sl
 800b984:	00ca      	lsls	r2, r1, #3
 800b986:	4610      	mov	r0, r2
 800b988:	4619      	mov	r1, r3
 800b98a:	4603      	mov	r3, r0
 800b98c:	4642      	mov	r2, r8
 800b98e:	189b      	adds	r3, r3, r2
 800b990:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b994:	464b      	mov	r3, r9
 800b996:	460a      	mov	r2, r1
 800b998:	eb42 0303 	adc.w	r3, r2, r3
 800b99c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b9a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b9aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b9ac:	f04f 0200 	mov.w	r2, #0
 800b9b0:	f04f 0300 	mov.w	r3, #0
 800b9b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b9b8:	4649      	mov	r1, r9
 800b9ba:	008b      	lsls	r3, r1, #2
 800b9bc:	4641      	mov	r1, r8
 800b9be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b9c2:	4641      	mov	r1, r8
 800b9c4:	008a      	lsls	r2, r1, #2
 800b9c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b9ca:	f7f4 fc59 	bl	8000280 <__aeabi_uldivmod>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	4611      	mov	r1, r2
 800b9d4:	4b38      	ldr	r3, [pc, #224]	@ (800bab8 <UART_SetConfig+0x4e4>)
 800b9d6:	fba3 2301 	umull	r2, r3, r3, r1
 800b9da:	095b      	lsrs	r3, r3, #5
 800b9dc:	2264      	movs	r2, #100	@ 0x64
 800b9de:	fb02 f303 	mul.w	r3, r2, r3
 800b9e2:	1acb      	subs	r3, r1, r3
 800b9e4:	011b      	lsls	r3, r3, #4
 800b9e6:	3332      	adds	r3, #50	@ 0x32
 800b9e8:	4a33      	ldr	r2, [pc, #204]	@ (800bab8 <UART_SetConfig+0x4e4>)
 800b9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ee:	095b      	lsrs	r3, r3, #5
 800b9f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b9f4:	441c      	add	r4, r3
 800b9f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	673b      	str	r3, [r7, #112]	@ 0x70
 800b9fe:	677a      	str	r2, [r7, #116]	@ 0x74
 800ba00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ba04:	4642      	mov	r2, r8
 800ba06:	464b      	mov	r3, r9
 800ba08:	1891      	adds	r1, r2, r2
 800ba0a:	60b9      	str	r1, [r7, #8]
 800ba0c:	415b      	adcs	r3, r3
 800ba0e:	60fb      	str	r3, [r7, #12]
 800ba10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba14:	4641      	mov	r1, r8
 800ba16:	1851      	adds	r1, r2, r1
 800ba18:	6039      	str	r1, [r7, #0]
 800ba1a:	4649      	mov	r1, r9
 800ba1c:	414b      	adcs	r3, r1
 800ba1e:	607b      	str	r3, [r7, #4]
 800ba20:	f04f 0200 	mov.w	r2, #0
 800ba24:	f04f 0300 	mov.w	r3, #0
 800ba28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ba2c:	4659      	mov	r1, fp
 800ba2e:	00cb      	lsls	r3, r1, #3
 800ba30:	4651      	mov	r1, sl
 800ba32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba36:	4651      	mov	r1, sl
 800ba38:	00ca      	lsls	r2, r1, #3
 800ba3a:	4610      	mov	r0, r2
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	4603      	mov	r3, r0
 800ba40:	4642      	mov	r2, r8
 800ba42:	189b      	adds	r3, r3, r2
 800ba44:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ba46:	464b      	mov	r3, r9
 800ba48:	460a      	mov	r2, r1
 800ba4a:	eb42 0303 	adc.w	r3, r2, r3
 800ba4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ba50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba5a:	667a      	str	r2, [r7, #100]	@ 0x64
 800ba5c:	f04f 0200 	mov.w	r2, #0
 800ba60:	f04f 0300 	mov.w	r3, #0
 800ba64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ba68:	4649      	mov	r1, r9
 800ba6a:	008b      	lsls	r3, r1, #2
 800ba6c:	4641      	mov	r1, r8
 800ba6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba72:	4641      	mov	r1, r8
 800ba74:	008a      	lsls	r2, r1, #2
 800ba76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ba7a:	f7f4 fc01 	bl	8000280 <__aeabi_uldivmod>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	460b      	mov	r3, r1
 800ba82:	4b0d      	ldr	r3, [pc, #52]	@ (800bab8 <UART_SetConfig+0x4e4>)
 800ba84:	fba3 1302 	umull	r1, r3, r3, r2
 800ba88:	095b      	lsrs	r3, r3, #5
 800ba8a:	2164      	movs	r1, #100	@ 0x64
 800ba8c:	fb01 f303 	mul.w	r3, r1, r3
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	011b      	lsls	r3, r3, #4
 800ba94:	3332      	adds	r3, #50	@ 0x32
 800ba96:	4a08      	ldr	r2, [pc, #32]	@ (800bab8 <UART_SetConfig+0x4e4>)
 800ba98:	fba2 2303 	umull	r2, r3, r2, r3
 800ba9c:	095b      	lsrs	r3, r3, #5
 800ba9e:	f003 020f 	and.w	r2, r3, #15
 800baa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4422      	add	r2, r4
 800baaa:	609a      	str	r2, [r3, #8]
}
 800baac:	bf00      	nop
 800baae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bab2:	46bd      	mov	sp, r7
 800bab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bab8:	51eb851f 	.word	0x51eb851f

0800babc <sniprintf>:
 800babc:	b40c      	push	{r2, r3}
 800babe:	b530      	push	{r4, r5, lr}
 800bac0:	4b17      	ldr	r3, [pc, #92]	@ (800bb20 <sniprintf+0x64>)
 800bac2:	1e0c      	subs	r4, r1, #0
 800bac4:	681d      	ldr	r5, [r3, #0]
 800bac6:	b09d      	sub	sp, #116	@ 0x74
 800bac8:	da08      	bge.n	800badc <sniprintf+0x20>
 800baca:	238b      	movs	r3, #139	@ 0x8b
 800bacc:	602b      	str	r3, [r5, #0]
 800bace:	f04f 30ff 	mov.w	r0, #4294967295
 800bad2:	b01d      	add	sp, #116	@ 0x74
 800bad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bad8:	b002      	add	sp, #8
 800bada:	4770      	bx	lr
 800badc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bae0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bae4:	bf14      	ite	ne
 800bae6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800baea:	4623      	moveq	r3, r4
 800baec:	9304      	str	r3, [sp, #16]
 800baee:	9307      	str	r3, [sp, #28]
 800baf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800baf4:	9002      	str	r0, [sp, #8]
 800baf6:	9006      	str	r0, [sp, #24]
 800baf8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bafc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bafe:	ab21      	add	r3, sp, #132	@ 0x84
 800bb00:	a902      	add	r1, sp, #8
 800bb02:	4628      	mov	r0, r5
 800bb04:	9301      	str	r3, [sp, #4]
 800bb06:	f000 f9bb 	bl	800be80 <_svfiprintf_r>
 800bb0a:	1c43      	adds	r3, r0, #1
 800bb0c:	bfbc      	itt	lt
 800bb0e:	238b      	movlt	r3, #139	@ 0x8b
 800bb10:	602b      	strlt	r3, [r5, #0]
 800bb12:	2c00      	cmp	r4, #0
 800bb14:	d0dd      	beq.n	800bad2 <sniprintf+0x16>
 800bb16:	9b02      	ldr	r3, [sp, #8]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	701a      	strb	r2, [r3, #0]
 800bb1c:	e7d9      	b.n	800bad2 <sniprintf+0x16>
 800bb1e:	bf00      	nop
 800bb20:	20000054 	.word	0x20000054

0800bb24 <memset>:
 800bb24:	4402      	add	r2, r0
 800bb26:	4603      	mov	r3, r0
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d100      	bne.n	800bb2e <memset+0xa>
 800bb2c:	4770      	bx	lr
 800bb2e:	f803 1b01 	strb.w	r1, [r3], #1
 800bb32:	e7f9      	b.n	800bb28 <memset+0x4>

0800bb34 <strncmp>:
 800bb34:	b510      	push	{r4, lr}
 800bb36:	b16a      	cbz	r2, 800bb54 <strncmp+0x20>
 800bb38:	3901      	subs	r1, #1
 800bb3a:	1884      	adds	r4, r0, r2
 800bb3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d103      	bne.n	800bb50 <strncmp+0x1c>
 800bb48:	42a0      	cmp	r0, r4
 800bb4a:	d001      	beq.n	800bb50 <strncmp+0x1c>
 800bb4c:	2a00      	cmp	r2, #0
 800bb4e:	d1f5      	bne.n	800bb3c <strncmp+0x8>
 800bb50:	1ad0      	subs	r0, r2, r3
 800bb52:	bd10      	pop	{r4, pc}
 800bb54:	4610      	mov	r0, r2
 800bb56:	e7fc      	b.n	800bb52 <strncmp+0x1e>

0800bb58 <strncpy>:
 800bb58:	b510      	push	{r4, lr}
 800bb5a:	3901      	subs	r1, #1
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	b132      	cbz	r2, 800bb6e <strncpy+0x16>
 800bb60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bb64:	f803 4b01 	strb.w	r4, [r3], #1
 800bb68:	3a01      	subs	r2, #1
 800bb6a:	2c00      	cmp	r4, #0
 800bb6c:	d1f7      	bne.n	800bb5e <strncpy+0x6>
 800bb6e:	441a      	add	r2, r3
 800bb70:	2100      	movs	r1, #0
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d100      	bne.n	800bb78 <strncpy+0x20>
 800bb76:	bd10      	pop	{r4, pc}
 800bb78:	f803 1b01 	strb.w	r1, [r3], #1
 800bb7c:	e7f9      	b.n	800bb72 <strncpy+0x1a>
	...

0800bb80 <__errno>:
 800bb80:	4b01      	ldr	r3, [pc, #4]	@ (800bb88 <__errno+0x8>)
 800bb82:	6818      	ldr	r0, [r3, #0]
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	20000054 	.word	0x20000054

0800bb8c <__libc_init_array>:
 800bb8c:	b570      	push	{r4, r5, r6, lr}
 800bb8e:	4d0d      	ldr	r5, [pc, #52]	@ (800bbc4 <__libc_init_array+0x38>)
 800bb90:	4c0d      	ldr	r4, [pc, #52]	@ (800bbc8 <__libc_init_array+0x3c>)
 800bb92:	1b64      	subs	r4, r4, r5
 800bb94:	10a4      	asrs	r4, r4, #2
 800bb96:	2600      	movs	r6, #0
 800bb98:	42a6      	cmp	r6, r4
 800bb9a:	d109      	bne.n	800bbb0 <__libc_init_array+0x24>
 800bb9c:	4d0b      	ldr	r5, [pc, #44]	@ (800bbcc <__libc_init_array+0x40>)
 800bb9e:	4c0c      	ldr	r4, [pc, #48]	@ (800bbd0 <__libc_init_array+0x44>)
 800bba0:	f000 fc66 	bl	800c470 <_init>
 800bba4:	1b64      	subs	r4, r4, r5
 800bba6:	10a4      	asrs	r4, r4, #2
 800bba8:	2600      	movs	r6, #0
 800bbaa:	42a6      	cmp	r6, r4
 800bbac:	d105      	bne.n	800bbba <__libc_init_array+0x2e>
 800bbae:	bd70      	pop	{r4, r5, r6, pc}
 800bbb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbb4:	4798      	blx	r3
 800bbb6:	3601      	adds	r6, #1
 800bbb8:	e7ee      	b.n	800bb98 <__libc_init_array+0xc>
 800bbba:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbbe:	4798      	blx	r3
 800bbc0:	3601      	adds	r6, #1
 800bbc2:	e7f2      	b.n	800bbaa <__libc_init_array+0x1e>
 800bbc4:	0800c5f8 	.word	0x0800c5f8
 800bbc8:	0800c5f8 	.word	0x0800c5f8
 800bbcc:	0800c5f8 	.word	0x0800c5f8
 800bbd0:	0800c5fc 	.word	0x0800c5fc

0800bbd4 <__retarget_lock_acquire_recursive>:
 800bbd4:	4770      	bx	lr

0800bbd6 <__retarget_lock_release_recursive>:
 800bbd6:	4770      	bx	lr

0800bbd8 <_free_r>:
 800bbd8:	b538      	push	{r3, r4, r5, lr}
 800bbda:	4605      	mov	r5, r0
 800bbdc:	2900      	cmp	r1, #0
 800bbde:	d041      	beq.n	800bc64 <_free_r+0x8c>
 800bbe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbe4:	1f0c      	subs	r4, r1, #4
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	bfb8      	it	lt
 800bbea:	18e4      	addlt	r4, r4, r3
 800bbec:	f000 f8e0 	bl	800bdb0 <__malloc_lock>
 800bbf0:	4a1d      	ldr	r2, [pc, #116]	@ (800bc68 <_free_r+0x90>)
 800bbf2:	6813      	ldr	r3, [r2, #0]
 800bbf4:	b933      	cbnz	r3, 800bc04 <_free_r+0x2c>
 800bbf6:	6063      	str	r3, [r4, #4]
 800bbf8:	6014      	str	r4, [r2, #0]
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc00:	f000 b8dc 	b.w	800bdbc <__malloc_unlock>
 800bc04:	42a3      	cmp	r3, r4
 800bc06:	d908      	bls.n	800bc1a <_free_r+0x42>
 800bc08:	6820      	ldr	r0, [r4, #0]
 800bc0a:	1821      	adds	r1, r4, r0
 800bc0c:	428b      	cmp	r3, r1
 800bc0e:	bf01      	itttt	eq
 800bc10:	6819      	ldreq	r1, [r3, #0]
 800bc12:	685b      	ldreq	r3, [r3, #4]
 800bc14:	1809      	addeq	r1, r1, r0
 800bc16:	6021      	streq	r1, [r4, #0]
 800bc18:	e7ed      	b.n	800bbf6 <_free_r+0x1e>
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	b10b      	cbz	r3, 800bc24 <_free_r+0x4c>
 800bc20:	42a3      	cmp	r3, r4
 800bc22:	d9fa      	bls.n	800bc1a <_free_r+0x42>
 800bc24:	6811      	ldr	r1, [r2, #0]
 800bc26:	1850      	adds	r0, r2, r1
 800bc28:	42a0      	cmp	r0, r4
 800bc2a:	d10b      	bne.n	800bc44 <_free_r+0x6c>
 800bc2c:	6820      	ldr	r0, [r4, #0]
 800bc2e:	4401      	add	r1, r0
 800bc30:	1850      	adds	r0, r2, r1
 800bc32:	4283      	cmp	r3, r0
 800bc34:	6011      	str	r1, [r2, #0]
 800bc36:	d1e0      	bne.n	800bbfa <_free_r+0x22>
 800bc38:	6818      	ldr	r0, [r3, #0]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	6053      	str	r3, [r2, #4]
 800bc3e:	4408      	add	r0, r1
 800bc40:	6010      	str	r0, [r2, #0]
 800bc42:	e7da      	b.n	800bbfa <_free_r+0x22>
 800bc44:	d902      	bls.n	800bc4c <_free_r+0x74>
 800bc46:	230c      	movs	r3, #12
 800bc48:	602b      	str	r3, [r5, #0]
 800bc4a:	e7d6      	b.n	800bbfa <_free_r+0x22>
 800bc4c:	6820      	ldr	r0, [r4, #0]
 800bc4e:	1821      	adds	r1, r4, r0
 800bc50:	428b      	cmp	r3, r1
 800bc52:	bf04      	itt	eq
 800bc54:	6819      	ldreq	r1, [r3, #0]
 800bc56:	685b      	ldreq	r3, [r3, #4]
 800bc58:	6063      	str	r3, [r4, #4]
 800bc5a:	bf04      	itt	eq
 800bc5c:	1809      	addeq	r1, r1, r0
 800bc5e:	6021      	streq	r1, [r4, #0]
 800bc60:	6054      	str	r4, [r2, #4]
 800bc62:	e7ca      	b.n	800bbfa <_free_r+0x22>
 800bc64:	bd38      	pop	{r3, r4, r5, pc}
 800bc66:	bf00      	nop
 800bc68:	20000c10 	.word	0x20000c10

0800bc6c <sbrk_aligned>:
 800bc6c:	b570      	push	{r4, r5, r6, lr}
 800bc6e:	4e0f      	ldr	r6, [pc, #60]	@ (800bcac <sbrk_aligned+0x40>)
 800bc70:	460c      	mov	r4, r1
 800bc72:	6831      	ldr	r1, [r6, #0]
 800bc74:	4605      	mov	r5, r0
 800bc76:	b911      	cbnz	r1, 800bc7e <sbrk_aligned+0x12>
 800bc78:	f000 fba6 	bl	800c3c8 <_sbrk_r>
 800bc7c:	6030      	str	r0, [r6, #0]
 800bc7e:	4621      	mov	r1, r4
 800bc80:	4628      	mov	r0, r5
 800bc82:	f000 fba1 	bl	800c3c8 <_sbrk_r>
 800bc86:	1c43      	adds	r3, r0, #1
 800bc88:	d103      	bne.n	800bc92 <sbrk_aligned+0x26>
 800bc8a:	f04f 34ff 	mov.w	r4, #4294967295
 800bc8e:	4620      	mov	r0, r4
 800bc90:	bd70      	pop	{r4, r5, r6, pc}
 800bc92:	1cc4      	adds	r4, r0, #3
 800bc94:	f024 0403 	bic.w	r4, r4, #3
 800bc98:	42a0      	cmp	r0, r4
 800bc9a:	d0f8      	beq.n	800bc8e <sbrk_aligned+0x22>
 800bc9c:	1a21      	subs	r1, r4, r0
 800bc9e:	4628      	mov	r0, r5
 800bca0:	f000 fb92 	bl	800c3c8 <_sbrk_r>
 800bca4:	3001      	adds	r0, #1
 800bca6:	d1f2      	bne.n	800bc8e <sbrk_aligned+0x22>
 800bca8:	e7ef      	b.n	800bc8a <sbrk_aligned+0x1e>
 800bcaa:	bf00      	nop
 800bcac:	20000c0c 	.word	0x20000c0c

0800bcb0 <_malloc_r>:
 800bcb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcb4:	1ccd      	adds	r5, r1, #3
 800bcb6:	f025 0503 	bic.w	r5, r5, #3
 800bcba:	3508      	adds	r5, #8
 800bcbc:	2d0c      	cmp	r5, #12
 800bcbe:	bf38      	it	cc
 800bcc0:	250c      	movcc	r5, #12
 800bcc2:	2d00      	cmp	r5, #0
 800bcc4:	4606      	mov	r6, r0
 800bcc6:	db01      	blt.n	800bccc <_malloc_r+0x1c>
 800bcc8:	42a9      	cmp	r1, r5
 800bcca:	d904      	bls.n	800bcd6 <_malloc_r+0x26>
 800bccc:	230c      	movs	r3, #12
 800bcce:	6033      	str	r3, [r6, #0]
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bdac <_malloc_r+0xfc>
 800bcda:	f000 f869 	bl	800bdb0 <__malloc_lock>
 800bcde:	f8d8 3000 	ldr.w	r3, [r8]
 800bce2:	461c      	mov	r4, r3
 800bce4:	bb44      	cbnz	r4, 800bd38 <_malloc_r+0x88>
 800bce6:	4629      	mov	r1, r5
 800bce8:	4630      	mov	r0, r6
 800bcea:	f7ff ffbf 	bl	800bc6c <sbrk_aligned>
 800bcee:	1c43      	adds	r3, r0, #1
 800bcf0:	4604      	mov	r4, r0
 800bcf2:	d158      	bne.n	800bda6 <_malloc_r+0xf6>
 800bcf4:	f8d8 4000 	ldr.w	r4, [r8]
 800bcf8:	4627      	mov	r7, r4
 800bcfa:	2f00      	cmp	r7, #0
 800bcfc:	d143      	bne.n	800bd86 <_malloc_r+0xd6>
 800bcfe:	2c00      	cmp	r4, #0
 800bd00:	d04b      	beq.n	800bd9a <_malloc_r+0xea>
 800bd02:	6823      	ldr	r3, [r4, #0]
 800bd04:	4639      	mov	r1, r7
 800bd06:	4630      	mov	r0, r6
 800bd08:	eb04 0903 	add.w	r9, r4, r3
 800bd0c:	f000 fb5c 	bl	800c3c8 <_sbrk_r>
 800bd10:	4581      	cmp	r9, r0
 800bd12:	d142      	bne.n	800bd9a <_malloc_r+0xea>
 800bd14:	6821      	ldr	r1, [r4, #0]
 800bd16:	1a6d      	subs	r5, r5, r1
 800bd18:	4629      	mov	r1, r5
 800bd1a:	4630      	mov	r0, r6
 800bd1c:	f7ff ffa6 	bl	800bc6c <sbrk_aligned>
 800bd20:	3001      	adds	r0, #1
 800bd22:	d03a      	beq.n	800bd9a <_malloc_r+0xea>
 800bd24:	6823      	ldr	r3, [r4, #0]
 800bd26:	442b      	add	r3, r5
 800bd28:	6023      	str	r3, [r4, #0]
 800bd2a:	f8d8 3000 	ldr.w	r3, [r8]
 800bd2e:	685a      	ldr	r2, [r3, #4]
 800bd30:	bb62      	cbnz	r2, 800bd8c <_malloc_r+0xdc>
 800bd32:	f8c8 7000 	str.w	r7, [r8]
 800bd36:	e00f      	b.n	800bd58 <_malloc_r+0xa8>
 800bd38:	6822      	ldr	r2, [r4, #0]
 800bd3a:	1b52      	subs	r2, r2, r5
 800bd3c:	d420      	bmi.n	800bd80 <_malloc_r+0xd0>
 800bd3e:	2a0b      	cmp	r2, #11
 800bd40:	d917      	bls.n	800bd72 <_malloc_r+0xc2>
 800bd42:	1961      	adds	r1, r4, r5
 800bd44:	42a3      	cmp	r3, r4
 800bd46:	6025      	str	r5, [r4, #0]
 800bd48:	bf18      	it	ne
 800bd4a:	6059      	strne	r1, [r3, #4]
 800bd4c:	6863      	ldr	r3, [r4, #4]
 800bd4e:	bf08      	it	eq
 800bd50:	f8c8 1000 	streq.w	r1, [r8]
 800bd54:	5162      	str	r2, [r4, r5]
 800bd56:	604b      	str	r3, [r1, #4]
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f000 f82f 	bl	800bdbc <__malloc_unlock>
 800bd5e:	f104 000b 	add.w	r0, r4, #11
 800bd62:	1d23      	adds	r3, r4, #4
 800bd64:	f020 0007 	bic.w	r0, r0, #7
 800bd68:	1ac2      	subs	r2, r0, r3
 800bd6a:	bf1c      	itt	ne
 800bd6c:	1a1b      	subne	r3, r3, r0
 800bd6e:	50a3      	strne	r3, [r4, r2]
 800bd70:	e7af      	b.n	800bcd2 <_malloc_r+0x22>
 800bd72:	6862      	ldr	r2, [r4, #4]
 800bd74:	42a3      	cmp	r3, r4
 800bd76:	bf0c      	ite	eq
 800bd78:	f8c8 2000 	streq.w	r2, [r8]
 800bd7c:	605a      	strne	r2, [r3, #4]
 800bd7e:	e7eb      	b.n	800bd58 <_malloc_r+0xa8>
 800bd80:	4623      	mov	r3, r4
 800bd82:	6864      	ldr	r4, [r4, #4]
 800bd84:	e7ae      	b.n	800bce4 <_malloc_r+0x34>
 800bd86:	463c      	mov	r4, r7
 800bd88:	687f      	ldr	r7, [r7, #4]
 800bd8a:	e7b6      	b.n	800bcfa <_malloc_r+0x4a>
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	42a3      	cmp	r3, r4
 800bd92:	d1fb      	bne.n	800bd8c <_malloc_r+0xdc>
 800bd94:	2300      	movs	r3, #0
 800bd96:	6053      	str	r3, [r2, #4]
 800bd98:	e7de      	b.n	800bd58 <_malloc_r+0xa8>
 800bd9a:	230c      	movs	r3, #12
 800bd9c:	6033      	str	r3, [r6, #0]
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f000 f80c 	bl	800bdbc <__malloc_unlock>
 800bda4:	e794      	b.n	800bcd0 <_malloc_r+0x20>
 800bda6:	6005      	str	r5, [r0, #0]
 800bda8:	e7d6      	b.n	800bd58 <_malloc_r+0xa8>
 800bdaa:	bf00      	nop
 800bdac:	20000c10 	.word	0x20000c10

0800bdb0 <__malloc_lock>:
 800bdb0:	4801      	ldr	r0, [pc, #4]	@ (800bdb8 <__malloc_lock+0x8>)
 800bdb2:	f7ff bf0f 	b.w	800bbd4 <__retarget_lock_acquire_recursive>
 800bdb6:	bf00      	nop
 800bdb8:	20000c08 	.word	0x20000c08

0800bdbc <__malloc_unlock>:
 800bdbc:	4801      	ldr	r0, [pc, #4]	@ (800bdc4 <__malloc_unlock+0x8>)
 800bdbe:	f7ff bf0a 	b.w	800bbd6 <__retarget_lock_release_recursive>
 800bdc2:	bf00      	nop
 800bdc4:	20000c08 	.word	0x20000c08

0800bdc8 <__ssputs_r>:
 800bdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdcc:	688e      	ldr	r6, [r1, #8]
 800bdce:	461f      	mov	r7, r3
 800bdd0:	42be      	cmp	r6, r7
 800bdd2:	680b      	ldr	r3, [r1, #0]
 800bdd4:	4682      	mov	sl, r0
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	4690      	mov	r8, r2
 800bdda:	d82d      	bhi.n	800be38 <__ssputs_r+0x70>
 800bddc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bde0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bde4:	d026      	beq.n	800be34 <__ssputs_r+0x6c>
 800bde6:	6965      	ldr	r5, [r4, #20]
 800bde8:	6909      	ldr	r1, [r1, #16]
 800bdea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdee:	eba3 0901 	sub.w	r9, r3, r1
 800bdf2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdf6:	1c7b      	adds	r3, r7, #1
 800bdf8:	444b      	add	r3, r9
 800bdfa:	106d      	asrs	r5, r5, #1
 800bdfc:	429d      	cmp	r5, r3
 800bdfe:	bf38      	it	cc
 800be00:	461d      	movcc	r5, r3
 800be02:	0553      	lsls	r3, r2, #21
 800be04:	d527      	bpl.n	800be56 <__ssputs_r+0x8e>
 800be06:	4629      	mov	r1, r5
 800be08:	f7ff ff52 	bl	800bcb0 <_malloc_r>
 800be0c:	4606      	mov	r6, r0
 800be0e:	b360      	cbz	r0, 800be6a <__ssputs_r+0xa2>
 800be10:	6921      	ldr	r1, [r4, #16]
 800be12:	464a      	mov	r2, r9
 800be14:	f000 fae8 	bl	800c3e8 <memcpy>
 800be18:	89a3      	ldrh	r3, [r4, #12]
 800be1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be22:	81a3      	strh	r3, [r4, #12]
 800be24:	6126      	str	r6, [r4, #16]
 800be26:	6165      	str	r5, [r4, #20]
 800be28:	444e      	add	r6, r9
 800be2a:	eba5 0509 	sub.w	r5, r5, r9
 800be2e:	6026      	str	r6, [r4, #0]
 800be30:	60a5      	str	r5, [r4, #8]
 800be32:	463e      	mov	r6, r7
 800be34:	42be      	cmp	r6, r7
 800be36:	d900      	bls.n	800be3a <__ssputs_r+0x72>
 800be38:	463e      	mov	r6, r7
 800be3a:	6820      	ldr	r0, [r4, #0]
 800be3c:	4632      	mov	r2, r6
 800be3e:	4641      	mov	r1, r8
 800be40:	f000 faa8 	bl	800c394 <memmove>
 800be44:	68a3      	ldr	r3, [r4, #8]
 800be46:	1b9b      	subs	r3, r3, r6
 800be48:	60a3      	str	r3, [r4, #8]
 800be4a:	6823      	ldr	r3, [r4, #0]
 800be4c:	4433      	add	r3, r6
 800be4e:	6023      	str	r3, [r4, #0]
 800be50:	2000      	movs	r0, #0
 800be52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be56:	462a      	mov	r2, r5
 800be58:	f000 fad4 	bl	800c404 <_realloc_r>
 800be5c:	4606      	mov	r6, r0
 800be5e:	2800      	cmp	r0, #0
 800be60:	d1e0      	bne.n	800be24 <__ssputs_r+0x5c>
 800be62:	6921      	ldr	r1, [r4, #16]
 800be64:	4650      	mov	r0, sl
 800be66:	f7ff feb7 	bl	800bbd8 <_free_r>
 800be6a:	230c      	movs	r3, #12
 800be6c:	f8ca 3000 	str.w	r3, [sl]
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be76:	81a3      	strh	r3, [r4, #12]
 800be78:	f04f 30ff 	mov.w	r0, #4294967295
 800be7c:	e7e9      	b.n	800be52 <__ssputs_r+0x8a>
	...

0800be80 <_svfiprintf_r>:
 800be80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	4698      	mov	r8, r3
 800be86:	898b      	ldrh	r3, [r1, #12]
 800be88:	061b      	lsls	r3, r3, #24
 800be8a:	b09d      	sub	sp, #116	@ 0x74
 800be8c:	4607      	mov	r7, r0
 800be8e:	460d      	mov	r5, r1
 800be90:	4614      	mov	r4, r2
 800be92:	d510      	bpl.n	800beb6 <_svfiprintf_r+0x36>
 800be94:	690b      	ldr	r3, [r1, #16]
 800be96:	b973      	cbnz	r3, 800beb6 <_svfiprintf_r+0x36>
 800be98:	2140      	movs	r1, #64	@ 0x40
 800be9a:	f7ff ff09 	bl	800bcb0 <_malloc_r>
 800be9e:	6028      	str	r0, [r5, #0]
 800bea0:	6128      	str	r0, [r5, #16]
 800bea2:	b930      	cbnz	r0, 800beb2 <_svfiprintf_r+0x32>
 800bea4:	230c      	movs	r3, #12
 800bea6:	603b      	str	r3, [r7, #0]
 800bea8:	f04f 30ff 	mov.w	r0, #4294967295
 800beac:	b01d      	add	sp, #116	@ 0x74
 800beae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb2:	2340      	movs	r3, #64	@ 0x40
 800beb4:	616b      	str	r3, [r5, #20]
 800beb6:	2300      	movs	r3, #0
 800beb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800beba:	2320      	movs	r3, #32
 800bebc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bec0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bec4:	2330      	movs	r3, #48	@ 0x30
 800bec6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c064 <_svfiprintf_r+0x1e4>
 800beca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bece:	f04f 0901 	mov.w	r9, #1
 800bed2:	4623      	mov	r3, r4
 800bed4:	469a      	mov	sl, r3
 800bed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beda:	b10a      	cbz	r2, 800bee0 <_svfiprintf_r+0x60>
 800bedc:	2a25      	cmp	r2, #37	@ 0x25
 800bede:	d1f9      	bne.n	800bed4 <_svfiprintf_r+0x54>
 800bee0:	ebba 0b04 	subs.w	fp, sl, r4
 800bee4:	d00b      	beq.n	800befe <_svfiprintf_r+0x7e>
 800bee6:	465b      	mov	r3, fp
 800bee8:	4622      	mov	r2, r4
 800beea:	4629      	mov	r1, r5
 800beec:	4638      	mov	r0, r7
 800beee:	f7ff ff6b 	bl	800bdc8 <__ssputs_r>
 800bef2:	3001      	adds	r0, #1
 800bef4:	f000 80a7 	beq.w	800c046 <_svfiprintf_r+0x1c6>
 800bef8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800befa:	445a      	add	r2, fp
 800befc:	9209      	str	r2, [sp, #36]	@ 0x24
 800befe:	f89a 3000 	ldrb.w	r3, [sl]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f000 809f 	beq.w	800c046 <_svfiprintf_r+0x1c6>
 800bf08:	2300      	movs	r3, #0
 800bf0a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf12:	f10a 0a01 	add.w	sl, sl, #1
 800bf16:	9304      	str	r3, [sp, #16]
 800bf18:	9307      	str	r3, [sp, #28]
 800bf1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf1e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf20:	4654      	mov	r4, sl
 800bf22:	2205      	movs	r2, #5
 800bf24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf28:	484e      	ldr	r0, [pc, #312]	@ (800c064 <_svfiprintf_r+0x1e4>)
 800bf2a:	f7f4 f959 	bl	80001e0 <memchr>
 800bf2e:	9a04      	ldr	r2, [sp, #16]
 800bf30:	b9d8      	cbnz	r0, 800bf6a <_svfiprintf_r+0xea>
 800bf32:	06d0      	lsls	r0, r2, #27
 800bf34:	bf44      	itt	mi
 800bf36:	2320      	movmi	r3, #32
 800bf38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf3c:	0711      	lsls	r1, r2, #28
 800bf3e:	bf44      	itt	mi
 800bf40:	232b      	movmi	r3, #43	@ 0x2b
 800bf42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf46:	f89a 3000 	ldrb.w	r3, [sl]
 800bf4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf4c:	d015      	beq.n	800bf7a <_svfiprintf_r+0xfa>
 800bf4e:	9a07      	ldr	r2, [sp, #28]
 800bf50:	4654      	mov	r4, sl
 800bf52:	2000      	movs	r0, #0
 800bf54:	f04f 0c0a 	mov.w	ip, #10
 800bf58:	4621      	mov	r1, r4
 800bf5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf5e:	3b30      	subs	r3, #48	@ 0x30
 800bf60:	2b09      	cmp	r3, #9
 800bf62:	d94b      	bls.n	800bffc <_svfiprintf_r+0x17c>
 800bf64:	b1b0      	cbz	r0, 800bf94 <_svfiprintf_r+0x114>
 800bf66:	9207      	str	r2, [sp, #28]
 800bf68:	e014      	b.n	800bf94 <_svfiprintf_r+0x114>
 800bf6a:	eba0 0308 	sub.w	r3, r0, r8
 800bf6e:	fa09 f303 	lsl.w	r3, r9, r3
 800bf72:	4313      	orrs	r3, r2
 800bf74:	9304      	str	r3, [sp, #16]
 800bf76:	46a2      	mov	sl, r4
 800bf78:	e7d2      	b.n	800bf20 <_svfiprintf_r+0xa0>
 800bf7a:	9b03      	ldr	r3, [sp, #12]
 800bf7c:	1d19      	adds	r1, r3, #4
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	9103      	str	r1, [sp, #12]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	bfbb      	ittet	lt
 800bf86:	425b      	neglt	r3, r3
 800bf88:	f042 0202 	orrlt.w	r2, r2, #2
 800bf8c:	9307      	strge	r3, [sp, #28]
 800bf8e:	9307      	strlt	r3, [sp, #28]
 800bf90:	bfb8      	it	lt
 800bf92:	9204      	strlt	r2, [sp, #16]
 800bf94:	7823      	ldrb	r3, [r4, #0]
 800bf96:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf98:	d10a      	bne.n	800bfb0 <_svfiprintf_r+0x130>
 800bf9a:	7863      	ldrb	r3, [r4, #1]
 800bf9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf9e:	d132      	bne.n	800c006 <_svfiprintf_r+0x186>
 800bfa0:	9b03      	ldr	r3, [sp, #12]
 800bfa2:	1d1a      	adds	r2, r3, #4
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	9203      	str	r2, [sp, #12]
 800bfa8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfac:	3402      	adds	r4, #2
 800bfae:	9305      	str	r3, [sp, #20]
 800bfb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c074 <_svfiprintf_r+0x1f4>
 800bfb4:	7821      	ldrb	r1, [r4, #0]
 800bfb6:	2203      	movs	r2, #3
 800bfb8:	4650      	mov	r0, sl
 800bfba:	f7f4 f911 	bl	80001e0 <memchr>
 800bfbe:	b138      	cbz	r0, 800bfd0 <_svfiprintf_r+0x150>
 800bfc0:	9b04      	ldr	r3, [sp, #16]
 800bfc2:	eba0 000a 	sub.w	r0, r0, sl
 800bfc6:	2240      	movs	r2, #64	@ 0x40
 800bfc8:	4082      	lsls	r2, r0
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	3401      	adds	r4, #1
 800bfce:	9304      	str	r3, [sp, #16]
 800bfd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfd4:	4824      	ldr	r0, [pc, #144]	@ (800c068 <_svfiprintf_r+0x1e8>)
 800bfd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfda:	2206      	movs	r2, #6
 800bfdc:	f7f4 f900 	bl	80001e0 <memchr>
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	d036      	beq.n	800c052 <_svfiprintf_r+0x1d2>
 800bfe4:	4b21      	ldr	r3, [pc, #132]	@ (800c06c <_svfiprintf_r+0x1ec>)
 800bfe6:	bb1b      	cbnz	r3, 800c030 <_svfiprintf_r+0x1b0>
 800bfe8:	9b03      	ldr	r3, [sp, #12]
 800bfea:	3307      	adds	r3, #7
 800bfec:	f023 0307 	bic.w	r3, r3, #7
 800bff0:	3308      	adds	r3, #8
 800bff2:	9303      	str	r3, [sp, #12]
 800bff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bff6:	4433      	add	r3, r6
 800bff8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bffa:	e76a      	b.n	800bed2 <_svfiprintf_r+0x52>
 800bffc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c000:	460c      	mov	r4, r1
 800c002:	2001      	movs	r0, #1
 800c004:	e7a8      	b.n	800bf58 <_svfiprintf_r+0xd8>
 800c006:	2300      	movs	r3, #0
 800c008:	3401      	adds	r4, #1
 800c00a:	9305      	str	r3, [sp, #20]
 800c00c:	4619      	mov	r1, r3
 800c00e:	f04f 0c0a 	mov.w	ip, #10
 800c012:	4620      	mov	r0, r4
 800c014:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c018:	3a30      	subs	r2, #48	@ 0x30
 800c01a:	2a09      	cmp	r2, #9
 800c01c:	d903      	bls.n	800c026 <_svfiprintf_r+0x1a6>
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d0c6      	beq.n	800bfb0 <_svfiprintf_r+0x130>
 800c022:	9105      	str	r1, [sp, #20]
 800c024:	e7c4      	b.n	800bfb0 <_svfiprintf_r+0x130>
 800c026:	fb0c 2101 	mla	r1, ip, r1, r2
 800c02a:	4604      	mov	r4, r0
 800c02c:	2301      	movs	r3, #1
 800c02e:	e7f0      	b.n	800c012 <_svfiprintf_r+0x192>
 800c030:	ab03      	add	r3, sp, #12
 800c032:	9300      	str	r3, [sp, #0]
 800c034:	462a      	mov	r2, r5
 800c036:	4b0e      	ldr	r3, [pc, #56]	@ (800c070 <_svfiprintf_r+0x1f0>)
 800c038:	a904      	add	r1, sp, #16
 800c03a:	4638      	mov	r0, r7
 800c03c:	f3af 8000 	nop.w
 800c040:	1c42      	adds	r2, r0, #1
 800c042:	4606      	mov	r6, r0
 800c044:	d1d6      	bne.n	800bff4 <_svfiprintf_r+0x174>
 800c046:	89ab      	ldrh	r3, [r5, #12]
 800c048:	065b      	lsls	r3, r3, #25
 800c04a:	f53f af2d 	bmi.w	800bea8 <_svfiprintf_r+0x28>
 800c04e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c050:	e72c      	b.n	800beac <_svfiprintf_r+0x2c>
 800c052:	ab03      	add	r3, sp, #12
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	462a      	mov	r2, r5
 800c058:	4b05      	ldr	r3, [pc, #20]	@ (800c070 <_svfiprintf_r+0x1f0>)
 800c05a:	a904      	add	r1, sp, #16
 800c05c:	4638      	mov	r0, r7
 800c05e:	f000 f879 	bl	800c154 <_printf_i>
 800c062:	e7ed      	b.n	800c040 <_svfiprintf_r+0x1c0>
 800c064:	0800c5bc 	.word	0x0800c5bc
 800c068:	0800c5c6 	.word	0x0800c5c6
 800c06c:	00000000 	.word	0x00000000
 800c070:	0800bdc9 	.word	0x0800bdc9
 800c074:	0800c5c2 	.word	0x0800c5c2

0800c078 <_printf_common>:
 800c078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c07c:	4616      	mov	r6, r2
 800c07e:	4698      	mov	r8, r3
 800c080:	688a      	ldr	r2, [r1, #8]
 800c082:	690b      	ldr	r3, [r1, #16]
 800c084:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c088:	4293      	cmp	r3, r2
 800c08a:	bfb8      	it	lt
 800c08c:	4613      	movlt	r3, r2
 800c08e:	6033      	str	r3, [r6, #0]
 800c090:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c094:	4607      	mov	r7, r0
 800c096:	460c      	mov	r4, r1
 800c098:	b10a      	cbz	r2, 800c09e <_printf_common+0x26>
 800c09a:	3301      	adds	r3, #1
 800c09c:	6033      	str	r3, [r6, #0]
 800c09e:	6823      	ldr	r3, [r4, #0]
 800c0a0:	0699      	lsls	r1, r3, #26
 800c0a2:	bf42      	ittt	mi
 800c0a4:	6833      	ldrmi	r3, [r6, #0]
 800c0a6:	3302      	addmi	r3, #2
 800c0a8:	6033      	strmi	r3, [r6, #0]
 800c0aa:	6825      	ldr	r5, [r4, #0]
 800c0ac:	f015 0506 	ands.w	r5, r5, #6
 800c0b0:	d106      	bne.n	800c0c0 <_printf_common+0x48>
 800c0b2:	f104 0a19 	add.w	sl, r4, #25
 800c0b6:	68e3      	ldr	r3, [r4, #12]
 800c0b8:	6832      	ldr	r2, [r6, #0]
 800c0ba:	1a9b      	subs	r3, r3, r2
 800c0bc:	42ab      	cmp	r3, r5
 800c0be:	dc26      	bgt.n	800c10e <_printf_common+0x96>
 800c0c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c0c4:	6822      	ldr	r2, [r4, #0]
 800c0c6:	3b00      	subs	r3, #0
 800c0c8:	bf18      	it	ne
 800c0ca:	2301      	movne	r3, #1
 800c0cc:	0692      	lsls	r2, r2, #26
 800c0ce:	d42b      	bmi.n	800c128 <_printf_common+0xb0>
 800c0d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c0d4:	4641      	mov	r1, r8
 800c0d6:	4638      	mov	r0, r7
 800c0d8:	47c8      	blx	r9
 800c0da:	3001      	adds	r0, #1
 800c0dc:	d01e      	beq.n	800c11c <_printf_common+0xa4>
 800c0de:	6823      	ldr	r3, [r4, #0]
 800c0e0:	6922      	ldr	r2, [r4, #16]
 800c0e2:	f003 0306 	and.w	r3, r3, #6
 800c0e6:	2b04      	cmp	r3, #4
 800c0e8:	bf02      	ittt	eq
 800c0ea:	68e5      	ldreq	r5, [r4, #12]
 800c0ec:	6833      	ldreq	r3, [r6, #0]
 800c0ee:	1aed      	subeq	r5, r5, r3
 800c0f0:	68a3      	ldr	r3, [r4, #8]
 800c0f2:	bf0c      	ite	eq
 800c0f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0f8:	2500      	movne	r5, #0
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	bfc4      	itt	gt
 800c0fe:	1a9b      	subgt	r3, r3, r2
 800c100:	18ed      	addgt	r5, r5, r3
 800c102:	2600      	movs	r6, #0
 800c104:	341a      	adds	r4, #26
 800c106:	42b5      	cmp	r5, r6
 800c108:	d11a      	bne.n	800c140 <_printf_common+0xc8>
 800c10a:	2000      	movs	r0, #0
 800c10c:	e008      	b.n	800c120 <_printf_common+0xa8>
 800c10e:	2301      	movs	r3, #1
 800c110:	4652      	mov	r2, sl
 800c112:	4641      	mov	r1, r8
 800c114:	4638      	mov	r0, r7
 800c116:	47c8      	blx	r9
 800c118:	3001      	adds	r0, #1
 800c11a:	d103      	bne.n	800c124 <_printf_common+0xac>
 800c11c:	f04f 30ff 	mov.w	r0, #4294967295
 800c120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c124:	3501      	adds	r5, #1
 800c126:	e7c6      	b.n	800c0b6 <_printf_common+0x3e>
 800c128:	18e1      	adds	r1, r4, r3
 800c12a:	1c5a      	adds	r2, r3, #1
 800c12c:	2030      	movs	r0, #48	@ 0x30
 800c12e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c132:	4422      	add	r2, r4
 800c134:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c138:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c13c:	3302      	adds	r3, #2
 800c13e:	e7c7      	b.n	800c0d0 <_printf_common+0x58>
 800c140:	2301      	movs	r3, #1
 800c142:	4622      	mov	r2, r4
 800c144:	4641      	mov	r1, r8
 800c146:	4638      	mov	r0, r7
 800c148:	47c8      	blx	r9
 800c14a:	3001      	adds	r0, #1
 800c14c:	d0e6      	beq.n	800c11c <_printf_common+0xa4>
 800c14e:	3601      	adds	r6, #1
 800c150:	e7d9      	b.n	800c106 <_printf_common+0x8e>
	...

0800c154 <_printf_i>:
 800c154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c158:	7e0f      	ldrb	r7, [r1, #24]
 800c15a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c15c:	2f78      	cmp	r7, #120	@ 0x78
 800c15e:	4691      	mov	r9, r2
 800c160:	4680      	mov	r8, r0
 800c162:	460c      	mov	r4, r1
 800c164:	469a      	mov	sl, r3
 800c166:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c16a:	d807      	bhi.n	800c17c <_printf_i+0x28>
 800c16c:	2f62      	cmp	r7, #98	@ 0x62
 800c16e:	d80a      	bhi.n	800c186 <_printf_i+0x32>
 800c170:	2f00      	cmp	r7, #0
 800c172:	f000 80d2 	beq.w	800c31a <_printf_i+0x1c6>
 800c176:	2f58      	cmp	r7, #88	@ 0x58
 800c178:	f000 80b9 	beq.w	800c2ee <_printf_i+0x19a>
 800c17c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c180:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c184:	e03a      	b.n	800c1fc <_printf_i+0xa8>
 800c186:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c18a:	2b15      	cmp	r3, #21
 800c18c:	d8f6      	bhi.n	800c17c <_printf_i+0x28>
 800c18e:	a101      	add	r1, pc, #4	@ (adr r1, 800c194 <_printf_i+0x40>)
 800c190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c194:	0800c1ed 	.word	0x0800c1ed
 800c198:	0800c201 	.word	0x0800c201
 800c19c:	0800c17d 	.word	0x0800c17d
 800c1a0:	0800c17d 	.word	0x0800c17d
 800c1a4:	0800c17d 	.word	0x0800c17d
 800c1a8:	0800c17d 	.word	0x0800c17d
 800c1ac:	0800c201 	.word	0x0800c201
 800c1b0:	0800c17d 	.word	0x0800c17d
 800c1b4:	0800c17d 	.word	0x0800c17d
 800c1b8:	0800c17d 	.word	0x0800c17d
 800c1bc:	0800c17d 	.word	0x0800c17d
 800c1c0:	0800c301 	.word	0x0800c301
 800c1c4:	0800c22b 	.word	0x0800c22b
 800c1c8:	0800c2bb 	.word	0x0800c2bb
 800c1cc:	0800c17d 	.word	0x0800c17d
 800c1d0:	0800c17d 	.word	0x0800c17d
 800c1d4:	0800c323 	.word	0x0800c323
 800c1d8:	0800c17d 	.word	0x0800c17d
 800c1dc:	0800c22b 	.word	0x0800c22b
 800c1e0:	0800c17d 	.word	0x0800c17d
 800c1e4:	0800c17d 	.word	0x0800c17d
 800c1e8:	0800c2c3 	.word	0x0800c2c3
 800c1ec:	6833      	ldr	r3, [r6, #0]
 800c1ee:	1d1a      	adds	r2, r3, #4
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	6032      	str	r2, [r6, #0]
 800c1f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e09d      	b.n	800c33c <_printf_i+0x1e8>
 800c200:	6833      	ldr	r3, [r6, #0]
 800c202:	6820      	ldr	r0, [r4, #0]
 800c204:	1d19      	adds	r1, r3, #4
 800c206:	6031      	str	r1, [r6, #0]
 800c208:	0606      	lsls	r6, r0, #24
 800c20a:	d501      	bpl.n	800c210 <_printf_i+0xbc>
 800c20c:	681d      	ldr	r5, [r3, #0]
 800c20e:	e003      	b.n	800c218 <_printf_i+0xc4>
 800c210:	0645      	lsls	r5, r0, #25
 800c212:	d5fb      	bpl.n	800c20c <_printf_i+0xb8>
 800c214:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c218:	2d00      	cmp	r5, #0
 800c21a:	da03      	bge.n	800c224 <_printf_i+0xd0>
 800c21c:	232d      	movs	r3, #45	@ 0x2d
 800c21e:	426d      	negs	r5, r5
 800c220:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c224:	4859      	ldr	r0, [pc, #356]	@ (800c38c <_printf_i+0x238>)
 800c226:	230a      	movs	r3, #10
 800c228:	e011      	b.n	800c24e <_printf_i+0xfa>
 800c22a:	6821      	ldr	r1, [r4, #0]
 800c22c:	6833      	ldr	r3, [r6, #0]
 800c22e:	0608      	lsls	r0, r1, #24
 800c230:	f853 5b04 	ldr.w	r5, [r3], #4
 800c234:	d402      	bmi.n	800c23c <_printf_i+0xe8>
 800c236:	0649      	lsls	r1, r1, #25
 800c238:	bf48      	it	mi
 800c23a:	b2ad      	uxthmi	r5, r5
 800c23c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c23e:	4853      	ldr	r0, [pc, #332]	@ (800c38c <_printf_i+0x238>)
 800c240:	6033      	str	r3, [r6, #0]
 800c242:	bf14      	ite	ne
 800c244:	230a      	movne	r3, #10
 800c246:	2308      	moveq	r3, #8
 800c248:	2100      	movs	r1, #0
 800c24a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c24e:	6866      	ldr	r6, [r4, #4]
 800c250:	60a6      	str	r6, [r4, #8]
 800c252:	2e00      	cmp	r6, #0
 800c254:	bfa2      	ittt	ge
 800c256:	6821      	ldrge	r1, [r4, #0]
 800c258:	f021 0104 	bicge.w	r1, r1, #4
 800c25c:	6021      	strge	r1, [r4, #0]
 800c25e:	b90d      	cbnz	r5, 800c264 <_printf_i+0x110>
 800c260:	2e00      	cmp	r6, #0
 800c262:	d04b      	beq.n	800c2fc <_printf_i+0x1a8>
 800c264:	4616      	mov	r6, r2
 800c266:	fbb5 f1f3 	udiv	r1, r5, r3
 800c26a:	fb03 5711 	mls	r7, r3, r1, r5
 800c26e:	5dc7      	ldrb	r7, [r0, r7]
 800c270:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c274:	462f      	mov	r7, r5
 800c276:	42bb      	cmp	r3, r7
 800c278:	460d      	mov	r5, r1
 800c27a:	d9f4      	bls.n	800c266 <_printf_i+0x112>
 800c27c:	2b08      	cmp	r3, #8
 800c27e:	d10b      	bne.n	800c298 <_printf_i+0x144>
 800c280:	6823      	ldr	r3, [r4, #0]
 800c282:	07df      	lsls	r7, r3, #31
 800c284:	d508      	bpl.n	800c298 <_printf_i+0x144>
 800c286:	6923      	ldr	r3, [r4, #16]
 800c288:	6861      	ldr	r1, [r4, #4]
 800c28a:	4299      	cmp	r1, r3
 800c28c:	bfde      	ittt	le
 800c28e:	2330      	movle	r3, #48	@ 0x30
 800c290:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c294:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c298:	1b92      	subs	r2, r2, r6
 800c29a:	6122      	str	r2, [r4, #16]
 800c29c:	f8cd a000 	str.w	sl, [sp]
 800c2a0:	464b      	mov	r3, r9
 800c2a2:	aa03      	add	r2, sp, #12
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	4640      	mov	r0, r8
 800c2a8:	f7ff fee6 	bl	800c078 <_printf_common>
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	d14a      	bne.n	800c346 <_printf_i+0x1f2>
 800c2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b4:	b004      	add	sp, #16
 800c2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ba:	6823      	ldr	r3, [r4, #0]
 800c2bc:	f043 0320 	orr.w	r3, r3, #32
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	4833      	ldr	r0, [pc, #204]	@ (800c390 <_printf_i+0x23c>)
 800c2c4:	2778      	movs	r7, #120	@ 0x78
 800c2c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c2ca:	6823      	ldr	r3, [r4, #0]
 800c2cc:	6831      	ldr	r1, [r6, #0]
 800c2ce:	061f      	lsls	r7, r3, #24
 800c2d0:	f851 5b04 	ldr.w	r5, [r1], #4
 800c2d4:	d402      	bmi.n	800c2dc <_printf_i+0x188>
 800c2d6:	065f      	lsls	r7, r3, #25
 800c2d8:	bf48      	it	mi
 800c2da:	b2ad      	uxthmi	r5, r5
 800c2dc:	6031      	str	r1, [r6, #0]
 800c2de:	07d9      	lsls	r1, r3, #31
 800c2e0:	bf44      	itt	mi
 800c2e2:	f043 0320 	orrmi.w	r3, r3, #32
 800c2e6:	6023      	strmi	r3, [r4, #0]
 800c2e8:	b11d      	cbz	r5, 800c2f2 <_printf_i+0x19e>
 800c2ea:	2310      	movs	r3, #16
 800c2ec:	e7ac      	b.n	800c248 <_printf_i+0xf4>
 800c2ee:	4827      	ldr	r0, [pc, #156]	@ (800c38c <_printf_i+0x238>)
 800c2f0:	e7e9      	b.n	800c2c6 <_printf_i+0x172>
 800c2f2:	6823      	ldr	r3, [r4, #0]
 800c2f4:	f023 0320 	bic.w	r3, r3, #32
 800c2f8:	6023      	str	r3, [r4, #0]
 800c2fa:	e7f6      	b.n	800c2ea <_printf_i+0x196>
 800c2fc:	4616      	mov	r6, r2
 800c2fe:	e7bd      	b.n	800c27c <_printf_i+0x128>
 800c300:	6833      	ldr	r3, [r6, #0]
 800c302:	6825      	ldr	r5, [r4, #0]
 800c304:	6961      	ldr	r1, [r4, #20]
 800c306:	1d18      	adds	r0, r3, #4
 800c308:	6030      	str	r0, [r6, #0]
 800c30a:	062e      	lsls	r6, r5, #24
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	d501      	bpl.n	800c314 <_printf_i+0x1c0>
 800c310:	6019      	str	r1, [r3, #0]
 800c312:	e002      	b.n	800c31a <_printf_i+0x1c6>
 800c314:	0668      	lsls	r0, r5, #25
 800c316:	d5fb      	bpl.n	800c310 <_printf_i+0x1bc>
 800c318:	8019      	strh	r1, [r3, #0]
 800c31a:	2300      	movs	r3, #0
 800c31c:	6123      	str	r3, [r4, #16]
 800c31e:	4616      	mov	r6, r2
 800c320:	e7bc      	b.n	800c29c <_printf_i+0x148>
 800c322:	6833      	ldr	r3, [r6, #0]
 800c324:	1d1a      	adds	r2, r3, #4
 800c326:	6032      	str	r2, [r6, #0]
 800c328:	681e      	ldr	r6, [r3, #0]
 800c32a:	6862      	ldr	r2, [r4, #4]
 800c32c:	2100      	movs	r1, #0
 800c32e:	4630      	mov	r0, r6
 800c330:	f7f3 ff56 	bl	80001e0 <memchr>
 800c334:	b108      	cbz	r0, 800c33a <_printf_i+0x1e6>
 800c336:	1b80      	subs	r0, r0, r6
 800c338:	6060      	str	r0, [r4, #4]
 800c33a:	6863      	ldr	r3, [r4, #4]
 800c33c:	6123      	str	r3, [r4, #16]
 800c33e:	2300      	movs	r3, #0
 800c340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c344:	e7aa      	b.n	800c29c <_printf_i+0x148>
 800c346:	6923      	ldr	r3, [r4, #16]
 800c348:	4632      	mov	r2, r6
 800c34a:	4649      	mov	r1, r9
 800c34c:	4640      	mov	r0, r8
 800c34e:	47d0      	blx	sl
 800c350:	3001      	adds	r0, #1
 800c352:	d0ad      	beq.n	800c2b0 <_printf_i+0x15c>
 800c354:	6823      	ldr	r3, [r4, #0]
 800c356:	079b      	lsls	r3, r3, #30
 800c358:	d413      	bmi.n	800c382 <_printf_i+0x22e>
 800c35a:	68e0      	ldr	r0, [r4, #12]
 800c35c:	9b03      	ldr	r3, [sp, #12]
 800c35e:	4298      	cmp	r0, r3
 800c360:	bfb8      	it	lt
 800c362:	4618      	movlt	r0, r3
 800c364:	e7a6      	b.n	800c2b4 <_printf_i+0x160>
 800c366:	2301      	movs	r3, #1
 800c368:	4632      	mov	r2, r6
 800c36a:	4649      	mov	r1, r9
 800c36c:	4640      	mov	r0, r8
 800c36e:	47d0      	blx	sl
 800c370:	3001      	adds	r0, #1
 800c372:	d09d      	beq.n	800c2b0 <_printf_i+0x15c>
 800c374:	3501      	adds	r5, #1
 800c376:	68e3      	ldr	r3, [r4, #12]
 800c378:	9903      	ldr	r1, [sp, #12]
 800c37a:	1a5b      	subs	r3, r3, r1
 800c37c:	42ab      	cmp	r3, r5
 800c37e:	dcf2      	bgt.n	800c366 <_printf_i+0x212>
 800c380:	e7eb      	b.n	800c35a <_printf_i+0x206>
 800c382:	2500      	movs	r5, #0
 800c384:	f104 0619 	add.w	r6, r4, #25
 800c388:	e7f5      	b.n	800c376 <_printf_i+0x222>
 800c38a:	bf00      	nop
 800c38c:	0800c5cd 	.word	0x0800c5cd
 800c390:	0800c5de 	.word	0x0800c5de

0800c394 <memmove>:
 800c394:	4288      	cmp	r0, r1
 800c396:	b510      	push	{r4, lr}
 800c398:	eb01 0402 	add.w	r4, r1, r2
 800c39c:	d902      	bls.n	800c3a4 <memmove+0x10>
 800c39e:	4284      	cmp	r4, r0
 800c3a0:	4623      	mov	r3, r4
 800c3a2:	d807      	bhi.n	800c3b4 <memmove+0x20>
 800c3a4:	1e43      	subs	r3, r0, #1
 800c3a6:	42a1      	cmp	r1, r4
 800c3a8:	d008      	beq.n	800c3bc <memmove+0x28>
 800c3aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3b2:	e7f8      	b.n	800c3a6 <memmove+0x12>
 800c3b4:	4402      	add	r2, r0
 800c3b6:	4601      	mov	r1, r0
 800c3b8:	428a      	cmp	r2, r1
 800c3ba:	d100      	bne.n	800c3be <memmove+0x2a>
 800c3bc:	bd10      	pop	{r4, pc}
 800c3be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3c6:	e7f7      	b.n	800c3b8 <memmove+0x24>

0800c3c8 <_sbrk_r>:
 800c3c8:	b538      	push	{r3, r4, r5, lr}
 800c3ca:	4d06      	ldr	r5, [pc, #24]	@ (800c3e4 <_sbrk_r+0x1c>)
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	4608      	mov	r0, r1
 800c3d2:	602b      	str	r3, [r5, #0]
 800c3d4:	f7f7 feac 	bl	8004130 <_sbrk>
 800c3d8:	1c43      	adds	r3, r0, #1
 800c3da:	d102      	bne.n	800c3e2 <_sbrk_r+0x1a>
 800c3dc:	682b      	ldr	r3, [r5, #0]
 800c3de:	b103      	cbz	r3, 800c3e2 <_sbrk_r+0x1a>
 800c3e0:	6023      	str	r3, [r4, #0]
 800c3e2:	bd38      	pop	{r3, r4, r5, pc}
 800c3e4:	20000c04 	.word	0x20000c04

0800c3e8 <memcpy>:
 800c3e8:	440a      	add	r2, r1
 800c3ea:	4291      	cmp	r1, r2
 800c3ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3f0:	d100      	bne.n	800c3f4 <memcpy+0xc>
 800c3f2:	4770      	bx	lr
 800c3f4:	b510      	push	{r4, lr}
 800c3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3fe:	4291      	cmp	r1, r2
 800c400:	d1f9      	bne.n	800c3f6 <memcpy+0xe>
 800c402:	bd10      	pop	{r4, pc}

0800c404 <_realloc_r>:
 800c404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c408:	4680      	mov	r8, r0
 800c40a:	4615      	mov	r5, r2
 800c40c:	460c      	mov	r4, r1
 800c40e:	b921      	cbnz	r1, 800c41a <_realloc_r+0x16>
 800c410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c414:	4611      	mov	r1, r2
 800c416:	f7ff bc4b 	b.w	800bcb0 <_malloc_r>
 800c41a:	b92a      	cbnz	r2, 800c428 <_realloc_r+0x24>
 800c41c:	f7ff fbdc 	bl	800bbd8 <_free_r>
 800c420:	2400      	movs	r4, #0
 800c422:	4620      	mov	r0, r4
 800c424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c428:	f000 f81a 	bl	800c460 <_malloc_usable_size_r>
 800c42c:	4285      	cmp	r5, r0
 800c42e:	4606      	mov	r6, r0
 800c430:	d802      	bhi.n	800c438 <_realloc_r+0x34>
 800c432:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c436:	d8f4      	bhi.n	800c422 <_realloc_r+0x1e>
 800c438:	4629      	mov	r1, r5
 800c43a:	4640      	mov	r0, r8
 800c43c:	f7ff fc38 	bl	800bcb0 <_malloc_r>
 800c440:	4607      	mov	r7, r0
 800c442:	2800      	cmp	r0, #0
 800c444:	d0ec      	beq.n	800c420 <_realloc_r+0x1c>
 800c446:	42b5      	cmp	r5, r6
 800c448:	462a      	mov	r2, r5
 800c44a:	4621      	mov	r1, r4
 800c44c:	bf28      	it	cs
 800c44e:	4632      	movcs	r2, r6
 800c450:	f7ff ffca 	bl	800c3e8 <memcpy>
 800c454:	4621      	mov	r1, r4
 800c456:	4640      	mov	r0, r8
 800c458:	f7ff fbbe 	bl	800bbd8 <_free_r>
 800c45c:	463c      	mov	r4, r7
 800c45e:	e7e0      	b.n	800c422 <_realloc_r+0x1e>

0800c460 <_malloc_usable_size_r>:
 800c460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c464:	1f18      	subs	r0, r3, #4
 800c466:	2b00      	cmp	r3, #0
 800c468:	bfbc      	itt	lt
 800c46a:	580b      	ldrlt	r3, [r1, r0]
 800c46c:	18c0      	addlt	r0, r0, r3
 800c46e:	4770      	bx	lr

0800c470 <_init>:
 800c470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c472:	bf00      	nop
 800c474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c476:	bc08      	pop	{r3}
 800c478:	469e      	mov	lr, r3
 800c47a:	4770      	bx	lr

0800c47c <_fini>:
 800c47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c47e:	bf00      	nop
 800c480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c482:	bc08      	pop	{r3}
 800c484:	469e      	mov	lr, r3
 800c486:	4770      	bx	lr
