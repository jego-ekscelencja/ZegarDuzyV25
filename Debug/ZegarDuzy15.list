
ZegarDuzy15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5ec  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800b780  0800b780  0000c780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b86c  0800b86c  0000d03c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b86c  0800b86c  0000c86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b874  0800b874  0000d03c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b874  0800b874  0000c874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b878  0800b878  0000c878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  0800b87c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  2000003c  0800b8b8  0000d03c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  0800b8b8  0000d93c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d03c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b088  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043e4  00000000  00000000  000280f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001760  00000000  00000000  0002c4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001238  00000000  00000000  0002dc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbee  00000000  00000000  0002ee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002062a  00000000  00000000  0004aa5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5218  00000000  00000000  0006b088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001102a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061e8  00000000  00000000  001102e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  001164cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000003c 	.word	0x2000003c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800b768 	.word	0x0800b768

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000040 	.word	0x20000040
 80001d0:	0800b768 	.word	0x0800b768

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004d6:	4b21      	ldr	r3, [pc, #132]	@ (800055c <MX_ADC1_Init+0x98>)
 80004d8:	4a21      	ldr	r2, [pc, #132]	@ (8000560 <MX_ADC1_Init+0x9c>)
 80004da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004dc:	4b1f      	ldr	r3, [pc, #124]	@ (800055c <MX_ADC1_Init+0x98>)
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e2:	4b1e      	ldr	r3, [pc, #120]	@ (800055c <MX_ADC1_Init+0x98>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004e8:	4b1c      	ldr	r3, [pc, #112]	@ (800055c <MX_ADC1_Init+0x98>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ee:	4b1b      	ldr	r3, [pc, #108]	@ (800055c <MX_ADC1_Init+0x98>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f4:	4b19      	ldr	r3, [pc, #100]	@ (800055c <MX_ADC1_Init+0x98>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fc:	4b17      	ldr	r3, [pc, #92]	@ (800055c <MX_ADC1_Init+0x98>)
 80004fe:	2200      	movs	r2, #0
 8000500:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000502:	4b16      	ldr	r3, [pc, #88]	@ (800055c <MX_ADC1_Init+0x98>)
 8000504:	4a17      	ldr	r2, [pc, #92]	@ (8000564 <MX_ADC1_Init+0xa0>)
 8000506:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000508:	4b14      	ldr	r3, [pc, #80]	@ (800055c <MX_ADC1_Init+0x98>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800050e:	4b13      	ldr	r3, [pc, #76]	@ (800055c <MX_ADC1_Init+0x98>)
 8000510:	2201      	movs	r2, #1
 8000512:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000514:	4b11      	ldr	r3, [pc, #68]	@ (800055c <MX_ADC1_Init+0x98>)
 8000516:	2200      	movs	r2, #0
 8000518:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051c:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <MX_ADC1_Init+0x98>)
 800051e:	2201      	movs	r2, #1
 8000520:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000522:	480e      	ldr	r0, [pc, #56]	@ (800055c <MX_ADC1_Init+0x98>)
 8000524:	f003 ffc0 	bl	80044a8 <HAL_ADC_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800052e:	f002 f997 	bl	8002860 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000532:	2303      	movs	r3, #3
 8000534:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053e:	463b      	mov	r3, r7
 8000540:	4619      	mov	r1, r3
 8000542:	4806      	ldr	r0, [pc, #24]	@ (800055c <MX_ADC1_Init+0x98>)
 8000544:	f004 f8a8 	bl	8004698 <HAL_ADC_ConfigChannel>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800054e:	f002 f987 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000058 	.word	0x20000058
 8000560:	40012000 	.word	0x40012000
 8000564:	0f000001 	.word	0x0f000001

08000568 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	@ 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a17      	ldr	r2, [pc, #92]	@ (80005e4 <HAL_ADC_MspInit+0x7c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d127      	bne.n	80005da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 8000590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000592:	4a15      	ldr	r2, [pc, #84]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 8000594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000598:	6453      	str	r3, [r2, #68]	@ 0x44
 800059a:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 800059c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800059e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a0e      	ldr	r2, [pc, #56]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005c2:	2308      	movs	r3, #8
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c6:	2303      	movs	r3, #3
 80005c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	@ (80005ec <HAL_ADC_MspInit+0x84>)
 80005d6:	f004 ff3b 	bl	8005450 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005da:	bf00      	nop
 80005dc:	3728      	adds	r7, #40	@ 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40012000 	.word	0x40012000
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020000 	.word	0x40020000

080005f0 <Button_RegisterPressCallback>:
		0, 0, 0, false, 0, 0, false, NULL, NULL, NULL, NULL, NULL } //,
		//{BUTTON2_PORT, BUTTON2_PIN, BUTTON_RELEASED, 0, 0, 0, false, 0, 0, false, NULL, NULL, NULL, NULL, NULL}
};

// Implementacja funkcji rejestrujących callbacky
void Button_RegisterPressCallback(uint8_t buttonIndex, ButtonCallback cb) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d109      	bne.n	8000616 <Button_RegisterPressCallback+0x26>
		buttons[buttonIndex].onPress = cb;
 8000602:	79fa      	ldrb	r2, [r7, #7]
 8000604:	4907      	ldr	r1, [pc, #28]	@ (8000624 <Button_RegisterPressCallback+0x34>)
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	440b      	add	r3, r1
 8000610:	331c      	adds	r3, #28
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	601a      	str	r2, [r3, #0]
	}
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000000 	.word	0x20000000

08000628 <Button_RegisterHoldCallback>:
	if (buttonIndex < NUM_BUTTONS) {
		buttons[buttonIndex].onRelease = cb;
	}
}

void Button_RegisterHoldCallback(uint8_t buttonIndex, ButtonCallback cb) {
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d109      	bne.n	800064e <Button_RegisterHoldCallback+0x26>
		buttons[buttonIndex].onHold = cb;
 800063a:	79fa      	ldrb	r2, [r7, #7]
 800063c:	4907      	ldr	r1, [pc, #28]	@ (800065c <Button_RegisterHoldCallback+0x34>)
 800063e:	4613      	mov	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4413      	add	r3, r2
 8000644:	011b      	lsls	r3, r3, #4
 8000646:	440b      	add	r3, r1
 8000648:	3324      	adds	r3, #36	@ 0x24
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	601a      	str	r2, [r3, #0]
	}
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000000 	.word	0x20000000

08000660 <Button_RegisterDoubleClickCallback>:
	if (buttonIndex < NUM_BUTTONS) {
		buttons[buttonIndex].onRepeat = cb;
	}
}

void Button_RegisterDoubleClickCallback(uint8_t buttonIndex, ButtonCallback cb) {
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d109      	bne.n	8000686 <Button_RegisterDoubleClickCallback+0x26>
		buttons[buttonIndex].onDoubleClick = cb;
 8000672:	79fa      	ldrb	r2, [r7, #7]
 8000674:	4907      	ldr	r1, [pc, #28]	@ (8000694 <Button_RegisterDoubleClickCallback+0x34>)
 8000676:	4613      	mov	r3, r2
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	4413      	add	r3, r2
 800067c:	011b      	lsls	r3, r3, #4
 800067e:	440b      	add	r3, r1
 8000680:	332c      	adds	r3, #44	@ 0x2c
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	601a      	str	r2, [r3, #0]
	}
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000000 	.word	0x20000000

08000698 <Button_Process>:

// Logika w przerwaniu timera
extern volatile uint32_t systemTicks;  // Globalny licznik taktów czasu

void Button_Process(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++) {
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	e0d3      	b.n	800084c <Button_Process+0x1b4>
		Button_t *btn = &buttons[i];
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	4613      	mov	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	4413      	add	r3, r2
 80006ac:	011b      	lsls	r3, r3, #4
 80006ae:	4a6c      	ldr	r2, [pc, #432]	@ (8000860 <Button_Process+0x1c8>)
 80006b0:	4413      	add	r3, r2
 80006b2:	60bb      	str	r3, [r7, #8]

		// Odczytaj aktualny stan przycisku
		bool rawState =
				(HAL_GPIO_ReadPin(btn->port, btn->pin) == GPIO_PIN_RESET);
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	889b      	ldrh	r3, [r3, #4]
 80006bc:	4619      	mov	r1, r3
 80006be:	4610      	mov	r0, r2
 80006c0:	f005 f84a 	bl	8005758 <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
		bool rawState =
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	bf0c      	ite	eq
 80006ca:	2301      	moveq	r3, #1
 80006cc:	2300      	movne	r3, #0
 80006ce:	71fb      	strb	r3, [r7, #7]

		// Debounce
		if (rawState != (btn->state == BUTTON_PRESSED)) {
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	7992      	ldrb	r2, [r2, #6]
 80006d6:	2a01      	cmp	r2, #1
 80006d8:	bf0c      	ite	eq
 80006da:	2201      	moveq	r2, #1
 80006dc:	2200      	movne	r2, #0
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d056      	beq.n	8000792 <Button_Process+0xfa>
			btn->debounceCounter++;
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	79db      	ldrb	r3, [r3, #7]
 80006e8:	3301      	adds	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	71da      	strb	r2, [r3, #7]
			if (btn->debounceCounter >= DEBOUNCE_TICKS) {
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	79db      	ldrb	r3, [r3, #7]
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	d94f      	bls.n	8000798 <Button_Process+0x100>
				btn->debounceCounter = 0;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	2200      	movs	r2, #0
 80006fc:	71da      	strb	r2, [r3, #7]
				if (rawState) {
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d00a      	beq.n	800071a <Button_Process+0x82>
					// Naciśnięcie
					btn->state = BUTTON_PRESSED;
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	2201      	movs	r2, #1
 8000708:	719a      	strb	r2, [r3, #6]
					btn->pressTime = systemTicks;
 800070a:	4b56      	ldr	r3, [pc, #344]	@ (8000864 <Button_Process+0x1cc>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	609a      	str	r2, [r3, #8]
					btn->holdTriggered = false;
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	2200      	movs	r2, #0
 8000716:	741a      	strb	r2, [r3, #16]
 8000718:	e03e      	b.n	8000798 <Button_Process+0x100>
				} else {
					// Puszczenie
					btn->state = BUTTON_RELEASED;
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	2200      	movs	r2, #0
 800071e:	719a      	strb	r2, [r3, #6]

					// Obsługa kliknięć
					if (btn->waitingForDoubleClick) {
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	7e1b      	ldrb	r3, [r3, #24]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d011      	beq.n	800074c <Button_Process+0xb4>
						if ((systemTicks - btn->lastClickTime)
 8000728:	4b4e      	ldr	r3, [pc, #312]	@ (8000864 <Button_Process+0x1cc>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	2b1e      	cmp	r3, #30
 8000734:	d806      	bhi.n	8000744 <Button_Process+0xac>
								<= DOUBLE_CLICK_THRESHOLD) {
							btn->clickCount++;
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	7c5b      	ldrb	r3, [r3, #17]
 800073a:	3301      	adds	r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	745a      	strb	r2, [r3, #17]
 8000742:	e00d      	b.n	8000760 <Button_Process+0xc8>
						} else {
							// Minął czas na dwuklik
							btn->clickCount = 1;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	2201      	movs	r2, #1
 8000748:	745a      	strb	r2, [r3, #17]
 800074a:	e009      	b.n	8000760 <Button_Process+0xc8>
						}
					} else {
						btn->clickCount = 1;
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	2201      	movs	r2, #1
 8000750:	745a      	strb	r2, [r3, #17]
						btn->waitingForDoubleClick = true;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	2201      	movs	r2, #1
 8000756:	761a      	strb	r2, [r3, #24]
						btn->lastClickTime = systemTicks;
 8000758:	4b42      	ldr	r3, [pc, #264]	@ (8000864 <Button_Process+0x1cc>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	615a      	str	r2, [r3, #20]
					}

					if (btn->clickCount == 2) {
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	7c5b      	ldrb	r3, [r3, #17]
 8000764:	2b02      	cmp	r3, #2
 8000766:	d10c      	bne.n	8000782 <Button_Process+0xea>
						// Dwuklik
						btn->waitingForDoubleClick = false;
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	2200      	movs	r2, #0
 800076c:	761a      	strb	r2, [r3, #24]
						btn->clickCount = 0;
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	2200      	movs	r2, #0
 8000772:	745a      	strb	r2, [r3, #17]
						if (btn->onDoubleClick)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <Button_Process+0xea>
							btn->onDoubleClick();
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000780:	4798      	blx	r3
					}

					// Callback onRelease
					if (btn->onRelease)
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	6a1b      	ldr	r3, [r3, #32]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d006      	beq.n	8000798 <Button_Process+0x100>
						btn->onRelease();
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	6a1b      	ldr	r3, [r3, #32]
 800078e:	4798      	blx	r3
 8000790:	e002      	b.n	8000798 <Button_Process+0x100>
				}
			}
		} else {
			btn->debounceCounter = 0;
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	2200      	movs	r2, #0
 8000796:	71da      	strb	r2, [r3, #7]
		}

		// Obsługa timeoutu dwukliku
		if (btn->waitingForDoubleClick
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	7e1b      	ldrb	r3, [r3, #24]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d017      	beq.n	80007d0 <Button_Process+0x138>
				&& ((systemTicks - btn->lastClickTime) > DOUBLE_CLICK_THRESHOLD)) {
 80007a0:	4b30      	ldr	r3, [pc, #192]	@ (8000864 <Button_Process+0x1cc>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	2b1e      	cmp	r3, #30
 80007ac:	d910      	bls.n	80007d0 <Button_Process+0x138>
			if (btn->clickCount == 1) {
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	7c5b      	ldrb	r3, [r3, #17]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d106      	bne.n	80007c4 <Button_Process+0x12c>
				// Pojedynczy klik
				if (btn->onPress)
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <Button_Process+0x12c>
					btn->onPress();
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	4798      	blx	r3
			}
			btn->waitingForDoubleClick = false;
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	2200      	movs	r2, #0
 80007c8:	761a      	strb	r2, [r3, #24]
			btn->clickCount = 0;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	2200      	movs	r2, #0
 80007ce:	745a      	strb	r2, [r3, #17]
		}

		// Obsługa hold i repeat
		if (btn->state == BUTTON_PRESSED) {
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	799b      	ldrb	r3, [r3, #6]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d136      	bne.n	8000846 <Button_Process+0x1ae>
			uint32_t elapsed = systemTicks - btn->pressTime;
 80007d8:	4b22      	ldr	r3, [pc, #136]	@ (8000864 <Button_Process+0x1cc>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	603b      	str	r3, [r7, #0]
			if (!btn->holdTriggered && (elapsed >= HOLD_THRESHOLD)) {
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	7c1b      	ldrb	r3, [r3, #16]
 80007e8:	f083 0301 	eor.w	r3, r3, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d012      	beq.n	8000818 <Button_Process+0x180>
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	2b63      	cmp	r3, #99	@ 0x63
 80007f6:	d90f      	bls.n	8000818 <Button_Process+0x180>
				btn->holdTriggered = true;
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	2201      	movs	r2, #1
 80007fc:	741a      	strb	r2, [r3, #16]
				if (btn->onHold)
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <Button_Process+0x174>
					btn->onHold();
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800080a:	4798      	blx	r3
				btn->nextRepeatTime = systemTicks + REPEAT_INTERVAL;
 800080c:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <Button_Process+0x1cc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f103 0214 	add.w	r2, r3, #20
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	60da      	str	r2, [r3, #12]
			}
			if (btn->holdTriggered && (systemTicks >= btn->nextRepeatTime)) {
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	7c1b      	ldrb	r3, [r3, #16]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d012      	beq.n	8000846 <Button_Process+0x1ae>
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	68da      	ldr	r2, [r3, #12]
 8000824:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <Button_Process+0x1cc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	d80c      	bhi.n	8000846 <Button_Process+0x1ae>
				if (btn->onRepeat)
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <Button_Process+0x1a2>
					btn->onRepeat();
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000838:	4798      	blx	r3
				btn->nextRepeatTime += REPEAT_INTERVAL;
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	f103 0214 	add.w	r2, r3, #20
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	60da      	str	r2, [r3, #12]
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	f77f af28 	ble.w	80006a4 <Button_Process+0xc>
			}
		}
	}
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000000 	.word	0x20000000
 8000864:	20000680 	.word	0x20000680

08000868 <HAL_TIM_PeriodElapsedCallback>:

// Funkcja wywoływana w przerwaniu timera
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a23      	ldr	r2, [pc, #140]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d108      	bne.n	800088c <HAL_TIM_PeriodElapsedCallback+0x24>

		SHT30_10msHandler();
 800087a:	f002 f8a9 	bl	80029d0 <SHT30_10msHandler>


		systemTicks++;  // Inkrementacja globalnego licznika czasu
 800087e:	4b22      	ldr	r3, [pc, #136]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	4a20      	ldr	r2, [pc, #128]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000886:	6013      	str	r3, [r2, #0]
		SLIDER_Update();
 8000888:	f002 fc48 	bl	800311c <SLIDER_Update>
	}
	if (colon == 1) {
 800088c:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2b01      	cmp	r3, #1
 8000894:	d112      	bne.n	80008bc <HAL_TIM_PeriodElapsedCallback+0x54>
	        if (counter > 0) {
 8000896:	4b1e      	ldr	r3, [pc, #120]	@ (8000910 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d007      	beq.n	80008b0 <HAL_TIM_PeriodElapsedCallback+0x48>
	            counter--; // Odliczanie licznika
 80008a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	3b01      	subs	r3, #1
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	e005      	b.n	80008bc <HAL_TIM_PeriodElapsedCallback+0x54>
	        } else {
	            counter = 50; // Reset licznika na 50
 80008b0:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008b2:	2232      	movs	r2, #50	@ 0x32
 80008b4:	701a      	strb	r2, [r3, #0]
	            colon = 0;    // Ustawienie colon na 0
 80008b6:	4b15      	ldr	r3, [pc, #84]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
	        }
	    }

static volatile uint16_t cnter = 0 ;
		cnter++;
 80008bc:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	3301      	adds	r3, #1
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008c8:	801a      	strh	r2, [r3, #0]
		if  (cnter>400){
 80008ca:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80008d4:	d911      	bls.n	80008fa <HAL_TIM_PeriodElapsedCallback+0x92>
			cnter = 0 ;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008d8:	2200      	movs	r2, #0
 80008da:	801a      	strh	r2, [r3, #0]
			disp_mode++;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80008e8:	701a      	strb	r2, [r3, #0]
			if (disp_mode > 1 )disp_mode = 0;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d902      	bls.n	80008fa <HAL_TIM_PeriodElapsedCallback+0x92>
 80008f4:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
		}
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40000c00 	.word	0x40000c00
 8000908:	20000680 	.word	0x20000680
 800090c:	200000c1 	.word	0x200000c1
 8000910:	200000a0 	.word	0x200000a0
 8000914:	200000a2 	.word	0x200000a2
 8000918:	200006d2 	.word	0x200006d2

0800091c <charToSegment>:
//static Bits192 regValue;         // Przechowuje 192 bity rozbite na 12×16

// Implementacja tablicy segmentMap i funkcji charToSegment.
// (Zwykle segmentMap mamy w Display.h jako static const,
//  ale jeśli wolisz mieć ją w .c, możesz przenieść tutaj.)
uint8_t charToSegment(char c) {
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]

    switch (c) {
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	3b2a      	subs	r3, #42	@ 0x2a
 800092a:	2b50      	cmp	r3, #80	@ 0x50
 800092c:	f200 80dd 	bhi.w	8000aea <charToSegment+0x1ce>
 8000930:	a201      	add	r2, pc, #4	@ (adr r2, 8000938 <charToSegment+0x1c>)
 8000932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000936:	bf00      	nop
 8000938:	08000a8b 	.word	0x08000a8b
 800093c:	08000aeb 	.word	0x08000aeb
 8000940:	08000aeb 	.word	0x08000aeb
 8000944:	08000a87 	.word	0x08000a87
 8000948:	08000aeb 	.word	0x08000aeb
 800094c:	08000aeb 	.word	0x08000aeb
 8000950:	08000a7d 	.word	0x08000a7d
 8000954:	08000a7d 	.word	0x08000a7d
 8000958:	08000a7d 	.word	0x08000a7d
 800095c:	08000a7d 	.word	0x08000a7d
 8000960:	08000a7d 	.word	0x08000a7d
 8000964:	08000a7d 	.word	0x08000a7d
 8000968:	08000a7d 	.word	0x08000a7d
 800096c:	08000a7d 	.word	0x08000a7d
 8000970:	08000a7d 	.word	0x08000a7d
 8000974:	08000a7d 	.word	0x08000a7d
 8000978:	08000aeb 	.word	0x08000aeb
 800097c:	08000aeb 	.word	0x08000aeb
 8000980:	08000aeb 	.word	0x08000aeb
 8000984:	08000aeb 	.word	0x08000aeb
 8000988:	08000aeb 	.word	0x08000aeb
 800098c:	08000aeb 	.word	0x08000aeb
 8000990:	08000aeb 	.word	0x08000aeb
 8000994:	08000aa7 	.word	0x08000aa7
 8000998:	08000adb 	.word	0x08000adb
 800099c:	08000a8f 	.word	0x08000a8f
 80009a0:	08000aeb 	.word	0x08000aeb
 80009a4:	08000abb 	.word	0x08000abb
 80009a8:	08000aa3 	.word	0x08000aa3
 80009ac:	08000aeb 	.word	0x08000aeb
 80009b0:	08000ae3 	.word	0x08000ae3
 80009b4:	08000aeb 	.word	0x08000aeb
 80009b8:	08000ae7 	.word	0x08000ae7
 80009bc:	08000aeb 	.word	0x08000aeb
 80009c0:	08000ad3 	.word	0x08000ad3
 80009c4:	08000aeb 	.word	0x08000aeb
 80009c8:	08000ab3 	.word	0x08000ab3
 80009cc:	08000acb 	.word	0x08000acb
 80009d0:	08000ac3 	.word	0x08000ac3
 80009d4:	08000aeb 	.word	0x08000aeb
 80009d8:	08000a97 	.word	0x08000a97
 80009dc:	08000a9f 	.word	0x08000a9f
 80009e0:	08000aab 	.word	0x08000aab
 80009e4:	08000aaf 	.word	0x08000aaf
 80009e8:	08000aaf 	.word	0x08000aaf
 80009ec:	08000aaf 	.word	0x08000aaf
 80009f0:	08000aeb 	.word	0x08000aeb
 80009f4:	08000aeb 	.word	0x08000aeb
 80009f8:	08000ad7 	.word	0x08000ad7
 80009fc:	08000aeb 	.word	0x08000aeb
 8000a00:	08000aeb 	.word	0x08000aeb
 8000a04:	08000aeb 	.word	0x08000aeb
 8000a08:	08000aeb 	.word	0x08000aeb
 8000a0c:	08000aeb 	.word	0x08000aeb
 8000a10:	08000aeb 	.word	0x08000aeb
 8000a14:	08000aa7 	.word	0x08000aa7
 8000a18:	08000adb 	.word	0x08000adb
 8000a1c:	08000a93 	.word	0x08000a93
 8000a20:	08000abf 	.word	0x08000abf
 8000a24:	08000abb 	.word	0x08000abb
 8000a28:	08000aeb 	.word	0x08000aeb
 8000a2c:	08000aeb 	.word	0x08000aeb
 8000a30:	08000a9b 	.word	0x08000a9b
 8000a34:	08000ab7 	.word	0x08000ab7
 8000a38:	08000ae7 	.word	0x08000ae7
 8000a3c:	08000aeb 	.word	0x08000aeb
 8000a40:	08000aeb 	.word	0x08000aeb
 8000a44:	08000aeb 	.word	0x08000aeb
 8000a48:	08000ab3 	.word	0x08000ab3
 8000a4c:	08000ac7 	.word	0x08000ac7
 8000a50:	08000ac3 	.word	0x08000ac3
 8000a54:	08000aeb 	.word	0x08000aeb
 8000a58:	08000a97 	.word	0x08000a97
 8000a5c:	08000a9f 	.word	0x08000a9f
 8000a60:	08000aab 	.word	0x08000aab
 8000a64:	08000acf 	.word	0x08000acf
 8000a68:	08000acf 	.word	0x08000acf
 8000a6c:	08000acf 	.word	0x08000acf
 8000a70:	08000aeb 	.word	0x08000aeb
 8000a74:	08000adf 	.word	0x08000adf
 8000a78:	08000ad7 	.word	0x08000ad7
    case '0' ... '9':
        return segmentMap[c - '0'];
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	3b30      	subs	r3, #48	@ 0x30
 8000a80:	4a1d      	ldr	r2, [pc, #116]	@ (8000af8 <charToSegment+0x1dc>)
 8000a82:	5cd3      	ldrb	r3, [r2, r3]
 8000a84:	e032      	b.n	8000aec <charToSegment+0x1d0>
    case '-':
        return segmentMap[11];
 8000a86:	2340      	movs	r3, #64	@ 0x40
 8000a88:	e030      	b.n	8000aec <charToSegment+0x1d0>
    case '*':// symbol  stopnia
        return segmentMap[12];
 8000a8a:	2363      	movs	r3, #99	@ 0x63
 8000a8c:	e02e      	b.n	8000aec <charToSegment+0x1d0>
    case 'C':
        return segmentMap[13];
 8000a8e:	2339      	movs	r3, #57	@ 0x39
 8000a90:	e02c      	b.n	8000aec <charToSegment+0x1d0>
    case 'c':
        return segmentMap[29];
 8000a92:	236e      	movs	r3, #110	@ 0x6e
 8000a94:	e02a      	b.n	8000aec <charToSegment+0x1d0>
    case 'r':
    case 'R':
        return segmentMap[14];
 8000a96:	2350      	movs	r3, #80	@ 0x50
 8000a98:	e028      	b.n	8000aec <charToSegment+0x1d0>
    case 'h':
        return segmentMap[15];
 8000a9a:	2374      	movs	r3, #116	@ 0x74
 8000a9c:	e026      	b.n	8000aec <charToSegment+0x1d0>
    case 's':
    case 'S':
        return segmentMap[5];
 8000a9e:	236d      	movs	r3, #109	@ 0x6d
 8000aa0:	e024      	b.n	8000aec <charToSegment+0x1d0>
    case 'F':
        return segmentMap[16];
 8000aa2:	2371      	movs	r3, #113	@ 0x71
 8000aa4:	e022      	b.n	8000aec <charToSegment+0x1d0>
    case 'A':
    case 'a':
        return segmentMap[17];
 8000aa6:	2377      	movs	r3, #119	@ 0x77
 8000aa8:	e020      	b.n	8000aec <charToSegment+0x1d0>
    case 't':
    case 'T':
        return segmentMap[18];
 8000aaa:	2378      	movs	r3, #120	@ 0x78
 8000aac:	e01e      	b.n	8000aec <charToSegment+0x1d0>
    case 'V':
    case 'U':
    case 'W':
        return segmentMap[19];
 8000aae:	233e      	movs	r3, #62	@ 0x3e
 8000ab0:	e01c      	b.n	8000aec <charToSegment+0x1d0>
    case 'n':
    case 'N':
        return segmentMap[20];
 8000ab2:	2354      	movs	r3, #84	@ 0x54
 8000ab4:	e01a      	b.n	8000aec <charToSegment+0x1d0>
    case 'i':
        return segmentMap[21];
 8000ab6:	2310      	movs	r3, #16
 8000ab8:	e018      	b.n	8000aec <charToSegment+0x1d0>
    case 'E':
    case 'e':
        return segmentMap[22];
 8000aba:	2379      	movs	r3, #121	@ 0x79
 8000abc:	e016      	b.n	8000aec <charToSegment+0x1d0>
    case 'd':
        return segmentMap[23];
 8000abe:	235e      	movs	r3, #94	@ 0x5e
 8000ac0:	e014      	b.n	8000aec <charToSegment+0x1d0>
    case 'P':
    case 'p':
        return segmentMap[24];
 8000ac2:	2373      	movs	r3, #115	@ 0x73
 8000ac4:	e012      	b.n	8000aec <charToSegment+0x1d0>
    case 'o':
        return segmentMap[25];
 8000ac6:	235c      	movs	r3, #92	@ 0x5c
 8000ac8:	e010      	b.n	8000aec <charToSegment+0x1d0>
    case 'O':
        return segmentMap[0];
 8000aca:	233f      	movs	r3, #63	@ 0x3f
 8000acc:	e00e      	b.n	8000aec <charToSegment+0x1d0>
    case 'u':
    case 'w':
    case 'v':
        return segmentMap[26];
 8000ace:	231c      	movs	r3, #28
 8000ad0:	e00c      	b.n	8000aec <charToSegment+0x1d0>
    case 'L':
        return segmentMap[27];
 8000ad2:	2338      	movs	r3, #56	@ 0x38
 8000ad4:	e00a      	b.n	8000aec <charToSegment+0x1d0>
    case 'z':
    case 'Z':
        return segmentMap[2];
 8000ad6:	235b      	movs	r3, #91	@ 0x5b
 8000ad8:	e008      	b.n	8000aec <charToSegment+0x1d0>
    case 'b':
    case 'B':
        return segmentMap[28];
 8000ada:	237c      	movs	r3, #124	@ 0x7c
 8000adc:	e006      	b.n	8000aec <charToSegment+0x1d0>
    case 'y':
            return segmentMap[29];
 8000ade:	236e      	movs	r3, #110	@ 0x6e
 8000ae0:	e004      	b.n	8000aec <charToSegment+0x1d0>
    case 'H':
            return segmentMap[30];
 8000ae2:	2376      	movs	r3, #118	@ 0x76
 8000ae4:	e002      	b.n	8000aec <charToSegment+0x1d0>
    case 'j':
    case 'J':
                   return segmentMap[31];
 8000ae6:	231e      	movs	r3, #30
 8000ae8:	e000      	b.n	8000aec <charToSegment+0x1d0>
    default:
        // spacja lub nieobsługiwany znak
        return segmentMap[10];
 8000aea:	2300      	movs	r3, #0
    }
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	0800b7a8 	.word	0x0800b7a8

08000afc <HAL_SPI_TxCpltCallback>:
 * ---------------------------------------------------------------------------
 * Implementacja funkcji obsługujących 192-bitowy rejestr wyświetlaczy
 * ---------------------------------------------------------------------------
 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if(hspi->Instance == SPI1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a09      	ldr	r2, [pc, #36]	@ (8000b30 <HAL_SPI_TxCpltCallback+0x34>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d10c      	bne.n	8000b28 <HAL_SPI_TxCpltCallback+0x2c>
  {
    // Krótki impuls na pin LATCH
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2140      	movs	r1, #64	@ 0x40
 8000b12:	4808      	ldr	r0, [pc, #32]	@ (8000b34 <HAL_SPI_TxCpltCallback+0x38>)
 8000b14:	f004 fe38 	bl	8005788 <HAL_GPIO_WritePin>
    // Ewentualnie opóźnienie
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2140      	movs	r1, #64	@ 0x40
 8000b1c:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <HAL_SPI_TxCpltCallback+0x38>)
 8000b1e:	f004 fe33 	bl	8005788 <HAL_GPIO_WritePin>
    spiTransferInProgress = false;  // Zakończono transmisję
 8000b22:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <HAL_SPI_TxCpltCallback+0x3c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
  }

}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40013000 	.word	0x40013000
 8000b34:	40020000 	.word	0x40020000
 8000b38:	200000a4 	.word	0x200000a4

08000b3c <ClearClockBits>:
  HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 24);
}


void ClearClockBits(MyClockBitFields* clockBits)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  memset(clockBits, 0, sizeof(MyClockBitFields));
 8000b44:	2218      	movs	r2, #24
 8000b46:	2100      	movs	r1, #0
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f00a fdbb 	bl	800b6c4 <memset>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <SetSecondLedSingle>:

void SetSecondLedSingle(MyClockBitFields* clockBits, uint8_t second)
{
 8000b56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b58:	b085      	sub	sp, #20
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 8000b60:	78f9      	ldrb	r1, [r7, #3]
 8000b62:	293b      	cmp	r1, #59	@ 0x3b
 8000b64:	d901      	bls.n	8000b6a <SetSecondLedSingle+0x14>
 8000b66:	213b      	movs	r1, #59	@ 0x3b
 8000b68:	70f9      	strb	r1, [r7, #3]

    clockBits->secondsRing = 0ULL;
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	7008      	strb	r0, [r1, #0]
 8000b70:	2000      	movs	r0, #0
 8000b72:	7048      	strb	r0, [r1, #1]
 8000b74:	2000      	movs	r0, #0
 8000b76:	7088      	strb	r0, [r1, #2]
 8000b78:	2000      	movs	r0, #0
 8000b7a:	70c8      	strb	r0, [r1, #3]
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	7108      	strb	r0, [r1, #4]
 8000b80:	2000      	movs	r0, #0
 8000b82:	7148      	strb	r0, [r1, #5]
 8000b84:	2000      	movs	r0, #0
 8000b86:	7188      	strb	r0, [r1, #6]
 8000b88:	79c8      	ldrb	r0, [r1, #7]
 8000b8a:	f020 000f 	bic.w	r0, r0, #15
 8000b8e:	71c8      	strb	r0, [r1, #7]
    uint64_t mask = (1ULL << second);
 8000b90:	78fe      	ldrb	r6, [r7, #3]
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	f04f 0100 	mov.w	r1, #0
 8000b9a:	f1a6 0e20 	sub.w	lr, r6, #32
 8000b9e:	f1c6 0c20 	rsb	ip, r6, #32
 8000ba2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ba6:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000baa:	ea43 030e 	orr.w	r3, r3, lr
 8000bae:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bb2:	ea43 030c 	orr.w	r3, r3, ip
 8000bb6:	fa00 f206 	lsl.w	r2, r0, r6
 8000bba:	e9c7 2302 	strd	r2, r3, [r7, #8]
    clockBits->secondsRing = mask;
 8000bbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000bc2:	4614      	mov	r4, r2
 8000bc4:	f023 4570 	bic.w	r5, r3, #4026531840	@ 0xf0000000
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	601c      	str	r4, [r3, #0]
 8000bcc:	462a      	mov	r2, r5
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	711a      	strb	r2, [r3, #4]
 8000bd6:	0a2a      	lsrs	r2, r5, #8
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	2100      	movs	r1, #0
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	715a      	strb	r2, [r3, #5]
 8000be0:	0c2a      	lsrs	r2, r5, #16
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	2100      	movs	r1, #0
 8000be6:	430a      	orrs	r2, r1
 8000be8:	719a      	strb	r2, [r3, #6]
 8000bea:	0e2a      	lsrs	r2, r5, #24
 8000bec:	f002 020f 	and.w	r2, r2, #15
 8000bf0:	f002 000f 	and.w	r0, r2, #15
 8000bf4:	79da      	ldrb	r2, [r3, #7]
 8000bf6:	f022 020f 	bic.w	r2, r2, #15
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	71da      	strb	r2, [r3, #7]
}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c0a <SetSecondLedAccumulating>:

void SetSecondLedAccumulating(MyClockBitFields* clockBits, uint8_t second)
{
 8000c0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 8000c16:	78f9      	ldrb	r1, [r7, #3]
 8000c18:	293b      	cmp	r1, #59	@ 0x3b
 8000c1a:	d901      	bls.n	8000c20 <SetSecondLedAccumulating+0x16>
 8000c1c:	213b      	movs	r1, #59	@ 0x3b
 8000c1e:	70f9      	strb	r1, [r7, #3]
    if (second == 0) {
 8000c20:	78f9      	ldrb	r1, [r7, #3]
 8000c22:	2900      	cmp	r1, #0
 8000c24:	d113      	bne.n	8000c4e <SetSecondLedAccumulating+0x44>
        clockBits->secondsRing = 0ULL;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	705a      	strb	r2, [r3, #1]
 8000c30:	2200      	movs	r2, #0
 8000c32:	709a      	strb	r2, [r3, #2]
 8000c34:	2200      	movs	r2, #0
 8000c36:	70da      	strb	r2, [r3, #3]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	711a      	strb	r2, [r3, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	715a      	strb	r2, [r3, #5]
 8000c40:	2200      	movs	r2, #0
 8000c42:	719a      	strb	r2, [r3, #6]
 8000c44:	79da      	ldrb	r2, [r3, #7]
 8000c46:	f022 020f 	bic.w	r2, r2, #15
 8000c4a:	71da      	strb	r2, [r3, #7]
    } else {
        clockBits->secondsRing |= (1ULL << second);
    }
}
 8000c4c:	e048      	b.n	8000ce0 <SetSecondLedAccumulating+0xd6>
        clockBits->secondsRing |= (1ULL << second);
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	f8d1 a000 	ldr.w	sl, [r1]
 8000c54:	7908      	ldrb	r0, [r1, #4]
 8000c56:	794e      	ldrb	r6, [r1, #5]
 8000c58:	0236      	lsls	r6, r6, #8
 8000c5a:	4330      	orrs	r0, r6
 8000c5c:	798e      	ldrb	r6, [r1, #6]
 8000c5e:	0436      	lsls	r6, r6, #16
 8000c60:	4330      	orrs	r0, r6
 8000c62:	79c9      	ldrb	r1, [r1, #7]
 8000c64:	f001 010f 	and.w	r1, r1, #15
 8000c68:	0609      	lsls	r1, r1, #24
 8000c6a:	4301      	orrs	r1, r0
 8000c6c:	468b      	mov	fp, r1
 8000c6e:	78fe      	ldrb	r6, [r7, #3]
 8000c70:	f04f 0001 	mov.w	r0, #1
 8000c74:	f04f 0100 	mov.w	r1, #0
 8000c78:	f1a6 0e20 	sub.w	lr, r6, #32
 8000c7c:	f1c6 0c20 	rsb	ip, r6, #32
 8000c80:	fa01 f306 	lsl.w	r3, r1, r6
 8000c84:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000c88:	ea43 030e 	orr.w	r3, r3, lr
 8000c8c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c90:	ea43 030c 	orr.w	r3, r3, ip
 8000c94:	fa00 f206 	lsl.w	r2, r0, r6
 8000c98:	ea4a 0802 	orr.w	r8, sl, r2
 8000c9c:	ea4b 0903 	orr.w	r9, fp, r3
 8000ca0:	4644      	mov	r4, r8
 8000ca2:	f029 4570 	bic.w	r5, r9, #4026531840	@ 0xf0000000
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	601c      	str	r4, [r3, #0]
 8000caa:	462a      	mov	r2, r5
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	2100      	movs	r1, #0
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	711a      	strb	r2, [r3, #4]
 8000cb4:	0a2a      	lsrs	r2, r5, #8
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	2100      	movs	r1, #0
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	715a      	strb	r2, [r3, #5]
 8000cbe:	0c2a      	lsrs	r2, r5, #16
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	719a      	strb	r2, [r3, #6]
 8000cc8:	0e2a      	lsrs	r2, r5, #24
 8000cca:	f002 020f 	and.w	r2, r2, #15
 8000cce:	f002 000f 	and.w	r0, r2, #15
 8000cd2:	79da      	ldrb	r2, [r3, #7]
 8000cd4:	f022 020f 	bic.w	r2, r2, #15
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4602      	mov	r2, r0
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	71da      	strb	r2, [r3, #7]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000cea <SetSecondLedAccumulating2>:

void SetSecondLedAccumulating2(MyClockBitFields* clockBits, uint8_t second)
{
 8000cea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 8000cf6:	78f9      	ldrb	r1, [r7, #3]
 8000cf8:	293b      	cmp	r1, #59	@ 0x3b
 8000cfa:	d901      	bls.n	8000d00 <SetSecondLedAccumulating2+0x16>
 8000cfc:	213b      	movs	r1, #59	@ 0x3b
 8000cfe:	70f9      	strb	r1, [r7, #3]
    clockBits->secondsRing = 0ULL;
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	2000      	movs	r0, #0
 8000d04:	7008      	strb	r0, [r1, #0]
 8000d06:	2000      	movs	r0, #0
 8000d08:	7048      	strb	r0, [r1, #1]
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	7088      	strb	r0, [r1, #2]
 8000d0e:	2000      	movs	r0, #0
 8000d10:	70c8      	strb	r0, [r1, #3]
 8000d12:	2000      	movs	r0, #0
 8000d14:	7108      	strb	r0, [r1, #4]
 8000d16:	2000      	movs	r0, #0
 8000d18:	7148      	strb	r0, [r1, #5]
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	7188      	strb	r0, [r1, #6]
 8000d1e:	79c8      	ldrb	r0, [r1, #7]
 8000d20:	f020 000f 	bic.w	r0, r0, #15
 8000d24:	71c8      	strb	r0, [r1, #7]
    for (uint8_t i = 0; i <= second; i++) {
 8000d26:	2100      	movs	r1, #0
 8000d28:	73f9      	strb	r1, [r7, #15]
 8000d2a:	e04b      	b.n	8000dc4 <SetSecondLedAccumulating2+0xda>
        clockBits->secondsRing |= (1ULL << i);
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	f8d1 a000 	ldr.w	sl, [r1]
 8000d32:	7908      	ldrb	r0, [r1, #4]
 8000d34:	794e      	ldrb	r6, [r1, #5]
 8000d36:	0236      	lsls	r6, r6, #8
 8000d38:	4330      	orrs	r0, r6
 8000d3a:	798e      	ldrb	r6, [r1, #6]
 8000d3c:	0436      	lsls	r6, r6, #16
 8000d3e:	4330      	orrs	r0, r6
 8000d40:	79c9      	ldrb	r1, [r1, #7]
 8000d42:	f001 010f 	and.w	r1, r1, #15
 8000d46:	0609      	lsls	r1, r1, #24
 8000d48:	4301      	orrs	r1, r0
 8000d4a:	468b      	mov	fp, r1
 8000d4c:	7bfe      	ldrb	r6, [r7, #15]
 8000d4e:	f04f 0001 	mov.w	r0, #1
 8000d52:	f04f 0100 	mov.w	r1, #0
 8000d56:	f1a6 0e20 	sub.w	lr, r6, #32
 8000d5a:	f1c6 0c20 	rsb	ip, r6, #32
 8000d5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d62:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000d66:	ea43 030e 	orr.w	r3, r3, lr
 8000d6a:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d6e:	ea43 030c 	orr.w	r3, r3, ip
 8000d72:	fa00 f206 	lsl.w	r2, r0, r6
 8000d76:	ea4a 0802 	orr.w	r8, sl, r2
 8000d7a:	ea4b 0903 	orr.w	r9, fp, r3
 8000d7e:	4644      	mov	r4, r8
 8000d80:	f029 4570 	bic.w	r5, r9, #4026531840	@ 0xf0000000
 8000d84:	6879      	ldr	r1, [r7, #4]
 8000d86:	600c      	str	r4, [r1, #0]
 8000d88:	4628      	mov	r0, r5
 8000d8a:	b2c0      	uxtb	r0, r0
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	4330      	orrs	r0, r6
 8000d90:	7108      	strb	r0, [r1, #4]
 8000d92:	0a28      	lsrs	r0, r5, #8
 8000d94:	b2c0      	uxtb	r0, r0
 8000d96:	2600      	movs	r6, #0
 8000d98:	4330      	orrs	r0, r6
 8000d9a:	7148      	strb	r0, [r1, #5]
 8000d9c:	0c28      	lsrs	r0, r5, #16
 8000d9e:	b2c0      	uxtb	r0, r0
 8000da0:	2600      	movs	r6, #0
 8000da2:	4330      	orrs	r0, r6
 8000da4:	7188      	strb	r0, [r1, #6]
 8000da6:	0e28      	lsrs	r0, r5, #24
 8000da8:	f000 000f 	and.w	r0, r0, #15
 8000dac:	f000 0c0f 	and.w	ip, r0, #15
 8000db0:	79c8      	ldrb	r0, [r1, #7]
 8000db2:	f020 000f 	bic.w	r0, r0, #15
 8000db6:	4606      	mov	r6, r0
 8000db8:	4660      	mov	r0, ip
 8000dba:	4330      	orrs	r0, r6
 8000dbc:	71c8      	strb	r0, [r1, #7]
    for (uint8_t i = 0; i <= second; i++) {
 8000dbe:	7bf9      	ldrb	r1, [r7, #15]
 8000dc0:	3101      	adds	r1, #1
 8000dc2:	73f9      	strb	r1, [r7, #15]
 8000dc4:	7bf8      	ldrb	r0, [r7, #15]
 8000dc6:	78f9      	ldrb	r1, [r7, #3]
 8000dc8:	4288      	cmp	r0, r1
 8000dca:	d9af      	bls.n	8000d2c <SetSecondLedAccumulating2+0x42>
    }
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000dd8 <SetHourRing>:
    SetDots(clockBits, true, true);
  }
}

void SetHourRing(MyClockBitFields* clockBits, uint8_t hour, bool outerRing, bool innerRing)
{
 8000dd8:	b490      	push	{r4, r7}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	4608      	mov	r0, r1
 8000de2:	4611      	mov	r1, r2
 8000de4:	461a      	mov	r2, r3
 8000de6:	4603      	mov	r3, r0
 8000de8:	70fb      	strb	r3, [r7, #3]
 8000dea:	460b      	mov	r3, r1
 8000dec:	70bb      	strb	r3, [r7, #2]
 8000dee:	4613      	mov	r3, r2
 8000df0:	707b      	strb	r3, [r7, #1]
  uint8_t h12 = hour % 12;
 8000df2:	78fa      	ldrb	r2, [r7, #3]
 8000df4:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea0 <SetHourRing+0xc8>)
 8000df6:	fba3 1302 	umull	r1, r3, r3, r2
 8000dfa:	08d9      	lsrs	r1, r3, #3
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	440b      	add	r3, r1
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	73fb      	strb	r3, [r7, #15]
  if (outerRing)
 8000e08:	78bb      	ldrb	r3, [r7, #2]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d018      	beq.n	8000e40 <SetHourRing+0x68>
    clockBits->hoursRingOuter = (1U << h12);
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	2201      	movs	r2, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f002 010f 	and.w	r1, r2, #15
 8000e22:	010c      	lsls	r4, r1, #4
 8000e24:	79d9      	ldrb	r1, [r3, #7]
 8000e26:	f001 010f 	and.w	r1, r1, #15
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	4621      	mov	r1, r4
 8000e2e:	4301      	orrs	r1, r0
 8000e30:	71d9      	strb	r1, [r3, #7]
 8000e32:	0912      	lsrs	r2, r2, #4
 8000e34:	b292      	uxth	r2, r2
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	2100      	movs	r1, #0
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	721a      	strb	r2, [r3, #8]
 8000e3e:	e006      	b.n	8000e4e <SetHourRing+0x76>
  else
    clockBits->hoursRingOuter = 0;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	79da      	ldrb	r2, [r3, #7]
 8000e44:	f002 020f 	and.w	r2, r2, #15
 8000e48:	71da      	strb	r2, [r3, #7]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	721a      	strb	r2, [r3, #8]

  if (innerRing)
 8000e4e:	787b      	ldrb	r3, [r7, #1]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d019      	beq.n	8000e88 <SetHourRing+0xb0>
    clockBits->hoursRingInner = (1U << h12);
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	2201      	movs	r2, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	b2d1      	uxtb	r1, r2
 8000e66:	2000      	movs	r0, #0
 8000e68:	4301      	orrs	r1, r0
 8000e6a:	7259      	strb	r1, [r3, #9]
 8000e6c:	0a12      	lsrs	r2, r2, #8
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	f002 020f 	and.w	r2, r2, #15
 8000e74:	f002 000f 	and.w	r0, r2, #15
 8000e78:	7a9a      	ldrb	r2, [r3, #10]
 8000e7a:	f022 020f 	bic.w	r2, r2, #15
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4602      	mov	r2, r0
 8000e82:	430a      	orrs	r2, r1
 8000e84:	729a      	strb	r2, [r3, #10]
  else
    clockBits->hoursRingInner = 0;
}
 8000e86:	e006      	b.n	8000e96 <SetHourRing+0xbe>
    clockBits->hoursRingInner = 0;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	725a      	strb	r2, [r3, #9]
 8000e8e:	7a9a      	ldrb	r2, [r3, #10]
 8000e90:	f022 020f 	bic.w	r2, r2, #15
 8000e94:	729a      	strb	r2, [r3, #10]
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc90      	pop	{r4, r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	aaaaaaab 	.word	0xaaaaaaab

08000ea4 <SetTime7Seg_Top>:

/**
 * Ustawia 6 wyświetlaczy 7-seg (top lub bottom) na HH:MM:SS
 */
void SetTime7Seg_Top(MyClockBitFields* clockBits, uint8_t h, uint8_t m, uint8_t s)
{
 8000ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ea8:	b09d      	sub	sp, #116	@ 0x74
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8000eae:	4618      	mov	r0, r3
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

	  // Bufor na segmenty wyświetlacza (6 pozycji)
	    uint8_t backBuffer[6] = {0};
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	663b      	str	r3, [r7, #96]	@ 0x60
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	    // Obsługa godzin
	    if (h < 10) {
 8000ecc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000ed0:	2b09      	cmp	r3, #9
 8000ed2:	d80d      	bhi.n	8000ef0 <SetTime7Seg_Top+0x4c>
	        backBuffer[0] = segmentMap[10]; // Puste dziesiątki godzin
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = charToSegment('0' + h); // Jednostki godzin
 8000eda:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000ede:	3330      	adds	r3, #48	@ 0x30
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fd1a 	bl	800091c <charToSegment>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
 8000eee:	e022      	b.n	8000f36 <SetTime7Seg_Top+0x92>
	    } else {
	        backBuffer[0] = charToSegment('0' + (h / 10)); // Dziesiątki godzin
 8000ef0:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000ef4:	4b87      	ldr	r3, [pc, #540]	@ (8001114 <SetTime7Seg_Top+0x270>)
 8000ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8000efa:	08db      	lsrs	r3, r3, #3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	3330      	adds	r3, #48	@ 0x30
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fd0a 	bl	800091c <charToSegment>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = charToSegment('0' + (h % 10)); // Jednostki godzin
 8000f0e:	f897 105b 	ldrb.w	r1, [r7, #91]	@ 0x5b
 8000f12:	4b80      	ldr	r3, [pc, #512]	@ (8001114 <SetTime7Seg_Top+0x270>)
 8000f14:	fba3 2301 	umull	r2, r3, r3, r1
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	1acb      	subs	r3, r1, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	3330      	adds	r3, #48	@ 0x30
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fcf6 	bl	800091c <charToSegment>
 8000f30:	4603      	mov	r3, r0
 8000f32:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	    }

	    // Obsługa minut
	    backBuffer[2] = charToSegment('0' + (m / 10)); // Dziesiątki minut
 8000f36:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8000f3a:	4b76      	ldr	r3, [pc, #472]	@ (8001114 <SetTime7Seg_Top+0x270>)
 8000f3c:	fba3 2302 	umull	r2, r3, r3, r2
 8000f40:	08db      	lsrs	r3, r3, #3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	3330      	adds	r3, #48	@ 0x30
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fce7 	bl	800091c <charToSegment>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	    backBuffer[3] = charToSegment('0' + (m % 10)); // Jednostki minut
 8000f54:	f897 105a 	ldrb.w	r1, [r7, #90]	@ 0x5a
 8000f58:	4b6e      	ldr	r3, [pc, #440]	@ (8001114 <SetTime7Seg_Top+0x270>)
 8000f5a:	fba3 2301 	umull	r2, r3, r3, r1
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	4613      	mov	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	1acb      	subs	r3, r1, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	3330      	adds	r3, #48	@ 0x30
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fcd3 	bl	800091c <charToSegment>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	    // Obsługa sekund
	    backBuffer[4] = charToSegment('0' + (s / 10)); // Dziesiątki sekund
 8000f7c:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8000f80:	4b64      	ldr	r3, [pc, #400]	@ (8001114 <SetTime7Seg_Top+0x270>)
 8000f82:	fba3 2302 	umull	r2, r3, r3, r2
 8000f86:	08db      	lsrs	r3, r3, #3
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	3330      	adds	r3, #48	@ 0x30
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fcc4 	bl	800091c <charToSegment>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	    backBuffer[5] = charToSegment('0' + (s % 10)); // Jednostki sekund
 8000f9a:	f897 1059 	ldrb.w	r1, [r7, #89]	@ 0x59
 8000f9e:	4b5d      	ldr	r3, [pc, #372]	@ (8001114 <SetTime7Seg_Top+0x270>)
 8000fa0:	fba3 2301 	umull	r2, r3, r3, r1
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	1acb      	subs	r3, r1, r3
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	3330      	adds	r3, #48	@ 0x30
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fcb0 	bl	800091c <charToSegment>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	    // Zbudowanie wartości 48-bitowej na podstawie bufora
	    uint64_t displayVal = 0ULL;
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	f04f 0300 	mov.w	r3, #0
 8000fca:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[5] << 40);
 8000fce:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8000fd8:	657a      	str	r2, [r7, #84]	@ 0x54
 8000fda:	f04f 0000 	mov.w	r0, #0
 8000fde:	f04f 0100 	mov.w	r1, #0
 8000fe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000fe4:	0219      	lsls	r1, r3, #8
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000fec:	ea42 0600 	orr.w	r6, r2, r0
 8000ff0:	62be      	str	r6, [r7, #40]	@ 0x28
 8000ff2:	430b      	orrs	r3, r1
 8000ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ff6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000ffa:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[4] << 32);
 8000ffe:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2200      	movs	r2, #0
 8001006:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001008:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	f04f 0100 	mov.w	r1, #0
 8001012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001014:	0019      	movs	r1, r3
 8001016:	2000      	movs	r0, #0
 8001018:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800101c:	ea42 0600 	orr.w	r6, r2, r0
 8001020:	623e      	str	r6, [r7, #32]
 8001022:	430b      	orrs	r3, r1
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
 8001026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800102a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[0] << 24);
 800102e:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2200      	movs	r2, #0
 8001036:	643b      	str	r3, [r7, #64]	@ 0x40
 8001038:	647a      	str	r2, [r7, #68]	@ 0x44
 800103a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800103e:	460b      	mov	r3, r1
 8001040:	0a1d      	lsrs	r5, r3, #8
 8001042:	460b      	mov	r3, r1
 8001044:	061c      	lsls	r4, r3, #24
 8001046:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800104a:	ea42 0104 	orr.w	r1, r2, r4
 800104e:	61b9      	str	r1, [r7, #24]
 8001050:	432b      	orrs	r3, r5
 8001052:	61fb      	str	r3, [r7, #28]
 8001054:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001058:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[1] << 16);
 800105c:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2200      	movs	r2, #0
 8001064:	4698      	mov	r8, r3
 8001066:	4691      	mov	r9, r2
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	f04f 0100 	mov.w	r1, #0
 8001070:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8001074:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8001078:	ea4f 4008 	mov.w	r0, r8, lsl #16
 800107c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001080:	ea42 0400 	orr.w	r4, r2, r0
 8001084:	613c      	str	r4, [r7, #16]
 8001086:	430b      	orrs	r3, r1
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800108e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[2] << 8);
 8001092:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2200      	movs	r2, #0
 800109a:	469a      	mov	sl, r3
 800109c:	4693      	mov	fp, r2
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80010aa:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80010ae:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80010b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80010b6:	ea40 0402 	orr.w	r4, r0, r2
 80010ba:	60bc      	str	r4, [r7, #8]
 80010bc:	430b      	orrs	r3, r1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80010c4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[3] << 0);
 80010c8:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2200      	movs	r2, #0
 80010d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80010d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80010d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80010d8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80010dc:	4621      	mov	r1, r4
 80010de:	4311      	orrs	r1, r2
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	4629      	mov	r1, r5
 80010e4:	4319      	orrs	r1, r3
 80010e6:	6079      	str	r1, [r7, #4]
 80010e8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80010ec:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68

	    clockBits->topDisplay = displayVal;
 80010f0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80010f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80010fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001100:	4602      	mov	r2, r0
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	460a      	mov	r2, r1
 8001106:	821a      	strh	r2, [r3, #16]
}
 8001108:	bf00      	nop
 800110a:	3774      	adds	r7, #116	@ 0x74
 800110c:	46bd      	mov	sp, r7
 800110e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001112:	bf00      	nop
 8001114:	cccccccd 	.word	0xcccccccd

08001118 <SetTime7Seg_Void>:



void SetTime7Seg_Void(MyClockBitFields* clockBits)
{
 8001118:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800111c:	b09c      	sub	sp, #112	@ 0x70
 800111e:	af00      	add	r7, sp, #0
 8001120:	65f8      	str	r0, [r7, #92]	@ 0x5c

	  // Bufor na segmenty wyświetlacza (6 pozycji)
	    uint8_t backBuffer[6] = {0};
 8001122:	2300      	movs	r3, #0
 8001124:	663b      	str	r3, [r7, #96]	@ 0x60
 8001126:	2300      	movs	r3, #0
 8001128:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	    // Obsługa godzin

	        backBuffer[0] = segmentMap[10]; // Puste dziesiątki godzin
 800112c:	2300      	movs	r3, #0
 800112e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = segmentMap[10]; // Jednostki godzin
 8001132:	2300      	movs	r3, #0
 8001134:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61


	    // Obsługa minut
	    backBuffer[2] = segmentMap[10]; // Dziesiątki minut
 8001138:	2300      	movs	r3, #0
 800113a:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	    backBuffer[3] = segmentMap[10]; // Jednostki minut
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	    // Obsługa sekund
	    backBuffer[4] = segmentMap[10]; // Dziesiątki sekund
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	    backBuffer[5] = segmentMap[10]; // Jednostki sekund
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	    // Zbudowanie wartości 48-bitowej na podstawie bufora
	    uint64_t displayVal = 0ULL;
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[5] << 40);
 800115c:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2200      	movs	r2, #0
 8001164:	653b      	str	r3, [r7, #80]	@ 0x50
 8001166:	657a      	str	r2, [r7, #84]	@ 0x54
 8001168:	f04f 0000 	mov.w	r0, #0
 800116c:	f04f 0100 	mov.w	r1, #0
 8001170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001172:	0219      	lsls	r1, r3, #8
 8001174:	2000      	movs	r0, #0
 8001176:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800117a:	ea42 0800 	orr.w	r8, r2, r0
 800117e:	ea43 0901 	orr.w	r9, r3, r1
 8001182:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[4] << 32);
 8001186:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2200      	movs	r2, #0
 800118e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001190:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001192:	f04f 0000 	mov.w	r0, #0
 8001196:	f04f 0100 	mov.w	r1, #0
 800119a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800119c:	0019      	movs	r1, r3
 800119e:	2000      	movs	r0, #0
 80011a0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80011a4:	ea42 0600 	orr.w	r6, r2, r0
 80011a8:	623e      	str	r6, [r7, #32]
 80011aa:	430b      	orrs	r3, r1
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011b2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[0] << 24);
 80011b6:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2200      	movs	r2, #0
 80011be:	643b      	str	r3, [r7, #64]	@ 0x40
 80011c0:	647a      	str	r2, [r7, #68]	@ 0x44
 80011c2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80011c6:	460b      	mov	r3, r1
 80011c8:	0a1d      	lsrs	r5, r3, #8
 80011ca:	460b      	mov	r3, r1
 80011cc:	061c      	lsls	r4, r3, #24
 80011ce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80011d2:	ea42 0104 	orr.w	r1, r2, r4
 80011d6:	61b9      	str	r1, [r7, #24]
 80011d8:	432b      	orrs	r3, r5
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80011e0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[1] << 16);
 80011e4:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2200      	movs	r2, #0
 80011ec:	469a      	mov	sl, r3
 80011ee:	4693      	mov	fp, r2
 80011f0:	f04f 0000 	mov.w	r0, #0
 80011f4:	f04f 0100 	mov.w	r1, #0
 80011f8:	ea4f 410b 	mov.w	r1, fp, lsl #16
 80011fc:	ea41 411a 	orr.w	r1, r1, sl, lsr #16
 8001200:	ea4f 400a 	mov.w	r0, sl, lsl #16
 8001204:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001208:	ea42 0400 	orr.w	r4, r2, r0
 800120c:	613c      	str	r4, [r7, #16]
 800120e:	430b      	orrs	r3, r1
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001216:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[2] << 8);
 800121a:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2200      	movs	r2, #0
 8001222:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001224:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001232:	4629      	mov	r1, r5
 8001234:	020b      	lsls	r3, r1, #8
 8001236:	4621      	mov	r1, r4
 8001238:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800123c:	4621      	mov	r1, r4
 800123e:	020a      	lsls	r2, r1, #8
 8001240:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001244:	ea40 0402 	orr.w	r4, r0, r2
 8001248:	60bc      	str	r4, [r7, #8]
 800124a:	430b      	orrs	r3, r1
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001252:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[3] << 0);
 8001256:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2200      	movs	r2, #0
 800125e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001260:	637a      	str	r2, [r7, #52]	@ 0x34
 8001262:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001266:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800126a:	4621      	mov	r1, r4
 800126c:	4311      	orrs	r1, r2
 800126e:	6039      	str	r1, [r7, #0]
 8001270:	4629      	mov	r1, r5
 8001272:	4319      	orrs	r1, r3
 8001274:	6079      	str	r1, [r7, #4]
 8001276:	e9d7 3400 	ldrd	r3, r4, [r7]
 800127a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68

	    clockBits->topDisplay = displayVal;
 800127e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001282:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001284:	b29b      	uxth	r3, r3
 8001286:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001288:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800128a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800128e:	4602      	mov	r2, r0
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	460a      	mov	r2, r1
 8001294:	821a      	strh	r2, [r3, #16]
}
 8001296:	bf00      	nop
 8001298:	3770      	adds	r7, #112	@ 0x70
 800129a:	46bd      	mov	sp, r7
 800129c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80012a0:	4770      	bx	lr
	...

080012a4 <UpdateAllDisplays>:




void UpdateAllDisplays(const MyClockBitFields* clockBits)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    // Sprawdź, czy SPI jest zajęte
    if (spiTransferInProgress) {
 80012ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001320 <UpdateAllDisplays+0x7c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d130      	bne.n	8001318 <UpdateAllDisplays+0x74>
        return;
    }

    spiTransferInProgress = true;
 80012b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <UpdateAllDisplays+0x7c>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]

    static uint8_t spiTxBuffer[24];
    memset(spiTxBuffer, 0, sizeof(spiTxBuffer));
 80012bc:	2218      	movs	r2, #24
 80012be:	2100      	movs	r1, #0
 80012c0:	4818      	ldr	r0, [pc, #96]	@ (8001324 <UpdateAllDisplays+0x80>)
 80012c2:	f00a f9ff 	bl	800b6c4 <memset>

    const uint8_t* p = (const uint8_t*)clockBits;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]
    int byteIndex = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]

    for (int partIndex = 11; partIndex >= 0; partIndex--)
 80012ce:	230b      	movs	r3, #11
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	e018      	b.n	8001306 <UpdateAllDisplays+0x62>
    {
        spiTxBuffer[byteIndex++] = p[2 * partIndex + 1];
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	3301      	adds	r3, #1
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	441a      	add	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	1c59      	adds	r1, r3, #1
 80012e2:	6179      	str	r1, [r7, #20]
 80012e4:	7811      	ldrb	r1, [r2, #0]
 80012e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001324 <UpdateAllDisplays+0x80>)
 80012e8:	54d1      	strb	r1, [r2, r3]
        spiTxBuffer[byteIndex++] = p[2 * partIndex + 0];
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	461a      	mov	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	441a      	add	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	1c59      	adds	r1, r3, #1
 80012f8:	6179      	str	r1, [r7, #20]
 80012fa:	7811      	ldrb	r1, [r2, #0]
 80012fc:	4a09      	ldr	r2, [pc, #36]	@ (8001324 <UpdateAllDisplays+0x80>)
 80012fe:	54d1      	strb	r1, [r2, r3]
    for (int partIndex = 11; partIndex >= 0; partIndex--)
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	3b01      	subs	r3, #1
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	2b00      	cmp	r3, #0
 800130a:	dae3      	bge.n	80012d4 <UpdateAllDisplays+0x30>
    }

    HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 24);
 800130c:	2218      	movs	r2, #24
 800130e:	4905      	ldr	r1, [pc, #20]	@ (8001324 <UpdateAllDisplays+0x80>)
 8001310:	4805      	ldr	r0, [pc, #20]	@ (8001328 <UpdateAllDisplays+0x84>)
 8001312:	f008 f81f 	bl	8009354 <HAL_SPI_Transmit_DMA>
 8001316:	e000      	b.n	800131a <UpdateAllDisplays+0x76>
        return;
 8001318:	bf00      	nop
}
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200000a4 	.word	0x200000a4
 8001324:	200000a8 	.word	0x200000a8
 8001328:	20000700 	.word	0x20000700

0800132c <SetPWMPercentGamma>:
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
  uint32_t compare_value = (period + 1) - ((period + 1) * percent / 100);
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
}

void SetPWMPercentGamma(uint8_t percent) {
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if (percent > 100) {
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b64      	cmp	r3, #100	@ 0x64
 800133a:	d901      	bls.n	8001340 <SetPWMPercentGamma+0x14>
      percent = 100;
 800133c:	2364      	movs	r3, #100	@ 0x64
 800133e:	71fb      	strb	r3, [r7, #7]
  }
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8001340:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <SetPWMPercentGamma+0x4c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001346:	617b      	str	r3, [r7, #20]
  uint8_t gamma_percent = gamma_table[percent];
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	4a0c      	ldr	r2, [pc, #48]	@ (800137c <SetPWMPercentGamma+0x50>)
 800134c:	5cd3      	ldrb	r3, [r2, r3]
 800134e:	74fb      	strb	r3, [r7, #19]
  uint32_t compare_value = (period + 1) * gamma_percent / 100;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	7cfa      	ldrb	r2, [r7, #19]
 8001356:	fb02 f303 	mul.w	r3, r2, r3
 800135a:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <SetPWMPercentGamma+0x54>)
 800135c:	fba2 2303 	umull	r2, r3, r2, r3
 8001360:	095b      	lsrs	r3, r3, #5
 8001362:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
 8001364:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <SetPWMPercentGamma+0x4c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800136c:	bf00      	nop
 800136e:	371c      	adds	r7, #28
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	200007b8 	.word	0x200007b8
 800137c:	0800b7d4 	.word	0x0800b7d4
 8001380:	51eb851f 	.word	0x51eb851f

08001384 <SetSecondLedEvenOdd>:
        HAL_Delay(50);
    }
}

void SetSecondLedEvenOdd(MyClockBitFields* clockBits, uint8_t second, uint8_t minute)
{
 8001384:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001388:	b08c      	sub	sp, #48	@ 0x30
 800138a:	af00      	add	r7, sp, #0
 800138c:	6278      	str	r0, [r7, #36]	@ 0x24
 800138e:	460b      	mov	r3, r1
 8001390:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001394:	4613      	mov	r3, r2
 8001396:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (second >= 60) {
 800139a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800139e:	2b3b      	cmp	r3, #59	@ 0x3b
 80013a0:	d902      	bls.n	80013a8 <SetSecondLedEvenOdd+0x24>
        second = 59;
 80013a2:	233b      	movs	r3, #59	@ 0x3b
 80013a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
    if ((minute % 2) == 0)
 80013a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d178      	bne.n	80014a8 <SetSecondLedEvenOdd+0x124>
    {
        clockBits->secondsRing = 0ULL;
 80013b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	2200      	movs	r2, #0
 80013be:	705a      	strb	r2, [r3, #1]
 80013c0:	2200      	movs	r2, #0
 80013c2:	709a      	strb	r2, [r3, #2]
 80013c4:	2200      	movs	r2, #0
 80013c6:	70da      	strb	r2, [r3, #3]
 80013c8:	2200      	movs	r2, #0
 80013ca:	711a      	strb	r2, [r3, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	715a      	strb	r2, [r3, #5]
 80013d0:	2200      	movs	r2, #0
 80013d2:	719a      	strb	r2, [r3, #6]
 80013d4:	79da      	ldrb	r2, [r3, #7]
 80013d6:	f022 020f 	bic.w	r2, r2, #15
 80013da:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = 0; i <= second; i++)
 80013dc:	2300      	movs	r3, #0
 80013de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80013e2:	e05a      	b.n	800149a <SetSecondLedEvenOdd+0x116>
        {
            clockBits->secondsRing |= (1ULL << i);
 80013e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	791a      	ldrb	r2, [r3, #4]
 80013ea:	795c      	ldrb	r4, [r3, #5]
 80013ec:	0224      	lsls	r4, r4, #8
 80013ee:	4322      	orrs	r2, r4
 80013f0:	799c      	ldrb	r4, [r3, #6]
 80013f2:	0424      	lsls	r4, r4, #16
 80013f4:	4322      	orrs	r2, r4
 80013f6:	79db      	ldrb	r3, [r3, #7]
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	061b      	lsls	r3, r3, #24
 80013fe:	4313      	orrs	r3, r2
 8001400:	4619      	mov	r1, r3
 8001402:	4680      	mov	r8, r0
 8001404:	4689      	mov	r9, r1
 8001406:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800140a:	f04f 0201 	mov.w	r2, #1
 800140e:	f04f 0300 	mov.w	r3, #0
 8001412:	f1a1 0420 	sub.w	r4, r1, #32
 8001416:	f1c1 0020 	rsb	r0, r1, #32
 800141a:	fa03 f601 	lsl.w	r6, r3, r1
 800141e:	fa02 f404 	lsl.w	r4, r2, r4
 8001422:	4326      	orrs	r6, r4
 8001424:	fa22 f000 	lsr.w	r0, r2, r0
 8001428:	4306      	orrs	r6, r0
 800142a:	fa02 f501 	lsl.w	r5, r2, r1
 800142e:	ea48 0305 	orr.w	r3, r8, r5
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	ea49 0306 	orr.w	r3, r9, r6
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800143e:	460b      	mov	r3, r1
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4613      	mov	r3, r2
 8001444:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001450:	4642      	mov	r2, r8
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	464a      	mov	r2, r9
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	2100      	movs	r1, #0
 800145a:	430a      	orrs	r2, r1
 800145c:	711a      	strb	r2, [r3, #4]
 800145e:	464a      	mov	r2, r9
 8001460:	0a12      	lsrs	r2, r2, #8
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	2100      	movs	r1, #0
 8001466:	430a      	orrs	r2, r1
 8001468:	715a      	strb	r2, [r3, #5]
 800146a:	464a      	mov	r2, r9
 800146c:	0c12      	lsrs	r2, r2, #16
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	2100      	movs	r1, #0
 8001472:	430a      	orrs	r2, r1
 8001474:	719a      	strb	r2, [r3, #6]
 8001476:	464a      	mov	r2, r9
 8001478:	0e12      	lsrs	r2, r2, #24
 800147a:	f002 020f 	and.w	r2, r2, #15
 800147e:	f002 000f 	and.w	r0, r2, #15
 8001482:	79da      	ldrb	r2, [r3, #7]
 8001484:	f022 020f 	bic.w	r2, r2, #15
 8001488:	4611      	mov	r1, r2
 800148a:	4602      	mov	r2, r0
 800148c:	430a      	orrs	r2, r1
 800148e:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = 0; i <= second; i++)
 8001490:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001494:	3301      	adds	r3, #1
 8001496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800149a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800149e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d99e      	bls.n	80013e4 <SetSecondLedEvenOdd+0x60>
        for (uint8_t i = second + 1; i < 60; i++)
        {
            clockBits->secondsRing |= (1ULL << i);
        }
    }
}
 80014a6:	e079      	b.n	800159c <SetSecondLedEvenOdd+0x218>
        clockBits->secondsRing = 0ULL;
 80014a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
 80014ae:	2200      	movs	r2, #0
 80014b0:	705a      	strb	r2, [r3, #1]
 80014b2:	2200      	movs	r2, #0
 80014b4:	709a      	strb	r2, [r3, #2]
 80014b6:	2200      	movs	r2, #0
 80014b8:	70da      	strb	r2, [r3, #3]
 80014ba:	2200      	movs	r2, #0
 80014bc:	711a      	strb	r2, [r3, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	715a      	strb	r2, [r3, #5]
 80014c2:	2200      	movs	r2, #0
 80014c4:	719a      	strb	r2, [r3, #6]
 80014c6:	79da      	ldrb	r2, [r3, #7]
 80014c8:	f022 020f 	bic.w	r2, r2, #15
 80014cc:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = second + 1; i < 60; i++)
 80014ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014d2:	3301      	adds	r3, #1
 80014d4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80014d8:	e05c      	b.n	8001594 <SetSecondLedEvenOdd+0x210>
            clockBits->secondsRing |= (1ULL << i);
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	791a      	ldrb	r2, [r3, #4]
 80014e0:	795c      	ldrb	r4, [r3, #5]
 80014e2:	0224      	lsls	r4, r4, #8
 80014e4:	4322      	orrs	r2, r4
 80014e6:	799c      	ldrb	r4, [r3, #6]
 80014e8:	0424      	lsls	r4, r4, #16
 80014ea:	4322      	orrs	r2, r4
 80014ec:	79db      	ldrb	r3, [r3, #7]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	061b      	lsls	r3, r3, #24
 80014f4:	4313      	orrs	r3, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	4680      	mov	r8, r0
 80014fa:	4689      	mov	r9, r1
 80014fc:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8001500:	f04f 0201 	mov.w	r2, #1
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	f1a1 0420 	sub.w	r4, r1, #32
 800150c:	f1c1 0020 	rsb	r0, r1, #32
 8001510:	fa03 fb01 	lsl.w	fp, r3, r1
 8001514:	fa02 f404 	lsl.w	r4, r2, r4
 8001518:	ea4b 0b04 	orr.w	fp, fp, r4
 800151c:	fa22 f000 	lsr.w	r0, r2, r0
 8001520:	ea4b 0b00 	orr.w	fp, fp, r0
 8001524:	fa02 fa01 	lsl.w	sl, r2, r1
 8001528:	ea48 030a 	orr.w	r3, r8, sl
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	ea49 030b 	orr.w	r3, r9, fp
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001538:	460b      	mov	r3, r1
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	4613      	mov	r3, r2
 800153e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001546:	e9d7 4500 	ldrd	r4, r5, [r7]
 800154a:	4622      	mov	r2, r4
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	462a      	mov	r2, r5
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	2100      	movs	r1, #0
 8001554:	430a      	orrs	r2, r1
 8001556:	711a      	strb	r2, [r3, #4]
 8001558:	462a      	mov	r2, r5
 800155a:	0a12      	lsrs	r2, r2, #8
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	2100      	movs	r1, #0
 8001560:	430a      	orrs	r2, r1
 8001562:	715a      	strb	r2, [r3, #5]
 8001564:	462a      	mov	r2, r5
 8001566:	0c12      	lsrs	r2, r2, #16
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	2100      	movs	r1, #0
 800156c:	430a      	orrs	r2, r1
 800156e:	719a      	strb	r2, [r3, #6]
 8001570:	462a      	mov	r2, r5
 8001572:	0e12      	lsrs	r2, r2, #24
 8001574:	f002 020f 	and.w	r2, r2, #15
 8001578:	f002 000f 	and.w	r0, r2, #15
 800157c:	79da      	ldrb	r2, [r3, #7]
 800157e:	f022 020f 	bic.w	r2, r2, #15
 8001582:	4611      	mov	r1, r2
 8001584:	4602      	mov	r2, r0
 8001586:	430a      	orrs	r2, r1
 8001588:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = second + 1; i < 60; i++)
 800158a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800158e:	3301      	adds	r3, #1
 8001590:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001594:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001598:	2b3b      	cmp	r3, #59	@ 0x3b
 800159a:	d99e      	bls.n	80014da <SetSecondLedEvenOdd+0x156>
}
 800159c:	bf00      	nop
 800159e:	3730      	adds	r7, #48	@ 0x30
 80015a0:	46bd      	mov	sp, r7
 80015a2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80015a6:	4770      	bx	lr

080015a8 <SetDots>:
//  if (dot2) val |= (1ULL << 1);
//
//  clockBits->dots = val;
//}

void SetDots(MyClockBitFields* clockBits, bool dot1, bool dot2) {
 80015a8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80015ac:	b085      	sub	sp, #20
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	460b      	mov	r3, r1
 80015b4:	70fb      	strb	r3, [r7, #3]
 80015b6:	4613      	mov	r3, r2
 80015b8:	70bb      	strb	r3, [r7, #2]
  uint64_t val = 0ULL;
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (dot1) val |= (1ULL << 0);
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <SetDots+0x32>
 80015cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015d0:	f042 0801 	orr.w	r8, r2, #1
 80015d4:	4699      	mov	r9, r3
 80015d6:	e9c7 8902 	strd	r8, r9, [r7, #8]
  if (dot2) val |= (1ULL << 1);
 80015da:	78bb      	ldrb	r3, [r7, #2]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d006      	beq.n	80015ee <SetDots+0x46>
 80015e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015e4:	f042 0402 	orr.w	r4, r2, #2
 80015e8:	461d      	mov	r5, r3
 80015ea:	e9c7 4502 	strd	r4, r5, [r7, #8]
  clockBits->dots = val;
 80015ee:	7a3b      	ldrb	r3, [r7, #8]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	b2d9      	uxtb	r1, r3
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	7a93      	ldrb	r3, [r2, #10]
 80015fa:	f361 1305 	bfi	r3, r1, #4, #2
 80015fe:	7293      	strb	r3, [r2, #10]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800160a:	4770      	bx	lr

0800160c <SetHourRingCustom>:


void SetHourRingCustom(MyClockBitFields* clockBits, uint8_t outerMode, uint8_t innerMode)
{
 800160c:	b490      	push	{r4, r7}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	70fb      	strb	r3, [r7, #3]
 8001618:	4613      	mov	r3, r2
 800161a:	70bb      	strb	r3, [r7, #2]
    // Maska dla pełnego pierścienia (wszystkie 12 godzin)
    uint16_t fullMask = 0x0FFF;  // 12-bitowy: bity 0-11 ustawione na 1
 800161c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001620:	81fb      	strh	r3, [r7, #14]
    // Maska dla kwadransów: godziny 12 (bit 0), 3 (bit 3), 6 (bit 6), 9 (bit 9)
    uint16_t quarterMask = (1U << 0) | (1U << 3) | (1U << 6) | (1U << 9);
 8001622:	f240 2349 	movw	r3, #585	@ 0x249
 8001626:	81bb      	strh	r3, [r7, #12]

    // Ustawienia dla zewnętrznego pierścienia
    switch(outerMode)
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d002      	beq.n	8001634 <SetHourRingCustom+0x28>
 800162e:	2b02      	cmp	r3, #2
 8001630:	d016      	beq.n	8001660 <SetHourRingCustom+0x54>
 8001632:	e02b      	b.n	800168c <SetHourRingCustom+0x80>
    {
        case 1:
            clockBits->hoursRingOuter = fullMask;
 8001634:	89fb      	ldrh	r3, [r7, #14]
 8001636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800163a:	b29a      	uxth	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f002 010f 	and.w	r1, r2, #15
 8001642:	010c      	lsls	r4, r1, #4
 8001644:	79d9      	ldrb	r1, [r3, #7]
 8001646:	f001 010f 	and.w	r1, r1, #15
 800164a:	4608      	mov	r0, r1
 800164c:	4621      	mov	r1, r4
 800164e:	4301      	orrs	r1, r0
 8001650:	71d9      	strb	r1, [r3, #7]
 8001652:	0912      	lsrs	r2, r2, #4
 8001654:	b292      	uxth	r2, r2
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	2100      	movs	r1, #0
 800165a:	430a      	orrs	r2, r1
 800165c:	721a      	strb	r2, [r3, #8]
            break;
 800165e:	e01d      	b.n	800169c <SetHourRingCustom+0x90>
        case 2:
            clockBits->hoursRingOuter = quarterMask;
 8001660:	89bb      	ldrh	r3, [r7, #12]
 8001662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001666:	b29a      	uxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f002 010f 	and.w	r1, r2, #15
 800166e:	010c      	lsls	r4, r1, #4
 8001670:	79d9      	ldrb	r1, [r3, #7]
 8001672:	f001 010f 	and.w	r1, r1, #15
 8001676:	4608      	mov	r0, r1
 8001678:	4621      	mov	r1, r4
 800167a:	4301      	orrs	r1, r0
 800167c:	71d9      	strb	r1, [r3, #7]
 800167e:	0912      	lsrs	r2, r2, #4
 8001680:	b292      	uxth	r2, r2
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	2100      	movs	r1, #0
 8001686:	430a      	orrs	r2, r1
 8001688:	721a      	strb	r2, [r3, #8]
            break;
 800168a:	e007      	b.n	800169c <SetHourRingCustom+0x90>
        default:  // dla wartości 0 i innych nieznanych – wyłącz
            clockBits->hoursRingOuter = 0;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	79da      	ldrb	r2, [r3, #7]
 8001690:	f002 020f 	and.w	r2, r2, #15
 8001694:	71da      	strb	r2, [r3, #7]
 8001696:	2200      	movs	r2, #0
 8001698:	721a      	strb	r2, [r3, #8]
            break;
 800169a:	bf00      	nop
    }

    // Ustawienia dla wewnętrznego pierścienia
    switch(innerMode)
 800169c:	78bb      	ldrb	r3, [r7, #2]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d002      	beq.n	80016a8 <SetHourRingCustom+0x9c>
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d017      	beq.n	80016d6 <SetHourRingCustom+0xca>
 80016a6:	e02d      	b.n	8001704 <SetHourRingCustom+0xf8>
    {
        case 1:
            clockBits->hoursRingInner = fullMask;
 80016a8:	89fb      	ldrh	r3, [r7, #14]
 80016aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	b2d1      	uxtb	r1, r2
 80016b4:	2000      	movs	r0, #0
 80016b6:	4301      	orrs	r1, r0
 80016b8:	7259      	strb	r1, [r3, #9]
 80016ba:	0a12      	lsrs	r2, r2, #8
 80016bc:	b292      	uxth	r2, r2
 80016be:	f002 020f 	and.w	r2, r2, #15
 80016c2:	f002 000f 	and.w	r0, r2, #15
 80016c6:	7a9a      	ldrb	r2, [r3, #10]
 80016c8:	f022 020f 	bic.w	r2, r2, #15
 80016cc:	4611      	mov	r1, r2
 80016ce:	4602      	mov	r2, r0
 80016d0:	430a      	orrs	r2, r1
 80016d2:	729a      	strb	r2, [r3, #10]
            break;
 80016d4:	e01e      	b.n	8001714 <SetHourRingCustom+0x108>
        case 2:
            clockBits->hoursRingInner = quarterMask;
 80016d6:	89bb      	ldrh	r3, [r7, #12]
 80016d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016dc:	b29a      	uxth	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	b2d1      	uxtb	r1, r2
 80016e2:	2000      	movs	r0, #0
 80016e4:	4301      	orrs	r1, r0
 80016e6:	7259      	strb	r1, [r3, #9]
 80016e8:	0a12      	lsrs	r2, r2, #8
 80016ea:	b292      	uxth	r2, r2
 80016ec:	f002 020f 	and.w	r2, r2, #15
 80016f0:	f002 000f 	and.w	r0, r2, #15
 80016f4:	7a9a      	ldrb	r2, [r3, #10]
 80016f6:	f022 020f 	bic.w	r2, r2, #15
 80016fa:	4611      	mov	r1, r2
 80016fc:	4602      	mov	r2, r0
 80016fe:	430a      	orrs	r2, r1
 8001700:	729a      	strb	r2, [r3, #10]
            break;
 8001702:	e007      	b.n	8001714 <SetHourRingCustom+0x108>
        default:  // dla wartości 0 i innych nieznanych – wyłącz
            clockBits->hoursRingInner = 0;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	725a      	strb	r2, [r3, #9]
 800170a:	7a9a      	ldrb	r2, [r3, #10]
 800170c:	f022 020f 	bic.w	r2, r2, #15
 8001710:	729a      	strb	r2, [r3, #10]
            break;
 8001712:	bf00      	nop
    }
}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bc90      	pop	{r4, r7}
 800171c:	4770      	bx	lr
	...

08001720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <MX_DMA_Init+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a1e      	ldr	r2, [pc, #120]	@ (80017a8 <MX_DMA_Init+0x88>)
 8001730:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <MX_DMA_Init+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <MX_DMA_Init+0x88>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a17      	ldr	r2, [pc, #92]	@ (80017a8 <MX_DMA_Init+0x88>)
 800174c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <MX_DMA_Init+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	200d      	movs	r0, #13
 8001764:	f003 fa91 	bl	8004c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001768:	200d      	movs	r0, #13
 800176a:	f003 faaa 	bl	8004cc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	202f      	movs	r0, #47	@ 0x2f
 8001774:	f003 fa89 	bl	8004c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001778:	202f      	movs	r0, #47	@ 0x2f
 800177a:	f003 faa2 	bl	8004cc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	203a      	movs	r0, #58	@ 0x3a
 8001784:	f003 fa81 	bl	8004c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001788:	203a      	movs	r0, #58	@ 0x3a
 800178a:	f003 fa9a 	bl	8004cc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	203b      	movs	r0, #59	@ 0x3b
 8001794:	f003 fa79 	bl	8004c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001798:	203b      	movs	r0, #59	@ 0x3b
 800179a:	f003 fa92 	bl	8004cc2 <HAL_NVIC_EnableIRQ>

}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800

080017ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	@ 0x28
 80017b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001878 <MX_GPIO_Init+0xcc>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001878 <MX_GPIO_Init+0xcc>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4b29      	ldr	r3, [pc, #164]	@ (8001878 <MX_GPIO_Init+0xcc>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b25      	ldr	r3, [pc, #148]	@ (8001878 <MX_GPIO_Init+0xcc>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a24      	ldr	r2, [pc, #144]	@ (8001878 <MX_GPIO_Init+0xcc>)
 80017e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <MX_GPIO_Init+0xcc>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <MX_GPIO_Init+0xcc>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4a1d      	ldr	r2, [pc, #116]	@ (8001878 <MX_GPIO_Init+0xcc>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <MX_GPIO_Init+0xcc>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b17      	ldr	r3, [pc, #92]	@ (8001878 <MX_GPIO_Init+0xcc>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a16      	ldr	r2, [pc, #88]	@ (8001878 <MX_GPIO_Init+0xcc>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <MX_GPIO_Init+0xcc>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	2140      	movs	r1, #64	@ 0x40
 8001836:	4811      	ldr	r0, [pc, #68]	@ (800187c <MX_GPIO_Init+0xd0>)
 8001838:	f003 ffa6 	bl	8005788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_LATCH_Pin;
 800183c:	2340      	movs	r3, #64	@ 0x40
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_LATCH_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	480a      	ldr	r0, [pc, #40]	@ (800187c <MX_GPIO_Init+0xd0>)
 8001854:	f003 fdfc 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8001858:	2320      	movs	r3, #32
 800185a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001860:	2301      	movs	r3, #1
 8001862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	4805      	ldr	r0, [pc, #20]	@ (8001880 <MX_GPIO_Init+0xd4>)
 800186c:	f003 fdf0 	bl	8005450 <HAL_GPIO_Init>

}
 8001870:	bf00      	nop
 8001872:	3728      	adds	r7, #40	@ 0x28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800
 800187c:	40020000 	.word	0x40020000
 8001880:	40020400 	.word	0x40020400

08001884 <IsNmeaSeparator>:
extern DMA_HandleTypeDef hdma_usart1_rx;
uint8_t gps_dma_buffer[GPS_DMA_BUFFER_SIZE];
gps_data_t gps_data = {0};
static uint16_t old_pos = 0;
static bool IsNmeaSeparator(char c)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
    return (c == ',' || c == '*');  // Zwraca true, jeśli znak jest ',' lub '*'
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b2c      	cmp	r3, #44	@ 0x2c
 8001892:	d002      	beq.n	800189a <IsNmeaSeparator+0x16>
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	2b2a      	cmp	r3, #42	@ 0x2a
 8001898:	d101      	bne.n	800189e <IsNmeaSeparator+0x1a>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <IsNmeaSeparator+0x1c>
 800189e:	2300      	movs	r3, #0
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <ParseUInt8>:
static uint8_t ParseUInt8(const char *startingPtr, uint8_t maxLen)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b085      	sub	sp, #20
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	460b      	mov	r3, r1
 80018bc:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;  // Inicjalizacja zmiennej do przechowywania wyniku
 80018be:	2300      	movs	r3, #0
 80018c0:	73fb      	strb	r3, [r7, #15]
    // Iteracja przez każdy znak w ciągu, do maksymalnej długości
    for (uint8_t i = 0; i < maxLen; i++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	73bb      	strb	r3, [r7, #14]
 80018c6:	e01c      	b.n	8001902 <ParseUInt8+0x50>
    {
        // Sprawdzenie, czy znak jest cyfrą ('0' - '9')
        if (startingPtr[i] < '0' || startingPtr[i] > '9')
 80018c8:	7bbb      	ldrb	r3, [r7, #14]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80018d2:	d91a      	bls.n	800190a <ParseUInt8+0x58>
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b39      	cmp	r3, #57	@ 0x39
 80018de:	d814      	bhi.n	800190a <ParseUInt8+0x58>
            break;  // Przerwanie pętli, jeśli znak nie jest cyfrą
        // Aktualizacja wartości poprzez przesunięcie dziesiętne i dodanie nowej cyfry
        value = (uint8_t)(value * 10 + (startingPtr[i] - '0'));
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	461a      	mov	r2, r3
 80018e4:	0092      	lsls	r2, r2, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	7bbb      	ldrb	r3, [r7, #14]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	440b      	add	r3, r1
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4413      	add	r3, r2
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	3b30      	subs	r3, #48	@ 0x30
 80018fa:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < maxLen; i++)
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
 80018fe:	3301      	adds	r3, #1
 8001900:	73bb      	strb	r3, [r7, #14]
 8001902:	7bba      	ldrb	r2, [r7, #14]
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	429a      	cmp	r2, r3
 8001908:	d3de      	bcc.n	80018c8 <ParseUInt8+0x16>
    }
    return value;  // Zwrócenie sparsowanej wartości
 800190a:	7bfb      	ldrb	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <ParseGPRMC>:
 * // gps_data.day = 23
 * // gps_data.month = 03
 * // gps_data.year = 94
 */
static void ParseGPRMC(const char *nmeaLine)
{
 8001918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191a:	b091      	sub	sp, #68	@ 0x44
 800191c:	af04      	add	r7, sp, #16
 800191e:	6078      	str	r0, [r7, #4]
    const char *p = nmeaLine;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t fieldIndex = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    const char *fieldPtr = NULL;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
    for (; *p != '\0'; p++)
 800192e:	e071      	b.n	8001a14 <ParseGPRMC+0xfc>
    {
        if (IsNmeaSeparator(*p) || *p == '\r' || *p == '\n')
 8001930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ffa5 	bl	8001884 <IsNmeaSeparator>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d107      	bne.n	8001950 <ParseGPRMC+0x38>
 8001940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b0d      	cmp	r3, #13
 8001946:	d003      	beq.n	8001950 <ParseGPRMC+0x38>
 8001948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b0a      	cmp	r3, #10
 800194e:	d155      	bne.n	80019fc <ParseGPRMC+0xe4>
        {
            if (fieldPtr)
 8001950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001952:	2b00      	cmp	r3, #0
 8001954:	d04a      	beq.n	80019ec <ParseGPRMC+0xd4>
            {
                switch(fieldIndex)
 8001956:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800195a:	2b09      	cmp	r3, #9
 800195c:	d028      	beq.n	80019b0 <ParseGPRMC+0x98>
 800195e:	2b09      	cmp	r3, #9
 8001960:	dc43      	bgt.n	80019ea <ParseGPRMC+0xd2>
 8001962:	2b01      	cmp	r3, #1
 8001964:	d002      	beq.n	800196c <ParseGPRMC+0x54>
 8001966:	2b02      	cmp	r3, #2
 8001968:	d01d      	beq.n	80019a6 <ParseGPRMC+0x8e>
                        gps_data.day   = ParseUInt8(fieldPtr, 2);
                        gps_data.month = ParseUInt8(fieldPtr+2, 2);
                        gps_data.year  = ParseUInt8(fieldPtr+4, 2);
                        break;
                    default:
                        break;
 800196a:	e03e      	b.n	80019ea <ParseGPRMC+0xd2>
                        gps_data.hours   = ParseUInt8(fieldPtr, 2);
 800196c:	2102      	movs	r1, #2
 800196e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001970:	f7ff ff9f 	bl	80018b2 <ParseUInt8>
 8001974:	4603      	mov	r3, r0
 8001976:	461a      	mov	r2, r3
 8001978:	4b42      	ldr	r3, [pc, #264]	@ (8001a84 <ParseGPRMC+0x16c>)
 800197a:	701a      	strb	r2, [r3, #0]
                        gps_data.minutes = ParseUInt8(fieldPtr+2, 2);
 800197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197e:	3302      	adds	r3, #2
 8001980:	2102      	movs	r1, #2
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ff95 	bl	80018b2 <ParseUInt8>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a84 <ParseGPRMC+0x16c>)
 800198e:	705a      	strb	r2, [r3, #1]
                        gps_data.seconds = ParseUInt8(fieldPtr+4, 2);
 8001990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001992:	3304      	adds	r3, #4
 8001994:	2102      	movs	r1, #2
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ff8b 	bl	80018b2 <ParseUInt8>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	4b38      	ldr	r3, [pc, #224]	@ (8001a84 <ParseGPRMC+0x16c>)
 80019a2:	709a      	strb	r2, [r3, #2]
                        break;
 80019a4:	e022      	b.n	80019ec <ParseGPRMC+0xd4>
                        gps_data.fix = *fieldPtr;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a8:	781a      	ldrb	r2, [r3, #0]
 80019aa:	4b36      	ldr	r3, [pc, #216]	@ (8001a84 <ParseGPRMC+0x16c>)
 80019ac:	71da      	strb	r2, [r3, #7]
                        break;
 80019ae:	e01d      	b.n	80019ec <ParseGPRMC+0xd4>
                        gps_data.day   = ParseUInt8(fieldPtr, 2);
 80019b0:	2102      	movs	r1, #2
 80019b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019b4:	f7ff ff7d 	bl	80018b2 <ParseUInt8>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b31      	ldr	r3, [pc, #196]	@ (8001a84 <ParseGPRMC+0x16c>)
 80019be:	70da      	strb	r2, [r3, #3]
                        gps_data.month = ParseUInt8(fieldPtr+2, 2);
 80019c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c2:	3302      	adds	r3, #2
 80019c4:	2102      	movs	r1, #2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff73 	bl	80018b2 <ParseUInt8>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a84 <ParseGPRMC+0x16c>)
 80019d2:	711a      	strb	r2, [r3, #4]
                        gps_data.year  = ParseUInt8(fieldPtr+4, 2);
 80019d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d6:	3304      	adds	r3, #4
 80019d8:	2102      	movs	r1, #2
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff69 	bl	80018b2 <ParseUInt8>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b27      	ldr	r3, [pc, #156]	@ (8001a84 <ParseGPRMC+0x16c>)
 80019e6:	715a      	strb	r2, [r3, #5]
                        break;
 80019e8:	e000      	b.n	80019ec <ParseGPRMC+0xd4>
                        break;
 80019ea:	bf00      	nop
                }
            }
            fieldPtr = NULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
            fieldIndex++;
 80019f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80019f4:	3301      	adds	r3, #1
 80019f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80019fa:	e004      	b.n	8001a06 <ParseGPRMC+0xee>
        }
        else
        {
            if (!fieldPtr) fieldPtr = p;
 80019fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <ParseGPRMC+0xee>
 8001a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (*p == '*') break;
 8001a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a0c:	d007      	beq.n	8001a1e <ParseGPRMC+0x106>
    for (; *p != '\0'; p++)
 8001a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a10:	3301      	adds	r3, #1
 8001a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d189      	bne.n	8001930 <ParseGPRMC+0x18>
 8001a1c:	e000      	b.n	8001a20 <ParseGPRMC+0x108>
        if (*p == '*') break;
 8001a1e:	bf00      	nop
    }
    // Natychmiastowa aktualizacja RTC zaraz po poprawnym odczycie GPRMC
    // (sprawdzamy czy fix jest 'A'):
    if (gps_data.fix == 'A')
 8001a20:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <ParseGPRMC+0x16c>)
 8001a22:	79db      	ldrb	r3, [r3, #7]
 8001a24:	2b41      	cmp	r3, #65	@ 0x41
 8001a26:	d129      	bne.n	8001a7c <ParseGPRMC+0x164>
        // Tworzymy struktury dla lokalnego czasu
        RTC_TimeTypeDef localTime;
        RTC_DateTypeDef localDate;

        // Konwertuj z GPS (UTC) na czas lokalny
        ConvertUtcToLocalTime(gps_data.hours, gps_data.minutes, gps_data.seconds,
 8001a28:	4b16      	ldr	r3, [pc, #88]	@ (8001a84 <ParseGPRMC+0x16c>)
 8001a2a:	7818      	ldrb	r0, [r3, #0]
 8001a2c:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <ParseGPRMC+0x16c>)
 8001a2e:	785c      	ldrb	r4, [r3, #1]
 8001a30:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <ParseGPRMC+0x16c>)
 8001a32:	789d      	ldrb	r5, [r3, #2]
 8001a34:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <ParseGPRMC+0x16c>)
 8001a36:	78de      	ldrb	r6, [r3, #3]
 8001a38:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <ParseGPRMC+0x16c>)
 8001a3a:	791b      	ldrb	r3, [r3, #4]
 8001a3c:	4a11      	ldr	r2, [pc, #68]	@ (8001a84 <ParseGPRMC+0x16c>)
 8001a3e:	7952      	ldrb	r2, [r2, #5]
 8001a40:	f107 010c 	add.w	r1, r7, #12
 8001a44:	9103      	str	r1, [sp, #12]
 8001a46:	f107 0110 	add.w	r1, r7, #16
 8001a4a:	9102      	str	r1, [sp, #8]
 8001a4c:	9201      	str	r2, [sp, #4]
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	4633      	mov	r3, r6
 8001a52:	462a      	mov	r2, r5
 8001a54:	4621      	mov	r1, r4
 8001a56:	f000 f911 	bl	8001c7c <ConvertUtcToLocalTime>
                              gps_data.day,   gps_data.month,  gps_data.year,
                              &localTime, &localDate);
        // I wpisz do RTC
        HAL_RTC_SetTime(&hrtc, &localTime, RTC_FORMAT_BIN);
 8001a5a:	f107 0310 	add.w	r3, r7, #16
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4619      	mov	r1, r3
 8001a62:	4809      	ldr	r0, [pc, #36]	@ (8001a88 <ParseGPRMC+0x170>)
 8001a64:	f007 f963 	bl	8008d2e <HAL_RTC_SetTime>
        HAL_RTC_SetDate(&hrtc, &localDate, RTC_FORMAT_BIN);
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4805      	ldr	r0, [pc, #20]	@ (8001a88 <ParseGPRMC+0x170>)
 8001a72:	f007 fa54 	bl	8008f1e <HAL_RTC_SetDate>
        colon =1;
 8001a76:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <ParseGPRMC+0x174>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
    }
}
 8001a7c:	bf00      	nop
 8001a7e:	3734      	adds	r7, #52	@ 0x34
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a84:	200004c4 	.word	0x200004c4
 8001a88:	2000069c 	.word	0x2000069c
 8001a8c:	200000c1 	.word	0x200000c1

08001a90 <ParseGPGGA>:

static void ParseGPGGA(const char *nmeaLine)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
    const char *p = nmeaLine;          // Wskaźnik do iteracji przez ciąg znaków
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	617b      	str	r3, [r7, #20]
    uint8_t fieldIndex = 0;            // Indeks aktualnie przetwarzanego pola
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	74fb      	strb	r3, [r7, #19]
    const char *fieldPtr = NULL;       // Wskaźnik do początku aktualnego pola
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
    // Iteracja przez każdy znak w linii NMEA
    for (; *p != '\0'; p++)
 8001aa4:	e02f      	b.n	8001b06 <ParseGPGGA+0x76>
    {
        // Sprawdzenie, czy znak jest separatorem lub końcem linii
        if (IsNmeaSeparator(*p) || *p == '\r' || *p == '\n')
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff feea 	bl	8001884 <IsNmeaSeparator>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d107      	bne.n	8001ac6 <ParseGPGGA+0x36>
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b0d      	cmp	r3, #13
 8001abc:	d003      	beq.n	8001ac6 <ParseGPGGA+0x36>
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b0a      	cmp	r3, #10
 8001ac4:	d113      	bne.n	8001aee <ParseGPGGA+0x5e>
        {
            // Jeśli aktualne pole nie jest puste i indeks pola to 7, przetwarzamy jego zawartość
            if (fieldPtr && fieldIndex == 7)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00a      	beq.n	8001ae2 <ParseGPGGA+0x52>
 8001acc:	7cfb      	ldrb	r3, [r7, #19]
 8001ace:	2b07      	cmp	r3, #7
 8001ad0:	d107      	bne.n	8001ae2 <ParseGPGGA+0x52>
            {
                gps_data.satellites = ParseUInt8(fieldPtr, 2);    // Liczba satelit (np. '08' oznacza 8)
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f7ff feec 	bl	80018b2 <ParseUInt8>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <ParseGPGGA+0x8c>)
 8001ae0:	719a      	strb	r2, [r3, #6]
            }
            fieldPtr = NULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
            fieldIndex++;
 8001ae6:	7cfb      	ldrb	r3, [r7, #19]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	74fb      	strb	r3, [r7, #19]
 8001aec:	e004      	b.n	8001af8 <ParseGPGGA+0x68>
        }
        else
        {
            // Jeśli jeszcze nie ustawiono początku pola, ustawiamy wskaźnik
            if (!fieldPtr)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <ParseGPGGA+0x68>
                fieldPtr = p;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	60fb      	str	r3, [r7, #12]
        }
        // Jeśli napotkano '*', kończymy parsowanie tej linii
        if (*p == '*')
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8001afe:	d007      	beq.n	8001b10 <ParseGPGGA+0x80>
    for (; *p != '\0'; p++)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3301      	adds	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1cb      	bne.n	8001aa6 <ParseGPGGA+0x16>
            break;
    }
}
 8001b0e:	e000      	b.n	8001b12 <ParseGPGGA+0x82>
            break;
 8001b10:	bf00      	nop
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200004c4 	.word	0x200004c4

08001b20 <GPS_ProcessBuffer>:

void GPS_ProcessBuffer(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
    /* Obliczenie aktualnej pozycji w buforze */
    uint16_t now_pos = GPS_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8001b26:	4b40      	ldr	r3, [pc, #256]	@ (8001c28 <GPS_ProcessBuffer+0x108>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8001b32:	80fb      	strh	r3, [r7, #6]
    while (old_pos != now_pos)
 8001b34:	e06d      	b.n	8001c12 <GPS_ProcessBuffer+0xf2>
    {
        char c = (char)gps_dma_buffer[old_pos];
 8001b36:	4b3d      	ldr	r3, [pc, #244]	@ (8001c2c <GPS_ProcessBuffer+0x10c>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c30 <GPS_ProcessBuffer+0x110>)
 8001b3e:	5c9b      	ldrb	r3, [r3, r2]
 8001b40:	717b      	strb	r3, [r7, #5]
        static char lineBuf[128];
        static uint8_t lineIndex = 0;
        if (lineIndex < sizeof(lineBuf) - 1)
 8001b42:	4b3c      	ldr	r3, [pc, #240]	@ (8001c34 <GPS_ProcessBuffer+0x114>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b7e      	cmp	r3, #126	@ 0x7e
 8001b48:	d809      	bhi.n	8001b5e <GPS_ProcessBuffer+0x3e>
        {
            lineBuf[lineIndex++] = c;
 8001b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c34 <GPS_ProcessBuffer+0x114>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	b2d1      	uxtb	r1, r2
 8001b52:	4a38      	ldr	r2, [pc, #224]	@ (8001c34 <GPS_ProcessBuffer+0x114>)
 8001b54:	7011      	strb	r1, [r2, #0]
 8001b56:	4619      	mov	r1, r3
 8001b58:	4a37      	ldr	r2, [pc, #220]	@ (8001c38 <GPS_ProcessBuffer+0x118>)
 8001b5a:	797b      	ldrb	r3, [r7, #5]
 8001b5c:	5453      	strb	r3, [r2, r1]
        }
        if (c == '\n' || c == '\r')
 8001b5e:	797b      	ldrb	r3, [r7, #5]
 8001b60:	2b0a      	cmp	r3, #10
 8001b62:	d002      	beq.n	8001b6a <GPS_ProcessBuffer+0x4a>
 8001b64:	797b      	ldrb	r3, [r7, #5]
 8001b66:	2b0d      	cmp	r3, #13
 8001b68:	d145      	bne.n	8001bf6 <GPS_ProcessBuffer+0xd6>
        {
            lineBuf[lineIndex] = '\0';
 8001b6a:	4b32      	ldr	r3, [pc, #200]	@ (8001c34 <GPS_ProcessBuffer+0x114>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b31      	ldr	r3, [pc, #196]	@ (8001c38 <GPS_ProcessBuffer+0x118>)
 8001b72:	2100      	movs	r1, #0
 8001b74:	5499      	strb	r1, [r3, r2]
            if (strncmp(lineBuf, "$GPRMC", 6) == 0)
 8001b76:	2206      	movs	r2, #6
 8001b78:	4930      	ldr	r1, [pc, #192]	@ (8001c3c <GPS_ProcessBuffer+0x11c>)
 8001b7a:	482f      	ldr	r0, [pc, #188]	@ (8001c38 <GPS_ProcessBuffer+0x118>)
 8001b7c:	f009 fdaa 	bl	800b6d4 <strncmp>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d102      	bne.n	8001b8c <GPS_ProcessBuffer+0x6c>
            {
                ParseGPRMC(lineBuf);
 8001b86:	482c      	ldr	r0, [pc, #176]	@ (8001c38 <GPS_ProcessBuffer+0x118>)
 8001b88:	f7ff fec6 	bl	8001918 <ParseGPRMC>
            }
          if (strncmp(lineBuf, "$GPGGA", 6) == 0)
 8001b8c:	2206      	movs	r2, #6
 8001b8e:	492c      	ldr	r1, [pc, #176]	@ (8001c40 <GPS_ProcessBuffer+0x120>)
 8001b90:	4829      	ldr	r0, [pc, #164]	@ (8001c38 <GPS_ProcessBuffer+0x118>)
 8001b92:	f009 fd9f 	bl	800b6d4 <strncmp>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <GPS_ProcessBuffer+0x82>
            {
                ParseGPGGA(lineBuf);
 8001b9c:	4826      	ldr	r0, [pc, #152]	@ (8001c38 <GPS_ProcessBuffer+0x118>)
 8001b9e:	f7ff ff77 	bl	8001a90 <ParseGPGGA>
            }
            if (strncmp(lineBuf, "$GPRMC", 6) == 0 || strncmp(lineBuf, "$GNRMC", 6) == 0)
 8001ba2:	2206      	movs	r2, #6
 8001ba4:	4925      	ldr	r1, [pc, #148]	@ (8001c3c <GPS_ProcessBuffer+0x11c>)
 8001ba6:	4824      	ldr	r0, [pc, #144]	@ (8001c38 <GPS_ProcessBuffer+0x118>)
 8001ba8:	f009 fd94 	bl	800b6d4 <strncmp>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <GPS_ProcessBuffer+0xa2>
 8001bb2:	2206      	movs	r2, #6
 8001bb4:	4923      	ldr	r1, [pc, #140]	@ (8001c44 <GPS_ProcessBuffer+0x124>)
 8001bb6:	4820      	ldr	r0, [pc, #128]	@ (8001c38 <GPS_ProcessBuffer+0x118>)
 8001bb8:	f009 fd8c 	bl	800b6d4 <strncmp>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d103      	bne.n	8001bca <GPS_ProcessBuffer+0xaa>
            {
                ParseGPRMC(lineBuf);
 8001bc2:	481d      	ldr	r0, [pc, #116]	@ (8001c38 <GPS_ProcessBuffer+0x118>)
 8001bc4:	f7ff fea8 	bl	8001918 <ParseGPRMC>
 8001bc8:	e012      	b.n	8001bf0 <GPS_ProcessBuffer+0xd0>
            }
            else if (strncmp(lineBuf, "$GPGGA", 6) == 0 || strncmp(lineBuf, "$GNGGA", 6) == 0)
 8001bca:	2206      	movs	r2, #6
 8001bcc:	491c      	ldr	r1, [pc, #112]	@ (8001c40 <GPS_ProcessBuffer+0x120>)
 8001bce:	481a      	ldr	r0, [pc, #104]	@ (8001c38 <GPS_ProcessBuffer+0x118>)
 8001bd0:	f009 fd80 	bl	800b6d4 <strncmp>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <GPS_ProcessBuffer+0xca>
 8001bda:	2206      	movs	r2, #6
 8001bdc:	491a      	ldr	r1, [pc, #104]	@ (8001c48 <GPS_ProcessBuffer+0x128>)
 8001bde:	4816      	ldr	r0, [pc, #88]	@ (8001c38 <GPS_ProcessBuffer+0x118>)
 8001be0:	f009 fd78 	bl	800b6d4 <strncmp>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <GPS_ProcessBuffer+0xd0>
            {
                ParseGPGGA(lineBuf);
 8001bea:	4813      	ldr	r0, [pc, #76]	@ (8001c38 <GPS_ProcessBuffer+0x118>)
 8001bec:	f7ff ff50 	bl	8001a90 <ParseGPGGA>
            }
            lineIndex = 0;
 8001bf0:	4b10      	ldr	r3, [pc, #64]	@ (8001c34 <GPS_ProcessBuffer+0x114>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
        }
        old_pos++;
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <GPS_ProcessBuffer+0x10c>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <GPS_ProcessBuffer+0x10c>)
 8001c00:	801a      	strh	r2, [r3, #0]
        if (old_pos >= GPS_DMA_BUFFER_SIZE)
 8001c02:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <GPS_ProcessBuffer+0x10c>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c0a:	d302      	bcc.n	8001c12 <GPS_ProcessBuffer+0xf2>
            old_pos = 0;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <GPS_ProcessBuffer+0x10c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	801a      	strh	r2, [r3, #0]
    while (old_pos != now_pos)
 8001c12:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <GPS_ProcessBuffer+0x10c>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	88fa      	ldrh	r2, [r7, #6]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d18c      	bne.n	8001b36 <GPS_ProcessBuffer+0x16>
    }
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200008d8 	.word	0x200008d8
 8001c2c:	200004cc 	.word	0x200004cc
 8001c30:	200000c4 	.word	0x200000c4
 8001c34:	200004ce 	.word	0x200004ce
 8001c38:	200004d0 	.word	0x200004d0
 8001c3c:	0800b780 	.word	0x0800b780
 8001c40:	0800b788 	.word	0x0800b788
 8001c44:	0800b790 	.word	0x0800b790
 8001c48:	0800b798 	.word	0x0800b798

08001c4c <GPS_Init>:

void GPS_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
    memset(&gps_data, 0, sizeof(gps_data));
 8001c50:	2208      	movs	r2, #8
 8001c52:	2100      	movs	r1, #0
 8001c54:	4806      	ldr	r0, [pc, #24]	@ (8001c70 <GPS_Init+0x24>)
 8001c56:	f009 fd35 	bl	800b6c4 <memset>
    memset(gps_dma_buffer, 0, GPS_DMA_BUFFER_SIZE);
 8001c5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4804      	ldr	r0, [pc, #16]	@ (8001c74 <GPS_Init+0x28>)
 8001c62:	f009 fd2f 	bl	800b6c4 <memset>
    old_pos = 0;
 8001c66:	4b04      	ldr	r3, [pc, #16]	@ (8001c78 <GPS_Init+0x2c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	801a      	strh	r2, [r3, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	200004c4 	.word	0x200004c4
 8001c74:	200000c4 	.word	0x200000c4
 8001c78:	200004cc 	.word	0x200004cc

08001c7c <ConvertUtcToLocalTime>:

void ConvertUtcToLocalTime(uint8_t utcHours, uint8_t utcMinutes,
		uint8_t utcSeconds, uint8_t utcDay, uint8_t utcMonth, uint8_t utcYear,
		RTC_TimeTypeDef *localTime, RTC_DateTypeDef *localDate) {
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b08d      	sub	sp, #52	@ 0x34
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4604      	mov	r4, r0
 8001c84:	4608      	mov	r0, r1
 8001c86:	4611      	mov	r1, r2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4623      	mov	r3, r4
 8001c8c:	71fb      	strb	r3, [r7, #7]
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71bb      	strb	r3, [r7, #6]
 8001c92:	460b      	mov	r3, r1
 8001c94:	717b      	strb	r3, [r7, #5]
 8001c96:	4613      	mov	r3, r2
 8001c98:	713b      	strb	r3, [r7, #4]
	// UTC+1 dla Polski w czasie zimowym, a UTC+2 latem:
	// year w RTC to 00..99, można przerobić na 20xx itp.
	// Załóżmy, że gps_data.year = 24 oznacza 2024 (proste uproszczenie)
	uint16_t fullYear = 2000 + utcYear;
 8001c9a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001ca4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int offset = 1;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (IsDstActive(fullYear, utcMonth, utcDay)) {
 8001caa:	793a      	ldrb	r2, [r7, #4]
 8001cac:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 8001cb0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f909 	bl	8001eca <IsDstActive>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <ConvertUtcToLocalTime+0x46>
		offset = 2;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	int hour = utcHours + offset;
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cc6:	4413      	add	r3, r2
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
	int minute = utcMinutes;
 8001cca:	79bb      	ldrb	r3, [r7, #6]
 8001ccc:	61bb      	str	r3, [r7, #24]
	int second = utcSeconds;
 8001cce:	797b      	ldrb	r3, [r7, #5]
 8001cd0:	617b      	str	r3, [r7, #20]

	int day = utcDay;
 8001cd2:	793b      	ldrb	r3, [r7, #4]
 8001cd4:	623b      	str	r3, [r7, #32]
	int month = utcMonth;
 8001cd6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001cda:	61fb      	str	r3, [r7, #28]
	int yearXX = utcYear;   // 0..99 w RTC
 8001cdc:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001ce0:	613b      	str	r3, [r7, #16]


	DOW = GetDayOfWeek(fullYear, utcMonth, utcDay);
 8001ce2:	793a      	ldrb	r2, [r7, #4]
 8001ce4:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 8001ce8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f92a 	bl	8001f44 <GetDayOfWeek>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8001de4 <ConvertUtcToLocalTime+0x168>)
 8001cf6:	701a      	strb	r2, [r3, #0]

	// Ale do obliczeń powyżej używamy fullYear (np. 2024)
	// Korekty przekroczeń doby
	if (hour >= 24) {
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	2b17      	cmp	r3, #23
 8001cfc:	dd20      	ble.n	8001d40 <ConvertUtcToLocalTime+0xc4>
		hour -= 24;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	3b18      	subs	r3, #24
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
		day++;
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	3301      	adds	r3, #1
 8001d08:	623b      	str	r3, [r7, #32]
		// sprawdź, czy nie przekraczamy dni w tym miesiącu
		uint8_t mdays = DaysInMonth(fullYear, month);
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d10:	4611      	mov	r1, r2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f86a 	bl	8001dec <DaysInMonth>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	73fb      	strb	r3, [r7, #15]
		if (day > mdays) {
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	6a3a      	ldr	r2, [r7, #32]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dd2d      	ble.n	8001d80 <ConvertUtcToLocalTime+0x104>
			day = 1;
 8001d24:	2301      	movs	r3, #1
 8001d26:	623b      	str	r3, [r7, #32]
			month++;
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]
			if (month > 12) {
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	2b0c      	cmp	r3, #12
 8001d32:	dd25      	ble.n	8001d80 <ConvertUtcToLocalTime+0x104>
				month = 1;
 8001d34:	2301      	movs	r3, #1
 8001d36:	61fb      	str	r3, [r7, #28]
				fullYear++;
 8001d38:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001d3e:	e01f      	b.n	8001d80 <ConvertUtcToLocalTime+0x104>
			}
		}
	} else if (hour < 0) {
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	da1c      	bge.n	8001d80 <ConvertUtcToLocalTime+0x104>
		hour += 24;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	3318      	adds	r3, #24
 8001d4a:	627b      	str	r3, [r7, #36]	@ 0x24
		day--;
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	623b      	str	r3, [r7, #32]
		if (day < 1) {
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	dc13      	bgt.n	8001d80 <ConvertUtcToLocalTime+0x104>
			// cofka do poprzedniego miesiąca
			month--;
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	61fb      	str	r3, [r7, #28]
			if (month < 1) {
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	dc04      	bgt.n	8001d6e <ConvertUtcToLocalTime+0xf2>
				month = 12;
 8001d64:	230c      	movs	r3, #12
 8001d66:	61fb      	str	r3, [r7, #28]
				fullYear--;
 8001d68:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			}
			day = DaysInMonth(fullYear, month);
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d74:	4611      	mov	r1, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f838 	bl	8001dec <DaysInMonth>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	623b      	str	r3, [r7, #32]
		}
	}
	// fullYear z powrotem do 00..99
	// Proste: np. 2025 -> 25
	yearXX = (uint8_t) (fullYear % 100);
 8001d80:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d82:	4a19      	ldr	r2, [pc, #100]	@ (8001de8 <ConvertUtcToLocalTime+0x16c>)
 8001d84:	fba2 1203 	umull	r1, r2, r2, r3
 8001d88:	0952      	lsrs	r2, r2, #5
 8001d8a:	2164      	movs	r1, #100	@ 0x64
 8001d8c:	fb01 f202 	mul.w	r2, r1, r2
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	613b      	str	r3, [r7, #16]
	// Zapis do struktur RTC
	localTime->Hours = hour;
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d9e:	701a      	strb	r2, [r3, #0]
	localTime->Minutes = minute;
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001da6:	705a      	strb	r2, [r3, #1]
	localTime->Seconds = second;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dae:	709a      	strb	r2, [r3, #2]
	localTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001db0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
	localTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8001db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
	localDate->Date = (uint8_t) day;
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001dc2:	709a      	strb	r2, [r3, #2]
	localDate->Month = (uint8_t) month;
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001dca:	705a      	strb	r2, [r3, #1]
	localDate->Year = (uint8_t) yearXX;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001dd2:	70da      	strb	r2, [r3, #3]
	localDate->WeekDay = RTC_WEEKDAY_MONDAY; // albo oblicz w oparciu o GetDayOfWeek
 8001dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
}
 8001dda:	bf00      	nop
 8001ddc:	3734      	adds	r7, #52	@ 0x34
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd90      	pop	{r4, r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200000c0 	.word	0x200000c0
 8001de8:	51eb851f 	.word	0x51eb851f

08001dec <DaysInMonth>:
uint8_t DaysInMonth(uint16_t year, uint8_t month) {
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	460a      	mov	r2, r1
 8001df6:	80fb      	strh	r3, [r7, #6]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	717b      	strb	r3, [r7, #5]
	static const uint8_t daysTable[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30,
			31, 30, 31 };
	if (month == 2)  // luty
 8001dfc:	797b      	ldrb	r3, [r7, #5]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d12f      	bne.n	8001e62 <DaysInMonth+0x76>
			{
		// Sprawdź, czy rok przestępny
		// „Rok przestępny” jeżeli:
		//  - rok % 4 == 0 i rok % 100 != 0
		//  - lub rok % 400 == 0
		bool leap = false;
 8001e02:	2300      	movs	r3, #0
 8001e04:	73fb      	strb	r3, [r7, #15]
		if ((year % 400) == 0) {
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	4a1b      	ldr	r2, [pc, #108]	@ (8001e78 <DaysInMonth+0x8c>)
 8001e0a:	fba2 1203 	umull	r1, r2, r2, r3
 8001e0e:	09d2      	lsrs	r2, r2, #7
 8001e10:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001e14:	fb01 f202 	mul.w	r2, r1, r2
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d102      	bne.n	8001e26 <DaysInMonth+0x3a>
			leap = true;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
 8001e24:	e016      	b.n	8001e54 <DaysInMonth+0x68>
		} else if ((year % 100) == 0) {
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	4a13      	ldr	r2, [pc, #76]	@ (8001e78 <DaysInMonth+0x8c>)
 8001e2a:	fba2 1203 	umull	r1, r2, r2, r3
 8001e2e:	0952      	lsrs	r2, r2, #5
 8001e30:	2164      	movs	r1, #100	@ 0x64
 8001e32:	fb01 f202 	mul.w	r2, r1, r2
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <DaysInMonth+0x58>
			leap = false;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	e007      	b.n	8001e54 <DaysInMonth+0x68>
		} else if ((year % 4) == 0) {
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <DaysInMonth+0x68>
			leap = true;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
		}
		return (leap ? 29 : 28);
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <DaysInMonth+0x72>
 8001e5a:	231d      	movs	r3, #29
 8001e5c:	e005      	b.n	8001e6a <DaysInMonth+0x7e>
 8001e5e:	231c      	movs	r3, #28
 8001e60:	e003      	b.n	8001e6a <DaysInMonth+0x7e>
	}
	return daysTable[month - 1];
 8001e62:	797b      	ldrb	r3, [r7, #5]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	4a05      	ldr	r2, [pc, #20]	@ (8001e7c <DaysInMonth+0x90>)
 8001e68:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	51eb851f 	.word	0x51eb851f
 8001e7c:	0800b83c 	.word	0x0800b83c

08001e80 <GetLastSundayOfMonth>:
/**
 * @brief Zwraca numer dnia (1..31) będący ostatnią niedzielą w danym miesiącu.
 *        Np. dla roku=2024, marzec=3, może zwrócić 31, 30, 29... w zależności,
 *        co jest faktycznie niedzielą.
 */
uint8_t GetLastSundayOfMonth(uint16_t year, uint8_t month) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	460a      	mov	r2, r1
 8001e8a:	80fb      	strh	r3, [r7, #6]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	717b      	strb	r3, [r7, #5]
	uint8_t d = DaysInMonth(year, month);
 8001e90:	797a      	ldrb	r2, [r7, #5]
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ffa8 	bl	8001dec <DaysInMonth>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	73fb      	strb	r3, [r7, #15]
	while (1) {
		uint8_t dow = GetDayOfWeek(year, month, d);
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	7979      	ldrb	r1, [r7, #5]
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f84c 	bl	8001f44 <GetDayOfWeek>
 8001eac:	4603      	mov	r3, r0
 8001eae:	73bb      	strb	r3, [r7, #14]



		if (dow == 0) { // 0 = niedziela (Sunday)
 8001eb0:	7bbb      	ldrb	r3, [r7, #14]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <GetLastSundayOfMonth+0x3a>
			return d;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	e003      	b.n	8001ec2 <GetLastSundayOfMonth+0x42>
		}
		d--;
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
	while (1) {
 8001ec0:	e7ee      	b.n	8001ea0 <GetLastSundayOfMonth+0x20>
	}
	// Teoretycznie dojdziemy na pewno do jakiejś niedzieli,
	// więc break nie jest potrzebny.
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <IsDstActive>:

bool IsDstActive(uint16_t year, uint8_t month, uint8_t day) {
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b084      	sub	sp, #16
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	80fb      	strh	r3, [r7, #6]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	717b      	strb	r3, [r7, #5]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	713b      	strb	r3, [r7, #4]
	// Ostatnia niedziela marca
	uint8_t lastSundayMarch = GetLastSundayOfMonth(year, 3);
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	2103      	movs	r1, #3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ffcd 	bl	8001e80 <GetLastSundayOfMonth>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	73fb      	strb	r3, [r7, #15]
	// Ostatnia niedziela października
	uint8_t lastSundayOctober = GetLastSundayOfMonth(year, 10);
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	210a      	movs	r1, #10
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ffc6 	bl	8001e80 <GetLastSundayOfMonth>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	73bb      	strb	r3, [r7, #14]
	// Warunek: jeżeli data >= (3, lastSundayMarch) i data < (10, lastSundayOctober),
	// to DST = true.
	// Oczywiście trzeba uwzględnić, że jeśli month < 3 to zawsze false,
	// jeśli month > 10 to zawsze false, itd.
	// A) Jeżeli miesiąc < 3 -> zima
	if (month < 3) {
 8001ef8:	797b      	ldrb	r3, [r7, #5]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d801      	bhi.n	8001f02 <IsDstActive+0x38>
		return false;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e01b      	b.n	8001f3a <IsDstActive+0x70>
	}
	// B) Jeżeli miesiąc > 10 -> zima
	if (month > 10) {
 8001f02:	797b      	ldrb	r3, [r7, #5]
 8001f04:	2b0a      	cmp	r3, #10
 8001f06:	d901      	bls.n	8001f0c <IsDstActive+0x42>
		return false;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e016      	b.n	8001f3a <IsDstActive+0x70>
	}
	// C) Jeżeli to marzec:
	if (month == 3) {
 8001f0c:	797b      	ldrb	r3, [r7, #5]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d107      	bne.n	8001f22 <IsDstActive+0x58>
		// czy w danym dniu jest >= ostatniej niedzieli?
		// jeśli tak -> letni
		// jeśli nie -> zimowy
		if (day < lastSundayMarch) {
 8001f12:	793a      	ldrb	r2, [r7, #4]
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d201      	bcs.n	8001f1e <IsDstActive+0x54>
			return false;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e00d      	b.n	8001f3a <IsDstActive+0x70>
		} else {
			return true;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00b      	b.n	8001f3a <IsDstActive+0x70>
		}
	}
	// D) Jeżeli to październik
	if (month == 10) {
 8001f22:	797b      	ldrb	r3, [r7, #5]
 8001f24:	2b0a      	cmp	r3, #10
 8001f26:	d107      	bne.n	8001f38 <IsDstActive+0x6e>
		// czy w danym dniu jest < ostatniej niedzieli?
		// jeśli tak -> letni
		// jeśli >= -> zimowy
		if (day < lastSundayOctober) {
 8001f28:	793a      	ldrb	r2, [r7, #4]
 8001f2a:	7bbb      	ldrb	r3, [r7, #14]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d201      	bcs.n	8001f34 <IsDstActive+0x6a>
			return true;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e002      	b.n	8001f3a <IsDstActive+0x70>
		} else {
			return false;
 8001f34:	2300      	movs	r3, #0
 8001f36:	e000      	b.n	8001f3a <IsDstActive+0x70>
		}
	}
	// E) W pozostałych miesiącach 4..9 włącznie mamy 100% DST:
	return true;
 8001f38:	2301      	movs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <GetDayOfWeek>:
			// Obsługa błędu ustawiania daty
			Error_Handler();
		}
	}
}
uint8_t GetDayOfWeek(uint16_t year, uint8_t month, uint8_t day) {
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	80fb      	strh	r3, [r7, #6]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	717b      	strb	r3, [r7, #5]
 8001f52:	4613      	mov	r3, r2
 8001f54:	713b      	strb	r3, [r7, #4]
	// Zeller’s Congruence – wersja dla kalendarza gregoriańskiego
	// Aby działała poprawnie dla stycznia i lutego, „przesuwamy” je na poprzedni rok:
	// styczeń -> 13 poprzedniego roku
	// luty    -> 14 poprzedniego roku
	if (month < 3) {
 8001f56:	797b      	ldrb	r3, [r7, #5]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d805      	bhi.n	8001f68 <GetDayOfWeek+0x24>
		month += 12;
 8001f5c:	797b      	ldrb	r3, [r7, #5]
 8001f5e:	330c      	adds	r3, #12
 8001f60:	717b      	strb	r3, [r7, #5]
		year -= 1;
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	80fb      	strh	r3, [r7, #6]
	}
	uint16_t K = (uint16_t) (year % 100);
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	4a23      	ldr	r2, [pc, #140]	@ (8001ff8 <GetDayOfWeek+0xb4>)
 8001f6c:	fba2 1203 	umull	r1, r2, r2, r3
 8001f70:	0952      	lsrs	r2, r2, #5
 8001f72:	2164      	movs	r1, #100	@ 0x64
 8001f74:	fb01 f202 	mul.w	r2, r1, r2
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	817b      	strh	r3, [r7, #10]
	uint16_t J = (uint16_t) (year / 100);
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff8 <GetDayOfWeek+0xb4>)
 8001f80:	fba2 2303 	umull	r2, r3, r2, r3
 8001f84:	095b      	lsrs	r3, r3, #5
 8001f86:	813b      	strh	r3, [r7, #8]
	// day of week in [0..6], 0=Sunday
	int32_t h = (int32_t) (day + (13 * (month + 1)) / 5 + K + (K / 4) + (J / 4)
 8001f88:	7939      	ldrb	r1, [r7, #4]
 8001f8a:	797b      	ldrb	r3, [r7, #5]
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	4a18      	ldr	r2, [pc, #96]	@ (8001ffc <GetDayOfWeek+0xb8>)
 8001f9a:	fb82 0203 	smull	r0, r2, r2, r3
 8001f9e:	1052      	asrs	r2, r2, #1
 8001fa0:	17db      	asrs	r3, r3, #31
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	18ca      	adds	r2, r1, r3
 8001fa6:	897b      	ldrh	r3, [r7, #10]
 8001fa8:	4413      	add	r3, r2
 8001faa:	897a      	ldrh	r2, [r7, #10]
 8001fac:	0892      	lsrs	r2, r2, #2
 8001fae:	b292      	uxth	r2, r2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	893a      	ldrh	r2, [r7, #8]
 8001fb4:	0892      	lsrs	r2, r2, #2
 8001fb6:	b292      	uxth	r2, r2
 8001fb8:	441a      	add	r2, r3
			- (2 * J));
 8001fba:	893b      	ldrh	r3, [r7, #8]
 8001fbc:	005b      	lsls	r3, r3, #1
	int32_t h = (int32_t) (day + (13 * (month + 1)) / 5 + K + (K / 4) + (J / 4)
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	60fb      	str	r3, [r7, #12]
	// W C++: h = (h % 7 + 7) % 7  (żeby się upewnić, że jest w 0..6):
	h = h % 7;
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <GetDayOfWeek+0xbc>)
 8001fc6:	fb83 1302 	smull	r1, r3, r3, r2
 8001fca:	4413      	add	r3, r2
 8001fcc:	1099      	asrs	r1, r3, #2
 8001fce:	17d3      	asrs	r3, r2, #31
 8001fd0:	1ac9      	subs	r1, r1, r3
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	1a5b      	subs	r3, r3, r1
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	60fb      	str	r3, [r7, #12]
	if (h < 0) {
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	da02      	bge.n	8001fe8 <GetDayOfWeek+0xa4>
		h += 7;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3307      	adds	r3, #7
 8001fe6:	60fb      	str	r3, [r7, #12]
	}
	return (uint8_t) h;  // 0..6
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	b2db      	uxtb	r3, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	51eb851f 	.word	0x51eb851f
 8001ffc:	66666667 	.word	0x66666667
 8002000:	92492493 	.word	0x92492493

08002004 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002008:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <MX_I2C2_Init+0x50>)
 800200a:	4a13      	ldr	r2, [pc, #76]	@ (8002058 <MX_I2C2_Init+0x54>)
 800200c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800200e:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <MX_I2C2_Init+0x50>)
 8002010:	4a12      	ldr	r2, [pc, #72]	@ (800205c <MX_I2C2_Init+0x58>)
 8002012:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002014:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <MX_I2C2_Init+0x50>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800201a:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <MX_I2C2_Init+0x50>)
 800201c:	2200      	movs	r2, #0
 800201e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <MX_I2C2_Init+0x50>)
 8002022:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002026:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002028:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <MX_I2C2_Init+0x50>)
 800202a:	2200      	movs	r2, #0
 800202c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <MX_I2C2_Init+0x50>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002034:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <MX_I2C2_Init+0x50>)
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800203a:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <MX_I2C2_Init+0x50>)
 800203c:	2200      	movs	r2, #0
 800203e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002040:	4804      	ldr	r0, [pc, #16]	@ (8002054 <MX_I2C2_Init+0x50>)
 8002042:	f003 fbbb 	bl	80057bc <HAL_I2C_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800204c:	f000 fc08 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000550 	.word	0x20000550
 8002058:	40005800 	.word	0x40005800
 800205c:	000186a0 	.word	0x000186a0

08002060 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	@ 0x28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a58      	ldr	r2, [pc, #352]	@ (80021e0 <HAL_I2C_MspInit+0x180>)
 800207e:	4293      	cmp	r3, r2
 8002080:	f040 80a9 	bne.w	80021d6 <HAL_I2C_MspInit+0x176>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	4b56      	ldr	r3, [pc, #344]	@ (80021e4 <HAL_I2C_MspInit+0x184>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208c:	4a55      	ldr	r2, [pc, #340]	@ (80021e4 <HAL_I2C_MspInit+0x184>)
 800208e:	f043 0302 	orr.w	r3, r3, #2
 8002092:	6313      	str	r3, [r2, #48]	@ 0x30
 8002094:	4b53      	ldr	r3, [pc, #332]	@ (80021e4 <HAL_I2C_MspInit+0x184>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020a6:	2312      	movs	r3, #18
 80020a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020b2:	2304      	movs	r3, #4
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	4619      	mov	r1, r3
 80020bc:	484a      	ldr	r0, [pc, #296]	@ (80021e8 <HAL_I2C_MspInit+0x188>)
 80020be:	f003 f9c7 	bl	8005450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020c2:	2308      	movs	r3, #8
 80020c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c6:	2312      	movs	r3, #18
 80020c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80020d2:	2309      	movs	r3, #9
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	4619      	mov	r1, r3
 80020dc:	4842      	ldr	r0, [pc, #264]	@ (80021e8 <HAL_I2C_MspInit+0x188>)
 80020de:	f003 f9b7 	bl	8005450 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b3f      	ldr	r3, [pc, #252]	@ (80021e4 <HAL_I2C_MspInit+0x184>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	4a3e      	ldr	r2, [pc, #248]	@ (80021e4 <HAL_I2C_MspInit+0x184>)
 80020ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f2:	4b3c      	ldr	r3, [pc, #240]	@ (80021e4 <HAL_I2C_MspInit+0x184>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80020fe:	4b3b      	ldr	r3, [pc, #236]	@ (80021ec <HAL_I2C_MspInit+0x18c>)
 8002100:	4a3b      	ldr	r2, [pc, #236]	@ (80021f0 <HAL_I2C_MspInit+0x190>)
 8002102:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8002104:	4b39      	ldr	r3, [pc, #228]	@ (80021ec <HAL_I2C_MspInit+0x18c>)
 8002106:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800210a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800210c:	4b37      	ldr	r3, [pc, #220]	@ (80021ec <HAL_I2C_MspInit+0x18c>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002112:	4b36      	ldr	r3, [pc, #216]	@ (80021ec <HAL_I2C_MspInit+0x18c>)
 8002114:	2200      	movs	r2, #0
 8002116:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002118:	4b34      	ldr	r3, [pc, #208]	@ (80021ec <HAL_I2C_MspInit+0x18c>)
 800211a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800211e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002120:	4b32      	ldr	r3, [pc, #200]	@ (80021ec <HAL_I2C_MspInit+0x18c>)
 8002122:	2200      	movs	r2, #0
 8002124:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002126:	4b31      	ldr	r3, [pc, #196]	@ (80021ec <HAL_I2C_MspInit+0x18c>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800212c:	4b2f      	ldr	r3, [pc, #188]	@ (80021ec <HAL_I2C_MspInit+0x18c>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002132:	4b2e      	ldr	r3, [pc, #184]	@ (80021ec <HAL_I2C_MspInit+0x18c>)
 8002134:	2200      	movs	r2, #0
 8002136:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002138:	4b2c      	ldr	r3, [pc, #176]	@ (80021ec <HAL_I2C_MspInit+0x18c>)
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800213e:	482b      	ldr	r0, [pc, #172]	@ (80021ec <HAL_I2C_MspInit+0x18c>)
 8002140:	f002 fdda 	bl	8004cf8 <HAL_DMA_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 800214a:	f000 fb89 	bl	8002860 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a26      	ldr	r2, [pc, #152]	@ (80021ec <HAL_I2C_MspInit+0x18c>)
 8002152:	639a      	str	r2, [r3, #56]	@ 0x38
 8002154:	4a25      	ldr	r2, [pc, #148]	@ (80021ec <HAL_I2C_MspInit+0x18c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800215a:	4b26      	ldr	r3, [pc, #152]	@ (80021f4 <HAL_I2C_MspInit+0x194>)
 800215c:	4a26      	ldr	r2, [pc, #152]	@ (80021f8 <HAL_I2C_MspInit+0x198>)
 800215e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8002160:	4b24      	ldr	r3, [pc, #144]	@ (80021f4 <HAL_I2C_MspInit+0x194>)
 8002162:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002166:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002168:	4b22      	ldr	r3, [pc, #136]	@ (80021f4 <HAL_I2C_MspInit+0x194>)
 800216a:	2240      	movs	r2, #64	@ 0x40
 800216c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800216e:	4b21      	ldr	r3, [pc, #132]	@ (80021f4 <HAL_I2C_MspInit+0x194>)
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002174:	4b1f      	ldr	r3, [pc, #124]	@ (80021f4 <HAL_I2C_MspInit+0x194>)
 8002176:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800217a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800217c:	4b1d      	ldr	r3, [pc, #116]	@ (80021f4 <HAL_I2C_MspInit+0x194>)
 800217e:	2200      	movs	r2, #0
 8002180:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002182:	4b1c      	ldr	r3, [pc, #112]	@ (80021f4 <HAL_I2C_MspInit+0x194>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002188:	4b1a      	ldr	r3, [pc, #104]	@ (80021f4 <HAL_I2C_MspInit+0x194>)
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800218e:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <HAL_I2C_MspInit+0x194>)
 8002190:	2200      	movs	r2, #0
 8002192:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002194:	4b17      	ldr	r3, [pc, #92]	@ (80021f4 <HAL_I2C_MspInit+0x194>)
 8002196:	2200      	movs	r2, #0
 8002198:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800219a:	4816      	ldr	r0, [pc, #88]	@ (80021f4 <HAL_I2C_MspInit+0x194>)
 800219c:	f002 fdac 	bl	8004cf8 <HAL_DMA_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_I2C_MspInit+0x14a>
    {
      Error_Handler();
 80021a6:	f000 fb5b 	bl	8002860 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a11      	ldr	r2, [pc, #68]	@ (80021f4 <HAL_I2C_MspInit+0x194>)
 80021ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80021b0:	4a10      	ldr	r2, [pc, #64]	@ (80021f4 <HAL_I2C_MspInit+0x194>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	2021      	movs	r0, #33	@ 0x21
 80021bc:	f002 fd65 	bl	8004c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80021c0:	2021      	movs	r0, #33	@ 0x21
 80021c2:	f002 fd7e 	bl	8004cc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	2022      	movs	r0, #34	@ 0x22
 80021cc:	f002 fd5d 	bl	8004c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80021d0:	2022      	movs	r0, #34	@ 0x22
 80021d2:	f002 fd76 	bl	8004cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80021d6:	bf00      	nop
 80021d8:	3728      	adds	r7, #40	@ 0x28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40005800 	.word	0x40005800
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020400 	.word	0x40020400
 80021ec:	200005a4 	.word	0x200005a4
 80021f0:	40026040 	.word	0x40026040
 80021f4:	20000604 	.word	0x20000604
 80021f8:	400260b8 	.word	0x400260b8

080021fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002202:	f002 f8bb 	bl	800437c <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002206:	f000 fa77 	bl	80026f8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	// Odblokowanie dostępu do backupu (dla RTC)
	HAL_PWR_EnableBkUpAccess();
 800220a:	f005 ffb3 	bl	8008174 <HAL_PWR_EnableBkUpAccess>

	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800221e:	2302      	movs	r3, #2
 8002220:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002222:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002226:	61bb      	str	r3, [r7, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	4618      	mov	r0, r3
 800222e:	f006 fc0d 	bl	8008a4c <HAL_RCCEx_PeriphCLKConfig>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002232:	f7ff fabb 	bl	80017ac <MX_GPIO_Init>
	MX_DMA_Init();
 8002236:	f7ff fa73 	bl	8001720 <MX_DMA_Init>
	MX_SPI1_Init();
 800223a:	f001 fc49 	bl	8003ad0 <MX_SPI1_Init>
	MX_TIM1_Init();
 800223e:	f001 fdc3 	bl	8003dc8 <MX_TIM1_Init>
	MX_RTC_Init();
 8002242:	f000 fb13 	bl	800286c <MX_RTC_Init>
	MX_I2C2_Init();
 8002246:	f7ff fedd 	bl	8002004 <MX_I2C2_Init>
	MX_ADC1_Init();
 800224a:	f7fe f93b 	bl	80004c4 <MX_ADC1_Init>
	MX_TIM4_Init();
 800224e:	f001 fe5b 	bl	8003f08 <MX_TIM4_Init>
	MX_TIM5_Init();
 8002252:	f001 fead 	bl	8003fb0 <MX_TIM5_Init>
	MX_USART1_UART_Init();
 8002256:	f001 ffc1 	bl	80041dc <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	// Start PWM na TIM1, kanał 1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800225a:	2100      	movs	r1, #0
 800225c:	489a      	ldr	r0, [pc, #616]	@ (80024c8 <main+0x2cc>)
 800225e:	f007 fcb1 	bl	8009bc4 <HAL_TIM_PWM_Start>
	// Ustaw wypełnienie do połowy
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (htim1.Init.Period + 1) / 2);
 8002262:	4b99      	ldr	r3, [pc, #612]	@ (80024c8 <main+0x2cc>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	4b97      	ldr	r3, [pc, #604]	@ (80024c8 <main+0x2cc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	0852      	lsrs	r2, r2, #1
 800226e:	635a      	str	r2, [r3, #52]	@ 0x34

	// Ustaw przykładową jasność z korekcją gamma
	SetPWMPercentGamma(30);
 8002270:	201e      	movs	r0, #30
 8002272:	f7ff f85b 	bl	800132c <SetPWMPercentGamma>

	// Wyczyść strukturę zegara i wyślij do rejestrów
	ClearClockBits(&clockReg);
 8002276:	4895      	ldr	r0, [pc, #596]	@ (80024cc <main+0x2d0>)
 8002278:	f7fe fc60 	bl	8000b3c <ClearClockBits>
	UpdateAllDisplays(&clockReg);
 800227c:	4893      	ldr	r0, [pc, #588]	@ (80024cc <main+0x2d0>)
 800227e:	f7ff f811 	bl	80012a4 <UpdateAllDisplays>
	SLIDER_Init();
 8002282:	f000 feb3 	bl	8002fec <SLIDER_Init>
	SHT30_Init();
 8002286:	f000 fb77 	bl	8002978 <SHT30_Init>
	// Ustaw czas RTC (przykładowo)
	//Set_RTC_Time();
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800228a:	213c      	movs	r1, #60	@ 0x3c
 800228c:	4890      	ldr	r0, [pc, #576]	@ (80024d0 <main+0x2d4>)
 800228e:	f007 fdef 	bl	8009e70 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8002292:	4890      	ldr	r0, [pc, #576]	@ (80024d4 <main+0x2d8>)
 8002294:	f007 fbda 	bl	8009a4c <HAL_TIM_Base_Start_IT>
	GPS_Init();
 8002298:	f7ff fcd8 	bl	8001c4c <GPS_Init>
	if (HAL_UART_Receive_DMA(&huart1, gps_dma_buffer, GPS_DMA_BUFFER_SIZE)
 800229c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022a0:	498d      	ldr	r1, [pc, #564]	@ (80024d8 <main+0x2dc>)
 80022a2:	488e      	ldr	r0, [pc, #568]	@ (80024dc <main+0x2e0>)
 80022a4:	f008 fd26 	bl	800acf4 <HAL_UART_Receive_DMA>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <main+0xb6>
			!= HAL_OK) {
		Error_Handler();
 80022ae:	f000 fad7 	bl	8002860 <Error_Handler>
	}

	// Rejestracja callbacków
	Button_RegisterPressCallback(0, Button1_Pressed);
 80022b2:	498b      	ldr	r1, [pc, #556]	@ (80024e0 <main+0x2e4>)
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7fe f99b 	bl	80005f0 <Button_RegisterPressCallback>
	Button_RegisterDoubleClickCallback(0, Button1_DoubleClicked);
 80022ba:	498a      	ldr	r1, [pc, #552]	@ (80024e4 <main+0x2e8>)
 80022bc:	2000      	movs	r0, #0
 80022be:	f7fe f9cf 	bl	8000660 <Button_RegisterDoubleClickCallback>
	Button_RegisterHoldCallback(0, Button1_Held);
 80022c2:	4989      	ldr	r1, [pc, #548]	@ (80024e8 <main+0x2ec>)
 80022c4:	2000      	movs	r0, #0
 80022c6:	f7fe f9af 	bl	8000628 <Button_RegisterHoldCallback>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// Odczytaj aktualny czas z RTC
		GPS_ProcessBuffer();
 80022ca:	f7ff fc29 	bl	8001b20 <GPS_ProcessBuffer>
		Get_RTC_Time();
 80022ce:	f000 fa73 	bl	80027b8 <Get_RTC_Time>

		// Sekundnik – zapal diody od 0 do sTime.Seconds
		//SetSecondLedAccumulating2(&clockReg, sTime.Seconds);
		if (encoderValue == 0) {
 80022d2:	4b86      	ldr	r3, [pc, #536]	@ (80024ec <main+0x2f0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d125      	bne.n	8002326 <main+0x12a>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 80022da:	4b85      	ldr	r3, [pc, #532]	@ (80024f0 <main+0x2f4>)
 80022dc:	789b      	ldrb	r3, [r3, #2]
 80022de:	4a84      	ldr	r2, [pc, #528]	@ (80024f0 <main+0x2f4>)
 80022e0:	7852      	ldrb	r2, [r2, #1]
 80022e2:	4619      	mov	r1, r3
 80022e4:	4879      	ldr	r0, [pc, #484]	@ (80024cc <main+0x2d0>)
 80022e6:	f7ff f84d 	bl	8001384 <SetSecondLedEvenOdd>
			SetHourRingCustom(&clockReg, 1, 1);
 80022ea:	2201      	movs	r2, #1
 80022ec:	2101      	movs	r1, #1
 80022ee:	4877      	ldr	r0, [pc, #476]	@ (80024cc <main+0x2d0>)
 80022f0:	f7ff f98c 	bl	800160c <SetHourRingCustom>
			colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 80022f4:	4b7f      	ldr	r3, [pc, #508]	@ (80024f4 <main+0x2f8>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <main+0x10e>
 80022fe:	2201      	movs	r2, #1
 8002300:	2101      	movs	r1, #1
 8002302:	4872      	ldr	r0, [pc, #456]	@ (80024cc <main+0x2d0>)
 8002304:	f7ff f950 	bl	80015a8 <SetDots>
 8002308:	e004      	b.n	8002314 <main+0x118>
 800230a:	2200      	movs	r2, #0
 800230c:	2100      	movs	r1, #0
 800230e:	486f      	ldr	r0, [pc, #444]	@ (80024cc <main+0x2d0>)
 8002310:	f7ff f94a 	bl	80015a8 <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8002314:	4b76      	ldr	r3, [pc, #472]	@ (80024f0 <main+0x2f4>)
 8002316:	7819      	ldrb	r1, [r3, #0]
 8002318:	4b75      	ldr	r3, [pc, #468]	@ (80024f0 <main+0x2f4>)
 800231a:	785a      	ldrb	r2, [r3, #1]
 800231c:	4b74      	ldr	r3, [pc, #464]	@ (80024f0 <main+0x2f4>)
 800231e:	789b      	ldrb	r3, [r3, #2]
 8002320:	486a      	ldr	r0, [pc, #424]	@ (80024cc <main+0x2d0>)
 8002322:	f7fe fdbf 	bl	8000ea4 <SetTime7Seg_Top>
					sTime.Seconds);
		}

		if (encoderValue == 1) {
 8002326:	4b71      	ldr	r3, [pc, #452]	@ (80024ec <main+0x2f0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d125      	bne.n	800237a <main+0x17e>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 800232e:	4b70      	ldr	r3, [pc, #448]	@ (80024f0 <main+0x2f4>)
 8002330:	789b      	ldrb	r3, [r3, #2]
 8002332:	4a6f      	ldr	r2, [pc, #444]	@ (80024f0 <main+0x2f4>)
 8002334:	7852      	ldrb	r2, [r2, #1]
 8002336:	4619      	mov	r1, r3
 8002338:	4864      	ldr	r0, [pc, #400]	@ (80024cc <main+0x2d0>)
 800233a:	f7ff f823 	bl	8001384 <SetSecondLedEvenOdd>
			SetHourRingCustom(&clockReg, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	4862      	ldr	r0, [pc, #392]	@ (80024cc <main+0x2d0>)
 8002344:	f7ff f962 	bl	800160c <SetHourRingCustom>
			colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 8002348:	4b6a      	ldr	r3, [pc, #424]	@ (80024f4 <main+0x2f8>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <main+0x162>
 8002352:	2201      	movs	r2, #1
 8002354:	2101      	movs	r1, #1
 8002356:	485d      	ldr	r0, [pc, #372]	@ (80024cc <main+0x2d0>)
 8002358:	f7ff f926 	bl	80015a8 <SetDots>
 800235c:	e004      	b.n	8002368 <main+0x16c>
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	485a      	ldr	r0, [pc, #360]	@ (80024cc <main+0x2d0>)
 8002364:	f7ff f920 	bl	80015a8 <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8002368:	4b61      	ldr	r3, [pc, #388]	@ (80024f0 <main+0x2f4>)
 800236a:	7819      	ldrb	r1, [r3, #0]
 800236c:	4b60      	ldr	r3, [pc, #384]	@ (80024f0 <main+0x2f4>)
 800236e:	785a      	ldrb	r2, [r3, #1]
 8002370:	4b5f      	ldr	r3, [pc, #380]	@ (80024f0 <main+0x2f4>)
 8002372:	789b      	ldrb	r3, [r3, #2]
 8002374:	4855      	ldr	r0, [pc, #340]	@ (80024cc <main+0x2d0>)
 8002376:	f7fe fd95 	bl	8000ea4 <SetTime7Seg_Top>
					sTime.Seconds);
		}
		if (encoderValue == 2) {
 800237a:	4b5c      	ldr	r3, [pc, #368]	@ (80024ec <main+0x2f0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d130      	bne.n	80023e4 <main+0x1e8>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 8002382:	4b5b      	ldr	r3, [pc, #364]	@ (80024f0 <main+0x2f4>)
 8002384:	789b      	ldrb	r3, [r3, #2]
 8002386:	4a5a      	ldr	r2, [pc, #360]	@ (80024f0 <main+0x2f4>)
 8002388:	7852      	ldrb	r2, [r2, #1]
 800238a:	4619      	mov	r1, r3
 800238c:	484f      	ldr	r0, [pc, #316]	@ (80024cc <main+0x2d0>)
 800238e:	f7fe fff9 	bl	8001384 <SetSecondLedEvenOdd>
			colon ? SetHourRingCustom(&clockReg, 1, 0) : SetHourRingCustom(
 8002392:	4b58      	ldr	r3, [pc, #352]	@ (80024f4 <main+0x2f8>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <main+0x1ac>
 800239c:	2200      	movs	r2, #0
 800239e:	2101      	movs	r1, #1
 80023a0:	484a      	ldr	r0, [pc, #296]	@ (80024cc <main+0x2d0>)
 80023a2:	f7ff f933 	bl	800160c <SetHourRingCustom>
 80023a6:	e004      	b.n	80023b2 <main+0x1b6>
 80023a8:	2201      	movs	r2, #1
 80023aa:	2100      	movs	r1, #0
 80023ac:	4847      	ldr	r0, [pc, #284]	@ (80024cc <main+0x2d0>)
 80023ae:	f7ff f92d 	bl	800160c <SetHourRingCustom>
							&clockReg, 0, 1);
			colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 80023b2:	4b50      	ldr	r3, [pc, #320]	@ (80024f4 <main+0x2f8>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <main+0x1cc>
 80023bc:	2201      	movs	r2, #1
 80023be:	2101      	movs	r1, #1
 80023c0:	4842      	ldr	r0, [pc, #264]	@ (80024cc <main+0x2d0>)
 80023c2:	f7ff f8f1 	bl	80015a8 <SetDots>
 80023c6:	e004      	b.n	80023d2 <main+0x1d6>
 80023c8:	2200      	movs	r2, #0
 80023ca:	2100      	movs	r1, #0
 80023cc:	483f      	ldr	r0, [pc, #252]	@ (80024cc <main+0x2d0>)
 80023ce:	f7ff f8eb 	bl	80015a8 <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 80023d2:	4b47      	ldr	r3, [pc, #284]	@ (80024f0 <main+0x2f4>)
 80023d4:	7819      	ldrb	r1, [r3, #0]
 80023d6:	4b46      	ldr	r3, [pc, #280]	@ (80024f0 <main+0x2f4>)
 80023d8:	785a      	ldrb	r2, [r3, #1]
 80023da:	4b45      	ldr	r3, [pc, #276]	@ (80024f0 <main+0x2f4>)
 80023dc:	789b      	ldrb	r3, [r3, #2]
 80023de:	483b      	ldr	r0, [pc, #236]	@ (80024cc <main+0x2d0>)
 80023e0:	f7fe fd60 	bl	8000ea4 <SetTime7Seg_Top>
					sTime.Seconds);
		}

		if (encoderValue == 3) {
 80023e4:	4b41      	ldr	r3, [pc, #260]	@ (80024ec <main+0x2f0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d127      	bne.n	800243c <main+0x240>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 80023ec:	4b40      	ldr	r3, [pc, #256]	@ (80024f0 <main+0x2f4>)
 80023ee:	789b      	ldrb	r3, [r3, #2]
 80023f0:	4a3f      	ldr	r2, [pc, #252]	@ (80024f0 <main+0x2f4>)
 80023f2:	7852      	ldrb	r2, [r2, #1]
 80023f4:	4619      	mov	r1, r3
 80023f6:	4835      	ldr	r0, [pc, #212]	@ (80024cc <main+0x2d0>)
 80023f8:	f7fe ffc4 	bl	8001384 <SetSecondLedEvenOdd>
			SetHourRing(&clockReg, sTime.Hours, 1, 1);
 80023fc:	4b3c      	ldr	r3, [pc, #240]	@ (80024f0 <main+0x2f4>)
 80023fe:	7819      	ldrb	r1, [r3, #0]
 8002400:	2301      	movs	r3, #1
 8002402:	2201      	movs	r2, #1
 8002404:	4831      	ldr	r0, [pc, #196]	@ (80024cc <main+0x2d0>)
 8002406:	f7fe fce7 	bl	8000dd8 <SetHourRing>
			colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 800240a:	4b3a      	ldr	r3, [pc, #232]	@ (80024f4 <main+0x2f8>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <main+0x224>
 8002414:	2201      	movs	r2, #1
 8002416:	2101      	movs	r1, #1
 8002418:	482c      	ldr	r0, [pc, #176]	@ (80024cc <main+0x2d0>)
 800241a:	f7ff f8c5 	bl	80015a8 <SetDots>
 800241e:	e004      	b.n	800242a <main+0x22e>
 8002420:	2200      	movs	r2, #0
 8002422:	2100      	movs	r1, #0
 8002424:	4829      	ldr	r0, [pc, #164]	@ (80024cc <main+0x2d0>)
 8002426:	f7ff f8bf 	bl	80015a8 <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 800242a:	4b31      	ldr	r3, [pc, #196]	@ (80024f0 <main+0x2f4>)
 800242c:	7819      	ldrb	r1, [r3, #0]
 800242e:	4b30      	ldr	r3, [pc, #192]	@ (80024f0 <main+0x2f4>)
 8002430:	785a      	ldrb	r2, [r3, #1]
 8002432:	4b2f      	ldr	r3, [pc, #188]	@ (80024f0 <main+0x2f4>)
 8002434:	789b      	ldrb	r3, [r3, #2]
 8002436:	4825      	ldr	r0, [pc, #148]	@ (80024cc <main+0x2d0>)
 8002438:	f7fe fd34 	bl	8000ea4 <SetTime7Seg_Top>
					sTime.Seconds);
		}

		if (encoderValue == 4) {
 800243c:	4b2b      	ldr	r3, [pc, #172]	@ (80024ec <main+0x2f0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b04      	cmp	r3, #4
 8002442:	d125      	bne.n	8002490 <main+0x294>
			SetSecondLedSingle(&clockReg, sTime.Seconds);
 8002444:	4b2a      	ldr	r3, [pc, #168]	@ (80024f0 <main+0x2f4>)
 8002446:	789b      	ldrb	r3, [r3, #2]
 8002448:	4619      	mov	r1, r3
 800244a:	4820      	ldr	r0, [pc, #128]	@ (80024cc <main+0x2d0>)
 800244c:	f7fe fb83 	bl	8000b56 <SetSecondLedSingle>
			SetHourRing(&clockReg, sTime.Hours, 1, 1);
 8002450:	4b27      	ldr	r3, [pc, #156]	@ (80024f0 <main+0x2f4>)
 8002452:	7819      	ldrb	r1, [r3, #0]
 8002454:	2301      	movs	r3, #1
 8002456:	2201      	movs	r2, #1
 8002458:	481c      	ldr	r0, [pc, #112]	@ (80024cc <main+0x2d0>)
 800245a:	f7fe fcbd 	bl	8000dd8 <SetHourRing>
			colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 800245e:	4b25      	ldr	r3, [pc, #148]	@ (80024f4 <main+0x2f8>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <main+0x278>
 8002468:	2201      	movs	r2, #1
 800246a:	2101      	movs	r1, #1
 800246c:	4817      	ldr	r0, [pc, #92]	@ (80024cc <main+0x2d0>)
 800246e:	f7ff f89b 	bl	80015a8 <SetDots>
 8002472:	e004      	b.n	800247e <main+0x282>
 8002474:	2200      	movs	r2, #0
 8002476:	2100      	movs	r1, #0
 8002478:	4814      	ldr	r0, [pc, #80]	@ (80024cc <main+0x2d0>)
 800247a:	f7ff f895 	bl	80015a8 <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 800247e:	4b1c      	ldr	r3, [pc, #112]	@ (80024f0 <main+0x2f4>)
 8002480:	7819      	ldrb	r1, [r3, #0]
 8002482:	4b1b      	ldr	r3, [pc, #108]	@ (80024f0 <main+0x2f4>)
 8002484:	785a      	ldrb	r2, [r3, #1]
 8002486:	4b1a      	ldr	r3, [pc, #104]	@ (80024f0 <main+0x2f4>)
 8002488:	789b      	ldrb	r3, [r3, #2]
 800248a:	4810      	ldr	r0, [pc, #64]	@ (80024cc <main+0x2d0>)
 800248c:	f7fe fd0a 	bl	8000ea4 <SetTime7Seg_Top>
					sTime.Seconds);
		}

		if (encoderValue == 5) {
 8002490:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <main+0x2f0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b05      	cmp	r3, #5
 8002496:	d137      	bne.n	8002508 <main+0x30c>
			SetSecondLedSingle(&clockReg, sTime.Minutes);
 8002498:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <main+0x2f4>)
 800249a:	785b      	ldrb	r3, [r3, #1]
 800249c:	4619      	mov	r1, r3
 800249e:	480b      	ldr	r0, [pc, #44]	@ (80024cc <main+0x2d0>)
 80024a0:	f7fe fb59 	bl	8000b56 <SetSecondLedSingle>
			SetHourRing(&clockReg, sTime.Hours, 1, 1);
 80024a4:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <main+0x2f4>)
 80024a6:	7819      	ldrb	r1, [r3, #0]
 80024a8:	2301      	movs	r3, #1
 80024aa:	2201      	movs	r2, #1
 80024ac:	4807      	ldr	r0, [pc, #28]	@ (80024cc <main+0x2d0>)
 80024ae:	f7fe fc93 	bl	8000dd8 <SetHourRing>
			colon ? SetDots(&clockReg, 0, 1) : SetDots(&clockReg, 0, 0);
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <main+0x2f8>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01d      	beq.n	80024f8 <main+0x2fc>
 80024bc:	2201      	movs	r2, #1
 80024be:	2100      	movs	r1, #0
 80024c0:	4802      	ldr	r0, [pc, #8]	@ (80024cc <main+0x2d0>)
 80024c2:	f7ff f871 	bl	80015a8 <SetDots>
 80024c6:	e01c      	b.n	8002502 <main+0x306>
 80024c8:	200007b8 	.word	0x200007b8
 80024cc:	20000684 	.word	0x20000684
 80024d0:	20000800 	.word	0x20000800
 80024d4:	20000848 	.word	0x20000848
 80024d8:	200000c4 	.word	0x200000c4
 80024dc:	20000890 	.word	0x20000890
 80024e0:	0800282d 	.word	0x0800282d
 80024e4:	08002845 	.word	0x08002845
 80024e8:	08002853 	.word	0x08002853
 80024ec:	2000067c 	.word	0x2000067c
 80024f0:	20000664 	.word	0x20000664
 80024f4:	200000c1 	.word	0x200000c1
 80024f8:	2200      	movs	r2, #0
 80024fa:	2100      	movs	r1, #0
 80024fc:	4878      	ldr	r0, [pc, #480]	@ (80026e0 <main+0x4e4>)
 80024fe:	f7ff f853 	bl	80015a8 <SetDots>
			SetTime7Seg_Void(&clockReg);
 8002502:	4877      	ldr	r0, [pc, #476]	@ (80026e0 <main+0x4e4>)
 8002504:	f7fe fe08 	bl	8001118 <SetTime7Seg_Void>
		}
		if (encoderValue == 6) {
 8002508:	4b76      	ldr	r3, [pc, #472]	@ (80026e4 <main+0x4e8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b06      	cmp	r3, #6
 800250e:	d121      	bne.n	8002554 <main+0x358>
			SetSecondLedSingle(&clockReg, sTime.Minutes);
 8002510:	4b75      	ldr	r3, [pc, #468]	@ (80026e8 <main+0x4ec>)
 8002512:	785b      	ldrb	r3, [r3, #1]
 8002514:	4619      	mov	r1, r3
 8002516:	4872      	ldr	r0, [pc, #456]	@ (80026e0 <main+0x4e4>)
 8002518:	f7fe fb1d 	bl	8000b56 <SetSecondLedSingle>
			SetDots(&clockReg, 0, 0);
 800251c:	2200      	movs	r2, #0
 800251e:	2100      	movs	r1, #0
 8002520:	486f      	ldr	r0, [pc, #444]	@ (80026e0 <main+0x4e4>)
 8002522:	f7ff f841 	bl	80015a8 <SetDots>
			colon ? SetHourRing(&clockReg, sTime.Hours, 1, 0) : SetHourRing(
 8002526:	4b71      	ldr	r3, [pc, #452]	@ (80026ec <main+0x4f0>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <main+0x344>
 8002530:	4b6d      	ldr	r3, [pc, #436]	@ (80026e8 <main+0x4ec>)
 8002532:	7819      	ldrb	r1, [r3, #0]
 8002534:	2300      	movs	r3, #0
 8002536:	2201      	movs	r2, #1
 8002538:	4869      	ldr	r0, [pc, #420]	@ (80026e0 <main+0x4e4>)
 800253a:	f7fe fc4d 	bl	8000dd8 <SetHourRing>
 800253e:	e006      	b.n	800254e <main+0x352>
 8002540:	4b69      	ldr	r3, [pc, #420]	@ (80026e8 <main+0x4ec>)
 8002542:	7819      	ldrb	r1, [r3, #0]
 8002544:	2301      	movs	r3, #1
 8002546:	2200      	movs	r2, #0
 8002548:	4865      	ldr	r0, [pc, #404]	@ (80026e0 <main+0x4e4>)
 800254a:	f7fe fc45 	bl	8000dd8 <SetHourRing>
							&clockReg, sTime.Hours, 0, 1);
			;
			SetTime7Seg_Void(&clockReg);
 800254e:	4864      	ldr	r0, [pc, #400]	@ (80026e0 <main+0x4e4>)
 8002550:	f7fe fde2 	bl	8001118 <SetTime7Seg_Void>
		}
		if (encoderValue == 7) {
 8002554:	4b63      	ldr	r3, [pc, #396]	@ (80026e4 <main+0x4e8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b07      	cmp	r3, #7
 800255a:	d123      	bne.n	80025a4 <main+0x3a8>
			SetSecondLedAccumulating(&clockReg, sTime.Seconds);
 800255c:	4b62      	ldr	r3, [pc, #392]	@ (80026e8 <main+0x4ec>)
 800255e:	789b      	ldrb	r3, [r3, #2]
 8002560:	4619      	mov	r1, r3
 8002562:	485f      	ldr	r0, [pc, #380]	@ (80026e0 <main+0x4e4>)
 8002564:	f7fe fb51 	bl	8000c0a <SetSecondLedAccumulating>
			SetHourRingCustom(&clockReg, 2, 2);
 8002568:	2202      	movs	r2, #2
 800256a:	2102      	movs	r1, #2
 800256c:	485c      	ldr	r0, [pc, #368]	@ (80026e0 <main+0x4e4>)
 800256e:	f7ff f84d 	bl	800160c <SetHourRingCustom>
			colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 8002572:	4b5e      	ldr	r3, [pc, #376]	@ (80026ec <main+0x4f0>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <main+0x38c>
 800257c:	2201      	movs	r2, #1
 800257e:	2101      	movs	r1, #1
 8002580:	4857      	ldr	r0, [pc, #348]	@ (80026e0 <main+0x4e4>)
 8002582:	f7ff f811 	bl	80015a8 <SetDots>
 8002586:	e004      	b.n	8002592 <main+0x396>
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	4854      	ldr	r0, [pc, #336]	@ (80026e0 <main+0x4e4>)
 800258e:	f7ff f80b 	bl	80015a8 <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8002592:	4b55      	ldr	r3, [pc, #340]	@ (80026e8 <main+0x4ec>)
 8002594:	7819      	ldrb	r1, [r3, #0]
 8002596:	4b54      	ldr	r3, [pc, #336]	@ (80026e8 <main+0x4ec>)
 8002598:	785a      	ldrb	r2, [r3, #1]
 800259a:	4b53      	ldr	r3, [pc, #332]	@ (80026e8 <main+0x4ec>)
 800259c:	789b      	ldrb	r3, [r3, #2]
 800259e:	4850      	ldr	r0, [pc, #320]	@ (80026e0 <main+0x4e4>)
 80025a0:	f7fe fc80 	bl	8000ea4 <SetTime7Seg_Top>
					sTime.Seconds);
		}

		if (encoderValue == 8) {
 80025a4:	4b4f      	ldr	r3, [pc, #316]	@ (80026e4 <main+0x4e8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d123      	bne.n	80025f4 <main+0x3f8>
			SetSecondLedAccumulating(&clockReg, sTime.Seconds);
 80025ac:	4b4e      	ldr	r3, [pc, #312]	@ (80026e8 <main+0x4ec>)
 80025ae:	789b      	ldrb	r3, [r3, #2]
 80025b0:	4619      	mov	r1, r3
 80025b2:	484b      	ldr	r0, [pc, #300]	@ (80026e0 <main+0x4e4>)
 80025b4:	f7fe fb29 	bl	8000c0a <SetSecondLedAccumulating>
			SetHourRingCustom(&clockReg, 1, 2);
 80025b8:	2202      	movs	r2, #2
 80025ba:	2101      	movs	r1, #1
 80025bc:	4848      	ldr	r0, [pc, #288]	@ (80026e0 <main+0x4e4>)
 80025be:	f7ff f825 	bl	800160c <SetHourRingCustom>
			colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 80025c2:	4b4a      	ldr	r3, [pc, #296]	@ (80026ec <main+0x4f0>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <main+0x3dc>
 80025cc:	2201      	movs	r2, #1
 80025ce:	2101      	movs	r1, #1
 80025d0:	4843      	ldr	r0, [pc, #268]	@ (80026e0 <main+0x4e4>)
 80025d2:	f7fe ffe9 	bl	80015a8 <SetDots>
 80025d6:	e004      	b.n	80025e2 <main+0x3e6>
 80025d8:	2200      	movs	r2, #0
 80025da:	2100      	movs	r1, #0
 80025dc:	4840      	ldr	r0, [pc, #256]	@ (80026e0 <main+0x4e4>)
 80025de:	f7fe ffe3 	bl	80015a8 <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 80025e2:	4b41      	ldr	r3, [pc, #260]	@ (80026e8 <main+0x4ec>)
 80025e4:	7819      	ldrb	r1, [r3, #0]
 80025e6:	4b40      	ldr	r3, [pc, #256]	@ (80026e8 <main+0x4ec>)
 80025e8:	785a      	ldrb	r2, [r3, #1]
 80025ea:	4b3f      	ldr	r3, [pc, #252]	@ (80026e8 <main+0x4ec>)
 80025ec:	789b      	ldrb	r3, [r3, #2]
 80025ee:	483c      	ldr	r0, [pc, #240]	@ (80026e0 <main+0x4e4>)
 80025f0:	f7fe fc58 	bl	8000ea4 <SetTime7Seg_Top>
					sTime.Seconds);
		}
		if (encoderValue == 9) {
 80025f4:	4b3b      	ldr	r3, [pc, #236]	@ (80026e4 <main+0x4e8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b09      	cmp	r3, #9
 80025fa:	d123      	bne.n	8002644 <main+0x448>
			SetSecondLedAccumulating(&clockReg, sTime.Seconds);
 80025fc:	4b3a      	ldr	r3, [pc, #232]	@ (80026e8 <main+0x4ec>)
 80025fe:	789b      	ldrb	r3, [r3, #2]
 8002600:	4619      	mov	r1, r3
 8002602:	4837      	ldr	r0, [pc, #220]	@ (80026e0 <main+0x4e4>)
 8002604:	f7fe fb01 	bl	8000c0a <SetSecondLedAccumulating>
			SetHourRingCustom(&clockReg, 2, 1);
 8002608:	2201      	movs	r2, #1
 800260a:	2102      	movs	r1, #2
 800260c:	4834      	ldr	r0, [pc, #208]	@ (80026e0 <main+0x4e4>)
 800260e:	f7fe fffd 	bl	800160c <SetHourRingCustom>
			colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 8002612:	4b36      	ldr	r3, [pc, #216]	@ (80026ec <main+0x4f0>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <main+0x42c>
 800261c:	2201      	movs	r2, #1
 800261e:	2101      	movs	r1, #1
 8002620:	482f      	ldr	r0, [pc, #188]	@ (80026e0 <main+0x4e4>)
 8002622:	f7fe ffc1 	bl	80015a8 <SetDots>
 8002626:	e004      	b.n	8002632 <main+0x436>
 8002628:	2200      	movs	r2, #0
 800262a:	2100      	movs	r1, #0
 800262c:	482c      	ldr	r0, [pc, #176]	@ (80026e0 <main+0x4e4>)
 800262e:	f7fe ffbb 	bl	80015a8 <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8002632:	4b2d      	ldr	r3, [pc, #180]	@ (80026e8 <main+0x4ec>)
 8002634:	7819      	ldrb	r1, [r3, #0]
 8002636:	4b2c      	ldr	r3, [pc, #176]	@ (80026e8 <main+0x4ec>)
 8002638:	785a      	ldrb	r2, [r3, #1]
 800263a:	4b2b      	ldr	r3, [pc, #172]	@ (80026e8 <main+0x4ec>)
 800263c:	789b      	ldrb	r3, [r3, #2]
 800263e:	4828      	ldr	r0, [pc, #160]	@ (80026e0 <main+0x4e4>)
 8002640:	f7fe fc30 	bl	8000ea4 <SetTime7Seg_Top>
					sTime.Seconds);
		}
		if (encoderValue == 10) {
 8002644:	4b27      	ldr	r3, [pc, #156]	@ (80026e4 <main+0x4e8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b0a      	cmp	r3, #10
 800264a:	d123      	bne.n	8002694 <main+0x498>
			SetSecondLedAccumulating2(&clockReg, sTime.Seconds);
 800264c:	4b26      	ldr	r3, [pc, #152]	@ (80026e8 <main+0x4ec>)
 800264e:	789b      	ldrb	r3, [r3, #2]
 8002650:	4619      	mov	r1, r3
 8002652:	4823      	ldr	r0, [pc, #140]	@ (80026e0 <main+0x4e4>)
 8002654:	f7fe fb49 	bl	8000cea <SetSecondLedAccumulating2>
			SetHourRingCustom(&clockReg, 2, 2);
 8002658:	2202      	movs	r2, #2
 800265a:	2102      	movs	r1, #2
 800265c:	4820      	ldr	r0, [pc, #128]	@ (80026e0 <main+0x4e4>)
 800265e:	f7fe ffd5 	bl	800160c <SetHourRingCustom>
			colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 8002662:	4b22      	ldr	r3, [pc, #136]	@ (80026ec <main+0x4f0>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <main+0x47c>
 800266c:	2201      	movs	r2, #1
 800266e:	2101      	movs	r1, #1
 8002670:	481b      	ldr	r0, [pc, #108]	@ (80026e0 <main+0x4e4>)
 8002672:	f7fe ff99 	bl	80015a8 <SetDots>
 8002676:	e004      	b.n	8002682 <main+0x486>
 8002678:	2200      	movs	r2, #0
 800267a:	2100      	movs	r1, #0
 800267c:	4818      	ldr	r0, [pc, #96]	@ (80026e0 <main+0x4e4>)
 800267e:	f7fe ff93 	bl	80015a8 <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8002682:	4b19      	ldr	r3, [pc, #100]	@ (80026e8 <main+0x4ec>)
 8002684:	7819      	ldrb	r1, [r3, #0]
 8002686:	4b18      	ldr	r3, [pc, #96]	@ (80026e8 <main+0x4ec>)
 8002688:	785a      	ldrb	r2, [r3, #1]
 800268a:	4b17      	ldr	r3, [pc, #92]	@ (80026e8 <main+0x4ec>)
 800268c:	789b      	ldrb	r3, [r3, #2]
 800268e:	4814      	ldr	r0, [pc, #80]	@ (80026e0 <main+0x4e4>)
 8002690:	f7fe fc08 	bl	8000ea4 <SetTime7Seg_Top>
					sTime.Seconds);
		}
		SHT30_Data_t data; // Zadeklarowanie zmiennej 'data'


		if (SHT30_GetLatestData(&data)) {
 8002694:	463b      	mov	r3, r7
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fa04 	bl	8002aa4 <SHT30_GetLatestData>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00d      	beq.n	80026be <main+0x4c2>
			// Temperatura w 0.01°C (np. 3456 oznacza 34.56°C)
			// Przekazujemy do wyświetlacza jako 3456
			disp_mode?  SLIDER_DisplayTemperature( data.temperature):SLIDER_DisplayHumidity( data.humidity);
 80026a2:	4b13      	ldr	r3, [pc, #76]	@ (80026f0 <main+0x4f4>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d004      	beq.n	80026b6 <main+0x4ba>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 ff28 	bl	8003504 <SLIDER_DisplayTemperature>
 80026b4:	e003      	b.n	80026be <main+0x4c2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f001 f8b3 	bl	8003824 <SLIDER_DisplayHumidity>

		// Dla przykładu – dolny wyświetlacz: stała wartość
		//SetTime7Seg(&clockReg, 0, encoderValue, 3, false);

		// Aktualizuj rejestry
		UpdateAllDisplays(&clockReg);
 80026be:	4808      	ldr	r0, [pc, #32]	@ (80026e0 <main+0x4e4>)
 80026c0:	f7fe fdf0 	bl	80012a4 <UpdateAllDisplays>

		// Opóźnij (np. 100 ms)
		// Rozpoczęcie konwersji ADC
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80026c4:	480b      	ldr	r0, [pc, #44]	@ (80026f4 <main+0x4f8>)
 80026c6:	f001 ff33 	bl	8004530 <HAL_ADC_Start>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <main+0x4d8>
			Error_Handler();
 80026d0:	f000 f8c6 	bl	8002860 <Error_Handler>
		}
		Button_Process();
 80026d4:	f7fd ffe0 	bl	8000698 <Button_Process>
		HAL_Delay(10);
 80026d8:	200a      	movs	r0, #10
 80026da:	f001 fec1 	bl	8004460 <HAL_Delay>
	while (1) {
 80026de:	e5f4      	b.n	80022ca <main+0xce>
 80026e0:	20000684 	.word	0x20000684
 80026e4:	2000067c 	.word	0x2000067c
 80026e8:	20000664 	.word	0x20000664
 80026ec:	200000c1 	.word	0x200000c1
 80026f0:	200006d2 	.word	0x200006d2
 80026f4:	20000058 	.word	0x20000058

080026f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b094      	sub	sp, #80	@ 0x50
 80026fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80026fe:	f107 0320 	add.w	r3, r7, #32
 8002702:	2230      	movs	r2, #48	@ 0x30
 8002704:	2100      	movs	r1, #0
 8002706:	4618      	mov	r0, r3
 8002708:	f008 ffdc 	bl	800b6c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	4b23      	ldr	r3, [pc, #140]	@ (80027b0 <SystemClock_Config+0xb8>)
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	4a22      	ldr	r2, [pc, #136]	@ (80027b0 <SystemClock_Config+0xb8>)
 8002726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800272a:	6413      	str	r3, [r2, #64]	@ 0x40
 800272c:	4b20      	ldr	r3, [pc, #128]	@ (80027b0 <SystemClock_Config+0xb8>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002738:	2300      	movs	r3, #0
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	4b1d      	ldr	r3, [pc, #116]	@ (80027b4 <SystemClock_Config+0xbc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002744:	4a1b      	ldr	r2, [pc, #108]	@ (80027b4 <SystemClock_Config+0xbc>)
 8002746:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <SystemClock_Config+0xbc>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8002758:	2305      	movs	r3, #5
 800275a:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800275c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002760:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002762:	2301      	movs	r3, #1
 8002764:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002766:	2300      	movs	r3, #0
 8002768:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800276a:	f107 0320 	add.w	r3, r7, #32
 800276e:	4618      	mov	r0, r3
 8002770:	f005 fd14 	bl	800819c <HAL_RCC_OscConfig>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <SystemClock_Config+0x86>
		Error_Handler();
 800277a:	f000 f871 	bl	8002860 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800277e:	230f      	movs	r3, #15
 8002780:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002782:	2301      	movs	r3, #1
 8002784:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002792:	f107 030c 	add.w	r3, r7, #12
 8002796:	2100      	movs	r1, #0
 8002798:	4618      	mov	r0, r3
 800279a:	f005 ff77 	bl	800868c <HAL_RCC_ClockConfig>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <SystemClock_Config+0xb0>
		Error_Handler();
 80027a4:	f000 f85c 	bl	8002860 <Error_Handler>
	}
}
 80027a8:	bf00      	nop
 80027aa:	3750      	adds	r7, #80	@ 0x50
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40007000 	.word	0x40007000

080027b8 <Get_RTC_Time>:
}

/**
 * @brief Odczytuje bieżący czas z RTC.
 */
void Get_RTC_Time(void) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80027bc:	2200      	movs	r2, #0
 80027be:	4905      	ldr	r1, [pc, #20]	@ (80027d4 <Get_RTC_Time+0x1c>)
 80027c0:	4805      	ldr	r0, [pc, #20]	@ (80027d8 <Get_RTC_Time+0x20>)
 80027c2:	f006 fb4e 	bl	8008e62 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80027c6:	2200      	movs	r2, #0
 80027c8:	4904      	ldr	r1, [pc, #16]	@ (80027dc <Get_RTC_Time+0x24>)
 80027ca:	4803      	ldr	r0, [pc, #12]	@ (80027d8 <Get_RTC_Time+0x20>)
 80027cc:	f006 fc2b 	bl	8009026 <HAL_RTC_GetDate>
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000664 	.word	0x20000664
 80027d8:	2000069c 	.word	0x2000069c
 80027dc:	20000678 	.word	0x20000678

080027e0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
// Sprawdź, czy źródłem przerwania jest TIM5
	if (htim->Instance == TIM4) {
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002824 <HAL_TIM_IC_CaptureCallback+0x44>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d111      	bne.n	8002816 <HAL_TIM_IC_CaptureCallback+0x36>
		// (Opcjonalnie) sprawdź, z którego kanału przyszło wywołanie:
		// if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { ... }
		// albo if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) { ... }

		// Sprawdź kierunek (czy licznik zlicza w dół czy w górę):
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	d105      	bne.n	800280c <HAL_TIM_IC_CaptureCallback+0x2c>
			// Liczymy w dół
			encoderValue--;
 8002800:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <HAL_TIM_IC_CaptureCallback+0x48>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3b01      	subs	r3, #1
 8002806:	4a08      	ldr	r2, [pc, #32]	@ (8002828 <HAL_TIM_IC_CaptureCallback+0x48>)
 8002808:	6013      	str	r3, [r2, #0]
		} else {
			// Liczymy w górę
			encoderValue++;
		}
	}
}
 800280a:	e004      	b.n	8002816 <HAL_TIM_IC_CaptureCallback+0x36>
			encoderValue++;
 800280c:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <HAL_TIM_IC_CaptureCallback+0x48>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	4a05      	ldr	r2, [pc, #20]	@ (8002828 <HAL_TIM_IC_CaptureCallback+0x48>)
 8002814:	6013      	str	r3, [r2, #0]
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40000800 	.word	0x40000800
 8002828:	2000067c 	.word	0x2000067c

0800282c <Button1_Pressed>:

/* USER CODE BEGIN 0 */
void Button1_Pressed(void) {
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
	// Implementacja obsługi pojedynczego naciśnięcia przycisku
	SLIDER_SetString("HELLO", SCROLL_RIGHT_TO_LEFT, 10);
 8002830:	220a      	movs	r2, #10
 8002832:	2100      	movs	r1, #0
 8002834:	4802      	ldr	r0, [pc, #8]	@ (8002840 <Button1_Pressed+0x14>)
 8002836:	f000 fc11 	bl	800305c <SLIDER_SetString>
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	0800b7a0 	.word	0x0800b7a0

08002844 <Button1_DoubleClicked>:

void Button1_DoubleClicked(void) {
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
	// Implementacja obsługi dwukliku przycisku
	//DisplayScrollingText("Napis");
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <Button1_Held>:

void Button1_Held(void) {
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0
	//DisplayScrollingText("Napis");
	// Implementacja obsługi przytrzymania przycisku
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002864:	b672      	cpsid	i
}
 8002866:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();
	while (1) {
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <Error_Handler+0x8>

0800286c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002880:	2300      	movs	r3, #0
 8002882:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002884:	4b24      	ldr	r3, [pc, #144]	@ (8002918 <MX_RTC_Init+0xac>)
 8002886:	4a25      	ldr	r2, [pc, #148]	@ (800291c <MX_RTC_Init+0xb0>)
 8002888:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800288a:	4b23      	ldr	r3, [pc, #140]	@ (8002918 <MX_RTC_Init+0xac>)
 800288c:	2200      	movs	r2, #0
 800288e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002890:	4b21      	ldr	r3, [pc, #132]	@ (8002918 <MX_RTC_Init+0xac>)
 8002892:	227f      	movs	r2, #127	@ 0x7f
 8002894:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002896:	4b20      	ldr	r3, [pc, #128]	@ (8002918 <MX_RTC_Init+0xac>)
 8002898:	22ff      	movs	r2, #255	@ 0xff
 800289a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800289c:	4b1e      	ldr	r3, [pc, #120]	@ (8002918 <MX_RTC_Init+0xac>)
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002918 <MX_RTC_Init+0xac>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002918 <MX_RTC_Init+0xac>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028ae:	481a      	ldr	r0, [pc, #104]	@ (8002918 <MX_RTC_Init+0xac>)
 80028b0:	f006 f9ba 	bl	8008c28 <HAL_RTC_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80028ba:	f7ff ffd1 	bl	8002860 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80028be:	2300      	movs	r3, #0
 80028c0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	2201      	movs	r2, #1
 80028d6:	4619      	mov	r1, r3
 80028d8:	480f      	ldr	r0, [pc, #60]	@ (8002918 <MX_RTC_Init+0xac>)
 80028da:	f006 fa28 	bl	8008d2e <HAL_RTC_SetTime>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80028e4:	f7ff ffbc 	bl	8002860 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80028e8:	2301      	movs	r3, #1
 80028ea:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80028ec:	2301      	movs	r3, #1
 80028ee:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80028f0:	2301      	movs	r3, #1
 80028f2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80028f8:	463b      	mov	r3, r7
 80028fa:	2201      	movs	r2, #1
 80028fc:	4619      	mov	r1, r3
 80028fe:	4806      	ldr	r0, [pc, #24]	@ (8002918 <MX_RTC_Init+0xac>)
 8002900:	f006 fb0d 	bl	8008f1e <HAL_RTC_SetDate>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800290a:	f7ff ffa9 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	2000069c 	.word	0x2000069c
 800291c:	40002800 	.word	0x40002800

08002920 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002928:	f107 030c 	add.w	r3, r7, #12
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0c      	ldr	r2, [pc, #48]	@ (8002970 <HAL_RTC_MspInit+0x50>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d111      	bne.n	8002966 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002942:	2302      	movs	r3, #2
 8002944:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002946:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800294a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800294c:	f107 030c 	add.w	r3, r7, #12
 8002950:	4618      	mov	r0, r3
 8002952:	f006 f87b 	bl	8008a4c <HAL_RCCEx_PeriphCLKConfig>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800295c:	f7ff ff80 	bl	8002860 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002960:	4b04      	ldr	r3, [pc, #16]	@ (8002974 <HAL_RTC_MspInit+0x54>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002966:	bf00      	nop
 8002968:	3720      	adds	r7, #32
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40002800 	.word	0x40002800
 8002974:	42470e3c 	.word	0x42470e3c

08002978 <SHT30_Init>:

/* =========================================================================
   Funkcja inicjalizacyjna
   ========================================================================= */
void SHT30_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af02      	add	r7, sp, #8
    g_measState = SHT30_STATE_IDLE;
 800297e:	4b10      	ldr	r3, [pc, #64]	@ (80029c0 <SHT30_Init+0x48>)
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
    g_timerMs   = 0;
 8002984:	4b0f      	ldr	r3, [pc, #60]	@ (80029c4 <SHT30_Init+0x4c>)
 8002986:	2200      	movs	r2, #0
 8002988:	801a      	strh	r2, [r3, #0]
    memset(&g_latestData, 0, sizeof(g_latestData));
 800298a:	220c      	movs	r2, #12
 800298c:	2100      	movs	r1, #0
 800298e:	480e      	ldr	r0, [pc, #56]	@ (80029c8 <SHT30_Init+0x50>)
 8002990:	f008 fe98 	bl	800b6c4 <memset>
    g_latestData.valid = false;
 8002994:	4b0c      	ldr	r3, [pc, #48]	@ (80029c8 <SHT30_Init+0x50>)
 8002996:	2200      	movs	r2, #0
 8002998:	721a      	strb	r2, [r3, #8]

    // Opcjonalny Soft Reset (0x30A2) – wysyłamy synchronicznie
    uint8_t cmdReset[2] = {0x30, 0xA2};
 800299a:	f24a 2330 	movw	r3, #41520	@ 0xa230
 800299e:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&hi2c2, (SHT30_I2C_ADDR << 1), cmdReset, 2, 100);
 80029a0:	1d3a      	adds	r2, r7, #4
 80029a2:	2364      	movs	r3, #100	@ 0x64
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2302      	movs	r3, #2
 80029a8:	2188      	movs	r1, #136	@ 0x88
 80029aa:	4808      	ldr	r0, [pc, #32]	@ (80029cc <SHT30_Init+0x54>)
 80029ac:	f003 f860 	bl	8005a70 <HAL_I2C_Master_Transmit>
    HAL_Delay(10); // Odczekaj chwilę po resecie
 80029b0:	200a      	movs	r0, #10
 80029b2:	f001 fd55 	bl	8004460 <HAL_Delay>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200006c2 	.word	0x200006c2
 80029c4:	200006d0 	.word	0x200006d0
 80029c8:	200006c4 	.word	0x200006c4
 80029cc:	20000550 	.word	0x20000550

080029d0 <SHT30_10msHandler>:

/* =========================================================================
   Funkcja wywoływana co 10 ms (z przerwania timera)
   ========================================================================= */
void SHT30_10msHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
    switch (g_measState)
 80029d4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a8c <SHT30_10msHandler+0xbc>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d84c      	bhi.n	8002a76 <SHT30_10msHandler+0xa6>
 80029dc:	a201      	add	r2, pc, #4	@ (adr r2, 80029e4 <SHT30_10msHandler+0x14>)
 80029de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e2:	bf00      	nop
 80029e4:	080029f9 	.word	0x080029f9
 80029e8:	08002a7f 	.word	0x08002a7f
 80029ec:	08002a2d 	.word	0x08002a2d
 80029f0:	08002a7f 	.word	0x08002a7f
 80029f4:	08002a6f 	.word	0x08002a6f
    {
    case SHT30_STATE_IDLE:
        // Czekamy aż minie 30 ms od poprzedniego pomiaru
        g_timerMs += 10;
 80029f8:	4b25      	ldr	r3, [pc, #148]	@ (8002a90 <SHT30_10msHandler+0xc0>)
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	330a      	adds	r3, #10
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	4b23      	ldr	r3, [pc, #140]	@ (8002a90 <SHT30_10msHandler+0xc0>)
 8002a02:	801a      	strh	r2, [r3, #0]
        if (g_timerMs >= SHT30_PERIOD_MS)
 8002a04:	4b22      	ldr	r3, [pc, #136]	@ (8002a90 <SHT30_10msHandler+0xc0>)
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	2b1d      	cmp	r3, #29
 8002a0a:	d93a      	bls.n	8002a82 <SHT30_10msHandler+0xb2>
        {
            // Reset licznika
            g_timerMs = 0;
 8002a0c:	4b20      	ldr	r3, [pc, #128]	@ (8002a90 <SHT30_10msHandler+0xc0>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	801a      	strh	r2, [r3, #0]

            // Start transmisji DMA – wysyłamy komendę Single Shot
            if (HAL_I2C_Master_Transmit_DMA(&hi2c2, (SHT30_I2C_ADDR << 1),
 8002a12:	2302      	movs	r3, #2
 8002a14:	4a1f      	ldr	r2, [pc, #124]	@ (8002a94 <SHT30_10msHandler+0xc4>)
 8002a16:	2188      	movs	r1, #136	@ 0x88
 8002a18:	481f      	ldr	r0, [pc, #124]	@ (8002a98 <SHT30_10msHandler+0xc8>)
 8002a1a:	f003 f927 	bl	8005c6c <HAL_I2C_Master_Transmit_DMA>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d12e      	bne.n	8002a82 <SHT30_10msHandler+0xb2>
                                            (uint8_t*)SHT30_CMD_SINGLE_SHOT, 2) == HAL_OK)
            {
                g_measState = SHT30_STATE_TX_IN_PROGRESS;
 8002a24:	4b19      	ldr	r3, [pc, #100]	@ (8002a8c <SHT30_10msHandler+0xbc>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
            {
                // Błąd startu DMA – pozostajemy w stanie IDLE
                // Można dodać obsługę błędu tutaj
            }
        }
        break;
 8002a2a:	e02a      	b.n	8002a82 <SHT30_10msHandler+0xb2>
        // Nic nie robimy – czekamy na callback TX
        break;

    case SHT30_STATE_WAITING_FOR_MEAS:
        // Odliczamy czas konwersji (15 ms)
        g_timerMs += 10;
 8002a2c:	4b18      	ldr	r3, [pc, #96]	@ (8002a90 <SHT30_10msHandler+0xc0>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	330a      	adds	r3, #10
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	4b16      	ldr	r3, [pc, #88]	@ (8002a90 <SHT30_10msHandler+0xc0>)
 8002a36:	801a      	strh	r2, [r3, #0]
        if (g_timerMs >= SHT30_MEAS_TIME_MS)
 8002a38:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <SHT30_10msHandler+0xc0>)
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	2b0e      	cmp	r3, #14
 8002a3e:	d922      	bls.n	8002a86 <SHT30_10msHandler+0xb6>
        {
            // Minął czas potrzebny na konwersję
            g_timerMs = 0; // Reset licznika
 8002a40:	4b13      	ldr	r3, [pc, #76]	@ (8002a90 <SHT30_10msHandler+0xc0>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	801a      	strh	r2, [r3, #0]

            // Rozpoczynamy odbiór surowych danych (6 bajtów) przez DMA
            if (HAL_I2C_Master_Receive_DMA(&hi2c2, (SHT30_I2C_ADDR << 1),
 8002a46:	2306      	movs	r3, #6
 8002a48:	4a14      	ldr	r2, [pc, #80]	@ (8002a9c <SHT30_10msHandler+0xcc>)
 8002a4a:	2188      	movs	r1, #136	@ 0x88
 8002a4c:	4812      	ldr	r0, [pc, #72]	@ (8002a98 <SHT30_10msHandler+0xc8>)
 8002a4e:	f003 fa39 	bl	8005ec4 <HAL_I2C_Master_Receive_DMA>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d103      	bne.n	8002a60 <SHT30_10msHandler+0x90>
                                           g_rxBuffer, 6) == HAL_OK)
            {
                g_measState = SHT30_STATE_RX_IN_PROGRESS;
 8002a58:	4b0c      	ldr	r3, [pc, #48]	@ (8002a8c <SHT30_10msHandler+0xbc>)
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	701a      	strb	r2, [r3, #0]
                // Błąd startu DMA – powrót do IDLE
                g_measState = SHT30_STATE_IDLE;
                g_latestData.valid = false;
            }
        }
        break;
 8002a5e:	e012      	b.n	8002a86 <SHT30_10msHandler+0xb6>
                g_measState = SHT30_STATE_IDLE;
 8002a60:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <SHT30_10msHandler+0xbc>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
                g_latestData.valid = false;
 8002a66:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa0 <SHT30_10msHandler+0xd0>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	721a      	strb	r2, [r3, #8]
        break;
 8002a6c:	e00b      	b.n	8002a86 <SHT30_10msHandler+0xb6>
        break;

    case SHT30_STATE_DONE:
        // Pomiar skończony. Przechodzimy do stanu IDLE.
        // Dalsze pomiary będą inicjowane po upływie kolejnych 30 ms
        g_measState = SHT30_STATE_IDLE;
 8002a6e:	4b07      	ldr	r3, [pc, #28]	@ (8002a8c <SHT30_10msHandler+0xbc>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
        break;
 8002a74:	e008      	b.n	8002a88 <SHT30_10msHandler+0xb8>

    default:
        g_measState = SHT30_STATE_IDLE;
 8002a76:	4b05      	ldr	r3, [pc, #20]	@ (8002a8c <SHT30_10msHandler+0xbc>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
        break;
 8002a7c:	e004      	b.n	8002a88 <SHT30_10msHandler+0xb8>
        break;
 8002a7e:	bf00      	nop
 8002a80:	e002      	b.n	8002a88 <SHT30_10msHandler+0xb8>
        break;
 8002a82:	bf00      	nop
 8002a84:	e000      	b.n	8002a88 <SHT30_10msHandler+0xb8>
        break;
 8002a86:	bf00      	nop
    }
}
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	200006c2 	.word	0x200006c2
 8002a90:	200006d0 	.word	0x200006d0
 8002a94:	0800b848 	.word	0x0800b848
 8002a98:	20000550 	.word	0x20000550
 8002a9c:	200006bc 	.word	0x200006bc
 8002aa0:	200006c4 	.word	0x200006c4

08002aa4 <SHT30_GetLatestData>:

/* =========================================================================
   Funkcja pobierająca najnowsze dane pomiarowe
   ========================================================================= */
bool SHT30_GetLatestData(SHT30_Data_t *pData)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
    if (pData == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <SHT30_GetLatestData+0x12>
        return false;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	e00e      	b.n	8002ad4 <SHT30_GetLatestData+0x30>

    if (!g_latestData.valid)
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae0 <SHT30_GetLatestData+0x3c>)
 8002ab8:	7a1b      	ldrb	r3, [r3, #8]
 8002aba:	f083 0301 	eor.w	r3, r3, #1
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <SHT30_GetLatestData+0x24>
        return false;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	e005      	b.n	8002ad4 <SHT30_GetLatestData+0x30>

    *pData = g_latestData;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a05      	ldr	r2, [pc, #20]	@ (8002ae0 <SHT30_GetLatestData+0x3c>)
 8002acc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ace:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return true;
 8002ad2:	2301      	movs	r3, #1
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	200006c4 	.word	0x200006c4

08002ae4 <HAL_I2C_MasterTxCpltCallback>:

/* =========================================================================
   Callback zakończenia transmisji DMA (MasterTxCplt)
   ========================================================================= */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a09      	ldr	r2, [pc, #36]	@ (8002b18 <HAL_I2C_MasterTxCpltCallback+0x34>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d109      	bne.n	8002b0a <HAL_I2C_MasterTxCpltCallback+0x26>
    {
        if (g_measState == SHT30_STATE_TX_IN_PROGRESS)
 8002af6:	4b09      	ldr	r3, [pc, #36]	@ (8002b1c <HAL_I2C_MasterTxCpltCallback+0x38>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d105      	bne.n	8002b0a <HAL_I2C_MasterTxCpltCallback+0x26>
        {
            // Przejście do stanu oczekiwania na konwersję
            g_measState = SHT30_STATE_WAITING_FOR_MEAS;
 8002afe:	4b07      	ldr	r3, [pc, #28]	@ (8002b1c <HAL_I2C_MasterTxCpltCallback+0x38>)
 8002b00:	2202      	movs	r2, #2
 8002b02:	701a      	strb	r2, [r3, #0]
            g_timerMs = 0; // Reset licznika
 8002b04:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40005800 	.word	0x40005800
 8002b1c:	200006c2 	.word	0x200006c2
 8002b20:	200006d0 	.word	0x200006d0

08002b24 <HAL_I2C_MasterRxCpltCallback>:

/* =========================================================================
   Callback zakończenia odbioru DMA (MasterRxCplt)
   ========================================================================= */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a13      	ldr	r2, [pc, #76]	@ (8002b80 <HAL_I2C_MasterRxCpltCallback+0x5c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d120      	bne.n	8002b78 <HAL_I2C_MasterRxCpltCallback+0x54>
    {
        if (g_measState == SHT30_STATE_RX_IN_PROGRESS)
 8002b36:	4b13      	ldr	r3, [pc, #76]	@ (8002b84 <HAL_I2C_MasterRxCpltCallback+0x60>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d11c      	bne.n	8002b78 <HAL_I2C_MasterRxCpltCallback+0x54>
        {
            int32_t temp;   // Temperatura w 0.01°C
            uint32_t rh;    // Wilgotność w 0.01% RH

            bool ok = SHT30_ConvertRawData(g_rxBuffer, &temp, &rh);
 8002b3e:	f107 020c 	add.w	r2, r7, #12
 8002b42:	f107 0310 	add.w	r3, r7, #16
 8002b46:	4619      	mov	r1, r3
 8002b48:	480f      	ldr	r0, [pc, #60]	@ (8002b88 <HAL_I2C_MasterRxCpltCallback+0x64>)
 8002b4a:	f000 f83d 	bl	8002bc8 <SHT30_ConvertRawData>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	75fb      	strb	r3, [r7, #23]
            if (ok)
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d009      	beq.n	8002b6c <HAL_I2C_MasterRxCpltCallback+0x48>
            {
                g_latestData.temperature = temp;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b8c <HAL_I2C_MasterRxCpltCallback+0x68>)
 8002b5c:	6013      	str	r3, [r2, #0]
                g_latestData.humidity    = rh;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4a0a      	ldr	r2, [pc, #40]	@ (8002b8c <HAL_I2C_MasterRxCpltCallback+0x68>)
 8002b62:	6053      	str	r3, [r2, #4]
                g_latestData.valid       = true;
 8002b64:	4b09      	ldr	r3, [pc, #36]	@ (8002b8c <HAL_I2C_MasterRxCpltCallback+0x68>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	721a      	strb	r2, [r3, #8]
 8002b6a:	e002      	b.n	8002b72 <HAL_I2C_MasterRxCpltCallback+0x4e>
            }
            else
            {
                g_latestData.valid = false;
 8002b6c:	4b07      	ldr	r3, [pc, #28]	@ (8002b8c <HAL_I2C_MasterRxCpltCallback+0x68>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	721a      	strb	r2, [r3, #8]
            }

            // Przejście do stanu DONE
            g_measState = SHT30_STATE_DONE;
 8002b72:	4b04      	ldr	r3, [pc, #16]	@ (8002b84 <HAL_I2C_MasterRxCpltCallback+0x60>)
 8002b74:	2204      	movs	r2, #4
 8002b76:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8002b78:	bf00      	nop
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40005800 	.word	0x40005800
 8002b84:	200006c2 	.word	0x200006c2
 8002b88:	200006bc 	.word	0x200006bc
 8002b8c:	200006c4 	.word	0x200006c4

08002b90 <HAL_I2C_ErrorCallback>:

/* =========================================================================
   Callback błędu transmisji DMA (Error)
   ========================================================================= */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a07      	ldr	r2, [pc, #28]	@ (8002bbc <HAL_I2C_ErrorCallback+0x2c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d105      	bne.n	8002bae <HAL_I2C_ErrorCallback+0x1e>
    {
        // Obsługa błędu transmisji DMA/I2C
        g_measState = SHT30_STATE_IDLE;
 8002ba2:	4b07      	ldr	r3, [pc, #28]	@ (8002bc0 <HAL_I2C_ErrorCallback+0x30>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
        g_latestData.valid = false;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <HAL_I2C_ErrorCallback+0x34>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	721a      	strb	r2, [r3, #8]
    }
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40005800 	.word	0x40005800
 8002bc0:	200006c2 	.word	0x200006c2
 8002bc4:	200006c4 	.word	0x200006c4

08002bc8 <SHT30_ConvertRawData>:

/* =========================================================================
   Funkcja konwertująca surowe dane na wartości całkowite
   ========================================================================= */
static bool SHT30_ConvertRawData(const uint8_t *raw, int32_t *pTemp, uint32_t *pRH)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
    if (raw == NULL || pTemp == NULL || pRH == NULL)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <SHT30_ConvertRawData+0x1e>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <SHT30_ConvertRawData+0x1e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <SHT30_ConvertRawData+0x22>
        return false;
 8002be6:	2300      	movs	r3, #0
 8002be8:	e04f      	b.n	8002c8a <SHT30_ConvertRawData+0xc2>

    // Sprawdzenie CRC
    if (SHT30_CalcCrc8(&raw[0], 2) != raw[2])
 8002bea:	2102      	movs	r1, #2
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f853 	bl	8002c98 <SHT30_CalcCrc8>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <SHT30_ConvertRawData+0x3c>
        return false; // Błędny CRC temperatury
 8002c00:	2300      	movs	r3, #0
 8002c02:	e042      	b.n	8002c8a <SHT30_ConvertRawData+0xc2>

    if (SHT30_CalcCrc8(&raw[3], 2) != raw[5])
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3303      	adds	r3, #3
 8002c08:	2102      	movs	r1, #2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f844 	bl	8002c98 <SHT30_CalcCrc8>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3305      	adds	r3, #5
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d001      	beq.n	8002c22 <SHT30_ConvertRawData+0x5a>
        return false; // Błędny CRC wilgotności
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e033      	b.n	8002c8a <SHT30_ConvertRawData+0xc2>

    // Surowa temperatura i wilgotność
    uint16_t rawT = (raw[0] << 8) | raw[1];
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	b21a      	sxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	b21b      	sxth	r3, r3
 8002c32:	4313      	orrs	r3, r2
 8002c34:	b21b      	sxth	r3, r3
 8002c36:	82fb      	strh	r3, [r7, #22]
    uint16_t rawH = (raw[3] << 8) | raw[4];
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3303      	adds	r3, #3
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	b21a      	sxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3304      	adds	r3, #4
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	b21b      	sxth	r3, r3
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	b21b      	sxth	r3, r3
 8002c4e:	82bb      	strh	r3, [r7, #20]

    // Konwersja na wartości całkowite:
    // T = -4500 + (17500 * rawT) / 65535
    // H = (10000 * rawH) / 65535
    *pTemp = (-4500) + ((17500 * (int32_t)rawT) / 65535);
 8002c50:	8afb      	ldrh	r3, [r7, #22]
 8002c52:	f244 425c 	movw	r2, #17500	@ 0x445c
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c94 <SHT30_ConvertRawData+0xcc>)
 8002c5c:	fb82 1203 	smull	r1, r2, r2, r3
 8002c60:	441a      	add	r2, r3
 8002c62:	13d2      	asrs	r2, r2, #15
 8002c64:	17db      	asrs	r3, r3, #31
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f5a3 538c 	sub.w	r3, r3, #4480	@ 0x1180
 8002c6c:	3b14      	subs	r3, #20
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	6013      	str	r3, [r2, #0]
    *pRH   = (10000 * (uint32_t)rawH) / 65535;
 8002c72:	8abb      	ldrh	r3, [r7, #20]
 8002c74:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002c78:	fb02 f303 	mul.w	r3, r2, r3
 8002c7c:	4a05      	ldr	r2, [pc, #20]	@ (8002c94 <SHT30_ConvertRawData+0xcc>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	0bda      	lsrs	r2, r3, #15
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	601a      	str	r2, [r3, #0]

    return true;
 8002c88:	2301      	movs	r3, #1
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	80008001 	.word	0x80008001

08002c98 <SHT30_CalcCrc8>:
/* =========================================================================
   Funkcja obliczająca CRC8 wg specyfikacji SHT3x
   Polinom: 0x31, inicjalizacja: 0xFF
   ========================================================================= */
static uint8_t SHT30_CalcCrc8(const uint8_t *data, int len)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xFF;
 8002ca2:	23ff      	movs	r3, #255	@ 0xff
 8002ca4:	75fb      	strb	r3, [r7, #23]

    for (int i = 0; i < len; i++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	e021      	b.n	8002cf0 <SHT30_CalcCrc8+0x58>
    {
        crc ^= data[i];
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	781a      	ldrb	r2, [r3, #0]
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	4053      	eors	r3, r2
 8002cb8:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	e011      	b.n	8002ce4 <SHT30_CalcCrc8+0x4c>
        {
            if (crc & 0x80)
 8002cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	da07      	bge.n	8002cd8 <SHT30_CalcCrc8+0x40>
                crc = (crc << 1) ^ 0x31;
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	b25b      	sxtb	r3, r3
 8002cce:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8002cd2:	b25b      	sxtb	r3, r3
 8002cd4:	75fb      	strb	r3, [r7, #23]
 8002cd6:	e002      	b.n	8002cde <SHT30_CalcCrc8+0x46>
            else
                crc <<= 1;
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b07      	cmp	r3, #7
 8002ce8:	ddea      	ble.n	8002cc0 <SHT30_CalcCrc8+0x28>
    for (int i = 0; i < len; i++)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	3301      	adds	r3, #1
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	dbd9      	blt.n	8002cac <SHT30_CalcCrc8+0x14>
        }
    }

    return crc;
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	371c      	adds	r7, #28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <PrepareBuffer18>:
 *         [0..5] = puste, [6..11] = 6 znaków napisu, [12..17] = puste.
 *         Jeśli text ma mniej niż 6 znaków, dopełniamy pustymi;
 *         jeśli ma więcej, obcinamy do 6.
 */
static void PrepareBuffer18(const char* text)
{
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
    // Wyczyść cały bufor
    memset(buffer, 0, sizeof(buffer));
 8002d10:	2212      	movs	r2, #18
 8002d12:	2100      	movs	r1, #0
 8002d14:	481a      	ldr	r0, [pc, #104]	@ (8002d80 <PrepareBuffer18+0x78>)
 8002d16:	f008 fcd5 	bl	800b6c4 <memset>

    // Kopiujemy do tymczasowego stringa tylko 6 znaków
    char temp[7];
    strncpy(temp, text, 6);
 8002d1a:	f107 030c 	add.w	r3, r7, #12
 8002d1e:	2206      	movs	r2, #6
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f008 fce8 	bl	800b6f8 <strncpy>
    temp[6] = '\0';   // na wszelki wypadek
 8002d28:	2300      	movs	r3, #0
 8002d2a:	74bb      	strb	r3, [r7, #18]

    // 1) Pierwsze 6 = puste
    // (już jest 0 po memset, więc nic nie trzeba robić)

    // 2) Indeksy 6..11 = treść napisu
    for (int i = 0; i < 6; i++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	e01d      	b.n	8002d6e <PrepareBuffer18+0x66>
    {
        if (temp[i] == '\0') {
 8002d32:	f107 020c 	add.w	r2, r7, #12
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	4413      	add	r3, r2
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d105      	bne.n	8002d4c <PrepareBuffer18+0x44>
            // Jak się skończył tekst => puste
            buffer[6 + i] = 0;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	3306      	adds	r3, #6
 8002d44:	4a0e      	ldr	r2, [pc, #56]	@ (8002d80 <PrepareBuffer18+0x78>)
 8002d46:	2100      	movs	r1, #0
 8002d48:	54d1      	strb	r1, [r2, r3]
 8002d4a:	e00d      	b.n	8002d68 <PrepareBuffer18+0x60>
        }
        else {
            buffer[6 + i] = (uint8_t)charToSegment(temp[i]);
 8002d4c:	f107 020c 	add.w	r2, r7, #12
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	4413      	add	r3, r2
 8002d54:	781a      	ldrb	r2, [r3, #0]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	1d9c      	adds	r4, r3, #6
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	f7fd fdde 	bl	800091c <charToSegment>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <PrepareBuffer18+0x78>)
 8002d66:	551a      	strb	r2, [r3, r4]
    for (int i = 0; i < 6; i++)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	ddde      	ble.n	8002d32 <PrepareBuffer18+0x2a>
        }
    }

    // 3) Ostatnie 6 (12..17) = puste
    // (znów, już jest 0 po memset)
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd90      	pop	{r4, r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	200006d4 	.word	0x200006d4

08002d84 <ShowWindow>:
 *
 *         Digit0 (najbardziej lewy) - wstawiamy w bity [47..40],
 *         Digit5 (najbardziej prawy) - w bity [7..0].
 */
static void ShowWindow(void)
{
 8002d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d88:	b09b      	sub	sp, #108	@ 0x6c
 8002d8a:	af00      	add	r7, sp, #0
    // Zabezpieczenie – jeśli windowIndex < 0 lub windowIndex+5 >= 18,
    // to niektóre odczyty będą poza [0..17], ale wtedy możemy dać 0 (puste).
    // Najprościej – brać "safe read".
    uint64_t val = 0ULL;
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    // digit0 (lewa pozycja wyświetlacza)
    uint8_t d0 = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (windowIndex + 0 >= 0 && windowIndex + 0 < TOTAL_LEN)
 8002d9e:	4b90      	ldr	r3, [pc, #576]	@ (8002fe0 <ShowWindow+0x25c>)
 8002da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	db0c      	blt.n	8002dc2 <ShowWindow+0x3e>
 8002da8:	4b8d      	ldr	r3, [pc, #564]	@ (8002fe0 <ShowWindow+0x25c>)
 8002daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dae:	2b11      	cmp	r3, #17
 8002db0:	dc07      	bgt.n	8002dc2 <ShowWindow+0x3e>
        d0 = buffer[windowIndex + 0];
 8002db2:	4b8b      	ldr	r3, [pc, #556]	@ (8002fe0 <ShowWindow+0x25c>)
 8002db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db8:	461a      	mov	r2, r3
 8002dba:	4b8a      	ldr	r3, [pc, #552]	@ (8002fe4 <ShowWindow+0x260>)
 8002dbc:	5c9b      	ldrb	r3, [r3, r2]
 8002dbe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

    // digit1
    uint8_t d1 = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
    if (windowIndex + 1 >= 0 && windowIndex + 1 < TOTAL_LEN)
 8002dc8:	4b85      	ldr	r3, [pc, #532]	@ (8002fe0 <ShowWindow+0x25c>)
 8002dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd2:	db0c      	blt.n	8002dee <ShowWindow+0x6a>
 8002dd4:	4b82      	ldr	r3, [pc, #520]	@ (8002fe0 <ShowWindow+0x25c>)
 8002dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dda:	2b10      	cmp	r3, #16
 8002ddc:	dc07      	bgt.n	8002dee <ShowWindow+0x6a>
        d1 = buffer[windowIndex + 1];
 8002dde:	4b80      	ldr	r3, [pc, #512]	@ (8002fe0 <ShowWindow+0x25c>)
 8002de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	4b7f      	ldr	r3, [pc, #508]	@ (8002fe4 <ShowWindow+0x260>)
 8002de8:	5c9b      	ldrb	r3, [r3, r2]
 8002dea:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // digit2
    uint8_t d2 = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
    if (windowIndex + 2 >= 0 && windowIndex + 2 < TOTAL_LEN)
 8002df4:	4b7a      	ldr	r3, [pc, #488]	@ (8002fe0 <ShowWindow+0x25c>)
 8002df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dfa:	f113 0f02 	cmn.w	r3, #2
 8002dfe:	db0c      	blt.n	8002e1a <ShowWindow+0x96>
 8002e00:	4b77      	ldr	r3, [pc, #476]	@ (8002fe0 <ShowWindow+0x25c>)
 8002e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e06:	2b0f      	cmp	r3, #15
 8002e08:	dc07      	bgt.n	8002e1a <ShowWindow+0x96>
        d2 = buffer[windowIndex + 2];
 8002e0a:	4b75      	ldr	r3, [pc, #468]	@ (8002fe0 <ShowWindow+0x25c>)
 8002e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e10:	1c9a      	adds	r2, r3, #2
 8002e12:	4b74      	ldr	r3, [pc, #464]	@ (8002fe4 <ShowWindow+0x260>)
 8002e14:	5c9b      	ldrb	r3, [r3, r2]
 8002e16:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

    // digit3
    uint8_t d3 = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
    if (windowIndex + 3 >= 0 && windowIndex + 3 < TOTAL_LEN)
 8002e20:	4b6f      	ldr	r3, [pc, #444]	@ (8002fe0 <ShowWindow+0x25c>)
 8002e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e26:	f113 0f03 	cmn.w	r3, #3
 8002e2a:	db0c      	blt.n	8002e46 <ShowWindow+0xc2>
 8002e2c:	4b6c      	ldr	r3, [pc, #432]	@ (8002fe0 <ShowWindow+0x25c>)
 8002e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e32:	2b0e      	cmp	r3, #14
 8002e34:	dc07      	bgt.n	8002e46 <ShowWindow+0xc2>
        d3 = buffer[windowIndex + 3];
 8002e36:	4b6a      	ldr	r3, [pc, #424]	@ (8002fe0 <ShowWindow+0x25c>)
 8002e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e3c:	1cda      	adds	r2, r3, #3
 8002e3e:	4b69      	ldr	r3, [pc, #420]	@ (8002fe4 <ShowWindow+0x260>)
 8002e40:	5c9b      	ldrb	r3, [r3, r2]
 8002e42:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

    // digit4
    uint8_t d4 = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    if (windowIndex + 4 >= 0 && windowIndex + 4 < TOTAL_LEN)
 8002e4c:	4b64      	ldr	r3, [pc, #400]	@ (8002fe0 <ShowWindow+0x25c>)
 8002e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e52:	f113 0f04 	cmn.w	r3, #4
 8002e56:	db0c      	blt.n	8002e72 <ShowWindow+0xee>
 8002e58:	4b61      	ldr	r3, [pc, #388]	@ (8002fe0 <ShowWindow+0x25c>)
 8002e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e5e:	2b0d      	cmp	r3, #13
 8002e60:	dc07      	bgt.n	8002e72 <ShowWindow+0xee>
        d4 = buffer[windowIndex + 4];
 8002e62:	4b5f      	ldr	r3, [pc, #380]	@ (8002fe0 <ShowWindow+0x25c>)
 8002e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e68:	1d1a      	adds	r2, r3, #4
 8002e6a:	4b5e      	ldr	r3, [pc, #376]	@ (8002fe4 <ShowWindow+0x260>)
 8002e6c:	5c9b      	ldrb	r3, [r3, r2]
 8002e6e:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

    // digit5 (prawa pozycja wyświetlacza)
    uint8_t d5 = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
    if (windowIndex + 5 >= 0 && windowIndex + 5 < TOTAL_LEN)
 8002e78:	4b59      	ldr	r3, [pc, #356]	@ (8002fe0 <ShowWindow+0x25c>)
 8002e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e7e:	f113 0f05 	cmn.w	r3, #5
 8002e82:	db0c      	blt.n	8002e9e <ShowWindow+0x11a>
 8002e84:	4b56      	ldr	r3, [pc, #344]	@ (8002fe0 <ShowWindow+0x25c>)
 8002e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	dc07      	bgt.n	8002e9e <ShowWindow+0x11a>
        d5 = buffer[windowIndex + 5];
 8002e8e:	4b54      	ldr	r3, [pc, #336]	@ (8002fe0 <ShowWindow+0x25c>)
 8002e90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e94:	1d5a      	adds	r2, r3, #5
 8002e96:	4b53      	ldr	r3, [pc, #332]	@ (8002fe4 <ShowWindow+0x260>)
 8002e98:	5c9b      	ldrb	r3, [r3, r2]
 8002e9a:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

    // Złóż do 48-bitów (digit0 w [47..40], digit1 w [39..32], ...)
    // UWAGA: digit0 to LEWA, digit5 to PRAWA
    val |= ((uint64_t)d5 << 40);
 8002e9e:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ea6:	657a      	str	r2, [r7, #84]	@ 0x54
 8002ea8:	f04f 0000 	mov.w	r0, #0
 8002eac:	f04f 0100 	mov.w	r1, #0
 8002eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eb2:	0219      	lsls	r1, r3, #8
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002eba:	ea42 0600 	orr.w	r6, r2, r0
 8002ebe:	62be      	str	r6, [r7, #40]	@ 0x28
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ec4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ec8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    val |= ((uint64_t)d4 << 32);
 8002ecc:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ed4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002ed6:	f04f 0000 	mov.w	r0, #0
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ee8:	ea42 0600 	orr.w	r6, r2, r0
 8002eec:	623e      	str	r6, [r7, #32]
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ef6:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    val |= ((uint64_t)d3 << 24);
 8002efa:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8002efe:	2200      	movs	r2, #0
 8002f00:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f02:	647a      	str	r2, [r7, #68]	@ 0x44
 8002f04:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8002f08:	460b      	mov	r3, r1
 8002f0a:	0a1d      	lsrs	r5, r3, #8
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	061c      	lsls	r4, r3, #24
 8002f10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f14:	ea42 0104 	orr.w	r1, r2, r4
 8002f18:	61b9      	str	r1, [r7, #24]
 8002f1a:	432b      	orrs	r3, r5
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002f22:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d2 << 16);
 8002f26:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	4698      	mov	r8, r3
 8002f2e:	4691      	mov	r9, r2
 8002f30:	f04f 0000 	mov.w	r0, #0
 8002f34:	f04f 0100 	mov.w	r1, #0
 8002f38:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8002f3c:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8002f40:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8002f44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f48:	ea42 0400 	orr.w	r4, r2, r0
 8002f4c:	613c      	str	r4, [r7, #16]
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002f56:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d1 << 8);
 8002f5a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002f5e:	2200      	movs	r2, #0
 8002f60:	469a      	mov	sl, r3
 8002f62:	4693      	mov	fp, r2
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002f70:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002f74:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002f78:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002f7c:	ea40 0402 	orr.w	r4, r0, r2
 8002f80:	60bc      	str	r4, [r7, #8]
 8002f82:	430b      	orrs	r3, r1
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002f8a:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d0 << 0);
 8002f8e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002f92:	2200      	movs	r2, #0
 8002f94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f96:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f9c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	4311      	orrs	r1, r2
 8002fa4:	6039      	str	r1, [r7, #0]
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	4319      	orrs	r1, r3
 8002faa:	6079      	str	r1, [r7, #4]
 8002fac:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002fb0:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

    clockReg.bottomDisplay = val;
 8002fb4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fb8:	633a      	str	r2, [r7, #48]	@ 0x30
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe8 <ShowWindow+0x264>)
 8002fc0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	f8c3 2012 	str.w	r2, [r3, #18]
 8002fca:	460a      	mov	r2, r1
 8002fcc:	82da      	strh	r2, [r3, #22]
    UpdateAllDisplays(&clockReg);
 8002fce:	4806      	ldr	r0, [pc, #24]	@ (8002fe8 <ShowWindow+0x264>)
 8002fd0:	f7fe f968 	bl	80012a4 <UpdateAllDisplays>
}
 8002fd4:	bf00      	nop
 8002fd6:	376c      	adds	r7, #108	@ 0x6c
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fde:	bf00      	nop
 8002fe0:	200006f0 	.word	0x200006f0
 8002fe4:	200006d4 	.word	0x200006d4
 8002fe8:	20000684 	.word	0x20000684

08002fec <SLIDER_Init>:

/** ---------------------------------------------------------------------------
 *  @brief Inicjuje wszystkie zmienne slidera w stan "spoczynku". */
void SLIDER_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
    isScrolling        = false;
 8002ff0:	4b10      	ldr	r3, [pc, #64]	@ (8003034 <SLIDER_Init+0x48>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
    scrollPhase        = SCROLL_PHASE_NONE;
 8002ff6:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <SLIDER_Init+0x4c>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
    currentDirection   = SCROLL_RIGHT_TO_LEFT;
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800303c <SLIDER_Init+0x50>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
    windowIndex        = 0;
 8003002:	4b0f      	ldr	r3, [pc, #60]	@ (8003040 <SLIDER_Init+0x54>)
 8003004:	2200      	movs	r2, #0
 8003006:	801a      	strh	r2, [r3, #0]
    scrollSpeedCounter = 0;
 8003008:	4b0e      	ldr	r3, [pc, #56]	@ (8003044 <SLIDER_Init+0x58>)
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]

    doStayForever  = false;
 800300e:	4b0e      	ldr	r3, [pc, #56]	@ (8003048 <SLIDER_Init+0x5c>)
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
    doPauseThenOut = false;
 8003014:	4b0d      	ldr	r3, [pc, #52]	@ (800304c <SLIDER_Init+0x60>)
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
    pauseCounter   = 0;
 800301a:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <SLIDER_Init+0x64>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
    pauseTicks     = 0;
 8003020:	4b0c      	ldr	r3, [pc, #48]	@ (8003054 <SLIDER_Init+0x68>)
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]

    memset(buffer, 0, sizeof(buffer));
 8003026:	2212      	movs	r2, #18
 8003028:	2100      	movs	r1, #0
 800302a:	480b      	ldr	r0, [pc, #44]	@ (8003058 <SLIDER_Init+0x6c>)
 800302c:	f008 fb4a 	bl	800b6c4 <memset>
}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	200006e6 	.word	0x200006e6
 8003038:	200006e7 	.word	0x200006e7
 800303c:	200006e8 	.word	0x200006e8
 8003040:	200006f0 	.word	0x200006f0
 8003044:	200006f2 	.word	0x200006f2
 8003048:	200006f3 	.word	0x200006f3
 800304c:	200006f4 	.word	0x200006f4
 8003050:	200006f8 	.word	0x200006f8
 8003054:	200006fc 	.word	0x200006fc
 8003058:	200006d4 	.word	0x200006d4

0800305c <SLIDER_SetString>:
 *  @brief Proste przewinięcie (bez fazy IN i pauzy) – tylko OUT.
 *         Załóżmy, że "startowo" cały napis jest na ekranie
 *         i jedzie na zewnątrz.
 */
void SLIDER_SetString(const char* text, ScrollDirection dir, uint32_t pauseTime)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	460b      	mov	r3, r1
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	72fb      	strb	r3, [r7, #11]
	 if (!text) return;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01d      	beq.n	80030ac <SLIDER_SetString+0x50>

	    PrepareBuffer18(text);
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f7ff fe49 	bl	8002d08 <PrepareBuffer18>

	    currentDirection = dir;
 8003076:	4a0f      	ldr	r2, [pc, #60]	@ (80030b4 <SLIDER_SetString+0x58>)
 8003078:	7afb      	ldrb	r3, [r7, #11]
 800307a:	7013      	strb	r3, [r2, #0]
	    scrollPhase      = SCROLL_PHASE_PAUSE;  // Rozpoczynamy od pauzy
 800307c:	4b0e      	ldr	r3, [pc, #56]	@ (80030b8 <SLIDER_SetString+0x5c>)
 800307e:	2202      	movs	r2, #2
 8003080:	701a      	strb	r2, [r3, #0]
	    isScrolling      = true;
 8003082:	4b0e      	ldr	r3, [pc, #56]	@ (80030bc <SLIDER_SetString+0x60>)
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]

	    doStayForever    = false;
 8003088:	4b0d      	ldr	r3, [pc, #52]	@ (80030c0 <SLIDER_SetString+0x64>)
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
	    doPauseThenOut   = true;
 800308e:	4b0d      	ldr	r3, [pc, #52]	@ (80030c4 <SLIDER_SetString+0x68>)
 8003090:	2201      	movs	r2, #1
 8003092:	701a      	strb	r2, [r3, #0]
	    pauseTicks       = pauseTime;
 8003094:	4a0c      	ldr	r2, [pc, #48]	@ (80030c8 <SLIDER_SetString+0x6c>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6013      	str	r3, [r2, #0]
	    pauseCounter     = pauseTime;
 800309a:	4a0c      	ldr	r2, [pc, #48]	@ (80030cc <SLIDER_SetString+0x70>)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6013      	str	r3, [r2, #0]

	    // Ustawienie widocznego napisu od razu
	    windowIndex = 6;  // Miejsce, gdzie napis jest w pełni widoczny
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <SLIDER_SetString+0x74>)
 80030a2:	2206      	movs	r2, #6
 80030a4:	801a      	strh	r2, [r3, #0]
	    ShowWindow();
 80030a6:	f7ff fe6d 	bl	8002d84 <ShowWindow>
 80030aa:	e000      	b.n	80030ae <SLIDER_SetString+0x52>
	 if (!text) return;
 80030ac:	bf00      	nop
}
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	200006e8 	.word	0x200006e8
 80030b8:	200006e7 	.word	0x200006e7
 80030bc:	200006e6 	.word	0x200006e6
 80030c0:	200006f3 	.word	0x200006f3
 80030c4:	200006f4 	.word	0x200006f4
 80030c8:	200006fc 	.word	0x200006fc
 80030cc:	200006f8 	.word	0x200006f8
 80030d0:	200006f0 	.word	0x200006f0

080030d4 <SLIDER_Stop>:

/** ---------------------------------------------------------------------------
 *  @brief Zatrzymuje scrolling natychmiast.
 */
void SLIDER_Stop(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
    isScrolling = false;
 80030d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <SLIDER_Stop+0x34>)
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
    scrollPhase = SCROLL_PHASE_NONE;
 80030de:	4b0b      	ldr	r3, [pc, #44]	@ (800310c <SLIDER_Stop+0x38>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
    windowIndex = 0;
 80030e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003110 <SLIDER_Stop+0x3c>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	801a      	strh	r2, [r3, #0]

    // Jeśli istnieje oczekujące żądanie wyświetlenia liczby, realizujemy je.
    if (displayNumberPending) {
 80030ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003114 <SLIDER_Stop+0x40>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <SLIDER_Stop+0x2e>
        // Wyświetlamy zapamiętaną liczbę
        SLIDER_DisplayNumber(pendingNumberToDisplay);
 80030f2:	4b09      	ldr	r3, [pc, #36]	@ (8003118 <SLIDER_Stop+0x44>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f8f6 	bl	80032e8 <SLIDER_DisplayNumber>
        // Resetujemy flagę, bo żądanie zostało obsłużone
        displayNumberPending = false;
 80030fc:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <SLIDER_Stop+0x40>)
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
    }
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	200006e6 	.word	0x200006e6
 800310c:	200006e7 	.word	0x200006e7
 8003110:	200006f0 	.word	0x200006f0
 8003114:	200006e9 	.word	0x200006e9
 8003118:	200006ec 	.word	0x200006ec

0800311c <SLIDER_Update>:

/** ---------------------------------------------------------------------------
 *  @brief Główna funkcja wywoływana cyklicznie (np. co 10 ms w przerwaniu).
 */
void SLIDER_Update(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
    if (!isScrolling) return;
 8003120:	4b60      	ldr	r3, [pc, #384]	@ (80032a4 <SLIDER_Update+0x188>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	f083 0301 	eor.w	r3, r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 80b5 	bne.w	800329a <SLIDER_Update+0x17e>

    // Co scrollSpeedTicks odświeżamy
    if (scrollSpeedCounter < scrollSpeedTicks)
 8003130:	4b5d      	ldr	r3, [pc, #372]	@ (80032a8 <SLIDER_Update+0x18c>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2205      	movs	r2, #5
 8003136:	4293      	cmp	r3, r2
 8003138:	d206      	bcs.n	8003148 <SLIDER_Update+0x2c>
    {
        scrollSpeedCounter++;
 800313a:	4b5b      	ldr	r3, [pc, #364]	@ (80032a8 <SLIDER_Update+0x18c>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	3301      	adds	r3, #1
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4b59      	ldr	r3, [pc, #356]	@ (80032a8 <SLIDER_Update+0x18c>)
 8003144:	701a      	strb	r2, [r3, #0]
        return;
 8003146:	e0ab      	b.n	80032a0 <SLIDER_Update+0x184>
    }
    scrollSpeedCounter = 0;
 8003148:	4b57      	ldr	r3, [pc, #348]	@ (80032a8 <SLIDER_Update+0x18c>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]

    switch (scrollPhase)
 800314e:	4b57      	ldr	r3, [pc, #348]	@ (80032ac <SLIDER_Update+0x190>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d075      	beq.n	8003242 <SLIDER_Update+0x126>
 8003156:	2b03      	cmp	r3, #3
 8003158:	f300 80a1 	bgt.w	800329e <SLIDER_Update+0x182>
 800315c:	2b01      	cmp	r3, #1
 800315e:	d002      	beq.n	8003166 <SLIDER_Update+0x4a>
 8003160:	2b02      	cmp	r3, #2
 8003162:	d060      	beq.n	8003226 <SLIDER_Update+0x10a>
        break;
    }

    default:
        // SCROLL_PHASE_NONE => nic
        return;
 8003164:	e09b      	b.n	800329e <SLIDER_Update+0x182>
        if (currentDirection == SCROLL_RIGHT_TO_LEFT)
 8003166:	4b52      	ldr	r3, [pc, #328]	@ (80032b0 <SLIDER_Update+0x194>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d12d      	bne.n	80031ca <SLIDER_Update+0xae>
            windowIndex--;
 800316e:	4b51      	ldr	r3, [pc, #324]	@ (80032b4 <SLIDER_Update+0x198>)
 8003170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29b      	uxth	r3, r3
 800317a:	b21a      	sxth	r2, r3
 800317c:	4b4d      	ldr	r3, [pc, #308]	@ (80032b4 <SLIDER_Update+0x198>)
 800317e:	801a      	strh	r2, [r3, #0]
            if (windowIndex == 6)
 8003180:	4b4c      	ldr	r3, [pc, #304]	@ (80032b4 <SLIDER_Update+0x198>)
 8003182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003186:	2b06      	cmp	r3, #6
 8003188:	f040 8081 	bne.w	800328e <SLIDER_Update+0x172>
                if (doStayForever)
 800318c:	4b4a      	ldr	r3, [pc, #296]	@ (80032b8 <SLIDER_Update+0x19c>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d006      	beq.n	80031a2 <SLIDER_Update+0x86>
                    isScrolling = false;
 8003194:	4b43      	ldr	r3, [pc, #268]	@ (80032a4 <SLIDER_Update+0x188>)
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
                    scrollPhase = SCROLL_PHASE_NONE;
 800319a:	4b44      	ldr	r3, [pc, #272]	@ (80032ac <SLIDER_Update+0x190>)
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
        break;
 80031a0:	e075      	b.n	800328e <SLIDER_Update+0x172>
                else if (doPauseThenOut && pauseTicks > 0)
 80031a2:	4b46      	ldr	r3, [pc, #280]	@ (80032bc <SLIDER_Update+0x1a0>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <SLIDER_Update+0xa6>
 80031aa:	4b45      	ldr	r3, [pc, #276]	@ (80032c0 <SLIDER_Update+0x1a4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <SLIDER_Update+0xa6>
                    scrollPhase = SCROLL_PHASE_PAUSE;
 80031b2:	4b3e      	ldr	r3, [pc, #248]	@ (80032ac <SLIDER_Update+0x190>)
 80031b4:	2202      	movs	r2, #2
 80031b6:	701a      	strb	r2, [r3, #0]
                    pauseCounter = pauseTicks;
 80031b8:	4b41      	ldr	r3, [pc, #260]	@ (80032c0 <SLIDER_Update+0x1a4>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a41      	ldr	r2, [pc, #260]	@ (80032c4 <SLIDER_Update+0x1a8>)
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	e030      	b.n	8003224 <SLIDER_Update+0x108>
                    scrollPhase = SCROLL_PHASE_OUT;
 80031c2:	4b3a      	ldr	r3, [pc, #232]	@ (80032ac <SLIDER_Update+0x190>)
 80031c4:	2203      	movs	r2, #3
 80031c6:	701a      	strb	r2, [r3, #0]
        break;
 80031c8:	e061      	b.n	800328e <SLIDER_Update+0x172>
            windowIndex++;
 80031ca:	4b3a      	ldr	r3, [pc, #232]	@ (80032b4 <SLIDER_Update+0x198>)
 80031cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3301      	adds	r3, #1
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	b21a      	sxth	r2, r3
 80031d8:	4b36      	ldr	r3, [pc, #216]	@ (80032b4 <SLIDER_Update+0x198>)
 80031da:	801a      	strh	r2, [r3, #0]
            if (windowIndex == 6)
 80031dc:	4b35      	ldr	r3, [pc, #212]	@ (80032b4 <SLIDER_Update+0x198>)
 80031de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d153      	bne.n	800328e <SLIDER_Update+0x172>
                if (doStayForever)
 80031e6:	4b34      	ldr	r3, [pc, #208]	@ (80032b8 <SLIDER_Update+0x19c>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d006      	beq.n	80031fc <SLIDER_Update+0xe0>
                    isScrolling = false;
 80031ee:	4b2d      	ldr	r3, [pc, #180]	@ (80032a4 <SLIDER_Update+0x188>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
                    scrollPhase = SCROLL_PHASE_NONE;
 80031f4:	4b2d      	ldr	r3, [pc, #180]	@ (80032ac <SLIDER_Update+0x190>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
        break;
 80031fa:	e048      	b.n	800328e <SLIDER_Update+0x172>
                else if (doPauseThenOut && pauseTicks > 0)
 80031fc:	4b2f      	ldr	r3, [pc, #188]	@ (80032bc <SLIDER_Update+0x1a0>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00b      	beq.n	800321c <SLIDER_Update+0x100>
 8003204:	4b2e      	ldr	r3, [pc, #184]	@ (80032c0 <SLIDER_Update+0x1a4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <SLIDER_Update+0x100>
                    scrollPhase = SCROLL_PHASE_PAUSE;
 800320c:	4b27      	ldr	r3, [pc, #156]	@ (80032ac <SLIDER_Update+0x190>)
 800320e:	2202      	movs	r2, #2
 8003210:	701a      	strb	r2, [r3, #0]
                    pauseCounter = pauseTicks;
 8003212:	4b2b      	ldr	r3, [pc, #172]	@ (80032c0 <SLIDER_Update+0x1a4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2b      	ldr	r2, [pc, #172]	@ (80032c4 <SLIDER_Update+0x1a8>)
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e003      	b.n	8003224 <SLIDER_Update+0x108>
                    scrollPhase = SCROLL_PHASE_OUT;
 800321c:	4b23      	ldr	r3, [pc, #140]	@ (80032ac <SLIDER_Update+0x190>)
 800321e:	2203      	movs	r2, #3
 8003220:	701a      	strb	r2, [r3, #0]
        break;
 8003222:	e034      	b.n	800328e <SLIDER_Update+0x172>
 8003224:	e033      	b.n	800328e <SLIDER_Update+0x172>
        if (pauseCounter > 0)
 8003226:	4b27      	ldr	r3, [pc, #156]	@ (80032c4 <SLIDER_Update+0x1a8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <SLIDER_Update+0x11e>
            pauseCounter--;
 800322e:	4b25      	ldr	r3, [pc, #148]	@ (80032c4 <SLIDER_Update+0x1a8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3b01      	subs	r3, #1
 8003234:	4a23      	ldr	r2, [pc, #140]	@ (80032c4 <SLIDER_Update+0x1a8>)
 8003236:	6013      	str	r3, [r2, #0]
        break;
 8003238:	e02c      	b.n	8003294 <SLIDER_Update+0x178>
            scrollPhase = SCROLL_PHASE_OUT;
 800323a:	4b1c      	ldr	r3, [pc, #112]	@ (80032ac <SLIDER_Update+0x190>)
 800323c:	2203      	movs	r2, #3
 800323e:	701a      	strb	r2, [r3, #0]
        break;
 8003240:	e028      	b.n	8003294 <SLIDER_Update+0x178>
        if (currentDirection == SCROLL_RIGHT_TO_LEFT)
 8003242:	4b1b      	ldr	r3, [pc, #108]	@ (80032b0 <SLIDER_Update+0x194>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d110      	bne.n	800326c <SLIDER_Update+0x150>
            windowIndex--;
 800324a:	4b1a      	ldr	r3, [pc, #104]	@ (80032b4 <SLIDER_Update+0x198>)
 800324c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29b      	uxth	r3, r3
 8003256:	b21a      	sxth	r2, r3
 8003258:	4b16      	ldr	r3, [pc, #88]	@ (80032b4 <SLIDER_Update+0x198>)
 800325a:	801a      	strh	r2, [r3, #0]
            if (windowIndex < 0)
 800325c:	4b15      	ldr	r3, [pc, #84]	@ (80032b4 <SLIDER_Update+0x198>)
 800325e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003262:	2b00      	cmp	r3, #0
 8003264:	da15      	bge.n	8003292 <SLIDER_Update+0x176>
                SLIDER_Stop();
 8003266:	f7ff ff35 	bl	80030d4 <SLIDER_Stop>
        break;
 800326a:	e012      	b.n	8003292 <SLIDER_Update+0x176>
            windowIndex++;
 800326c:	4b11      	ldr	r3, [pc, #68]	@ (80032b4 <SLIDER_Update+0x198>)
 800326e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003272:	b29b      	uxth	r3, r3
 8003274:	3301      	adds	r3, #1
 8003276:	b29b      	uxth	r3, r3
 8003278:	b21a      	sxth	r2, r3
 800327a:	4b0e      	ldr	r3, [pc, #56]	@ (80032b4 <SLIDER_Update+0x198>)
 800327c:	801a      	strh	r2, [r3, #0]
            if (windowIndex > 12)
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <SLIDER_Update+0x198>)
 8003280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003284:	2b0c      	cmp	r3, #12
 8003286:	dd04      	ble.n	8003292 <SLIDER_Update+0x176>
                SLIDER_Stop();
 8003288:	f7ff ff24 	bl	80030d4 <SLIDER_Stop>
        break;
 800328c:	e001      	b.n	8003292 <SLIDER_Update+0x176>
        break;
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <SLIDER_Update+0x178>
        break;
 8003292:	bf00      	nop
    }

    // Po zmianie windowIndex – odśwież wyświetlacz
    ShowWindow();
 8003294:	f7ff fd76 	bl	8002d84 <ShowWindow>
 8003298:	e002      	b.n	80032a0 <SLIDER_Update+0x184>
    if (!isScrolling) return;
 800329a:	bf00      	nop
 800329c:	e000      	b.n	80032a0 <SLIDER_Update+0x184>
        return;
 800329e:	bf00      	nop
}
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	200006e6 	.word	0x200006e6
 80032a8:	200006f2 	.word	0x200006f2
 80032ac:	200006e7 	.word	0x200006e7
 80032b0:	200006e8 	.word	0x200006e8
 80032b4:	200006f0 	.word	0x200006f0
 80032b8:	200006f3 	.word	0x200006f3
 80032bc:	200006f4 	.word	0x200006f4
 80032c0:	200006fc 	.word	0x200006fc
 80032c4:	200006f8 	.word	0x200006f8

080032c8 <SLIDER_IsStopped>:
bool SLIDER_IsStopped(void) {
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
    return (scrollPhase == SCROLL_PHASE_NONE);
 80032cc:	4b05      	ldr	r3, [pc, #20]	@ (80032e4 <SLIDER_IsStopped+0x1c>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
}
 80032da:	4618      	mov	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	200006e7 	.word	0x200006e7

080032e8 <SLIDER_DisplayNumber>:



void SLIDER_DisplayNumber(uint32_t number)
{
 80032e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ec:	b09f      	sub	sp, #124	@ 0x7c
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	65f8      	str	r0, [r7, #92]	@ 0x5c
    // Jeżeli slider nie jest zatrzymany, zapamiętaj żądanie i wyjdź
    if (!SLIDER_IsStopped()) {
 80032f2:	f7ff ffe9 	bl	80032c8 <SLIDER_IsStopped>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f083 0301 	eor.w	r3, r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <SLIDER_DisplayNumber+0x30>
        displayNumberPending = true;
 8003302:	4b7b      	ldr	r3, [pc, #492]	@ (80034f0 <SLIDER_DisplayNumber+0x208>)
 8003304:	2201      	movs	r2, #1
 8003306:	701a      	strb	r2, [r3, #0]
        pendingNumberToDisplay = (number > 999999) ? 999999 : number;
 8003308:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800330a:	4a7a      	ldr	r2, [pc, #488]	@ (80034f4 <SLIDER_DisplayNumber+0x20c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	bf28      	it	cs
 8003310:	4613      	movcs	r3, r2
 8003312:	4a79      	ldr	r2, [pc, #484]	@ (80034f8 <SLIDER_DisplayNumber+0x210>)
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e0e7      	b.n	80034e8 <SLIDER_DisplayNumber+0x200>
    }

    // Slider jest zatrzymany – wyświetlamy liczbę od razu

    // Ograniczamy liczbę do maksimum 999999
    if (number > 999999)
 8003318:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800331a:	4b76      	ldr	r3, [pc, #472]	@ (80034f4 <SLIDER_DisplayNumber+0x20c>)
 800331c:	429a      	cmp	r2, r3
 800331e:	d901      	bls.n	8003324 <SLIDER_DisplayNumber+0x3c>
        number = 999999;
 8003320:	4b74      	ldr	r3, [pc, #464]	@ (80034f4 <SLIDER_DisplayNumber+0x20c>)
 8003322:	65fb      	str	r3, [r7, #92]	@ 0x5c

    uint8_t digits[6];

    // Inicjujemy wszystkie cyfry jako puste (segment odpowiadający spacji)
    for (int i = 0; i < 6; i++) {
 8003324:	2300      	movs	r3, #0
 8003326:	677b      	str	r3, [r7, #116]	@ 0x74
 8003328:	e00d      	b.n	8003346 <SLIDER_DisplayNumber+0x5e>
        digits[i] = charToSegment(' ');
 800332a:	2020      	movs	r0, #32
 800332c:	f7fd faf6 	bl	800091c <charToSegment>
 8003330:	4603      	mov	r3, r0
 8003332:	4619      	mov	r1, r3
 8003334:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8003338:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800333a:	441a      	add	r2, r3
 800333c:	460b      	mov	r3, r1
 800333e:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < 6; i++) {
 8003340:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003342:	3301      	adds	r3, #1
 8003344:	677b      	str	r3, [r7, #116]	@ 0x74
 8003346:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003348:	2b05      	cmp	r3, #5
 800334a:	ddee      	ble.n	800332a <SLIDER_DisplayNumber+0x42>
    }

    // Zamieniamy liczbę na cyfry od końca
    for (int i = 5; i >= 0; i--) {
 800334c:	2305      	movs	r3, #5
 800334e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003350:	e020      	b.n	8003394 <SLIDER_DisplayNumber+0xac>
        digits[i] = charToSegment('0' + (number % 10));
 8003352:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003354:	4b69      	ldr	r3, [pc, #420]	@ (80034fc <SLIDER_DisplayNumber+0x214>)
 8003356:	fba3 2301 	umull	r2, r3, r3, r1
 800335a:	08da      	lsrs	r2, r3, #3
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	1aca      	subs	r2, r1, r3
 8003366:	b2d3      	uxtb	r3, r2
 8003368:	3330      	adds	r3, #48	@ 0x30
 800336a:	b2db      	uxtb	r3, r3
 800336c:	4618      	mov	r0, r3
 800336e:	f7fd fad5 	bl	800091c <charToSegment>
 8003372:	4603      	mov	r3, r0
 8003374:	4619      	mov	r1, r3
 8003376:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800337a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800337c:	441a      	add	r2, r3
 800337e:	460b      	mov	r3, r1
 8003380:	7013      	strb	r3, [r2, #0]
        number /= 10;
 8003382:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003384:	4b5d      	ldr	r3, [pc, #372]	@ (80034fc <SLIDER_DisplayNumber+0x214>)
 8003386:	fba3 2302 	umull	r2, r3, r3, r2
 800338a:	08db      	lsrs	r3, r3, #3
 800338c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    for (int i = 5; i >= 0; i--) {
 800338e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003390:	3b01      	subs	r3, #1
 8003392:	673b      	str	r3, [r7, #112]	@ 0x70
 8003394:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003396:	2b00      	cmp	r3, #0
 8003398:	dadb      	bge.n	8003352 <SLIDER_DisplayNumber+0x6a>
    }

    // Składamy 6 cyfr do 48-bitowej wartości
    uint64_t displayVal = 0ULL;
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[5] << 40);
 80033a6:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2200      	movs	r2, #0
 80033ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80033b0:	657a      	str	r2, [r7, #84]	@ 0x54
 80033b2:	f04f 0000 	mov.w	r0, #0
 80033b6:	f04f 0100 	mov.w	r1, #0
 80033ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033bc:	0219      	lsls	r1, r3, #8
 80033be:	2000      	movs	r0, #0
 80033c0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80033c4:	ea42 0600 	orr.w	r6, r2, r0
 80033c8:	62be      	str	r6, [r7, #40]	@ 0x28
 80033ca:	430b      	orrs	r3, r1
 80033cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033d2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[4] << 32);
 80033d6:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2200      	movs	r2, #0
 80033de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033e0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80033e2:	f04f 0000 	mov.w	r0, #0
 80033e6:	f04f 0100 	mov.w	r1, #0
 80033ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033ec:	0019      	movs	r1, r3
 80033ee:	2000      	movs	r0, #0
 80033f0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80033f4:	ea42 0600 	orr.w	r6, r2, r0
 80033f8:	623e      	str	r6, [r7, #32]
 80033fa:	430b      	orrs	r3, r1
 80033fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80033fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003402:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[3] << 24);
 8003406:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2200      	movs	r2, #0
 800340e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003410:	647a      	str	r2, [r7, #68]	@ 0x44
 8003412:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003416:	460b      	mov	r3, r1
 8003418:	0a1d      	lsrs	r5, r3, #8
 800341a:	460b      	mov	r3, r1
 800341c:	061c      	lsls	r4, r3, #24
 800341e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003422:	ea42 0104 	orr.w	r1, r2, r4
 8003426:	61b9      	str	r1, [r7, #24]
 8003428:	432b      	orrs	r3, r5
 800342a:	61fb      	str	r3, [r7, #28]
 800342c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003430:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[2] << 16);
 8003434:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2200      	movs	r2, #0
 800343c:	4698      	mov	r8, r3
 800343e:	4691      	mov	r9, r2
 8003440:	f04f 0000 	mov.w	r0, #0
 8003444:	f04f 0100 	mov.w	r1, #0
 8003448:	ea4f 4109 	mov.w	r1, r9, lsl #16
 800344c:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8003450:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8003454:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003458:	ea42 0400 	orr.w	r4, r2, r0
 800345c:	613c      	str	r4, [r7, #16]
 800345e:	430b      	orrs	r3, r1
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003466:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[1] << 8);
 800346a:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2200      	movs	r2, #0
 8003472:	469a      	mov	sl, r3
 8003474:	4693      	mov	fp, r2
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003482:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003486:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800348a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800348e:	ea40 0402 	orr.w	r4, r0, r2
 8003492:	60bc      	str	r4, [r7, #8]
 8003494:	430b      	orrs	r3, r1
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800349c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[0] << 0);
 80034a0:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2200      	movs	r2, #0
 80034a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80034ac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80034b0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80034b4:	4621      	mov	r1, r4
 80034b6:	4311      	orrs	r1, r2
 80034b8:	6039      	str	r1, [r7, #0]
 80034ba:	4629      	mov	r1, r5
 80034bc:	4319      	orrs	r1, r3
 80034be:	6079      	str	r1, [r7, #4]
 80034c0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80034c4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68





    clockReg.bottomDisplay = displayVal;
 80034c8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80034cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80034d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <SLIDER_DisplayNumber+0x218>)
 80034d4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80034d8:	4602      	mov	r2, r0
 80034da:	f8c3 2012 	str.w	r2, [r3, #18]
 80034de:	460a      	mov	r2, r1
 80034e0:	82da      	strh	r2, [r3, #22]
    UpdateAllDisplays(&clockReg);
 80034e2:	4807      	ldr	r0, [pc, #28]	@ (8003500 <SLIDER_DisplayNumber+0x218>)
 80034e4:	f7fd fede 	bl	80012a4 <UpdateAllDisplays>
}
 80034e8:	377c      	adds	r7, #124	@ 0x7c
 80034ea:	46bd      	mov	sp, r7
 80034ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f0:	200006e9 	.word	0x200006e9
 80034f4:	000f423f 	.word	0x000f423f
 80034f8:	200006ec 	.word	0x200006ec
 80034fc:	cccccccd 	.word	0xcccccccd
 8003500:	20000684 	.word	0x20000684

08003504 <SLIDER_DisplayTemperature>:

void SLIDER_DisplayTemperature(int32_t temperature)
{
 8003504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003508:	b0a3      	sub	sp, #140	@ 0x8c
 800350a:	af00      	add	r7, sp, #0
 800350c:	6678      	str	r0, [r7, #100]	@ 0x64
    // Jeżeli slider nie jest zatrzymany, zapamiętaj żądanie i wyjdź
    if (!SLIDER_IsStopped()) {
 800350e:	f7ff fedb 	bl	80032c8 <SLIDER_IsStopped>
 8003512:	4603      	mov	r3, r0
 8003514:	f083 0301 	eor.w	r3, r3, #1
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d01a      	beq.n	8003554 <SLIDER_DisplayTemperature+0x50>
        displayNumberPending = true;
 800351e:	4bbb      	ldr	r3, [pc, #748]	@ (800380c <SLIDER_DisplayTemperature+0x308>)
 8003520:	2201      	movs	r2, #1
 8003522:	701a      	strb	r2, [r3, #0]
        // Ograniczamy temperaturę do zakresu -99999 do 99999
        if (temperature > 99999) {
 8003524:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003526:	4aba      	ldr	r2, [pc, #744]	@ (8003810 <SLIDER_DisplayTemperature+0x30c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	dd03      	ble.n	8003534 <SLIDER_DisplayTemperature+0x30>
            pendingNumberToDisplay = 99999;
 800352c:	4bb9      	ldr	r3, [pc, #740]	@ (8003814 <SLIDER_DisplayTemperature+0x310>)
 800352e:	4ab8      	ldr	r2, [pc, #736]	@ (8003810 <SLIDER_DisplayTemperature+0x30c>)
 8003530:	601a      	str	r2, [r3, #0]
        } else if (temperature < -99999) {
            pendingNumberToDisplay = 99999; // Można dodać osobną zmienną dla znaku minus
        } else {
            pendingNumberToDisplay = (temperature < 0) ? (uint32_t)(-temperature) : (uint32_t)temperature;
        }
        return;
 8003532:	e166      	b.n	8003802 <SLIDER_DisplayTemperature+0x2fe>
        } else if (temperature < -99999) {
 8003534:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003536:	4ab8      	ldr	r2, [pc, #736]	@ (8003818 <SLIDER_DisplayTemperature+0x314>)
 8003538:	4293      	cmp	r3, r2
 800353a:	da03      	bge.n	8003544 <SLIDER_DisplayTemperature+0x40>
            pendingNumberToDisplay = 99999; // Można dodać osobną zmienną dla znaku minus
 800353c:	4bb5      	ldr	r3, [pc, #724]	@ (8003814 <SLIDER_DisplayTemperature+0x310>)
 800353e:	4ab4      	ldr	r2, [pc, #720]	@ (8003810 <SLIDER_DisplayTemperature+0x30c>)
 8003540:	601a      	str	r2, [r3, #0]
        return;
 8003542:	e15e      	b.n	8003802 <SLIDER_DisplayTemperature+0x2fe>
            pendingNumberToDisplay = (temperature < 0) ? (uint32_t)(-temperature) : (uint32_t)temperature;
 8003544:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003546:	2b00      	cmp	r3, #0
 8003548:	bfb8      	it	lt
 800354a:	425b      	neglt	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	4bb1      	ldr	r3, [pc, #708]	@ (8003814 <SLIDER_DisplayTemperature+0x310>)
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e156      	b.n	8003802 <SLIDER_DisplayTemperature+0x2fe>
    }

    // Slider jest zatrzymany – wyświetlamy temperaturę od razu

    // Ograniczamy temperaturę do zakresu -99999 do 99999
    if (temperature > 99999)
 8003554:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003556:	4bae      	ldr	r3, [pc, #696]	@ (8003810 <SLIDER_DisplayTemperature+0x30c>)
 8003558:	429a      	cmp	r2, r3
 800355a:	dd02      	ble.n	8003562 <SLIDER_DisplayTemperature+0x5e>
        temperature = 99999;
 800355c:	4bac      	ldr	r3, [pc, #688]	@ (8003810 <SLIDER_DisplayTemperature+0x30c>)
 800355e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003560:	e005      	b.n	800356e <SLIDER_DisplayTemperature+0x6a>
    else if (temperature < -99999)
 8003562:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003564:	4bac      	ldr	r3, [pc, #688]	@ (8003818 <SLIDER_DisplayTemperature+0x314>)
 8003566:	429a      	cmp	r2, r3
 8003568:	da01      	bge.n	800356e <SLIDER_DisplayTemperature+0x6a>
        temperature = -99999;
 800356a:	4bab      	ldr	r3, [pc, #684]	@ (8003818 <SLIDER_DisplayTemperature+0x314>)
 800356c:	667b      	str	r3, [r7, #100]	@ 0x64

    uint8_t digits[6];

    // Inicjujemy wszystkie cyfry jako puste (segment odpowiadający spacji)
    for (int i = 0; i < 6; i++) {
 800356e:	2300      	movs	r3, #0
 8003570:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003574:	e010      	b.n	8003598 <SLIDER_DisplayTemperature+0x94>
        digits[i] = charToSegment(' ');
 8003576:	2020      	movs	r0, #32
 8003578:	f7fd f9d0 	bl	800091c <charToSegment>
 800357c:	4603      	mov	r3, r0
 800357e:	4619      	mov	r1, r3
 8003580:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8003584:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003588:	441a      	add	r2, r3
 800358a:	460b      	mov	r3, r1
 800358c:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < 6; i++) {
 800358e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003592:	3301      	adds	r3, #1
 8003594:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003598:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800359c:	2b05      	cmp	r3, #5
 800359e:	ddea      	ble.n	8003576 <SLIDER_DisplayTemperature+0x72>
    }

    bool isNegative = false;
 80035a0:	2300      	movs	r3, #0
 80035a2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
    if (temperature < 0) {
 80035a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	da05      	bge.n	80035b8 <SLIDER_DisplayTemperature+0xb4>
        isNegative = true;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
        temperature = -temperature;
 80035b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035b4:	425b      	negs	r3, r3
 80035b6:	667b      	str	r3, [r7, #100]	@ 0x64
    }

    // Przypisujemy symbole 'C' i '°' w zależności od warunków
    if (isNegative && temperature >= 10000) {
 80035b8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00b      	beq.n	80035d8 <SLIDER_DisplayTemperature+0xd4>
 80035c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80035c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80035c6:	429a      	cmp	r2, r3
 80035c8:	dd06      	ble.n	80035d8 <SLIDER_DisplayTemperature+0xd4>
        // Dla ujemnych wartości z 5 cyframi, wyświetlamy tylko '°'
        //digits[5] = charToSegment(' '); // Brak 'C'
        digits[5] = charToSegment('*'); // Symbol stopnia
 80035ca:	202a      	movs	r0, #42	@ 0x2a
 80035cc:	f7fd f9a6 	bl	800091c <charToSegment>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 80035d6:	e00b      	b.n	80035f0 <SLIDER_DisplayTemperature+0xec>

    } else {
        // Dla dodatnich lub ujemnych wartości z mniej niż 5 cyframi, wyświetlamy '°C'
        digits[5] = charToSegment('C'); // Litera 'C'
 80035d8:	2043      	movs	r0, #67	@ 0x43
 80035da:	f7fd f99f 	bl	800091c <charToSegment>
 80035de:	4603      	mov	r3, r0
 80035e0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
        digits[4] = charToSegment('*'); // Symbol stopnia
 80035e4:	202a      	movs	r0, #42	@ 0x2a
 80035e6:	f7fd f999 	bl	800091c <charToSegment>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
    }

    // Wypełniamy cyfry od prawej strony, zaczynając od indeksu 3
    int digitPos = 3;
 80035f0:	2303      	movs	r3, #3
 80035f2:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 4; i++) {
 80035f4:	2300      	movs	r3, #0
 80035f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035f8:	e044      	b.n	8003684 <SLIDER_DisplayTemperature+0x180>
        if (temperature > 0 || i > 0) { // Zapobiega wstawianiu '0' na początku
 80035fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	dc02      	bgt.n	8003606 <SLIDER_DisplayTemperature+0x102>
 8003600:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003602:	2b00      	cmp	r3, #0
 8003604:	dd25      	ble.n	8003652 <SLIDER_DisplayTemperature+0x14e>
            digits[digitPos - i] = charToSegment('0' + (temperature % 10));
 8003606:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003608:	4b84      	ldr	r3, [pc, #528]	@ (800381c <SLIDER_DisplayTemperature+0x318>)
 800360a:	fb83 2301 	smull	r2, r3, r3, r1
 800360e:	109a      	asrs	r2, r3, #2
 8003610:	17cb      	asrs	r3, r1, #31
 8003612:	1ad2      	subs	r2, r2, r3
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	1aca      	subs	r2, r1, r3
 800361e:	b2d3      	uxtb	r3, r2
 8003620:	3330      	adds	r3, #48	@ 0x30
 8003622:	b2d9      	uxtb	r1, r3
 8003624:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003626:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003628:	1ad4      	subs	r4, r2, r3
 800362a:	4608      	mov	r0, r1
 800362c:	f7fd f976 	bl	800091c <charToSegment>
 8003630:	4603      	mov	r3, r0
 8003632:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8003636:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800363a:	440a      	add	r2, r1
 800363c:	f802 3c20 	strb.w	r3, [r2, #-32]
            temperature /= 10;
 8003640:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003642:	4b76      	ldr	r3, [pc, #472]	@ (800381c <SLIDER_DisplayTemperature+0x318>)
 8003644:	fb83 2301 	smull	r2, r3, r3, r1
 8003648:	109a      	asrs	r2, r3, #2
 800364a:	17cb      	asrs	r3, r1, #31
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003650:	e015      	b.n	800367e <SLIDER_DisplayTemperature+0x17a>
        } else {
            digits[digitPos - i] = charToSegment('0');
 8003652:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003654:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003656:	1ad4      	subs	r4, r2, r3
 8003658:	2030      	movs	r0, #48	@ 0x30
 800365a:	f7fd f95f 	bl	800091c <charToSegment>
 800365e:	4603      	mov	r3, r0
 8003660:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8003664:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8003668:	440a      	add	r2, r1
 800366a:	f802 3c20 	strb.w	r3, [r2, #-32]
            temperature /= 10;
 800366e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003670:	4b6a      	ldr	r3, [pc, #424]	@ (800381c <SLIDER_DisplayTemperature+0x318>)
 8003672:	fb83 2301 	smull	r2, r3, r3, r1
 8003676:	109a      	asrs	r2, r3, #2
 8003678:	17cb      	asrs	r3, r1, #31
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	667b      	str	r3, [r7, #100]	@ 0x64
    for (int i = 0; i < 4; i++) {
 800367e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003680:	3301      	adds	r3, #1
 8003682:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003684:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003686:	2b03      	cmp	r3, #3
 8003688:	ddb7      	ble.n	80035fa <SLIDER_DisplayTemperature+0xf6>
        }
    }

    // Jeśli temperatura jest ujemna, ustawiamy znak minus
    if (isNegative) {
 800368a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <SLIDER_DisplayTemperature+0x19a>
        digits[0] = charToSegment('-');
 8003692:	202d      	movs	r0, #45	@ 0x2d
 8003694:	f7fd f942 	bl	800091c <charToSegment>
 8003698:	4603      	mov	r3, r0
 800369a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
    }

    // Składamy 6 cyfr do 48-bitowej wartości
    uint64_t displayVal = 0ULL;
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[5] << 40);
 80036aa:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2200      	movs	r2, #0
 80036b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036b4:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80036b6:	f04f 0000 	mov.w	r0, #0
 80036ba:	f04f 0100 	mov.w	r1, #0
 80036be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036c0:	0219      	lsls	r1, r3, #8
 80036c2:	2000      	movs	r0, #0
 80036c4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80036c8:	ea42 0400 	orr.w	r4, r2, r0
 80036cc:	633c      	str	r4, [r7, #48]	@ 0x30
 80036ce:	430b      	orrs	r3, r1
 80036d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80036d2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80036d6:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[4] << 32);
 80036da:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2200      	movs	r2, #0
 80036e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80036e4:	657a      	str	r2, [r7, #84]	@ 0x54
 80036e6:	f04f 0000 	mov.w	r0, #0
 80036ea:	f04f 0100 	mov.w	r1, #0
 80036ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036f0:	0019      	movs	r1, r3
 80036f2:	2000      	movs	r0, #0
 80036f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80036f8:	ea42 0400 	orr.w	r4, r2, r0
 80036fc:	62bc      	str	r4, [r7, #40]	@ 0x28
 80036fe:	430b      	orrs	r3, r1
 8003700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003702:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8003706:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[3] << 24);
 800370a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2200      	movs	r2, #0
 8003712:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003714:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003716:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800371a:	460b      	mov	r3, r1
 800371c:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8003720:	460b      	mov	r3, r1
 8003722:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8003726:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800372a:	ea42 0108 	orr.w	r1, r2, r8
 800372e:	6239      	str	r1, [r7, #32]
 8003730:	ea43 0309 	orr.w	r3, r3, r9
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
 8003736:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800373a:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[2] << 16);
 800373e:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2200      	movs	r2, #0
 8003746:	469a      	mov	sl, r3
 8003748:	4693      	mov	fp, r2
 800374a:	f04f 0000 	mov.w	r0, #0
 800374e:	f04f 0100 	mov.w	r1, #0
 8003752:	ea4f 410b 	mov.w	r1, fp, lsl #16
 8003756:	ea41 411a 	orr.w	r1, r1, sl, lsr #16
 800375a:	ea4f 400a 	mov.w	r0, sl, lsl #16
 800375e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003762:	ea42 0400 	orr.w	r4, r2, r0
 8003766:	61bc      	str	r4, [r7, #24]
 8003768:	430b      	orrs	r3, r1
 800376a:	61fb      	str	r3, [r7, #28]
 800376c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003770:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[1] << 8);
 8003774:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2200      	movs	r2, #0
 800377c:	461d      	mov	r5, r3
 800377e:	4616      	mov	r6, r2
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	0233      	lsls	r3, r6, #8
 800378a:	ea43 6315 	orr.w	r3, r3, r5, lsr #24
 800378e:	022a      	lsls	r2, r5, #8
 8003790:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003794:	ea40 0402 	orr.w	r4, r0, r2
 8003798:	613c      	str	r4, [r7, #16]
 800379a:	430b      	orrs	r3, r1
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80037a2:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[0] << 0);
 80037a6:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2200      	movs	r2, #0
 80037ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80037b0:	647a      	str	r2, [r7, #68]	@ 0x44
 80037b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80037b6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80037ba:	4621      	mov	r1, r4
 80037bc:	4311      	orrs	r1, r2
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	4629      	mov	r1, r5
 80037c2:	4319      	orrs	r1, r3
 80037c4:	60f9      	str	r1, [r7, #12]
 80037c6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80037ca:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    displayVal |= ((uint64_t)0b10000000 << 8); // Kropka dziesiętna na digit[1]
 80037ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80037d2:	f442 4100 	orr.w	r1, r2, #32768	@ 0x8000
 80037d6:	6039      	str	r1, [r7, #0]
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80037de:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70



    // Ustawiamy wartość wyświetlacza i aktualizujemy wyświetlacze
    clockReg.bottomDisplay = displayVal;
 80037e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80037e6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003820 <SLIDER_DisplayTemperature+0x31c>)
 80037ee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80037f2:	4602      	mov	r2, r0
 80037f4:	f8c3 2012 	str.w	r2, [r3, #18]
 80037f8:	460a      	mov	r2, r1
 80037fa:	82da      	strh	r2, [r3, #22]
    UpdateAllDisplays(&clockReg);
 80037fc:	4808      	ldr	r0, [pc, #32]	@ (8003820 <SLIDER_DisplayTemperature+0x31c>)
 80037fe:	f7fd fd51 	bl	80012a4 <UpdateAllDisplays>
}
 8003802:	378c      	adds	r7, #140	@ 0x8c
 8003804:	46bd      	mov	sp, r7
 8003806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800380a:	bf00      	nop
 800380c:	200006e9 	.word	0x200006e9
 8003810:	0001869f 	.word	0x0001869f
 8003814:	200006ec 	.word	0x200006ec
 8003818:	fffe7961 	.word	0xfffe7961
 800381c:	66666667 	.word	0x66666667
 8003820:	20000684 	.word	0x20000684

08003824 <SLIDER_DisplayHumidity>:



void SLIDER_DisplayHumidity(uint32_t humidity)
{
 8003824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003828:	b0a3      	sub	sp, #140	@ 0x8c
 800382a:	af00      	add	r7, sp, #0
 800382c:	6678      	str	r0, [r7, #100]	@ 0x64
    // Jeżeli slider nie jest zatrzymany, zapamiętaj żądanie i wyjdź
    if (!SLIDER_IsStopped()) {
 800382e:	f7ff fd4b 	bl	80032c8 <SLIDER_IsStopped>
 8003832:	4603      	mov	r3, r0
 8003834:	f083 0301 	eor.w	r3, r3, #1
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00e      	beq.n	800385c <SLIDER_DisplayHumidity+0x38>
        displayNumberPending = true;
 800383e:	4b9f      	ldr	r3, [pc, #636]	@ (8003abc <SLIDER_DisplayHumidity+0x298>)
 8003840:	2201      	movs	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]
        // Ograniczamy wilgotność do zakresu 0 do 999999
        if (humidity > 999999) {
 8003844:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003846:	4a9e      	ldr	r2, [pc, #632]	@ (8003ac0 <SLIDER_DisplayHumidity+0x29c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d903      	bls.n	8003854 <SLIDER_DisplayHumidity+0x30>
            pendingNumberToDisplay = 999999;
 800384c:	4b9d      	ldr	r3, [pc, #628]	@ (8003ac4 <SLIDER_DisplayHumidity+0x2a0>)
 800384e:	4a9c      	ldr	r2, [pc, #624]	@ (8003ac0 <SLIDER_DisplayHumidity+0x29c>)
 8003850:	601a      	str	r2, [r3, #0]
        } else {
            pendingNumberToDisplay = humidity;
        }
        return;
 8003852:	e12e      	b.n	8003ab2 <SLIDER_DisplayHumidity+0x28e>
            pendingNumberToDisplay = humidity;
 8003854:	4a9b      	ldr	r2, [pc, #620]	@ (8003ac4 <SLIDER_DisplayHumidity+0x2a0>)
 8003856:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e12a      	b.n	8003ab2 <SLIDER_DisplayHumidity+0x28e>
    }

    // Slider jest zatrzymany – wyświetlamy wilgotność od razu

    // Ograniczamy wilgotność do zakresu 0 do 999999
    if (humidity > 999999)
 800385c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800385e:	4b98      	ldr	r3, [pc, #608]	@ (8003ac0 <SLIDER_DisplayHumidity+0x29c>)
 8003860:	429a      	cmp	r2, r3
 8003862:	d901      	bls.n	8003868 <SLIDER_DisplayHumidity+0x44>
        humidity = 999999;
 8003864:	4b96      	ldr	r3, [pc, #600]	@ (8003ac0 <SLIDER_DisplayHumidity+0x29c>)
 8003866:	667b      	str	r3, [r7, #100]	@ 0x64

    uint8_t digits[6];

    // Inicjujemy wszystkie cyfry jako puste (segment odpowiadający spacji)
    for (int i = 0; i < 6; i++) {
 8003868:	2300      	movs	r3, #0
 800386a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800386e:	e010      	b.n	8003892 <SLIDER_DisplayHumidity+0x6e>
        digits[i] = charToSegment(' ');
 8003870:	2020      	movs	r0, #32
 8003872:	f7fd f853 	bl	800091c <charToSegment>
 8003876:	4603      	mov	r3, r0
 8003878:	4619      	mov	r1, r3
 800387a:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800387e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003882:	441a      	add	r2, r3
 8003884:	460b      	mov	r3, r1
 8003886:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < 6; i++) {
 8003888:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800388c:	3301      	adds	r3, #1
 800388e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003892:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003896:	2b05      	cmp	r3, #5
 8003898:	ddea      	ble.n	8003870 <SLIDER_DisplayHumidity+0x4c>
    }

    // Przypisujemy litery 'R' i 'H' na ostatnich dwóch pozycjach
    digits[5] = charToSegment('H'); // Litera 'H'
 800389a:	2048      	movs	r0, #72	@ 0x48
 800389c:	f7fd f83e 	bl	800091c <charToSegment>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
    digits[4] = charToSegment('R'); // Litera 'R'
 80038a6:	2052      	movs	r0, #82	@ 0x52
 80038a8:	f7fd f838 	bl	800091c <charToSegment>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c

    // Wypełniamy cyfry wilgotności od prawej strony, zaczynając od indeksu 3
    int digitPos = 3;
 80038b2:	2303      	movs	r3, #3
 80038b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for (int i = 0; i < 4; i++) { // Cztery cyfry dla wilgotności (0-9999)
 80038b6:	2300      	movs	r3, #0
 80038b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038bc:	e043      	b.n	8003946 <SLIDER_DisplayHumidity+0x122>
        if (humidity > 0 || i > 0) { // Zapobiega wstawianiu '0' na początku
 80038be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d103      	bne.n	80038cc <SLIDER_DisplayHumidity+0xa8>
 80038c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	dd22      	ble.n	8003912 <SLIDER_DisplayHumidity+0xee>
            digits[digitPos - i] = charToSegment('0' + (humidity % 10));
 80038cc:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80038ce:	4b7e      	ldr	r3, [pc, #504]	@ (8003ac8 <SLIDER_DisplayHumidity+0x2a4>)
 80038d0:	fba3 2301 	umull	r2, r3, r3, r1
 80038d4:	08da      	lsrs	r2, r3, #3
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	1aca      	subs	r2, r1, r3
 80038e0:	b2d3      	uxtb	r3, r2
 80038e2:	3330      	adds	r3, #48	@ 0x30
 80038e4:	b2d9      	uxtb	r1, r3
 80038e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80038e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038ec:	1ad4      	subs	r4, r2, r3
 80038ee:	4608      	mov	r0, r1
 80038f0:	f7fd f814 	bl	800091c <charToSegment>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 80038fa:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80038fe:	440a      	add	r2, r1
 8003900:	f802 3c20 	strb.w	r3, [r2, #-32]
            humidity /= 10;
 8003904:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003906:	4b70      	ldr	r3, [pc, #448]	@ (8003ac8 <SLIDER_DisplayHumidity+0x2a4>)
 8003908:	fba3 2302 	umull	r2, r3, r3, r2
 800390c:	08db      	lsrs	r3, r3, #3
 800390e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003910:	e014      	b.n	800393c <SLIDER_DisplayHumidity+0x118>
        } else {
            digits[digitPos - i] = charToSegment('0');
 8003912:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003914:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003918:	1ad4      	subs	r4, r2, r3
 800391a:	2030      	movs	r0, #48	@ 0x30
 800391c:	f7fc fffe 	bl	800091c <charToSegment>
 8003920:	4603      	mov	r3, r0
 8003922:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8003926:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800392a:	440a      	add	r2, r1
 800392c:	f802 3c20 	strb.w	r3, [r2, #-32]
            humidity /= 10;
 8003930:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003932:	4b65      	ldr	r3, [pc, #404]	@ (8003ac8 <SLIDER_DisplayHumidity+0x2a4>)
 8003934:	fba3 2302 	umull	r2, r3, r3, r2
 8003938:	08db      	lsrs	r3, r3, #3
 800393a:	667b      	str	r3, [r7, #100]	@ 0x64
    for (int i = 0; i < 4; i++) { // Cztery cyfry dla wilgotności (0-9999)
 800393c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003940:	3301      	adds	r3, #1
 8003942:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003946:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800394a:	2b03      	cmp	r3, #3
 800394c:	ddb7      	ble.n	80038be <SLIDER_DisplayHumidity+0x9a>
        }
    }

    // Składamy 6 cyfr do 48-bitowej wartości
    uint64_t displayVal = 0ULL;
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[5] << 40);
 800395a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2200      	movs	r2, #0
 8003962:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003964:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003966:	f04f 0000 	mov.w	r0, #0
 800396a:	f04f 0100 	mov.w	r1, #0
 800396e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003970:	0219      	lsls	r1, r3, #8
 8003972:	2000      	movs	r0, #0
 8003974:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003978:	ea42 0400 	orr.w	r4, r2, r0
 800397c:	633c      	str	r4, [r7, #48]	@ 0x30
 800397e:	430b      	orrs	r3, r1
 8003980:	637b      	str	r3, [r7, #52]	@ 0x34
 8003982:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003986:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[4] << 32);
 800398a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2200      	movs	r2, #0
 8003992:	653b      	str	r3, [r7, #80]	@ 0x50
 8003994:	657a      	str	r2, [r7, #84]	@ 0x54
 8003996:	f04f 0000 	mov.w	r0, #0
 800399a:	f04f 0100 	mov.w	r1, #0
 800399e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039a0:	0019      	movs	r1, r3
 80039a2:	2000      	movs	r0, #0
 80039a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80039a8:	ea42 0400 	orr.w	r4, r2, r0
 80039ac:	62bc      	str	r4, [r7, #40]	@ 0x28
 80039ae:	430b      	orrs	r3, r1
 80039b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039b2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80039b6:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[3] << 24);
 80039ba:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2200      	movs	r2, #0
 80039c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039c4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80039c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80039ca:	460b      	mov	r3, r1
 80039cc:	ea4f 2913 	mov.w	r9, r3, lsr #8
 80039d0:	460b      	mov	r3, r1
 80039d2:	ea4f 6803 	mov.w	r8, r3, lsl #24
 80039d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80039da:	ea42 0108 	orr.w	r1, r2, r8
 80039de:	6239      	str	r1, [r7, #32]
 80039e0:	ea43 0309 	orr.w	r3, r3, r9
 80039e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039e6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80039ea:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[2] << 16);
 80039ee:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2200      	movs	r2, #0
 80039f6:	469a      	mov	sl, r3
 80039f8:	4693      	mov	fp, r2
 80039fa:	f04f 0000 	mov.w	r0, #0
 80039fe:	f04f 0100 	mov.w	r1, #0
 8003a02:	ea4f 410b 	mov.w	r1, fp, lsl #16
 8003a06:	ea41 411a 	orr.w	r1, r1, sl, lsr #16
 8003a0a:	ea4f 400a 	mov.w	r0, sl, lsl #16
 8003a0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003a12:	ea42 0400 	orr.w	r4, r2, r0
 8003a16:	61bc      	str	r4, [r7, #24]
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003a20:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[1] << 8);
 8003a24:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	461d      	mov	r5, r3
 8003a2e:	4616      	mov	r6, r2
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	0233      	lsls	r3, r6, #8
 8003a3a:	ea43 6315 	orr.w	r3, r3, r5, lsr #24
 8003a3e:	022a      	lsls	r2, r5, #8
 8003a40:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003a44:	ea40 0402 	orr.w	r4, r0, r2
 8003a48:	613c      	str	r4, [r7, #16]
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003a52:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[0] << 0);
 8003a56:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a60:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003a66:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	4311      	orrs	r1, r2
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	4629      	mov	r1, r5
 8003a72:	4319      	orrs	r1, r3
 8003a74:	60f9      	str	r1, [r7, #12]
 8003a76:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003a7a:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    // **Miejsce dodania maski kropki dziesiętnej**
    // Możesz dodać maskę kropki dziesiętnej na dowolnej pozycji, np. na drugiej cyfrze (indeks 1)
    // Przykład: Ustawienie kropki dziesiętnej na digit[1]
     displayVal |= ((uint64_t)0b10000000 << 16); // Opcjonalnie, możesz to zrobić w swoim kodzie
 8003a7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003a82:	f442 0100 	orr.w	r1, r2, #8388608	@ 0x800000
 8003a86:	6039      	str	r1, [r7, #0]
 8003a88:	607b      	str	r3, [r7, #4]
 8003a8a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003a8e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    // Ustawiamy wartość wyświetlacza i aktualizujemy wyświetlacze
    clockReg.bottomDisplay = displayVal;
 8003a92:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003a96:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <SLIDER_DisplayHumidity+0x2a8>)
 8003a9e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	f8c3 2012 	str.w	r2, [r3, #18]
 8003aa8:	460a      	mov	r2, r1
 8003aaa:	82da      	strh	r2, [r3, #22]
    UpdateAllDisplays(&clockReg);
 8003aac:	4807      	ldr	r0, [pc, #28]	@ (8003acc <SLIDER_DisplayHumidity+0x2a8>)
 8003aae:	f7fd fbf9 	bl	80012a4 <UpdateAllDisplays>
}
 8003ab2:	378c      	adds	r7, #140	@ 0x8c
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aba:	bf00      	nop
 8003abc:	200006e9 	.word	0x200006e9
 8003ac0:	000f423f 	.word	0x000f423f
 8003ac4:	200006ec 	.word	0x200006ec
 8003ac8:	cccccccd 	.word	0xcccccccd
 8003acc:	20000684 	.word	0x20000684

08003ad0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003ad4:	4b17      	ldr	r3, [pc, #92]	@ (8003b34 <MX_SPI1_Init+0x64>)
 8003ad6:	4a18      	ldr	r2, [pc, #96]	@ (8003b38 <MX_SPI1_Init+0x68>)
 8003ad8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ada:	4b16      	ldr	r3, [pc, #88]	@ (8003b34 <MX_SPI1_Init+0x64>)
 8003adc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ae0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ae2:	4b14      	ldr	r3, [pc, #80]	@ (8003b34 <MX_SPI1_Init+0x64>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ae8:	4b12      	ldr	r3, [pc, #72]	@ (8003b34 <MX_SPI1_Init+0x64>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aee:	4b11      	ldr	r3, [pc, #68]	@ (8003b34 <MX_SPI1_Init+0x64>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003af4:	4b0f      	ldr	r3, [pc, #60]	@ (8003b34 <MX_SPI1_Init+0x64>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003afa:	4b0e      	ldr	r3, [pc, #56]	@ (8003b34 <MX_SPI1_Init+0x64>)
 8003afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003b02:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <MX_SPI1_Init+0x64>)
 8003b04:	2220      	movs	r2, #32
 8003b06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <MX_SPI1_Init+0x64>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b0e:	4b09      	ldr	r3, [pc, #36]	@ (8003b34 <MX_SPI1_Init+0x64>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b14:	4b07      	ldr	r3, [pc, #28]	@ (8003b34 <MX_SPI1_Init+0x64>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003b1a:	4b06      	ldr	r3, [pc, #24]	@ (8003b34 <MX_SPI1_Init+0x64>)
 8003b1c:	220a      	movs	r2, #10
 8003b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b20:	4804      	ldr	r0, [pc, #16]	@ (8003b34 <MX_SPI1_Init+0x64>)
 8003b22:	f005 fb8d 	bl	8009240 <HAL_SPI_Init>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003b2c:	f7fe fe98 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b30:	bf00      	nop
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000700 	.word	0x20000700
 8003b38:	40013000 	.word	0x40013000

08003b3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08a      	sub	sp, #40	@ 0x28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b44:	f107 0314 	add.w	r3, r7, #20
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	60da      	str	r2, [r3, #12]
 8003b52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a34      	ldr	r2, [pc, #208]	@ (8003c2c <HAL_SPI_MspInit+0xf0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d161      	bne.n	8003c22 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	4b33      	ldr	r3, [pc, #204]	@ (8003c30 <HAL_SPI_MspInit+0xf4>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b66:	4a32      	ldr	r2, [pc, #200]	@ (8003c30 <HAL_SPI_MspInit+0xf4>)
 8003b68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b6e:	4b30      	ldr	r3, [pc, #192]	@ (8003c30 <HAL_SPI_MspInit+0xf4>)
 8003b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003c30 <HAL_SPI_MspInit+0xf4>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b82:	4a2b      	ldr	r2, [pc, #172]	@ (8003c30 <HAL_SPI_MspInit+0xf4>)
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b8a:	4b29      	ldr	r3, [pc, #164]	@ (8003c30 <HAL_SPI_MspInit+0xf4>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003b96:	23a0      	movs	r3, #160	@ 0xa0
 8003b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ba6:	2305      	movs	r3, #5
 8003ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003baa:	f107 0314 	add.w	r3, r7, #20
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4820      	ldr	r0, [pc, #128]	@ (8003c34 <HAL_SPI_MspInit+0xf8>)
 8003bb2:	f001 fc4d 	bl	8005450 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003bb6:	4b20      	ldr	r3, [pc, #128]	@ (8003c38 <HAL_SPI_MspInit+0xfc>)
 8003bb8:	4a20      	ldr	r2, [pc, #128]	@ (8003c3c <HAL_SPI_MspInit+0x100>)
 8003bba:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8003c38 <HAL_SPI_MspInit+0xfc>)
 8003bbe:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003bc2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8003c38 <HAL_SPI_MspInit+0xfc>)
 8003bc6:	2240      	movs	r2, #64	@ 0x40
 8003bc8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bca:	4b1b      	ldr	r3, [pc, #108]	@ (8003c38 <HAL_SPI_MspInit+0xfc>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bd0:	4b19      	ldr	r3, [pc, #100]	@ (8003c38 <HAL_SPI_MspInit+0xfc>)
 8003bd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bd6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bd8:	4b17      	ldr	r3, [pc, #92]	@ (8003c38 <HAL_SPI_MspInit+0xfc>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bde:	4b16      	ldr	r3, [pc, #88]	@ (8003c38 <HAL_SPI_MspInit+0xfc>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003be4:	4b14      	ldr	r3, [pc, #80]	@ (8003c38 <HAL_SPI_MspInit+0xfc>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bea:	4b13      	ldr	r3, [pc, #76]	@ (8003c38 <HAL_SPI_MspInit+0xfc>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bf0:	4b11      	ldr	r3, [pc, #68]	@ (8003c38 <HAL_SPI_MspInit+0xfc>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003bf6:	4810      	ldr	r0, [pc, #64]	@ (8003c38 <HAL_SPI_MspInit+0xfc>)
 8003bf8:	f001 f87e 	bl	8004cf8 <HAL_DMA_Init>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8003c02:	f7fe fe2d 	bl	8002860 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a0b      	ldr	r2, [pc, #44]	@ (8003c38 <HAL_SPI_MspInit+0xfc>)
 8003c0a:	649a      	str	r2, [r3, #72]	@ 0x48
 8003c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8003c38 <HAL_SPI_MspInit+0xfc>)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003c12:	2200      	movs	r2, #0
 8003c14:	2100      	movs	r1, #0
 8003c16:	2023      	movs	r0, #35	@ 0x23
 8003c18:	f001 f837 	bl	8004c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003c1c:	2023      	movs	r0, #35	@ 0x23
 8003c1e:	f001 f850 	bl	8004cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003c22:	bf00      	nop
 8003c24:	3728      	adds	r7, #40	@ 0x28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40013000 	.word	0x40013000
 8003c30:	40023800 	.word	0x40023800
 8003c34:	40020000 	.word	0x40020000
 8003c38:	20000758 	.word	0x20000758
 8003c3c:	40026458 	.word	0x40026458

08003c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]
 8003c4a:	4b10      	ldr	r3, [pc, #64]	@ (8003c8c <HAL_MspInit+0x4c>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4e:	4a0f      	ldr	r2, [pc, #60]	@ (8003c8c <HAL_MspInit+0x4c>)
 8003c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c56:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <HAL_MspInit+0x4c>)
 8003c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	603b      	str	r3, [r7, #0]
 8003c66:	4b09      	ldr	r3, [pc, #36]	@ (8003c8c <HAL_MspInit+0x4c>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	4a08      	ldr	r2, [pc, #32]	@ (8003c8c <HAL_MspInit+0x4c>)
 8003c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c72:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <HAL_MspInit+0x4c>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800

08003c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <NMI_Handler+0x4>

08003c98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c9c:	bf00      	nop
 8003c9e:	e7fd      	b.n	8003c9c <HardFault_Handler+0x4>

08003ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ca4:	bf00      	nop
 8003ca6:	e7fd      	b.n	8003ca4 <MemManage_Handler+0x4>

08003ca8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cac:	bf00      	nop
 8003cae:	e7fd      	b.n	8003cac <BusFault_Handler+0x4>

08003cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cb4:	bf00      	nop
 8003cb6:	e7fd      	b.n	8003cb4 <UsageFault_Handler+0x4>

08003cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ce6:	f000 fb9b 	bl	8004420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8003cf4:	4802      	ldr	r0, [pc, #8]	@ (8003d00 <DMA1_Stream2_IRQHandler+0x10>)
 8003cf6:	f001 f927 	bl	8004f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	200005a4 	.word	0x200005a4

08003d04 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003d08:	4802      	ldr	r0, [pc, #8]	@ (8003d14 <TIM4_IRQHandler+0x10>)
 8003d0a:	f006 f95f 	bl	8009fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20000800 	.word	0x20000800

08003d18 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003d1c:	4802      	ldr	r0, [pc, #8]	@ (8003d28 <I2C2_EV_IRQHandler+0x10>)
 8003d1e:	f002 f9fd 	bl	800611c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000550 	.word	0x20000550

08003d2c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003d30:	4802      	ldr	r0, [pc, #8]	@ (8003d3c <I2C2_ER_IRQHandler+0x10>)
 8003d32:	f002 fb46 	bl	80063c2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000550 	.word	0x20000550

08003d40 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003d44:	4802      	ldr	r0, [pc, #8]	@ (8003d50 <SPI1_IRQHandler+0x10>)
 8003d46:	f005 fbb7 	bl	80094b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000700 	.word	0x20000700

08003d54 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8003d58:	4802      	ldr	r0, [pc, #8]	@ (8003d64 <DMA1_Stream7_IRQHandler+0x10>)
 8003d5a:	f001 f8f5 	bl	8004f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000604 	.word	0x20000604

08003d68 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003d6c:	4802      	ldr	r0, [pc, #8]	@ (8003d78 <TIM5_IRQHandler+0x10>)
 8003d6e:	f006 f92d 	bl	8009fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000848 	.word	0x20000848

08003d7c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d80:	4802      	ldr	r0, [pc, #8]	@ (8003d8c <DMA2_Stream2_IRQHandler+0x10>)
 8003d82:	f001 f8e1 	bl	8004f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	200008d8 	.word	0x200008d8

08003d90 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003d94:	4802      	ldr	r0, [pc, #8]	@ (8003da0 <DMA2_Stream3_IRQHandler+0x10>)
 8003d96:	f001 f8d7 	bl	8004f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003d9a:	bf00      	nop
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000758 	.word	0x20000758

08003da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003da8:	4b06      	ldr	r3, [pc, #24]	@ (8003dc4 <SystemInit+0x20>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dae:	4a05      	ldr	r2, [pc, #20]	@ (8003dc4 <SystemInit+0x20>)
 8003db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b096      	sub	sp, #88	@ 0x58
 8003dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	605a      	str	r2, [r3, #4]
 8003dd8:	609a      	str	r2, [r3, #8]
 8003dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ddc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	605a      	str	r2, [r3, #4]
 8003df0:	609a      	str	r2, [r3, #8]
 8003df2:	60da      	str	r2, [r3, #12]
 8003df4:	611a      	str	r2, [r3, #16]
 8003df6:	615a      	str	r2, [r3, #20]
 8003df8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003dfa:	1d3b      	adds	r3, r7, #4
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f007 fc5f 	bl	800b6c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e06:	4b3e      	ldr	r3, [pc, #248]	@ (8003f00 <MX_TIM1_Init+0x138>)
 8003e08:	4a3e      	ldr	r2, [pc, #248]	@ (8003f04 <MX_TIM1_Init+0x13c>)
 8003e0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 8003e0c:	4b3c      	ldr	r3, [pc, #240]	@ (8003f00 <MX_TIM1_Init+0x138>)
 8003e0e:	2218      	movs	r2, #24
 8003e10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e12:	4b3b      	ldr	r3, [pc, #236]	@ (8003f00 <MX_TIM1_Init+0x138>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8003e18:	4b39      	ldr	r3, [pc, #228]	@ (8003f00 <MX_TIM1_Init+0x138>)
 8003e1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003e1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e20:	4b37      	ldr	r3, [pc, #220]	@ (8003f00 <MX_TIM1_Init+0x138>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e26:	4b36      	ldr	r3, [pc, #216]	@ (8003f00 <MX_TIM1_Init+0x138>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e2c:	4b34      	ldr	r3, [pc, #208]	@ (8003f00 <MX_TIM1_Init+0x138>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e32:	4833      	ldr	r0, [pc, #204]	@ (8003f00 <MX_TIM1_Init+0x138>)
 8003e34:	f005 fdba 	bl	80099ac <HAL_TIM_Base_Init>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003e3e:	f7fe fd0f 	bl	8002860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e46:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e48:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	482c      	ldr	r0, [pc, #176]	@ (8003f00 <MX_TIM1_Init+0x138>)
 8003e50:	f006 fa6e 	bl	800a330 <HAL_TIM_ConfigClockSource>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003e5a:	f7fe fd01 	bl	8002860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e5e:	4828      	ldr	r0, [pc, #160]	@ (8003f00 <MX_TIM1_Init+0x138>)
 8003e60:	f005 fe56 	bl	8009b10 <HAL_TIM_PWM_Init>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003e6a:	f7fe fcf9 	bl	8002860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e72:	2300      	movs	r3, #0
 8003e74:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e76:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4820      	ldr	r0, [pc, #128]	@ (8003f00 <MX_TIM1_Init+0x138>)
 8003e7e:	f006 fe15 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003e88:	f7fe fcea 	bl	8002860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e8c:	2360      	movs	r3, #96	@ 0x60
 8003e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003e94:	2302      	movs	r3, #2
 8003e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003eac:	2200      	movs	r2, #0
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4813      	ldr	r0, [pc, #76]	@ (8003f00 <MX_TIM1_Init+0x138>)
 8003eb2:	f006 f97b 	bl	800a1ac <HAL_TIM_PWM_ConfigChannel>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003ebc:	f7fe fcd0 	bl	8002860 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ed4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ed8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ede:	1d3b      	adds	r3, r7, #4
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4807      	ldr	r0, [pc, #28]	@ (8003f00 <MX_TIM1_Init+0x138>)
 8003ee4:	f006 fe50 	bl	800ab88 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003eee:	f7fe fcb7 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003ef2:	4803      	ldr	r0, [pc, #12]	@ (8003f00 <MX_TIM1_Init+0x138>)
 8003ef4:	f000 f938 	bl	8004168 <HAL_TIM_MspPostInit>

}
 8003ef8:	bf00      	nop
 8003efa:	3758      	adds	r7, #88	@ 0x58
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	200007b8 	.word	0x200007b8
 8003f04:	40010000 	.word	0x40010000

08003f08 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08c      	sub	sp, #48	@ 0x30
 8003f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f0e:	f107 030c 	add.w	r3, r7, #12
 8003f12:	2224      	movs	r2, #36	@ 0x24
 8003f14:	2100      	movs	r1, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f007 fbd4 	bl	800b6c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f1c:	1d3b      	adds	r3, r7, #4
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003f24:	4b20      	ldr	r3, [pc, #128]	@ (8003fa8 <MX_TIM4_Init+0xa0>)
 8003f26:	4a21      	ldr	r2, [pc, #132]	@ (8003fac <MX_TIM4_Init+0xa4>)
 8003f28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003fa8 <MX_TIM4_Init+0xa0>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f30:	4b1d      	ldr	r3, [pc, #116]	@ (8003fa8 <MX_TIM4_Init+0xa0>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003f36:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa8 <MX_TIM4_Init+0xa0>)
 8003f38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa8 <MX_TIM4_Init+0xa0>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f44:	4b18      	ldr	r3, [pc, #96]	@ (8003fa8 <MX_TIM4_Init+0xa0>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f52:	2301      	movs	r3, #1
 8003f54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f62:	2301      	movs	r3, #1
 8003f64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f66:	2300      	movs	r3, #0
 8003f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003f6e:	f107 030c 	add.w	r3, r7, #12
 8003f72:	4619      	mov	r1, r3
 8003f74:	480c      	ldr	r0, [pc, #48]	@ (8003fa8 <MX_TIM4_Init+0xa0>)
 8003f76:	f005 fed5 	bl	8009d24 <HAL_TIM_Encoder_Init>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003f80:	f7fe fc6e 	bl	8002860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f84:	2300      	movs	r3, #0
 8003f86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f8c:	1d3b      	adds	r3, r7, #4
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4805      	ldr	r0, [pc, #20]	@ (8003fa8 <MX_TIM4_Init+0xa0>)
 8003f92:	f006 fd8b 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003f9c:	f7fe fc60 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003fa0:	bf00      	nop
 8003fa2:	3730      	adds	r7, #48	@ 0x30
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20000800 	.word	0x20000800
 8003fac:	40000800 	.word	0x40000800

08003fb0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fb6:	f107 0308 	add.w	r3, r7, #8
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fc4:	463b      	mov	r3, r7
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8004044 <MX_TIM5_Init+0x94>)
 8003fce:	4a1e      	ldr	r2, [pc, #120]	@ (8004048 <MX_TIM5_Init+0x98>)
 8003fd0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 24999;
 8003fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8004044 <MX_TIM5_Init+0x94>)
 8003fd4:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8003fd8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fda:	4b1a      	ldr	r3, [pc, #104]	@ (8004044 <MX_TIM5_Init+0x94>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9;
 8003fe0:	4b18      	ldr	r3, [pc, #96]	@ (8004044 <MX_TIM5_Init+0x94>)
 8003fe2:	2209      	movs	r2, #9
 8003fe4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fe6:	4b17      	ldr	r3, [pc, #92]	@ (8004044 <MX_TIM5_Init+0x94>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fec:	4b15      	ldr	r3, [pc, #84]	@ (8004044 <MX_TIM5_Init+0x94>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003ff2:	4814      	ldr	r0, [pc, #80]	@ (8004044 <MX_TIM5_Init+0x94>)
 8003ff4:	f005 fcda 	bl	80099ac <HAL_TIM_Base_Init>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003ffe:	f7fe fc2f 	bl	8002860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004002:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004006:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004008:	f107 0308 	add.w	r3, r7, #8
 800400c:	4619      	mov	r1, r3
 800400e:	480d      	ldr	r0, [pc, #52]	@ (8004044 <MX_TIM5_Init+0x94>)
 8004010:	f006 f98e 	bl	800a330 <HAL_TIM_ConfigClockSource>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800401a:	f7fe fc21 	bl	8002860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004022:	2300      	movs	r3, #0
 8004024:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004026:	463b      	mov	r3, r7
 8004028:	4619      	mov	r1, r3
 800402a:	4806      	ldr	r0, [pc, #24]	@ (8004044 <MX_TIM5_Init+0x94>)
 800402c:	f006 fd3e 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8004036:	f7fe fc13 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800403a:	bf00      	nop
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000848 	.word	0x20000848
 8004048:	40000c00 	.word	0x40000c00

0800404c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a18      	ldr	r2, [pc, #96]	@ (80040bc <HAL_TIM_Base_MspInit+0x70>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d10e      	bne.n	800407c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	4b17      	ldr	r3, [pc, #92]	@ (80040c0 <HAL_TIM_Base_MspInit+0x74>)
 8004064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004066:	4a16      	ldr	r2, [pc, #88]	@ (80040c0 <HAL_TIM_Base_MspInit+0x74>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	6453      	str	r3, [r2, #68]	@ 0x44
 800406e:	4b14      	ldr	r3, [pc, #80]	@ (80040c0 <HAL_TIM_Base_MspInit+0x74>)
 8004070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800407a:	e01a      	b.n	80040b2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a10      	ldr	r2, [pc, #64]	@ (80040c4 <HAL_TIM_Base_MspInit+0x78>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d115      	bne.n	80040b2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	4b0d      	ldr	r3, [pc, #52]	@ (80040c0 <HAL_TIM_Base_MspInit+0x74>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	4a0c      	ldr	r2, [pc, #48]	@ (80040c0 <HAL_TIM_Base_MspInit+0x74>)
 8004090:	f043 0308 	orr.w	r3, r3, #8
 8004094:	6413      	str	r3, [r2, #64]	@ 0x40
 8004096:	4b0a      	ldr	r3, [pc, #40]	@ (80040c0 <HAL_TIM_Base_MspInit+0x74>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	60bb      	str	r3, [r7, #8]
 80040a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80040a2:	2200      	movs	r2, #0
 80040a4:	2100      	movs	r1, #0
 80040a6:	2032      	movs	r0, #50	@ 0x32
 80040a8:	f000 fdef 	bl	8004c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80040ac:	2032      	movs	r0, #50	@ 0x32
 80040ae:	f000 fe08 	bl	8004cc2 <HAL_NVIC_EnableIRQ>
}
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40010000 	.word	0x40010000
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40000c00 	.word	0x40000c00

080040c8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08a      	sub	sp, #40	@ 0x28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	605a      	str	r2, [r3, #4]
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	60da      	str	r2, [r3, #12]
 80040de:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a1d      	ldr	r2, [pc, #116]	@ (800415c <HAL_TIM_Encoder_MspInit+0x94>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d133      	bne.n	8004152 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	4b1c      	ldr	r3, [pc, #112]	@ (8004160 <HAL_TIM_Encoder_MspInit+0x98>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004160 <HAL_TIM_Encoder_MspInit+0x98>)
 80040f4:	f043 0304 	orr.w	r3, r3, #4
 80040f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80040fa:	4b19      	ldr	r3, [pc, #100]	@ (8004160 <HAL_TIM_Encoder_MspInit+0x98>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	4b15      	ldr	r3, [pc, #84]	@ (8004160 <HAL_TIM_Encoder_MspInit+0x98>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410e:	4a14      	ldr	r2, [pc, #80]	@ (8004160 <HAL_TIM_Encoder_MspInit+0x98>)
 8004110:	f043 0302 	orr.w	r3, r3, #2
 8004114:	6313      	str	r3, [r2, #48]	@ 0x30
 8004116:	4b12      	ldr	r3, [pc, #72]	@ (8004160 <HAL_TIM_Encoder_MspInit+0x98>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004122:	23c0      	movs	r3, #192	@ 0xc0
 8004124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004126:	2302      	movs	r3, #2
 8004128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800412a:	2302      	movs	r3, #2
 800412c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800412e:	2300      	movs	r3, #0
 8004130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004132:	2302      	movs	r3, #2
 8004134:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004136:	f107 0314 	add.w	r3, r7, #20
 800413a:	4619      	mov	r1, r3
 800413c:	4809      	ldr	r0, [pc, #36]	@ (8004164 <HAL_TIM_Encoder_MspInit+0x9c>)
 800413e:	f001 f987 	bl	8005450 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004142:	2200      	movs	r2, #0
 8004144:	2100      	movs	r1, #0
 8004146:	201e      	movs	r0, #30
 8004148:	f000 fd9f 	bl	8004c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800414c:	201e      	movs	r0, #30
 800414e:	f000 fdb8 	bl	8004cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004152:	bf00      	nop
 8004154:	3728      	adds	r7, #40	@ 0x28
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40000800 	.word	0x40000800
 8004160:	40023800 	.word	0x40023800
 8004164:	40020400 	.word	0x40020400

08004168 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004170:	f107 030c 	add.w	r3, r7, #12
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	605a      	str	r2, [r3, #4]
 800417a:	609a      	str	r2, [r3, #8]
 800417c:	60da      	str	r2, [r3, #12]
 800417e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a12      	ldr	r2, [pc, #72]	@ (80041d0 <HAL_TIM_MspPostInit+0x68>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d11e      	bne.n	80041c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	4b11      	ldr	r3, [pc, #68]	@ (80041d4 <HAL_TIM_MspPostInit+0x6c>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	4a10      	ldr	r2, [pc, #64]	@ (80041d4 <HAL_TIM_MspPostInit+0x6c>)
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	6313      	str	r3, [r2, #48]	@ 0x30
 800419a:	4b0e      	ldr	r3, [pc, #56]	@ (80041d4 <HAL_TIM_MspPostInit+0x6c>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ac:	2302      	movs	r3, #2
 80041ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80041b8:	2301      	movs	r3, #1
 80041ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041bc:	f107 030c 	add.w	r3, r7, #12
 80041c0:	4619      	mov	r1, r3
 80041c2:	4805      	ldr	r0, [pc, #20]	@ (80041d8 <HAL_TIM_MspPostInit+0x70>)
 80041c4:	f001 f944 	bl	8005450 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80041c8:	bf00      	nop
 80041ca:	3720      	adds	r7, #32
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40023800 	.word	0x40023800
 80041d8:	40020000 	.word	0x40020000

080041dc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80041e0:	4b11      	ldr	r3, [pc, #68]	@ (8004228 <MX_USART1_UART_Init+0x4c>)
 80041e2:	4a12      	ldr	r2, [pc, #72]	@ (800422c <MX_USART1_UART_Init+0x50>)
 80041e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80041e6:	4b10      	ldr	r3, [pc, #64]	@ (8004228 <MX_USART1_UART_Init+0x4c>)
 80041e8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80041ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004228 <MX_USART1_UART_Init+0x4c>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004228 <MX_USART1_UART_Init+0x4c>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004228 <MX_USART1_UART_Init+0x4c>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004200:	4b09      	ldr	r3, [pc, #36]	@ (8004228 <MX_USART1_UART_Init+0x4c>)
 8004202:	220c      	movs	r2, #12
 8004204:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004206:	4b08      	ldr	r3, [pc, #32]	@ (8004228 <MX_USART1_UART_Init+0x4c>)
 8004208:	2200      	movs	r2, #0
 800420a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800420c:	4b06      	ldr	r3, [pc, #24]	@ (8004228 <MX_USART1_UART_Init+0x4c>)
 800420e:	2200      	movs	r2, #0
 8004210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004212:	4805      	ldr	r0, [pc, #20]	@ (8004228 <MX_USART1_UART_Init+0x4c>)
 8004214:	f006 fd1e 	bl	800ac54 <HAL_UART_Init>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800421e:	f7fe fb1f 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004222:	bf00      	nop
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000890 	.word	0x20000890
 800422c:	40011000 	.word	0x40011000

08004230 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	@ 0x28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	60da      	str	r2, [r3, #12]
 8004246:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a31      	ldr	r2, [pc, #196]	@ (8004314 <HAL_UART_MspInit+0xe4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d15b      	bne.n	800430a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	4b30      	ldr	r3, [pc, #192]	@ (8004318 <HAL_UART_MspInit+0xe8>)
 8004258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425a:	4a2f      	ldr	r2, [pc, #188]	@ (8004318 <HAL_UART_MspInit+0xe8>)
 800425c:	f043 0310 	orr.w	r3, r3, #16
 8004260:	6453      	str	r3, [r2, #68]	@ 0x44
 8004262:	4b2d      	ldr	r3, [pc, #180]	@ (8004318 <HAL_UART_MspInit+0xe8>)
 8004264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	4b29      	ldr	r3, [pc, #164]	@ (8004318 <HAL_UART_MspInit+0xe8>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004276:	4a28      	ldr	r2, [pc, #160]	@ (8004318 <HAL_UART_MspInit+0xe8>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	6313      	str	r3, [r2, #48]	@ 0x30
 800427e:	4b26      	ldr	r3, [pc, #152]	@ (8004318 <HAL_UART_MspInit+0xe8>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800428a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800428e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004290:	2302      	movs	r3, #2
 8004292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004298:	2303      	movs	r3, #3
 800429a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800429c:	2307      	movs	r3, #7
 800429e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a0:	f107 0314 	add.w	r3, r7, #20
 80042a4:	4619      	mov	r1, r3
 80042a6:	481d      	ldr	r0, [pc, #116]	@ (800431c <HAL_UART_MspInit+0xec>)
 80042a8:	f001 f8d2 	bl	8005450 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80042ac:	4b1c      	ldr	r3, [pc, #112]	@ (8004320 <HAL_UART_MspInit+0xf0>)
 80042ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004324 <HAL_UART_MspInit+0xf4>)
 80042b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80042b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004320 <HAL_UART_MspInit+0xf0>)
 80042b4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80042b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042ba:	4b19      	ldr	r3, [pc, #100]	@ (8004320 <HAL_UART_MspInit+0xf0>)
 80042bc:	2200      	movs	r2, #0
 80042be:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042c0:	4b17      	ldr	r3, [pc, #92]	@ (8004320 <HAL_UART_MspInit+0xf0>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042c6:	4b16      	ldr	r3, [pc, #88]	@ (8004320 <HAL_UART_MspInit+0xf0>)
 80042c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042cc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042ce:	4b14      	ldr	r3, [pc, #80]	@ (8004320 <HAL_UART_MspInit+0xf0>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042d4:	4b12      	ldr	r3, [pc, #72]	@ (8004320 <HAL_UART_MspInit+0xf0>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80042da:	4b11      	ldr	r3, [pc, #68]	@ (8004320 <HAL_UART_MspInit+0xf0>)
 80042dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80042e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004320 <HAL_UART_MspInit+0xf0>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004320 <HAL_UART_MspInit+0xf0>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80042ee:	480c      	ldr	r0, [pc, #48]	@ (8004320 <HAL_UART_MspInit+0xf0>)
 80042f0:	f000 fd02 	bl	8004cf8 <HAL_DMA_Init>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80042fa:	f7fe fab1 	bl	8002860 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a07      	ldr	r2, [pc, #28]	@ (8004320 <HAL_UART_MspInit+0xf0>)
 8004302:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004304:	4a06      	ldr	r2, [pc, #24]	@ (8004320 <HAL_UART_MspInit+0xf0>)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800430a:	bf00      	nop
 800430c:	3728      	adds	r7, #40	@ 0x28
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40011000 	.word	0x40011000
 8004318:	40023800 	.word	0x40023800
 800431c:	40020000 	.word	0x40020000
 8004320:	200008d8 	.word	0x200008d8
 8004324:	40026440 	.word	0x40026440

08004328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004328:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004360 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800432c:	f7ff fd3a 	bl	8003da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004330:	480c      	ldr	r0, [pc, #48]	@ (8004364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004332:	490d      	ldr	r1, [pc, #52]	@ (8004368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004334:	4a0d      	ldr	r2, [pc, #52]	@ (800436c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004338:	e002      	b.n	8004340 <LoopCopyDataInit>

0800433a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800433a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800433c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800433e:	3304      	adds	r3, #4

08004340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004344:	d3f9      	bcc.n	800433a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004346:	4a0a      	ldr	r2, [pc, #40]	@ (8004370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004348:	4c0a      	ldr	r4, [pc, #40]	@ (8004374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800434a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800434c:	e001      	b.n	8004352 <LoopFillZerobss>

0800434e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800434e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004350:	3204      	adds	r2, #4

08004352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004354:	d3fb      	bcc.n	800434e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004356:	f007 f9e3 	bl	800b720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800435a:	f7fd ff4f 	bl	80021fc <main>
  bx  lr    
 800435e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004360:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004368:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 800436c:	0800b87c 	.word	0x0800b87c
  ldr r2, =_sbss
 8004370:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8004374:	2000093c 	.word	0x2000093c

08004378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004378:	e7fe      	b.n	8004378 <ADC_IRQHandler>
	...

0800437c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004380:	4b0e      	ldr	r3, [pc, #56]	@ (80043bc <HAL_Init+0x40>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a0d      	ldr	r2, [pc, #52]	@ (80043bc <HAL_Init+0x40>)
 8004386:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800438a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800438c:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <HAL_Init+0x40>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0a      	ldr	r2, [pc, #40]	@ (80043bc <HAL_Init+0x40>)
 8004392:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004398:	4b08      	ldr	r3, [pc, #32]	@ (80043bc <HAL_Init+0x40>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a07      	ldr	r2, [pc, #28]	@ (80043bc <HAL_Init+0x40>)
 800439e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043a4:	2003      	movs	r0, #3
 80043a6:	f000 fc65 	bl	8004c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043aa:	200f      	movs	r0, #15
 80043ac:	f000 f808 	bl	80043c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043b0:	f7ff fc46 	bl	8003c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40023c00 	.word	0x40023c00

080043c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043c8:	4b12      	ldr	r3, [pc, #72]	@ (8004414 <HAL_InitTick+0x54>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	4b12      	ldr	r3, [pc, #72]	@ (8004418 <HAL_InitTick+0x58>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	4619      	mov	r1, r3
 80043d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80043da:	fbb2 f3f3 	udiv	r3, r2, r3
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fc7d 	bl	8004cde <HAL_SYSTICK_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e00e      	b.n	800440c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b0f      	cmp	r3, #15
 80043f2:	d80a      	bhi.n	800440a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043f4:	2200      	movs	r2, #0
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	f000 fc45 	bl	8004c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004400:	4a06      	ldr	r2, [pc, #24]	@ (800441c <HAL_InitTick+0x5c>)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	e000      	b.n	800440c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
}
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20000030 	.word	0x20000030
 8004418:	20000038 	.word	0x20000038
 800441c:	20000034 	.word	0x20000034

08004420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004424:	4b06      	ldr	r3, [pc, #24]	@ (8004440 <HAL_IncTick+0x20>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	4b06      	ldr	r3, [pc, #24]	@ (8004444 <HAL_IncTick+0x24>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4413      	add	r3, r2
 8004430:	4a04      	ldr	r2, [pc, #16]	@ (8004444 <HAL_IncTick+0x24>)
 8004432:	6013      	str	r3, [r2, #0]
}
 8004434:	bf00      	nop
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	20000038 	.word	0x20000038
 8004444:	20000938 	.word	0x20000938

08004448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return uwTick;
 800444c:	4b03      	ldr	r3, [pc, #12]	@ (800445c <HAL_GetTick+0x14>)
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000938 	.word	0x20000938

08004460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004468:	f7ff ffee 	bl	8004448 <HAL_GetTick>
 800446c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d005      	beq.n	8004486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800447a:	4b0a      	ldr	r3, [pc, #40]	@ (80044a4 <HAL_Delay+0x44>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4413      	add	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004486:	bf00      	nop
 8004488:	f7ff ffde 	bl	8004448 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	429a      	cmp	r2, r3
 8004496:	d8f7      	bhi.n	8004488 <HAL_Delay+0x28>
  {
  }
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000038 	.word	0x20000038

080044a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e033      	b.n	8004526 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fc f84e 	bl	8000568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d118      	bne.n	8004518 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80044ee:	f023 0302 	bic.w	r3, r3, #2
 80044f2:	f043 0202 	orr.w	r2, r3, #2
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f9ee 	bl	80048dc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	f023 0303 	bic.w	r3, r3, #3
 800450e:	f043 0201 	orr.w	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	641a      	str	r2, [r3, #64]	@ 0x40
 8004516:	e001      	b.n	800451c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004524:	7bfb      	ldrb	r3, [r7, #15]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_ADC_Start+0x1a>
 8004546:	2302      	movs	r3, #2
 8004548:	e097      	b.n	800467a <HAL_ADC_Start+0x14a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d018      	beq.n	8004592 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004570:	4b45      	ldr	r3, [pc, #276]	@ (8004688 <HAL_ADC_Start+0x158>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a45      	ldr	r2, [pc, #276]	@ (800468c <HAL_ADC_Start+0x15c>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	0c9a      	lsrs	r2, r3, #18
 800457c:	4613      	mov	r3, r2
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	4413      	add	r3, r2
 8004582:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004584:	e002      	b.n	800458c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	3b01      	subs	r3, #1
 800458a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f9      	bne.n	8004586 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d15f      	bne.n	8004660 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80045ca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045de:	d106      	bne.n	80045ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e4:	f023 0206 	bic.w	r2, r3, #6
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	645a      	str	r2, [r3, #68]	@ 0x44
 80045ec:	e002      	b.n	80045f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045fc:	4b24      	ldr	r3, [pc, #144]	@ (8004690 <HAL_ADC_Start+0x160>)
 80045fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004608:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10f      	bne.n	8004636 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d129      	bne.n	8004678 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004632:	609a      	str	r2, [r3, #8]
 8004634:	e020      	b.n	8004678 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a16      	ldr	r2, [pc, #88]	@ (8004694 <HAL_ADC_Start+0x164>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d11b      	bne.n	8004678 <HAL_ADC_Start+0x148>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d114      	bne.n	8004678 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800465c:	609a      	str	r2, [r3, #8]
 800465e:	e00b      	b.n	8004678 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004664:	f043 0210 	orr.w	r2, r3, #16
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004670:	f043 0201 	orr.w	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000030 	.word	0x20000030
 800468c:	431bde83 	.word	0x431bde83
 8004690:	40012300 	.word	0x40012300
 8004694:	40012000 	.word	0x40012000

08004698 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x1c>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e105      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x228>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b09      	cmp	r3, #9
 80046c2:	d925      	bls.n	8004710 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68d9      	ldr	r1, [r3, #12]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	4613      	mov	r3, r2
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	4413      	add	r3, r2
 80046d8:	3b1e      	subs	r3, #30
 80046da:	2207      	movs	r2, #7
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	43da      	mvns	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	400a      	ands	r2, r1
 80046e8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68d9      	ldr	r1, [r3, #12]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	4618      	mov	r0, r3
 80046fc:	4603      	mov	r3, r0
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	4403      	add	r3, r0
 8004702:	3b1e      	subs	r3, #30
 8004704:	409a      	lsls	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	60da      	str	r2, [r3, #12]
 800470e:	e022      	b.n	8004756 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6919      	ldr	r1, [r3, #16]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	4613      	mov	r3, r2
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	4413      	add	r3, r2
 8004724:	2207      	movs	r2, #7
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43da      	mvns	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	400a      	ands	r2, r1
 8004732:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6919      	ldr	r1, [r3, #16]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	4618      	mov	r0, r3
 8004746:	4603      	mov	r3, r0
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4403      	add	r3, r0
 800474c:	409a      	lsls	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b06      	cmp	r3, #6
 800475c:	d824      	bhi.n	80047a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	3b05      	subs	r3, #5
 8004770:	221f      	movs	r2, #31
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43da      	mvns	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	400a      	ands	r2, r1
 800477e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	4618      	mov	r0, r3
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	3b05      	subs	r3, #5
 800479a:	fa00 f203 	lsl.w	r2, r0, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80047a6:	e04c      	b.n	8004842 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b0c      	cmp	r3, #12
 80047ae:	d824      	bhi.n	80047fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	3b23      	subs	r3, #35	@ 0x23
 80047c2:	221f      	movs	r2, #31
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43da      	mvns	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	400a      	ands	r2, r1
 80047d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	4618      	mov	r0, r3
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	3b23      	subs	r3, #35	@ 0x23
 80047ec:	fa00 f203 	lsl.w	r2, r0, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80047f8:	e023      	b.n	8004842 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	3b41      	subs	r3, #65	@ 0x41
 800480c:	221f      	movs	r2, #31
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	43da      	mvns	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	400a      	ands	r2, r1
 800481a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	4618      	mov	r0, r3
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	3b41      	subs	r3, #65	@ 0x41
 8004836:	fa00 f203 	lsl.w	r2, r0, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004842:	4b22      	ldr	r3, [pc, #136]	@ (80048cc <HAL_ADC_ConfigChannel+0x234>)
 8004844:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a21      	ldr	r2, [pc, #132]	@ (80048d0 <HAL_ADC_ConfigChannel+0x238>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d109      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x1cc>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b12      	cmp	r3, #18
 8004856:	d105      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a19      	ldr	r2, [pc, #100]	@ (80048d0 <HAL_ADC_ConfigChannel+0x238>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d123      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x21e>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b10      	cmp	r3, #16
 8004874:	d003      	beq.n	800487e <HAL_ADC_ConfigChannel+0x1e6>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b11      	cmp	r3, #17
 800487c:	d11b      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b10      	cmp	r3, #16
 8004890:	d111      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004892:	4b10      	ldr	r3, [pc, #64]	@ (80048d4 <HAL_ADC_ConfigChannel+0x23c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a10      	ldr	r2, [pc, #64]	@ (80048d8 <HAL_ADC_ConfigChannel+0x240>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	0c9a      	lsrs	r2, r3, #18
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80048a8:	e002      	b.n	80048b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	3b01      	subs	r3, #1
 80048ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f9      	bne.n	80048aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	40012300 	.word	0x40012300
 80048d0:	40012000 	.word	0x40012000
 80048d4:	20000030 	.word	0x20000030
 80048d8:	431bde83 	.word	0x431bde83

080048dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048e4:	4b79      	ldr	r3, [pc, #484]	@ (8004acc <ADC_Init+0x1f0>)
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	431a      	orrs	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	021a      	lsls	r2, r3, #8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004934:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6859      	ldr	r1, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004956:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6899      	ldr	r1, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496e:	4a58      	ldr	r2, [pc, #352]	@ (8004ad0 <ADC_Init+0x1f4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d022      	beq.n	80049ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004982:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6899      	ldr	r1, [r3, #8]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80049a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6899      	ldr	r1, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	e00f      	b.n	80049da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80049c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80049d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0202 	bic.w	r2, r2, #2
 80049e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6899      	ldr	r1, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	7e1b      	ldrb	r3, [r3, #24]
 80049f4:	005a      	lsls	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01b      	beq.n	8004a40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a16:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004a26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6859      	ldr	r1, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	3b01      	subs	r3, #1
 8004a34:	035a      	lsls	r2, r3, #13
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
 8004a3e:	e007      	b.n	8004a50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a4e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	051a      	lsls	r2, r3, #20
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004a84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6899      	ldr	r1, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a92:	025a      	lsls	r2, r3, #9
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6899      	ldr	r1, [r3, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	029a      	lsls	r2, r3, #10
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	609a      	str	r2, [r3, #8]
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	40012300 	.word	0x40012300
 8004ad0:	0f000001 	.word	0x0f000001

08004ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b18 <__NVIC_SetPriorityGrouping+0x44>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004af0:	4013      	ands	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b06:	4a04      	ldr	r2, [pc, #16]	@ (8004b18 <__NVIC_SetPriorityGrouping+0x44>)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	60d3      	str	r3, [r2, #12]
}
 8004b0c:	bf00      	nop
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	e000ed00 	.word	0xe000ed00

08004b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b20:	4b04      	ldr	r3, [pc, #16]	@ (8004b34 <__NVIC_GetPriorityGrouping+0x18>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	0a1b      	lsrs	r3, r3, #8
 8004b26:	f003 0307 	and.w	r3, r3, #7
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	e000ed00 	.word	0xe000ed00

08004b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	db0b      	blt.n	8004b62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	f003 021f 	and.w	r2, r3, #31
 8004b50:	4907      	ldr	r1, [pc, #28]	@ (8004b70 <__NVIC_EnableIRQ+0x38>)
 8004b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	2001      	movs	r0, #1
 8004b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	e000e100 	.word	0xe000e100

08004b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	6039      	str	r1, [r7, #0]
 8004b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	db0a      	blt.n	8004b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	490c      	ldr	r1, [pc, #48]	@ (8004bc0 <__NVIC_SetPriority+0x4c>)
 8004b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b92:	0112      	lsls	r2, r2, #4
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	440b      	add	r3, r1
 8004b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b9c:	e00a      	b.n	8004bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	4908      	ldr	r1, [pc, #32]	@ (8004bc4 <__NVIC_SetPriority+0x50>)
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	3b04      	subs	r3, #4
 8004bac:	0112      	lsls	r2, r2, #4
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	761a      	strb	r2, [r3, #24]
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	e000e100 	.word	0xe000e100
 8004bc4:	e000ed00 	.word	0xe000ed00

08004bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b089      	sub	sp, #36	@ 0x24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f1c3 0307 	rsb	r3, r3, #7
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	bf28      	it	cs
 8004be6:	2304      	movcs	r3, #4
 8004be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	3304      	adds	r3, #4
 8004bee:	2b06      	cmp	r3, #6
 8004bf0:	d902      	bls.n	8004bf8 <NVIC_EncodePriority+0x30>
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	3b03      	subs	r3, #3
 8004bf6:	e000      	b.n	8004bfa <NVIC_EncodePriority+0x32>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	43da      	mvns	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	401a      	ands	r2, r3
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c10:	f04f 31ff 	mov.w	r1, #4294967295
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1a:	43d9      	mvns	r1, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c20:	4313      	orrs	r3, r2
         );
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3724      	adds	r7, #36	@ 0x24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c40:	d301      	bcc.n	8004c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c42:	2301      	movs	r3, #1
 8004c44:	e00f      	b.n	8004c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c46:	4a0a      	ldr	r2, [pc, #40]	@ (8004c70 <SysTick_Config+0x40>)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c4e:	210f      	movs	r1, #15
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	f7ff ff8e 	bl	8004b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c58:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <SysTick_Config+0x40>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c5e:	4b04      	ldr	r3, [pc, #16]	@ (8004c70 <SysTick_Config+0x40>)
 8004c60:	2207      	movs	r2, #7
 8004c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	e000e010 	.word	0xe000e010

08004c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff ff29 	bl	8004ad4 <__NVIC_SetPriorityGrouping>
}
 8004c82:	bf00      	nop
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b086      	sub	sp, #24
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	4603      	mov	r3, r0
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c9c:	f7ff ff3e 	bl	8004b1c <__NVIC_GetPriorityGrouping>
 8004ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68b9      	ldr	r1, [r7, #8]
 8004ca6:	6978      	ldr	r0, [r7, #20]
 8004ca8:	f7ff ff8e 	bl	8004bc8 <NVIC_EncodePriority>
 8004cac:	4602      	mov	r2, r0
 8004cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff ff5d 	bl	8004b74 <__NVIC_SetPriority>
}
 8004cba:	bf00      	nop
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	4603      	mov	r3, r0
 8004cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff ff31 	bl	8004b38 <__NVIC_EnableIRQ>
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b082      	sub	sp, #8
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff ffa2 	bl	8004c30 <SysTick_Config>
 8004cec:	4603      	mov	r3, r0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d04:	f7ff fba0 	bl	8004448 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e099      	b.n	8004e48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0201 	bic.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d34:	e00f      	b.n	8004d56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d36:	f7ff fb87 	bl	8004448 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b05      	cmp	r3, #5
 8004d42:	d908      	bls.n	8004d56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e078      	b.n	8004e48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e8      	bne.n	8004d36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	4b38      	ldr	r3, [pc, #224]	@ (8004e50 <HAL_DMA_Init+0x158>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d107      	bne.n	8004dc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db8:	4313      	orrs	r3, r2
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f023 0307 	bic.w	r3, r3, #7
 8004dd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d117      	bne.n	8004e1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00e      	beq.n	8004e1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 faab 	bl	8005358 <DMA_CheckFifoParam>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2240      	movs	r2, #64	@ 0x40
 8004e0c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e16:	2301      	movs	r3, #1
 8004e18:	e016      	b.n	8004e48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fa62 	bl	80052ec <DMA_CalcBaseAndBitshift>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e30:	223f      	movs	r2, #63	@ 0x3f
 8004e32:	409a      	lsls	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	f010803f 	.word	0xf010803f

08004e54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d101      	bne.n	8004e7a <HAL_DMA_Start_IT+0x26>
 8004e76:	2302      	movs	r3, #2
 8004e78:	e040      	b.n	8004efc <HAL_DMA_Start_IT+0xa8>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d12f      	bne.n	8004eee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2202      	movs	r2, #2
 8004e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f9f4 	bl	8005290 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eac:	223f      	movs	r2, #63	@ 0x3f
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0216 	orr.w	r2, r2, #22
 8004ec2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d007      	beq.n	8004edc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0208 	orr.w	r2, r2, #8
 8004eda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	e005      	b.n	8004efa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d004      	beq.n	8004f22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2280      	movs	r2, #128	@ 0x80
 8004f1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e00c      	b.n	8004f3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2205      	movs	r2, #5
 8004f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0201 	bic.w	r2, r2, #1
 8004f38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f54:	4b8e      	ldr	r3, [pc, #568]	@ (8005190 <HAL_DMA_IRQHandler+0x248>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a8e      	ldr	r2, [pc, #568]	@ (8005194 <HAL_DMA_IRQHandler+0x24c>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	0a9b      	lsrs	r3, r3, #10
 8004f60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f72:	2208      	movs	r2, #8
 8004f74:	409a      	lsls	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01a      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d013      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0204 	bic.w	r2, r2, #4
 8004f9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	409a      	lsls	r2, r3
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fac:	f043 0201 	orr.w	r2, r3, #1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb8:	2201      	movs	r2, #1
 8004fba:	409a      	lsls	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d012      	beq.n	8004fea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	409a      	lsls	r2, r3
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe2:	f043 0202 	orr.w	r2, r3, #2
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fee:	2204      	movs	r2, #4
 8004ff0:	409a      	lsls	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d012      	beq.n	8005020 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800500c:	2204      	movs	r2, #4
 800500e:	409a      	lsls	r2, r3
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005018:	f043 0204 	orr.w	r2, r3, #4
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005024:	2210      	movs	r2, #16
 8005026:	409a      	lsls	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4013      	ands	r3, r2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d043      	beq.n	80050b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d03c      	beq.n	80050b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005042:	2210      	movs	r2, #16
 8005044:	409a      	lsls	r2, r3
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d018      	beq.n	800508a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d108      	bne.n	8005078 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	d024      	beq.n	80050b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	4798      	blx	r3
 8005076:	e01f      	b.n	80050b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01b      	beq.n	80050b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	4798      	blx	r3
 8005088:	e016      	b.n	80050b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d107      	bne.n	80050a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0208 	bic.w	r2, r2, #8
 80050a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050bc:	2220      	movs	r2, #32
 80050be:	409a      	lsls	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 808f 	beq.w	80051e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 8087 	beq.w	80051e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050de:	2220      	movs	r2, #32
 80050e0:	409a      	lsls	r2, r3
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b05      	cmp	r3, #5
 80050f0:	d136      	bne.n	8005160 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0216 	bic.w	r2, r2, #22
 8005100:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695a      	ldr	r2, [r3, #20]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005110:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d103      	bne.n	8005122 <HAL_DMA_IRQHandler+0x1da>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0208 	bic.w	r2, r2, #8
 8005130:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005136:	223f      	movs	r2, #63	@ 0x3f
 8005138:	409a      	lsls	r2, r3
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005152:	2b00      	cmp	r3, #0
 8005154:	d07e      	beq.n	8005254 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	4798      	blx	r3
        }
        return;
 800515e:	e079      	b.n	8005254 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01d      	beq.n	80051aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10d      	bne.n	8005198 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005180:	2b00      	cmp	r3, #0
 8005182:	d031      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	4798      	blx	r3
 800518c:	e02c      	b.n	80051e8 <HAL_DMA_IRQHandler+0x2a0>
 800518e:	bf00      	nop
 8005190:	20000030 	.word	0x20000030
 8005194:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800519c:	2b00      	cmp	r3, #0
 800519e:	d023      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4798      	blx	r3
 80051a8:	e01e      	b.n	80051e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10f      	bne.n	80051d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0210 	bic.w	r2, r2, #16
 80051c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d032      	beq.n	8005256 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d022      	beq.n	8005242 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2205      	movs	r2, #5
 8005200:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0201 	bic.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	3301      	adds	r3, #1
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	429a      	cmp	r2, r3
 800521e:	d307      	bcc.n	8005230 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f2      	bne.n	8005214 <HAL_DMA_IRQHandler+0x2cc>
 800522e:	e000      	b.n	8005232 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005230:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005246:	2b00      	cmp	r3, #0
 8005248:	d005      	beq.n	8005256 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	4798      	blx	r3
 8005252:	e000      	b.n	8005256 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005254:	bf00      	nop
    }
  }
}
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800526a:	b2db      	uxtb	r3, r3
}
 800526c:	4618      	mov	r0, r3
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005284:	4618      	mov	r0, r3
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80052ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b40      	cmp	r3, #64	@ 0x40
 80052bc:	d108      	bne.n	80052d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052ce:	e007      	b.n	80052e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	60da      	str	r2, [r3, #12]
}
 80052e0:	bf00      	nop
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	3b10      	subs	r3, #16
 80052fc:	4a14      	ldr	r2, [pc, #80]	@ (8005350 <DMA_CalcBaseAndBitshift+0x64>)
 80052fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005302:	091b      	lsrs	r3, r3, #4
 8005304:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005306:	4a13      	ldr	r2, [pc, #76]	@ (8005354 <DMA_CalcBaseAndBitshift+0x68>)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b03      	cmp	r3, #3
 8005318:	d909      	bls.n	800532e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005322:	f023 0303 	bic.w	r3, r3, #3
 8005326:	1d1a      	adds	r2, r3, #4
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	659a      	str	r2, [r3, #88]	@ 0x58
 800532c:	e007      	b.n	800533e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005336:	f023 0303 	bic.w	r3, r3, #3
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	aaaaaaab 	.word	0xaaaaaaab
 8005354:	0800b864 	.word	0x0800b864

08005358 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d11f      	bne.n	80053b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b03      	cmp	r3, #3
 8005376:	d856      	bhi.n	8005426 <DMA_CheckFifoParam+0xce>
 8005378:	a201      	add	r2, pc, #4	@ (adr r2, 8005380 <DMA_CheckFifoParam+0x28>)
 800537a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537e:	bf00      	nop
 8005380:	08005391 	.word	0x08005391
 8005384:	080053a3 	.word	0x080053a3
 8005388:	08005391 	.word	0x08005391
 800538c:	08005427 	.word	0x08005427
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d046      	beq.n	800542a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053a0:	e043      	b.n	800542a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053aa:	d140      	bne.n	800542e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053b0:	e03d      	b.n	800542e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053ba:	d121      	bne.n	8005400 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d837      	bhi.n	8005432 <DMA_CheckFifoParam+0xda>
 80053c2:	a201      	add	r2, pc, #4	@ (adr r2, 80053c8 <DMA_CheckFifoParam+0x70>)
 80053c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c8:	080053d9 	.word	0x080053d9
 80053cc:	080053df 	.word	0x080053df
 80053d0:	080053d9 	.word	0x080053d9
 80053d4:	080053f1 	.word	0x080053f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]
      break;
 80053dc:	e030      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d025      	beq.n	8005436 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ee:	e022      	b.n	8005436 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053f8:	d11f      	bne.n	800543a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80053fe:	e01c      	b.n	800543a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d903      	bls.n	800540e <DMA_CheckFifoParam+0xb6>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b03      	cmp	r3, #3
 800540a:	d003      	beq.n	8005414 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800540c:	e018      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	73fb      	strb	r3, [r7, #15]
      break;
 8005412:	e015      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005418:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00e      	beq.n	800543e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	73fb      	strb	r3, [r7, #15]
      break;
 8005424:	e00b      	b.n	800543e <DMA_CheckFifoParam+0xe6>
      break;
 8005426:	bf00      	nop
 8005428:	e00a      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
      break;
 800542a:	bf00      	nop
 800542c:	e008      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
      break;
 800542e:	bf00      	nop
 8005430:	e006      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
      break;
 8005432:	bf00      	nop
 8005434:	e004      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
      break;
 8005436:	bf00      	nop
 8005438:	e002      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
      break;   
 800543a:	bf00      	nop
 800543c:	e000      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
      break;
 800543e:	bf00      	nop
    }
  } 
  
  return status; 
 8005440:	7bfb      	ldrb	r3, [r7, #15]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop

08005450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005450:	b480      	push	{r7}
 8005452:	b089      	sub	sp, #36	@ 0x24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800545e:	2300      	movs	r3, #0
 8005460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005462:	2300      	movs	r3, #0
 8005464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
 800546a:	e159      	b.n	8005720 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800546c:	2201      	movs	r2, #1
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4013      	ands	r3, r2
 800547e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	429a      	cmp	r2, r3
 8005486:	f040 8148 	bne.w	800571a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b01      	cmp	r3, #1
 8005494:	d005      	beq.n	80054a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d130      	bne.n	8005504 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	2203      	movs	r2, #3
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	43db      	mvns	r3, r3
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	4013      	ands	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054d8:	2201      	movs	r2, #1
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	43db      	mvns	r3, r3
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4013      	ands	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	f003 0201 	and.w	r2, r3, #1
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 0303 	and.w	r3, r3, #3
 800550c:	2b03      	cmp	r3, #3
 800550e:	d017      	beq.n	8005540 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	2203      	movs	r2, #3
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	43db      	mvns	r3, r3
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	4013      	ands	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	4313      	orrs	r3, r2
 8005538:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f003 0303 	and.w	r3, r3, #3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d123      	bne.n	8005594 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	08da      	lsrs	r2, r3, #3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3208      	adds	r2, #8
 8005554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005558:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	220f      	movs	r2, #15
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	43db      	mvns	r3, r3
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	4013      	ands	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	4313      	orrs	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	08da      	lsrs	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3208      	adds	r2, #8
 800558e:	69b9      	ldr	r1, [r7, #24]
 8005590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	2203      	movs	r2, #3
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	43db      	mvns	r3, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4013      	ands	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f003 0203 	and.w	r2, r3, #3
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4313      	orrs	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 80a2 	beq.w	800571a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	4b57      	ldr	r3, [pc, #348]	@ (8005738 <HAL_GPIO_Init+0x2e8>)
 80055dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055de:	4a56      	ldr	r2, [pc, #344]	@ (8005738 <HAL_GPIO_Init+0x2e8>)
 80055e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80055e6:	4b54      	ldr	r3, [pc, #336]	@ (8005738 <HAL_GPIO_Init+0x2e8>)
 80055e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055f2:	4a52      	ldr	r2, [pc, #328]	@ (800573c <HAL_GPIO_Init+0x2ec>)
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	089b      	lsrs	r3, r3, #2
 80055f8:	3302      	adds	r3, #2
 80055fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	220f      	movs	r2, #15
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	43db      	mvns	r3, r3
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	4013      	ands	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a49      	ldr	r2, [pc, #292]	@ (8005740 <HAL_GPIO_Init+0x2f0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d019      	beq.n	8005652 <HAL_GPIO_Init+0x202>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a48      	ldr	r2, [pc, #288]	@ (8005744 <HAL_GPIO_Init+0x2f4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d013      	beq.n	800564e <HAL_GPIO_Init+0x1fe>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a47      	ldr	r2, [pc, #284]	@ (8005748 <HAL_GPIO_Init+0x2f8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00d      	beq.n	800564a <HAL_GPIO_Init+0x1fa>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a46      	ldr	r2, [pc, #280]	@ (800574c <HAL_GPIO_Init+0x2fc>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d007      	beq.n	8005646 <HAL_GPIO_Init+0x1f6>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a45      	ldr	r2, [pc, #276]	@ (8005750 <HAL_GPIO_Init+0x300>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d101      	bne.n	8005642 <HAL_GPIO_Init+0x1f2>
 800563e:	2304      	movs	r3, #4
 8005640:	e008      	b.n	8005654 <HAL_GPIO_Init+0x204>
 8005642:	2307      	movs	r3, #7
 8005644:	e006      	b.n	8005654 <HAL_GPIO_Init+0x204>
 8005646:	2303      	movs	r3, #3
 8005648:	e004      	b.n	8005654 <HAL_GPIO_Init+0x204>
 800564a:	2302      	movs	r3, #2
 800564c:	e002      	b.n	8005654 <HAL_GPIO_Init+0x204>
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <HAL_GPIO_Init+0x204>
 8005652:	2300      	movs	r3, #0
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	f002 0203 	and.w	r2, r2, #3
 800565a:	0092      	lsls	r2, r2, #2
 800565c:	4093      	lsls	r3, r2
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	4313      	orrs	r3, r2
 8005662:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005664:	4935      	ldr	r1, [pc, #212]	@ (800573c <HAL_GPIO_Init+0x2ec>)
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	089b      	lsrs	r3, r3, #2
 800566a:	3302      	adds	r3, #2
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005672:	4b38      	ldr	r3, [pc, #224]	@ (8005754 <HAL_GPIO_Init+0x304>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	43db      	mvns	r3, r3
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	4013      	ands	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	4313      	orrs	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005696:	4a2f      	ldr	r2, [pc, #188]	@ (8005754 <HAL_GPIO_Init+0x304>)
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800569c:	4b2d      	ldr	r3, [pc, #180]	@ (8005754 <HAL_GPIO_Init+0x304>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	43db      	mvns	r3, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4013      	ands	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4313      	orrs	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056c0:	4a24      	ldr	r2, [pc, #144]	@ (8005754 <HAL_GPIO_Init+0x304>)
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056c6:	4b23      	ldr	r3, [pc, #140]	@ (8005754 <HAL_GPIO_Init+0x304>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	43db      	mvns	r3, r3
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	4013      	ands	r3, r2
 80056d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005754 <HAL_GPIO_Init+0x304>)
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056f0:	4b18      	ldr	r3, [pc, #96]	@ (8005754 <HAL_GPIO_Init+0x304>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	43db      	mvns	r3, r3
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	4013      	ands	r3, r2
 80056fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005714:	4a0f      	ldr	r2, [pc, #60]	@ (8005754 <HAL_GPIO_Init+0x304>)
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	3301      	adds	r3, #1
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	2b0f      	cmp	r3, #15
 8005724:	f67f aea2 	bls.w	800546c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005728:	bf00      	nop
 800572a:	bf00      	nop
 800572c:	3724      	adds	r7, #36	@ 0x24
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40023800 	.word	0x40023800
 800573c:	40013800 	.word	0x40013800
 8005740:	40020000 	.word	0x40020000
 8005744:	40020400 	.word	0x40020400
 8005748:	40020800 	.word	0x40020800
 800574c:	40020c00 	.word	0x40020c00
 8005750:	40021000 	.word	0x40021000
 8005754:	40013c00 	.word	0x40013c00

08005758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	460b      	mov	r3, r1
 8005762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	887b      	ldrh	r3, [r7, #2]
 800576a:	4013      	ands	r3, r2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005770:	2301      	movs	r3, #1
 8005772:	73fb      	strb	r3, [r7, #15]
 8005774:	e001      	b.n	800577a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005776:	2300      	movs	r3, #0
 8005778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800577a:	7bfb      	ldrb	r3, [r7, #15]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	807b      	strh	r3, [r7, #2]
 8005794:	4613      	mov	r3, r2
 8005796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005798:	787b      	ldrb	r3, [r7, #1]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800579e:	887a      	ldrh	r2, [r7, #2]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057a4:	e003      	b.n	80057ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057a6:	887b      	ldrh	r3, [r7, #2]
 80057a8:	041a      	lsls	r2, r3, #16
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	619a      	str	r2, [r3, #24]
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e12b      	b.n	8005a26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fc fc3c 	bl	8002060 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2224      	movs	r2, #36	@ 0x24
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0201 	bic.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800580e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800581e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005820:	f003 f8ec 	bl	80089fc <HAL_RCC_GetPCLK1Freq>
 8005824:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	4a81      	ldr	r2, [pc, #516]	@ (8005a30 <HAL_I2C_Init+0x274>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d807      	bhi.n	8005840 <HAL_I2C_Init+0x84>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4a80      	ldr	r2, [pc, #512]	@ (8005a34 <HAL_I2C_Init+0x278>)
 8005834:	4293      	cmp	r3, r2
 8005836:	bf94      	ite	ls
 8005838:	2301      	movls	r3, #1
 800583a:	2300      	movhi	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	e006      	b.n	800584e <HAL_I2C_Init+0x92>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4a7d      	ldr	r2, [pc, #500]	@ (8005a38 <HAL_I2C_Init+0x27c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	bf94      	ite	ls
 8005848:	2301      	movls	r3, #1
 800584a:	2300      	movhi	r3, #0
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e0e7      	b.n	8005a26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4a78      	ldr	r2, [pc, #480]	@ (8005a3c <HAL_I2C_Init+0x280>)
 800585a:	fba2 2303 	umull	r2, r3, r2, r3
 800585e:	0c9b      	lsrs	r3, r3, #18
 8005860:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	430a      	orrs	r2, r1
 8005874:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	4a6a      	ldr	r2, [pc, #424]	@ (8005a30 <HAL_I2C_Init+0x274>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d802      	bhi.n	8005890 <HAL_I2C_Init+0xd4>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	3301      	adds	r3, #1
 800588e:	e009      	b.n	80058a4 <HAL_I2C_Init+0xe8>
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005896:	fb02 f303 	mul.w	r3, r2, r3
 800589a:	4a69      	ldr	r2, [pc, #420]	@ (8005a40 <HAL_I2C_Init+0x284>)
 800589c:	fba2 2303 	umull	r2, r3, r2, r3
 80058a0:	099b      	lsrs	r3, r3, #6
 80058a2:	3301      	adds	r3, #1
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6812      	ldr	r2, [r2, #0]
 80058a8:	430b      	orrs	r3, r1
 80058aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80058b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	495c      	ldr	r1, [pc, #368]	@ (8005a30 <HAL_I2C_Init+0x274>)
 80058c0:	428b      	cmp	r3, r1
 80058c2:	d819      	bhi.n	80058f8 <HAL_I2C_Init+0x13c>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	1e59      	subs	r1, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80058d2:	1c59      	adds	r1, r3, #1
 80058d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80058d8:	400b      	ands	r3, r1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <HAL_I2C_Init+0x138>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	1e59      	subs	r1, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80058ec:	3301      	adds	r3, #1
 80058ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058f2:	e051      	b.n	8005998 <HAL_I2C_Init+0x1dc>
 80058f4:	2304      	movs	r3, #4
 80058f6:	e04f      	b.n	8005998 <HAL_I2C_Init+0x1dc>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d111      	bne.n	8005924 <HAL_I2C_Init+0x168>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	1e58      	subs	r0, r3, #1
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6859      	ldr	r1, [r3, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	440b      	add	r3, r1
 800590e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005912:	3301      	adds	r3, #1
 8005914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005918:	2b00      	cmp	r3, #0
 800591a:	bf0c      	ite	eq
 800591c:	2301      	moveq	r3, #1
 800591e:	2300      	movne	r3, #0
 8005920:	b2db      	uxtb	r3, r3
 8005922:	e012      	b.n	800594a <HAL_I2C_Init+0x18e>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	1e58      	subs	r0, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6859      	ldr	r1, [r3, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	440b      	add	r3, r1
 8005932:	0099      	lsls	r1, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	fbb0 f3f3 	udiv	r3, r0, r3
 800593a:	3301      	adds	r3, #1
 800593c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005940:	2b00      	cmp	r3, #0
 8005942:	bf0c      	ite	eq
 8005944:	2301      	moveq	r3, #1
 8005946:	2300      	movne	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_I2C_Init+0x196>
 800594e:	2301      	movs	r3, #1
 8005950:	e022      	b.n	8005998 <HAL_I2C_Init+0x1dc>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10e      	bne.n	8005978 <HAL_I2C_Init+0x1bc>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	1e58      	subs	r0, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6859      	ldr	r1, [r3, #4]
 8005962:	460b      	mov	r3, r1
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	440b      	add	r3, r1
 8005968:	fbb0 f3f3 	udiv	r3, r0, r3
 800596c:	3301      	adds	r3, #1
 800596e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005976:	e00f      	b.n	8005998 <HAL_I2C_Init+0x1dc>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	1e58      	subs	r0, r3, #1
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6859      	ldr	r1, [r3, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	440b      	add	r3, r1
 8005986:	0099      	lsls	r1, r3, #2
 8005988:	440b      	add	r3, r1
 800598a:	fbb0 f3f3 	udiv	r3, r0, r3
 800598e:	3301      	adds	r3, #1
 8005990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005994:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	6809      	ldr	r1, [r1, #0]
 800599c:	4313      	orrs	r3, r2
 800599e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69da      	ldr	r2, [r3, #28]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80059c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6911      	ldr	r1, [r2, #16]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	68d2      	ldr	r2, [r2, #12]
 80059d2:	4311      	orrs	r1, r2
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	430b      	orrs	r3, r1
 80059da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0201 	orr.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2220      	movs	r2, #32
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	000186a0 	.word	0x000186a0
 8005a34:	001e847f 	.word	0x001e847f
 8005a38:	003d08ff 	.word	0x003d08ff
 8005a3c:	431bde83 	.word	0x431bde83
 8005a40:	10624dd3 	.word	0x10624dd3

08005a44 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a56:	2b80      	cmp	r3, #128	@ 0x80
 8005a58:	d103      	bne.n	8005a62 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	611a      	str	r2, [r3, #16]
  }
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
	...

08005a70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af02      	add	r7, sp, #8
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	817b      	strh	r3, [r7, #10]
 8005a80:	4613      	mov	r3, r2
 8005a82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a84:	f7fe fce0 	bl	8004448 <HAL_GetTick>
 8005a88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b20      	cmp	r3, #32
 8005a94:	f040 80e0 	bne.w	8005c58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	2319      	movs	r3, #25
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	4970      	ldr	r1, [pc, #448]	@ (8005c64 <HAL_I2C_Master_Transmit+0x1f4>)
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f002 f940 	bl	8007d28 <I2C_WaitOnFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e0d3      	b.n	8005c5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_I2C_Master_Transmit+0x50>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e0cc      	b.n	8005c5a <HAL_I2C_Master_Transmit+0x1ea>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d007      	beq.n	8005ae6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0201 	orr.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005af4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2221      	movs	r2, #33	@ 0x21
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2210      	movs	r2, #16
 8005b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	893a      	ldrh	r2, [r7, #8]
 8005b16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4a50      	ldr	r2, [pc, #320]	@ (8005c68 <HAL_I2C_Master_Transmit+0x1f8>)
 8005b26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b28:	8979      	ldrh	r1, [r7, #10]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	6a3a      	ldr	r2, [r7, #32]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f001 feb4 	bl	800789c <I2C_MasterRequestWrite>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e08d      	b.n	8005c5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b3e:	2300      	movs	r3, #0
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005b54:	e066      	b.n	8005c24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	6a39      	ldr	r1, [r7, #32]
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f002 f9fe 	bl	8007f5c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00d      	beq.n	8005b82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d107      	bne.n	8005b7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e06b      	b.n	8005c5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b86:	781a      	ldrb	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d11b      	bne.n	8005bf8 <HAL_I2C_Master_Transmit+0x188>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d017      	beq.n	8005bf8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bcc:	781a      	ldrb	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	6a39      	ldr	r1, [r7, #32]
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f002 f9f5 	bl	8007fec <I2C_WaitOnBTFFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00d      	beq.n	8005c24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d107      	bne.n	8005c20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e01a      	b.n	8005c5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d194      	bne.n	8005b56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	e000      	b.n	8005c5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c58:	2302      	movs	r3, #2
  }
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	00100002 	.word	0x00100002
 8005c68:	ffff0000 	.word	0xffff0000

08005c6c <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	607a      	str	r2, [r7, #4]
 8005c76:	461a      	mov	r2, r3
 8005c78:	460b      	mov	r3, r1
 8005c7a:	817b      	strh	r3, [r7, #10]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	f040 8109 	bne.w	8005ea4 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c92:	4b87      	ldr	r3, [pc, #540]	@ (8005eb0 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	08db      	lsrs	r3, r3, #3
 8005c98:	4a86      	ldr	r2, [pc, #536]	@ (8005eb4 <HAL_I2C_Master_Transmit_DMA+0x248>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	0a1a      	lsrs	r2, r3, #8
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009a      	lsls	r2, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d112      	bne.n	8005cde <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd2:	f043 0220 	orr.w	r2, r3, #32
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005cda:	2302      	movs	r3, #2
 8005cdc:	e0e3      	b.n	8005ea6 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d0df      	beq.n	8005cac <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d101      	bne.n	8005cfa <HAL_I2C_Master_Transmit_DMA+0x8e>
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	e0d5      	b.n	8005ea6 <HAL_I2C_Master_Transmit_DMA+0x23a>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d007      	beq.n	8005d20 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2221      	movs	r2, #33	@ 0x21
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2210      	movs	r2, #16
 8005d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	893a      	ldrh	r2, [r7, #8]
 8005d50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4a56      	ldr	r2, [pc, #344]	@ (8005eb8 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8005d60:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005d62:	897a      	ldrh	r2, [r7, #10]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d07b      	beq.n	8005e68 <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d02a      	beq.n	8005dce <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d7c:	4a4f      	ldr	r2, [pc, #316]	@ (8005ebc <HAL_I2C_Master_Transmit_DMA+0x250>)
 8005d7e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d84:	4a4e      	ldr	r2, [pc, #312]	@ (8005ec0 <HAL_I2C_Master_Transmit_DMA+0x254>)
 8005d86:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d94:	2200      	movs	r2, #0
 8005d96:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da4:	2200      	movs	r2, #0
 8005da6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db0:	4619      	mov	r1, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3310      	adds	r3, #16
 8005db8:	461a      	mov	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dbe:	f7ff f849 	bl	8004e54 <HAL_DMA_Start_IT>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005dc6:	7dfb      	ldrb	r3, [r7, #23]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d139      	bne.n	8005e40 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 8005dcc:	e013      	b.n	8005df6 <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e057      	b.n	8005ea6 <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005e0c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e1c:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e2c:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	e02f      	b.n	8005ea0 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e54:	f043 0210 	orr.w	r2, r3, #16
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e01e      	b.n	8005ea6 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e76:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e86:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8005e9e:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	e000      	b.n	8005ea6 <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8005ea4:	2302      	movs	r3, #2
  }
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000030 	.word	0x20000030
 8005eb4:	14f8b589 	.word	0x14f8b589
 8005eb8:	ffff0000 	.word	0xffff0000
 8005ebc:	080079a1 	.word	0x080079a1
 8005ec0:	08007b5f 	.word	0x08007b5f

08005ec4 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	607a      	str	r2, [r7, #4]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	817b      	strh	r3, [r7, #10]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b20      	cmp	r3, #32
 8005ee6:	f040 8109 	bne.w	80060fc <HAL_I2C_Master_Receive_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005eea:	4b87      	ldr	r3, [pc, #540]	@ (8006108 <HAL_I2C_Master_Receive_DMA+0x244>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	08db      	lsrs	r3, r3, #3
 8005ef0:	4a86      	ldr	r2, [pc, #536]	@ (800610c <HAL_I2C_Master_Receive_DMA+0x248>)
 8005ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef6:	0a1a      	lsrs	r2, r3, #8
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	009a      	lsls	r2, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d112      	bne.n	8005f36 <HAL_I2C_Master_Receive_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2a:	f043 0220 	orr.w	r2, r3, #32
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005f32:	2302      	movs	r3, #2
 8005f34:	e0e3      	b.n	80060fe <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d0df      	beq.n	8005f04 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_I2C_Master_Receive_DMA+0x8e>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e0d5      	b.n	80060fe <HAL_I2C_Master_Receive_DMA+0x23a>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d007      	beq.n	8005f78 <HAL_I2C_Master_Receive_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2222      	movs	r2, #34	@ 0x22
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2210      	movs	r2, #16
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	893a      	ldrh	r2, [r7, #8]
 8005fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4a56      	ldr	r2, [pc, #344]	@ (8006110 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8005fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005fba:	897a      	ldrh	r2, [r7, #10]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d07b      	beq.n	80060c0 <HAL_I2C_Master_Receive_DMA+0x1fc>
    {
      if (hi2c->hdmarx != NULL)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d02a      	beq.n	8006026 <HAL_I2C_Master_Receive_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd4:	4a4f      	ldr	r2, [pc, #316]	@ (8006114 <HAL_I2C_Master_Receive_DMA+0x250>)
 8005fd6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fdc:	4a4e      	ldr	r2, [pc, #312]	@ (8006118 <HAL_I2C_Master_Receive_DMA+0x254>)
 8005fde:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fec:	2200      	movs	r2, #0
 8005fee:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3310      	adds	r3, #16
 800600a:	4619      	mov	r1, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006010:	461a      	mov	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006016:	f7fe ff1d 	bl	8004e54 <HAL_DMA_Start_IT>
 800601a:	4603      	mov	r3, r0
 800601c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800601e:	7dfb      	ldrb	r3, [r7, #23]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d139      	bne.n	8006098 <HAL_I2C_Master_Receive_DMA+0x1d4>
 8006024:	e013      	b.n	800604e <HAL_I2C_Master_Receive_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e057      	b.n	80060fe <HAL_I2C_Master_Receive_DMA+0x23a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800605c:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800606c:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006084:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006094:	605a      	str	r2, [r3, #4]
 8006096:	e02f      	b.n	80060f8 <HAL_I2C_Master_Receive_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2220      	movs	r2, #32
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ac:	f043 0210 	orr.w	r2, r3, #16
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e01e      	b.n	80060fe <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80060d6:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060e6:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060f6:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	e000      	b.n	80060fe <HAL_I2C_Master_Receive_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 80060fc:	2302      	movs	r3, #2
  }
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20000030 	.word	0x20000030
 800610c:	14f8b589 	.word	0x14f8b589
 8006110:	ffff0000 	.word	0xffff0000
 8006114:	080079a1 	.word	0x080079a1
 8006118:	08007b5f 	.word	0x08007b5f

0800611c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006134:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800613c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006144:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	2b10      	cmp	r3, #16
 800614a:	d003      	beq.n	8006154 <HAL_I2C_EV_IRQHandler+0x38>
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	2b40      	cmp	r3, #64	@ 0x40
 8006150:	f040 80b1 	bne.w	80062b6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10d      	bne.n	800618a <HAL_I2C_EV_IRQHandler+0x6e>
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006174:	d003      	beq.n	800617e <HAL_I2C_EV_IRQHandler+0x62>
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800617c:	d101      	bne.n	8006182 <HAL_I2C_EV_IRQHandler+0x66>
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <HAL_I2C_EV_IRQHandler+0x68>
 8006182:	2300      	movs	r3, #0
 8006184:	2b01      	cmp	r3, #1
 8006186:	f000 8114 	beq.w	80063b2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00b      	beq.n	80061ac <HAL_I2C_EV_IRQHandler+0x90>
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800619a:	2b00      	cmp	r3, #0
 800619c:	d006      	beq.n	80061ac <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f001 ffcd 	bl	800813e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fd5c 	bl	8006c62 <I2C_Master_SB>
 80061aa:	e083      	b.n	80062b4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d008      	beq.n	80061c8 <HAL_I2C_EV_IRQHandler+0xac>
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fdd4 	bl	8006d6e <I2C_Master_ADD10>
 80061c6:	e075      	b.n	80062b4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d008      	beq.n	80061e4 <HAL_I2C_EV_IRQHandler+0xc8>
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fdf0 	bl	8006dc2 <I2C_Master_ADDR>
 80061e2:	e067      	b.n	80062b4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d036      	beq.n	800625c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061fc:	f000 80db 	beq.w	80063b6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00d      	beq.n	8006226 <HAL_I2C_EV_IRQHandler+0x10a>
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <HAL_I2C_EV_IRQHandler+0x10a>
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	2b00      	cmp	r3, #0
 800621c:	d103      	bne.n	8006226 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f9b8 	bl	8006594 <I2C_MasterTransmit_TXE>
 8006224:	e046      	b.n	80062b4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 80c2 	beq.w	80063b6 <HAL_I2C_EV_IRQHandler+0x29a>
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 80bc 	beq.w	80063b6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800623e:	7bbb      	ldrb	r3, [r7, #14]
 8006240:	2b21      	cmp	r3, #33	@ 0x21
 8006242:	d103      	bne.n	800624c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fa41 	bl	80066cc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800624a:	e0b4      	b.n	80063b6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	2b40      	cmp	r3, #64	@ 0x40
 8006250:	f040 80b1 	bne.w	80063b6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 faaf 	bl	80067b8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800625a:	e0ac      	b.n	80063b6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006266:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800626a:	f000 80a4 	beq.w	80063b6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00d      	beq.n	8006294 <HAL_I2C_EV_IRQHandler+0x178>
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800627e:	2b00      	cmp	r3, #0
 8006280:	d008      	beq.n	8006294 <HAL_I2C_EV_IRQHandler+0x178>
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	d103      	bne.n	8006294 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fb2b 	bl	80068e8 <I2C_MasterReceive_RXNE>
 8006292:	e00f      	b.n	80062b4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	f003 0304 	and.w	r3, r3, #4
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 808b 	beq.w	80063b6 <HAL_I2C_EV_IRQHandler+0x29a>
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 8085 	beq.w	80063b6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fbe3 	bl	8006a78 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062b2:	e080      	b.n	80063b6 <HAL_I2C_EV_IRQHandler+0x29a>
 80062b4:	e07f      	b.n	80063b6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d004      	beq.n	80062c8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	61fb      	str	r3, [r7, #28]
 80062c6:	e007      	b.n	80062d8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d011      	beq.n	8006306 <HAL_I2C_EV_IRQHandler+0x1ea>
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00c      	beq.n	8006306 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80062fc:	69b9      	ldr	r1, [r7, #24]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 ffae 	bl	8007260 <I2C_Slave_ADDR>
 8006304:	e05a      	b.n	80063bc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	f003 0310 	and.w	r3, r3, #16
 800630c:	2b00      	cmp	r3, #0
 800630e:	d008      	beq.n	8006322 <HAL_I2C_EV_IRQHandler+0x206>
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 ffe8 	bl	80072f0 <I2C_Slave_STOPF>
 8006320:	e04c      	b.n	80063bc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006322:	7bbb      	ldrb	r3, [r7, #14]
 8006324:	2b21      	cmp	r3, #33	@ 0x21
 8006326:	d002      	beq.n	800632e <HAL_I2C_EV_IRQHandler+0x212>
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	2b29      	cmp	r3, #41	@ 0x29
 800632c:	d120      	bne.n	8006370 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00d      	beq.n	8006354 <HAL_I2C_EV_IRQHandler+0x238>
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800633e:	2b00      	cmp	r3, #0
 8006340:	d008      	beq.n	8006354 <HAL_I2C_EV_IRQHandler+0x238>
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d103      	bne.n	8006354 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fec9 	bl	80070e4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006352:	e032      	b.n	80063ba <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	2b00      	cmp	r3, #0
 800635c:	d02d      	beq.n	80063ba <HAL_I2C_EV_IRQHandler+0x29e>
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006364:	2b00      	cmp	r3, #0
 8006366:	d028      	beq.n	80063ba <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fef8 	bl	800715e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800636e:	e024      	b.n	80063ba <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00d      	beq.n	8006396 <HAL_I2C_EV_IRQHandler+0x27a>
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006380:	2b00      	cmp	r3, #0
 8006382:	d008      	beq.n	8006396 <HAL_I2C_EV_IRQHandler+0x27a>
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	f003 0304 	and.w	r3, r3, #4
 800638a:	2b00      	cmp	r3, #0
 800638c:	d103      	bne.n	8006396 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 ff06 	bl	80071a0 <I2C_SlaveReceive_RXNE>
 8006394:	e012      	b.n	80063bc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00d      	beq.n	80063bc <HAL_I2C_EV_IRQHandler+0x2a0>
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d008      	beq.n	80063bc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 ff36 	bl	800721c <I2C_SlaveReceive_BTF>
 80063b0:	e004      	b.n	80063bc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80063b2:	bf00      	nop
 80063b4:	e002      	b.n	80063bc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063b6:	bf00      	nop
 80063b8:	e000      	b.n	80063bc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80063ba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80063bc:	3720      	adds	r7, #32
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b08a      	sub	sp, #40	@ 0x28
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80063da:	2300      	movs	r3, #0
 80063dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063e4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00d      	beq.n	800640c <HAL_I2C_ER_IRQHandler+0x4a>
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d008      	beq.n	800640c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80063fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fc:	f043 0301 	orr.w	r3, r3, #1
 8006400:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800640a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00d      	beq.n	8006432 <HAL_I2C_ER_IRQHandler+0x70>
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006422:	f043 0302 	orr.w	r3, r3, #2
 8006426:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8006430:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006438:	2b00      	cmp	r3, #0
 800643a:	d03e      	beq.n	80064ba <HAL_I2C_ER_IRQHandler+0xf8>
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006442:	2b00      	cmp	r3, #0
 8006444:	d039      	beq.n	80064ba <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8006446:	7efb      	ldrb	r3, [r7, #27]
 8006448:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800644e:	b29b      	uxth	r3, r3
 8006450:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006458:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006460:	7ebb      	ldrb	r3, [r7, #26]
 8006462:	2b20      	cmp	r3, #32
 8006464:	d112      	bne.n	800648c <HAL_I2C_ER_IRQHandler+0xca>
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10f      	bne.n	800648c <HAL_I2C_ER_IRQHandler+0xca>
 800646c:	7cfb      	ldrb	r3, [r7, #19]
 800646e:	2b21      	cmp	r3, #33	@ 0x21
 8006470:	d008      	beq.n	8006484 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006472:	7cfb      	ldrb	r3, [r7, #19]
 8006474:	2b29      	cmp	r3, #41	@ 0x29
 8006476:	d005      	beq.n	8006484 <HAL_I2C_ER_IRQHandler+0xc2>
 8006478:	7cfb      	ldrb	r3, [r7, #19]
 800647a:	2b28      	cmp	r3, #40	@ 0x28
 800647c:	d106      	bne.n	800648c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b21      	cmp	r3, #33	@ 0x21
 8006482:	d103      	bne.n	800648c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f001 f863 	bl	8007550 <I2C_Slave_AF>
 800648a:	e016      	b.n	80064ba <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006494:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	f043 0304 	orr.w	r3, r3, #4
 800649c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800649e:	7efb      	ldrb	r3, [r7, #27]
 80064a0:	2b10      	cmp	r3, #16
 80064a2:	d002      	beq.n	80064aa <HAL_I2C_ER_IRQHandler+0xe8>
 80064a4:	7efb      	ldrb	r3, [r7, #27]
 80064a6:	2b40      	cmp	r3, #64	@ 0x40
 80064a8:	d107      	bne.n	80064ba <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064b8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00d      	beq.n	80064e0 <HAL_I2C_ER_IRQHandler+0x11e>
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d008      	beq.n	80064e0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	f043 0308 	orr.w	r3, r3, #8
 80064d4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80064de:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80064e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d008      	beq.n	80064f8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f001 f8a0 	bl	8007638 <I2C_ITError>
  }
}
 80064f8:	bf00      	nop
 80064fa:	3728      	adds	r7, #40	@ 0x28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
 8006534:	4613      	mov	r3, r2
 8006536:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d150      	bne.n	800665c <I2C_MasterTransmit_TXE+0xc8>
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
 80065bc:	2b21      	cmp	r3, #33	@ 0x21
 80065be:	d14d      	bne.n	800665c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d01d      	beq.n	8006602 <I2C_MasterTransmit_TXE+0x6e>
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b20      	cmp	r3, #32
 80065ca:	d01a      	beq.n	8006602 <I2C_MasterTransmit_TXE+0x6e>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065d2:	d016      	beq.n	8006602 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80065e2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2211      	movs	r2, #17
 80065e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fc fa72 	bl	8002ae4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006600:	e060      	b.n	80066c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006610:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006620:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b40      	cmp	r3, #64	@ 0x40
 800663a:	d107      	bne.n	800664c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7ff ff87 	bl	8006558 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800664a:	e03b      	b.n	80066c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7fc fa45 	bl	8002ae4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800665a:	e033      	b.n	80066c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800665c:	7bfb      	ldrb	r3, [r7, #15]
 800665e:	2b21      	cmp	r3, #33	@ 0x21
 8006660:	d005      	beq.n	800666e <I2C_MasterTransmit_TXE+0xda>
 8006662:	7bbb      	ldrb	r3, [r7, #14]
 8006664:	2b40      	cmp	r3, #64	@ 0x40
 8006666:	d12d      	bne.n	80066c4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	2b22      	cmp	r3, #34	@ 0x22
 800666c:	d12a      	bne.n	80066c4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006672:	b29b      	uxth	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d108      	bne.n	800668a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006686:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006688:	e01c      	b.n	80066c4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b40      	cmp	r3, #64	@ 0x40
 8006694:	d103      	bne.n	800669e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f88e 	bl	80067b8 <I2C_MemoryTransmit_TXE_BTF>
}
 800669c:	e012      	b.n	80066c4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a2:	781a      	ldrb	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80066c2:	e7ff      	b.n	80066c4 <I2C_MasterTransmit_TXE+0x130>
 80066c4:	bf00      	nop
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b21      	cmp	r3, #33	@ 0x21
 80066e4:	d164      	bne.n	80067b0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d012      	beq.n	8006716 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f4:	781a      	ldrb	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800670a:	b29b      	uxth	r3, r3
 800670c:	3b01      	subs	r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006714:	e04c      	b.n	80067b0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b08      	cmp	r3, #8
 800671a:	d01d      	beq.n	8006758 <I2C_MasterTransmit_BTF+0x8c>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b20      	cmp	r3, #32
 8006720:	d01a      	beq.n	8006758 <I2C_MasterTransmit_BTF+0x8c>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006728:	d016      	beq.n	8006758 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006738:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2211      	movs	r2, #17
 800673e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7fc f9c7 	bl	8002ae4 <HAL_I2C_MasterTxCpltCallback>
}
 8006756:	e02b      	b.n	80067b0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006766:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006776:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b40      	cmp	r3, #64	@ 0x40
 8006790:	d107      	bne.n	80067a2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff fedc 	bl	8006558 <HAL_I2C_MemTxCpltCallback>
}
 80067a0:	e006      	b.n	80067b0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fc f99a 	bl	8002ae4 <HAL_I2C_MasterTxCpltCallback>
}
 80067b0:	bf00      	nop
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d11d      	bne.n	800680c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d10b      	bne.n	80067f0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067e8:	1c9a      	adds	r2, r3, #2
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80067ee:	e077      	b.n	80068e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	121b      	asrs	r3, r3, #8
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800680a:	e069      	b.n	80068e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006810:	2b01      	cmp	r3, #1
 8006812:	d10b      	bne.n	800682c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006818:	b2da      	uxtb	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800682a:	e059      	b.n	80068e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006830:	2b02      	cmp	r3, #2
 8006832:	d152      	bne.n	80068da <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006834:	7bfb      	ldrb	r3, [r7, #15]
 8006836:	2b22      	cmp	r3, #34	@ 0x22
 8006838:	d10d      	bne.n	8006856 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006848:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006854:	e044      	b.n	80068e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800685a:	b29b      	uxth	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d015      	beq.n	800688c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	2b21      	cmp	r3, #33	@ 0x21
 8006864:	d112      	bne.n	800688c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686a:	781a      	ldrb	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006880:	b29b      	uxth	r3, r3
 8006882:	3b01      	subs	r3, #1
 8006884:	b29a      	uxth	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800688a:	e029      	b.n	80068e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d124      	bne.n	80068e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	2b21      	cmp	r3, #33	@ 0x21
 800689a:	d121      	bne.n	80068e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80068aa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7ff fe40 	bl	8006558 <HAL_I2C_MemTxCpltCallback>
}
 80068d8:	e002      	b.n	80068e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff f8b2 	bl	8005a44 <I2C_Flush_DR>
}
 80068e0:	bf00      	nop
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b22      	cmp	r3, #34	@ 0x22
 80068fa:	f040 80b9 	bne.w	8006a70 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006902:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006908:	b29b      	uxth	r3, r3
 800690a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2b03      	cmp	r3, #3
 8006910:	d921      	bls.n	8006956 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691a      	ldr	r2, [r3, #16]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800692e:	b29b      	uxth	r3, r3
 8006930:	3b01      	subs	r3, #1
 8006932:	b29a      	uxth	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b03      	cmp	r3, #3
 8006940:	f040 8096 	bne.w	8006a70 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006952:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006954:	e08c      	b.n	8006a70 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695a:	2b02      	cmp	r3, #2
 800695c:	d07f      	beq.n	8006a5e <I2C_MasterReceive_RXNE+0x176>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d002      	beq.n	800696a <I2C_MasterReceive_RXNE+0x82>
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d179      	bne.n	8006a5e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 fb86 	bl	800807c <I2C_WaitOnSTOPRequestThroughIT>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d14c      	bne.n	8006a10 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006984:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006994:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	691a      	ldr	r2, [r3, #16]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a0:	b2d2      	uxtb	r2, r2
 80069a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b40      	cmp	r3, #64	@ 0x40
 80069ce:	d10a      	bne.n	80069e6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7ff fdc4 	bl	800656c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80069e4:	e044      	b.n	8006a70 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d002      	beq.n	80069fa <I2C_MasterReceive_RXNE+0x112>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b20      	cmp	r3, #32
 80069f8:	d103      	bne.n	8006a02 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a00:	e002      	b.n	8006a08 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2212      	movs	r2, #18
 8006a06:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7fc f88b 	bl	8002b24 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006a0e:	e02f      	b.n	8006a70 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006a1e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691a      	ldr	r2, [r3, #16]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7fc f89a 	bl	8002b90 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006a5c:	e008      	b.n	8006a70 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a6c:	605a      	str	r2, [r3, #4]
}
 8006a6e:	e7ff      	b.n	8006a70 <I2C_MasterReceive_RXNE+0x188>
 8006a70:	bf00      	nop
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a84:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	d11b      	bne.n	8006ac8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a9e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691a      	ldr	r2, [r3, #16]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006ac6:	e0c8      	b.n	8006c5a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d129      	bne.n	8006b26 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ae0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d00a      	beq.n	8006afe <I2C_MasterReceive_BTF+0x86>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d007      	beq.n	8006afe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006afc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	691a      	ldr	r2, [r3, #16]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006b24:	e099      	b.n	8006c5a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	f040 8081 	bne.w	8006c34 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d002      	beq.n	8006b3e <I2C_MasterReceive_BTF+0xc6>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2b10      	cmp	r3, #16
 8006b3c:	d108      	bne.n	8006b50 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	e019      	b.n	8006b84 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	d002      	beq.n	8006b5c <I2C_MasterReceive_BTF+0xe4>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d108      	bne.n	8006b6e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	e00a      	b.n	8006b84 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b10      	cmp	r3, #16
 8006b72:	d007      	beq.n	8006b84 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b82:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	691a      	ldr	r2, [r3, #16]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	691a      	ldr	r2, [r3, #16]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb4:	b2d2      	uxtb	r2, r2
 8006bb6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bbc:	1c5a      	adds	r2, r3, #1
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006bde:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2220      	movs	r2, #32
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b40      	cmp	r3, #64	@ 0x40
 8006bf2:	d10a      	bne.n	8006c0a <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff fcb2 	bl	800656c <HAL_I2C_MemRxCpltCallback>
}
 8006c08:	e027      	b.n	8006c5a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d002      	beq.n	8006c1e <I2C_MasterReceive_BTF+0x1a6>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b20      	cmp	r3, #32
 8006c1c:	d103      	bne.n	8006c26 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c24:	e002      	b.n	8006c2c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2212      	movs	r2, #18
 8006c2a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7fb ff79 	bl	8002b24 <HAL_I2C_MasterRxCpltCallback>
}
 8006c32:	e012      	b.n	8006c5a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691a      	ldr	r2, [r3, #16]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006c5a:	bf00      	nop
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b40      	cmp	r3, #64	@ 0x40
 8006c74:	d117      	bne.n	8006ca6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d109      	bne.n	8006c92 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006c8e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006c90:	e067      	b.n	8006d62 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	f043 0301 	orr.w	r3, r3, #1
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	611a      	str	r2, [r3, #16]
}
 8006ca4:	e05d      	b.n	8006d62 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cae:	d133      	bne.n	8006d18 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b21      	cmp	r3, #33	@ 0x21
 8006cba:	d109      	bne.n	8006cd0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ccc:	611a      	str	r2, [r3, #16]
 8006cce:	e008      	b.n	8006ce2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	f043 0301 	orr.w	r3, r3, #1
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d004      	beq.n	8006cf4 <I2C_Master_SB+0x92>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d108      	bne.n	8006d06 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d032      	beq.n	8006d62 <I2C_Master_SB+0x100>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d02d      	beq.n	8006d62 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d14:	605a      	str	r2, [r3, #4]
}
 8006d16:	e024      	b.n	8006d62 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10e      	bne.n	8006d3e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	11db      	asrs	r3, r3, #7
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	f003 0306 	and.w	r3, r3, #6
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	f063 030f 	orn	r3, r3, #15
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	611a      	str	r2, [r3, #16]
}
 8006d3c:	e011      	b.n	8006d62 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d10d      	bne.n	8006d62 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	11db      	asrs	r3, r3, #7
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	f003 0306 	and.w	r3, r3, #6
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	f063 030e 	orn	r3, r3, #14
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	611a      	str	r2, [r3, #16]
}
 8006d62:	bf00      	nop
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b083      	sub	sp, #12
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d004      	beq.n	8006d94 <I2C_Master_ADD10+0x26>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d108      	bne.n	8006da6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00c      	beq.n	8006db6 <I2C_Master_ADD10+0x48>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d007      	beq.n	8006db6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006db4:	605a      	str	r2, [r3, #4]
  }
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b091      	sub	sp, #68	@ 0x44
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006dd0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dde:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b22      	cmp	r3, #34	@ 0x22
 8006dea:	f040 8169 	bne.w	80070c0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10f      	bne.n	8006e16 <I2C_Master_ADDR+0x54>
 8006df6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006dfa:	2b40      	cmp	r3, #64	@ 0x40
 8006dfc:	d10b      	bne.n	8006e16 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dfe:	2300      	movs	r3, #0
 8006e00:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e14:	e160      	b.n	80070d8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d11d      	bne.n	8006e5a <I2C_Master_ADDR+0x98>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006e26:	d118      	bne.n	8006e5a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e28:	2300      	movs	r3, #0
 8006e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e4c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	651a      	str	r2, [r3, #80]	@ 0x50
 8006e58:	e13e      	b.n	80070d8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d113      	bne.n	8006e8c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e64:	2300      	movs	r3, #0
 8006e66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	e115      	b.n	80070b8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	f040 808a 	bne.w	8006fac <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e9e:	d137      	bne.n	8006f10 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eae:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006eba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ebe:	d113      	bne.n	8006ee8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ece:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	e0e7      	b.n	80070b8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ee8:	2300      	movs	r3, #0
 8006eea:	623b      	str	r3, [r7, #32]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	623b      	str	r3, [r7, #32]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	623b      	str	r3, [r7, #32]
 8006efc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	e0d3      	b.n	80070b8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f12:	2b08      	cmp	r3, #8
 8006f14:	d02e      	beq.n	8006f74 <I2C_Master_ADDR+0x1b2>
 8006f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d02b      	beq.n	8006f74 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f1e:	2b12      	cmp	r3, #18
 8006f20:	d102      	bne.n	8006f28 <I2C_Master_ADDR+0x166>
 8006f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d125      	bne.n	8006f74 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d00e      	beq.n	8006f4c <I2C_Master_ADDR+0x18a>
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d00b      	beq.n	8006f4c <I2C_Master_ADDR+0x18a>
 8006f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f36:	2b10      	cmp	r3, #16
 8006f38:	d008      	beq.n	8006f4c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	e007      	b.n	8006f5c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f5a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	61fb      	str	r3, [r7, #28]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	61fb      	str	r3, [r7, #28]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	e0a1      	b.n	80070b8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f82:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f84:	2300      	movs	r3, #0
 8006f86:	61bb      	str	r3, [r7, #24]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	61bb      	str	r3, [r7, #24]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	61bb      	str	r3, [r7, #24]
 8006f98:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	e085      	b.n	80070b8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d14d      	bne.n	8007052 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d016      	beq.n	8006fea <I2C_Master_ADDR+0x228>
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d013      	beq.n	8006fea <I2C_Master_ADDR+0x228>
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc4:	2b10      	cmp	r3, #16
 8006fc6:	d010      	beq.n	8006fea <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fd6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	e007      	b.n	8006ffa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ff8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007004:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007008:	d117      	bne.n	800703a <I2C_Master_ADDR+0x278>
 800700a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007010:	d00b      	beq.n	800702a <I2C_Master_ADDR+0x268>
 8007012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007014:	2b01      	cmp	r3, #1
 8007016:	d008      	beq.n	800702a <I2C_Master_ADDR+0x268>
 8007018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701a:	2b08      	cmp	r3, #8
 800701c:	d005      	beq.n	800702a <I2C_Master_ADDR+0x268>
 800701e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007020:	2b10      	cmp	r3, #16
 8007022:	d002      	beq.n	800702a <I2C_Master_ADDR+0x268>
 8007024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007026:	2b20      	cmp	r3, #32
 8007028:	d107      	bne.n	800703a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007038:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800703a:	2300      	movs	r3, #0
 800703c:	617b      	str	r3, [r7, #20]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	617b      	str	r3, [r7, #20]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	617b      	str	r3, [r7, #20]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	e032      	b.n	80070b8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007060:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800706c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007070:	d117      	bne.n	80070a2 <I2C_Master_ADDR+0x2e0>
 8007072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007074:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007078:	d00b      	beq.n	8007092 <I2C_Master_ADDR+0x2d0>
 800707a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707c:	2b01      	cmp	r3, #1
 800707e:	d008      	beq.n	8007092 <I2C_Master_ADDR+0x2d0>
 8007080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007082:	2b08      	cmp	r3, #8
 8007084:	d005      	beq.n	8007092 <I2C_Master_ADDR+0x2d0>
 8007086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007088:	2b10      	cmp	r3, #16
 800708a:	d002      	beq.n	8007092 <I2C_Master_ADDR+0x2d0>
 800708c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708e:	2b20      	cmp	r3, #32
 8007090:	d107      	bne.n	80070a2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070a0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070a2:	2300      	movs	r3, #0
 80070a4:	613b      	str	r3, [r7, #16]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	613b      	str	r3, [r7, #16]
 80070b6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80070be:	e00b      	b.n	80070d8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070c0:	2300      	movs	r3, #0
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	68fb      	ldr	r3, [r7, #12]
}
 80070d6:	e7ff      	b.n	80070d8 <I2C_Master_ADDR+0x316>
 80070d8:	bf00      	nop
 80070da:	3744      	adds	r7, #68	@ 0x44
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d02b      	beq.n	8007156 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007102:	781a      	ldrb	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007118:	b29b      	uxth	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	b29a      	uxth	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007126:	b29b      	uxth	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	d114      	bne.n	8007156 <I2C_SlaveTransmit_TXE+0x72>
 800712c:	7bfb      	ldrb	r3, [r7, #15]
 800712e:	2b29      	cmp	r3, #41	@ 0x29
 8007130:	d111      	bne.n	8007156 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007140:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2221      	movs	r2, #33	@ 0x21
 8007146:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2228      	movs	r2, #40	@ 0x28
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff f9d5 	bl	8006500 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007156:	bf00      	nop
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d011      	beq.n	8007194 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007174:	781a      	ldrb	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d02c      	beq.n	8007214 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	691a      	ldr	r2, [r3, #16]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c4:	b2d2      	uxtb	r2, r2
 80071c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	3b01      	subs	r3, #1
 80071da:	b29a      	uxth	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d114      	bne.n	8007214 <I2C_SlaveReceive_RXNE+0x74>
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80071ee:	d111      	bne.n	8007214 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071fe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2222      	movs	r2, #34	@ 0x22
 8007204:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2228      	movs	r2, #40	@ 0x28
 800720a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff f980 	bl	8006514 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007228:	b29b      	uxth	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d012      	beq.n	8007254 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	691a      	ldr	r2, [r3, #16]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007274:	b2db      	uxtb	r3, r3
 8007276:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800727a:	2b28      	cmp	r3, #40	@ 0x28
 800727c:	d125      	bne.n	80072ca <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800728c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007298:	2301      	movs	r3, #1
 800729a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d103      	bne.n	80072ae <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	81bb      	strh	r3, [r7, #12]
 80072ac:	e002      	b.n	80072b4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80072bc:	89ba      	ldrh	r2, [r7, #12]
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7ff f930 	bl	8006528 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80072c8:	e00e      	b.n	80072e8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072ca:	2300      	movs	r3, #0
 80072cc:	60bb      	str	r3, [r7, #8]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	60bb      	str	r3, [r7, #8]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	60bb      	str	r3, [r7, #8]
 80072de:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80072e8:	bf00      	nop
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800730e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007310:	2300      	movs	r3, #0
 8007312:	60bb      	str	r3, [r7, #8]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	60bb      	str	r3, [r7, #8]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0201 	orr.w	r2, r2, #1
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800733c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007348:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800734c:	d172      	bne.n	8007434 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	2b22      	cmp	r3, #34	@ 0x22
 8007352:	d002      	beq.n	800735a <I2C_Slave_STOPF+0x6a>
 8007354:	7bfb      	ldrb	r3, [r7, #15]
 8007356:	2b2a      	cmp	r3, #42	@ 0x2a
 8007358:	d135      	bne.n	80073c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	b29a      	uxth	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800736c:	b29b      	uxth	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d005      	beq.n	800737e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007376:	f043 0204 	orr.w	r2, r3, #4
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800738c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007392:	4618      	mov	r0, r3
 8007394:	f7fd ff62 	bl	800525c <HAL_DMA_GetState>
 8007398:	4603      	mov	r3, r0
 800739a:	2b01      	cmp	r3, #1
 800739c:	d049      	beq.n	8007432 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a2:	4a69      	ldr	r2, [pc, #420]	@ (8007548 <I2C_Slave_STOPF+0x258>)
 80073a4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fd fdaa 	bl	8004f04 <HAL_DMA_Abort_IT>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d03d      	beq.n	8007432 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80073c0:	4610      	mov	r0, r2
 80073c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80073c4:	e035      	b.n	8007432 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073d8:	b29b      	uxth	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e2:	f043 0204 	orr.w	r2, r3, #4
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fd ff2c 	bl	800525c <HAL_DMA_GetState>
 8007404:	4603      	mov	r3, r0
 8007406:	2b01      	cmp	r3, #1
 8007408:	d014      	beq.n	8007434 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800740e:	4a4e      	ldr	r2, [pc, #312]	@ (8007548 <I2C_Slave_STOPF+0x258>)
 8007410:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007416:	4618      	mov	r0, r3
 8007418:	f7fd fd74 	bl	8004f04 <HAL_DMA_Abort_IT>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d008      	beq.n	8007434 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800742c:	4610      	mov	r0, r2
 800742e:	4798      	blx	r3
 8007430:	e000      	b.n	8007434 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007432:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007438:	b29b      	uxth	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d03e      	beq.n	80074bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b04      	cmp	r3, #4
 800744a:	d112      	bne.n	8007472 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	691a      	ldr	r2, [r3, #16]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007456:	b2d2      	uxtb	r2, r2
 8007458:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007468:	b29b      	uxth	r3, r3
 800746a:	3b01      	subs	r3, #1
 800746c:	b29a      	uxth	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800747c:	2b40      	cmp	r3, #64	@ 0x40
 800747e:	d112      	bne.n	80074a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	691a      	ldr	r2, [r3, #16]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d005      	beq.n	80074bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b4:	f043 0204 	orr.w	r2, r3, #4
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f8b7 	bl	8007638 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80074ca:	e039      	b.n	8007540 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80074d0:	d109      	bne.n	80074e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2228      	movs	r2, #40	@ 0x28
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7ff f817 	bl	8006514 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b28      	cmp	r3, #40	@ 0x28
 80074f0:	d111      	bne.n	8007516 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a15      	ldr	r2, [pc, #84]	@ (800754c <I2C_Slave_STOPF+0x25c>)
 80074f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2220      	movs	r2, #32
 8007502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff f818 	bl	8006544 <HAL_I2C_ListenCpltCallback>
}
 8007514:	e014      	b.n	8007540 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751a:	2b22      	cmp	r3, #34	@ 0x22
 800751c:	d002      	beq.n	8007524 <I2C_Slave_STOPF+0x234>
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	2b22      	cmp	r3, #34	@ 0x22
 8007522:	d10d      	bne.n	8007540 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2220      	movs	r2, #32
 800752e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7fe ffea 	bl	8006514 <HAL_I2C_SlaveRxCpltCallback>
}
 8007540:	bf00      	nop
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	08007bd9 	.word	0x08007bd9
 800754c:	ffff0000 	.word	0xffff0000

08007550 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800755e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007564:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2b08      	cmp	r3, #8
 800756a:	d002      	beq.n	8007572 <I2C_Slave_AF+0x22>
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2b20      	cmp	r3, #32
 8007570:	d129      	bne.n	80075c6 <I2C_Slave_AF+0x76>
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	2b28      	cmp	r3, #40	@ 0x28
 8007576:	d126      	bne.n	80075c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a2e      	ldr	r2, [pc, #184]	@ (8007634 <I2C_Slave_AF+0xe4>)
 800757c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800758c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007596:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7fe ffc0 	bl	8006544 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80075c4:	e031      	b.n	800762a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	2b21      	cmp	r3, #33	@ 0x21
 80075ca:	d129      	bne.n	8007620 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a19      	ldr	r2, [pc, #100]	@ (8007634 <I2C_Slave_AF+0xe4>)
 80075d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2221      	movs	r2, #33	@ 0x21
 80075d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80075f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007600:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007610:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7fe fa16 	bl	8005a44 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7fe ff71 	bl	8006500 <HAL_I2C_SlaveTxCpltCallback>
}
 800761e:	e004      	b.n	800762a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007628:	615a      	str	r2, [r3, #20]
}
 800762a:	bf00      	nop
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	ffff0000 	.word	0xffff0000

08007638 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007646:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800764e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007650:	7bbb      	ldrb	r3, [r7, #14]
 8007652:	2b10      	cmp	r3, #16
 8007654:	d002      	beq.n	800765c <I2C_ITError+0x24>
 8007656:	7bbb      	ldrb	r3, [r7, #14]
 8007658:	2b40      	cmp	r3, #64	@ 0x40
 800765a:	d10a      	bne.n	8007672 <I2C_ITError+0x3a>
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	2b22      	cmp	r3, #34	@ 0x22
 8007660:	d107      	bne.n	8007672 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007670:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007672:	7bfb      	ldrb	r3, [r7, #15]
 8007674:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007678:	2b28      	cmp	r3, #40	@ 0x28
 800767a:	d107      	bne.n	800768c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2228      	movs	r2, #40	@ 0x28
 8007686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800768a:	e015      	b.n	80076b8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007696:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800769a:	d00a      	beq.n	80076b2 <I2C_ITError+0x7a>
 800769c:	7bfb      	ldrb	r3, [r7, #15]
 800769e:	2b60      	cmp	r3, #96	@ 0x60
 80076a0:	d007      	beq.n	80076b2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076c6:	d162      	bne.n	800778e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076d6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d020      	beq.n	8007728 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ea:	4a6a      	ldr	r2, [pc, #424]	@ (8007894 <I2C_ITError+0x25c>)
 80076ec:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fd fc06 	bl	8004f04 <HAL_DMA_Abort_IT>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 8089 	beq.w	8007812 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f022 0201 	bic.w	r2, r2, #1
 800770e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2220      	movs	r2, #32
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800771c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007722:	4610      	mov	r0, r2
 8007724:	4798      	blx	r3
 8007726:	e074      	b.n	8007812 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800772c:	4a59      	ldr	r2, [pc, #356]	@ (8007894 <I2C_ITError+0x25c>)
 800772e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007734:	4618      	mov	r0, r3
 8007736:	f7fd fbe5 	bl	8004f04 <HAL_DMA_Abort_IT>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d068      	beq.n	8007812 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800774a:	2b40      	cmp	r3, #64	@ 0x40
 800774c:	d10b      	bne.n	8007766 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	691a      	ldr	r2, [r3, #16]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007758:	b2d2      	uxtb	r2, r2
 800775a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 0201 	bic.w	r2, r2, #1
 8007774:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2220      	movs	r2, #32
 800777a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007788:	4610      	mov	r0, r2
 800778a:	4798      	blx	r3
 800778c:	e041      	b.n	8007812 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b60      	cmp	r3, #96	@ 0x60
 8007798:	d125      	bne.n	80077e6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2220      	movs	r2, #32
 800779e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b2:	2b40      	cmp	r3, #64	@ 0x40
 80077b4:	d10b      	bne.n	80077ce <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	691a      	ldr	r2, [r3, #16]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c0:	b2d2      	uxtb	r2, r2
 80077c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 0201 	bic.w	r2, r2, #1
 80077dc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7fe fece 	bl	8006580 <HAL_I2C_AbortCpltCallback>
 80077e4:	e015      	b.n	8007812 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f0:	2b40      	cmp	r3, #64	@ 0x40
 80077f2:	d10b      	bne.n	800780c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	691a      	ldr	r2, [r3, #16]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7fb f9bf 	bl	8002b90 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007816:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10e      	bne.n	8007840 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007828:	2b00      	cmp	r3, #0
 800782a:	d109      	bne.n	8007840 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007832:	2b00      	cmp	r3, #0
 8007834:	d104      	bne.n	8007840 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800783c:	2b00      	cmp	r3, #0
 800783e:	d007      	beq.n	8007850 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800784e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007856:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785c:	f003 0304 	and.w	r3, r3, #4
 8007860:	2b04      	cmp	r3, #4
 8007862:	d113      	bne.n	800788c <I2C_ITError+0x254>
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	2b28      	cmp	r3, #40	@ 0x28
 8007868:	d110      	bne.n	800788c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a0a      	ldr	r2, [pc, #40]	@ (8007898 <I2C_ITError+0x260>)
 800786e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2220      	movs	r2, #32
 800787a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7fe fe5c 	bl	8006544 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800788c:	bf00      	nop
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	08007bd9 	.word	0x08007bd9
 8007898:	ffff0000 	.word	0xffff0000

0800789c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b088      	sub	sp, #32
 80078a0:	af02      	add	r7, sp, #8
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	607a      	str	r2, [r7, #4]
 80078a6:	603b      	str	r3, [r7, #0]
 80078a8:	460b      	mov	r3, r1
 80078aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d006      	beq.n	80078c6 <I2C_MasterRequestWrite+0x2a>
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d003      	beq.n	80078c6 <I2C_MasterRequestWrite+0x2a>
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80078c4:	d108      	bne.n	80078d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	e00b      	b.n	80078f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078dc:	2b12      	cmp	r3, #18
 80078de:	d107      	bne.n	80078f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 fa13 	bl	8007d28 <I2C_WaitOnFlagUntilTimeout>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00d      	beq.n	8007924 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007916:	d103      	bne.n	8007920 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800791e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e035      	b.n	8007990 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800792c:	d108      	bne.n	8007940 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800792e:	897b      	ldrh	r3, [r7, #10]
 8007930:	b2db      	uxtb	r3, r3
 8007932:	461a      	mov	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800793c:	611a      	str	r2, [r3, #16]
 800793e:	e01b      	b.n	8007978 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007940:	897b      	ldrh	r3, [r7, #10]
 8007942:	11db      	asrs	r3, r3, #7
 8007944:	b2db      	uxtb	r3, r3
 8007946:	f003 0306 	and.w	r3, r3, #6
 800794a:	b2db      	uxtb	r3, r3
 800794c:	f063 030f 	orn	r3, r3, #15
 8007950:	b2da      	uxtb	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	490e      	ldr	r1, [pc, #56]	@ (8007998 <I2C_MasterRequestWrite+0xfc>)
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 fa5c 	bl	8007e1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e010      	b.n	8007990 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800796e:	897b      	ldrh	r3, [r7, #10]
 8007970:	b2da      	uxtb	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	4907      	ldr	r1, [pc, #28]	@ (800799c <I2C_MasterRequestWrite+0x100>)
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f000 fa4c 	bl	8007e1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e000      	b.n	8007990 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	00010008 	.word	0x00010008
 800799c:	00010002 	.word	0x00010002

080079a0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079b4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079bc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80079d2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079e0:	2200      	movs	r2, #0
 80079e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f0:	2200      	movs	r2, #0
 80079f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80079f4:	7cfb      	ldrb	r3, [r7, #19]
 80079f6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80079fa:	2b21      	cmp	r3, #33	@ 0x21
 80079fc:	d007      	beq.n	8007a0e <I2C_DMAXferCplt+0x6e>
 80079fe:	7cfb      	ldrb	r3, [r7, #19]
 8007a00:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8007a04:	2b22      	cmp	r3, #34	@ 0x22
 8007a06:	d131      	bne.n	8007a6c <I2C_DMAXferCplt+0xcc>
 8007a08:	7cbb      	ldrb	r3, [r7, #18]
 8007a0a:	2b20      	cmp	r3, #32
 8007a0c:	d12e      	bne.n	8007a6c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a1c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2200      	movs	r2, #0
 8007a22:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007a24:	7cfb      	ldrb	r3, [r7, #19]
 8007a26:	2b29      	cmp	r3, #41	@ 0x29
 8007a28:	d10a      	bne.n	8007a40 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2221      	movs	r2, #33	@ 0x21
 8007a2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	2228      	movs	r2, #40	@ 0x28
 8007a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a38:	6978      	ldr	r0, [r7, #20]
 8007a3a:	f7fe fd61 	bl	8006500 <HAL_I2C_SlaveTxCpltCallback>
 8007a3e:	e00c      	b.n	8007a5a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007a40:	7cfb      	ldrb	r3, [r7, #19]
 8007a42:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a44:	d109      	bne.n	8007a5a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2222      	movs	r2, #34	@ 0x22
 8007a4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	2228      	movs	r2, #40	@ 0x28
 8007a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a54:	6978      	ldr	r0, [r7, #20]
 8007a56:	f7fe fd5d 	bl	8006514 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007a68:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007a6a:	e074      	b.n	8007b56 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d06e      	beq.n	8007b56 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d107      	bne.n	8007a92 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a90:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007aa0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007aa8:	d009      	beq.n	8007abe <I2C_DMAXferCplt+0x11e>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d006      	beq.n	8007abe <I2C_DMAXferCplt+0x11e>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007ab6:	d002      	beq.n	8007abe <I2C_DMAXferCplt+0x11e>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2b20      	cmp	r3, #32
 8007abc:	d107      	bne.n	8007ace <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007acc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007adc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007aec:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	2200      	movs	r2, #0
 8007af2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8007afc:	6978      	ldr	r0, [r7, #20]
 8007afe:	f7fb f847 	bl	8002b90 <HAL_I2C_ErrorCallback>
}
 8007b02:	e028      	b.n	8007b56 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	2220      	movs	r2, #32
 8007b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b40      	cmp	r3, #64	@ 0x40
 8007b16:	d10a      	bne.n	8007b2e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	2200      	movs	r2, #0
 8007b24:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007b26:	6978      	ldr	r0, [r7, #20]
 8007b28:	f7fe fd20 	bl	800656c <HAL_I2C_MemRxCpltCallback>
}
 8007b2c:	e013      	b.n	8007b56 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d002      	beq.n	8007b42 <I2C_DMAXferCplt+0x1a2>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	d103      	bne.n	8007b4a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2200      	movs	r2, #0
 8007b46:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b48:	e002      	b.n	8007b50 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2212      	movs	r2, #18
 8007b4e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007b50:	6978      	ldr	r0, [r7, #20]
 8007b52:	f7fa ffe7 	bl	8002b24 <HAL_I2C_MasterRxCpltCallback>
}
 8007b56:	bf00      	nop
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b084      	sub	sp, #16
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b78:	2200      	movs	r2, #0
 8007b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b88:	2200      	movs	r2, #0
 8007b8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7fd fb73 	bl	8005278 <HAL_DMA_GetError>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d01b      	beq.n	8007bd0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ba6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc2:	f043 0210 	orr.w	r2, r3, #16
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f7fa ffe0 	bl	8002b90 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bf0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007bf2:	4b4b      	ldr	r3, [pc, #300]	@ (8007d20 <I2C_DMAAbort+0x148>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	08db      	lsrs	r3, r3, #3
 8007bf8:	4a4a      	ldr	r2, [pc, #296]	@ (8007d24 <I2C_DMAAbort+0x14c>)
 8007bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007bfe:	0a1a      	lsrs	r2, r3, #8
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	00da      	lsls	r2, r3, #3
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d106      	bne.n	8007c20 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c16:	f043 0220 	orr.w	r2, r3, #32
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8007c1e:	e00a      	b.n	8007c36 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3b01      	subs	r3, #1
 8007c24:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c34:	d0ea      	beq.n	8007c0c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c42:	2200      	movs	r2, #0
 8007c44:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c52:	2200      	movs	r2, #0
 8007c54:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c64:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c78:	2200      	movs	r2, #0
 8007c7a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c88:	2200      	movs	r2, #0
 8007c8a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 0201 	bic.w	r2, r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b60      	cmp	r3, #96	@ 0x60
 8007ca6:	d10e      	bne.n	8007cc6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007cbe:	6978      	ldr	r0, [r7, #20]
 8007cc0:	f7fe fc5e 	bl	8006580 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007cc4:	e027      	b.n	8007d16 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007cc6:	7cfb      	ldrb	r3, [r7, #19]
 8007cc8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007ccc:	2b28      	cmp	r3, #40	@ 0x28
 8007cce:	d117      	bne.n	8007d00 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0201 	orr.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007cee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2228      	movs	r2, #40	@ 0x28
 8007cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007cfe:	e007      	b.n	8007d10 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	2220      	movs	r2, #32
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007d10:	6978      	ldr	r0, [r7, #20]
 8007d12:	f7fa ff3d 	bl	8002b90 <HAL_I2C_ErrorCallback>
}
 8007d16:	bf00      	nop
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	20000030 	.word	0x20000030
 8007d24:	14f8b589 	.word	0x14f8b589

08007d28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	603b      	str	r3, [r7, #0]
 8007d34:	4613      	mov	r3, r2
 8007d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d38:	e048      	b.n	8007dcc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d40:	d044      	beq.n	8007dcc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d42:	f7fc fb81 	bl	8004448 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d302      	bcc.n	8007d58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d139      	bne.n	8007dcc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	0c1b      	lsrs	r3, r3, #16
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d10d      	bne.n	8007d7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	43da      	mvns	r2, r3
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	bf0c      	ite	eq
 8007d74:	2301      	moveq	r3, #1
 8007d76:	2300      	movne	r3, #0
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	e00c      	b.n	8007d98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	43da      	mvns	r2, r3
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	4013      	ands	r3, r2
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	bf0c      	ite	eq
 8007d90:	2301      	moveq	r3, #1
 8007d92:	2300      	movne	r3, #0
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	461a      	mov	r2, r3
 8007d98:	79fb      	ldrb	r3, [r7, #7]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d116      	bne.n	8007dcc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2220      	movs	r2, #32
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db8:	f043 0220 	orr.w	r2, r3, #32
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e023      	b.n	8007e14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	0c1b      	lsrs	r3, r3, #16
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d10d      	bne.n	8007df2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	43da      	mvns	r2, r3
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	4013      	ands	r3, r2
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	bf0c      	ite	eq
 8007de8:	2301      	moveq	r3, #1
 8007dea:	2300      	movne	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	461a      	mov	r2, r3
 8007df0:	e00c      	b.n	8007e0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	43da      	mvns	r2, r3
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	bf0c      	ite	eq
 8007e04:	2301      	moveq	r3, #1
 8007e06:	2300      	movne	r3, #0
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d093      	beq.n	8007d3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007e2a:	e071      	b.n	8007f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e3a:	d123      	bne.n	8007e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007e54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2220      	movs	r2, #32
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e70:	f043 0204 	orr.w	r2, r3, #4
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e067      	b.n	8007f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8a:	d041      	beq.n	8007f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e8c:	f7fc fadc 	bl	8004448 <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d302      	bcc.n	8007ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d136      	bne.n	8007f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	0c1b      	lsrs	r3, r3, #16
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d10c      	bne.n	8007ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	43da      	mvns	r2, r3
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	bf14      	ite	ne
 8007ebe:	2301      	movne	r3, #1
 8007ec0:	2300      	moveq	r3, #0
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	e00b      	b.n	8007ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	43da      	mvns	r2, r3
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	bf14      	ite	ne
 8007ed8:	2301      	movne	r3, #1
 8007eda:	2300      	moveq	r3, #0
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d016      	beq.n	8007f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2220      	movs	r2, #32
 8007eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007efc:	f043 0220 	orr.w	r2, r3, #32
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e021      	b.n	8007f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	0c1b      	lsrs	r3, r3, #16
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d10c      	bne.n	8007f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	43da      	mvns	r2, r3
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	4013      	ands	r3, r2
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	bf14      	ite	ne
 8007f2c:	2301      	movne	r3, #1
 8007f2e:	2300      	moveq	r3, #0
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	e00b      	b.n	8007f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	43da      	mvns	r2, r3
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	4013      	ands	r3, r2
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	bf14      	ite	ne
 8007f46:	2301      	movne	r3, #1
 8007f48:	2300      	moveq	r3, #0
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f47f af6d 	bne.w	8007e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f68:	e034      	b.n	8007fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f000 f8b8 	bl	80080e0 <I2C_IsAcknowledgeFailed>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e034      	b.n	8007fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f80:	d028      	beq.n	8007fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f82:	f7fc fa61 	bl	8004448 <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d302      	bcc.n	8007f98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d11d      	bne.n	8007fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fa2:	2b80      	cmp	r3, #128	@ 0x80
 8007fa4:	d016      	beq.n	8007fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc0:	f043 0220 	orr.w	r2, r3, #32
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e007      	b.n	8007fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fde:	2b80      	cmp	r3, #128	@ 0x80
 8007fe0:	d1c3      	bne.n	8007f6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ff8:	e034      	b.n	8008064 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 f870 	bl	80080e0 <I2C_IsAcknowledgeFailed>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e034      	b.n	8008074 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008010:	d028      	beq.n	8008064 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008012:	f7fc fa19 	bl	8004448 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	429a      	cmp	r2, r3
 8008020:	d302      	bcc.n	8008028 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d11d      	bne.n	8008064 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	f003 0304 	and.w	r3, r3, #4
 8008032:	2b04      	cmp	r3, #4
 8008034:	d016      	beq.n	8008064 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2220      	movs	r2, #32
 8008040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008050:	f043 0220 	orr.w	r2, r3, #32
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e007      	b.n	8008074 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	f003 0304 	and.w	r3, r3, #4
 800806e:	2b04      	cmp	r3, #4
 8008070:	d1c3      	bne.n	8007ffa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008088:	4b13      	ldr	r3, [pc, #76]	@ (80080d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	08db      	lsrs	r3, r3, #3
 800808e:	4a13      	ldr	r2, [pc, #76]	@ (80080dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008090:	fba2 2303 	umull	r2, r3, r2, r3
 8008094:	0a1a      	lsrs	r2, r3, #8
 8008096:	4613      	mov	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d107      	bne.n	80080ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ae:	f043 0220 	orr.w	r2, r3, #32
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e008      	b.n	80080cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080c8:	d0e9      	beq.n	800809e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	20000030 	.word	0x20000030
 80080dc:	14f8b589 	.word	0x14f8b589

080080e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080f6:	d11b      	bne.n	8008130 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008100:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2220      	movs	r2, #32
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800811c:	f043 0204 	orr.w	r2, r3, #4
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e000      	b.n	8008132 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	370c      	adds	r7, #12
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800813e:	b480      	push	{r7}
 8008140:	b083      	sub	sp, #12
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800814e:	d103      	bne.n	8008158 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008156:	e007      	b.n	8008168 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008160:	d102      	bne.n	8008168 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2208      	movs	r2, #8
 8008166:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800817a:	4b06      	ldr	r3, [pc, #24]	@ (8008194 <HAL_PWR_EnableBkUpAccess+0x20>)
 800817c:	2201      	movs	r2, #1
 800817e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008180:	4b05      	ldr	r3, [pc, #20]	@ (8008198 <HAL_PWR_EnableBkUpAccess+0x24>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008186:	687b      	ldr	r3, [r7, #4]
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr
 8008194:	420e0020 	.word	0x420e0020
 8008198:	40007000 	.word	0x40007000

0800819c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e267      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d075      	beq.n	80082a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80081ba:	4b88      	ldr	r3, [pc, #544]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f003 030c 	and.w	r3, r3, #12
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d00c      	beq.n	80081e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081c6:	4b85      	ldr	r3, [pc, #532]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80081ce:	2b08      	cmp	r3, #8
 80081d0:	d112      	bne.n	80081f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081d2:	4b82      	ldr	r3, [pc, #520]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081de:	d10b      	bne.n	80081f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081e0:	4b7e      	ldr	r3, [pc, #504]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d05b      	beq.n	80082a4 <HAL_RCC_OscConfig+0x108>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d157      	bne.n	80082a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e242      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008200:	d106      	bne.n	8008210 <HAL_RCC_OscConfig+0x74>
 8008202:	4b76      	ldr	r3, [pc, #472]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a75      	ldr	r2, [pc, #468]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 8008208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800820c:	6013      	str	r3, [r2, #0]
 800820e:	e01d      	b.n	800824c <HAL_RCC_OscConfig+0xb0>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008218:	d10c      	bne.n	8008234 <HAL_RCC_OscConfig+0x98>
 800821a:	4b70      	ldr	r3, [pc, #448]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a6f      	ldr	r2, [pc, #444]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 8008220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008224:	6013      	str	r3, [r2, #0]
 8008226:	4b6d      	ldr	r3, [pc, #436]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a6c      	ldr	r2, [pc, #432]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 800822c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	e00b      	b.n	800824c <HAL_RCC_OscConfig+0xb0>
 8008234:	4b69      	ldr	r3, [pc, #420]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a68      	ldr	r2, [pc, #416]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 800823a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800823e:	6013      	str	r3, [r2, #0]
 8008240:	4b66      	ldr	r3, [pc, #408]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a65      	ldr	r2, [pc, #404]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 8008246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800824a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d013      	beq.n	800827c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008254:	f7fc f8f8 	bl	8004448 <HAL_GetTick>
 8008258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800825a:	e008      	b.n	800826e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800825c:	f7fc f8f4 	bl	8004448 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b64      	cmp	r3, #100	@ 0x64
 8008268:	d901      	bls.n	800826e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e207      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800826e:	4b5b      	ldr	r3, [pc, #364]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d0f0      	beq.n	800825c <HAL_RCC_OscConfig+0xc0>
 800827a:	e014      	b.n	80082a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800827c:	f7fc f8e4 	bl	8004448 <HAL_GetTick>
 8008280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008282:	e008      	b.n	8008296 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008284:	f7fc f8e0 	bl	8004448 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	2b64      	cmp	r3, #100	@ 0x64
 8008290:	d901      	bls.n	8008296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e1f3      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008296:	4b51      	ldr	r3, [pc, #324]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1f0      	bne.n	8008284 <HAL_RCC_OscConfig+0xe8>
 80082a2:	e000      	b.n	80082a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d063      	beq.n	800837a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80082b2:	4b4a      	ldr	r3, [pc, #296]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f003 030c 	and.w	r3, r3, #12
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00b      	beq.n	80082d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082be:	4b47      	ldr	r3, [pc, #284]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80082c6:	2b08      	cmp	r3, #8
 80082c8:	d11c      	bne.n	8008304 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082ca:	4b44      	ldr	r3, [pc, #272]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d116      	bne.n	8008304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082d6:	4b41      	ldr	r3, [pc, #260]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d005      	beq.n	80082ee <HAL_RCC_OscConfig+0x152>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d001      	beq.n	80082ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e1c7      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082ee:	4b3b      	ldr	r3, [pc, #236]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	4937      	ldr	r1, [pc, #220]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008302:	e03a      	b.n	800837a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d020      	beq.n	800834e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800830c:	4b34      	ldr	r3, [pc, #208]	@ (80083e0 <HAL_RCC_OscConfig+0x244>)
 800830e:	2201      	movs	r2, #1
 8008310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008312:	f7fc f899 	bl	8004448 <HAL_GetTick>
 8008316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008318:	e008      	b.n	800832c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800831a:	f7fc f895 	bl	8004448 <HAL_GetTick>
 800831e:	4602      	mov	r2, r0
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	2b02      	cmp	r3, #2
 8008326:	d901      	bls.n	800832c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e1a8      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800832c:	4b2b      	ldr	r3, [pc, #172]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d0f0      	beq.n	800831a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008338:	4b28      	ldr	r3, [pc, #160]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	4925      	ldr	r1, [pc, #148]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 8008348:	4313      	orrs	r3, r2
 800834a:	600b      	str	r3, [r1, #0]
 800834c:	e015      	b.n	800837a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800834e:	4b24      	ldr	r3, [pc, #144]	@ (80083e0 <HAL_RCC_OscConfig+0x244>)
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008354:	f7fc f878 	bl	8004448 <HAL_GetTick>
 8008358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800835a:	e008      	b.n	800836e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800835c:	f7fc f874 	bl	8004448 <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	2b02      	cmp	r3, #2
 8008368:	d901      	bls.n	800836e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e187      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800836e:	4b1b      	ldr	r3, [pc, #108]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0302 	and.w	r3, r3, #2
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1f0      	bne.n	800835c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0308 	and.w	r3, r3, #8
 8008382:	2b00      	cmp	r3, #0
 8008384:	d036      	beq.n	80083f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d016      	beq.n	80083bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800838e:	4b15      	ldr	r3, [pc, #84]	@ (80083e4 <HAL_RCC_OscConfig+0x248>)
 8008390:	2201      	movs	r2, #1
 8008392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008394:	f7fc f858 	bl	8004448 <HAL_GetTick>
 8008398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800839a:	e008      	b.n	80083ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800839c:	f7fc f854 	bl	8004448 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d901      	bls.n	80083ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e167      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083ae:	4b0b      	ldr	r3, [pc, #44]	@ (80083dc <HAL_RCC_OscConfig+0x240>)
 80083b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0f0      	beq.n	800839c <HAL_RCC_OscConfig+0x200>
 80083ba:	e01b      	b.n	80083f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083bc:	4b09      	ldr	r3, [pc, #36]	@ (80083e4 <HAL_RCC_OscConfig+0x248>)
 80083be:	2200      	movs	r2, #0
 80083c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083c2:	f7fc f841 	bl	8004448 <HAL_GetTick>
 80083c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083c8:	e00e      	b.n	80083e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083ca:	f7fc f83d 	bl	8004448 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d907      	bls.n	80083e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e150      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
 80083dc:	40023800 	.word	0x40023800
 80083e0:	42470000 	.word	0x42470000
 80083e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083e8:	4b88      	ldr	r3, [pc, #544]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 80083ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083ec:	f003 0302 	and.w	r3, r3, #2
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1ea      	bne.n	80083ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 8097 	beq.w	8008530 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008402:	2300      	movs	r3, #0
 8008404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008406:	4b81      	ldr	r3, [pc, #516]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 8008408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10f      	bne.n	8008432 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008412:	2300      	movs	r3, #0
 8008414:	60bb      	str	r3, [r7, #8]
 8008416:	4b7d      	ldr	r3, [pc, #500]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 8008418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800841a:	4a7c      	ldr	r2, [pc, #496]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 800841c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008420:	6413      	str	r3, [r2, #64]	@ 0x40
 8008422:	4b7a      	ldr	r3, [pc, #488]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 8008424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800842a:	60bb      	str	r3, [r7, #8]
 800842c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800842e:	2301      	movs	r3, #1
 8008430:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008432:	4b77      	ldr	r3, [pc, #476]	@ (8008610 <HAL_RCC_OscConfig+0x474>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800843a:	2b00      	cmp	r3, #0
 800843c:	d118      	bne.n	8008470 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800843e:	4b74      	ldr	r3, [pc, #464]	@ (8008610 <HAL_RCC_OscConfig+0x474>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a73      	ldr	r2, [pc, #460]	@ (8008610 <HAL_RCC_OscConfig+0x474>)
 8008444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800844a:	f7fb fffd 	bl	8004448 <HAL_GetTick>
 800844e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008450:	e008      	b.n	8008464 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008452:	f7fb fff9 	bl	8004448 <HAL_GetTick>
 8008456:	4602      	mov	r2, r0
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	2b02      	cmp	r3, #2
 800845e:	d901      	bls.n	8008464 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e10c      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008464:	4b6a      	ldr	r3, [pc, #424]	@ (8008610 <HAL_RCC_OscConfig+0x474>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800846c:	2b00      	cmp	r3, #0
 800846e:	d0f0      	beq.n	8008452 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d106      	bne.n	8008486 <HAL_RCC_OscConfig+0x2ea>
 8008478:	4b64      	ldr	r3, [pc, #400]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 800847a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800847c:	4a63      	ldr	r2, [pc, #396]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 800847e:	f043 0301 	orr.w	r3, r3, #1
 8008482:	6713      	str	r3, [r2, #112]	@ 0x70
 8008484:	e01c      	b.n	80084c0 <HAL_RCC_OscConfig+0x324>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	2b05      	cmp	r3, #5
 800848c:	d10c      	bne.n	80084a8 <HAL_RCC_OscConfig+0x30c>
 800848e:	4b5f      	ldr	r3, [pc, #380]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 8008490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008492:	4a5e      	ldr	r2, [pc, #376]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 8008494:	f043 0304 	orr.w	r3, r3, #4
 8008498:	6713      	str	r3, [r2, #112]	@ 0x70
 800849a:	4b5c      	ldr	r3, [pc, #368]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 800849c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800849e:	4a5b      	ldr	r2, [pc, #364]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 80084a0:	f043 0301 	orr.w	r3, r3, #1
 80084a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80084a6:	e00b      	b.n	80084c0 <HAL_RCC_OscConfig+0x324>
 80084a8:	4b58      	ldr	r3, [pc, #352]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 80084aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ac:	4a57      	ldr	r2, [pc, #348]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 80084ae:	f023 0301 	bic.w	r3, r3, #1
 80084b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80084b4:	4b55      	ldr	r3, [pc, #340]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 80084b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084b8:	4a54      	ldr	r2, [pc, #336]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 80084ba:	f023 0304 	bic.w	r3, r3, #4
 80084be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d015      	beq.n	80084f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084c8:	f7fb ffbe 	bl	8004448 <HAL_GetTick>
 80084cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084ce:	e00a      	b.n	80084e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084d0:	f7fb ffba 	bl	8004448 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084de:	4293      	cmp	r3, r2
 80084e0:	d901      	bls.n	80084e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e0cb      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084e6:	4b49      	ldr	r3, [pc, #292]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 80084e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0ee      	beq.n	80084d0 <HAL_RCC_OscConfig+0x334>
 80084f2:	e014      	b.n	800851e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084f4:	f7fb ffa8 	bl	8004448 <HAL_GetTick>
 80084f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084fa:	e00a      	b.n	8008512 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084fc:	f7fb ffa4 	bl	8004448 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800850a:	4293      	cmp	r3, r2
 800850c:	d901      	bls.n	8008512 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e0b5      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008512:	4b3e      	ldr	r3, [pc, #248]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 8008514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008516:	f003 0302 	and.w	r3, r3, #2
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1ee      	bne.n	80084fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800851e:	7dfb      	ldrb	r3, [r7, #23]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d105      	bne.n	8008530 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008524:	4b39      	ldr	r3, [pc, #228]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 8008526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008528:	4a38      	ldr	r2, [pc, #224]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 800852a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800852e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 80a1 	beq.w	800867c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800853a:	4b34      	ldr	r3, [pc, #208]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f003 030c 	and.w	r3, r3, #12
 8008542:	2b08      	cmp	r3, #8
 8008544:	d05c      	beq.n	8008600 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	2b02      	cmp	r3, #2
 800854c:	d141      	bne.n	80085d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800854e:	4b31      	ldr	r3, [pc, #196]	@ (8008614 <HAL_RCC_OscConfig+0x478>)
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008554:	f7fb ff78 	bl	8004448 <HAL_GetTick>
 8008558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800855a:	e008      	b.n	800856e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800855c:	f7fb ff74 	bl	8004448 <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	2b02      	cmp	r3, #2
 8008568:	d901      	bls.n	800856e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e087      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800856e:	4b27      	ldr	r3, [pc, #156]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1f0      	bne.n	800855c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	69da      	ldr	r2, [r3, #28]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	431a      	orrs	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008588:	019b      	lsls	r3, r3, #6
 800858a:	431a      	orrs	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008590:	085b      	lsrs	r3, r3, #1
 8008592:	3b01      	subs	r3, #1
 8008594:	041b      	lsls	r3, r3, #16
 8008596:	431a      	orrs	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859c:	061b      	lsls	r3, r3, #24
 800859e:	491b      	ldr	r1, [pc, #108]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085a4:	4b1b      	ldr	r3, [pc, #108]	@ (8008614 <HAL_RCC_OscConfig+0x478>)
 80085a6:	2201      	movs	r2, #1
 80085a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085aa:	f7fb ff4d 	bl	8004448 <HAL_GetTick>
 80085ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085b0:	e008      	b.n	80085c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085b2:	f7fb ff49 	bl	8004448 <HAL_GetTick>
 80085b6:	4602      	mov	r2, r0
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d901      	bls.n	80085c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e05c      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085c4:	4b11      	ldr	r3, [pc, #68]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0f0      	beq.n	80085b2 <HAL_RCC_OscConfig+0x416>
 80085d0:	e054      	b.n	800867c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085d2:	4b10      	ldr	r3, [pc, #64]	@ (8008614 <HAL_RCC_OscConfig+0x478>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085d8:	f7fb ff36 	bl	8004448 <HAL_GetTick>
 80085dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085de:	e008      	b.n	80085f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085e0:	f7fb ff32 	bl	8004448 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e045      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085f2:	4b06      	ldr	r3, [pc, #24]	@ (800860c <HAL_RCC_OscConfig+0x470>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1f0      	bne.n	80085e0 <HAL_RCC_OscConfig+0x444>
 80085fe:	e03d      	b.n	800867c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d107      	bne.n	8008618 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e038      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
 800860c:	40023800 	.word	0x40023800
 8008610:	40007000 	.word	0x40007000
 8008614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008618:	4b1b      	ldr	r3, [pc, #108]	@ (8008688 <HAL_RCC_OscConfig+0x4ec>)
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d028      	beq.n	8008678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008630:	429a      	cmp	r2, r3
 8008632:	d121      	bne.n	8008678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800863e:	429a      	cmp	r2, r3
 8008640:	d11a      	bne.n	8008678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008648:	4013      	ands	r3, r2
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800864e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008650:	4293      	cmp	r3, r2
 8008652:	d111      	bne.n	8008678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800865e:	085b      	lsrs	r3, r3, #1
 8008660:	3b01      	subs	r3, #1
 8008662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008664:	429a      	cmp	r2, r3
 8008666:	d107      	bne.n	8008678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008674:	429a      	cmp	r2, r3
 8008676:	d001      	beq.n	800867c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e000      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	40023800 	.word	0x40023800

0800868c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e0cc      	b.n	800883a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80086a0:	4b68      	ldr	r3, [pc, #416]	@ (8008844 <HAL_RCC_ClockConfig+0x1b8>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0307 	and.w	r3, r3, #7
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d90c      	bls.n	80086c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ae:	4b65      	ldr	r3, [pc, #404]	@ (8008844 <HAL_RCC_ClockConfig+0x1b8>)
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	b2d2      	uxtb	r2, r2
 80086b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086b6:	4b63      	ldr	r3, [pc, #396]	@ (8008844 <HAL_RCC_ClockConfig+0x1b8>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0307 	and.w	r3, r3, #7
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d001      	beq.n	80086c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e0b8      	b.n	800883a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d020      	beq.n	8008716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0304 	and.w	r3, r3, #4
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d005      	beq.n	80086ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80086e0:	4b59      	ldr	r3, [pc, #356]	@ (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	4a58      	ldr	r2, [pc, #352]	@ (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 80086e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80086ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0308 	and.w	r3, r3, #8
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d005      	beq.n	8008704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80086f8:	4b53      	ldr	r3, [pc, #332]	@ (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	4a52      	ldr	r2, [pc, #328]	@ (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 80086fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008704:	4b50      	ldr	r3, [pc, #320]	@ (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	494d      	ldr	r1, [pc, #308]	@ (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 8008712:	4313      	orrs	r3, r2
 8008714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	d044      	beq.n	80087ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d107      	bne.n	800873a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800872a:	4b47      	ldr	r3, [pc, #284]	@ (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d119      	bne.n	800876a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e07f      	b.n	800883a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	2b02      	cmp	r3, #2
 8008740:	d003      	beq.n	800874a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008746:	2b03      	cmp	r3, #3
 8008748:	d107      	bne.n	800875a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800874a:	4b3f      	ldr	r3, [pc, #252]	@ (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d109      	bne.n	800876a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e06f      	b.n	800883a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800875a:	4b3b      	ldr	r3, [pc, #236]	@ (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d101      	bne.n	800876a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e067      	b.n	800883a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800876a:	4b37      	ldr	r3, [pc, #220]	@ (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f023 0203 	bic.w	r2, r3, #3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	4934      	ldr	r1, [pc, #208]	@ (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 8008778:	4313      	orrs	r3, r2
 800877a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800877c:	f7fb fe64 	bl	8004448 <HAL_GetTick>
 8008780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008782:	e00a      	b.n	800879a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008784:	f7fb fe60 	bl	8004448 <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008792:	4293      	cmp	r3, r2
 8008794:	d901      	bls.n	800879a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e04f      	b.n	800883a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800879a:	4b2b      	ldr	r3, [pc, #172]	@ (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f003 020c 	and.w	r2, r3, #12
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d1eb      	bne.n	8008784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80087ac:	4b25      	ldr	r3, [pc, #148]	@ (8008844 <HAL_RCC_ClockConfig+0x1b8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0307 	and.w	r3, r3, #7
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d20c      	bcs.n	80087d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ba:	4b22      	ldr	r3, [pc, #136]	@ (8008844 <HAL_RCC_ClockConfig+0x1b8>)
 80087bc:	683a      	ldr	r2, [r7, #0]
 80087be:	b2d2      	uxtb	r2, r2
 80087c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087c2:	4b20      	ldr	r3, [pc, #128]	@ (8008844 <HAL_RCC_ClockConfig+0x1b8>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0307 	and.w	r3, r3, #7
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d001      	beq.n	80087d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e032      	b.n	800883a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d008      	beq.n	80087f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087e0:	4b19      	ldr	r3, [pc, #100]	@ (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	4916      	ldr	r1, [pc, #88]	@ (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0308 	and.w	r3, r3, #8
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d009      	beq.n	8008812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80087fe:	4b12      	ldr	r3, [pc, #72]	@ (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	00db      	lsls	r3, r3, #3
 800880c:	490e      	ldr	r1, [pc, #56]	@ (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 800880e:	4313      	orrs	r3, r2
 8008810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008812:	f000 f821 	bl	8008858 <HAL_RCC_GetSysClockFreq>
 8008816:	4602      	mov	r2, r0
 8008818:	4b0b      	ldr	r3, [pc, #44]	@ (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	091b      	lsrs	r3, r3, #4
 800881e:	f003 030f 	and.w	r3, r3, #15
 8008822:	490a      	ldr	r1, [pc, #40]	@ (800884c <HAL_RCC_ClockConfig+0x1c0>)
 8008824:	5ccb      	ldrb	r3, [r1, r3]
 8008826:	fa22 f303 	lsr.w	r3, r2, r3
 800882a:	4a09      	ldr	r2, [pc, #36]	@ (8008850 <HAL_RCC_ClockConfig+0x1c4>)
 800882c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800882e:	4b09      	ldr	r3, [pc, #36]	@ (8008854 <HAL_RCC_ClockConfig+0x1c8>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4618      	mov	r0, r3
 8008834:	f7fb fdc4 	bl	80043c0 <HAL_InitTick>

  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	40023c00 	.word	0x40023c00
 8008848:	40023800 	.word	0x40023800
 800884c:	0800b84c 	.word	0x0800b84c
 8008850:	20000030 	.word	0x20000030
 8008854:	20000034 	.word	0x20000034

08008858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800885c:	b090      	sub	sp, #64	@ 0x40
 800885e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008860:	2300      	movs	r3, #0
 8008862:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008864:	2300      	movs	r3, #0
 8008866:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008868:	2300      	movs	r3, #0
 800886a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800886c:	2300      	movs	r3, #0
 800886e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008870:	4b59      	ldr	r3, [pc, #356]	@ (80089d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f003 030c 	and.w	r3, r3, #12
 8008878:	2b08      	cmp	r3, #8
 800887a:	d00d      	beq.n	8008898 <HAL_RCC_GetSysClockFreq+0x40>
 800887c:	2b08      	cmp	r3, #8
 800887e:	f200 80a1 	bhi.w	80089c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8008882:	2b00      	cmp	r3, #0
 8008884:	d002      	beq.n	800888c <HAL_RCC_GetSysClockFreq+0x34>
 8008886:	2b04      	cmp	r3, #4
 8008888:	d003      	beq.n	8008892 <HAL_RCC_GetSysClockFreq+0x3a>
 800888a:	e09b      	b.n	80089c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800888c:	4b53      	ldr	r3, [pc, #332]	@ (80089dc <HAL_RCC_GetSysClockFreq+0x184>)
 800888e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008890:	e09b      	b.n	80089ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008892:	4b53      	ldr	r3, [pc, #332]	@ (80089e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008894:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008896:	e098      	b.n	80089ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008898:	4b4f      	ldr	r3, [pc, #316]	@ (80089d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80088a2:	4b4d      	ldr	r3, [pc, #308]	@ (80089d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d028      	beq.n	8008900 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088ae:	4b4a      	ldr	r3, [pc, #296]	@ (80089d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	099b      	lsrs	r3, r3, #6
 80088b4:	2200      	movs	r2, #0
 80088b6:	623b      	str	r3, [r7, #32]
 80088b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80088ba:	6a3b      	ldr	r3, [r7, #32]
 80088bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80088c0:	2100      	movs	r1, #0
 80088c2:	4b47      	ldr	r3, [pc, #284]	@ (80089e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80088c4:	fb03 f201 	mul.w	r2, r3, r1
 80088c8:	2300      	movs	r3, #0
 80088ca:	fb00 f303 	mul.w	r3, r0, r3
 80088ce:	4413      	add	r3, r2
 80088d0:	4a43      	ldr	r2, [pc, #268]	@ (80089e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80088d2:	fba0 1202 	umull	r1, r2, r0, r2
 80088d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088d8:	460a      	mov	r2, r1
 80088da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80088dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088de:	4413      	add	r3, r2
 80088e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e4:	2200      	movs	r2, #0
 80088e6:	61bb      	str	r3, [r7, #24]
 80088e8:	61fa      	str	r2, [r7, #28]
 80088ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80088f2:	f7f7 fc6f 	bl	80001d4 <__aeabi_uldivmod>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4613      	mov	r3, r2
 80088fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088fe:	e053      	b.n	80089a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008900:	4b35      	ldr	r3, [pc, #212]	@ (80089d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	099b      	lsrs	r3, r3, #6
 8008906:	2200      	movs	r2, #0
 8008908:	613b      	str	r3, [r7, #16]
 800890a:	617a      	str	r2, [r7, #20]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008912:	f04f 0b00 	mov.w	fp, #0
 8008916:	4652      	mov	r2, sl
 8008918:	465b      	mov	r3, fp
 800891a:	f04f 0000 	mov.w	r0, #0
 800891e:	f04f 0100 	mov.w	r1, #0
 8008922:	0159      	lsls	r1, r3, #5
 8008924:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008928:	0150      	lsls	r0, r2, #5
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	ebb2 080a 	subs.w	r8, r2, sl
 8008932:	eb63 090b 	sbc.w	r9, r3, fp
 8008936:	f04f 0200 	mov.w	r2, #0
 800893a:	f04f 0300 	mov.w	r3, #0
 800893e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008942:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008946:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800894a:	ebb2 0408 	subs.w	r4, r2, r8
 800894e:	eb63 0509 	sbc.w	r5, r3, r9
 8008952:	f04f 0200 	mov.w	r2, #0
 8008956:	f04f 0300 	mov.w	r3, #0
 800895a:	00eb      	lsls	r3, r5, #3
 800895c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008960:	00e2      	lsls	r2, r4, #3
 8008962:	4614      	mov	r4, r2
 8008964:	461d      	mov	r5, r3
 8008966:	eb14 030a 	adds.w	r3, r4, sl
 800896a:	603b      	str	r3, [r7, #0]
 800896c:	eb45 030b 	adc.w	r3, r5, fp
 8008970:	607b      	str	r3, [r7, #4]
 8008972:	f04f 0200 	mov.w	r2, #0
 8008976:	f04f 0300 	mov.w	r3, #0
 800897a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800897e:	4629      	mov	r1, r5
 8008980:	028b      	lsls	r3, r1, #10
 8008982:	4621      	mov	r1, r4
 8008984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008988:	4621      	mov	r1, r4
 800898a:	028a      	lsls	r2, r1, #10
 800898c:	4610      	mov	r0, r2
 800898e:	4619      	mov	r1, r3
 8008990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008992:	2200      	movs	r2, #0
 8008994:	60bb      	str	r3, [r7, #8]
 8008996:	60fa      	str	r2, [r7, #12]
 8008998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800899c:	f7f7 fc1a 	bl	80001d4 <__aeabi_uldivmod>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4613      	mov	r3, r2
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80089a8:	4b0b      	ldr	r3, [pc, #44]	@ (80089d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	0c1b      	lsrs	r3, r3, #16
 80089ae:	f003 0303 	and.w	r3, r3, #3
 80089b2:	3301      	adds	r3, #1
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80089b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80089c2:	e002      	b.n	80089ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80089c4:	4b05      	ldr	r3, [pc, #20]	@ (80089dc <HAL_RCC_GetSysClockFreq+0x184>)
 80089c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80089c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80089ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3740      	adds	r7, #64	@ 0x40
 80089d0:	46bd      	mov	sp, r7
 80089d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089d6:	bf00      	nop
 80089d8:	40023800 	.word	0x40023800
 80089dc:	00f42400 	.word	0x00f42400
 80089e0:	017d7840 	.word	0x017d7840

080089e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089e4:	b480      	push	{r7}
 80089e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089e8:	4b03      	ldr	r3, [pc, #12]	@ (80089f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80089ea:	681b      	ldr	r3, [r3, #0]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	20000030 	.word	0x20000030

080089fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008a00:	f7ff fff0 	bl	80089e4 <HAL_RCC_GetHCLKFreq>
 8008a04:	4602      	mov	r2, r0
 8008a06:	4b05      	ldr	r3, [pc, #20]	@ (8008a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	0a9b      	lsrs	r3, r3, #10
 8008a0c:	f003 0307 	and.w	r3, r3, #7
 8008a10:	4903      	ldr	r1, [pc, #12]	@ (8008a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a12:	5ccb      	ldrb	r3, [r1, r3]
 8008a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	40023800 	.word	0x40023800
 8008a20:	0800b85c 	.word	0x0800b85c

08008a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008a28:	f7ff ffdc 	bl	80089e4 <HAL_RCC_GetHCLKFreq>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	4b05      	ldr	r3, [pc, #20]	@ (8008a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	0b5b      	lsrs	r3, r3, #13
 8008a34:	f003 0307 	and.w	r3, r3, #7
 8008a38:	4903      	ldr	r1, [pc, #12]	@ (8008a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a3a:	5ccb      	ldrb	r3, [r1, r3]
 8008a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	40023800 	.word	0x40023800
 8008a48:	0800b85c 	.word	0x0800b85c

08008a4c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a54:	2300      	movs	r3, #0
 8008a56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d105      	bne.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d035      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008a74:	4b67      	ldr	r3, [pc, #412]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008a7a:	f7fb fce5 	bl	8004448 <HAL_GetTick>
 8008a7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a80:	e008      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008a82:	f7fb fce1 	bl	8004448 <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d901      	bls.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e0ba      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a94:	4b60      	ldr	r3, [pc, #384]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1f0      	bne.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	019a      	lsls	r2, r3, #6
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	071b      	lsls	r3, r3, #28
 8008aac:	495a      	ldr	r1, [pc, #360]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008ab4:	4b57      	ldr	r3, [pc, #348]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008aba:	f7fb fcc5 	bl	8004448 <HAL_GetTick>
 8008abe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008ac0:	e008      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008ac2:	f7fb fcc1 	bl	8004448 <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d901      	bls.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e09a      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008ad4:	4b50      	ldr	r3, [pc, #320]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d0f0      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0302 	and.w	r3, r3, #2
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f000 8083 	beq.w	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008aee:	2300      	movs	r3, #0
 8008af0:	60fb      	str	r3, [r7, #12]
 8008af2:	4b49      	ldr	r3, [pc, #292]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af6:	4a48      	ldr	r2, [pc, #288]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8008afe:	4b46      	ldr	r3, [pc, #280]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008b0a:	4b44      	ldr	r3, [pc, #272]	@ (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a43      	ldr	r2, [pc, #268]	@ (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b16:	f7fb fc97 	bl	8004448 <HAL_GetTick>
 8008b1a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008b1c:	e008      	b.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b1e:	f7fb fc93 	bl	8004448 <HAL_GetTick>
 8008b22:	4602      	mov	r2, r0
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d901      	bls.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e06c      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008b30:	4b3a      	ldr	r3, [pc, #232]	@ (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d0f0      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008b3c:	4b36      	ldr	r3, [pc, #216]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b44:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d02f      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d028      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b62:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b64:	4b2e      	ldr	r3, [pc, #184]	@ (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008b66:	2201      	movs	r2, #1
 8008b68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008b70:	4a29      	ldr	r2, [pc, #164]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008b76:	4b28      	ldr	r3, [pc, #160]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d114      	bne.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008b82:	f7fb fc61 	bl	8004448 <HAL_GetTick>
 8008b86:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b88:	e00a      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b8a:	f7fb fc5d 	bl	8004448 <HAL_GetTick>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d901      	bls.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e034      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ba4:	f003 0302 	and.w	r3, r3, #2
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d0ee      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bb8:	d10d      	bne.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008bba:	4b17      	ldr	r3, [pc, #92]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bce:	4912      	ldr	r1, [pc, #72]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	608b      	str	r3, [r1, #8]
 8008bd4:	e005      	b.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008bd6:	4b10      	ldr	r3, [pc, #64]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	4a0f      	ldr	r2, [pc, #60]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008bdc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008be0:	6093      	str	r3, [r2, #8]
 8008be2:	4b0d      	ldr	r3, [pc, #52]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008be4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bee:	490a      	ldr	r1, [pc, #40]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0308 	and.w	r3, r3, #8
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d003      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	7c1a      	ldrb	r2, [r3, #16]
 8008c04:	4b07      	ldr	r3, [pc, #28]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008c06:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	42470068 	.word	0x42470068
 8008c18:	40023800 	.word	0x40023800
 8008c1c:	40007000 	.word	0x40007000
 8008c20:	42470e40 	.word	0x42470e40
 8008c24:	424711e0 	.word	0x424711e0

08008c28 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e073      	b.n	8008d26 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	7f5b      	ldrb	r3, [r3, #29]
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d105      	bne.n	8008c54 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7f9 fe66 	bl	8002920 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	f003 0310 	and.w	r3, r3, #16
 8008c64:	2b10      	cmp	r3, #16
 8008c66:	d055      	beq.n	8008d14 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	22ca      	movs	r2, #202	@ 0xca
 8008c6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2253      	movs	r2, #83	@ 0x53
 8008c76:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fa49 	bl	8009110 <RTC_EnterInitMode>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d12c      	bne.n	8008ce2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	6812      	ldr	r2, [r2, #0]
 8008c92:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008c96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c9a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6899      	ldr	r1, [r3, #8]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	431a      	orrs	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	695b      	ldr	r3, [r3, #20]
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	68d2      	ldr	r2, [r2, #12]
 8008cc2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6919      	ldr	r1, [r3, #16]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	041a      	lsls	r2, r3, #16
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fa50 	bl	800917e <RTC_ExitInitMode>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d110      	bne.n	8008d0a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008cf6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	699a      	ldr	r2, [r3, #24]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	430a      	orrs	r2, r1
 8008d08:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	22ff      	movs	r2, #255	@ 0xff
 8008d10:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d12:	e001      	b.n	8008d18 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d102      	bne.n	8008d24 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d2e:	b590      	push	{r4, r7, lr}
 8008d30:	b087      	sub	sp, #28
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	60f8      	str	r0, [r7, #12]
 8008d36:	60b9      	str	r1, [r7, #8]
 8008d38:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	7f1b      	ldrb	r3, [r3, #28]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d101      	bne.n	8008d4a <HAL_RTC_SetTime+0x1c>
 8008d46:	2302      	movs	r3, #2
 8008d48:	e087      	b.n	8008e5a <HAL_RTC_SetTime+0x12c>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2202      	movs	r2, #2
 8008d54:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d126      	bne.n	8008daa <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d102      	bne.n	8008d70 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 fa27 	bl	80091c8 <RTC_ByteToBcd2>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	785b      	ldrb	r3, [r3, #1]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 fa20 	bl	80091c8 <RTC_ByteToBcd2>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008d8c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	789b      	ldrb	r3, [r3, #2]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 fa18 	bl	80091c8 <RTC_ByteToBcd2>
 8008d98:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008d9a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	78db      	ldrb	r3, [r3, #3]
 8008da2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008da4:	4313      	orrs	r3, r2
 8008da6:	617b      	str	r3, [r7, #20]
 8008da8:	e018      	b.n	8008ddc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d102      	bne.n	8008dbe <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	785b      	ldrb	r3, [r3, #1]
 8008dc8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008dca:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008dd0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	78db      	ldrb	r3, [r3, #3]
 8008dd6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	22ca      	movs	r2, #202	@ 0xca
 8008de2:	625a      	str	r2, [r3, #36]	@ 0x24
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2253      	movs	r2, #83	@ 0x53
 8008dea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f000 f98f 	bl	8009110 <RTC_EnterInitMode>
 8008df2:	4603      	mov	r3, r0
 8008df4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008df6:	7cfb      	ldrb	r3, [r7, #19]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d120      	bne.n	8008e3e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008e06:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008e0a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	689a      	ldr	r2, [r3, #8]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008e1a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6899      	ldr	r1, [r3, #8]
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	68da      	ldr	r2, [r3, #12]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	430a      	orrs	r2, r1
 8008e32:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 f9a2 	bl	800917e <RTC_ExitInitMode>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008e3e:	7cfb      	ldrb	r3, [r7, #19]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d102      	bne.n	8008e4a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2201      	movs	r2, #1
 8008e48:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	22ff      	movs	r2, #255	@ 0xff
 8008e50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	771a      	strb	r2, [r3, #28]

  return status;
 8008e58:	7cfb      	ldrb	r3, [r7, #19]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	371c      	adds	r7, #28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd90      	pop	{r4, r7, pc}

08008e62 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b086      	sub	sp, #24
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008e94:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008e98:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	0c1b      	lsrs	r3, r3, #16
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	0a1b      	lsrs	r3, r3, #8
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ec2:	b2da      	uxtb	r2, r3
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	0d9b      	lsrs	r3, r3, #22
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d11a      	bne.n	8008f14 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 f98e 	bl	8009204 <RTC_Bcd2ToByte>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	461a      	mov	r2, r3
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	785b      	ldrb	r3, [r3, #1]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 f985 	bl	8009204 <RTC_Bcd2ToByte>
 8008efa:	4603      	mov	r3, r0
 8008efc:	461a      	mov	r2, r3
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	789b      	ldrb	r3, [r3, #2]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 f97c 	bl	8009204 <RTC_Bcd2ToByte>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	461a      	mov	r2, r3
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3718      	adds	r7, #24
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008f1e:	b590      	push	{r4, r7, lr}
 8008f20:	b087      	sub	sp, #28
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	60f8      	str	r0, [r7, #12]
 8008f26:	60b9      	str	r1, [r7, #8]
 8008f28:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	7f1b      	ldrb	r3, [r3, #28]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d101      	bne.n	8008f3a <HAL_RTC_SetDate+0x1c>
 8008f36:	2302      	movs	r3, #2
 8008f38:	e071      	b.n	800901e <HAL_RTC_SetDate+0x100>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2202      	movs	r2, #2
 8008f44:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10e      	bne.n	8008f6a <HAL_RTC_SetDate+0x4c>
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	785b      	ldrb	r3, [r3, #1]
 8008f50:	f003 0310 	and.w	r3, r3, #16
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d008      	beq.n	8008f6a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	785b      	ldrb	r3, [r3, #1]
 8008f5c:	f023 0310 	bic.w	r3, r3, #16
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	330a      	adds	r3, #10
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d11c      	bne.n	8008faa <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	78db      	ldrb	r3, [r3, #3]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 f927 	bl	80091c8 <RTC_ByteToBcd2>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	785b      	ldrb	r3, [r3, #1]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 f920 	bl	80091c8 <RTC_ByteToBcd2>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008f8c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	789b      	ldrb	r3, [r3, #2]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 f918 	bl	80091c8 <RTC_ByteToBcd2>
 8008f98:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008f9a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	617b      	str	r3, [r7, #20]
 8008fa8:	e00e      	b.n	8008fc8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	78db      	ldrb	r3, [r3, #3]
 8008fae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	785b      	ldrb	r3, [r3, #1]
 8008fb4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008fb6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008fbc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	22ca      	movs	r2, #202	@ 0xca
 8008fce:	625a      	str	r2, [r3, #36]	@ 0x24
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2253      	movs	r2, #83	@ 0x53
 8008fd6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 f899 	bl	8009110 <RTC_EnterInitMode>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008fe2:	7cfb      	ldrb	r3, [r7, #19]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10c      	bne.n	8009002 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008ff2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008ff6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f000 f8c0 	bl	800917e <RTC_ExitInitMode>
 8008ffe:	4603      	mov	r3, r0
 8009000:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009002:	7cfb      	ldrb	r3, [r7, #19]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d102      	bne.n	800900e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2201      	movs	r2, #1
 800900c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	22ff      	movs	r2, #255	@ 0xff
 8009014:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	771a      	strb	r2, [r3, #28]

  return status;
 800901c:	7cfb      	ldrb	r3, [r7, #19]
}
 800901e:	4618      	mov	r0, r3
 8009020:	371c      	adds	r7, #28
 8009022:	46bd      	mov	sp, r7
 8009024:	bd90      	pop	{r4, r7, pc}

08009026 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b086      	sub	sp, #24
 800902a:	af00      	add	r7, sp, #0
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009032:	2300      	movs	r3, #0
 8009034:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009040:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009044:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	0c1b      	lsrs	r3, r3, #16
 800904a:	b2da      	uxtb	r2, r3
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	0a1b      	lsrs	r3, r3, #8
 8009054:	b2db      	uxtb	r3, r3
 8009056:	f003 031f 	and.w	r3, r3, #31
 800905a:	b2da      	uxtb	r2, r3
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	b2db      	uxtb	r3, r3
 8009064:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009068:	b2da      	uxtb	r2, r3
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	0b5b      	lsrs	r3, r3, #13
 8009072:	b2db      	uxtb	r3, r3
 8009074:	f003 0307 	and.w	r3, r3, #7
 8009078:	b2da      	uxtb	r2, r3
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d11a      	bne.n	80090ba <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	78db      	ldrb	r3, [r3, #3]
 8009088:	4618      	mov	r0, r3
 800908a:	f000 f8bb 	bl	8009204 <RTC_Bcd2ToByte>
 800908e:	4603      	mov	r3, r0
 8009090:	461a      	mov	r2, r3
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	785b      	ldrb	r3, [r3, #1]
 800909a:	4618      	mov	r0, r3
 800909c:	f000 f8b2 	bl	8009204 <RTC_Bcd2ToByte>
 80090a0:	4603      	mov	r3, r0
 80090a2:	461a      	mov	r2, r3
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	789b      	ldrb	r3, [r3, #2]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 f8a9 	bl	8009204 <RTC_Bcd2ToByte>
 80090b2:	4603      	mov	r3, r0
 80090b4:	461a      	mov	r2, r3
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a0d      	ldr	r2, [pc, #52]	@ (800910c <HAL_RTC_WaitForSynchro+0x48>)
 80090d6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80090d8:	f7fb f9b6 	bl	8004448 <HAL_GetTick>
 80090dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80090de:	e009      	b.n	80090f4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80090e0:	f7fb f9b2 	bl	8004448 <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80090ee:	d901      	bls.n	80090f4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e007      	b.n	8009104 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	f003 0320 	and.w	r3, r3, #32
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0ee      	beq.n	80090e0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	00013f5f 	.word	0x00013f5f

08009110 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009118:	2300      	movs	r3, #0
 800911a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800912a:	2b00      	cmp	r3, #0
 800912c:	d122      	bne.n	8009174 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68da      	ldr	r2, [r3, #12]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800913c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800913e:	f7fb f983 	bl	8004448 <HAL_GetTick>
 8009142:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009144:	e00c      	b.n	8009160 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009146:	f7fb f97f 	bl	8004448 <HAL_GetTick>
 800914a:	4602      	mov	r2, r0
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009154:	d904      	bls.n	8009160 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2204      	movs	r2, #4
 800915a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800916a:	2b00      	cmp	r3, #0
 800916c:	d102      	bne.n	8009174 <RTC_EnterInitMode+0x64>
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d1e8      	bne.n	8009146 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009174:	7bfb      	ldrb	r3, [r7, #15]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b084      	sub	sp, #16
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009198:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f003 0320 	and.w	r3, r3, #32
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10a      	bne.n	80091be <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7ff ff8b 	bl	80090c4 <HAL_RTC_WaitForSynchro>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d004      	beq.n	80091be <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2204      	movs	r2, #4
 80091b8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80091be:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80091d6:	e005      	b.n	80091e4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	3301      	adds	r3, #1
 80091dc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80091de:	79fb      	ldrb	r3, [r7, #7]
 80091e0:	3b0a      	subs	r3, #10
 80091e2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80091e4:	79fb      	ldrb	r3, [r7, #7]
 80091e6:	2b09      	cmp	r3, #9
 80091e8:	d8f6      	bhi.n	80091d8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	011b      	lsls	r3, r3, #4
 80091f0:	b2da      	uxtb	r2, r3
 80091f2:	79fb      	ldrb	r3, [r7, #7]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	b2db      	uxtb	r3, r3
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	4603      	mov	r3, r0
 800920c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8009212:	79fb      	ldrb	r3, [r7, #7]
 8009214:	091b      	lsrs	r3, r3, #4
 8009216:	b2db      	uxtb	r3, r3
 8009218:	461a      	mov	r2, r3
 800921a:	4613      	mov	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4413      	add	r3, r2
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	b2da      	uxtb	r2, r3
 8009228:	79fb      	ldrb	r3, [r7, #7]
 800922a:	f003 030f 	and.w	r3, r3, #15
 800922e:	b2db      	uxtb	r3, r3
 8009230:	4413      	add	r3, r2
 8009232:	b2db      	uxtb	r3, r3
}
 8009234:	4618      	mov	r0, r3
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d101      	bne.n	8009252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e07b      	b.n	800934a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009256:	2b00      	cmp	r3, #0
 8009258:	d108      	bne.n	800926c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009262:	d009      	beq.n	8009278 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	61da      	str	r2, [r3, #28]
 800926a:	e005      	b.n	8009278 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d106      	bne.n	8009298 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7fa fc52 	bl	8003b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2202      	movs	r2, #2
 800929c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80092c0:	431a      	orrs	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092ca:	431a      	orrs	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	f003 0302 	and.w	r3, r3, #2
 80092d4:	431a      	orrs	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	431a      	orrs	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092e8:	431a      	orrs	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	69db      	ldr	r3, [r3, #28]
 80092ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092f2:	431a      	orrs	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092fc:	ea42 0103 	orr.w	r1, r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009304:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	430a      	orrs	r2, r1
 800930e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	0c1b      	lsrs	r3, r3, #16
 8009316:	f003 0104 	and.w	r1, r3, #4
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931e:	f003 0210 	and.w	r2, r3, #16
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	430a      	orrs	r2, r1
 8009328:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	69da      	ldr	r2, [r3, #28]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009338:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
	...

08009354 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	4613      	mov	r3, r2
 8009360:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b01      	cmp	r3, #1
 800936c:	d001      	beq.n	8009372 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800936e:	2302      	movs	r3, #2
 8009370:	e097      	b.n	80094a2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <HAL_SPI_Transmit_DMA+0x2a>
 8009378:	88fb      	ldrh	r3, [r7, #6]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e08f      	b.n	80094a2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009388:	2b01      	cmp	r3, #1
 800938a:	d101      	bne.n	8009390 <HAL_SPI_Transmit_DMA+0x3c>
 800938c:	2302      	movs	r3, #2
 800938e:	e088      	b.n	80094a2 <HAL_SPI_Transmit_DMA+0x14e>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2203      	movs	r2, #3
 800939c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	88fa      	ldrh	r2, [r7, #6]
 80093b0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	88fa      	ldrh	r2, [r7, #6]
 80093b6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093de:	d10f      	bne.n	8009400 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80093fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009404:	4a29      	ldr	r2, [pc, #164]	@ (80094ac <HAL_SPI_Transmit_DMA+0x158>)
 8009406:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800940c:	4a28      	ldr	r2, [pc, #160]	@ (80094b0 <HAL_SPI_Transmit_DMA+0x15c>)
 800940e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009414:	4a27      	ldr	r2, [pc, #156]	@ (80094b4 <HAL_SPI_Transmit_DMA+0x160>)
 8009416:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800941c:	2200      	movs	r2, #0
 800941e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009428:	4619      	mov	r1, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	330c      	adds	r3, #12
 8009430:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009436:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009438:	f7fb fd0c 	bl	8004e54 <HAL_DMA_Start_IT>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00b      	beq.n	800945a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009446:	f043 0210 	orr.w	r2, r3, #16
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e023      	b.n	80094a2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009464:	2b40      	cmp	r3, #64	@ 0x40
 8009466:	d007      	beq.n	8009478 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009476:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f042 0220 	orr.w	r2, r2, #32
 800948e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	685a      	ldr	r2, [r3, #4]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f042 0202 	orr.w	r2, r2, #2
 800949e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	08009771 	.word	0x08009771
 80094b0:	080096c9 	.word	0x080096c9
 80094b4:	0800978d 	.word	0x0800978d

080094b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b088      	sub	sp, #32
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10e      	bne.n	80094f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d009      	beq.n	80094f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d004      	beq.n	80094f8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	4798      	blx	r3
    return;
 80094f6:	e0ce      	b.n	8009696 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	f003 0302 	and.w	r3, r3, #2
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d009      	beq.n	8009516 <HAL_SPI_IRQHandler+0x5e>
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009508:	2b00      	cmp	r3, #0
 800950a:	d004      	beq.n	8009516 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	4798      	blx	r3
    return;
 8009514:	e0bf      	b.n	8009696 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	f003 0320 	and.w	r3, r3, #32
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10a      	bne.n	8009536 <HAL_SPI_IRQHandler+0x7e>
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009526:	2b00      	cmp	r3, #0
 8009528:	d105      	bne.n	8009536 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 80b0 	beq.w	8009696 <HAL_SPI_IRQHandler+0x1de>
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	f003 0320 	and.w	r3, r3, #32
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 80aa 	beq.w	8009696 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009548:	2b00      	cmp	r3, #0
 800954a:	d023      	beq.n	8009594 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b03      	cmp	r3, #3
 8009556:	d011      	beq.n	800957c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800955c:	f043 0204 	orr.w	r2, r3, #4
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009564:	2300      	movs	r3, #0
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	617b      	str	r3, [r7, #20]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	617b      	str	r3, [r7, #20]
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	e00b      	b.n	8009594 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800957c:	2300      	movs	r3, #0
 800957e:	613b      	str	r3, [r7, #16]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	613b      	str	r3, [r7, #16]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	613b      	str	r3, [r7, #16]
 8009590:	693b      	ldr	r3, [r7, #16]
        return;
 8009592:	e080      	b.n	8009696 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	f003 0320 	and.w	r3, r3, #32
 800959a:	2b00      	cmp	r3, #0
 800959c:	d014      	beq.n	80095c8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095a2:	f043 0201 	orr.w	r2, r3, #1
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80095aa:	2300      	movs	r3, #0
 80095ac:	60fb      	str	r3, [r7, #12]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	60fb      	str	r3, [r7, #12]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095c4:	601a      	str	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00c      	beq.n	80095ec <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095d6:	f043 0208 	orr.w	r2, r3, #8
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80095de:	2300      	movs	r3, #0
 80095e0:	60bb      	str	r3, [r7, #8]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	60bb      	str	r3, [r7, #8]
 80095ea:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d04f      	beq.n	8009694 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009602:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	f003 0302 	and.w	r3, r3, #2
 8009612:	2b00      	cmp	r3, #0
 8009614:	d104      	bne.n	8009620 <HAL_SPI_IRQHandler+0x168>
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	2b00      	cmp	r3, #0
 800961e:	d034      	beq.n	800968a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f022 0203 	bic.w	r2, r2, #3
 800962e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009634:	2b00      	cmp	r3, #0
 8009636:	d011      	beq.n	800965c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800963c:	4a17      	ldr	r2, [pc, #92]	@ (800969c <HAL_SPI_IRQHandler+0x1e4>)
 800963e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009644:	4618      	mov	r0, r3
 8009646:	f7fb fc5d 	bl	8004f04 <HAL_DMA_Abort_IT>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d005      	beq.n	800965c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009654:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009660:	2b00      	cmp	r3, #0
 8009662:	d016      	beq.n	8009692 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009668:	4a0c      	ldr	r2, [pc, #48]	@ (800969c <HAL_SPI_IRQHandler+0x1e4>)
 800966a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009670:	4618      	mov	r0, r3
 8009672:	f7fb fc47 	bl	8004f04 <HAL_DMA_Abort_IT>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00a      	beq.n	8009692 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009680:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8009688:	e003      	b.n	8009692 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f812 	bl	80096b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009690:	e000      	b.n	8009694 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8009692:	bf00      	nop
    return;
 8009694:	bf00      	nop
  }
}
 8009696:	3720      	adds	r7, #32
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	080097cd 	.word	0x080097cd

080096a0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096d6:	f7fa feb7 	bl	8004448 <HAL_GetTick>
 80096da:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096ea:	d03b      	beq.n	8009764 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f022 0220 	bic.w	r2, r2, #32
 80096fa:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	685a      	ldr	r2, [r3, #4]
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f022 0202 	bic.w	r2, r2, #2
 800970a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	2164      	movs	r1, #100	@ 0x64
 8009710:	6978      	ldr	r0, [r7, #20]
 8009712:	f000 f8f7 	bl	8009904 <SPI_EndRxTxTransaction>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d005      	beq.n	8009728 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009720:	f043 0220 	orr.w	r2, r3, #32
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10a      	bne.n	8009746 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009730:	2300      	movs	r3, #0
 8009732:	60fb      	str	r3, [r7, #12]
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	60fb      	str	r3, [r7, #12]
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	60fb      	str	r3, [r7, #12]
 8009744:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	2200      	movs	r2, #0
 800974a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009758:	2b00      	cmp	r3, #0
 800975a:	d003      	beq.n	8009764 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800975c:	6978      	ldr	r0, [r7, #20]
 800975e:	f7ff ffa9 	bl	80096b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009762:	e002      	b.n	800976a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009764:	6978      	ldr	r0, [r7, #20]
 8009766:	f7f7 f9c9 	bl	8000afc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800977c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f7ff ff8e 	bl	80096a0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009784:	bf00      	nop
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009798:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	685a      	ldr	r2, [r3, #4]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f022 0203 	bic.w	r2, r2, #3
 80097a8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ae:	f043 0210 	orr.w	r2, r3, #16
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2201      	movs	r2, #1
 80097ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f7ff ff78 	bl	80096b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097c4:	bf00      	nop
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f7ff ff64 	bl	80096b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097ec:	bf00      	nop
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b088      	sub	sp, #32
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	603b      	str	r3, [r7, #0]
 8009800:	4613      	mov	r3, r2
 8009802:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009804:	f7fa fe20 	bl	8004448 <HAL_GetTick>
 8009808:	4602      	mov	r2, r0
 800980a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980c:	1a9b      	subs	r3, r3, r2
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	4413      	add	r3, r2
 8009812:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009814:	f7fa fe18 	bl	8004448 <HAL_GetTick>
 8009818:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800981a:	4b39      	ldr	r3, [pc, #228]	@ (8009900 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	015b      	lsls	r3, r3, #5
 8009820:	0d1b      	lsrs	r3, r3, #20
 8009822:	69fa      	ldr	r2, [r7, #28]
 8009824:	fb02 f303 	mul.w	r3, r2, r3
 8009828:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800982a:	e054      	b.n	80098d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009832:	d050      	beq.n	80098d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009834:	f7fa fe08 	bl	8004448 <HAL_GetTick>
 8009838:	4602      	mov	r2, r0
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	69fa      	ldr	r2, [r7, #28]
 8009840:	429a      	cmp	r2, r3
 8009842:	d902      	bls.n	800984a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d13d      	bne.n	80098c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009858:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009862:	d111      	bne.n	8009888 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800986c:	d004      	beq.n	8009878 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009876:	d107      	bne.n	8009888 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009886:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800988c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009890:	d10f      	bne.n	80098b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80098a0:	601a      	str	r2, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80098b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80098c2:	2303      	movs	r3, #3
 80098c4:	e017      	b.n	80098f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80098cc:	2300      	movs	r3, #0
 80098ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	3b01      	subs	r3, #1
 80098d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	689a      	ldr	r2, [r3, #8]
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	4013      	ands	r3, r2
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	bf0c      	ite	eq
 80098e6:	2301      	moveq	r3, #1
 80098e8:	2300      	movne	r3, #0
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	461a      	mov	r2, r3
 80098ee:	79fb      	ldrb	r3, [r7, #7]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d19b      	bne.n	800982c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3720      	adds	r7, #32
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20000030 	.word	0x20000030

08009904 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b088      	sub	sp, #32
 8009908:	af02      	add	r7, sp, #8
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	2201      	movs	r2, #1
 8009918:	2102      	movs	r1, #2
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f7ff ff6a 	bl	80097f4 <SPI_WaitFlagStateUntilTimeout>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d007      	beq.n	8009936 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800992a:	f043 0220 	orr.w	r2, r3, #32
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e032      	b.n	800999c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009936:	4b1b      	ldr	r3, [pc, #108]	@ (80099a4 <SPI_EndRxTxTransaction+0xa0>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a1b      	ldr	r2, [pc, #108]	@ (80099a8 <SPI_EndRxTxTransaction+0xa4>)
 800993c:	fba2 2303 	umull	r2, r3, r2, r3
 8009940:	0d5b      	lsrs	r3, r3, #21
 8009942:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009946:	fb02 f303 	mul.w	r3, r2, r3
 800994a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009954:	d112      	bne.n	800997c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	2200      	movs	r2, #0
 800995e:	2180      	movs	r1, #128	@ 0x80
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f7ff ff47 	bl	80097f4 <SPI_WaitFlagStateUntilTimeout>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d016      	beq.n	800999a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009970:	f043 0220 	orr.w	r2, r3, #32
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009978:	2303      	movs	r3, #3
 800997a:	e00f      	b.n	800999c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00a      	beq.n	8009998 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	3b01      	subs	r3, #1
 8009986:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009992:	2b80      	cmp	r3, #128	@ 0x80
 8009994:	d0f2      	beq.n	800997c <SPI_EndRxTxTransaction+0x78>
 8009996:	e000      	b.n	800999a <SPI_EndRxTxTransaction+0x96>
        break;
 8009998:	bf00      	nop
  }

  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3718      	adds	r7, #24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	20000030 	.word	0x20000030
 80099a8:	165e9f81 	.word	0x165e9f81

080099ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d101      	bne.n	80099be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	e041      	b.n	8009a42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d106      	bne.n	80099d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f7fa fb3a 	bl	800404c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2202      	movs	r2, #2
 80099dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	3304      	adds	r3, #4
 80099e8:	4619      	mov	r1, r3
 80099ea:	4610      	mov	r0, r2
 80099ec:	f000 fd86 	bl	800a4fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
	...

08009a4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d001      	beq.n	8009a64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a60:	2301      	movs	r3, #1
 8009a62:	e044      	b.n	8009aee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2202      	movs	r2, #2
 8009a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68da      	ldr	r2, [r3, #12]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f042 0201 	orr.w	r2, r2, #1
 8009a7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a1e      	ldr	r2, [pc, #120]	@ (8009afc <HAL_TIM_Base_Start_IT+0xb0>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d018      	beq.n	8009ab8 <HAL_TIM_Base_Start_IT+0x6c>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a8e:	d013      	beq.n	8009ab8 <HAL_TIM_Base_Start_IT+0x6c>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a1a      	ldr	r2, [pc, #104]	@ (8009b00 <HAL_TIM_Base_Start_IT+0xb4>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d00e      	beq.n	8009ab8 <HAL_TIM_Base_Start_IT+0x6c>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a19      	ldr	r2, [pc, #100]	@ (8009b04 <HAL_TIM_Base_Start_IT+0xb8>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d009      	beq.n	8009ab8 <HAL_TIM_Base_Start_IT+0x6c>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a17      	ldr	r2, [pc, #92]	@ (8009b08 <HAL_TIM_Base_Start_IT+0xbc>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d004      	beq.n	8009ab8 <HAL_TIM_Base_Start_IT+0x6c>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a16      	ldr	r2, [pc, #88]	@ (8009b0c <HAL_TIM_Base_Start_IT+0xc0>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d111      	bne.n	8009adc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	f003 0307 	and.w	r3, r3, #7
 8009ac2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2b06      	cmp	r3, #6
 8009ac8:	d010      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f042 0201 	orr.w	r2, r2, #1
 8009ad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ada:	e007      	b.n	8009aec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f042 0201 	orr.w	r2, r2, #1
 8009aea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	40010000 	.word	0x40010000
 8009b00:	40000400 	.word	0x40000400
 8009b04:	40000800 	.word	0x40000800
 8009b08:	40000c00 	.word	0x40000c00
 8009b0c:	40014000 	.word	0x40014000

08009b10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e041      	b.n	8009ba6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d106      	bne.n	8009b3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f839 	bl	8009bae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2202      	movs	r2, #2
 8009b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	4610      	mov	r0, r2
 8009b50:	f000 fcd4 	bl	800a4fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009bae:	b480      	push	{r7}
 8009bb0:	b083      	sub	sp, #12
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009bb6:	bf00      	nop
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
	...

08009bc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d109      	bne.n	8009be8 <HAL_TIM_PWM_Start+0x24>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	bf14      	ite	ne
 8009be0:	2301      	movne	r3, #1
 8009be2:	2300      	moveq	r3, #0
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	e022      	b.n	8009c2e <HAL_TIM_PWM_Start+0x6a>
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	2b04      	cmp	r3, #4
 8009bec:	d109      	bne.n	8009c02 <HAL_TIM_PWM_Start+0x3e>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	bf14      	ite	ne
 8009bfa:	2301      	movne	r3, #1
 8009bfc:	2300      	moveq	r3, #0
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	e015      	b.n	8009c2e <HAL_TIM_PWM_Start+0x6a>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b08      	cmp	r3, #8
 8009c06:	d109      	bne.n	8009c1c <HAL_TIM_PWM_Start+0x58>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	bf14      	ite	ne
 8009c14:	2301      	movne	r3, #1
 8009c16:	2300      	moveq	r3, #0
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	e008      	b.n	8009c2e <HAL_TIM_PWM_Start+0x6a>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	bf14      	ite	ne
 8009c28:	2301      	movne	r3, #1
 8009c2a:	2300      	moveq	r3, #0
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d001      	beq.n	8009c36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e068      	b.n	8009d08 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d104      	bne.n	8009c46 <HAL_TIM_PWM_Start+0x82>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2202      	movs	r2, #2
 8009c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c44:	e013      	b.n	8009c6e <HAL_TIM_PWM_Start+0xaa>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2b04      	cmp	r3, #4
 8009c4a:	d104      	bne.n	8009c56 <HAL_TIM_PWM_Start+0x92>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c54:	e00b      	b.n	8009c6e <HAL_TIM_PWM_Start+0xaa>
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2b08      	cmp	r3, #8
 8009c5a:	d104      	bne.n	8009c66 <HAL_TIM_PWM_Start+0xa2>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2202      	movs	r2, #2
 8009c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c64:	e003      	b.n	8009c6e <HAL_TIM_PWM_Start+0xaa>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2202      	movs	r2, #2
 8009c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2201      	movs	r2, #1
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 fef2 	bl	800aa60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a23      	ldr	r2, [pc, #140]	@ (8009d10 <HAL_TIM_PWM_Start+0x14c>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d107      	bne.n	8009c96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009c94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8009d10 <HAL_TIM_PWM_Start+0x14c>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d018      	beq.n	8009cd2 <HAL_TIM_PWM_Start+0x10e>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ca8:	d013      	beq.n	8009cd2 <HAL_TIM_PWM_Start+0x10e>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a19      	ldr	r2, [pc, #100]	@ (8009d14 <HAL_TIM_PWM_Start+0x150>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d00e      	beq.n	8009cd2 <HAL_TIM_PWM_Start+0x10e>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a17      	ldr	r2, [pc, #92]	@ (8009d18 <HAL_TIM_PWM_Start+0x154>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d009      	beq.n	8009cd2 <HAL_TIM_PWM_Start+0x10e>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a16      	ldr	r2, [pc, #88]	@ (8009d1c <HAL_TIM_PWM_Start+0x158>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d004      	beq.n	8009cd2 <HAL_TIM_PWM_Start+0x10e>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a14      	ldr	r2, [pc, #80]	@ (8009d20 <HAL_TIM_PWM_Start+0x15c>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d111      	bne.n	8009cf6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	f003 0307 	and.w	r3, r3, #7
 8009cdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2b06      	cmp	r3, #6
 8009ce2:	d010      	beq.n	8009d06 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f042 0201 	orr.w	r2, r2, #1
 8009cf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cf4:	e007      	b.n	8009d06 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f042 0201 	orr.w	r2, r2, #1
 8009d04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	40010000 	.word	0x40010000
 8009d14:	40000400 	.word	0x40000400
 8009d18:	40000800 	.word	0x40000800
 8009d1c:	40000c00 	.word	0x40000c00
 8009d20:	40014000 	.word	0x40014000

08009d24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b086      	sub	sp, #24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	e097      	b.n	8009e68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d106      	bne.n	8009d52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7fa f9bb 	bl	80040c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2202      	movs	r2, #2
 8009d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	6812      	ldr	r2, [r2, #0]
 8009d64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d68:	f023 0307 	bic.w	r3, r3, #7
 8009d6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	3304      	adds	r3, #4
 8009d76:	4619      	mov	r1, r3
 8009d78:	4610      	mov	r0, r2
 8009d7a:	f000 fbbf 	bl	800a4fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	6a1b      	ldr	r3, [r3, #32]
 8009d94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	697a      	ldr	r2, [r7, #20]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009da6:	f023 0303 	bic.w	r3, r3, #3
 8009daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	689a      	ldr	r2, [r3, #8]
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	021b      	lsls	r3, r3, #8
 8009db6:	4313      	orrs	r3, r2
 8009db8:	693a      	ldr	r2, [r7, #16]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009dc4:	f023 030c 	bic.w	r3, r3, #12
 8009dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009dd0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009dd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	68da      	ldr	r2, [r3, #12]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	69db      	ldr	r3, [r3, #28]
 8009dde:	021b      	lsls	r3, r3, #8
 8009de0:	4313      	orrs	r3, r2
 8009de2:	693a      	ldr	r2, [r7, #16]
 8009de4:	4313      	orrs	r3, r2
 8009de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	011a      	lsls	r2, r3, #4
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	6a1b      	ldr	r3, [r3, #32]
 8009df2:	031b      	lsls	r3, r3, #12
 8009df4:	4313      	orrs	r3, r2
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009e02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009e0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	685a      	ldr	r2, [r3, #4]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	011b      	lsls	r3, r3, #4
 8009e16:	4313      	orrs	r3, r2
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	697a      	ldr	r2, [r7, #20]
 8009e24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3718      	adds	r7, #24
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009e80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009e88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009e98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d110      	bne.n	8009ec2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ea0:	7bfb      	ldrb	r3, [r7, #15]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d102      	bne.n	8009eac <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ea6:	7b7b      	ldrb	r3, [r7, #13]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d001      	beq.n	8009eb0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e089      	b.n	8009fc4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2202      	movs	r2, #2
 8009eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2202      	movs	r2, #2
 8009ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ec0:	e031      	b.n	8009f26 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	2b04      	cmp	r3, #4
 8009ec6:	d110      	bne.n	8009eea <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ec8:	7bbb      	ldrb	r3, [r7, #14]
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d102      	bne.n	8009ed4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ece:	7b3b      	ldrb	r3, [r7, #12]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d001      	beq.n	8009ed8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e075      	b.n	8009fc4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2202      	movs	r2, #2
 8009edc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2202      	movs	r2, #2
 8009ee4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009ee8:	e01d      	b.n	8009f26 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d108      	bne.n	8009f02 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ef0:	7bbb      	ldrb	r3, [r7, #14]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d105      	bne.n	8009f02 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ef6:	7b7b      	ldrb	r3, [r7, #13]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d102      	bne.n	8009f02 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009efc:	7b3b      	ldrb	r3, [r7, #12]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d001      	beq.n	8009f06 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e05e      	b.n	8009fc4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2202      	movs	r2, #2
 8009f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2202      	movs	r2, #2
 8009f12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2202      	movs	r2, #2
 8009f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2202      	movs	r2, #2
 8009f22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d003      	beq.n	8009f34 <HAL_TIM_Encoder_Start_IT+0xc4>
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	2b04      	cmp	r3, #4
 8009f30:	d010      	beq.n	8009f54 <HAL_TIM_Encoder_Start_IT+0xe4>
 8009f32:	e01f      	b.n	8009f74 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f000 fd8f 	bl	800aa60 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68da      	ldr	r2, [r3, #12]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f042 0202 	orr.w	r2, r2, #2
 8009f50:	60da      	str	r2, [r3, #12]
      break;
 8009f52:	e02e      	b.n	8009fb2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	2104      	movs	r1, #4
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 fd7f 	bl	800aa60 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68da      	ldr	r2, [r3, #12]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f042 0204 	orr.w	r2, r2, #4
 8009f70:	60da      	str	r2, [r3, #12]
      break;
 8009f72:	e01e      	b.n	8009fb2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 fd6f 	bl	800aa60 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2201      	movs	r2, #1
 8009f88:	2104      	movs	r1, #4
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f000 fd68 	bl	800aa60 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68da      	ldr	r2, [r3, #12]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f042 0202 	orr.w	r2, r2, #2
 8009f9e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68da      	ldr	r2, [r3, #12]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f042 0204 	orr.w	r2, r2, #4
 8009fae:	60da      	str	r2, [r3, #12]
      break;
 8009fb0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f042 0201 	orr.w	r2, r2, #1
 8009fc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3710      	adds	r7, #16
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	f003 0302 	and.w	r3, r3, #2
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d020      	beq.n	800a030 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f003 0302 	and.w	r3, r3, #2
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d01b      	beq.n	800a030 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f06f 0202 	mvn.w	r2, #2
 800a000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2201      	movs	r2, #1
 800a006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	f003 0303 	and.w	r3, r3, #3
 800a012:	2b00      	cmp	r3, #0
 800a014:	d003      	beq.n	800a01e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f7f8 fbe2 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 800a01c:	e005      	b.n	800a02a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fa4d 	bl	800a4be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fa54 	bl	800a4d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	f003 0304 	and.w	r3, r3, #4
 800a036:	2b00      	cmp	r3, #0
 800a038:	d020      	beq.n	800a07c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f003 0304 	and.w	r3, r3, #4
 800a040:	2b00      	cmp	r3, #0
 800a042:	d01b      	beq.n	800a07c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f06f 0204 	mvn.w	r2, #4
 800a04c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2202      	movs	r2, #2
 800a052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	699b      	ldr	r3, [r3, #24]
 800a05a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7f8 fbbc 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 800a068:	e005      	b.n	800a076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fa27 	bl	800a4be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 fa2e 	bl	800a4d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	f003 0308 	and.w	r3, r3, #8
 800a082:	2b00      	cmp	r3, #0
 800a084:	d020      	beq.n	800a0c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f003 0308 	and.w	r3, r3, #8
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d01b      	beq.n	800a0c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f06f 0208 	mvn.w	r2, #8
 800a098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2204      	movs	r2, #4
 800a09e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	69db      	ldr	r3, [r3, #28]
 800a0a6:	f003 0303 	and.w	r3, r3, #3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d003      	beq.n	800a0b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7f8 fb96 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 800a0b4:	e005      	b.n	800a0c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fa01 	bl	800a4be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 fa08 	bl	800a4d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	f003 0310 	and.w	r3, r3, #16
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d020      	beq.n	800a114 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f003 0310 	and.w	r3, r3, #16
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d01b      	beq.n	800a114 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f06f 0210 	mvn.w	r2, #16
 800a0e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2208      	movs	r2, #8
 800a0ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	69db      	ldr	r3, [r3, #28]
 800a0f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d003      	beq.n	800a102 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7f8 fb70 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 800a100:	e005      	b.n	800a10e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f9db 	bl	800a4be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f9e2 	bl	800a4d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	f003 0301 	and.w	r3, r3, #1
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00c      	beq.n	800a138 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f003 0301 	and.w	r3, r3, #1
 800a124:	2b00      	cmp	r3, #0
 800a126:	d007      	beq.n	800a138 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f06f 0201 	mvn.w	r2, #1
 800a130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7f6 fb98 	bl	8000868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00c      	beq.n	800a15c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d007      	beq.n	800a15c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fd72 	bl	800ac40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00c      	beq.n	800a180 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d007      	beq.n	800a180 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f9b3 	bl	800a4e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	f003 0320 	and.w	r3, r3, #32
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00c      	beq.n	800a1a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f003 0320 	and.w	r3, r3, #32
 800a190:	2b00      	cmp	r3, #0
 800a192:	d007      	beq.n	800a1a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f06f 0220 	mvn.w	r2, #32
 800a19c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fd44 	bl	800ac2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1a4:	bf00      	nop
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b086      	sub	sp, #24
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d101      	bne.n	800a1ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a1c6:	2302      	movs	r3, #2
 800a1c8:	e0ae      	b.n	800a328 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2b0c      	cmp	r3, #12
 800a1d6:	f200 809f 	bhi.w	800a318 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a1da:	a201      	add	r2, pc, #4	@ (adr r2, 800a1e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e0:	0800a215 	.word	0x0800a215
 800a1e4:	0800a319 	.word	0x0800a319
 800a1e8:	0800a319 	.word	0x0800a319
 800a1ec:	0800a319 	.word	0x0800a319
 800a1f0:	0800a255 	.word	0x0800a255
 800a1f4:	0800a319 	.word	0x0800a319
 800a1f8:	0800a319 	.word	0x0800a319
 800a1fc:	0800a319 	.word	0x0800a319
 800a200:	0800a297 	.word	0x0800a297
 800a204:	0800a319 	.word	0x0800a319
 800a208:	0800a319 	.word	0x0800a319
 800a20c:	0800a319 	.word	0x0800a319
 800a210:	0800a2d7 	.word	0x0800a2d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68b9      	ldr	r1, [r7, #8]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f000 f9fa 	bl	800a614 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	699a      	ldr	r2, [r3, #24]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f042 0208 	orr.w	r2, r2, #8
 800a22e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699a      	ldr	r2, [r3, #24]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f022 0204 	bic.w	r2, r2, #4
 800a23e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	6999      	ldr	r1, [r3, #24]
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	691a      	ldr	r2, [r3, #16]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	430a      	orrs	r2, r1
 800a250:	619a      	str	r2, [r3, #24]
      break;
 800a252:	e064      	b.n	800a31e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	68b9      	ldr	r1, [r7, #8]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 fa40 	bl	800a6e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	699a      	ldr	r2, [r3, #24]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a26e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	699a      	ldr	r2, [r3, #24]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a27e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	6999      	ldr	r1, [r3, #24]
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	021a      	lsls	r2, r3, #8
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	430a      	orrs	r2, r1
 800a292:	619a      	str	r2, [r3, #24]
      break;
 800a294:	e043      	b.n	800a31e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68b9      	ldr	r1, [r7, #8]
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 fa8b 	bl	800a7b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	69da      	ldr	r2, [r3, #28]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f042 0208 	orr.w	r2, r2, #8
 800a2b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	69da      	ldr	r2, [r3, #28]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f022 0204 	bic.w	r2, r2, #4
 800a2c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	69d9      	ldr	r1, [r3, #28]
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	691a      	ldr	r2, [r3, #16]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	430a      	orrs	r2, r1
 800a2d2:	61da      	str	r2, [r3, #28]
      break;
 800a2d4:	e023      	b.n	800a31e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68b9      	ldr	r1, [r7, #8]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f000 fad5 	bl	800a88c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	69da      	ldr	r2, [r3, #28]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a2f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	69da      	ldr	r2, [r3, #28]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	69d9      	ldr	r1, [r3, #28]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	021a      	lsls	r2, r3, #8
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	430a      	orrs	r2, r1
 800a314:	61da      	str	r2, [r3, #28]
      break;
 800a316:	e002      	b.n	800a31e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	75fb      	strb	r3, [r7, #23]
      break;
 800a31c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2200      	movs	r2, #0
 800a322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a326:	7dfb      	ldrb	r3, [r7, #23]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3718      	adds	r7, #24
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a33a:	2300      	movs	r3, #0
 800a33c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a344:	2b01      	cmp	r3, #1
 800a346:	d101      	bne.n	800a34c <HAL_TIM_ConfigClockSource+0x1c>
 800a348:	2302      	movs	r3, #2
 800a34a:	e0b4      	b.n	800a4b6 <HAL_TIM_ConfigClockSource+0x186>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2202      	movs	r2, #2
 800a358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a36a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a372:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a384:	d03e      	beq.n	800a404 <HAL_TIM_ConfigClockSource+0xd4>
 800a386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a38a:	f200 8087 	bhi.w	800a49c <HAL_TIM_ConfigClockSource+0x16c>
 800a38e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a392:	f000 8086 	beq.w	800a4a2 <HAL_TIM_ConfigClockSource+0x172>
 800a396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a39a:	d87f      	bhi.n	800a49c <HAL_TIM_ConfigClockSource+0x16c>
 800a39c:	2b70      	cmp	r3, #112	@ 0x70
 800a39e:	d01a      	beq.n	800a3d6 <HAL_TIM_ConfigClockSource+0xa6>
 800a3a0:	2b70      	cmp	r3, #112	@ 0x70
 800a3a2:	d87b      	bhi.n	800a49c <HAL_TIM_ConfigClockSource+0x16c>
 800a3a4:	2b60      	cmp	r3, #96	@ 0x60
 800a3a6:	d050      	beq.n	800a44a <HAL_TIM_ConfigClockSource+0x11a>
 800a3a8:	2b60      	cmp	r3, #96	@ 0x60
 800a3aa:	d877      	bhi.n	800a49c <HAL_TIM_ConfigClockSource+0x16c>
 800a3ac:	2b50      	cmp	r3, #80	@ 0x50
 800a3ae:	d03c      	beq.n	800a42a <HAL_TIM_ConfigClockSource+0xfa>
 800a3b0:	2b50      	cmp	r3, #80	@ 0x50
 800a3b2:	d873      	bhi.n	800a49c <HAL_TIM_ConfigClockSource+0x16c>
 800a3b4:	2b40      	cmp	r3, #64	@ 0x40
 800a3b6:	d058      	beq.n	800a46a <HAL_TIM_ConfigClockSource+0x13a>
 800a3b8:	2b40      	cmp	r3, #64	@ 0x40
 800a3ba:	d86f      	bhi.n	800a49c <HAL_TIM_ConfigClockSource+0x16c>
 800a3bc:	2b30      	cmp	r3, #48	@ 0x30
 800a3be:	d064      	beq.n	800a48a <HAL_TIM_ConfigClockSource+0x15a>
 800a3c0:	2b30      	cmp	r3, #48	@ 0x30
 800a3c2:	d86b      	bhi.n	800a49c <HAL_TIM_ConfigClockSource+0x16c>
 800a3c4:	2b20      	cmp	r3, #32
 800a3c6:	d060      	beq.n	800a48a <HAL_TIM_ConfigClockSource+0x15a>
 800a3c8:	2b20      	cmp	r3, #32
 800a3ca:	d867      	bhi.n	800a49c <HAL_TIM_ConfigClockSource+0x16c>
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d05c      	beq.n	800a48a <HAL_TIM_ConfigClockSource+0x15a>
 800a3d0:	2b10      	cmp	r3, #16
 800a3d2:	d05a      	beq.n	800a48a <HAL_TIM_ConfigClockSource+0x15a>
 800a3d4:	e062      	b.n	800a49c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a3e6:	f000 fb1b 	bl	800aa20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a3f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	609a      	str	r2, [r3, #8]
      break;
 800a402:	e04f      	b.n	800a4a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a414:	f000 fb04 	bl	800aa20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	689a      	ldr	r2, [r3, #8]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a426:	609a      	str	r2, [r3, #8]
      break;
 800a428:	e03c      	b.n	800a4a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a436:	461a      	mov	r2, r3
 800a438:	f000 fa78 	bl	800a92c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2150      	movs	r1, #80	@ 0x50
 800a442:	4618      	mov	r0, r3
 800a444:	f000 fad1 	bl	800a9ea <TIM_ITRx_SetConfig>
      break;
 800a448:	e02c      	b.n	800a4a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a456:	461a      	mov	r2, r3
 800a458:	f000 fa97 	bl	800a98a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2160      	movs	r1, #96	@ 0x60
 800a462:	4618      	mov	r0, r3
 800a464:	f000 fac1 	bl	800a9ea <TIM_ITRx_SetConfig>
      break;
 800a468:	e01c      	b.n	800a4a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a476:	461a      	mov	r2, r3
 800a478:	f000 fa58 	bl	800a92c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2140      	movs	r1, #64	@ 0x40
 800a482:	4618      	mov	r0, r3
 800a484:	f000 fab1 	bl	800a9ea <TIM_ITRx_SetConfig>
      break;
 800a488:	e00c      	b.n	800a4a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4619      	mov	r1, r3
 800a494:	4610      	mov	r0, r2
 800a496:	f000 faa8 	bl	800a9ea <TIM_ITRx_SetConfig>
      break;
 800a49a:	e003      	b.n	800a4a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	73fb      	strb	r3, [r7, #15]
      break;
 800a4a0:	e000      	b.n	800a4a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a4a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4be:	b480      	push	{r7}
 800a4c0:	b083      	sub	sp, #12
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4c6:	bf00      	nop
 800a4c8:	370c      	adds	r7, #12
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	b083      	sub	sp, #12
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4da:	bf00      	nop
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b083      	sub	sp, #12
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4ee:	bf00      	nop
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
	...

0800a4fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a3a      	ldr	r2, [pc, #232]	@ (800a5f8 <TIM_Base_SetConfig+0xfc>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d00f      	beq.n	800a534 <TIM_Base_SetConfig+0x38>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a51a:	d00b      	beq.n	800a534 <TIM_Base_SetConfig+0x38>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a37      	ldr	r2, [pc, #220]	@ (800a5fc <TIM_Base_SetConfig+0x100>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d007      	beq.n	800a534 <TIM_Base_SetConfig+0x38>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a36      	ldr	r2, [pc, #216]	@ (800a600 <TIM_Base_SetConfig+0x104>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d003      	beq.n	800a534 <TIM_Base_SetConfig+0x38>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a35      	ldr	r2, [pc, #212]	@ (800a604 <TIM_Base_SetConfig+0x108>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d108      	bne.n	800a546 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a53a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	4313      	orrs	r3, r2
 800a544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a2b      	ldr	r2, [pc, #172]	@ (800a5f8 <TIM_Base_SetConfig+0xfc>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d01b      	beq.n	800a586 <TIM_Base_SetConfig+0x8a>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a554:	d017      	beq.n	800a586 <TIM_Base_SetConfig+0x8a>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a28      	ldr	r2, [pc, #160]	@ (800a5fc <TIM_Base_SetConfig+0x100>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d013      	beq.n	800a586 <TIM_Base_SetConfig+0x8a>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a27      	ldr	r2, [pc, #156]	@ (800a600 <TIM_Base_SetConfig+0x104>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d00f      	beq.n	800a586 <TIM_Base_SetConfig+0x8a>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a26      	ldr	r2, [pc, #152]	@ (800a604 <TIM_Base_SetConfig+0x108>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d00b      	beq.n	800a586 <TIM_Base_SetConfig+0x8a>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a25      	ldr	r2, [pc, #148]	@ (800a608 <TIM_Base_SetConfig+0x10c>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d007      	beq.n	800a586 <TIM_Base_SetConfig+0x8a>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a24      	ldr	r2, [pc, #144]	@ (800a60c <TIM_Base_SetConfig+0x110>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d003      	beq.n	800a586 <TIM_Base_SetConfig+0x8a>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a23      	ldr	r2, [pc, #140]	@ (800a610 <TIM_Base_SetConfig+0x114>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d108      	bne.n	800a598 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a58c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	4313      	orrs	r3, r2
 800a596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	689a      	ldr	r2, [r3, #8]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a0e      	ldr	r2, [pc, #56]	@ (800a5f8 <TIM_Base_SetConfig+0xfc>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d103      	bne.n	800a5cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	691a      	ldr	r2, [r3, #16]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	691b      	ldr	r3, [r3, #16]
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d105      	bne.n	800a5ea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	f023 0201 	bic.w	r2, r3, #1
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	611a      	str	r2, [r3, #16]
  }
}
 800a5ea:	bf00      	nop
 800a5ec:	3714      	adds	r7, #20
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	40010000 	.word	0x40010000
 800a5fc:	40000400 	.word	0x40000400
 800a600:	40000800 	.word	0x40000800
 800a604:	40000c00 	.word	0x40000c00
 800a608:	40014000 	.word	0x40014000
 800a60c:	40014400 	.word	0x40014400
 800a610:	40014800 	.word	0x40014800

0800a614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a614:	b480      	push	{r7}
 800a616:	b087      	sub	sp, #28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a1b      	ldr	r3, [r3, #32]
 800a628:	f023 0201 	bic.w	r2, r3, #1
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f023 0303 	bic.w	r3, r3, #3
 800a64a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	4313      	orrs	r3, r2
 800a654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	f023 0302 	bic.w	r3, r3, #2
 800a65c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	4313      	orrs	r3, r2
 800a666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a1c      	ldr	r2, [pc, #112]	@ (800a6dc <TIM_OC1_SetConfig+0xc8>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d10c      	bne.n	800a68a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	f023 0308 	bic.w	r3, r3, #8
 800a676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	697a      	ldr	r2, [r7, #20]
 800a67e:	4313      	orrs	r3, r2
 800a680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f023 0304 	bic.w	r3, r3, #4
 800a688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a13      	ldr	r2, [pc, #76]	@ (800a6dc <TIM_OC1_SetConfig+0xc8>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d111      	bne.n	800a6b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a6a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	693a      	ldr	r2, [r7, #16]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	699b      	ldr	r3, [r3, #24]
 800a6b0:	693a      	ldr	r2, [r7, #16]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	685a      	ldr	r2, [r3, #4]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	621a      	str	r2, [r3, #32]
}
 800a6d0:	bf00      	nop
 800a6d2:	371c      	adds	r7, #28
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	40010000 	.word	0x40010000

0800a6e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b087      	sub	sp, #28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a1b      	ldr	r3, [r3, #32]
 800a6f4:	f023 0210 	bic.w	r2, r3, #16
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	699b      	ldr	r3, [r3, #24]
 800a706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a70e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	021b      	lsls	r3, r3, #8
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	4313      	orrs	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	f023 0320 	bic.w	r3, r3, #32
 800a72a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	011b      	lsls	r3, r3, #4
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	4313      	orrs	r3, r2
 800a736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a1e      	ldr	r2, [pc, #120]	@ (800a7b4 <TIM_OC2_SetConfig+0xd4>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d10d      	bne.n	800a75c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	011b      	lsls	r3, r3, #4
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	4313      	orrs	r3, r2
 800a752:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a75a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a15      	ldr	r2, [pc, #84]	@ (800a7b4 <TIM_OC2_SetConfig+0xd4>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d113      	bne.n	800a78c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a76a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	695b      	ldr	r3, [r3, #20]
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	693a      	ldr	r2, [r7, #16]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	699b      	ldr	r3, [r3, #24]
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	693a      	ldr	r2, [r7, #16]
 800a788:	4313      	orrs	r3, r2
 800a78a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	693a      	ldr	r2, [r7, #16]
 800a790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	621a      	str	r2, [r3, #32]
}
 800a7a6:	bf00      	nop
 800a7a8:	371c      	adds	r7, #28
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	40010000 	.word	0x40010000

0800a7b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b087      	sub	sp, #28
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a1b      	ldr	r3, [r3, #32]
 800a7c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a1b      	ldr	r3, [r3, #32]
 800a7cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	69db      	ldr	r3, [r3, #28]
 800a7de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f023 0303 	bic.w	r3, r3, #3
 800a7ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	021b      	lsls	r3, r3, #8
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a1d      	ldr	r2, [pc, #116]	@ (800a888 <TIM_OC3_SetConfig+0xd0>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d10d      	bne.n	800a832 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a81c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	021b      	lsls	r3, r3, #8
 800a824:	697a      	ldr	r2, [r7, #20]
 800a826:	4313      	orrs	r3, r2
 800a828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a14      	ldr	r2, [pc, #80]	@ (800a888 <TIM_OC3_SetConfig+0xd0>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d113      	bne.n	800a862 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	011b      	lsls	r3, r3, #4
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	4313      	orrs	r3, r2
 800a854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	011b      	lsls	r3, r3, #4
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	4313      	orrs	r3, r2
 800a860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	693a      	ldr	r2, [r7, #16]
 800a866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	685a      	ldr	r2, [r3, #4]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	621a      	str	r2, [r3, #32]
}
 800a87c:	bf00      	nop
 800a87e:	371c      	adds	r7, #28
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	40010000 	.word	0x40010000

0800a88c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b087      	sub	sp, #28
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a1b      	ldr	r3, [r3, #32]
 800a8a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	021b      	lsls	r3, r3, #8
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a8d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	031b      	lsls	r3, r3, #12
 800a8de:	693a      	ldr	r2, [r7, #16]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a10      	ldr	r2, [pc, #64]	@ (800a928 <TIM_OC4_SetConfig+0x9c>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d109      	bne.n	800a900 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a8f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	695b      	ldr	r3, [r3, #20]
 800a8f8:	019b      	lsls	r3, r3, #6
 800a8fa:	697a      	ldr	r2, [r7, #20]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	697a      	ldr	r2, [r7, #20]
 800a904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	621a      	str	r2, [r3, #32]
}
 800a91a:	bf00      	nop
 800a91c:	371c      	adds	r7, #28
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	40010000 	.word	0x40010000

0800a92c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b087      	sub	sp, #28
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6a1b      	ldr	r3, [r3, #32]
 800a93c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	f023 0201 	bic.w	r2, r3, #1
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	011b      	lsls	r3, r3, #4
 800a95c:	693a      	ldr	r2, [r7, #16]
 800a95e:	4313      	orrs	r3, r2
 800a960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	f023 030a 	bic.w	r3, r3, #10
 800a968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	4313      	orrs	r3, r2
 800a970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	621a      	str	r2, [r3, #32]
}
 800a97e:	bf00      	nop
 800a980:	371c      	adds	r7, #28
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b087      	sub	sp, #28
 800a98e:	af00      	add	r7, sp, #0
 800a990:	60f8      	str	r0, [r7, #12]
 800a992:	60b9      	str	r1, [r7, #8]
 800a994:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6a1b      	ldr	r3, [r3, #32]
 800a9a0:	f023 0210 	bic.w	r2, r3, #16
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a9b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	031b      	lsls	r3, r3, #12
 800a9ba:	693a      	ldr	r2, [r7, #16]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a9c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	011b      	lsls	r3, r3, #4
 800a9cc:	697a      	ldr	r2, [r7, #20]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	693a      	ldr	r2, [r7, #16]
 800a9d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	621a      	str	r2, [r3, #32]
}
 800a9de:	bf00      	nop
 800a9e0:	371c      	adds	r7, #28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	f043 0307 	orr.w	r3, r3, #7
 800aa0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	609a      	str	r2, [r3, #8]
}
 800aa14:	bf00      	nop
 800aa16:	3714      	adds	r7, #20
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b087      	sub	sp, #28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
 800aa2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aa3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	021a      	lsls	r2, r3, #8
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	431a      	orrs	r2, r3
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	609a      	str	r2, [r3, #8]
}
 800aa54:	bf00      	nop
 800aa56:	371c      	adds	r7, #28
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b087      	sub	sp, #28
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	f003 031f 	and.w	r3, r3, #31
 800aa72:	2201      	movs	r2, #1
 800aa74:	fa02 f303 	lsl.w	r3, r2, r3
 800aa78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6a1a      	ldr	r2, [r3, #32]
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	43db      	mvns	r3, r3
 800aa82:	401a      	ands	r2, r3
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6a1a      	ldr	r2, [r3, #32]
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	f003 031f 	and.w	r3, r3, #31
 800aa92:	6879      	ldr	r1, [r7, #4]
 800aa94:	fa01 f303 	lsl.w	r3, r1, r3
 800aa98:	431a      	orrs	r2, r3
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	621a      	str	r2, [r3, #32]
}
 800aa9e:	bf00      	nop
 800aaa0:	371c      	adds	r7, #28
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
	...

0800aaac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d101      	bne.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aac0:	2302      	movs	r3, #2
 800aac2:	e050      	b.n	800ab66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2202      	movs	r2, #2
 800aad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a1c      	ldr	r2, [pc, #112]	@ (800ab74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d018      	beq.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab10:	d013      	beq.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a18      	ldr	r2, [pc, #96]	@ (800ab78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d00e      	beq.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a16      	ldr	r2, [pc, #88]	@ (800ab7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d009      	beq.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a15      	ldr	r2, [pc, #84]	@ (800ab80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d004      	beq.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a13      	ldr	r2, [pc, #76]	@ (800ab84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d10c      	bne.n	800ab54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68ba      	ldr	r2, [r7, #8]
 800ab52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3714      	adds	r7, #20
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	40010000 	.word	0x40010000
 800ab78:	40000400 	.word	0x40000400
 800ab7c:	40000800 	.word	0x40000800
 800ab80:	40000c00 	.word	0x40000c00
 800ab84:	40014000 	.word	0x40014000

0800ab88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ab92:	2300      	movs	r3, #0
 800ab94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d101      	bne.n	800aba4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aba0:	2302      	movs	r3, #2
 800aba2:	e03d      	b.n	800ac20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	4313      	orrs	r3, r2
 800abf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	695b      	ldr	r3, [r3, #20]
 800abfc:	4313      	orrs	r3, r2
 800abfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	69db      	ldr	r3, [r3, #28]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3714      	adds	r7, #20
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac48:	bf00      	nop
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d101      	bne.n	800ac66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e042      	b.n	800acec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d106      	bne.n	800ac80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f7f9 fad8 	bl	8004230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2224      	movs	r2, #36	@ 0x24
 800ac84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	68da      	ldr	r2, [r3, #12]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ac96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fa9f 	bl	800b1dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	691a      	ldr	r2, [r3, #16]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800acac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	695a      	ldr	r2, [r3, #20]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800acbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	68da      	ldr	r2, [r3, #12]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800accc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2220      	movs	r2, #32
 800acd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2220      	movs	r2, #32
 800ace0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	4613      	mov	r3, r2
 800ad00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	2b20      	cmp	r3, #32
 800ad0c:	d112      	bne.n	800ad34 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d002      	beq.n	800ad1a <HAL_UART_Receive_DMA+0x26>
 800ad14:	88fb      	ldrh	r3, [r7, #6]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d101      	bne.n	800ad1e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e00b      	b.n	800ad36 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2200      	movs	r2, #0
 800ad22:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ad24:	88fb      	ldrh	r3, [r7, #6]
 800ad26:	461a      	mov	r2, r3
 800ad28:	68b9      	ldr	r1, [r7, #8]
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f000 f930 	bl	800af90 <UART_Start_Receive_DMA>
 800ad30:	4603      	mov	r3, r0
 800ad32:	e000      	b.n	800ad36 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800ad34:	2302      	movs	r3, #2
  }
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad3e:	b480      	push	{r7}
 800ad40:	b083      	sub	sp, #12
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ad46:	bf00      	nop
 800ad48:	370c      	adds	r7, #12
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad52:	b480      	push	{r7}
 800ad54:	b083      	sub	sp, #12
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ad5a:	bf00      	nop
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad66:	b480      	push	{r7}
 800ad68:	b083      	sub	sp, #12
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ad6e:	bf00      	nop
 800ad70:	370c      	adds	r7, #12
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b083      	sub	sp, #12
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
 800ad82:	460b      	mov	r3, r1
 800ad84:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ad86:	bf00      	nop
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b09c      	sub	sp, #112	@ 0x70
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad9e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d172      	bne.n	800ae94 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800adae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adb0:	2200      	movs	r2, #0
 800adb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	330c      	adds	r3, #12
 800adba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adbe:	e853 3f00 	ldrex	r3, [r3]
 800adc2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800adc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adc6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800adca:	66bb      	str	r3, [r7, #104]	@ 0x68
 800adcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	330c      	adds	r3, #12
 800add2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800add4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800add6:	657b      	str	r3, [r7, #84]	@ 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800adda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800addc:	e841 2300 	strex	r3, r2, [r1]
 800ade0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ade2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1e5      	bne.n	800adb4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ade8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	3314      	adds	r3, #20
 800adee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf2:	e853 3f00 	ldrex	r3, [r3]
 800adf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800adf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adfa:	f023 0301 	bic.w	r3, r3, #1
 800adfe:	667b      	str	r3, [r7, #100]	@ 0x64
 800ae00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	3314      	adds	r3, #20
 800ae06:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ae08:	647a      	str	r2, [r7, #68]	@ 0x44
 800ae0a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae10:	e841 2300 	strex	r3, r2, [r1]
 800ae14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1e5      	bne.n	800ade8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	3314      	adds	r3, #20
 800ae22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae26:	e853 3f00 	ldrex	r3, [r3]
 800ae2a:	623b      	str	r3, [r7, #32]
   return(result);
 800ae2c:	6a3b      	ldr	r3, [r7, #32]
 800ae2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae32:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	3314      	adds	r3, #20
 800ae3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ae3c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ae3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae44:	e841 2300 	strex	r3, r2, [r1]
 800ae48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1e5      	bne.n	800ae1c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ae50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae52:	2220      	movs	r2, #32
 800ae54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d119      	bne.n	800ae94 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	330c      	adds	r3, #12
 800ae66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	e853 3f00 	ldrex	r3, [r3]
 800ae6e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f023 0310 	bic.w	r3, r3, #16
 800ae76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	330c      	adds	r3, #12
 800ae7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ae80:	61fa      	str	r2, [r7, #28]
 800ae82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae84:	69b9      	ldr	r1, [r7, #24]
 800ae86:	69fa      	ldr	r2, [r7, #28]
 800ae88:	e841 2300 	strex	r3, r2, [r1]
 800ae8c:	617b      	str	r3, [r7, #20]
   return(result);
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d1e5      	bne.n	800ae60 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae96:	2200      	movs	r2, #0
 800ae98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d106      	bne.n	800aeb0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aea2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aea4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aea6:	4619      	mov	r1, r3
 800aea8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aeaa:	f7ff ff66 	bl	800ad7a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aeae:	e002      	b.n	800aeb6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800aeb0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aeb2:	f7ff ff44 	bl	800ad3e <HAL_UART_RxCpltCallback>
}
 800aeb6:	bf00      	nop
 800aeb8:	3770      	adds	r7, #112	@ 0x70
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b084      	sub	sp, #16
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2201      	movs	r2, #1
 800aed0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d108      	bne.n	800aeec <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aede:	085b      	lsrs	r3, r3, #1
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	4619      	mov	r1, r3
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f7ff ff48 	bl	800ad7a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aeea:	e002      	b.n	800aef2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f7ff ff30 	bl	800ad52 <HAL_UART_RxHalfCpltCallback>
}
 800aef2:	bf00      	nop
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b084      	sub	sp, #16
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800af02:	2300      	movs	r3, #0
 800af04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	695b      	ldr	r3, [r3, #20]
 800af12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af16:	2b80      	cmp	r3, #128	@ 0x80
 800af18:	bf0c      	ite	eq
 800af1a:	2301      	moveq	r3, #1
 800af1c:	2300      	movne	r3, #0
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	2b21      	cmp	r3, #33	@ 0x21
 800af2c:	d108      	bne.n	800af40 <UART_DMAError+0x46>
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d005      	beq.n	800af40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	2200      	movs	r2, #0
 800af38:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800af3a:	68b8      	ldr	r0, [r7, #8]
 800af3c:	f000 f8c2 	bl	800b0c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af4a:	2b40      	cmp	r3, #64	@ 0x40
 800af4c:	bf0c      	ite	eq
 800af4e:	2301      	moveq	r3, #1
 800af50:	2300      	movne	r3, #0
 800af52:	b2db      	uxtb	r3, r3
 800af54:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	2b22      	cmp	r3, #34	@ 0x22
 800af60:	d108      	bne.n	800af74 <UART_DMAError+0x7a>
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d005      	beq.n	800af74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	2200      	movs	r2, #0
 800af6c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800af6e:	68b8      	ldr	r0, [r7, #8]
 800af70:	f000 f8d0 	bl	800b114 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af78:	f043 0210 	orr.w	r2, r3, #16
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af80:	68b8      	ldr	r0, [r7, #8]
 800af82:	f7ff fef0 	bl	800ad66 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af86:	bf00      	nop
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
	...

0800af90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b098      	sub	sp, #96	@ 0x60
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	4613      	mov	r3, r2
 800af9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800af9e:	68ba      	ldr	r2, [r7, #8]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	88fa      	ldrh	r2, [r7, #6]
 800afa8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2200      	movs	r2, #0
 800afae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2222      	movs	r2, #34	@ 0x22
 800afb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afbc:	4a3e      	ldr	r2, [pc, #248]	@ (800b0b8 <UART_Start_Receive_DMA+0x128>)
 800afbe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afc4:	4a3d      	ldr	r2, [pc, #244]	@ (800b0bc <UART_Start_Receive_DMA+0x12c>)
 800afc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afcc:	4a3c      	ldr	r2, [pc, #240]	@ (800b0c0 <UART_Start_Receive_DMA+0x130>)
 800afce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afd4:	2200      	movs	r2, #0
 800afd6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800afd8:	f107 0308 	add.w	r3, r7, #8
 800afdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	3304      	adds	r3, #4
 800afe8:	4619      	mov	r1, r3
 800afea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	88fb      	ldrh	r3, [r7, #6]
 800aff0:	f7f9 ff30 	bl	8004e54 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800aff4:	2300      	movs	r3, #0
 800aff6:	613b      	str	r3, [r7, #16]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	613b      	str	r3, [r7, #16]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	613b      	str	r3, [r7, #16]
 800b008:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d019      	beq.n	800b046 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	330c      	adds	r3, #12
 800b018:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b01c:	e853 3f00 	ldrex	r3, [r3]
 800b020:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b028:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	330c      	adds	r3, #12
 800b030:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b032:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b034:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b036:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b038:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b03a:	e841 2300 	strex	r3, r2, [r1]
 800b03e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1e5      	bne.n	800b012 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	3314      	adds	r3, #20
 800b04c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b050:	e853 3f00 	ldrex	r3, [r3]
 800b054:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b058:	f043 0301 	orr.w	r3, r3, #1
 800b05c:	657b      	str	r3, [r7, #84]	@ 0x54
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	3314      	adds	r3, #20
 800b064:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b066:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b068:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b06c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b06e:	e841 2300 	strex	r3, r2, [r1]
 800b072:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1e5      	bne.n	800b046 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	3314      	adds	r3, #20
 800b080:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	e853 3f00 	ldrex	r3, [r3]
 800b088:	617b      	str	r3, [r7, #20]
   return(result);
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b090:	653b      	str	r3, [r7, #80]	@ 0x50
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	3314      	adds	r3, #20
 800b098:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b09a:	627a      	str	r2, [r7, #36]	@ 0x24
 800b09c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09e:	6a39      	ldr	r1, [r7, #32]
 800b0a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0a2:	e841 2300 	strex	r3, r2, [r1]
 800b0a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1e5      	bne.n	800b07a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3760      	adds	r7, #96	@ 0x60
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	0800ad93 	.word	0x0800ad93
 800b0bc:	0800aebf 	.word	0x0800aebf
 800b0c0:	0800aefb 	.word	0x0800aefb

0800b0c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b089      	sub	sp, #36	@ 0x24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	330c      	adds	r3, #12
 800b0d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	e853 3f00 	ldrex	r3, [r3]
 800b0da:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b0e2:	61fb      	str	r3, [r7, #28]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	330c      	adds	r3, #12
 800b0ea:	69fa      	ldr	r2, [r7, #28]
 800b0ec:	61ba      	str	r2, [r7, #24]
 800b0ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f0:	6979      	ldr	r1, [r7, #20]
 800b0f2:	69ba      	ldr	r2, [r7, #24]
 800b0f4:	e841 2300 	strex	r3, r2, [r1]
 800b0f8:	613b      	str	r3, [r7, #16]
   return(result);
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1e5      	bne.n	800b0cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2220      	movs	r2, #32
 800b104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800b108:	bf00      	nop
 800b10a:	3724      	adds	r7, #36	@ 0x24
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b114:	b480      	push	{r7}
 800b116:	b095      	sub	sp, #84	@ 0x54
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	330c      	adds	r3, #12
 800b122:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b126:	e853 3f00 	ldrex	r3, [r3]
 800b12a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b12e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	330c      	adds	r3, #12
 800b13a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b13c:	643a      	str	r2, [r7, #64]	@ 0x40
 800b13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b140:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b142:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b144:	e841 2300 	strex	r3, r2, [r1]
 800b148:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1e5      	bne.n	800b11c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	3314      	adds	r3, #20
 800b156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b158:	6a3b      	ldr	r3, [r7, #32]
 800b15a:	e853 3f00 	ldrex	r3, [r3]
 800b15e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b160:	69fb      	ldr	r3, [r7, #28]
 800b162:	f023 0301 	bic.w	r3, r3, #1
 800b166:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	3314      	adds	r3, #20
 800b16e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b170:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b172:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b174:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b178:	e841 2300 	strex	r3, r2, [r1]
 800b17c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b180:	2b00      	cmp	r3, #0
 800b182:	d1e5      	bne.n	800b150 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d119      	bne.n	800b1c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	330c      	adds	r3, #12
 800b192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	e853 3f00 	ldrex	r3, [r3]
 800b19a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	f023 0310 	bic.w	r3, r3, #16
 800b1a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	330c      	adds	r3, #12
 800b1aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1ac:	61ba      	str	r2, [r7, #24]
 800b1ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b0:	6979      	ldr	r1, [r7, #20]
 800b1b2:	69ba      	ldr	r2, [r7, #24]
 800b1b4:	e841 2300 	strex	r3, r2, [r1]
 800b1b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d1e5      	bne.n	800b18c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2220      	movs	r2, #32
 800b1c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b1ce:	bf00      	nop
 800b1d0:	3754      	adds	r7, #84	@ 0x54
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr
	...

0800b1dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1e0:	b0c0      	sub	sp, #256	@ 0x100
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b1f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1f8:	68d9      	ldr	r1, [r3, #12]
 800b1fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	ea40 0301 	orr.w	r3, r0, r1
 800b204:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b20a:	689a      	ldr	r2, [r3, #8]
 800b20c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	431a      	orrs	r2, r3
 800b214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b218:	695b      	ldr	r3, [r3, #20]
 800b21a:	431a      	orrs	r2, r3
 800b21c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	4313      	orrs	r3, r2
 800b224:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b234:	f021 010c 	bic.w	r1, r1, #12
 800b238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b242:	430b      	orrs	r3, r1
 800b244:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b256:	6999      	ldr	r1, [r3, #24]
 800b258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	ea40 0301 	orr.w	r3, r0, r1
 800b262:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	4b8f      	ldr	r3, [pc, #572]	@ (800b4a8 <UART_SetConfig+0x2cc>)
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d005      	beq.n	800b27c <UART_SetConfig+0xa0>
 800b270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	4b8d      	ldr	r3, [pc, #564]	@ (800b4ac <UART_SetConfig+0x2d0>)
 800b278:	429a      	cmp	r2, r3
 800b27a:	d104      	bne.n	800b286 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b27c:	f7fd fbd2 	bl	8008a24 <HAL_RCC_GetPCLK2Freq>
 800b280:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b284:	e003      	b.n	800b28e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b286:	f7fd fbb9 	bl	80089fc <HAL_RCC_GetPCLK1Freq>
 800b28a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b28e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b292:	69db      	ldr	r3, [r3, #28]
 800b294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b298:	f040 810c 	bne.w	800b4b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b29c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b2a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b2aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b2ae:	4622      	mov	r2, r4
 800b2b0:	462b      	mov	r3, r5
 800b2b2:	1891      	adds	r1, r2, r2
 800b2b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b2b6:	415b      	adcs	r3, r3
 800b2b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b2ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b2be:	4621      	mov	r1, r4
 800b2c0:	eb12 0801 	adds.w	r8, r2, r1
 800b2c4:	4629      	mov	r1, r5
 800b2c6:	eb43 0901 	adc.w	r9, r3, r1
 800b2ca:	f04f 0200 	mov.w	r2, #0
 800b2ce:	f04f 0300 	mov.w	r3, #0
 800b2d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b2d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b2da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b2de:	4690      	mov	r8, r2
 800b2e0:	4699      	mov	r9, r3
 800b2e2:	4623      	mov	r3, r4
 800b2e4:	eb18 0303 	adds.w	r3, r8, r3
 800b2e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b2ec:	462b      	mov	r3, r5
 800b2ee:	eb49 0303 	adc.w	r3, r9, r3
 800b2f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b2f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b302:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b306:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b30a:	460b      	mov	r3, r1
 800b30c:	18db      	adds	r3, r3, r3
 800b30e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b310:	4613      	mov	r3, r2
 800b312:	eb42 0303 	adc.w	r3, r2, r3
 800b316:	657b      	str	r3, [r7, #84]	@ 0x54
 800b318:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b31c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b320:	f7f4 ff58 	bl	80001d4 <__aeabi_uldivmod>
 800b324:	4602      	mov	r2, r0
 800b326:	460b      	mov	r3, r1
 800b328:	4b61      	ldr	r3, [pc, #388]	@ (800b4b0 <UART_SetConfig+0x2d4>)
 800b32a:	fba3 2302 	umull	r2, r3, r3, r2
 800b32e:	095b      	lsrs	r3, r3, #5
 800b330:	011c      	lsls	r4, r3, #4
 800b332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b336:	2200      	movs	r2, #0
 800b338:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b33c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b340:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b344:	4642      	mov	r2, r8
 800b346:	464b      	mov	r3, r9
 800b348:	1891      	adds	r1, r2, r2
 800b34a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b34c:	415b      	adcs	r3, r3
 800b34e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b350:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b354:	4641      	mov	r1, r8
 800b356:	eb12 0a01 	adds.w	sl, r2, r1
 800b35a:	4649      	mov	r1, r9
 800b35c:	eb43 0b01 	adc.w	fp, r3, r1
 800b360:	f04f 0200 	mov.w	r2, #0
 800b364:	f04f 0300 	mov.w	r3, #0
 800b368:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b36c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b374:	4692      	mov	sl, r2
 800b376:	469b      	mov	fp, r3
 800b378:	4643      	mov	r3, r8
 800b37a:	eb1a 0303 	adds.w	r3, sl, r3
 800b37e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b382:	464b      	mov	r3, r9
 800b384:	eb4b 0303 	adc.w	r3, fp, r3
 800b388:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b38c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b398:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b39c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	18db      	adds	r3, r3, r3
 800b3a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	eb42 0303 	adc.w	r3, r2, r3
 800b3ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b3b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b3b6:	f7f4 ff0d 	bl	80001d4 <__aeabi_uldivmod>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	460b      	mov	r3, r1
 800b3be:	4611      	mov	r1, r2
 800b3c0:	4b3b      	ldr	r3, [pc, #236]	@ (800b4b0 <UART_SetConfig+0x2d4>)
 800b3c2:	fba3 2301 	umull	r2, r3, r3, r1
 800b3c6:	095b      	lsrs	r3, r3, #5
 800b3c8:	2264      	movs	r2, #100	@ 0x64
 800b3ca:	fb02 f303 	mul.w	r3, r2, r3
 800b3ce:	1acb      	subs	r3, r1, r3
 800b3d0:	00db      	lsls	r3, r3, #3
 800b3d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b3d6:	4b36      	ldr	r3, [pc, #216]	@ (800b4b0 <UART_SetConfig+0x2d4>)
 800b3d8:	fba3 2302 	umull	r2, r3, r3, r2
 800b3dc:	095b      	lsrs	r3, r3, #5
 800b3de:	005b      	lsls	r3, r3, #1
 800b3e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b3e4:	441c      	add	r4, r3
 800b3e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b3f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b3f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b3f8:	4642      	mov	r2, r8
 800b3fa:	464b      	mov	r3, r9
 800b3fc:	1891      	adds	r1, r2, r2
 800b3fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b400:	415b      	adcs	r3, r3
 800b402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b404:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b408:	4641      	mov	r1, r8
 800b40a:	1851      	adds	r1, r2, r1
 800b40c:	6339      	str	r1, [r7, #48]	@ 0x30
 800b40e:	4649      	mov	r1, r9
 800b410:	414b      	adcs	r3, r1
 800b412:	637b      	str	r3, [r7, #52]	@ 0x34
 800b414:	f04f 0200 	mov.w	r2, #0
 800b418:	f04f 0300 	mov.w	r3, #0
 800b41c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b420:	4659      	mov	r1, fp
 800b422:	00cb      	lsls	r3, r1, #3
 800b424:	4651      	mov	r1, sl
 800b426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b42a:	4651      	mov	r1, sl
 800b42c:	00ca      	lsls	r2, r1, #3
 800b42e:	4610      	mov	r0, r2
 800b430:	4619      	mov	r1, r3
 800b432:	4603      	mov	r3, r0
 800b434:	4642      	mov	r2, r8
 800b436:	189b      	adds	r3, r3, r2
 800b438:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b43c:	464b      	mov	r3, r9
 800b43e:	460a      	mov	r2, r1
 800b440:	eb42 0303 	adc.w	r3, r2, r3
 800b444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b454:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b458:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b45c:	460b      	mov	r3, r1
 800b45e:	18db      	adds	r3, r3, r3
 800b460:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b462:	4613      	mov	r3, r2
 800b464:	eb42 0303 	adc.w	r3, r2, r3
 800b468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b46a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b46e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b472:	f7f4 feaf 	bl	80001d4 <__aeabi_uldivmod>
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	4b0d      	ldr	r3, [pc, #52]	@ (800b4b0 <UART_SetConfig+0x2d4>)
 800b47c:	fba3 1302 	umull	r1, r3, r3, r2
 800b480:	095b      	lsrs	r3, r3, #5
 800b482:	2164      	movs	r1, #100	@ 0x64
 800b484:	fb01 f303 	mul.w	r3, r1, r3
 800b488:	1ad3      	subs	r3, r2, r3
 800b48a:	00db      	lsls	r3, r3, #3
 800b48c:	3332      	adds	r3, #50	@ 0x32
 800b48e:	4a08      	ldr	r2, [pc, #32]	@ (800b4b0 <UART_SetConfig+0x2d4>)
 800b490:	fba2 2303 	umull	r2, r3, r2, r3
 800b494:	095b      	lsrs	r3, r3, #5
 800b496:	f003 0207 	and.w	r2, r3, #7
 800b49a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4422      	add	r2, r4
 800b4a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b4a4:	e106      	b.n	800b6b4 <UART_SetConfig+0x4d8>
 800b4a6:	bf00      	nop
 800b4a8:	40011000 	.word	0x40011000
 800b4ac:	40011400 	.word	0x40011400
 800b4b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b4b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b4be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b4c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b4c6:	4642      	mov	r2, r8
 800b4c8:	464b      	mov	r3, r9
 800b4ca:	1891      	adds	r1, r2, r2
 800b4cc:	6239      	str	r1, [r7, #32]
 800b4ce:	415b      	adcs	r3, r3
 800b4d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b4d6:	4641      	mov	r1, r8
 800b4d8:	1854      	adds	r4, r2, r1
 800b4da:	4649      	mov	r1, r9
 800b4dc:	eb43 0501 	adc.w	r5, r3, r1
 800b4e0:	f04f 0200 	mov.w	r2, #0
 800b4e4:	f04f 0300 	mov.w	r3, #0
 800b4e8:	00eb      	lsls	r3, r5, #3
 800b4ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b4ee:	00e2      	lsls	r2, r4, #3
 800b4f0:	4614      	mov	r4, r2
 800b4f2:	461d      	mov	r5, r3
 800b4f4:	4643      	mov	r3, r8
 800b4f6:	18e3      	adds	r3, r4, r3
 800b4f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b4fc:	464b      	mov	r3, r9
 800b4fe:	eb45 0303 	adc.w	r3, r5, r3
 800b502:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b512:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b516:	f04f 0200 	mov.w	r2, #0
 800b51a:	f04f 0300 	mov.w	r3, #0
 800b51e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b522:	4629      	mov	r1, r5
 800b524:	008b      	lsls	r3, r1, #2
 800b526:	4621      	mov	r1, r4
 800b528:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b52c:	4621      	mov	r1, r4
 800b52e:	008a      	lsls	r2, r1, #2
 800b530:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b534:	f7f4 fe4e 	bl	80001d4 <__aeabi_uldivmod>
 800b538:	4602      	mov	r2, r0
 800b53a:	460b      	mov	r3, r1
 800b53c:	4b60      	ldr	r3, [pc, #384]	@ (800b6c0 <UART_SetConfig+0x4e4>)
 800b53e:	fba3 2302 	umull	r2, r3, r3, r2
 800b542:	095b      	lsrs	r3, r3, #5
 800b544:	011c      	lsls	r4, r3, #4
 800b546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b54a:	2200      	movs	r2, #0
 800b54c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b550:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b554:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b558:	4642      	mov	r2, r8
 800b55a:	464b      	mov	r3, r9
 800b55c:	1891      	adds	r1, r2, r2
 800b55e:	61b9      	str	r1, [r7, #24]
 800b560:	415b      	adcs	r3, r3
 800b562:	61fb      	str	r3, [r7, #28]
 800b564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b568:	4641      	mov	r1, r8
 800b56a:	1851      	adds	r1, r2, r1
 800b56c:	6139      	str	r1, [r7, #16]
 800b56e:	4649      	mov	r1, r9
 800b570:	414b      	adcs	r3, r1
 800b572:	617b      	str	r3, [r7, #20]
 800b574:	f04f 0200 	mov.w	r2, #0
 800b578:	f04f 0300 	mov.w	r3, #0
 800b57c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b580:	4659      	mov	r1, fp
 800b582:	00cb      	lsls	r3, r1, #3
 800b584:	4651      	mov	r1, sl
 800b586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b58a:	4651      	mov	r1, sl
 800b58c:	00ca      	lsls	r2, r1, #3
 800b58e:	4610      	mov	r0, r2
 800b590:	4619      	mov	r1, r3
 800b592:	4603      	mov	r3, r0
 800b594:	4642      	mov	r2, r8
 800b596:	189b      	adds	r3, r3, r2
 800b598:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b59c:	464b      	mov	r3, r9
 800b59e:	460a      	mov	r2, r1
 800b5a0:	eb42 0303 	adc.w	r3, r2, r3
 800b5a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b5a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b5b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b5b4:	f04f 0200 	mov.w	r2, #0
 800b5b8:	f04f 0300 	mov.w	r3, #0
 800b5bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b5c0:	4649      	mov	r1, r9
 800b5c2:	008b      	lsls	r3, r1, #2
 800b5c4:	4641      	mov	r1, r8
 800b5c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5ca:	4641      	mov	r1, r8
 800b5cc:	008a      	lsls	r2, r1, #2
 800b5ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b5d2:	f7f4 fdff 	bl	80001d4 <__aeabi_uldivmod>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	460b      	mov	r3, r1
 800b5da:	4611      	mov	r1, r2
 800b5dc:	4b38      	ldr	r3, [pc, #224]	@ (800b6c0 <UART_SetConfig+0x4e4>)
 800b5de:	fba3 2301 	umull	r2, r3, r3, r1
 800b5e2:	095b      	lsrs	r3, r3, #5
 800b5e4:	2264      	movs	r2, #100	@ 0x64
 800b5e6:	fb02 f303 	mul.w	r3, r2, r3
 800b5ea:	1acb      	subs	r3, r1, r3
 800b5ec:	011b      	lsls	r3, r3, #4
 800b5ee:	3332      	adds	r3, #50	@ 0x32
 800b5f0:	4a33      	ldr	r2, [pc, #204]	@ (800b6c0 <UART_SetConfig+0x4e4>)
 800b5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5f6:	095b      	lsrs	r3, r3, #5
 800b5f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b5fc:	441c      	add	r4, r3
 800b5fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b602:	2200      	movs	r2, #0
 800b604:	673b      	str	r3, [r7, #112]	@ 0x70
 800b606:	677a      	str	r2, [r7, #116]	@ 0x74
 800b608:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b60c:	4642      	mov	r2, r8
 800b60e:	464b      	mov	r3, r9
 800b610:	1891      	adds	r1, r2, r2
 800b612:	60b9      	str	r1, [r7, #8]
 800b614:	415b      	adcs	r3, r3
 800b616:	60fb      	str	r3, [r7, #12]
 800b618:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b61c:	4641      	mov	r1, r8
 800b61e:	1851      	adds	r1, r2, r1
 800b620:	6039      	str	r1, [r7, #0]
 800b622:	4649      	mov	r1, r9
 800b624:	414b      	adcs	r3, r1
 800b626:	607b      	str	r3, [r7, #4]
 800b628:	f04f 0200 	mov.w	r2, #0
 800b62c:	f04f 0300 	mov.w	r3, #0
 800b630:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b634:	4659      	mov	r1, fp
 800b636:	00cb      	lsls	r3, r1, #3
 800b638:	4651      	mov	r1, sl
 800b63a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b63e:	4651      	mov	r1, sl
 800b640:	00ca      	lsls	r2, r1, #3
 800b642:	4610      	mov	r0, r2
 800b644:	4619      	mov	r1, r3
 800b646:	4603      	mov	r3, r0
 800b648:	4642      	mov	r2, r8
 800b64a:	189b      	adds	r3, r3, r2
 800b64c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b64e:	464b      	mov	r3, r9
 800b650:	460a      	mov	r2, r1
 800b652:	eb42 0303 	adc.w	r3, r2, r3
 800b656:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	663b      	str	r3, [r7, #96]	@ 0x60
 800b662:	667a      	str	r2, [r7, #100]	@ 0x64
 800b664:	f04f 0200 	mov.w	r2, #0
 800b668:	f04f 0300 	mov.w	r3, #0
 800b66c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b670:	4649      	mov	r1, r9
 800b672:	008b      	lsls	r3, r1, #2
 800b674:	4641      	mov	r1, r8
 800b676:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b67a:	4641      	mov	r1, r8
 800b67c:	008a      	lsls	r2, r1, #2
 800b67e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b682:	f7f4 fda7 	bl	80001d4 <__aeabi_uldivmod>
 800b686:	4602      	mov	r2, r0
 800b688:	460b      	mov	r3, r1
 800b68a:	4b0d      	ldr	r3, [pc, #52]	@ (800b6c0 <UART_SetConfig+0x4e4>)
 800b68c:	fba3 1302 	umull	r1, r3, r3, r2
 800b690:	095b      	lsrs	r3, r3, #5
 800b692:	2164      	movs	r1, #100	@ 0x64
 800b694:	fb01 f303 	mul.w	r3, r1, r3
 800b698:	1ad3      	subs	r3, r2, r3
 800b69a:	011b      	lsls	r3, r3, #4
 800b69c:	3332      	adds	r3, #50	@ 0x32
 800b69e:	4a08      	ldr	r2, [pc, #32]	@ (800b6c0 <UART_SetConfig+0x4e4>)
 800b6a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b6a4:	095b      	lsrs	r3, r3, #5
 800b6a6:	f003 020f 	and.w	r2, r3, #15
 800b6aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4422      	add	r2, r4
 800b6b2:	609a      	str	r2, [r3, #8]
}
 800b6b4:	bf00      	nop
 800b6b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6c0:	51eb851f 	.word	0x51eb851f

0800b6c4 <memset>:
 800b6c4:	4402      	add	r2, r0
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d100      	bne.n	800b6ce <memset+0xa>
 800b6cc:	4770      	bx	lr
 800b6ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b6d2:	e7f9      	b.n	800b6c8 <memset+0x4>

0800b6d4 <strncmp>:
 800b6d4:	b510      	push	{r4, lr}
 800b6d6:	b16a      	cbz	r2, 800b6f4 <strncmp+0x20>
 800b6d8:	3901      	subs	r1, #1
 800b6da:	1884      	adds	r4, r0, r2
 800b6dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d103      	bne.n	800b6f0 <strncmp+0x1c>
 800b6e8:	42a0      	cmp	r0, r4
 800b6ea:	d001      	beq.n	800b6f0 <strncmp+0x1c>
 800b6ec:	2a00      	cmp	r2, #0
 800b6ee:	d1f5      	bne.n	800b6dc <strncmp+0x8>
 800b6f0:	1ad0      	subs	r0, r2, r3
 800b6f2:	bd10      	pop	{r4, pc}
 800b6f4:	4610      	mov	r0, r2
 800b6f6:	e7fc      	b.n	800b6f2 <strncmp+0x1e>

0800b6f8 <strncpy>:
 800b6f8:	b510      	push	{r4, lr}
 800b6fa:	3901      	subs	r1, #1
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	b132      	cbz	r2, 800b70e <strncpy+0x16>
 800b700:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b704:	f803 4b01 	strb.w	r4, [r3], #1
 800b708:	3a01      	subs	r2, #1
 800b70a:	2c00      	cmp	r4, #0
 800b70c:	d1f7      	bne.n	800b6fe <strncpy+0x6>
 800b70e:	441a      	add	r2, r3
 800b710:	2100      	movs	r1, #0
 800b712:	4293      	cmp	r3, r2
 800b714:	d100      	bne.n	800b718 <strncpy+0x20>
 800b716:	bd10      	pop	{r4, pc}
 800b718:	f803 1b01 	strb.w	r1, [r3], #1
 800b71c:	e7f9      	b.n	800b712 <strncpy+0x1a>
	...

0800b720 <__libc_init_array>:
 800b720:	b570      	push	{r4, r5, r6, lr}
 800b722:	4d0d      	ldr	r5, [pc, #52]	@ (800b758 <__libc_init_array+0x38>)
 800b724:	4c0d      	ldr	r4, [pc, #52]	@ (800b75c <__libc_init_array+0x3c>)
 800b726:	1b64      	subs	r4, r4, r5
 800b728:	10a4      	asrs	r4, r4, #2
 800b72a:	2600      	movs	r6, #0
 800b72c:	42a6      	cmp	r6, r4
 800b72e:	d109      	bne.n	800b744 <__libc_init_array+0x24>
 800b730:	4d0b      	ldr	r5, [pc, #44]	@ (800b760 <__libc_init_array+0x40>)
 800b732:	4c0c      	ldr	r4, [pc, #48]	@ (800b764 <__libc_init_array+0x44>)
 800b734:	f000 f818 	bl	800b768 <_init>
 800b738:	1b64      	subs	r4, r4, r5
 800b73a:	10a4      	asrs	r4, r4, #2
 800b73c:	2600      	movs	r6, #0
 800b73e:	42a6      	cmp	r6, r4
 800b740:	d105      	bne.n	800b74e <__libc_init_array+0x2e>
 800b742:	bd70      	pop	{r4, r5, r6, pc}
 800b744:	f855 3b04 	ldr.w	r3, [r5], #4
 800b748:	4798      	blx	r3
 800b74a:	3601      	adds	r6, #1
 800b74c:	e7ee      	b.n	800b72c <__libc_init_array+0xc>
 800b74e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b752:	4798      	blx	r3
 800b754:	3601      	adds	r6, #1
 800b756:	e7f2      	b.n	800b73e <__libc_init_array+0x1e>
 800b758:	0800b874 	.word	0x0800b874
 800b75c:	0800b874 	.word	0x0800b874
 800b760:	0800b874 	.word	0x0800b874
 800b764:	0800b878 	.word	0x0800b878

0800b768 <_init>:
 800b768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b76a:	bf00      	nop
 800b76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b76e:	bc08      	pop	{r3}
 800b770:	469e      	mov	lr, r3
 800b772:	4770      	bx	lr

0800b774 <_fini>:
 800b774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b776:	bf00      	nop
 800b778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b77a:	bc08      	pop	{r3}
 800b77c:	469e      	mov	lr, r3
 800b77e:	4770      	bx	lr
