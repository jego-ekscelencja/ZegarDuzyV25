
ZegarDuzy19-ok.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b27c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800b410  0800b410  0000c410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b514  0800b514  0000d03c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b514  0800b514  0000c514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b51c  0800b51c  0000d03c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b51c  0800b51c  0000c51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b520  0800b520  0000c520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  0800b524  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a20  2000003c  0800b560  0000d03c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a5c  0800b560  0000da5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d03c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b909  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004554  00000000  00000000  00028975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  0002ced0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012d9  00000000  00000000  0002e6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf30  00000000  00000000  0002f9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000214b1  00000000  00000000  0004b901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5673  00000000  00000000  0006cdb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112425  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064e4  00000000  00000000  00112468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0011894c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000003c 	.word	0x2000003c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800b3f8 	.word	0x0800b3f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000040 	.word	0x20000040
 80001d0:	0800b3f8 	.word	0x0800b3f8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004d6:	4b21      	ldr	r3, [pc, #132]	@ (800055c <MX_ADC1_Init+0x98>)
 80004d8:	4a21      	ldr	r2, [pc, #132]	@ (8000560 <MX_ADC1_Init+0x9c>)
 80004da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004dc:	4b1f      	ldr	r3, [pc, #124]	@ (800055c <MX_ADC1_Init+0x98>)
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e2:	4b1e      	ldr	r3, [pc, #120]	@ (800055c <MX_ADC1_Init+0x98>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004e8:	4b1c      	ldr	r3, [pc, #112]	@ (800055c <MX_ADC1_Init+0x98>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ee:	4b1b      	ldr	r3, [pc, #108]	@ (800055c <MX_ADC1_Init+0x98>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f4:	4b19      	ldr	r3, [pc, #100]	@ (800055c <MX_ADC1_Init+0x98>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fc:	4b17      	ldr	r3, [pc, #92]	@ (800055c <MX_ADC1_Init+0x98>)
 80004fe:	2200      	movs	r2, #0
 8000500:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000502:	4b16      	ldr	r3, [pc, #88]	@ (800055c <MX_ADC1_Init+0x98>)
 8000504:	4a17      	ldr	r2, [pc, #92]	@ (8000564 <MX_ADC1_Init+0xa0>)
 8000506:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000508:	4b14      	ldr	r3, [pc, #80]	@ (800055c <MX_ADC1_Init+0x98>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800050e:	4b13      	ldr	r3, [pc, #76]	@ (800055c <MX_ADC1_Init+0x98>)
 8000510:	2201      	movs	r2, #1
 8000512:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000514:	4b11      	ldr	r3, [pc, #68]	@ (800055c <MX_ADC1_Init+0x98>)
 8000516:	2200      	movs	r2, #0
 8000518:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051c:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <MX_ADC1_Init+0x98>)
 800051e:	2201      	movs	r2, #1
 8000520:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000522:	480e      	ldr	r0, [pc, #56]	@ (800055c <MX_ADC1_Init+0x98>)
 8000524:	f003 fe08 	bl	8004138 <HAL_ADC_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800052e:	f002 f8bc 	bl	80026aa <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000532:	2303      	movs	r3, #3
 8000534:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053e:	463b      	mov	r3, r7
 8000540:	4619      	mov	r1, r3
 8000542:	4806      	ldr	r0, [pc, #24]	@ (800055c <MX_ADC1_Init+0x98>)
 8000544:	f003 fef0 	bl	8004328 <HAL_ADC_ConfigChannel>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800054e:	f002 f8ac 	bl	80026aa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000058 	.word	0x20000058
 8000560:	40012000 	.word	0x40012000
 8000564:	0f000001 	.word	0x0f000001

08000568 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	@ 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a17      	ldr	r2, [pc, #92]	@ (80005e4 <HAL_ADC_MspInit+0x7c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d127      	bne.n	80005da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 8000590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000592:	4a15      	ldr	r2, [pc, #84]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 8000594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000598:	6453      	str	r3, [r2, #68]	@ 0x44
 800059a:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 800059c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800059e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a0e      	ldr	r2, [pc, #56]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005c2:	2308      	movs	r3, #8
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c6:	2303      	movs	r3, #3
 80005c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	@ (80005ec <HAL_ADC_MspInit+0x84>)
 80005d6:	f004 fd83 	bl	80050e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005da:	bf00      	nop
 80005dc:	3728      	adds	r7, #40	@ 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40012000 	.word	0x40012000
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020000 	.word	0x40020000

080005f0 <Encoder_RegisterRotateCallback>:
volatile uint8_t counter=0;

static EncoderRotateCallback_t s_encoderCb = NULL;

void Encoder_RegisterRotateCallback(EncoderRotateCallback_t cb)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    s_encoderCb = cb;
 80005f8:	4a04      	ldr	r2, [pc, #16]	@ (800060c <Encoder_RegisterRotateCallback+0x1c>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6013      	str	r3, [r2, #0]
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	200000a4 	.word	0x200000a4

08000610 <Encoder_UnregisterRotateCallback>:

void Encoder_UnregisterRotateCallback(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
    s_encoderCb = NULL;
 8000614:	4b03      	ldr	r3, [pc, #12]	@ (8000624 <Encoder_UnregisterRotateCallback+0x14>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	200000a4 	.word	0x200000a4

08000628 <Button_RegisterPressCallback>:
		0, 0, 0, false, 0, 0, false, NULL, NULL, NULL, NULL, NULL } //,
		//{BUTTON2_PORT, BUTTON2_PIN, BUTTON_RELEASED, 0, 0, 0, false, 0, 0, false, NULL, NULL, NULL, NULL, NULL}
};

// Implementacja funkcji rejestrujących callbacky
void Button_RegisterPressCallback(uint8_t buttonIndex, ButtonCallback cb) {
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d109      	bne.n	800064e <Button_RegisterPressCallback+0x26>
		buttons[buttonIndex].onPress = cb;
 800063a:	79fa      	ldrb	r2, [r7, #7]
 800063c:	4907      	ldr	r1, [pc, #28]	@ (800065c <Button_RegisterPressCallback+0x34>)
 800063e:	4613      	mov	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4413      	add	r3, r2
 8000644:	011b      	lsls	r3, r3, #4
 8000646:	440b      	add	r3, r1
 8000648:	331c      	adds	r3, #28
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	601a      	str	r2, [r3, #0]
	}
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000000 	.word	0x20000000

08000660 <Button_RegisterHoldCallback>:
	if (buttonIndex < NUM_BUTTONS) {
		buttons[buttonIndex].onRelease = cb;
	}
}

void Button_RegisterHoldCallback(uint8_t buttonIndex, ButtonCallback cb) {
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d109      	bne.n	8000686 <Button_RegisterHoldCallback+0x26>
		buttons[buttonIndex].onHold = cb;
 8000672:	79fa      	ldrb	r2, [r7, #7]
 8000674:	4907      	ldr	r1, [pc, #28]	@ (8000694 <Button_RegisterHoldCallback+0x34>)
 8000676:	4613      	mov	r3, r2
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	4413      	add	r3, r2
 800067c:	011b      	lsls	r3, r3, #4
 800067e:	440b      	add	r3, r1
 8000680:	3324      	adds	r3, #36	@ 0x24
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	601a      	str	r2, [r3, #0]
	}
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000000 	.word	0x20000000

08000698 <Button_RegisterDoubleClickCallback>:
	if (buttonIndex < NUM_BUTTONS) {
		buttons[buttonIndex].onRepeat = cb;
	}
}

void Button_RegisterDoubleClickCallback(uint8_t buttonIndex, ButtonCallback cb) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d109      	bne.n	80006be <Button_RegisterDoubleClickCallback+0x26>
		buttons[buttonIndex].onDoubleClick = cb;
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	4907      	ldr	r1, [pc, #28]	@ (80006cc <Button_RegisterDoubleClickCallback+0x34>)
 80006ae:	4613      	mov	r3, r2
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	4413      	add	r3, r2
 80006b4:	011b      	lsls	r3, r3, #4
 80006b6:	440b      	add	r3, r1
 80006b8:	332c      	adds	r3, #44	@ 0x2c
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	601a      	str	r2, [r3, #0]
	}
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000000 	.word	0x20000000

080006d0 <Button_Process>:

// Logika w przerwaniu timera
extern volatile uint32_t systemTicks;  // Globalny licznik taktów czasu

void Button_Process(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_BUTTONS; i++) {
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	e0e7      	b.n	80008ac <Button_Process+0x1dc>
        Button_t *btn = &buttons[i];
 80006dc:	68fa      	ldr	r2, [r7, #12]
 80006de:	4613      	mov	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	011b      	lsls	r3, r3, #4
 80006e6:	4a76      	ldr	r2, [pc, #472]	@ (80008c0 <Button_Process+0x1f0>)
 80006e8:	4413      	add	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]

        // Odczytaj aktualny stan przycisku
        bool rawState = (HAL_GPIO_ReadPin(btn->port, btn->pin) == GPIO_PIN_RESET);
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	889b      	ldrh	r3, [r3, #4]
 80006f4:	4619      	mov	r1, r3
 80006f6:	4610      	mov	r0, r2
 80006f8:	f004 fe76 	bl	80053e8 <HAL_GPIO_ReadPin>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	bf0c      	ite	eq
 8000702:	2301      	moveq	r3, #1
 8000704:	2300      	movne	r3, #0
 8000706:	71fb      	strb	r3, [r7, #7]

        // Debounce
        if (rawState != (btn->state == BUTTON_PRESSED)) {
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	7992      	ldrb	r2, [r2, #6]
 800070e:	2a01      	cmp	r2, #1
 8000710:	bf0c      	ite	eq
 8000712:	2201      	moveq	r2, #1
 8000714:	2200      	movne	r2, #0
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	4293      	cmp	r3, r2
 800071a:	d05d      	beq.n	80007d8 <Button_Process+0x108>
            btn->debounceCounter++;
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	79db      	ldrb	r3, [r3, #7]
 8000720:	3301      	adds	r3, #1
 8000722:	b2da      	uxtb	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	71da      	strb	r2, [r3, #7]
            if (btn->debounceCounter >= DEBOUNCE_TICKS) {
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	79db      	ldrb	r3, [r3, #7]
 800072c:	2b04      	cmp	r3, #4
 800072e:	d956      	bls.n	80007de <Button_Process+0x10e>
                btn->debounceCounter = 0;
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	2200      	movs	r2, #0
 8000734:	71da      	strb	r2, [r3, #7]
                if (rawState) {
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d00a      	beq.n	8000752 <Button_Process+0x82>
                    // Naciśnięcie
                    btn->state = BUTTON_PRESSED;
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	2201      	movs	r2, #1
 8000740:	719a      	strb	r2, [r3, #6]
                    btn->pressTime = systemTicks;
 8000742:	4b60      	ldr	r3, [pc, #384]	@ (80008c4 <Button_Process+0x1f4>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	609a      	str	r2, [r3, #8]
                    btn->holdTriggered = false;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	2200      	movs	r2, #0
 800074e:	741a      	strb	r2, [r3, #16]
 8000750:	e045      	b.n	80007de <Button_Process+0x10e>
                } else {
                    // Puszczenie
                    btn->state = BUTTON_RELEASED;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	2200      	movs	r2, #0
 8000756:	719a      	strb	r2, [r3, #6]

                    // Obsługa kliknięć (tylko jeśli nie było hold)
                    if (!btn->holdTriggered) {
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	7c1b      	ldrb	r3, [r3, #16]
 800075c:	f083 0301 	eor.w	r3, r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d030      	beq.n	80007c8 <Button_Process+0xf8>
                        if (btn->waitingForDoubleClick) {
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	7e1b      	ldrb	r3, [r3, #24]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d011      	beq.n	8000792 <Button_Process+0xc2>
                            if ((systemTicks - btn->lastClickTime) <= DOUBLE_CLICK_THRESHOLD) {
 800076e:	4b55      	ldr	r3, [pc, #340]	@ (80008c4 <Button_Process+0x1f4>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	2b1e      	cmp	r3, #30
 800077a:	d806      	bhi.n	800078a <Button_Process+0xba>
                                btn->clickCount++;
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	7c5b      	ldrb	r3, [r3, #17]
 8000780:	3301      	adds	r3, #1
 8000782:	b2da      	uxtb	r2, r3
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	745a      	strb	r2, [r3, #17]
 8000788:	e00d      	b.n	80007a6 <Button_Process+0xd6>
                            } else {
                                // Minął czas na dwuklik
                                btn->clickCount = 1;
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	2201      	movs	r2, #1
 800078e:	745a      	strb	r2, [r3, #17]
 8000790:	e009      	b.n	80007a6 <Button_Process+0xd6>
                            }
                        } else {
                            btn->clickCount = 1;
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	2201      	movs	r2, #1
 8000796:	745a      	strb	r2, [r3, #17]
                            btn->waitingForDoubleClick = true;
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	2201      	movs	r2, #1
 800079c:	761a      	strb	r2, [r3, #24]
                            btn->lastClickTime = systemTicks;
 800079e:	4b49      	ldr	r3, [pc, #292]	@ (80008c4 <Button_Process+0x1f4>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	615a      	str	r2, [r3, #20]
                        }

                        if (btn->clickCount == 2) {
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	7c5b      	ldrb	r3, [r3, #17]
 80007aa:	2b02      	cmp	r3, #2
 80007ac:	d10c      	bne.n	80007c8 <Button_Process+0xf8>
                            // Dwuklik
                            btn->waitingForDoubleClick = false;
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	2200      	movs	r2, #0
 80007b2:	761a      	strb	r2, [r3, #24]
                            btn->clickCount = 0;
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	2200      	movs	r2, #0
 80007b8:	745a      	strb	r2, [r3, #17]
                            if (btn->onDoubleClick) {
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d002      	beq.n	80007c8 <Button_Process+0xf8>
                                btn->onDoubleClick();
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007c6:	4798      	blx	r3
                            }
                        }
                    }

                    // Callback onRelease
                    if (btn->onRelease)
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	6a1b      	ldr	r3, [r3, #32]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d006      	beq.n	80007de <Button_Process+0x10e>
                        btn->onRelease();
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	6a1b      	ldr	r3, [r3, #32]
 80007d4:	4798      	blx	r3
 80007d6:	e002      	b.n	80007de <Button_Process+0x10e>
                }
            }
        } else {
            btn->debounceCounter = 0;
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	2200      	movs	r2, #0
 80007dc:	71da      	strb	r2, [r3, #7]
        }

        // Obsługa timeoutu dwukliku
        if (btn->waitingForDoubleClick
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	7e1b      	ldrb	r3, [r3, #24]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d01e      	beq.n	8000824 <Button_Process+0x154>
            && ((systemTicks - btn->lastClickTime) > DOUBLE_CLICK_THRESHOLD)) {
 80007e6:	4b37      	ldr	r3, [pc, #220]	@ (80008c4 <Button_Process+0x1f4>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	2b1e      	cmp	r3, #30
 80007f2:	d917      	bls.n	8000824 <Button_Process+0x154>
            if (btn->clickCount == 1) {
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	7c5b      	ldrb	r3, [r3, #17]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d10d      	bne.n	8000818 <Button_Process+0x148>
                // Pojedynczy klik
                // warunek: jeżeli NIE było hold
                if (!btn->holdTriggered && btn->onPress) {
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	7c1b      	ldrb	r3, [r3, #16]
 8000800:	f083 0301 	eor.w	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d006      	beq.n	8000818 <Button_Process+0x148>
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d002      	beq.n	8000818 <Button_Process+0x148>
                    btn->onPress();
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	4798      	blx	r3
                }
            }
            btn->waitingForDoubleClick = false;
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	2200      	movs	r2, #0
 800081c:	761a      	strb	r2, [r3, #24]
            btn->clickCount = 0;
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	2200      	movs	r2, #0
 8000822:	745a      	strb	r2, [r3, #17]
        }

        // Obsługa hold i repeat
        if (btn->state == BUTTON_PRESSED) {
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	799b      	ldrb	r3, [r3, #6]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d13c      	bne.n	80008a6 <Button_Process+0x1d6>
            uint32_t elapsed = systemTicks - btn->pressTime;
 800082c:	4b25      	ldr	r3, [pc, #148]	@ (80008c4 <Button_Process+0x1f4>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	603b      	str	r3, [r7, #0]
            if (!btn->holdTriggered && (elapsed >= HOLD_THRESHOLD)) {
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	7c1b      	ldrb	r3, [r3, #16]
 800083c:	f083 0301 	eor.w	r3, r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d018      	beq.n	8000878 <Button_Process+0x1a8>
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	2b63      	cmp	r3, #99	@ 0x63
 800084a:	d915      	bls.n	8000878 <Button_Process+0x1a8>
                btn->holdTriggered = true;
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	2201      	movs	r2, #1
 8000850:	741a      	strb	r2, [r3, #16]
                // zerujemy liczniki kliknięć, by nie był liczony single-click
                btn->clickCount = 0;
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	2200      	movs	r2, #0
 8000856:	745a      	strb	r2, [r3, #17]
                btn->waitingForDoubleClick = false;
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	2200      	movs	r2, #0
 800085c:	761a      	strb	r2, [r3, #24]

                if (btn->onHold)
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000862:	2b00      	cmp	r3, #0
 8000864:	d002      	beq.n	800086c <Button_Process+0x19c>
                    btn->onHold();
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800086a:	4798      	blx	r3
                btn->nextRepeatTime = systemTicks + REPEAT_INTERVAL;
 800086c:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <Button_Process+0x1f4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f103 0214 	add.w	r2, r3, #20
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	60da      	str	r2, [r3, #12]
            }
            if (btn->holdTriggered && (systemTicks >= btn->nextRepeatTime)) {
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	7c1b      	ldrb	r3, [r3, #16]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d012      	beq.n	80008a6 <Button_Process+0x1d6>
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	68da      	ldr	r2, [r3, #12]
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <Button_Process+0x1f4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	429a      	cmp	r2, r3
 800088a:	d80c      	bhi.n	80008a6 <Button_Process+0x1d6>
                if (btn->onRepeat)
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000890:	2b00      	cmp	r3, #0
 8000892:	d002      	beq.n	800089a <Button_Process+0x1ca>
                    btn->onRepeat();
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000898:	4798      	blx	r3
                btn->nextRepeatTime += REPEAT_INTERVAL;
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	f103 0214 	add.w	r2, r3, #20
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < NUM_BUTTONS; i++) {
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	3301      	adds	r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	f77f af14 	ble.w	80006dc <Button_Process+0xc>
            }
        }
    }
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000684 	.word	0x20000684

080008c8 <HAL_TIM_PeriodElapsedCallback>:

// Funkcja wywoływana w przerwaniu timera
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a23      	ldr	r2, [pc, #140]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d108      	bne.n	80008ec <HAL_TIM_PeriodElapsedCallback+0x24>

		SHT30_10msHandler();
 80008da:	f002 f8d1 	bl	8002a80 <SHT30_10msHandler>


		systemTicks++;  // Inkrementacja globalnego licznika czasu
 80008de:	4b22      	ldr	r3, [pc, #136]	@ (8000968 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	4a20      	ldr	r2, [pc, #128]	@ (8000968 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80008e6:	6013      	str	r3, [r2, #0]
		SLIDER_Update();
 80008e8:	f002 fc50 	bl	800318c <SLIDER_Update>
	}
	if (colon == 1) {
 80008ec:	4b1f      	ldr	r3, [pc, #124]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d112      	bne.n	800091c <HAL_TIM_PeriodElapsedCallback+0x54>
	        if (counter > 0) {
 80008f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000970 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d007      	beq.n	8000910 <HAL_TIM_PeriodElapsedCallback+0x48>
	            counter--; // Odliczanie licznika
 8000900:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	3b01      	subs	r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	e005      	b.n	800091c <HAL_TIM_PeriodElapsedCallback+0x54>
	        } else {
	            counter = 50; // Reset licznika na 50
 8000910:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000912:	2232      	movs	r2, #50	@ 0x32
 8000914:	701a      	strb	r2, [r3, #0]
	            colon = 0;    // Ustawienie colon na 0
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
	        }
	    }

static volatile uint16_t cnter = 0 ;
		cnter++;
 800091c:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	b29b      	uxth	r3, r3
 8000922:	3301      	adds	r3, #1
 8000924:	b29a      	uxth	r2, r3
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000928:	801a      	strh	r2, [r3, #0]
		if  (cnter>400){
 800092a:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	b29b      	uxth	r3, r3
 8000930:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000934:	d911      	bls.n	800095a <HAL_TIM_PeriodElapsedCallback+0x92>
			cnter = 0 ;
 8000936:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000938:	2200      	movs	r2, #0
 800093a:	801a      	strh	r2, [r3, #0]
			disp_mode++;
 800093c:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	3301      	adds	r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000948:	701a      	strb	r2, [r3, #0]
			if (disp_mode > 1 )disp_mode = 0;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b01      	cmp	r3, #1
 8000952:	d902      	bls.n	800095a <HAL_TIM_PeriodElapsedCallback+0x92>
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
		}
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40000c00 	.word	0x40000c00
 8000968:	20000684 	.word	0x20000684
 800096c:	200000c5 	.word	0x200000c5
 8000970:	200000a0 	.word	0x200000a0
 8000974:	200000a8 	.word	0x200000a8
 8000978:	200006da 	.word	0x200006da

0800097c <Encoder_HandleInterrupt>:

void Encoder_HandleInterrupt(int8_t direction)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
    if (s_encoderCb != NULL) {
 8000986:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <Encoder_HandleInterrupt+0x28>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d005      	beq.n	800099a <Encoder_HandleInterrupt+0x1e>
        s_encoderCb(direction);
 800098e:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <Encoder_HandleInterrupt+0x28>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000996:	4610      	mov	r0, r2
 8000998:	4798      	blx	r3
    }
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000a4 	.word	0x200000a4

080009a8 <charToSegment>:
//static Bits192 regValue;         // Przechowuje 192 bity rozbite na 12×16

// Implementacja tablicy segmentMap i funkcji charToSegment.
// (Zwykle segmentMap mamy w Display.h jako static const,
//  ale jeśli wolisz mieć ją w .c, możesz przenieść tutaj.)
uint8_t charToSegment(char c) {
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]

    switch (c) {
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	3b2a      	subs	r3, #42	@ 0x2a
 80009b6:	2b50      	cmp	r3, #80	@ 0x50
 80009b8:	f200 80dd 	bhi.w	8000b76 <charToSegment+0x1ce>
 80009bc:	a201      	add	r2, pc, #4	@ (adr r2, 80009c4 <charToSegment+0x1c>)
 80009be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c2:	bf00      	nop
 80009c4:	08000b17 	.word	0x08000b17
 80009c8:	08000b77 	.word	0x08000b77
 80009cc:	08000b77 	.word	0x08000b77
 80009d0:	08000b13 	.word	0x08000b13
 80009d4:	08000b77 	.word	0x08000b77
 80009d8:	08000b77 	.word	0x08000b77
 80009dc:	08000b09 	.word	0x08000b09
 80009e0:	08000b09 	.word	0x08000b09
 80009e4:	08000b09 	.word	0x08000b09
 80009e8:	08000b09 	.word	0x08000b09
 80009ec:	08000b09 	.word	0x08000b09
 80009f0:	08000b09 	.word	0x08000b09
 80009f4:	08000b09 	.word	0x08000b09
 80009f8:	08000b09 	.word	0x08000b09
 80009fc:	08000b09 	.word	0x08000b09
 8000a00:	08000b09 	.word	0x08000b09
 8000a04:	08000b77 	.word	0x08000b77
 8000a08:	08000b77 	.word	0x08000b77
 8000a0c:	08000b77 	.word	0x08000b77
 8000a10:	08000b77 	.word	0x08000b77
 8000a14:	08000b77 	.word	0x08000b77
 8000a18:	08000b77 	.word	0x08000b77
 8000a1c:	08000b77 	.word	0x08000b77
 8000a20:	08000b33 	.word	0x08000b33
 8000a24:	08000b67 	.word	0x08000b67
 8000a28:	08000b1b 	.word	0x08000b1b
 8000a2c:	08000b77 	.word	0x08000b77
 8000a30:	08000b47 	.word	0x08000b47
 8000a34:	08000b2f 	.word	0x08000b2f
 8000a38:	08000b77 	.word	0x08000b77
 8000a3c:	08000b6f 	.word	0x08000b6f
 8000a40:	08000b77 	.word	0x08000b77
 8000a44:	08000b73 	.word	0x08000b73
 8000a48:	08000b77 	.word	0x08000b77
 8000a4c:	08000b5f 	.word	0x08000b5f
 8000a50:	08000b77 	.word	0x08000b77
 8000a54:	08000b3f 	.word	0x08000b3f
 8000a58:	08000b57 	.word	0x08000b57
 8000a5c:	08000b4f 	.word	0x08000b4f
 8000a60:	08000b77 	.word	0x08000b77
 8000a64:	08000b23 	.word	0x08000b23
 8000a68:	08000b2b 	.word	0x08000b2b
 8000a6c:	08000b37 	.word	0x08000b37
 8000a70:	08000b3b 	.word	0x08000b3b
 8000a74:	08000b3b 	.word	0x08000b3b
 8000a78:	08000b3b 	.word	0x08000b3b
 8000a7c:	08000b77 	.word	0x08000b77
 8000a80:	08000b77 	.word	0x08000b77
 8000a84:	08000b63 	.word	0x08000b63
 8000a88:	08000b77 	.word	0x08000b77
 8000a8c:	08000b77 	.word	0x08000b77
 8000a90:	08000b77 	.word	0x08000b77
 8000a94:	08000b77 	.word	0x08000b77
 8000a98:	08000b77 	.word	0x08000b77
 8000a9c:	08000b77 	.word	0x08000b77
 8000aa0:	08000b33 	.word	0x08000b33
 8000aa4:	08000b67 	.word	0x08000b67
 8000aa8:	08000b1f 	.word	0x08000b1f
 8000aac:	08000b4b 	.word	0x08000b4b
 8000ab0:	08000b47 	.word	0x08000b47
 8000ab4:	08000b77 	.word	0x08000b77
 8000ab8:	08000b77 	.word	0x08000b77
 8000abc:	08000b27 	.word	0x08000b27
 8000ac0:	08000b43 	.word	0x08000b43
 8000ac4:	08000b73 	.word	0x08000b73
 8000ac8:	08000b77 	.word	0x08000b77
 8000acc:	08000b77 	.word	0x08000b77
 8000ad0:	08000b77 	.word	0x08000b77
 8000ad4:	08000b3f 	.word	0x08000b3f
 8000ad8:	08000b53 	.word	0x08000b53
 8000adc:	08000b4f 	.word	0x08000b4f
 8000ae0:	08000b77 	.word	0x08000b77
 8000ae4:	08000b23 	.word	0x08000b23
 8000ae8:	08000b2b 	.word	0x08000b2b
 8000aec:	08000b37 	.word	0x08000b37
 8000af0:	08000b5b 	.word	0x08000b5b
 8000af4:	08000b5b 	.word	0x08000b5b
 8000af8:	08000b5b 	.word	0x08000b5b
 8000afc:	08000b77 	.word	0x08000b77
 8000b00:	08000b6b 	.word	0x08000b6b
 8000b04:	08000b63 	.word	0x08000b63
    case '0' ... '9':
        return segmentMap[c - '0'];
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	3b30      	subs	r3, #48	@ 0x30
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b84 <charToSegment+0x1dc>)
 8000b0e:	5cd3      	ldrb	r3, [r2, r3]
 8000b10:	e032      	b.n	8000b78 <charToSegment+0x1d0>
    case '-':
        return segmentMap[11];
 8000b12:	2340      	movs	r3, #64	@ 0x40
 8000b14:	e030      	b.n	8000b78 <charToSegment+0x1d0>
    case '*':// symbol  stopnia
        return segmentMap[12];
 8000b16:	2363      	movs	r3, #99	@ 0x63
 8000b18:	e02e      	b.n	8000b78 <charToSegment+0x1d0>
    case 'C':
        return segmentMap[13];
 8000b1a:	2339      	movs	r3, #57	@ 0x39
 8000b1c:	e02c      	b.n	8000b78 <charToSegment+0x1d0>
    case 'c':
        return segmentMap[29];
 8000b1e:	236e      	movs	r3, #110	@ 0x6e
 8000b20:	e02a      	b.n	8000b78 <charToSegment+0x1d0>
    case 'r':
    case 'R':
        return segmentMap[14];
 8000b22:	2350      	movs	r3, #80	@ 0x50
 8000b24:	e028      	b.n	8000b78 <charToSegment+0x1d0>
    case 'h':
        return segmentMap[15];
 8000b26:	2374      	movs	r3, #116	@ 0x74
 8000b28:	e026      	b.n	8000b78 <charToSegment+0x1d0>
    case 's':
    case 'S':
        return segmentMap[5];
 8000b2a:	236d      	movs	r3, #109	@ 0x6d
 8000b2c:	e024      	b.n	8000b78 <charToSegment+0x1d0>
    case 'F':
        return segmentMap[16];
 8000b2e:	2371      	movs	r3, #113	@ 0x71
 8000b30:	e022      	b.n	8000b78 <charToSegment+0x1d0>
    case 'A':
    case 'a':
        return segmentMap[17];
 8000b32:	2377      	movs	r3, #119	@ 0x77
 8000b34:	e020      	b.n	8000b78 <charToSegment+0x1d0>
    case 't':
    case 'T':
        return segmentMap[18];
 8000b36:	2378      	movs	r3, #120	@ 0x78
 8000b38:	e01e      	b.n	8000b78 <charToSegment+0x1d0>
    case 'V':
    case 'U':
    case 'W':
        return segmentMap[19];
 8000b3a:	233e      	movs	r3, #62	@ 0x3e
 8000b3c:	e01c      	b.n	8000b78 <charToSegment+0x1d0>
    case 'n':
    case 'N':
        return segmentMap[20];
 8000b3e:	2354      	movs	r3, #84	@ 0x54
 8000b40:	e01a      	b.n	8000b78 <charToSegment+0x1d0>
    case 'i':
        return segmentMap[21];
 8000b42:	2310      	movs	r3, #16
 8000b44:	e018      	b.n	8000b78 <charToSegment+0x1d0>
    case 'E':
    case 'e':
        return segmentMap[22];
 8000b46:	2379      	movs	r3, #121	@ 0x79
 8000b48:	e016      	b.n	8000b78 <charToSegment+0x1d0>
    case 'd':
        return segmentMap[23];
 8000b4a:	235e      	movs	r3, #94	@ 0x5e
 8000b4c:	e014      	b.n	8000b78 <charToSegment+0x1d0>
    case 'P':
    case 'p':
        return segmentMap[24];
 8000b4e:	2373      	movs	r3, #115	@ 0x73
 8000b50:	e012      	b.n	8000b78 <charToSegment+0x1d0>
    case 'o':
        return segmentMap[25];
 8000b52:	235c      	movs	r3, #92	@ 0x5c
 8000b54:	e010      	b.n	8000b78 <charToSegment+0x1d0>
    case 'O':
        return segmentMap[0];
 8000b56:	233f      	movs	r3, #63	@ 0x3f
 8000b58:	e00e      	b.n	8000b78 <charToSegment+0x1d0>
    case 'u':
    case 'w':
    case 'v':
        return segmentMap[26];
 8000b5a:	231c      	movs	r3, #28
 8000b5c:	e00c      	b.n	8000b78 <charToSegment+0x1d0>
    case 'L':
        return segmentMap[27];
 8000b5e:	2338      	movs	r3, #56	@ 0x38
 8000b60:	e00a      	b.n	8000b78 <charToSegment+0x1d0>
    case 'z':
    case 'Z':
        return segmentMap[2];
 8000b62:	235b      	movs	r3, #91	@ 0x5b
 8000b64:	e008      	b.n	8000b78 <charToSegment+0x1d0>
    case 'b':
    case 'B':
        return segmentMap[28];
 8000b66:	237c      	movs	r3, #124	@ 0x7c
 8000b68:	e006      	b.n	8000b78 <charToSegment+0x1d0>
    case 'y':
            return segmentMap[29];
 8000b6a:	236e      	movs	r3, #110	@ 0x6e
 8000b6c:	e004      	b.n	8000b78 <charToSegment+0x1d0>
    case 'H':
            return segmentMap[30];
 8000b6e:	2376      	movs	r3, #118	@ 0x76
 8000b70:	e002      	b.n	8000b78 <charToSegment+0x1d0>
    case 'j':
    case 'J':
                   return segmentMap[31];
 8000b72:	231e      	movs	r3, #30
 8000b74:	e000      	b.n	8000b78 <charToSegment+0x1d0>
    default:
        // spacja lub nieobsługiwany znak
        return segmentMap[10];
 8000b76:	2300      	movs	r3, #0
    }
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	0800b450 	.word	0x0800b450

08000b88 <HAL_SPI_TxCpltCallback>:
 * ---------------------------------------------------------------------------
 * Implementacja funkcji obsługujących 192-bitowy rejestr wyświetlaczy
 * ---------------------------------------------------------------------------
 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance == SPI1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a09      	ldr	r2, [pc, #36]	@ (8000bbc <HAL_SPI_TxCpltCallback+0x34>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d10c      	bne.n	8000bb4 <HAL_SPI_TxCpltCallback+0x2c>
  {
    // Krótki impuls na pin LATCH
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2140      	movs	r1, #64	@ 0x40
 8000b9e:	4808      	ldr	r0, [pc, #32]	@ (8000bc0 <HAL_SPI_TxCpltCallback+0x38>)
 8000ba0:	f004 fc3a 	bl	8005418 <HAL_GPIO_WritePin>
    // Ewentualnie opóźnienie
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2140      	movs	r1, #64	@ 0x40
 8000ba8:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <HAL_SPI_TxCpltCallback+0x38>)
 8000baa:	f004 fc35 	bl	8005418 <HAL_GPIO_WritePin>
    spiTransferInProgress = false;  // Zakończono transmisję
 8000bae:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <HAL_SPI_TxCpltCallback+0x3c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
  }

}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40013000 	.word	0x40013000
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	200000aa 	.word	0x200000aa

08000bc8 <ClearClockBits>:
  HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 24);
}


void ClearClockBits(MyClockBitFields* clockBits)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  memset(clockBits, 0, sizeof(MyClockBitFields));
 8000bd0:	2218      	movs	r2, #24
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f00a fbbd 	bl	800b354 <memset>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <SetSecondLedSingle>:

void SetSecondLedSingle(MyClockBitFields* clockBits, uint8_t second)
{
 8000be2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be4:	b085      	sub	sp, #20
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 8000bec:	78f9      	ldrb	r1, [r7, #3]
 8000bee:	293b      	cmp	r1, #59	@ 0x3b
 8000bf0:	d901      	bls.n	8000bf6 <SetSecondLedSingle+0x14>
 8000bf2:	213b      	movs	r1, #59	@ 0x3b
 8000bf4:	70f9      	strb	r1, [r7, #3]

    clockBits->secondsRing = 0ULL;
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	7008      	strb	r0, [r1, #0]
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	7048      	strb	r0, [r1, #1]
 8000c00:	2000      	movs	r0, #0
 8000c02:	7088      	strb	r0, [r1, #2]
 8000c04:	2000      	movs	r0, #0
 8000c06:	70c8      	strb	r0, [r1, #3]
 8000c08:	2000      	movs	r0, #0
 8000c0a:	7108      	strb	r0, [r1, #4]
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	7148      	strb	r0, [r1, #5]
 8000c10:	2000      	movs	r0, #0
 8000c12:	7188      	strb	r0, [r1, #6]
 8000c14:	79c8      	ldrb	r0, [r1, #7]
 8000c16:	f020 000f 	bic.w	r0, r0, #15
 8000c1a:	71c8      	strb	r0, [r1, #7]
    uint64_t mask = (1ULL << second);
 8000c1c:	78fe      	ldrb	r6, [r7, #3]
 8000c1e:	f04f 0001 	mov.w	r0, #1
 8000c22:	f04f 0100 	mov.w	r1, #0
 8000c26:	f1a6 0e20 	sub.w	lr, r6, #32
 8000c2a:	f1c6 0c20 	rsb	ip, r6, #32
 8000c2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c32:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000c36:	ea43 030e 	orr.w	r3, r3, lr
 8000c3a:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c3e:	ea43 030c 	orr.w	r3, r3, ip
 8000c42:	fa00 f206 	lsl.w	r2, r0, r6
 8000c46:	e9c7 2302 	strd	r2, r3, [r7, #8]
    clockBits->secondsRing = mask;
 8000c4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c4e:	4614      	mov	r4, r2
 8000c50:	f023 4570 	bic.w	r5, r3, #4026531840	@ 0xf0000000
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	601c      	str	r4, [r3, #0]
 8000c58:	462a      	mov	r2, r5
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	711a      	strb	r2, [r3, #4]
 8000c62:	0a2a      	lsrs	r2, r5, #8
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	2100      	movs	r1, #0
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	715a      	strb	r2, [r3, #5]
 8000c6c:	0c2a      	lsrs	r2, r5, #16
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	2100      	movs	r1, #0
 8000c72:	430a      	orrs	r2, r1
 8000c74:	719a      	strb	r2, [r3, #6]
 8000c76:	0e2a      	lsrs	r2, r5, #24
 8000c78:	f002 020f 	and.w	r2, r2, #15
 8000c7c:	f002 000f 	and.w	r0, r2, #15
 8000c80:	79da      	ldrb	r2, [r3, #7]
 8000c82:	f022 020f 	bic.w	r2, r2, #15
 8000c86:	4611      	mov	r1, r2
 8000c88:	4602      	mov	r2, r0
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	71da      	strb	r2, [r3, #7]
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c96 <SetSecondLedAccumulating>:

void SetSecondLedAccumulating(MyClockBitFields* clockBits, uint8_t second)
{
 8000c96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 8000ca2:	78f9      	ldrb	r1, [r7, #3]
 8000ca4:	293b      	cmp	r1, #59	@ 0x3b
 8000ca6:	d901      	bls.n	8000cac <SetSecondLedAccumulating+0x16>
 8000ca8:	213b      	movs	r1, #59	@ 0x3b
 8000caa:	70f9      	strb	r1, [r7, #3]
    if (second == 0) {
 8000cac:	78f9      	ldrb	r1, [r7, #3]
 8000cae:	2900      	cmp	r1, #0
 8000cb0:	d113      	bne.n	8000cda <SetSecondLedAccumulating+0x44>
        clockBits->secondsRing = 0ULL;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	705a      	strb	r2, [r3, #1]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	709a      	strb	r2, [r3, #2]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	70da      	strb	r2, [r3, #3]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	711a      	strb	r2, [r3, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	715a      	strb	r2, [r3, #5]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	719a      	strb	r2, [r3, #6]
 8000cd0:	79da      	ldrb	r2, [r3, #7]
 8000cd2:	f022 020f 	bic.w	r2, r2, #15
 8000cd6:	71da      	strb	r2, [r3, #7]
    } else {
        clockBits->secondsRing |= (1ULL << second);
    }
}
 8000cd8:	e048      	b.n	8000d6c <SetSecondLedAccumulating+0xd6>
        clockBits->secondsRing |= (1ULL << second);
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f8d1 a000 	ldr.w	sl, [r1]
 8000ce0:	7908      	ldrb	r0, [r1, #4]
 8000ce2:	794e      	ldrb	r6, [r1, #5]
 8000ce4:	0236      	lsls	r6, r6, #8
 8000ce6:	4330      	orrs	r0, r6
 8000ce8:	798e      	ldrb	r6, [r1, #6]
 8000cea:	0436      	lsls	r6, r6, #16
 8000cec:	4330      	orrs	r0, r6
 8000cee:	79c9      	ldrb	r1, [r1, #7]
 8000cf0:	f001 010f 	and.w	r1, r1, #15
 8000cf4:	0609      	lsls	r1, r1, #24
 8000cf6:	4301      	orrs	r1, r0
 8000cf8:	468b      	mov	fp, r1
 8000cfa:	78fe      	ldrb	r6, [r7, #3]
 8000cfc:	f04f 0001 	mov.w	r0, #1
 8000d00:	f04f 0100 	mov.w	r1, #0
 8000d04:	f1a6 0e20 	sub.w	lr, r6, #32
 8000d08:	f1c6 0c20 	rsb	ip, r6, #32
 8000d0c:	fa01 f306 	lsl.w	r3, r1, r6
 8000d10:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000d14:	ea43 030e 	orr.w	r3, r3, lr
 8000d18:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d1c:	ea43 030c 	orr.w	r3, r3, ip
 8000d20:	fa00 f206 	lsl.w	r2, r0, r6
 8000d24:	ea4a 0802 	orr.w	r8, sl, r2
 8000d28:	ea4b 0903 	orr.w	r9, fp, r3
 8000d2c:	4644      	mov	r4, r8
 8000d2e:	f029 4570 	bic.w	r5, r9, #4026531840	@ 0xf0000000
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	601c      	str	r4, [r3, #0]
 8000d36:	462a      	mov	r2, r5
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	711a      	strb	r2, [r3, #4]
 8000d40:	0a2a      	lsrs	r2, r5, #8
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	2100      	movs	r1, #0
 8000d46:	430a      	orrs	r2, r1
 8000d48:	715a      	strb	r2, [r3, #5]
 8000d4a:	0c2a      	lsrs	r2, r5, #16
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	2100      	movs	r1, #0
 8000d50:	430a      	orrs	r2, r1
 8000d52:	719a      	strb	r2, [r3, #6]
 8000d54:	0e2a      	lsrs	r2, r5, #24
 8000d56:	f002 020f 	and.w	r2, r2, #15
 8000d5a:	f002 000f 	and.w	r0, r2, #15
 8000d5e:	79da      	ldrb	r2, [r3, #7]
 8000d60:	f022 020f 	bic.w	r2, r2, #15
 8000d64:	4611      	mov	r1, r2
 8000d66:	4602      	mov	r2, r0
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	71da      	strb	r2, [r3, #7]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000d76 <SetSecondLedAccumulating2>:

void SetSecondLedAccumulating2(MyClockBitFields* clockBits, uint8_t second)
{
 8000d76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 8000d82:	78f9      	ldrb	r1, [r7, #3]
 8000d84:	293b      	cmp	r1, #59	@ 0x3b
 8000d86:	d901      	bls.n	8000d8c <SetSecondLedAccumulating2+0x16>
 8000d88:	213b      	movs	r1, #59	@ 0x3b
 8000d8a:	70f9      	strb	r1, [r7, #3]
    clockBits->secondsRing = 0ULL;
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	2000      	movs	r0, #0
 8000d90:	7008      	strb	r0, [r1, #0]
 8000d92:	2000      	movs	r0, #0
 8000d94:	7048      	strb	r0, [r1, #1]
 8000d96:	2000      	movs	r0, #0
 8000d98:	7088      	strb	r0, [r1, #2]
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	70c8      	strb	r0, [r1, #3]
 8000d9e:	2000      	movs	r0, #0
 8000da0:	7108      	strb	r0, [r1, #4]
 8000da2:	2000      	movs	r0, #0
 8000da4:	7148      	strb	r0, [r1, #5]
 8000da6:	2000      	movs	r0, #0
 8000da8:	7188      	strb	r0, [r1, #6]
 8000daa:	79c8      	ldrb	r0, [r1, #7]
 8000dac:	f020 000f 	bic.w	r0, r0, #15
 8000db0:	71c8      	strb	r0, [r1, #7]
    for (uint8_t i = 0; i <= second; i++) {
 8000db2:	2100      	movs	r1, #0
 8000db4:	73f9      	strb	r1, [r7, #15]
 8000db6:	e04b      	b.n	8000e50 <SetSecondLedAccumulating2+0xda>
        clockBits->secondsRing |= (1ULL << i);
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	f8d1 a000 	ldr.w	sl, [r1]
 8000dbe:	7908      	ldrb	r0, [r1, #4]
 8000dc0:	794e      	ldrb	r6, [r1, #5]
 8000dc2:	0236      	lsls	r6, r6, #8
 8000dc4:	4330      	orrs	r0, r6
 8000dc6:	798e      	ldrb	r6, [r1, #6]
 8000dc8:	0436      	lsls	r6, r6, #16
 8000dca:	4330      	orrs	r0, r6
 8000dcc:	79c9      	ldrb	r1, [r1, #7]
 8000dce:	f001 010f 	and.w	r1, r1, #15
 8000dd2:	0609      	lsls	r1, r1, #24
 8000dd4:	4301      	orrs	r1, r0
 8000dd6:	468b      	mov	fp, r1
 8000dd8:	7bfe      	ldrb	r6, [r7, #15]
 8000dda:	f04f 0001 	mov.w	r0, #1
 8000dde:	f04f 0100 	mov.w	r1, #0
 8000de2:	f1a6 0e20 	sub.w	lr, r6, #32
 8000de6:	f1c6 0c20 	rsb	ip, r6, #32
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000df2:	ea43 030e 	orr.w	r3, r3, lr
 8000df6:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000dfa:	ea43 030c 	orr.w	r3, r3, ip
 8000dfe:	fa00 f206 	lsl.w	r2, r0, r6
 8000e02:	ea4a 0802 	orr.w	r8, sl, r2
 8000e06:	ea4b 0903 	orr.w	r9, fp, r3
 8000e0a:	4644      	mov	r4, r8
 8000e0c:	f029 4570 	bic.w	r5, r9, #4026531840	@ 0xf0000000
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	600c      	str	r4, [r1, #0]
 8000e14:	4628      	mov	r0, r5
 8000e16:	b2c0      	uxtb	r0, r0
 8000e18:	2600      	movs	r6, #0
 8000e1a:	4330      	orrs	r0, r6
 8000e1c:	7108      	strb	r0, [r1, #4]
 8000e1e:	0a28      	lsrs	r0, r5, #8
 8000e20:	b2c0      	uxtb	r0, r0
 8000e22:	2600      	movs	r6, #0
 8000e24:	4330      	orrs	r0, r6
 8000e26:	7148      	strb	r0, [r1, #5]
 8000e28:	0c28      	lsrs	r0, r5, #16
 8000e2a:	b2c0      	uxtb	r0, r0
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	4330      	orrs	r0, r6
 8000e30:	7188      	strb	r0, [r1, #6]
 8000e32:	0e28      	lsrs	r0, r5, #24
 8000e34:	f000 000f 	and.w	r0, r0, #15
 8000e38:	f000 0c0f 	and.w	ip, r0, #15
 8000e3c:	79c8      	ldrb	r0, [r1, #7]
 8000e3e:	f020 000f 	bic.w	r0, r0, #15
 8000e42:	4606      	mov	r6, r0
 8000e44:	4660      	mov	r0, ip
 8000e46:	4330      	orrs	r0, r6
 8000e48:	71c8      	strb	r0, [r1, #7]
    for (uint8_t i = 0; i <= second; i++) {
 8000e4a:	7bf9      	ldrb	r1, [r7, #15]
 8000e4c:	3101      	adds	r1, #1
 8000e4e:	73f9      	strb	r1, [r7, #15]
 8000e50:	7bf8      	ldrb	r0, [r7, #15]
 8000e52:	78f9      	ldrb	r1, [r7, #3]
 8000e54:	4288      	cmp	r0, r1
 8000e56:	d9af      	bls.n	8000db8 <SetSecondLedAccumulating2+0x42>
    }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e64 <SetHourRing>:
    SetDots(clockBits, true, true);
  }
}

void SetHourRing(MyClockBitFields* clockBits, uint8_t hour, bool outerRing, bool innerRing)
{
 8000e64:	b490      	push	{r4, r7}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	4611      	mov	r1, r2
 8000e70:	461a      	mov	r2, r3
 8000e72:	4603      	mov	r3, r0
 8000e74:	70fb      	strb	r3, [r7, #3]
 8000e76:	460b      	mov	r3, r1
 8000e78:	70bb      	strb	r3, [r7, #2]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	707b      	strb	r3, [r7, #1]
  uint8_t h12 = hour % 12;
 8000e7e:	78fa      	ldrb	r2, [r7, #3]
 8000e80:	4b2a      	ldr	r3, [pc, #168]	@ (8000f2c <SetHourRing+0xc8>)
 8000e82:	fba3 1302 	umull	r1, r3, r3, r2
 8000e86:	08d9      	lsrs	r1, r3, #3
 8000e88:	460b      	mov	r3, r1
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	440b      	add	r3, r1
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	73fb      	strb	r3, [r7, #15]
  if (outerRing)
 8000e94:	78bb      	ldrb	r3, [r7, #2]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d018      	beq.n	8000ecc <SetHourRing+0x68>
    clockBits->hoursRingOuter = (1U << h12);
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f002 010f 	and.w	r1, r2, #15
 8000eae:	010c      	lsls	r4, r1, #4
 8000eb0:	79d9      	ldrb	r1, [r3, #7]
 8000eb2:	f001 010f 	and.w	r1, r1, #15
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4621      	mov	r1, r4
 8000eba:	4301      	orrs	r1, r0
 8000ebc:	71d9      	strb	r1, [r3, #7]
 8000ebe:	0912      	lsrs	r2, r2, #4
 8000ec0:	b292      	uxth	r2, r2
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	721a      	strb	r2, [r3, #8]
 8000eca:	e006      	b.n	8000eda <SetHourRing+0x76>
  else
    clockBits->hoursRingOuter = 0;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	79da      	ldrb	r2, [r3, #7]
 8000ed0:	f002 020f 	and.w	r2, r2, #15
 8000ed4:	71da      	strb	r2, [r3, #7]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	721a      	strb	r2, [r3, #8]

  if (innerRing)
 8000eda:	787b      	ldrb	r3, [r7, #1]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d019      	beq.n	8000f14 <SetHourRing+0xb0>
    clockBits->hoursRingInner = (1U << h12);
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	b2d1      	uxtb	r1, r2
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	4301      	orrs	r1, r0
 8000ef6:	7259      	strb	r1, [r3, #9]
 8000ef8:	0a12      	lsrs	r2, r2, #8
 8000efa:	b292      	uxth	r2, r2
 8000efc:	f002 020f 	and.w	r2, r2, #15
 8000f00:	f002 000f 	and.w	r0, r2, #15
 8000f04:	7a9a      	ldrb	r2, [r3, #10]
 8000f06:	f022 020f 	bic.w	r2, r2, #15
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	729a      	strb	r2, [r3, #10]
  else
    clockBits->hoursRingInner = 0;
}
 8000f12:	e006      	b.n	8000f22 <SetHourRing+0xbe>
    clockBits->hoursRingInner = 0;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	725a      	strb	r2, [r3, #9]
 8000f1a:	7a9a      	ldrb	r2, [r3, #10]
 8000f1c:	f022 020f 	bic.w	r2, r2, #15
 8000f20:	729a      	strb	r2, [r3, #10]
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc90      	pop	{r4, r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	aaaaaaab 	.word	0xaaaaaaab

08000f30 <SetTime7Seg_Top>:

/**
 * Ustawia 6 wyświetlaczy 7-seg (top lub bottom) na HH:MM:SS
 */
void SetTime7Seg_Top(MyClockBitFields* clockBits, uint8_t h, uint8_t m, uint8_t s)
{
 8000f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f34:	b09d      	sub	sp, #116	@ 0x74
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8000f42:	4613      	mov	r3, r2
 8000f44:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

	  // Bufor na segmenty wyświetlacza (6 pozycji)
	    uint8_t backBuffer[6] = {0};
 8000f4e:	2300      	movs	r3, #0
 8000f50:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	    // Obsługa godzin
	    if (h < 10) {
 8000f58:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000f5c:	2b09      	cmp	r3, #9
 8000f5e:	d80d      	bhi.n	8000f7c <SetTime7Seg_Top+0x4c>
	        backBuffer[0] = segmentMap[10]; // Puste dziesiątki godzin
 8000f60:	2300      	movs	r3, #0
 8000f62:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = charToSegment('0' + h); // Jednostki godzin
 8000f66:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000f6a:	3330      	adds	r3, #48	@ 0x30
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fd1a 	bl	80009a8 <charToSegment>
 8000f74:	4603      	mov	r3, r0
 8000f76:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
 8000f7a:	e022      	b.n	8000fc2 <SetTime7Seg_Top+0x92>
	    } else {
	        backBuffer[0] = charToSegment('0' + (h / 10)); // Dziesiątki godzin
 8000f7c:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000f80:	4b87      	ldr	r3, [pc, #540]	@ (80011a0 <SetTime7Seg_Top+0x270>)
 8000f82:	fba3 2302 	umull	r2, r3, r3, r2
 8000f86:	08db      	lsrs	r3, r3, #3
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	3330      	adds	r3, #48	@ 0x30
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fd0a 	bl	80009a8 <charToSegment>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = charToSegment('0' + (h % 10)); // Jednostki godzin
 8000f9a:	f897 105b 	ldrb.w	r1, [r7, #91]	@ 0x5b
 8000f9e:	4b80      	ldr	r3, [pc, #512]	@ (80011a0 <SetTime7Seg_Top+0x270>)
 8000fa0:	fba3 2301 	umull	r2, r3, r3, r1
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	1acb      	subs	r3, r1, r3
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	3330      	adds	r3, #48	@ 0x30
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fcf6 	bl	80009a8 <charToSegment>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	    }

	    // Obsługa minut
	    backBuffer[2] = charToSegment('0' + (m / 10)); // Dziesiątki minut
 8000fc2:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8000fc6:	4b76      	ldr	r3, [pc, #472]	@ (80011a0 <SetTime7Seg_Top+0x270>)
 8000fc8:	fba3 2302 	umull	r2, r3, r3, r2
 8000fcc:	08db      	lsrs	r3, r3, #3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	3330      	adds	r3, #48	@ 0x30
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fce7 	bl	80009a8 <charToSegment>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	    backBuffer[3] = charToSegment('0' + (m % 10)); // Jednostki minut
 8000fe0:	f897 105a 	ldrb.w	r1, [r7, #90]	@ 0x5a
 8000fe4:	4b6e      	ldr	r3, [pc, #440]	@ (80011a0 <SetTime7Seg_Top+0x270>)
 8000fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8000fea:	08da      	lsrs	r2, r3, #3
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	1acb      	subs	r3, r1, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	3330      	adds	r3, #48	@ 0x30
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fcd3 	bl	80009a8 <charToSegment>
 8001002:	4603      	mov	r3, r0
 8001004:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	    // Obsługa sekund
	    backBuffer[4] = charToSegment('0' + (s / 10)); // Dziesiątki sekund
 8001008:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 800100c:	4b64      	ldr	r3, [pc, #400]	@ (80011a0 <SetTime7Seg_Top+0x270>)
 800100e:	fba3 2302 	umull	r2, r3, r3, r2
 8001012:	08db      	lsrs	r3, r3, #3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	3330      	adds	r3, #48	@ 0x30
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fcc4 	bl	80009a8 <charToSegment>
 8001020:	4603      	mov	r3, r0
 8001022:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	    backBuffer[5] = charToSegment('0' + (s % 10)); // Jednostki sekund
 8001026:	f897 1059 	ldrb.w	r1, [r7, #89]	@ 0x59
 800102a:	4b5d      	ldr	r3, [pc, #372]	@ (80011a0 <SetTime7Seg_Top+0x270>)
 800102c:	fba3 2301 	umull	r2, r3, r3, r1
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	1acb      	subs	r3, r1, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	3330      	adds	r3, #48	@ 0x30
 8001040:	b2db      	uxtb	r3, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fcb0 	bl	80009a8 <charToSegment>
 8001048:	4603      	mov	r3, r0
 800104a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	    // Zbudowanie wartości 48-bitowej na podstawie bufora
	    uint64_t displayVal = 0ULL;
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[5] << 40);
 800105a:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2200      	movs	r2, #0
 8001062:	653b      	str	r3, [r7, #80]	@ 0x50
 8001064:	657a      	str	r2, [r7, #84]	@ 0x54
 8001066:	f04f 0000 	mov.w	r0, #0
 800106a:	f04f 0100 	mov.w	r1, #0
 800106e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001070:	0219      	lsls	r1, r3, #8
 8001072:	2000      	movs	r0, #0
 8001074:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001078:	ea42 0600 	orr.w	r6, r2, r0
 800107c:	62be      	str	r6, [r7, #40]	@ 0x28
 800107e:	430b      	orrs	r3, r1
 8001080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001082:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001086:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[4] << 32);
 800108a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2200      	movs	r2, #0
 8001092:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001094:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001096:	f04f 0000 	mov.w	r0, #0
 800109a:	f04f 0100 	mov.w	r1, #0
 800109e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010a0:	0019      	movs	r1, r3
 80010a2:	2000      	movs	r0, #0
 80010a4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80010a8:	ea42 0600 	orr.w	r6, r2, r0
 80010ac:	623e      	str	r6, [r7, #32]
 80010ae:	430b      	orrs	r3, r1
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80010b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010b6:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[0] << 24);
 80010ba:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2200      	movs	r2, #0
 80010c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80010c4:	647a      	str	r2, [r7, #68]	@ 0x44
 80010c6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80010ca:	460b      	mov	r3, r1
 80010cc:	0a1d      	lsrs	r5, r3, #8
 80010ce:	460b      	mov	r3, r1
 80010d0:	061c      	lsls	r4, r3, #24
 80010d2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80010d6:	ea42 0104 	orr.w	r1, r2, r4
 80010da:	61b9      	str	r1, [r7, #24]
 80010dc:	432b      	orrs	r3, r5
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80010e4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[1] << 16);
 80010e8:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2200      	movs	r2, #0
 80010f0:	4698      	mov	r8, r3
 80010f2:	4691      	mov	r9, r2
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	f04f 0100 	mov.w	r1, #0
 80010fc:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8001100:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8001104:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8001108:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800110c:	ea42 0400 	orr.w	r4, r2, r0
 8001110:	613c      	str	r4, [r7, #16]
 8001112:	430b      	orrs	r3, r1
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800111a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[2] << 8);
 800111e:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2200      	movs	r2, #0
 8001126:	469a      	mov	sl, r3
 8001128:	4693      	mov	fp, r2
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8001136:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800113a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800113e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001142:	ea40 0402 	orr.w	r4, r0, r2
 8001146:	60bc      	str	r4, [r7, #8]
 8001148:	430b      	orrs	r3, r1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001150:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[3] << 0);
 8001154:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2200      	movs	r2, #0
 800115c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800115e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001160:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001164:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001168:	4621      	mov	r1, r4
 800116a:	4311      	orrs	r1, r2
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	4629      	mov	r1, r5
 8001170:	4319      	orrs	r1, r3
 8001172:	6079      	str	r1, [r7, #4]
 8001174:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001178:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68

	    clockBits->topDisplay = displayVal;
 800117c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001180:	633a      	str	r2, [r7, #48]	@ 0x30
 8001182:	b29b      	uxth	r3, r3
 8001184:	637b      	str	r3, [r7, #52]	@ 0x34
 8001186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001188:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800118c:	4602      	mov	r2, r0
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	460a      	mov	r2, r1
 8001192:	821a      	strh	r2, [r3, #16]
}
 8001194:	bf00      	nop
 8001196:	3774      	adds	r7, #116	@ 0x74
 8001198:	46bd      	mov	sp, r7
 800119a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800119e:	bf00      	nop
 80011a0:	cccccccd 	.word	0xcccccccd

080011a4 <SetTime7Seg_Void>:



void SetTime7Seg_Void(MyClockBitFields* clockBits)
{
 80011a4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80011a8:	b09c      	sub	sp, #112	@ 0x70
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	65f8      	str	r0, [r7, #92]	@ 0x5c

	  // Bufor na segmenty wyświetlacza (6 pozycji)
	    uint8_t backBuffer[6] = {0};
 80011ae:	2300      	movs	r3, #0
 80011b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	    // Obsługa godzin

	        backBuffer[0] = segmentMap[10]; // Puste dziesiątki godzin
 80011b8:	2300      	movs	r3, #0
 80011ba:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = segmentMap[10]; // Jednostki godzin
 80011be:	2300      	movs	r3, #0
 80011c0:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61


	    // Obsługa minut
	    backBuffer[2] = segmentMap[10]; // Dziesiątki minut
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	    backBuffer[3] = segmentMap[10]; // Jednostki minut
 80011ca:	2300      	movs	r3, #0
 80011cc:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	    // Obsługa sekund
	    backBuffer[4] = segmentMap[10]; // Dziesiątki sekund
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	    backBuffer[5] = segmentMap[10]; // Jednostki sekund
 80011d6:	2300      	movs	r3, #0
 80011d8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	    // Zbudowanie wartości 48-bitowej na podstawie bufora
	    uint64_t displayVal = 0ULL;
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[5] << 40);
 80011e8:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2200      	movs	r2, #0
 80011f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80011f2:	657a      	str	r2, [r7, #84]	@ 0x54
 80011f4:	f04f 0000 	mov.w	r0, #0
 80011f8:	f04f 0100 	mov.w	r1, #0
 80011fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011fe:	0219      	lsls	r1, r3, #8
 8001200:	2000      	movs	r0, #0
 8001202:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001206:	ea42 0800 	orr.w	r8, r2, r0
 800120a:	ea43 0901 	orr.w	r9, r3, r1
 800120e:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[4] << 32);
 8001212:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2200      	movs	r2, #0
 800121a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800121c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800121e:	f04f 0000 	mov.w	r0, #0
 8001222:	f04f 0100 	mov.w	r1, #0
 8001226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001228:	0019      	movs	r1, r3
 800122a:	2000      	movs	r0, #0
 800122c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001230:	ea42 0600 	orr.w	r6, r2, r0
 8001234:	623e      	str	r6, [r7, #32]
 8001236:	430b      	orrs	r3, r1
 8001238:	627b      	str	r3, [r7, #36]	@ 0x24
 800123a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800123e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[0] << 24);
 8001242:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2200      	movs	r2, #0
 800124a:	643b      	str	r3, [r7, #64]	@ 0x40
 800124c:	647a      	str	r2, [r7, #68]	@ 0x44
 800124e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8001252:	460b      	mov	r3, r1
 8001254:	0a1d      	lsrs	r5, r3, #8
 8001256:	460b      	mov	r3, r1
 8001258:	061c      	lsls	r4, r3, #24
 800125a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800125e:	ea42 0104 	orr.w	r1, r2, r4
 8001262:	61b9      	str	r1, [r7, #24]
 8001264:	432b      	orrs	r3, r5
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800126c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[1] << 16);
 8001270:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2200      	movs	r2, #0
 8001278:	469a      	mov	sl, r3
 800127a:	4693      	mov	fp, r2
 800127c:	f04f 0000 	mov.w	r0, #0
 8001280:	f04f 0100 	mov.w	r1, #0
 8001284:	ea4f 410b 	mov.w	r1, fp, lsl #16
 8001288:	ea41 411a 	orr.w	r1, r1, sl, lsr #16
 800128c:	ea4f 400a 	mov.w	r0, sl, lsl #16
 8001290:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001294:	ea42 0400 	orr.w	r4, r2, r0
 8001298:	613c      	str	r4, [r7, #16]
 800129a:	430b      	orrs	r3, r1
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80012a2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[2] << 8);
 80012a6:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2200      	movs	r2, #0
 80012ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80012be:	4629      	mov	r1, r5
 80012c0:	020b      	lsls	r3, r1, #8
 80012c2:	4621      	mov	r1, r4
 80012c4:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80012c8:	4621      	mov	r1, r4
 80012ca:	020a      	lsls	r2, r1, #8
 80012cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80012d0:	ea40 0402 	orr.w	r4, r0, r2
 80012d4:	60bc      	str	r4, [r7, #8]
 80012d6:	430b      	orrs	r3, r1
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80012de:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[3] << 0);
 80012e2:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2200      	movs	r2, #0
 80012ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80012ec:	637a      	str	r2, [r7, #52]	@ 0x34
 80012ee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80012f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80012f6:	4621      	mov	r1, r4
 80012f8:	4311      	orrs	r1, r2
 80012fa:	6039      	str	r1, [r7, #0]
 80012fc:	4629      	mov	r1, r5
 80012fe:	4319      	orrs	r1, r3
 8001300:	6079      	str	r1, [r7, #4]
 8001302:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001306:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68

	    clockBits->topDisplay = displayVal;
 800130a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800130e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001310:	b29b      	uxth	r3, r3
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001314:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001316:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800131a:	4602      	mov	r2, r0
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	460a      	mov	r2, r1
 8001320:	821a      	strh	r2, [r3, #16]
}
 8001322:	bf00      	nop
 8001324:	3770      	adds	r7, #112	@ 0x70
 8001326:	46bd      	mov	sp, r7
 8001328:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800132c:	4770      	bx	lr
	...

08001330 <UpdateAllDisplays>:




void UpdateAllDisplays(const MyClockBitFields* clockBits)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
    // Sprawdź, czy SPI jest zajęte
    if (spiTransferInProgress) {
 8001338:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <UpdateAllDisplays+0x7c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d130      	bne.n	80013a4 <UpdateAllDisplays+0x74>
        return;
    }

    spiTransferInProgress = true;
 8001342:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <UpdateAllDisplays+0x7c>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]

    static uint8_t spiTxBuffer[24];
    memset(spiTxBuffer, 0, sizeof(spiTxBuffer));
 8001348:	2218      	movs	r2, #24
 800134a:	2100      	movs	r1, #0
 800134c:	4818      	ldr	r0, [pc, #96]	@ (80013b0 <UpdateAllDisplays+0x80>)
 800134e:	f00a f801 	bl	800b354 <memset>

    const uint8_t* p = (const uint8_t*)clockBits;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	60fb      	str	r3, [r7, #12]
    int byteIndex = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]

    for (int partIndex = 11; partIndex >= 0; partIndex--)
 800135a:	230b      	movs	r3, #11
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	e018      	b.n	8001392 <UpdateAllDisplays+0x62>
    {
        spiTxBuffer[byteIndex++] = p[2 * partIndex + 1];
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	3301      	adds	r3, #1
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	441a      	add	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	1c59      	adds	r1, r3, #1
 800136e:	6179      	str	r1, [r7, #20]
 8001370:	7811      	ldrb	r1, [r2, #0]
 8001372:	4a0f      	ldr	r2, [pc, #60]	@ (80013b0 <UpdateAllDisplays+0x80>)
 8001374:	54d1      	strb	r1, [r2, r3]
        spiTxBuffer[byteIndex++] = p[2 * partIndex + 0];
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	441a      	add	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	1c59      	adds	r1, r3, #1
 8001384:	6179      	str	r1, [r7, #20]
 8001386:	7811      	ldrb	r1, [r2, #0]
 8001388:	4a09      	ldr	r2, [pc, #36]	@ (80013b0 <UpdateAllDisplays+0x80>)
 800138a:	54d1      	strb	r1, [r2, r3]
    for (int partIndex = 11; partIndex >= 0; partIndex--)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	3b01      	subs	r3, #1
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	2b00      	cmp	r3, #0
 8001396:	dae3      	bge.n	8001360 <UpdateAllDisplays+0x30>
    }

    HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 24);
 8001398:	2218      	movs	r2, #24
 800139a:	4905      	ldr	r1, [pc, #20]	@ (80013b0 <UpdateAllDisplays+0x80>)
 800139c:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <UpdateAllDisplays+0x84>)
 800139e:	f007 fe21 	bl	8008fe4 <HAL_SPI_Transmit_DMA>
 80013a2:	e000      	b.n	80013a6 <UpdateAllDisplays+0x76>
        return;
 80013a4:	bf00      	nop
}
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200000aa 	.word	0x200000aa
 80013b0:	200000ac 	.word	0x200000ac
 80013b4:	20000708 	.word	0x20000708

080013b8 <SetPWMPercentGamma>:
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
  uint32_t compare_value = (period + 1) - ((period + 1) * percent / 100);
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
}

void SetPWMPercentGamma(uint8_t percent) {
 80013b8:	b480      	push	{r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if (percent > 100) {
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2b64      	cmp	r3, #100	@ 0x64
 80013c6:	d901      	bls.n	80013cc <SetPWMPercentGamma+0x14>
      percent = 100;
 80013c8:	2364      	movs	r3, #100	@ 0x64
 80013ca:	71fb      	strb	r3, [r7, #7]
  }
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 80013cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001404 <SetPWMPercentGamma+0x4c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d2:	617b      	str	r3, [r7, #20]
  uint8_t gamma_percent = gamma_table[percent];
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001408 <SetPWMPercentGamma+0x50>)
 80013d8:	5cd3      	ldrb	r3, [r2, r3]
 80013da:	74fb      	strb	r3, [r7, #19]
  uint32_t compare_value = (period + 1) * gamma_percent / 100;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	7cfa      	ldrb	r2, [r7, #19]
 80013e2:	fb02 f303 	mul.w	r3, r2, r3
 80013e6:	4a09      	ldr	r2, [pc, #36]	@ (800140c <SetPWMPercentGamma+0x54>)
 80013e8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ec:	095b      	lsrs	r3, r3, #5
 80013ee:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
 80013f0:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <SetPWMPercentGamma+0x4c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80013f8:	bf00      	nop
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	200008d8 	.word	0x200008d8
 8001408:	0800b47c 	.word	0x0800b47c
 800140c:	51eb851f 	.word	0x51eb851f

08001410 <SetSecondLedEvenOdd>:
        HAL_Delay(50);
    }
}

void SetSecondLedEvenOdd(MyClockBitFields* clockBits, uint8_t second, uint8_t minute)
{
 8001410:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001414:	b08c      	sub	sp, #48	@ 0x30
 8001416:	af00      	add	r7, sp, #0
 8001418:	6278      	str	r0, [r7, #36]	@ 0x24
 800141a:	460b      	mov	r3, r1
 800141c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001420:	4613      	mov	r3, r2
 8001422:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (second >= 60) {
 8001426:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800142a:	2b3b      	cmp	r3, #59	@ 0x3b
 800142c:	d902      	bls.n	8001434 <SetSecondLedEvenOdd+0x24>
        second = 59;
 800142e:	233b      	movs	r3, #59	@ 0x3b
 8001430:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
    if ((minute % 2) == 0)
 8001434:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d178      	bne.n	8001534 <SetSecondLedEvenOdd+0x124>
    {
        clockBits->secondsRing = 0ULL;
 8001442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
 8001448:	2200      	movs	r2, #0
 800144a:	705a      	strb	r2, [r3, #1]
 800144c:	2200      	movs	r2, #0
 800144e:	709a      	strb	r2, [r3, #2]
 8001450:	2200      	movs	r2, #0
 8001452:	70da      	strb	r2, [r3, #3]
 8001454:	2200      	movs	r2, #0
 8001456:	711a      	strb	r2, [r3, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	715a      	strb	r2, [r3, #5]
 800145c:	2200      	movs	r2, #0
 800145e:	719a      	strb	r2, [r3, #6]
 8001460:	79da      	ldrb	r2, [r3, #7]
 8001462:	f022 020f 	bic.w	r2, r2, #15
 8001466:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = 0; i <= second; i++)
 8001468:	2300      	movs	r3, #0
 800146a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800146e:	e05a      	b.n	8001526 <SetSecondLedEvenOdd+0x116>
        {
            clockBits->secondsRing |= (1ULL << i);
 8001470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001472:	6818      	ldr	r0, [r3, #0]
 8001474:	791a      	ldrb	r2, [r3, #4]
 8001476:	795c      	ldrb	r4, [r3, #5]
 8001478:	0224      	lsls	r4, r4, #8
 800147a:	4322      	orrs	r2, r4
 800147c:	799c      	ldrb	r4, [r3, #6]
 800147e:	0424      	lsls	r4, r4, #16
 8001480:	4322      	orrs	r2, r4
 8001482:	79db      	ldrb	r3, [r3, #7]
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	061b      	lsls	r3, r3, #24
 800148a:	4313      	orrs	r3, r2
 800148c:	4619      	mov	r1, r3
 800148e:	4680      	mov	r8, r0
 8001490:	4689      	mov	r9, r1
 8001492:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001496:	f04f 0201 	mov.w	r2, #1
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	f1a1 0420 	sub.w	r4, r1, #32
 80014a2:	f1c1 0020 	rsb	r0, r1, #32
 80014a6:	fa03 f601 	lsl.w	r6, r3, r1
 80014aa:	fa02 f404 	lsl.w	r4, r2, r4
 80014ae:	4326      	orrs	r6, r4
 80014b0:	fa22 f000 	lsr.w	r0, r2, r0
 80014b4:	4306      	orrs	r6, r0
 80014b6:	fa02 f501 	lsl.w	r5, r2, r1
 80014ba:	ea48 0305 	orr.w	r3, r8, r5
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	ea49 0306 	orr.w	r3, r9, r6
 80014c4:	61fb      	str	r3, [r7, #28]
 80014c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80014ca:	460b      	mov	r3, r1
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4613      	mov	r3, r2
 80014d0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80014dc:	4642      	mov	r2, r8
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	464a      	mov	r2, r9
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	2100      	movs	r1, #0
 80014e6:	430a      	orrs	r2, r1
 80014e8:	711a      	strb	r2, [r3, #4]
 80014ea:	464a      	mov	r2, r9
 80014ec:	0a12      	lsrs	r2, r2, #8
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	2100      	movs	r1, #0
 80014f2:	430a      	orrs	r2, r1
 80014f4:	715a      	strb	r2, [r3, #5]
 80014f6:	464a      	mov	r2, r9
 80014f8:	0c12      	lsrs	r2, r2, #16
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	2100      	movs	r1, #0
 80014fe:	430a      	orrs	r2, r1
 8001500:	719a      	strb	r2, [r3, #6]
 8001502:	464a      	mov	r2, r9
 8001504:	0e12      	lsrs	r2, r2, #24
 8001506:	f002 020f 	and.w	r2, r2, #15
 800150a:	f002 000f 	and.w	r0, r2, #15
 800150e:	79da      	ldrb	r2, [r3, #7]
 8001510:	f022 020f 	bic.w	r2, r2, #15
 8001514:	4611      	mov	r1, r2
 8001516:	4602      	mov	r2, r0
 8001518:	430a      	orrs	r2, r1
 800151a:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = 0; i <= second; i++)
 800151c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001520:	3301      	adds	r3, #1
 8001522:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001526:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800152a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800152e:	429a      	cmp	r2, r3
 8001530:	d99e      	bls.n	8001470 <SetSecondLedEvenOdd+0x60>
        for (uint8_t i = second + 1; i < 60; i++)
        {
            clockBits->secondsRing |= (1ULL << i);
        }
    }
}
 8001532:	e079      	b.n	8001628 <SetSecondLedEvenOdd+0x218>
        clockBits->secondsRing = 0ULL;
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
 800153a:	2200      	movs	r2, #0
 800153c:	705a      	strb	r2, [r3, #1]
 800153e:	2200      	movs	r2, #0
 8001540:	709a      	strb	r2, [r3, #2]
 8001542:	2200      	movs	r2, #0
 8001544:	70da      	strb	r2, [r3, #3]
 8001546:	2200      	movs	r2, #0
 8001548:	711a      	strb	r2, [r3, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	715a      	strb	r2, [r3, #5]
 800154e:	2200      	movs	r2, #0
 8001550:	719a      	strb	r2, [r3, #6]
 8001552:	79da      	ldrb	r2, [r3, #7]
 8001554:	f022 020f 	bic.w	r2, r2, #15
 8001558:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = second + 1; i < 60; i++)
 800155a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800155e:	3301      	adds	r3, #1
 8001560:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001564:	e05c      	b.n	8001620 <SetSecondLedEvenOdd+0x210>
            clockBits->secondsRing |= (1ULL << i);
 8001566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	791a      	ldrb	r2, [r3, #4]
 800156c:	795c      	ldrb	r4, [r3, #5]
 800156e:	0224      	lsls	r4, r4, #8
 8001570:	4322      	orrs	r2, r4
 8001572:	799c      	ldrb	r4, [r3, #6]
 8001574:	0424      	lsls	r4, r4, #16
 8001576:	4322      	orrs	r2, r4
 8001578:	79db      	ldrb	r3, [r3, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	061b      	lsls	r3, r3, #24
 8001580:	4313      	orrs	r3, r2
 8001582:	4619      	mov	r1, r3
 8001584:	4680      	mov	r8, r0
 8001586:	4689      	mov	r9, r1
 8001588:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800158c:	f04f 0201 	mov.w	r2, #1
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	f1a1 0420 	sub.w	r4, r1, #32
 8001598:	f1c1 0020 	rsb	r0, r1, #32
 800159c:	fa03 fb01 	lsl.w	fp, r3, r1
 80015a0:	fa02 f404 	lsl.w	r4, r2, r4
 80015a4:	ea4b 0b04 	orr.w	fp, fp, r4
 80015a8:	fa22 f000 	lsr.w	r0, r2, r0
 80015ac:	ea4b 0b00 	orr.w	fp, fp, r0
 80015b0:	fa02 fa01 	lsl.w	sl, r2, r1
 80015b4:	ea48 030a 	orr.w	r3, r8, sl
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	ea49 030b 	orr.w	r3, r9, fp
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015c4:	460b      	mov	r3, r1
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	4613      	mov	r3, r2
 80015ca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015d6:	4622      	mov	r2, r4
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	462a      	mov	r2, r5
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	2100      	movs	r1, #0
 80015e0:	430a      	orrs	r2, r1
 80015e2:	711a      	strb	r2, [r3, #4]
 80015e4:	462a      	mov	r2, r5
 80015e6:	0a12      	lsrs	r2, r2, #8
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	2100      	movs	r1, #0
 80015ec:	430a      	orrs	r2, r1
 80015ee:	715a      	strb	r2, [r3, #5]
 80015f0:	462a      	mov	r2, r5
 80015f2:	0c12      	lsrs	r2, r2, #16
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	2100      	movs	r1, #0
 80015f8:	430a      	orrs	r2, r1
 80015fa:	719a      	strb	r2, [r3, #6]
 80015fc:	462a      	mov	r2, r5
 80015fe:	0e12      	lsrs	r2, r2, #24
 8001600:	f002 020f 	and.w	r2, r2, #15
 8001604:	f002 000f 	and.w	r0, r2, #15
 8001608:	79da      	ldrb	r2, [r3, #7]
 800160a:	f022 020f 	bic.w	r2, r2, #15
 800160e:	4611      	mov	r1, r2
 8001610:	4602      	mov	r2, r0
 8001612:	430a      	orrs	r2, r1
 8001614:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = second + 1; i < 60; i++)
 8001616:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800161a:	3301      	adds	r3, #1
 800161c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001620:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001624:	2b3b      	cmp	r3, #59	@ 0x3b
 8001626:	d99e      	bls.n	8001566 <SetSecondLedEvenOdd+0x156>
}
 8001628:	bf00      	nop
 800162a:	3730      	adds	r7, #48	@ 0x30
 800162c:	46bd      	mov	sp, r7
 800162e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001632:	4770      	bx	lr

08001634 <SetHourRingCustom>:
  clockBits->dots = val;
}


void SetHourRingCustom(MyClockBitFields* clockBits, uint8_t outerMode, uint8_t innerMode)
{
 8001634:	b490      	push	{r4, r7}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	70fb      	strb	r3, [r7, #3]
 8001640:	4613      	mov	r3, r2
 8001642:	70bb      	strb	r3, [r7, #2]
    // Maska dla pełnego pierścienia (wszystkie 12 godzin)
    uint16_t fullMask = 0x0FFF;  // 12-bitowy: bity 0-11 ustawione na 1
 8001644:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001648:	81fb      	strh	r3, [r7, #14]
    // Maska dla kwadransów: godziny 12 (bit 0), 3 (bit 3), 6 (bit 6), 9 (bit 9)
    uint16_t quarterMask = (1U << 0) | (1U << 3) | (1U << 6) | (1U << 9);
 800164a:	f240 2349 	movw	r3, #585	@ 0x249
 800164e:	81bb      	strh	r3, [r7, #12]

    // Ustawienia dla zewnętrznego pierścienia
    switch(outerMode)
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d002      	beq.n	800165c <SetHourRingCustom+0x28>
 8001656:	2b02      	cmp	r3, #2
 8001658:	d016      	beq.n	8001688 <SetHourRingCustom+0x54>
 800165a:	e02b      	b.n	80016b4 <SetHourRingCustom+0x80>
    {
        case 1:
            clockBits->hoursRingOuter = fullMask;
 800165c:	89fb      	ldrh	r3, [r7, #14]
 800165e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001662:	b29a      	uxth	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f002 010f 	and.w	r1, r2, #15
 800166a:	010c      	lsls	r4, r1, #4
 800166c:	79d9      	ldrb	r1, [r3, #7]
 800166e:	f001 010f 	and.w	r1, r1, #15
 8001672:	4608      	mov	r0, r1
 8001674:	4621      	mov	r1, r4
 8001676:	4301      	orrs	r1, r0
 8001678:	71d9      	strb	r1, [r3, #7]
 800167a:	0912      	lsrs	r2, r2, #4
 800167c:	b292      	uxth	r2, r2
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	2100      	movs	r1, #0
 8001682:	430a      	orrs	r2, r1
 8001684:	721a      	strb	r2, [r3, #8]
            break;
 8001686:	e01d      	b.n	80016c4 <SetHourRingCustom+0x90>
        case 2:
            clockBits->hoursRingOuter = quarterMask;
 8001688:	89bb      	ldrh	r3, [r7, #12]
 800168a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168e:	b29a      	uxth	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f002 010f 	and.w	r1, r2, #15
 8001696:	010c      	lsls	r4, r1, #4
 8001698:	79d9      	ldrb	r1, [r3, #7]
 800169a:	f001 010f 	and.w	r1, r1, #15
 800169e:	4608      	mov	r0, r1
 80016a0:	4621      	mov	r1, r4
 80016a2:	4301      	orrs	r1, r0
 80016a4:	71d9      	strb	r1, [r3, #7]
 80016a6:	0912      	lsrs	r2, r2, #4
 80016a8:	b292      	uxth	r2, r2
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	2100      	movs	r1, #0
 80016ae:	430a      	orrs	r2, r1
 80016b0:	721a      	strb	r2, [r3, #8]
            break;
 80016b2:	e007      	b.n	80016c4 <SetHourRingCustom+0x90>
        default:  // dla wartości 0 i innych nieznanych – wyłącz
            clockBits->hoursRingOuter = 0;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	79da      	ldrb	r2, [r3, #7]
 80016b8:	f002 020f 	and.w	r2, r2, #15
 80016bc:	71da      	strb	r2, [r3, #7]
 80016be:	2200      	movs	r2, #0
 80016c0:	721a      	strb	r2, [r3, #8]
            break;
 80016c2:	bf00      	nop
    }

    // Ustawienia dla wewnętrznego pierścienia
    switch(innerMode)
 80016c4:	78bb      	ldrb	r3, [r7, #2]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d002      	beq.n	80016d0 <SetHourRingCustom+0x9c>
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d017      	beq.n	80016fe <SetHourRingCustom+0xca>
 80016ce:	e02d      	b.n	800172c <SetHourRingCustom+0xf8>
    {
        case 1:
            clockBits->hoursRingInner = fullMask;
 80016d0:	89fb      	ldrh	r3, [r7, #14]
 80016d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	b2d1      	uxtb	r1, r2
 80016dc:	2000      	movs	r0, #0
 80016de:	4301      	orrs	r1, r0
 80016e0:	7259      	strb	r1, [r3, #9]
 80016e2:	0a12      	lsrs	r2, r2, #8
 80016e4:	b292      	uxth	r2, r2
 80016e6:	f002 020f 	and.w	r2, r2, #15
 80016ea:	f002 000f 	and.w	r0, r2, #15
 80016ee:	7a9a      	ldrb	r2, [r3, #10]
 80016f0:	f022 020f 	bic.w	r2, r2, #15
 80016f4:	4611      	mov	r1, r2
 80016f6:	4602      	mov	r2, r0
 80016f8:	430a      	orrs	r2, r1
 80016fa:	729a      	strb	r2, [r3, #10]
            break;
 80016fc:	e01e      	b.n	800173c <SetHourRingCustom+0x108>
        case 2:
            clockBits->hoursRingInner = quarterMask;
 80016fe:	89bb      	ldrh	r3, [r7, #12]
 8001700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001704:	b29a      	uxth	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	b2d1      	uxtb	r1, r2
 800170a:	2000      	movs	r0, #0
 800170c:	4301      	orrs	r1, r0
 800170e:	7259      	strb	r1, [r3, #9]
 8001710:	0a12      	lsrs	r2, r2, #8
 8001712:	b292      	uxth	r2, r2
 8001714:	f002 020f 	and.w	r2, r2, #15
 8001718:	f002 000f 	and.w	r0, r2, #15
 800171c:	7a9a      	ldrb	r2, [r3, #10]
 800171e:	f022 020f 	bic.w	r2, r2, #15
 8001722:	4611      	mov	r1, r2
 8001724:	4602      	mov	r2, r0
 8001726:	430a      	orrs	r2, r1
 8001728:	729a      	strb	r2, [r3, #10]
            break;
 800172a:	e007      	b.n	800173c <SetHourRingCustom+0x108>
        default:  // dla wartości 0 i innych nieznanych – wyłącz
            clockBits->hoursRingInner = 0;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	725a      	strb	r2, [r3, #9]
 8001732:	7a9a      	ldrb	r2, [r3, #10]
 8001734:	f022 020f 	bic.w	r2, r2, #15
 8001738:	729a      	strb	r2, [r3, #10]
            break;
 800173a:	bf00      	nop
    }
}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bc90      	pop	{r4, r7}
 8001744:	4770      	bx	lr
	...

08001748 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4b27      	ldr	r3, [pc, #156]	@ (80017f0 <MX_DMA_Init+0xa8>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4a26      	ldr	r2, [pc, #152]	@ (80017f0 <MX_DMA_Init+0xa8>)
 8001758:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4b24      	ldr	r3, [pc, #144]	@ (80017f0 <MX_DMA_Init+0xa8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <MX_DMA_Init+0xa8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4a1f      	ldr	r2, [pc, #124]	@ (80017f0 <MX_DMA_Init+0xa8>)
 8001774:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4b1d      	ldr	r3, [pc, #116]	@ (80017f0 <MX_DMA_Init+0xa8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	200d      	movs	r0, #13
 800178c:	f003 f8c5 	bl	800491a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001790:	200d      	movs	r0, #13
 8001792:	f003 f8de 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	200e      	movs	r0, #14
 800179c:	f003 f8bd 	bl	800491a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80017a0:	200e      	movs	r0, #14
 80017a2:	f003 f8d6 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	200f      	movs	r0, #15
 80017ac:	f003 f8b5 	bl	800491a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80017b0:	200f      	movs	r0, #15
 80017b2:	f003 f8ce 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	202f      	movs	r0, #47	@ 0x2f
 80017bc:	f003 f8ad 	bl	800491a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80017c0:	202f      	movs	r0, #47	@ 0x2f
 80017c2:	f003 f8c6 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	203a      	movs	r0, #58	@ 0x3a
 80017cc:	f003 f8a5 	bl	800491a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017d0:	203a      	movs	r0, #58	@ 0x3a
 80017d2:	f003 f8be 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	203b      	movs	r0, #59	@ 0x3b
 80017dc:	f003 f89d 	bl	800491a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80017e0:	203b      	movs	r0, #59	@ 0x3b
 80017e2:	f003 f8b6 	bl	8004952 <HAL_NVIC_EnableIRQ>

}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	@ 0x28
 80017f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b2c      	ldr	r3, [pc, #176]	@ (80018c0 <MX_GPIO_Init+0xcc>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a2b      	ldr	r2, [pc, #172]	@ (80018c0 <MX_GPIO_Init+0xcc>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b29      	ldr	r3, [pc, #164]	@ (80018c0 <MX_GPIO_Init+0xcc>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b25      	ldr	r3, [pc, #148]	@ (80018c0 <MX_GPIO_Init+0xcc>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a24      	ldr	r2, [pc, #144]	@ (80018c0 <MX_GPIO_Init+0xcc>)
 8001830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b22      	ldr	r3, [pc, #136]	@ (80018c0 <MX_GPIO_Init+0xcc>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b1e      	ldr	r3, [pc, #120]	@ (80018c0 <MX_GPIO_Init+0xcc>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a1d      	ldr	r2, [pc, #116]	@ (80018c0 <MX_GPIO_Init+0xcc>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <MX_GPIO_Init+0xcc>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4b17      	ldr	r3, [pc, #92]	@ (80018c0 <MX_GPIO_Init+0xcc>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a16      	ldr	r2, [pc, #88]	@ (80018c0 <MX_GPIO_Init+0xcc>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <MX_GPIO_Init+0xcc>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	2140      	movs	r1, #64	@ 0x40
 800187e:	4811      	ldr	r0, [pc, #68]	@ (80018c4 <MX_GPIO_Init+0xd0>)
 8001880:	f003 fdca 	bl	8005418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_LATCH_Pin;
 8001884:	2340      	movs	r3, #64	@ 0x40
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	480a      	ldr	r0, [pc, #40]	@ (80018c4 <MX_GPIO_Init+0xd0>)
 800189c:	f003 fc20 	bl	80050e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 80018a0:	2320      	movs	r3, #32
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a8:	2301      	movs	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4805      	ldr	r0, [pc, #20]	@ (80018c8 <MX_GPIO_Init+0xd4>)
 80018b4:	f003 fc14 	bl	80050e0 <HAL_GPIO_Init>

}
 80018b8:	bf00      	nop
 80018ba:	3728      	adds	r7, #40	@ 0x28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020400 	.word	0x40020400

080018cc <IsNmeaSeparator>:
extern DMA_HandleTypeDef hdma_usart1_rx;
uint8_t gps_dma_buffer[GPS_DMA_BUFFER_SIZE];
gps_data_t gps_data = {0};
static uint16_t old_pos = 0;
static bool IsNmeaSeparator(char c)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
    return (c == ',' || c == '*');  // Zwraca true, jeśli znak jest ',' lub '*'
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b2c      	cmp	r3, #44	@ 0x2c
 80018da:	d002      	beq.n	80018e2 <IsNmeaSeparator+0x16>
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	2b2a      	cmp	r3, #42	@ 0x2a
 80018e0:	d101      	bne.n	80018e6 <IsNmeaSeparator+0x1a>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <IsNmeaSeparator+0x1c>
 80018e6:	2300      	movs	r3, #0
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	b2db      	uxtb	r3, r3
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <ParseUInt8>:
static uint8_t ParseUInt8(const char *startingPtr, uint8_t maxLen)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;  // Inicjalizacja zmiennej do przechowywania wyniku
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]
    // Iteracja przez każdy znak w ciągu, do maksymalnej długości
    for (uint8_t i = 0; i < maxLen; i++)
 800190a:	2300      	movs	r3, #0
 800190c:	73bb      	strb	r3, [r7, #14]
 800190e:	e01c      	b.n	800194a <ParseUInt8+0x50>
    {
        // Sprawdzenie, czy znak jest cyfrą ('0' - '9')
        if (startingPtr[i] < '0' || startingPtr[i] > '9')
 8001910:	7bbb      	ldrb	r3, [r7, #14]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b2f      	cmp	r3, #47	@ 0x2f
 800191a:	d91a      	bls.n	8001952 <ParseUInt8+0x58>
 800191c:	7bbb      	ldrb	r3, [r7, #14]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b39      	cmp	r3, #57	@ 0x39
 8001926:	d814      	bhi.n	8001952 <ParseUInt8+0x58>
            break;  // Przerwanie pętli, jeśli znak nie jest cyfrą
        // Aktualizacja wartości poprzez przesunięcie dziesiętne i dodanie nowej cyfry
        value = (uint8_t)(value * 10 + (startingPtr[i] - '0'));
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	461a      	mov	r2, r3
 800192c:	0092      	lsls	r2, r2, #2
 800192e:	4413      	add	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	b2da      	uxtb	r2, r3
 8001934:	7bbb      	ldrb	r3, [r7, #14]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	440b      	add	r3, r1
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4413      	add	r3, r2
 800193e:	b2db      	uxtb	r3, r3
 8001940:	3b30      	subs	r3, #48	@ 0x30
 8001942:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < maxLen; i++)
 8001944:	7bbb      	ldrb	r3, [r7, #14]
 8001946:	3301      	adds	r3, #1
 8001948:	73bb      	strb	r3, [r7, #14]
 800194a:	7bba      	ldrb	r2, [r7, #14]
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	429a      	cmp	r2, r3
 8001950:	d3de      	bcc.n	8001910 <ParseUInt8+0x16>
    }
    return value;  // Zwrócenie sparsowanej wartości
 8001952:	7bfb      	ldrb	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <ParseGPRMC>:
 * // gps_data.day = 23
 * // gps_data.month = 03
 * // gps_data.year = 94
 */
static void ParseGPRMC(const char *nmeaLine)
{
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	b091      	sub	sp, #68	@ 0x44
 8001964:	af04      	add	r7, sp, #16
 8001966:	6078      	str	r0, [r7, #4]
    const char *p = nmeaLine;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t fieldIndex = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    const char *fieldPtr = NULL;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
    for (; *p != '\0'; p++)
 8001976:	e071      	b.n	8001a5c <ParseGPRMC+0xfc>
    {
        if (IsNmeaSeparator(*p) || *p == '\r' || *p == '\n')
 8001978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ffa5 	bl	80018cc <IsNmeaSeparator>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d107      	bne.n	8001998 <ParseGPRMC+0x38>
 8001988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b0d      	cmp	r3, #13
 800198e:	d003      	beq.n	8001998 <ParseGPRMC+0x38>
 8001990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b0a      	cmp	r3, #10
 8001996:	d155      	bne.n	8001a44 <ParseGPRMC+0xe4>
        {
            if (fieldPtr)
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	2b00      	cmp	r3, #0
 800199c:	d04a      	beq.n	8001a34 <ParseGPRMC+0xd4>
            {
                switch(fieldIndex)
 800199e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80019a2:	2b09      	cmp	r3, #9
 80019a4:	d028      	beq.n	80019f8 <ParseGPRMC+0x98>
 80019a6:	2b09      	cmp	r3, #9
 80019a8:	dc43      	bgt.n	8001a32 <ParseGPRMC+0xd2>
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d002      	beq.n	80019b4 <ParseGPRMC+0x54>
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d01d      	beq.n	80019ee <ParseGPRMC+0x8e>
                        gps_data.day   = ParseUInt8(fieldPtr, 2);
                        gps_data.month = ParseUInt8(fieldPtr+2, 2);
                        gps_data.year  = ParseUInt8(fieldPtr+4, 2);
                        break;
                    default:
                        break;
 80019b2:	e03e      	b.n	8001a32 <ParseGPRMC+0xd2>
                        gps_data.hours   = ParseUInt8(fieldPtr, 2);
 80019b4:	2102      	movs	r1, #2
 80019b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019b8:	f7ff ff9f 	bl	80018fa <ParseUInt8>
 80019bc:	4603      	mov	r3, r0
 80019be:	461a      	mov	r2, r3
 80019c0:	4b42      	ldr	r3, [pc, #264]	@ (8001acc <ParseGPRMC+0x16c>)
 80019c2:	701a      	strb	r2, [r3, #0]
                        gps_data.minutes = ParseUInt8(fieldPtr+2, 2);
 80019c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c6:	3302      	adds	r3, #2
 80019c8:	2102      	movs	r1, #2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff95 	bl	80018fa <ParseUInt8>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b3d      	ldr	r3, [pc, #244]	@ (8001acc <ParseGPRMC+0x16c>)
 80019d6:	705a      	strb	r2, [r3, #1]
                        gps_data.seconds = ParseUInt8(fieldPtr+4, 2);
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019da:	3304      	adds	r3, #4
 80019dc:	2102      	movs	r1, #2
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ff8b 	bl	80018fa <ParseUInt8>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b38      	ldr	r3, [pc, #224]	@ (8001acc <ParseGPRMC+0x16c>)
 80019ea:	709a      	strb	r2, [r3, #2]
                        break;
 80019ec:	e022      	b.n	8001a34 <ParseGPRMC+0xd4>
                        gps_data.fix = *fieldPtr;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	781a      	ldrb	r2, [r3, #0]
 80019f2:	4b36      	ldr	r3, [pc, #216]	@ (8001acc <ParseGPRMC+0x16c>)
 80019f4:	71da      	strb	r2, [r3, #7]
                        break;
 80019f6:	e01d      	b.n	8001a34 <ParseGPRMC+0xd4>
                        gps_data.day   = ParseUInt8(fieldPtr, 2);
 80019f8:	2102      	movs	r1, #2
 80019fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019fc:	f7ff ff7d 	bl	80018fa <ParseUInt8>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b31      	ldr	r3, [pc, #196]	@ (8001acc <ParseGPRMC+0x16c>)
 8001a06:	70da      	strb	r2, [r3, #3]
                        gps_data.month = ParseUInt8(fieldPtr+2, 2);
 8001a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ff73 	bl	80018fa <ParseUInt8>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b2c      	ldr	r3, [pc, #176]	@ (8001acc <ParseGPRMC+0x16c>)
 8001a1a:	711a      	strb	r2, [r3, #4]
                        gps_data.year  = ParseUInt8(fieldPtr+4, 2);
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1e:	3304      	adds	r3, #4
 8001a20:	2102      	movs	r1, #2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff ff69 	bl	80018fa <ParseUInt8>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b27      	ldr	r3, [pc, #156]	@ (8001acc <ParseGPRMC+0x16c>)
 8001a2e:	715a      	strb	r2, [r3, #5]
                        break;
 8001a30:	e000      	b.n	8001a34 <ParseGPRMC+0xd4>
                        break;
 8001a32:	bf00      	nop
                }
            }
            fieldPtr = NULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	@ 0x24
            fieldIndex++;
 8001a38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001a42:	e004      	b.n	8001a4e <ParseGPRMC+0xee>
        }
        else
        {
            if (!fieldPtr) fieldPtr = p;
 8001a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <ParseGPRMC+0xee>
 8001a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (*p == '*') break;
 8001a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a54:	d007      	beq.n	8001a66 <ParseGPRMC+0x106>
    for (; *p != '\0'; p++)
 8001a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a58:	3301      	adds	r3, #1
 8001a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d189      	bne.n	8001978 <ParseGPRMC+0x18>
 8001a64:	e000      	b.n	8001a68 <ParseGPRMC+0x108>
        if (*p == '*') break;
 8001a66:	bf00      	nop
    }
    // Natychmiastowa aktualizacja RTC zaraz po poprawnym odczycie GPRMC
    // (sprawdzamy czy fix jest 'A'):
    if (gps_data.fix == 'A')
 8001a68:	4b18      	ldr	r3, [pc, #96]	@ (8001acc <ParseGPRMC+0x16c>)
 8001a6a:	79db      	ldrb	r3, [r3, #7]
 8001a6c:	2b41      	cmp	r3, #65	@ 0x41
 8001a6e:	d129      	bne.n	8001ac4 <ParseGPRMC+0x164>
        // Tworzymy struktury dla lokalnego czasu
        RTC_TimeTypeDef localTime;
        RTC_DateTypeDef localDate;

        // Konwertuj z GPS (UTC) na czas lokalny
        ConvertUtcToLocalTime(gps_data.hours, gps_data.minutes, gps_data.seconds,
 8001a70:	4b16      	ldr	r3, [pc, #88]	@ (8001acc <ParseGPRMC+0x16c>)
 8001a72:	7818      	ldrb	r0, [r3, #0]
 8001a74:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <ParseGPRMC+0x16c>)
 8001a76:	785c      	ldrb	r4, [r3, #1]
 8001a78:	4b14      	ldr	r3, [pc, #80]	@ (8001acc <ParseGPRMC+0x16c>)
 8001a7a:	789d      	ldrb	r5, [r3, #2]
 8001a7c:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <ParseGPRMC+0x16c>)
 8001a7e:	78de      	ldrb	r6, [r3, #3]
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <ParseGPRMC+0x16c>)
 8001a82:	791b      	ldrb	r3, [r3, #4]
 8001a84:	4a11      	ldr	r2, [pc, #68]	@ (8001acc <ParseGPRMC+0x16c>)
 8001a86:	7952      	ldrb	r2, [r2, #5]
 8001a88:	f107 010c 	add.w	r1, r7, #12
 8001a8c:	9103      	str	r1, [sp, #12]
 8001a8e:	f107 0110 	add.w	r1, r7, #16
 8001a92:	9102      	str	r1, [sp, #8]
 8001a94:	9201      	str	r2, [sp, #4]
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	4633      	mov	r3, r6
 8001a9a:	462a      	mov	r2, r5
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	f000 f911 	bl	8001cc4 <ConvertUtcToLocalTime>
                              gps_data.day,   gps_data.month,  gps_data.year,
                              &localTime, &localDate);
        // I wpisz do RTC
        HAL_RTC_SetTime(&hrtc, &localTime, RTC_FORMAT_BIN);
 8001aa2:	f107 0310 	add.w	r3, r7, #16
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4809      	ldr	r0, [pc, #36]	@ (8001ad0 <ParseGPRMC+0x170>)
 8001aac:	f006 ff87 	bl	80089be <HAL_RTC_SetTime>
        HAL_RTC_SetDate(&hrtc, &localDate, RTC_FORMAT_BIN);
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4805      	ldr	r0, [pc, #20]	@ (8001ad0 <ParseGPRMC+0x170>)
 8001aba:	f007 f878 	bl	8008bae <HAL_RTC_SetDate>
        colon =1;
 8001abe:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <ParseGPRMC+0x174>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
    }
}
 8001ac4:	bf00      	nop
 8001ac6:	3734      	adds	r7, #52	@ 0x34
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001acc:	200004c8 	.word	0x200004c8
 8001ad0:	200006a4 	.word	0x200006a4
 8001ad4:	200000c5 	.word	0x200000c5

08001ad8 <ParseGPGGA>:

static void ParseGPGGA(const char *nmeaLine)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    const char *p = nmeaLine;          // Wskaźnik do iteracji przez ciąg znaków
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	617b      	str	r3, [r7, #20]
    uint8_t fieldIndex = 0;            // Indeks aktualnie przetwarzanego pola
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	74fb      	strb	r3, [r7, #19]
    const char *fieldPtr = NULL;       // Wskaźnik do początku aktualnego pola
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
    // Iteracja przez każdy znak w linii NMEA
    for (; *p != '\0'; p++)
 8001aec:	e02f      	b.n	8001b4e <ParseGPGGA+0x76>
    {
        // Sprawdzenie, czy znak jest separatorem lub końcem linii
        if (IsNmeaSeparator(*p) || *p == '\r' || *p == '\n')
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff feea 	bl	80018cc <IsNmeaSeparator>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d107      	bne.n	8001b0e <ParseGPGGA+0x36>
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b0d      	cmp	r3, #13
 8001b04:	d003      	beq.n	8001b0e <ParseGPGGA+0x36>
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b0a      	cmp	r3, #10
 8001b0c:	d113      	bne.n	8001b36 <ParseGPGGA+0x5e>
        {
            // Jeśli aktualne pole nie jest puste i indeks pola to 7, przetwarzamy jego zawartość
            if (fieldPtr && fieldIndex == 7)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00a      	beq.n	8001b2a <ParseGPGGA+0x52>
 8001b14:	7cfb      	ldrb	r3, [r7, #19]
 8001b16:	2b07      	cmp	r3, #7
 8001b18:	d107      	bne.n	8001b2a <ParseGPGGA+0x52>
            {
                gps_data.satellites = ParseUInt8(fieldPtr, 2);    // Liczba satelit (np. '08' oznacza 8)
 8001b1a:	2102      	movs	r1, #2
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f7ff feec 	bl	80018fa <ParseUInt8>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <ParseGPGGA+0x8c>)
 8001b28:	719a      	strb	r2, [r3, #6]
            }
            fieldPtr = NULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
            fieldIndex++;
 8001b2e:	7cfb      	ldrb	r3, [r7, #19]
 8001b30:	3301      	adds	r3, #1
 8001b32:	74fb      	strb	r3, [r7, #19]
 8001b34:	e004      	b.n	8001b40 <ParseGPGGA+0x68>
        }
        else
        {
            // Jeśli jeszcze nie ustawiono początku pola, ustawiamy wskaźnik
            if (!fieldPtr)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <ParseGPGGA+0x68>
                fieldPtr = p;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	60fb      	str	r3, [r7, #12]
        }
        // Jeśli napotkano '*', kończymy parsowanie tej linii
        if (*p == '*')
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b46:	d007      	beq.n	8001b58 <ParseGPGGA+0x80>
    for (; *p != '\0'; p++)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1cb      	bne.n	8001aee <ParseGPGGA+0x16>
            break;
    }
}
 8001b56:	e000      	b.n	8001b5a <ParseGPGGA+0x82>
            break;
 8001b58:	bf00      	nop
}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200004c8 	.word	0x200004c8

08001b68 <GPS_ProcessBuffer>:

void GPS_ProcessBuffer(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
    /* Obliczenie aktualnej pozycji w buforze */
    uint16_t now_pos = GPS_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8001b6e:	4b40      	ldr	r3, [pc, #256]	@ (8001c70 <GPS_ProcessBuffer+0x108>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8001b7a:	80fb      	strh	r3, [r7, #6]
    while (old_pos != now_pos)
 8001b7c:	e06d      	b.n	8001c5a <GPS_ProcessBuffer+0xf2>
    {
        char c = (char)gps_dma_buffer[old_pos];
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c74 <GPS_ProcessBuffer+0x10c>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b3c      	ldr	r3, [pc, #240]	@ (8001c78 <GPS_ProcessBuffer+0x110>)
 8001b86:	5c9b      	ldrb	r3, [r3, r2]
 8001b88:	717b      	strb	r3, [r7, #5]
        static char lineBuf[128];
        static uint8_t lineIndex = 0;
        if (lineIndex < sizeof(lineBuf) - 1)
 8001b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c7c <GPS_ProcessBuffer+0x114>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001b90:	d809      	bhi.n	8001ba6 <GPS_ProcessBuffer+0x3e>
        {
            lineBuf[lineIndex++] = c;
 8001b92:	4b3a      	ldr	r3, [pc, #232]	@ (8001c7c <GPS_ProcessBuffer+0x114>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	b2d1      	uxtb	r1, r2
 8001b9a:	4a38      	ldr	r2, [pc, #224]	@ (8001c7c <GPS_ProcessBuffer+0x114>)
 8001b9c:	7011      	strb	r1, [r2, #0]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4a37      	ldr	r2, [pc, #220]	@ (8001c80 <GPS_ProcessBuffer+0x118>)
 8001ba2:	797b      	ldrb	r3, [r7, #5]
 8001ba4:	5453      	strb	r3, [r2, r1]
        }
        if (c == '\n' || c == '\r')
 8001ba6:	797b      	ldrb	r3, [r7, #5]
 8001ba8:	2b0a      	cmp	r3, #10
 8001baa:	d002      	beq.n	8001bb2 <GPS_ProcessBuffer+0x4a>
 8001bac:	797b      	ldrb	r3, [r7, #5]
 8001bae:	2b0d      	cmp	r3, #13
 8001bb0:	d145      	bne.n	8001c3e <GPS_ProcessBuffer+0xd6>
        {
            lineBuf[lineIndex] = '\0';
 8001bb2:	4b32      	ldr	r3, [pc, #200]	@ (8001c7c <GPS_ProcessBuffer+0x114>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b31      	ldr	r3, [pc, #196]	@ (8001c80 <GPS_ProcessBuffer+0x118>)
 8001bba:	2100      	movs	r1, #0
 8001bbc:	5499      	strb	r1, [r3, r2]
            if (strncmp(lineBuf, "$GPRMC", 6) == 0)
 8001bbe:	2206      	movs	r2, #6
 8001bc0:	4930      	ldr	r1, [pc, #192]	@ (8001c84 <GPS_ProcessBuffer+0x11c>)
 8001bc2:	482f      	ldr	r0, [pc, #188]	@ (8001c80 <GPS_ProcessBuffer+0x118>)
 8001bc4:	f009 fbce 	bl	800b364 <strncmp>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <GPS_ProcessBuffer+0x6c>
            {
                ParseGPRMC(lineBuf);
 8001bce:	482c      	ldr	r0, [pc, #176]	@ (8001c80 <GPS_ProcessBuffer+0x118>)
 8001bd0:	f7ff fec6 	bl	8001960 <ParseGPRMC>
            }
          if (strncmp(lineBuf, "$GPGGA", 6) == 0)
 8001bd4:	2206      	movs	r2, #6
 8001bd6:	492c      	ldr	r1, [pc, #176]	@ (8001c88 <GPS_ProcessBuffer+0x120>)
 8001bd8:	4829      	ldr	r0, [pc, #164]	@ (8001c80 <GPS_ProcessBuffer+0x118>)
 8001bda:	f009 fbc3 	bl	800b364 <strncmp>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <GPS_ProcessBuffer+0x82>
            {
                ParseGPGGA(lineBuf);
 8001be4:	4826      	ldr	r0, [pc, #152]	@ (8001c80 <GPS_ProcessBuffer+0x118>)
 8001be6:	f7ff ff77 	bl	8001ad8 <ParseGPGGA>
            }
            if (strncmp(lineBuf, "$GPRMC", 6) == 0 || strncmp(lineBuf, "$GNRMC", 6) == 0)
 8001bea:	2206      	movs	r2, #6
 8001bec:	4925      	ldr	r1, [pc, #148]	@ (8001c84 <GPS_ProcessBuffer+0x11c>)
 8001bee:	4824      	ldr	r0, [pc, #144]	@ (8001c80 <GPS_ProcessBuffer+0x118>)
 8001bf0:	f009 fbb8 	bl	800b364 <strncmp>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <GPS_ProcessBuffer+0xa2>
 8001bfa:	2206      	movs	r2, #6
 8001bfc:	4923      	ldr	r1, [pc, #140]	@ (8001c8c <GPS_ProcessBuffer+0x124>)
 8001bfe:	4820      	ldr	r0, [pc, #128]	@ (8001c80 <GPS_ProcessBuffer+0x118>)
 8001c00:	f009 fbb0 	bl	800b364 <strncmp>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d103      	bne.n	8001c12 <GPS_ProcessBuffer+0xaa>
            {
                ParseGPRMC(lineBuf);
 8001c0a:	481d      	ldr	r0, [pc, #116]	@ (8001c80 <GPS_ProcessBuffer+0x118>)
 8001c0c:	f7ff fea8 	bl	8001960 <ParseGPRMC>
 8001c10:	e012      	b.n	8001c38 <GPS_ProcessBuffer+0xd0>
            }
            else if (strncmp(lineBuf, "$GPGGA", 6) == 0 || strncmp(lineBuf, "$GNGGA", 6) == 0)
 8001c12:	2206      	movs	r2, #6
 8001c14:	491c      	ldr	r1, [pc, #112]	@ (8001c88 <GPS_ProcessBuffer+0x120>)
 8001c16:	481a      	ldr	r0, [pc, #104]	@ (8001c80 <GPS_ProcessBuffer+0x118>)
 8001c18:	f009 fba4 	bl	800b364 <strncmp>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <GPS_ProcessBuffer+0xca>
 8001c22:	2206      	movs	r2, #6
 8001c24:	491a      	ldr	r1, [pc, #104]	@ (8001c90 <GPS_ProcessBuffer+0x128>)
 8001c26:	4816      	ldr	r0, [pc, #88]	@ (8001c80 <GPS_ProcessBuffer+0x118>)
 8001c28:	f009 fb9c 	bl	800b364 <strncmp>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <GPS_ProcessBuffer+0xd0>
            {
                ParseGPGGA(lineBuf);
 8001c32:	4813      	ldr	r0, [pc, #76]	@ (8001c80 <GPS_ProcessBuffer+0x118>)
 8001c34:	f7ff ff50 	bl	8001ad8 <ParseGPGGA>
            }
            lineIndex = 0;
 8001c38:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <GPS_ProcessBuffer+0x114>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
        }
        old_pos++;
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <GPS_ProcessBuffer+0x10c>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <GPS_ProcessBuffer+0x10c>)
 8001c48:	801a      	strh	r2, [r3, #0]
        if (old_pos >= GPS_DMA_BUFFER_SIZE)
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <GPS_ProcessBuffer+0x10c>)
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c52:	d302      	bcc.n	8001c5a <GPS_ProcessBuffer+0xf2>
            old_pos = 0;
 8001c54:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <GPS_ProcessBuffer+0x10c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	801a      	strh	r2, [r3, #0]
    while (old_pos != now_pos)
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <GPS_ProcessBuffer+0x10c>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	88fa      	ldrh	r2, [r7, #6]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d18c      	bne.n	8001b7e <GPS_ProcessBuffer+0x16>
    }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200009f8 	.word	0x200009f8
 8001c74:	200004d0 	.word	0x200004d0
 8001c78:	200000c8 	.word	0x200000c8
 8001c7c:	200004d2 	.word	0x200004d2
 8001c80:	200004d4 	.word	0x200004d4
 8001c84:	0800b410 	.word	0x0800b410
 8001c88:	0800b418 	.word	0x0800b418
 8001c8c:	0800b420 	.word	0x0800b420
 8001c90:	0800b428 	.word	0x0800b428

08001c94 <GPS_Init>:

void GPS_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
    memset(&gps_data, 0, sizeof(gps_data));
 8001c98:	2208      	movs	r2, #8
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4806      	ldr	r0, [pc, #24]	@ (8001cb8 <GPS_Init+0x24>)
 8001c9e:	f009 fb59 	bl	800b354 <memset>
    memset(gps_dma_buffer, 0, GPS_DMA_BUFFER_SIZE);
 8001ca2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4804      	ldr	r0, [pc, #16]	@ (8001cbc <GPS_Init+0x28>)
 8001caa:	f009 fb53 	bl	800b354 <memset>
    old_pos = 0;
 8001cae:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <GPS_Init+0x2c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	801a      	strh	r2, [r3, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200004c8 	.word	0x200004c8
 8001cbc:	200000c8 	.word	0x200000c8
 8001cc0:	200004d0 	.word	0x200004d0

08001cc4 <ConvertUtcToLocalTime>:

void ConvertUtcToLocalTime(uint8_t utcHours, uint8_t utcMinutes,
		uint8_t utcSeconds, uint8_t utcDay, uint8_t utcMonth, uint8_t utcYear,
		RTC_TimeTypeDef *localTime, RTC_DateTypeDef *localDate) {
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b08d      	sub	sp, #52	@ 0x34
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4604      	mov	r4, r0
 8001ccc:	4608      	mov	r0, r1
 8001cce:	4611      	mov	r1, r2
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4623      	mov	r3, r4
 8001cd4:	71fb      	strb	r3, [r7, #7]
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71bb      	strb	r3, [r7, #6]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	717b      	strb	r3, [r7, #5]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	713b      	strb	r3, [r7, #4]
	// UTC+1 dla Polski w czasie zimowym, a UTC+2 latem:
	// year w RTC to 00..99, można przerobić na 20xx itp.
	// Załóżmy, że gps_data.year = 24 oznacza 2024 (proste uproszczenie)
	uint16_t fullYear = 2000 + utcYear;
 8001ce2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001cec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int offset = 1;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (IsDstActive(fullYear, utcMonth, utcDay)) {
 8001cf2:	793a      	ldrb	r2, [r7, #4]
 8001cf4:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 8001cf8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f909 	bl	8001f12 <IsDstActive>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <ConvertUtcToLocalTime+0x46>
		offset = 2;
 8001d06:	2302      	movs	r3, #2
 8001d08:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	int hour = utcHours + offset;
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d0e:	4413      	add	r3, r2
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
	int minute = utcMinutes;
 8001d12:	79bb      	ldrb	r3, [r7, #6]
 8001d14:	61bb      	str	r3, [r7, #24]
	int second = utcSeconds;
 8001d16:	797b      	ldrb	r3, [r7, #5]
 8001d18:	617b      	str	r3, [r7, #20]

	int day = utcDay;
 8001d1a:	793b      	ldrb	r3, [r7, #4]
 8001d1c:	623b      	str	r3, [r7, #32]
	int month = utcMonth;
 8001d1e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001d22:	61fb      	str	r3, [r7, #28]
	int yearXX = utcYear;   // 0..99 w RTC
 8001d24:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001d28:	613b      	str	r3, [r7, #16]


	DOW = GetDayOfWeek(fullYear, utcMonth, utcDay);
 8001d2a:	793a      	ldrb	r2, [r7, #4]
 8001d2c:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 8001d30:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f92a 	bl	8001f8c <GetDayOfWeek>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e2c <ConvertUtcToLocalTime+0x168>)
 8001d3e:	701a      	strb	r2, [r3, #0]

	// Ale do obliczeń powyżej używamy fullYear (np. 2024)
	// Korekty przekroczeń doby
	if (hour >= 24) {
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	2b17      	cmp	r3, #23
 8001d44:	dd20      	ble.n	8001d88 <ConvertUtcToLocalTime+0xc4>
		hour -= 24;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	3b18      	subs	r3, #24
 8001d4a:	627b      	str	r3, [r7, #36]	@ 0x24
		day++;
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	623b      	str	r3, [r7, #32]
		// sprawdź, czy nie przekraczamy dni w tym miesiącu
		uint8_t mdays = DaysInMonth(fullYear, month);
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d58:	4611      	mov	r1, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f86a 	bl	8001e34 <DaysInMonth>
 8001d60:	4603      	mov	r3, r0
 8001d62:	73fb      	strb	r3, [r7, #15]
		if (day > mdays) {
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	6a3a      	ldr	r2, [r7, #32]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dd2d      	ble.n	8001dc8 <ConvertUtcToLocalTime+0x104>
			day = 1;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	623b      	str	r3, [r7, #32]
			month++;
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	3301      	adds	r3, #1
 8001d74:	61fb      	str	r3, [r7, #28]
			if (month > 12) {
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	2b0c      	cmp	r3, #12
 8001d7a:	dd25      	ble.n	8001dc8 <ConvertUtcToLocalTime+0x104>
				month = 1;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
				fullYear++;
 8001d80:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d82:	3301      	adds	r3, #1
 8001d84:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001d86:	e01f      	b.n	8001dc8 <ConvertUtcToLocalTime+0x104>
			}
		}
	} else if (hour < 0) {
 8001d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	da1c      	bge.n	8001dc8 <ConvertUtcToLocalTime+0x104>
		hour += 24;
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	3318      	adds	r3, #24
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
		day--;
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	623b      	str	r3, [r7, #32]
		if (day < 1) {
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	dc13      	bgt.n	8001dc8 <ConvertUtcToLocalTime+0x104>
			// cofka do poprzedniego miesiąca
			month--;
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	61fb      	str	r3, [r7, #28]
			if (month < 1) {
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	dc04      	bgt.n	8001db6 <ConvertUtcToLocalTime+0xf2>
				month = 12;
 8001dac:	230c      	movs	r3, #12
 8001dae:	61fb      	str	r3, [r7, #28]
				fullYear--;
 8001db0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001db2:	3b01      	subs	r3, #1
 8001db4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			}
			day = DaysInMonth(fullYear, month);
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f838 	bl	8001e34 <DaysInMonth>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	623b      	str	r3, [r7, #32]
		}
	}
	// fullYear z powrotem do 00..99
	// Proste: np. 2025 -> 25
	yearXX = (uint8_t) (fullYear % 100);
 8001dc8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001dca:	4a19      	ldr	r2, [pc, #100]	@ (8001e30 <ConvertUtcToLocalTime+0x16c>)
 8001dcc:	fba2 1203 	umull	r1, r2, r2, r3
 8001dd0:	0952      	lsrs	r2, r2, #5
 8001dd2:	2164      	movs	r1, #100	@ 0x64
 8001dd4:	fb01 f202 	mul.w	r2, r1, r2
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	613b      	str	r3, [r7, #16]
	// Zapis do struktur RTC
	localTime->Hours = hour;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001de6:	701a      	strb	r2, [r3, #0]
	localTime->Minutes = minute;
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dee:	705a      	strb	r2, [r3, #1]
	localTime->Seconds = second;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001df6:	709a      	strb	r2, [r3, #2]
	localTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001df8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
	localTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8001dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
	localDate->Date = (uint8_t) day;
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e0a:	709a      	strb	r2, [r3, #2]
	localDate->Month = (uint8_t) month;
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e12:	705a      	strb	r2, [r3, #1]
	localDate->Year = (uint8_t) yearXX;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e1a:	70da      	strb	r2, [r3, #3]
	localDate->WeekDay = RTC_WEEKDAY_MONDAY; // albo oblicz w oparciu o GetDayOfWeek
 8001e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
}
 8001e22:	bf00      	nop
 8001e24:	3734      	adds	r7, #52	@ 0x34
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd90      	pop	{r4, r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200000c4 	.word	0x200000c4
 8001e30:	51eb851f 	.word	0x51eb851f

08001e34 <DaysInMonth>:
uint8_t DaysInMonth(uint16_t year, uint8_t month) {
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	80fb      	strh	r3, [r7, #6]
 8001e40:	4613      	mov	r3, r2
 8001e42:	717b      	strb	r3, [r7, #5]
	static const uint8_t daysTable[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30,
			31, 30, 31 };
	if (month == 2)  // luty
 8001e44:	797b      	ldrb	r3, [r7, #5]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d12f      	bne.n	8001eaa <DaysInMonth+0x76>
			{
		// Sprawdź, czy rok przestępny
		// „Rok przestępny” jeżeli:
		//  - rok % 4 == 0 i rok % 100 != 0
		//  - lub rok % 400 == 0
		bool leap = false;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]
		if ((year % 400) == 0) {
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec0 <DaysInMonth+0x8c>)
 8001e52:	fba2 1203 	umull	r1, r2, r2, r3
 8001e56:	09d2      	lsrs	r2, r2, #7
 8001e58:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001e5c:	fb01 f202 	mul.w	r2, r1, r2
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d102      	bne.n	8001e6e <DaysInMonth+0x3a>
			leap = true;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	e016      	b.n	8001e9c <DaysInMonth+0x68>
		} else if ((year % 100) == 0) {
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	4a13      	ldr	r2, [pc, #76]	@ (8001ec0 <DaysInMonth+0x8c>)
 8001e72:	fba2 1203 	umull	r1, r2, r2, r3
 8001e76:	0952      	lsrs	r2, r2, #5
 8001e78:	2164      	movs	r1, #100	@ 0x64
 8001e7a:	fb01 f202 	mul.w	r2, r1, r2
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d102      	bne.n	8001e8c <DaysInMonth+0x58>
			leap = false;
 8001e86:	2300      	movs	r3, #0
 8001e88:	73fb      	strb	r3, [r7, #15]
 8001e8a:	e007      	b.n	8001e9c <DaysInMonth+0x68>
		} else if ((year % 4) == 0) {
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <DaysInMonth+0x68>
			leap = true;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
		}
		return (leap ? 29 : 28);
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <DaysInMonth+0x72>
 8001ea2:	231d      	movs	r3, #29
 8001ea4:	e005      	b.n	8001eb2 <DaysInMonth+0x7e>
 8001ea6:	231c      	movs	r3, #28
 8001ea8:	e003      	b.n	8001eb2 <DaysInMonth+0x7e>
	}
	return daysTable[month - 1];
 8001eaa:	797b      	ldrb	r3, [r7, #5]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	4a05      	ldr	r2, [pc, #20]	@ (8001ec4 <DaysInMonth+0x90>)
 8001eb0:	5cd3      	ldrb	r3, [r2, r3]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	51eb851f 	.word	0x51eb851f
 8001ec4:	0800b4e4 	.word	0x0800b4e4

08001ec8 <GetLastSundayOfMonth>:
/**
 * @brief Zwraca numer dnia (1..31) będący ostatnią niedzielą w danym miesiącu.
 *        Np. dla roku=2024, marzec=3, może zwrócić 31, 30, 29... w zależności,
 *        co jest faktycznie niedzielą.
 */
uint8_t GetLastSundayOfMonth(uint16_t year, uint8_t month) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	460a      	mov	r2, r1
 8001ed2:	80fb      	strh	r3, [r7, #6]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	717b      	strb	r3, [r7, #5]
	uint8_t d = DaysInMonth(year, month);
 8001ed8:	797a      	ldrb	r2, [r7, #5]
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ffa8 	bl	8001e34 <DaysInMonth>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	73fb      	strb	r3, [r7, #15]
	while (1) {
		uint8_t dow = GetDayOfWeek(year, month, d);
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	7979      	ldrb	r1, [r7, #5]
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f84c 	bl	8001f8c <GetDayOfWeek>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	73bb      	strb	r3, [r7, #14]



		if (dow == 0) { // 0 = niedziela (Sunday)
 8001ef8:	7bbb      	ldrb	r3, [r7, #14]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <GetLastSundayOfMonth+0x3a>
			return d;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	e003      	b.n	8001f0a <GetLastSundayOfMonth+0x42>
		}
		d--;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
	while (1) {
 8001f08:	e7ee      	b.n	8001ee8 <GetLastSundayOfMonth+0x20>
	}
	// Teoretycznie dojdziemy na pewno do jakiejś niedzieli,
	// więc break nie jest potrzebny.
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <IsDstActive>:

bool IsDstActive(uint16_t year, uint8_t month, uint8_t day) {
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	80fb      	strh	r3, [r7, #6]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	717b      	strb	r3, [r7, #5]
 8001f20:	4613      	mov	r3, r2
 8001f22:	713b      	strb	r3, [r7, #4]
	// Ostatnia niedziela marca
	uint8_t lastSundayMarch = GetLastSundayOfMonth(year, 3);
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	2103      	movs	r1, #3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ffcd 	bl	8001ec8 <GetLastSundayOfMonth>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	73fb      	strb	r3, [r7, #15]
	// Ostatnia niedziela października
	uint8_t lastSundayOctober = GetLastSundayOfMonth(year, 10);
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	210a      	movs	r1, #10
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ffc6 	bl	8001ec8 <GetLastSundayOfMonth>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	73bb      	strb	r3, [r7, #14]
	// Warunek: jeżeli data >= (3, lastSundayMarch) i data < (10, lastSundayOctober),
	// to DST = true.
	// Oczywiście trzeba uwzględnić, że jeśli month < 3 to zawsze false,
	// jeśli month > 10 to zawsze false, itd.
	// A) Jeżeli miesiąc < 3 -> zima
	if (month < 3) {
 8001f40:	797b      	ldrb	r3, [r7, #5]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d801      	bhi.n	8001f4a <IsDstActive+0x38>
		return false;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e01b      	b.n	8001f82 <IsDstActive+0x70>
	}
	// B) Jeżeli miesiąc > 10 -> zima
	if (month > 10) {
 8001f4a:	797b      	ldrb	r3, [r7, #5]
 8001f4c:	2b0a      	cmp	r3, #10
 8001f4e:	d901      	bls.n	8001f54 <IsDstActive+0x42>
		return false;
 8001f50:	2300      	movs	r3, #0
 8001f52:	e016      	b.n	8001f82 <IsDstActive+0x70>
	}
	// C) Jeżeli to marzec:
	if (month == 3) {
 8001f54:	797b      	ldrb	r3, [r7, #5]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d107      	bne.n	8001f6a <IsDstActive+0x58>
		// czy w danym dniu jest >= ostatniej niedzieli?
		// jeśli tak -> letni
		// jeśli nie -> zimowy
		if (day < lastSundayMarch) {
 8001f5a:	793a      	ldrb	r2, [r7, #4]
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d201      	bcs.n	8001f66 <IsDstActive+0x54>
			return false;
 8001f62:	2300      	movs	r3, #0
 8001f64:	e00d      	b.n	8001f82 <IsDstActive+0x70>
		} else {
			return true;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00b      	b.n	8001f82 <IsDstActive+0x70>
		}
	}
	// D) Jeżeli to październik
	if (month == 10) {
 8001f6a:	797b      	ldrb	r3, [r7, #5]
 8001f6c:	2b0a      	cmp	r3, #10
 8001f6e:	d107      	bne.n	8001f80 <IsDstActive+0x6e>
		// czy w danym dniu jest < ostatniej niedzieli?
		// jeśli tak -> letni
		// jeśli >= -> zimowy
		if (day < lastSundayOctober) {
 8001f70:	793a      	ldrb	r2, [r7, #4]
 8001f72:	7bbb      	ldrb	r3, [r7, #14]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d201      	bcs.n	8001f7c <IsDstActive+0x6a>
			return true;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e002      	b.n	8001f82 <IsDstActive+0x70>
		} else {
			return false;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e000      	b.n	8001f82 <IsDstActive+0x70>
		}
	}
	// E) W pozostałych miesiącach 4..9 włącznie mamy 100% DST:
	return true;
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <GetDayOfWeek>:
			// Obsługa błędu ustawiania daty
			Error_Handler();
		}
	}
}
uint8_t GetDayOfWeek(uint16_t year, uint8_t month, uint8_t day) {
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	80fb      	strh	r3, [r7, #6]
 8001f96:	460b      	mov	r3, r1
 8001f98:	717b      	strb	r3, [r7, #5]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	713b      	strb	r3, [r7, #4]
	// Zeller’s Congruence – wersja dla kalendarza gregoriańskiego
	// Aby działała poprawnie dla stycznia i lutego, „przesuwamy” je na poprzedni rok:
	// styczeń -> 13 poprzedniego roku
	// luty    -> 14 poprzedniego roku
	if (month < 3) {
 8001f9e:	797b      	ldrb	r3, [r7, #5]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d805      	bhi.n	8001fb0 <GetDayOfWeek+0x24>
		month += 12;
 8001fa4:	797b      	ldrb	r3, [r7, #5]
 8001fa6:	330c      	adds	r3, #12
 8001fa8:	717b      	strb	r3, [r7, #5]
		year -= 1;
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	80fb      	strh	r3, [r7, #6]
	}
	uint16_t K = (uint16_t) (year % 100);
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	4a23      	ldr	r2, [pc, #140]	@ (8002040 <GetDayOfWeek+0xb4>)
 8001fb4:	fba2 1203 	umull	r1, r2, r2, r3
 8001fb8:	0952      	lsrs	r2, r2, #5
 8001fba:	2164      	movs	r1, #100	@ 0x64
 8001fbc:	fb01 f202 	mul.w	r2, r1, r2
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	817b      	strh	r3, [r7, #10]
	uint16_t J = (uint16_t) (year / 100);
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8002040 <GetDayOfWeek+0xb4>)
 8001fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	813b      	strh	r3, [r7, #8]
	// day of week in [0..6], 0=Sunday
	int32_t h = (int32_t) (day + (13 * (month + 1)) / 5 + K + (K / 4) + (J / 4)
 8001fd0:	7939      	ldrb	r1, [r7, #4]
 8001fd2:	797b      	ldrb	r3, [r7, #5]
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <GetDayOfWeek+0xb8>)
 8001fe2:	fb82 0203 	smull	r0, r2, r2, r3
 8001fe6:	1052      	asrs	r2, r2, #1
 8001fe8:	17db      	asrs	r3, r3, #31
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	18ca      	adds	r2, r1, r3
 8001fee:	897b      	ldrh	r3, [r7, #10]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	897a      	ldrh	r2, [r7, #10]
 8001ff4:	0892      	lsrs	r2, r2, #2
 8001ff6:	b292      	uxth	r2, r2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	893a      	ldrh	r2, [r7, #8]
 8001ffc:	0892      	lsrs	r2, r2, #2
 8001ffe:	b292      	uxth	r2, r2
 8002000:	441a      	add	r2, r3
			- (2 * J));
 8002002:	893b      	ldrh	r3, [r7, #8]
 8002004:	005b      	lsls	r3, r3, #1
	int32_t h = (int32_t) (day + (13 * (month + 1)) / 5 + K + (K / 4) + (J / 4)
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	60fb      	str	r3, [r7, #12]
	// W C++: h = (h % 7 + 7) % 7  (żeby się upewnić, że jest w 0..6):
	h = h % 7;
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <GetDayOfWeek+0xbc>)
 800200e:	fb83 1302 	smull	r1, r3, r3, r2
 8002012:	4413      	add	r3, r2
 8002014:	1099      	asrs	r1, r3, #2
 8002016:	17d3      	asrs	r3, r2, #31
 8002018:	1ac9      	subs	r1, r1, r3
 800201a:	460b      	mov	r3, r1
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	1a5b      	subs	r3, r3, r1
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	60fb      	str	r3, [r7, #12]
	if (h < 0) {
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da02      	bge.n	8002030 <GetDayOfWeek+0xa4>
		h += 7;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3307      	adds	r3, #7
 800202e:	60fb      	str	r3, [r7, #12]
	}
	return (uint8_t) h;  // 0..6
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	b2db      	uxtb	r3, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	51eb851f 	.word	0x51eb851f
 8002044:	66666667 	.word	0x66666667
 8002048:	92492493 	.word	0x92492493

0800204c <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002050:	4b12      	ldr	r3, [pc, #72]	@ (800209c <MX_I2C2_Init+0x50>)
 8002052:	4a13      	ldr	r2, [pc, #76]	@ (80020a0 <MX_I2C2_Init+0x54>)
 8002054:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002056:	4b11      	ldr	r3, [pc, #68]	@ (800209c <MX_I2C2_Init+0x50>)
 8002058:	4a12      	ldr	r2, [pc, #72]	@ (80020a4 <MX_I2C2_Init+0x58>)
 800205a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800205c:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <MX_I2C2_Init+0x50>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002062:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <MX_I2C2_Init+0x50>)
 8002064:	2200      	movs	r2, #0
 8002066:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002068:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <MX_I2C2_Init+0x50>)
 800206a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800206e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002070:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <MX_I2C2_Init+0x50>)
 8002072:	2200      	movs	r2, #0
 8002074:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002076:	4b09      	ldr	r3, [pc, #36]	@ (800209c <MX_I2C2_Init+0x50>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800207c:	4b07      	ldr	r3, [pc, #28]	@ (800209c <MX_I2C2_Init+0x50>)
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002082:	4b06      	ldr	r3, [pc, #24]	@ (800209c <MX_I2C2_Init+0x50>)
 8002084:	2200      	movs	r2, #0
 8002086:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002088:	4804      	ldr	r0, [pc, #16]	@ (800209c <MX_I2C2_Init+0x50>)
 800208a:	f003 f9df 	bl	800544c <HAL_I2C_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002094:	f000 fb09 	bl	80026aa <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000554 	.word	0x20000554
 80020a0:	40005800 	.word	0x40005800
 80020a4:	000186a0 	.word	0x000186a0

080020a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	@ 0x28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a58      	ldr	r2, [pc, #352]	@ (8002228 <HAL_I2C_MspInit+0x180>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	f040 80a9 	bne.w	800221e <HAL_I2C_MspInit+0x176>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	4b56      	ldr	r3, [pc, #344]	@ (800222c <HAL_I2C_MspInit+0x184>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d4:	4a55      	ldr	r2, [pc, #340]	@ (800222c <HAL_I2C_MspInit+0x184>)
 80020d6:	f043 0302 	orr.w	r3, r3, #2
 80020da:	6313      	str	r3, [r2, #48]	@ 0x30
 80020dc:	4b53      	ldr	r3, [pc, #332]	@ (800222c <HAL_I2C_MspInit+0x184>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ee:	2312      	movs	r3, #18
 80020f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020fa:	2304      	movs	r3, #4
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	4619      	mov	r1, r3
 8002104:	484a      	ldr	r0, [pc, #296]	@ (8002230 <HAL_I2C_MspInit+0x188>)
 8002106:	f002 ffeb 	bl	80050e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800210a:	2308      	movs	r3, #8
 800210c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800210e:	2312      	movs	r3, #18
 8002110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800211a:	2309      	movs	r3, #9
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	4842      	ldr	r0, [pc, #264]	@ (8002230 <HAL_I2C_MspInit+0x188>)
 8002126:	f002 ffdb 	bl	80050e0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b3f      	ldr	r3, [pc, #252]	@ (800222c <HAL_I2C_MspInit+0x184>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	4a3e      	ldr	r2, [pc, #248]	@ (800222c <HAL_I2C_MspInit+0x184>)
 8002134:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002138:	6413      	str	r3, [r2, #64]	@ 0x40
 800213a:	4b3c      	ldr	r3, [pc, #240]	@ (800222c <HAL_I2C_MspInit+0x184>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8002146:	4b3b      	ldr	r3, [pc, #236]	@ (8002234 <HAL_I2C_MspInit+0x18c>)
 8002148:	4a3b      	ldr	r2, [pc, #236]	@ (8002238 <HAL_I2C_MspInit+0x190>)
 800214a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800214c:	4b39      	ldr	r3, [pc, #228]	@ (8002234 <HAL_I2C_MspInit+0x18c>)
 800214e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002152:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002154:	4b37      	ldr	r3, [pc, #220]	@ (8002234 <HAL_I2C_MspInit+0x18c>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800215a:	4b36      	ldr	r3, [pc, #216]	@ (8002234 <HAL_I2C_MspInit+0x18c>)
 800215c:	2200      	movs	r2, #0
 800215e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002160:	4b34      	ldr	r3, [pc, #208]	@ (8002234 <HAL_I2C_MspInit+0x18c>)
 8002162:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002166:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002168:	4b32      	ldr	r3, [pc, #200]	@ (8002234 <HAL_I2C_MspInit+0x18c>)
 800216a:	2200      	movs	r2, #0
 800216c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800216e:	4b31      	ldr	r3, [pc, #196]	@ (8002234 <HAL_I2C_MspInit+0x18c>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002174:	4b2f      	ldr	r3, [pc, #188]	@ (8002234 <HAL_I2C_MspInit+0x18c>)
 8002176:	2200      	movs	r2, #0
 8002178:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800217a:	4b2e      	ldr	r3, [pc, #184]	@ (8002234 <HAL_I2C_MspInit+0x18c>)
 800217c:	2200      	movs	r2, #0
 800217e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002180:	4b2c      	ldr	r3, [pc, #176]	@ (8002234 <HAL_I2C_MspInit+0x18c>)
 8002182:	2200      	movs	r2, #0
 8002184:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002186:	482b      	ldr	r0, [pc, #172]	@ (8002234 <HAL_I2C_MspInit+0x18c>)
 8002188:	f002 fbfe 	bl	8004988 <HAL_DMA_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8002192:	f000 fa8a 	bl	80026aa <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a26      	ldr	r2, [pc, #152]	@ (8002234 <HAL_I2C_MspInit+0x18c>)
 800219a:	639a      	str	r2, [r3, #56]	@ 0x38
 800219c:	4a25      	ldr	r2, [pc, #148]	@ (8002234 <HAL_I2C_MspInit+0x18c>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80021a2:	4b26      	ldr	r3, [pc, #152]	@ (800223c <HAL_I2C_MspInit+0x194>)
 80021a4:	4a26      	ldr	r2, [pc, #152]	@ (8002240 <HAL_I2C_MspInit+0x198>)
 80021a6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80021a8:	4b24      	ldr	r3, [pc, #144]	@ (800223c <HAL_I2C_MspInit+0x194>)
 80021aa:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80021ae:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021b0:	4b22      	ldr	r3, [pc, #136]	@ (800223c <HAL_I2C_MspInit+0x194>)
 80021b2:	2240      	movs	r2, #64	@ 0x40
 80021b4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b6:	4b21      	ldr	r3, [pc, #132]	@ (800223c <HAL_I2C_MspInit+0x194>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021bc:	4b1f      	ldr	r3, [pc, #124]	@ (800223c <HAL_I2C_MspInit+0x194>)
 80021be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021c2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021c4:	4b1d      	ldr	r3, [pc, #116]	@ (800223c <HAL_I2C_MspInit+0x194>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ca:	4b1c      	ldr	r3, [pc, #112]	@ (800223c <HAL_I2C_MspInit+0x194>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80021d0:	4b1a      	ldr	r3, [pc, #104]	@ (800223c <HAL_I2C_MspInit+0x194>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021d6:	4b19      	ldr	r3, [pc, #100]	@ (800223c <HAL_I2C_MspInit+0x194>)
 80021d8:	2200      	movs	r2, #0
 80021da:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021dc:	4b17      	ldr	r3, [pc, #92]	@ (800223c <HAL_I2C_MspInit+0x194>)
 80021de:	2200      	movs	r2, #0
 80021e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80021e2:	4816      	ldr	r0, [pc, #88]	@ (800223c <HAL_I2C_MspInit+0x194>)
 80021e4:	f002 fbd0 	bl	8004988 <HAL_DMA_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_MspInit+0x14a>
    {
      Error_Handler();
 80021ee:	f000 fa5c 	bl	80026aa <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a11      	ldr	r2, [pc, #68]	@ (800223c <HAL_I2C_MspInit+0x194>)
 80021f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80021f8:	4a10      	ldr	r2, [pc, #64]	@ (800223c <HAL_I2C_MspInit+0x194>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	2021      	movs	r0, #33	@ 0x21
 8002204:	f002 fb89 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002208:	2021      	movs	r0, #33	@ 0x21
 800220a:	f002 fba2 	bl	8004952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	2022      	movs	r0, #34	@ 0x22
 8002214:	f002 fb81 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002218:	2022      	movs	r0, #34	@ 0x22
 800221a:	f002 fb9a 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	@ 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40005800 	.word	0x40005800
 800222c:	40023800 	.word	0x40023800
 8002230:	40020400 	.word	0x40020400
 8002234:	200005a8 	.word	0x200005a8
 8002238:	40026040 	.word	0x40026040
 800223c:	20000608 	.word	0x20000608
 8002240:	400260b8 	.word	0x400260b8

08002244 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	@ 0x28
 8002248:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800224a:	f001 fedf 	bl	800400c <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800224e:	f000 f959 	bl	8002504 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	// Odblokowanie dostępu do backupu (dla RTC)
	HAL_PWR_EnableBkUpAccess();
 8002252:	f005 fdd7 	bl	8007e04 <HAL_PWR_EnableBkUpAccess>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002256:	f107 0310 	add.w	r3, r7, #16
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	60da      	str	r2, [r3, #12]
 8002264:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002266:	2302      	movs	r3, #2
 8002268:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800226a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800226e:	61fb      	str	r3, [r7, #28]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	4618      	mov	r0, r3
 8002276:	f006 fa31 	bl	80086dc <HAL_RCCEx_PeriphCLKConfig>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800227a:	f7ff fabb 	bl	80017f4 <MX_GPIO_Init>
	MX_DMA_Init();
 800227e:	f7ff fa63 	bl	8001748 <MX_DMA_Init>
	MX_SPI1_Init();
 8002282:	f001 f977 	bl	8003574 <MX_SPI1_Init>
	MX_TIM1_Init();
 8002286:	f001 fbe7 	bl	8003a58 <MX_TIM1_Init>
	MX_RTC_Init();
 800228a:	f000 fb47 	bl	800291c <MX_RTC_Init>
	MX_I2C2_Init();
 800228e:	f7ff fedd 	bl	800204c <MX_I2C2_Init>
	MX_ADC1_Init();
 8002292:	f7fe f917 	bl	80004c4 <MX_ADC1_Init>
	MX_TIM4_Init();
 8002296:	f001 fc7f 	bl	8003b98 <MX_TIM4_Init>
	MX_TIM5_Init();
 800229a:	f001 fcd1 	bl	8003c40 <MX_TIM5_Init>
	MX_USART1_UART_Init();
 800229e:	f001 fde5 	bl	8003e6c <MX_USART1_UART_Init>
	MX_SPI2_Init();
 80022a2:	f001 f99d 	bl	80035e0 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80022a6:	2100      	movs	r1, #0
 80022a8:	488a      	ldr	r0, [pc, #552]	@ (80024d4 <main+0x290>)
 80022aa:	f007 fad3 	bl	8009854 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (htim1.Init.Period + 1) / 2);
 80022ae:	4b89      	ldr	r3, [pc, #548]	@ (80024d4 <main+0x290>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	4b87      	ldr	r3, [pc, #540]	@ (80024d4 <main+0x290>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0852      	lsrs	r2, r2, #1
 80022ba:	635a      	str	r2, [r3, #52]	@ 0x34

	SetPWMPercentGamma(30);
 80022bc:	201e      	movs	r0, #30
 80022be:	f7ff f87b 	bl	80013b8 <SetPWMPercentGamma>
	ClearClockBits(&clockReg);
 80022c2:	4885      	ldr	r0, [pc, #532]	@ (80024d8 <main+0x294>)
 80022c4:	f7fe fc80 	bl	8000bc8 <ClearClockBits>
	UpdateAllDisplays(&clockReg);
 80022c8:	4883      	ldr	r0, [pc, #524]	@ (80024d8 <main+0x294>)
 80022ca:	f7ff f831 	bl	8001330 <UpdateAllDisplays>
	SLIDER_Init();
 80022ce:	f000 fec5 	bl	800305c <SLIDER_Init>
	SHT30_Init();
 80022d2:	f000 fba9 	bl	8002a28 <SHT30_Init>
	//Set_RTC_Time();
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80022d6:	213c      	movs	r1, #60	@ 0x3c
 80022d8:	4880      	ldr	r0, [pc, #512]	@ (80024dc <main+0x298>)
 80022da:	f007 fc11 	bl	8009b00 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 80022de:	4880      	ldr	r0, [pc, #512]	@ (80024e0 <main+0x29c>)
 80022e0:	f007 f9fc 	bl	80096dc <HAL_TIM_Base_Start_IT>
	GPS_Init();
 80022e4:	f7ff fcd6 	bl	8001c94 <GPS_Init>
	if (HAL_UART_Receive_DMA(&huart1, gps_dma_buffer, GPS_DMA_BUFFER_SIZE)
 80022e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022ec:	497d      	ldr	r1, [pc, #500]	@ (80024e4 <main+0x2a0>)
 80022ee:	487e      	ldr	r0, [pc, #504]	@ (80024e8 <main+0x2a4>)
 80022f0:	f008 fb48 	bl	800a984 <HAL_UART_Receive_DMA>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <main+0xba>
			!= HAL_OK) {
		Error_Handler();
 80022fa:	f000 f9d6 	bl	80026aa <Error_Handler>
	}
	MENU_Init();  // Zainicjuj stan menu (IDLE)
 80022fe:	f000 f9ff 	bl	8002700 <MENU_Init>
	// Rejestracja callbacków
	Button_RegisterPressCallback(0, Button1_Pressed);
 8002302:	497a      	ldr	r1, [pc, #488]	@ (80024ec <main+0x2a8>)
 8002304:	2000      	movs	r0, #0
 8002306:	f7fe f98f 	bl	8000628 <Button_RegisterPressCallback>
	Button_RegisterDoubleClickCallback(0, Button1_DoubleClicked);
 800230a:	4979      	ldr	r1, [pc, #484]	@ (80024f0 <main+0x2ac>)
 800230c:	2000      	movs	r0, #0
 800230e:	f7fe f9c3 	bl	8000698 <Button_RegisterDoubleClickCallback>
	Button_RegisterHoldCallback(0, Button1_Held);
 8002312:	4978      	ldr	r1, [pc, #480]	@ (80024f4 <main+0x2b0>)
 8002314:	2000      	movs	r0, #0
 8002316:	f7fe f9a3 	bl	8000660 <Button_RegisterHoldCallback>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// Odczytaj aktualny czas z RTC
		GPS_ProcessBuffer();
 800231a:	f7ff fc25 	bl	8001b68 <GPS_ProcessBuffer>
		Get_RTC_Time();
 800231e:	f000 f951 	bl	80025c4 <Get_RTC_Time>
//
//			disp_mode?  SLIDER_DisplayTemperature( data.temperature):SLIDER_DisplayHumidity( data.humidity);
//		}

		// 1) Obsługa ringa zewnętrznego:
		RingMode_t extMode = MENU_GetExternalRingMode();
 8002322:	f000 f9c9 	bl	80026b8 <MENU_GetExternalRingMode>
 8002326:	4603      	mov	r3, r0
 8002328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		switch (extMode) {
 800232c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002330:	2b09      	cmp	r3, #9
 8002332:	d863      	bhi.n	80023fc <main+0x1b8>
 8002334:	a201      	add	r2, pc, #4	@ (adr r2, 800233c <main+0xf8>)
 8002336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233a:	bf00      	nop
 800233c:	08002365 	.word	0x08002365
 8002340:	08002371 	.word	0x08002371
 8002344:	0800237d 	.word	0x0800237d
 8002348:	08002389 	.word	0x08002389
 800234c:	08002395 	.word	0x08002395
 8002350:	080023a1 	.word	0x080023a1
 8002354:	080023ad 	.word	0x080023ad
 8002358:	080023bd 	.word	0x080023bd
 800235c:	080023cd 	.word	0x080023cd
 8002360:	080023dd 	.word	0x080023dd
		case RING_MODE_0:
			SetHourRingCustom(&clockReg, 1, 1);
 8002364:	2201      	movs	r2, #1
 8002366:	2101      	movs	r1, #1
 8002368:	485b      	ldr	r0, [pc, #364]	@ (80024d8 <main+0x294>)
 800236a:	f7ff f963 	bl	8001634 <SetHourRingCustom>
			break;
 800236e:	e045      	b.n	80023fc <main+0x1b8>
		case RING_MODE_1:
			SetHourRingCustom(&clockReg, 0, 1);
 8002370:	2201      	movs	r2, #1
 8002372:	2100      	movs	r1, #0
 8002374:	4858      	ldr	r0, [pc, #352]	@ (80024d8 <main+0x294>)
 8002376:	f7ff f95d 	bl	8001634 <SetHourRingCustom>
			break;
 800237a:	e03f      	b.n	80023fc <main+0x1b8>
		case RING_MODE_2:
			SetHourRingCustom(&clockReg, 1, 0);
 800237c:	2200      	movs	r2, #0
 800237e:	2101      	movs	r1, #1
 8002380:	4855      	ldr	r0, [pc, #340]	@ (80024d8 <main+0x294>)
 8002382:	f7ff f957 	bl	8001634 <SetHourRingCustom>
			break;
 8002386:	e039      	b.n	80023fc <main+0x1b8>
		case RING_MODE_3:
			SetHourRingCustom(&clockReg, 0, 0);
 8002388:	2200      	movs	r2, #0
 800238a:	2100      	movs	r1, #0
 800238c:	4852      	ldr	r0, [pc, #328]	@ (80024d8 <main+0x294>)
 800238e:	f7ff f951 	bl	8001634 <SetHourRingCustom>
			break;
 8002392:	e033      	b.n	80023fc <main+0x1b8>
		case RING_MODE_4:
			SetHourRingCustom(&clockReg, 2, 0);
 8002394:	2200      	movs	r2, #0
 8002396:	2102      	movs	r1, #2
 8002398:	484f      	ldr	r0, [pc, #316]	@ (80024d8 <main+0x294>)
 800239a:	f7ff f94b 	bl	8001634 <SetHourRingCustom>
			break;
 800239e:	e02d      	b.n	80023fc <main+0x1b8>
		case RING_MODE_5:
			SetHourRingCustom(&clockReg, 0, 2);
 80023a0:	2202      	movs	r2, #2
 80023a2:	2100      	movs	r1, #0
 80023a4:	484c      	ldr	r0, [pc, #304]	@ (80024d8 <main+0x294>)
 80023a6:	f7ff f945 	bl	8001634 <SetHourRingCustom>
			break;
 80023aa:	e027      	b.n	80023fc <main+0x1b8>
		case RING_MODE_6:
			SetHourRing(&clockReg, sTime.Hours, 1, 1);
 80023ac:	4b52      	ldr	r3, [pc, #328]	@ (80024f8 <main+0x2b4>)
 80023ae:	7819      	ldrb	r1, [r3, #0]
 80023b0:	2301      	movs	r3, #1
 80023b2:	2201      	movs	r2, #1
 80023b4:	4848      	ldr	r0, [pc, #288]	@ (80024d8 <main+0x294>)
 80023b6:	f7fe fd55 	bl	8000e64 <SetHourRing>
			break;
 80023ba:	e01f      	b.n	80023fc <main+0x1b8>
		case RING_MODE_7:
			SetHourRing(&clockReg, sTime.Hours, 0, 1);
 80023bc:	4b4e      	ldr	r3, [pc, #312]	@ (80024f8 <main+0x2b4>)
 80023be:	7819      	ldrb	r1, [r3, #0]
 80023c0:	2301      	movs	r3, #1
 80023c2:	2200      	movs	r2, #0
 80023c4:	4844      	ldr	r0, [pc, #272]	@ (80024d8 <main+0x294>)
 80023c6:	f7fe fd4d 	bl	8000e64 <SetHourRing>
			break;
 80023ca:	e017      	b.n	80023fc <main+0x1b8>
		case RING_MODE_8:
			SetHourRing(&clockReg, sTime.Hours, 1, 0);
 80023cc:	4b4a      	ldr	r3, [pc, #296]	@ (80024f8 <main+0x2b4>)
 80023ce:	7819      	ldrb	r1, [r3, #0]
 80023d0:	2300      	movs	r3, #0
 80023d2:	2201      	movs	r2, #1
 80023d4:	4840      	ldr	r0, [pc, #256]	@ (80024d8 <main+0x294>)
 80023d6:	f7fe fd45 	bl	8000e64 <SetHourRing>
			break;
 80023da:	e00f      	b.n	80023fc <main+0x1b8>
		case RING_MODE_MAX:
			SetHourRingCustom(&clockReg, colon, (!colon));
 80023dc:	4b47      	ldr	r3, [pc, #284]	@ (80024fc <main+0x2b8>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	b2d9      	uxtb	r1, r3
 80023e2:	4b46      	ldr	r3, [pc, #280]	@ (80024fc <main+0x2b8>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	4838      	ldr	r0, [pc, #224]	@ (80024d8 <main+0x294>)
 80023f6:	f7ff f91d 	bl	8001634 <SetHourRingCustom>
			break;
 80023fa:	bf00      	nop

		}

		// 2) Obsługa ringa sekund:
		SekRingMode_t secMode = MENU_GetSecondRingMode();
 80023fc:	f000 f968 	bl	80026d0 <MENU_GetSecondRingMode>
 8002400:	4603      	mov	r3, r0
 8002402:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		switch (secMode) {
 8002406:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800240a:	2b05      	cmp	r3, #5
 800240c:	d83a      	bhi.n	8002484 <main+0x240>
 800240e:	a201      	add	r2, pc, #4	@ (adr r2, 8002414 <main+0x1d0>)
 8002410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002414:	0800242d 	.word	0x0800242d
 8002418:	0800243f 	.word	0x0800243f
 800241c:	0800244d 	.word	0x0800244d
 8002420:	0800245b 	.word	0x0800245b
 8002424:	08002469 	.word	0x08002469
 8002428:	08002477 	.word	0x08002477
		case SEKRING_MODE_0:
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 800242c:	4b32      	ldr	r3, [pc, #200]	@ (80024f8 <main+0x2b4>)
 800242e:	789b      	ldrb	r3, [r3, #2]
 8002430:	4a31      	ldr	r2, [pc, #196]	@ (80024f8 <main+0x2b4>)
 8002432:	7852      	ldrb	r2, [r2, #1]
 8002434:	4619      	mov	r1, r3
 8002436:	4828      	ldr	r0, [pc, #160]	@ (80024d8 <main+0x294>)
 8002438:	f7fe ffea 	bl	8001410 <SetSecondLedEvenOdd>
			break;
 800243c:	e022      	b.n	8002484 <main+0x240>
		case SEKRING_MODE_1:
			SetSecondLedSingle(&clockReg, sTime.Seconds);
 800243e:	4b2e      	ldr	r3, [pc, #184]	@ (80024f8 <main+0x2b4>)
 8002440:	789b      	ldrb	r3, [r3, #2]
 8002442:	4619      	mov	r1, r3
 8002444:	4824      	ldr	r0, [pc, #144]	@ (80024d8 <main+0x294>)
 8002446:	f7fe fbcc 	bl	8000be2 <SetSecondLedSingle>
			break;
 800244a:	e01b      	b.n	8002484 <main+0x240>
		case SEKRING_MODE_2:
			SetSecondLedAccumulating(&clockReg, sTime.Seconds);
 800244c:	4b2a      	ldr	r3, [pc, #168]	@ (80024f8 <main+0x2b4>)
 800244e:	789b      	ldrb	r3, [r3, #2]
 8002450:	4619      	mov	r1, r3
 8002452:	4821      	ldr	r0, [pc, #132]	@ (80024d8 <main+0x294>)
 8002454:	f7fe fc1f 	bl	8000c96 <SetSecondLedAccumulating>
			break;
 8002458:	e014      	b.n	8002484 <main+0x240>
		case SEKRING_MODE_3:
			SetSecondLedAccumulating2(&clockReg, sTime.Seconds);
 800245a:	4b27      	ldr	r3, [pc, #156]	@ (80024f8 <main+0x2b4>)
 800245c:	789b      	ldrb	r3, [r3, #2]
 800245e:	4619      	mov	r1, r3
 8002460:	481d      	ldr	r0, [pc, #116]	@ (80024d8 <main+0x294>)
 8002462:	f7fe fc88 	bl	8000d76 <SetSecondLedAccumulating2>
			break;
 8002466:	e00d      	b.n	8002484 <main+0x240>
		case SEKRING_MODE_4:
			SetSecondLedSingle(&clockReg, sTime.Minutes);
 8002468:	4b23      	ldr	r3, [pc, #140]	@ (80024f8 <main+0x2b4>)
 800246a:	785b      	ldrb	r3, [r3, #1]
 800246c:	4619      	mov	r1, r3
 800246e:	481a      	ldr	r0, [pc, #104]	@ (80024d8 <main+0x294>)
 8002470:	f7fe fbb7 	bl	8000be2 <SetSecondLedSingle>
			break;
 8002474:	e006      	b.n	8002484 <main+0x240>
		case SEKRING_MODE_MAX:
			SetSecondLedAccumulating2(&clockReg, sTime.Minutes);
 8002476:	4b20      	ldr	r3, [pc, #128]	@ (80024f8 <main+0x2b4>)
 8002478:	785b      	ldrb	r3, [r3, #1]
 800247a:	4619      	mov	r1, r3
 800247c:	4816      	ldr	r0, [pc, #88]	@ (80024d8 <main+0x294>)
 800247e:	f7fe fc7a 	bl	8000d76 <SetSecondLedAccumulating2>
			break;
 8002482:	bf00      	nop




		// 4) Obsługa górnego wyświetlacza (HH:MM:SS vs. pusty):
		TopDisplayMode_t topMode = MENU_GetTopDisplayMode();
 8002484:	f000 f930 	bl	80026e8 <MENU_GetTopDisplayMode>
 8002488:	4603      	mov	r3, r0
 800248a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		if (topMode == TOP_DISPLAY_HHMMSS) {
 800248e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <main+0x266>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 8002496:	4b18      	ldr	r3, [pc, #96]	@ (80024f8 <main+0x2b4>)
 8002498:	7819      	ldrb	r1, [r3, #0]
 800249a:	4b17      	ldr	r3, [pc, #92]	@ (80024f8 <main+0x2b4>)
 800249c:	785a      	ldrb	r2, [r3, #1]
 800249e:	4b16      	ldr	r3, [pc, #88]	@ (80024f8 <main+0x2b4>)
 80024a0:	789b      	ldrb	r3, [r3, #2]
 80024a2:	480d      	ldr	r0, [pc, #52]	@ (80024d8 <main+0x294>)
 80024a4:	f7fe fd44 	bl	8000f30 <SetTime7Seg_Top>
 80024a8:	e002      	b.n	80024b0 <main+0x26c>
					sTime.Seconds);
		} else {
			SetTime7Seg_Void(&clockReg);
 80024aa:	480b      	ldr	r0, [pc, #44]	@ (80024d8 <main+0x294>)
 80024ac:	f7fe fe7a 	bl	80011a4 <SetTime7Seg_Void>
		}

		// Aktualizuj rejestry
		UpdateAllDisplays(&clockReg);
 80024b0:	4809      	ldr	r0, [pc, #36]	@ (80024d8 <main+0x294>)
 80024b2:	f7fe ff3d 	bl	8001330 <UpdateAllDisplays>

		// Opóźnij (np. 100 ms)
		// Rozpoczęcie konwersji ADC
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80024b6:	4812      	ldr	r0, [pc, #72]	@ (8002500 <main+0x2bc>)
 80024b8:	f001 fe82 	bl	80041c0 <HAL_ADC_Start>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <main+0x282>
			Error_Handler();
 80024c2:	f000 f8f2 	bl	80026aa <Error_Handler>
		}
		Button_Process();
 80024c6:	f7fe f903 	bl	80006d0 <Button_Process>
		HAL_Delay(10);
 80024ca:	200a      	movs	r0, #10
 80024cc:	f001 fe10 	bl	80040f0 <HAL_Delay>
	while (1) {
 80024d0:	e723      	b.n	800231a <main+0xd6>
 80024d2:	bf00      	nop
 80024d4:	200008d8 	.word	0x200008d8
 80024d8:	20000688 	.word	0x20000688
 80024dc:	20000920 	.word	0x20000920
 80024e0:	20000968 	.word	0x20000968
 80024e4:	200000c8 	.word	0x200000c8
 80024e8:	200009b0 	.word	0x200009b0
 80024ec:	08002651 	.word	0x08002651
 80024f0:	08002679 	.word	0x08002679
 80024f4:	0800268f 	.word	0x0800268f
 80024f8:	20000668 	.word	0x20000668
 80024fc:	200000c5 	.word	0x200000c5
 8002500:	20000058 	.word	0x20000058

08002504 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b094      	sub	sp, #80	@ 0x50
 8002508:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800250a:	f107 0320 	add.w	r3, r7, #32
 800250e:	2230      	movs	r2, #48	@ 0x30
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f008 ff1e 	bl	800b354 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002518:	f107 030c 	add.w	r3, r7, #12
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	4b23      	ldr	r3, [pc, #140]	@ (80025bc <SystemClock_Config+0xb8>)
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	4a22      	ldr	r2, [pc, #136]	@ (80025bc <SystemClock_Config+0xb8>)
 8002532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002536:	6413      	str	r3, [r2, #64]	@ 0x40
 8002538:	4b20      	ldr	r3, [pc, #128]	@ (80025bc <SystemClock_Config+0xb8>)
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002544:	2300      	movs	r3, #0
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	4b1d      	ldr	r3, [pc, #116]	@ (80025c0 <SystemClock_Config+0xbc>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002550:	4a1b      	ldr	r2, [pc, #108]	@ (80025c0 <SystemClock_Config+0xbc>)
 8002552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <SystemClock_Config+0xbc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8002564:	2305      	movs	r3, #5
 8002566:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002568:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800256e:	2301      	movs	r3, #1
 8002570:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002572:	2300      	movs	r3, #0
 8002574:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002576:	f107 0320 	add.w	r3, r7, #32
 800257a:	4618      	mov	r0, r3
 800257c:	f005 fc56 	bl	8007e2c <HAL_RCC_OscConfig>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <SystemClock_Config+0x86>
		Error_Handler();
 8002586:	f000 f890 	bl	80026aa <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800258a:	230f      	movs	r3, #15
 800258c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800258e:	2301      	movs	r3, #1
 8002590:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800259e:	f107 030c 	add.w	r3, r7, #12
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f005 feb9 	bl	800831c <HAL_RCC_ClockConfig>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <SystemClock_Config+0xb0>
		Error_Handler();
 80025b0:	f000 f87b 	bl	80026aa <Error_Handler>
	}
}
 80025b4:	bf00      	nop
 80025b6:	3750      	adds	r7, #80	@ 0x50
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40007000 	.word	0x40007000

080025c4 <Get_RTC_Time>:
}

/**
 * @brief Odczytuje bieżący czas z RTC.
 */
void Get_RTC_Time(void) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80025c8:	2200      	movs	r2, #0
 80025ca:	4905      	ldr	r1, [pc, #20]	@ (80025e0 <Get_RTC_Time+0x1c>)
 80025cc:	4805      	ldr	r0, [pc, #20]	@ (80025e4 <Get_RTC_Time+0x20>)
 80025ce:	f006 fa90 	bl	8008af2 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80025d2:	2200      	movs	r2, #0
 80025d4:	4904      	ldr	r1, [pc, #16]	@ (80025e8 <Get_RTC_Time+0x24>)
 80025d6:	4803      	ldr	r0, [pc, #12]	@ (80025e4 <Get_RTC_Time+0x20>)
 80025d8:	f006 fb6d 	bl	8008cb6 <HAL_RTC_GetDate>
}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000668 	.word	0x20000668
 80025e4:	200006a4 	.word	0x200006a4
 80025e8:	2000067c 	.word	0x2000067c

080025ec <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a13      	ldr	r2, [pc, #76]	@ (8002648 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d11f      	bne.n	800263e <HAL_TIM_IC_CaptureCallback+0x52>
        int8_t direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(htim) ? -1 : +1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b10      	cmp	r3, #16
 800260a:	d102      	bne.n	8002612 <HAL_TIM_IC_CaptureCallback+0x26>
 800260c:	f04f 33ff 	mov.w	r3, #4294967295
 8002610:	e000      	b.n	8002614 <HAL_TIM_IC_CaptureCallback+0x28>
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
        // Zamiast sprawdzać s_encoderCb, wołamy:
        Encoder_HandleInterrupt(direction);
 8002616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe f9ae 	bl	800097c <Encoder_HandleInterrupt>

        // Ewentualnie liczymy też encoderValue
        if (direction < 0) encoderValue--;
 8002620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002624:	2b00      	cmp	r3, #0
 8002626:	da05      	bge.n	8002634 <HAL_TIM_IC_CaptureCallback+0x48>
 8002628:	4b08      	ldr	r3, [pc, #32]	@ (800264c <HAL_TIM_IC_CaptureCallback+0x60>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3b01      	subs	r3, #1
 800262e:	4a07      	ldr	r2, [pc, #28]	@ (800264c <HAL_TIM_IC_CaptureCallback+0x60>)
 8002630:	6013      	str	r3, [r2, #0]
        else encoderValue++;
    }
}
 8002632:	e004      	b.n	800263e <HAL_TIM_IC_CaptureCallback+0x52>
        else encoderValue++;
 8002634:	4b05      	ldr	r3, [pc, #20]	@ (800264c <HAL_TIM_IC_CaptureCallback+0x60>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	4a04      	ldr	r2, [pc, #16]	@ (800264c <HAL_TIM_IC_CaptureCallback+0x60>)
 800263c:	6013      	str	r3, [r2, #0]
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40000800 	.word	0x40000800
 800264c:	20000680 	.word	0x20000680

08002650 <Button1_Pressed>:

/* USER CODE BEGIN 0 */
void Button1_Pressed(void) {
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
	// Jeśli menu jest aktywne, przechodzimy do kolejnego stanu w menu:
	if (MENU_IsActive()) {
 8002654:	f000 f860 	bl	8002718 <MENU_IsActive>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <Button1_Pressed+0x14>
		MENU_Next();
 800265e:	f000 f899 	bl	8002794 <MENU_Next>
	} else {
		// Jeśli menu nie jest aktywne – można wyświetlić np. HELLO
		SLIDER_SetString("HELLO", SCROLL_RIGHT_TO_LEFT, 10);
	}
}
 8002662:	e004      	b.n	800266e <Button1_Pressed+0x1e>
		SLIDER_SetString("HELLO", SCROLL_RIGHT_TO_LEFT, 10);
 8002664:	220a      	movs	r2, #10
 8002666:	2100      	movs	r1, #0
 8002668:	4802      	ldr	r0, [pc, #8]	@ (8002674 <Button1_Pressed+0x24>)
 800266a:	f000 fd2f 	bl	80030cc <SLIDER_SetString>
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	0800b430 	.word	0x0800b430

08002678 <Button1_DoubleClicked>:

void Button1_DoubleClicked(void) {
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
	// Jeśli menu jest aktywne, wychodzimy o poziom wyżej:
	if (MENU_IsActive()) {
 800267c:	f000 f84c 	bl	8002718 <MENU_IsActive>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <Button1_DoubleClicked+0x12>
		MENU_Exit();
 8002686:	f000 f873 	bl	8002770 <MENU_Exit>
	} else {
		// Jeśli menu nieaktywne – np. uruchom coś innego
		//SLIDER_SetString("DBLCL", SCROLL_RIGHT_TO_LEFT, 10);
	}
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}

0800268e <Button1_Held>:

void Button1_Held(void) {
 800268e:	b580      	push	{r7, lr}
 8002690:	af00      	add	r7, sp, #0
	// Długie przyciśnięcie – wchodzimy do menu (o ile nie jest aktywne)
	if (!MENU_IsActive()) {
 8002692:	f000 f841 	bl	8002718 <MENU_IsActive>
 8002696:	4603      	mov	r3, r0
 8002698:	f083 0301 	eor.w	r3, r3, #1
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <Button1_Held+0x18>
		MENU_Enter();
 80026a2:	f000 f851 	bl	8002748 <MENU_Enter>
	} else {
		// Można tu np. nic nie robić, albo "MENU_Exit()" całkiem
		// w zależności od Twojej koncepcji.
	}
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}

080026aa <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026ae:	b672      	cpsid	i
}
 80026b0:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();
	while (1) {
 80026b2:	bf00      	nop
 80026b4:	e7fd      	b.n	80026b2 <Error_Handler+0x8>
	...

080026b8 <MENU_GetExternalRingMode>:
void MENU_SetExternalRingMode(RingMode_t mode) {
    if (mode < RING_MODE_MAX) {
        g_externalRingMode = mode;
    }
}
RingMode_t MENU_GetExternalRingMode(void) {
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
    return g_externalRingMode;
 80026bc:	4b03      	ldr	r3, [pc, #12]	@ (80026cc <MENU_GetExternalRingMode+0x14>)
 80026be:	781b      	ldrb	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	200006a0 	.word	0x200006a0

080026d0 <MENU_GetSecondRingMode>:
void MENU_SetSecondRingMode(SekRingMode_t mode) {
    if (mode < SEKRING_MODE_MAX) {
        g_secondRingMode = mode;
    }
}
SekRingMode_t MENU_GetSecondRingMode(void) {
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
    return g_secondRingMode;
 80026d4:	4b03      	ldr	r3, [pc, #12]	@ (80026e4 <MENU_GetSecondRingMode+0x14>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	200006a1 	.word	0x200006a1

080026e8 <MENU_GetTopDisplayMode>:
void MENU_SetTopDisplayMode(TopDisplayMode_t mode) {
    if (mode < TOP_DISPLAY_MAX) {
        g_topDisplayMode = mode;
    }
}
TopDisplayMode_t MENU_GetTopDisplayMode(void) {
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
    return g_topDisplayMode;
 80026ec:	4b03      	ldr	r3, [pc, #12]	@ (80026fc <MENU_GetTopDisplayMode+0x14>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	200006a2 	.word	0x200006a2

08002700 <MENU_Init>:

//------------------------------------------------- OBSŁUGA MENU

void MENU_Init(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
    currentState = MENU_STATE_IDLE;
 8002704:	4b03      	ldr	r3, [pc, #12]	@ (8002714 <MENU_Init+0x14>)
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
    // Button_RegisterHoldCallback(0, MENU_EnterCallback);
    // Button_RegisterDoubleClickCallback(0, MENU_ExitCallback);
    // Ale możesz to też zrobić w button.c, odwołując się do MENU_Enter() i MENU_Exit().

    // Na starcie menu nieaktywne, więc nic nie robimy.
}
 800270a:	bf00      	nop
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	200006a3 	.word	0x200006a3

08002718 <MENU_IsActive>:

bool MENU_IsActive(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
    return (currentState != MENU_STATE_IDLE && currentState != MENU_STATE_END);
 800271c:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <MENU_IsActive+0x2c>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <MENU_IsActive+0x18>
 8002724:	4b07      	ldr	r3, [pc, #28]	@ (8002744 <MENU_IsActive+0x2c>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b04      	cmp	r3, #4
 800272a:	d001      	beq.n	8002730 <MENU_IsActive+0x18>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <MENU_IsActive+0x1a>
 8002730:	2300      	movs	r3, #0
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	b2db      	uxtb	r3, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	200006a3 	.word	0x200006a3

08002748 <MENU_Enter>:

void MENU_Enter(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
    // Wejście do menu (zwykle z długiego naciśnięcia):
    // Tylko jeśli jesteśmy w IDLE
	 if (currentState == MENU_STATE_IDLE) {
 800274c:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <MENU_Enter+0x20>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d107      	bne.n	8002764 <MENU_Enter+0x1c>
	        currentState = MENU_STATE_RINGZ;
 8002754:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <MENU_Enter+0x20>)
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
	        // REJESTRACJA callbacka:
	        Encoder_RegisterRotateCallback(MENU_EncoderCallback);
 800275a:	4804      	ldr	r0, [pc, #16]	@ (800276c <MENU_Enter+0x24>)
 800275c:	f7fd ff48 	bl	80005f0 <Encoder_RegisterRotateCallback>

	        MENU_UpdateStateDisplay();
 8002760:	f000 f842 	bl	80027e8 <MENU_UpdateStateDisplay>
    }
}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	200006a3 	.word	0x200006a3
 800276c:	08002859 	.word	0x08002859

08002770 <MENU_Exit>:

void MENU_Exit(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
    switch (currentState)
 8002774:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <MENU_Exit+0x20>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d107      	bne.n	800278c <MENU_Exit+0x1c>
    {
        case MENU_STATE_RINGZ:
            currentState = MENU_STATE_IDLE;
 800277c:	4b04      	ldr	r3, [pc, #16]	@ (8002790 <MENU_Exit+0x20>)
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
            // WYREJESTROWANIE
            Encoder_UnregisterRotateCallback();
 8002782:	f7fd ff45 	bl	8000610 <Encoder_UnregisterRotateCallback>
            SLIDER_Stop();
 8002786:	f000 fcdd 	bl	8003144 <SLIDER_Stop>
            break;
 800278a:	bf00      	nop

        // i tak dalej w innych stanach...
    }
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}
 8002790:	200006a3 	.word	0x200006a3

08002794 <MENU_Next>:


void MENU_Next(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
    // Przejście do następnej opcji w ramach menu
    // (Niezależnie od enkodera, tu jest np. "pojedynczy klik".
    //  Możesz też obrót enkodera wykorzystać do modyfikacji ringMode.)
    switch (currentState)
 8002798:	4b11      	ldr	r3, [pc, #68]	@ (80027e0 <MENU_Next+0x4c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b04      	cmp	r3, #4
 800279e:	d015      	beq.n	80027cc <MENU_Next+0x38>
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	dc19      	bgt.n	80027d8 <MENU_Next+0x44>
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d002      	beq.n	80027ae <MENU_Next+0x1a>
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d006      	beq.n	80027ba <MENU_Next+0x26>
            break;

        case MENU_STATE_IDLE:
        default:
            // Poza menu – brak akcji
            break;
 80027ac:	e014      	b.n	80027d8 <MENU_Next+0x44>
            currentState = MENU_STATE_TOP;
 80027ae:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <MENU_Next+0x4c>)
 80027b0:	2203      	movs	r2, #3
 80027b2:	701a      	strb	r2, [r3, #0]
            MENU_UpdateStateDisplay();
 80027b4:	f000 f818 	bl	80027e8 <MENU_UpdateStateDisplay>
            break;
 80027b8:	e00f      	b.n	80027da <MENU_Next+0x46>
            currentState = MENU_STATE_END;
 80027ba:	4b09      	ldr	r3, [pc, #36]	@ (80027e0 <MENU_Next+0x4c>)
 80027bc:	2204      	movs	r2, #4
 80027be:	701a      	strb	r2, [r3, #0]
            SLIDER_SetString("END", SCROLL_RIGHT_TO_LEFT, 10);
 80027c0:	220a      	movs	r2, #10
 80027c2:	2100      	movs	r1, #0
 80027c4:	4807      	ldr	r0, [pc, #28]	@ (80027e4 <MENU_Next+0x50>)
 80027c6:	f000 fc81 	bl	80030cc <SLIDER_SetString>
            break;
 80027ca:	e006      	b.n	80027da <MENU_Next+0x46>
            currentState = MENU_STATE_IDLE;
 80027cc:	4b04      	ldr	r3, [pc, #16]	@ (80027e0 <MENU_Next+0x4c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
            SLIDER_Stop();
 80027d2:	f000 fcb7 	bl	8003144 <SLIDER_Stop>
            break;
 80027d6:	e000      	b.n	80027da <MENU_Next+0x46>
            break;
 80027d8:	bf00      	nop
    }
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200006a3 	.word	0x200006a3
 80027e4:	0800b438 	.word	0x0800b438

080027e8 <MENU_UpdateStateDisplay>:

void MENU_UpdateStateDisplay(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
    // W zależności od currentState, wyświetlamy sliderem odpowiedni napis.
    // To jest wywoływane zaraz po wejściu w dany stan.
    switch (currentState)
 80027ec:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <MENU_UpdateStateDisplay+0x5c>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d822      	bhi.n	800283c <MENU_UpdateStateDisplay+0x54>
 80027f6:	a201      	add	r2, pc, #4	@ (adr r2, 80027fc <MENU_UpdateStateDisplay+0x14>)
 80027f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fc:	0800280d 	.word	0x0800280d
 8002800:	08002819 	.word	0x08002819
 8002804:	08002825 	.word	0x08002825
 8002808:	08002831 	.word	0x08002831
    {
        case MENU_STATE_RINGZ:
            SLIDER_SetString("ring z", SCROLL_RIGHT_TO_LEFT, 10);
 800280c:	220a      	movs	r2, #10
 800280e:	2100      	movs	r1, #0
 8002810:	480d      	ldr	r0, [pc, #52]	@ (8002848 <MENU_UpdateStateDisplay+0x60>)
 8002812:	f000 fc5b 	bl	80030cc <SLIDER_SetString>
            break;
 8002816:	e012      	b.n	800283e <MENU_UpdateStateDisplay+0x56>
        case MENU_STATE_RINGS:
            SLIDER_SetString("ring s", SCROLL_RIGHT_TO_LEFT, 10);
 8002818:	220a      	movs	r2, #10
 800281a:	2100      	movs	r1, #0
 800281c:	480b      	ldr	r0, [pc, #44]	@ (800284c <MENU_UpdateStateDisplay+0x64>)
 800281e:	f000 fc55 	bl	80030cc <SLIDER_SetString>
            break;
 8002822:	e00c      	b.n	800283e <MENU_UpdateStateDisplay+0x56>

        case MENU_STATE_TOP:
            SLIDER_SetString("top", SCROLL_RIGHT_TO_LEFT, 10);
 8002824:	220a      	movs	r2, #10
 8002826:	2100      	movs	r1, #0
 8002828:	4809      	ldr	r0, [pc, #36]	@ (8002850 <MENU_UpdateStateDisplay+0x68>)
 800282a:	f000 fc4f 	bl	80030cc <SLIDER_SetString>
            break;
 800282e:	e006      	b.n	800283e <MENU_UpdateStateDisplay+0x56>
        case MENU_STATE_END:
            SLIDER_SetString("END", SCROLL_RIGHT_TO_LEFT, 10);
 8002830:	220a      	movs	r2, #10
 8002832:	2100      	movs	r1, #0
 8002834:	4807      	ldr	r0, [pc, #28]	@ (8002854 <MENU_UpdateStateDisplay+0x6c>)
 8002836:	f000 fc49 	bl	80030cc <SLIDER_SetString>
            break;
 800283a:	e000      	b.n	800283e <MENU_UpdateStateDisplay+0x56>
        case MENU_STATE_IDLE:
        default:
            // Nic nie wyświetlamy
            break;
 800283c:	bf00      	nop
    }
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200006a3 	.word	0x200006a3
 8002848:	0800b43c 	.word	0x0800b43c
 800284c:	0800b444 	.word	0x0800b444
 8002850:	0800b44c 	.word	0x0800b44c
 8002854:	0800b438 	.word	0x0800b438

08002858 <MENU_EncoderCallback>:


void MENU_EncoderCallback(int8_t steps)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
    // Sprawdzamy, w jakim stanie jest menu:
    switch (currentState)
 8002862:	4b2a      	ldr	r3, [pc, #168]	@ (800290c <MENU_EncoderCallback+0xb4>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d032      	beq.n	80028d0 <MENU_EncoderCallback+0x78>
 800286a:	2b03      	cmp	r3, #3
 800286c:	dc46      	bgt.n	80028fc <MENU_EncoderCallback+0xa4>
 800286e:	2b01      	cmp	r3, #1
 8002870:	d002      	beq.n	8002878 <MENU_EncoderCallback+0x20>
 8002872:	2b02      	cmp	r3, #2
 8002874:	d016      	beq.n	80028a4 <MENU_EncoderCallback+0x4c>
            break;
        }

        default:
            // W innych stanach nie reagujemy
            break;
 8002876:	e041      	b.n	80028fc <MENU_EncoderCallback+0xa4>
            int newMode = (int)g_externalRingMode + steps;
 8002878:	4b25      	ldr	r3, [pc, #148]	@ (8002910 <MENU_EncoderCallback+0xb8>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	4413      	add	r3, r2
 8002884:	617b      	str	r3, [r7, #20]
            if (newMode < 0) newMode = 0;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b00      	cmp	r3, #0
 800288a:	da01      	bge.n	8002890 <MENU_EncoderCallback+0x38>
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
            if (newMode >= RING_MODE_MAX) newMode = RING_MODE_MAX - 1;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b08      	cmp	r3, #8
 8002894:	dd01      	ble.n	800289a <MENU_EncoderCallback+0x42>
 8002896:	2308      	movs	r3, #8
 8002898:	617b      	str	r3, [r7, #20]
            g_externalRingMode = (RingMode_t)newMode;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4b1c      	ldr	r3, [pc, #112]	@ (8002910 <MENU_EncoderCallback+0xb8>)
 80028a0:	701a      	strb	r2, [r3, #0]
            break;
 80028a2:	e02c      	b.n	80028fe <MENU_EncoderCallback+0xa6>
            int newMode = (int)g_secondRingMode + steps;
 80028a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <MENU_EncoderCallback+0xbc>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	4413      	add	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
            if (newMode < 0) newMode = 0;
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	da01      	bge.n	80028bc <MENU_EncoderCallback+0x64>
 80028b8:	2300      	movs	r3, #0
 80028ba:	613b      	str	r3, [r7, #16]
            if (newMode >= SEKRING_MODE_MAX) newMode = SEKRING_MODE_MAX - 1;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	2b04      	cmp	r3, #4
 80028c0:	dd01      	ble.n	80028c6 <MENU_EncoderCallback+0x6e>
 80028c2:	2304      	movs	r3, #4
 80028c4:	613b      	str	r3, [r7, #16]
            g_secondRingMode = (SekRingMode_t)newMode;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4b12      	ldr	r3, [pc, #72]	@ (8002914 <MENU_EncoderCallback+0xbc>)
 80028cc:	701a      	strb	r2, [r3, #0]
            break;
 80028ce:	e016      	b.n	80028fe <MENU_EncoderCallback+0xa6>
            int newMode = (int)g_topDisplayMode + steps;
 80028d0:	4b11      	ldr	r3, [pc, #68]	@ (8002918 <MENU_EncoderCallback+0xc0>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	4413      	add	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
            if (newMode < 0) newMode = 0;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	da01      	bge.n	80028e8 <MENU_EncoderCallback+0x90>
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
            if (newMode >= TOP_DISPLAY_MAX) newMode = TOP_DISPLAY_MAX - 1;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	dd01      	ble.n	80028f2 <MENU_EncoderCallback+0x9a>
 80028ee:	2301      	movs	r3, #1
 80028f0:	60fb      	str	r3, [r7, #12]
            g_topDisplayMode = (TopDisplayMode_t)newMode;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4b08      	ldr	r3, [pc, #32]	@ (8002918 <MENU_EncoderCallback+0xc0>)
 80028f8:	701a      	strb	r2, [r3, #0]
            break;
 80028fa:	e000      	b.n	80028fe <MENU_EncoderCallback+0xa6>
            break;
 80028fc:	bf00      	nop
    }
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	200006a3 	.word	0x200006a3
 8002910:	200006a0 	.word	0x200006a0
 8002914:	200006a1 	.word	0x200006a1
 8002918:	200006a2 	.word	0x200006a2

0800291c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002930:	2300      	movs	r3, #0
 8002932:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002934:	4b24      	ldr	r3, [pc, #144]	@ (80029c8 <MX_RTC_Init+0xac>)
 8002936:	4a25      	ldr	r2, [pc, #148]	@ (80029cc <MX_RTC_Init+0xb0>)
 8002938:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800293a:	4b23      	ldr	r3, [pc, #140]	@ (80029c8 <MX_RTC_Init+0xac>)
 800293c:	2200      	movs	r2, #0
 800293e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002940:	4b21      	ldr	r3, [pc, #132]	@ (80029c8 <MX_RTC_Init+0xac>)
 8002942:	227f      	movs	r2, #127	@ 0x7f
 8002944:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002946:	4b20      	ldr	r3, [pc, #128]	@ (80029c8 <MX_RTC_Init+0xac>)
 8002948:	22ff      	movs	r2, #255	@ 0xff
 800294a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800294c:	4b1e      	ldr	r3, [pc, #120]	@ (80029c8 <MX_RTC_Init+0xac>)
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002952:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <MX_RTC_Init+0xac>)
 8002954:	2200      	movs	r2, #0
 8002956:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002958:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <MX_RTC_Init+0xac>)
 800295a:	2200      	movs	r2, #0
 800295c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800295e:	481a      	ldr	r0, [pc, #104]	@ (80029c8 <MX_RTC_Init+0xac>)
 8002960:	f005 ffaa 	bl	80088b8 <HAL_RTC_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800296a:	f7ff fe9e 	bl	80026aa <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800296e:	2300      	movs	r3, #0
 8002970:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002972:	2300      	movs	r3, #0
 8002974:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002976:	2300      	movs	r3, #0
 8002978:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	2201      	movs	r2, #1
 8002986:	4619      	mov	r1, r3
 8002988:	480f      	ldr	r0, [pc, #60]	@ (80029c8 <MX_RTC_Init+0xac>)
 800298a:	f006 f818 	bl	80089be <HAL_RTC_SetTime>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002994:	f7ff fe89 	bl	80026aa <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002998:	2301      	movs	r3, #1
 800299a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800299c:	2301      	movs	r3, #1
 800299e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80029a0:	2301      	movs	r3, #1
 80029a2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80029a8:	463b      	mov	r3, r7
 80029aa:	2201      	movs	r2, #1
 80029ac:	4619      	mov	r1, r3
 80029ae:	4806      	ldr	r0, [pc, #24]	@ (80029c8 <MX_RTC_Init+0xac>)
 80029b0:	f006 f8fd 	bl	8008bae <HAL_RTC_SetDate>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80029ba:	f7ff fe76 	bl	80026aa <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200006a4 	.word	0x200006a4
 80029cc:	40002800 	.word	0x40002800

080029d0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029d8:	f107 030c 	add.w	r3, r7, #12
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002a20 <HAL_RTC_MspInit+0x50>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d111      	bne.n	8002a16 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80029f2:	2302      	movs	r3, #2
 80029f4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80029f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029fa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029fc:	f107 030c 	add.w	r3, r7, #12
 8002a00:	4618      	mov	r0, r3
 8002a02:	f005 fe6b 	bl	80086dc <HAL_RCCEx_PeriphCLKConfig>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002a0c:	f7ff fe4d 	bl	80026aa <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a10:	4b04      	ldr	r3, [pc, #16]	@ (8002a24 <HAL_RTC_MspInit+0x54>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002a16:	bf00      	nop
 8002a18:	3720      	adds	r7, #32
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40002800 	.word	0x40002800
 8002a24:	42470e3c 	.word	0x42470e3c

08002a28 <SHT30_Init>:

/* =========================================================================
   Funkcja inicjalizacyjna
   ========================================================================= */
void SHT30_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af02      	add	r7, sp, #8
    g_measState = SHT30_STATE_IDLE;
 8002a2e:	4b10      	ldr	r3, [pc, #64]	@ (8002a70 <SHT30_Init+0x48>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
    g_timerMs   = 0;
 8002a34:	4b0f      	ldr	r3, [pc, #60]	@ (8002a74 <SHT30_Init+0x4c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	801a      	strh	r2, [r3, #0]
    memset(&g_latestData, 0, sizeof(g_latestData));
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	480e      	ldr	r0, [pc, #56]	@ (8002a78 <SHT30_Init+0x50>)
 8002a40:	f008 fc88 	bl	800b354 <memset>
    g_latestData.valid = false;
 8002a44:	4b0c      	ldr	r3, [pc, #48]	@ (8002a78 <SHT30_Init+0x50>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	721a      	strb	r2, [r3, #8]

    // Opcjonalny Soft Reset (0x30A2) – wysyłamy synchronicznie
    uint8_t cmdReset[2] = {0x30, 0xA2};
 8002a4a:	f24a 2330 	movw	r3, #41520	@ 0xa230
 8002a4e:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&hi2c2, (SHT30_I2C_ADDR << 1), cmdReset, 2, 100);
 8002a50:	1d3a      	adds	r2, r7, #4
 8002a52:	2364      	movs	r3, #100	@ 0x64
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	2302      	movs	r3, #2
 8002a58:	2188      	movs	r1, #136	@ 0x88
 8002a5a:	4808      	ldr	r0, [pc, #32]	@ (8002a7c <SHT30_Init+0x54>)
 8002a5c:	f002 fe50 	bl	8005700 <HAL_I2C_Master_Transmit>
    HAL_Delay(10); // Odczekaj chwilę po resecie
 8002a60:	200a      	movs	r0, #10
 8002a62:	f001 fb45 	bl	80040f0 <HAL_Delay>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	200006ca 	.word	0x200006ca
 8002a74:	200006d8 	.word	0x200006d8
 8002a78:	200006cc 	.word	0x200006cc
 8002a7c:	20000554 	.word	0x20000554

08002a80 <SHT30_10msHandler>:

/* =========================================================================
   Funkcja wywoływana co 10 ms (z przerwania timera)
   ========================================================================= */
void SHT30_10msHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
    switch (g_measState)
 8002a84:	4b2d      	ldr	r3, [pc, #180]	@ (8002b3c <SHT30_10msHandler+0xbc>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d84c      	bhi.n	8002b26 <SHT30_10msHandler+0xa6>
 8002a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a94 <SHT30_10msHandler+0x14>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002aa9 	.word	0x08002aa9
 8002a98:	08002b2f 	.word	0x08002b2f
 8002a9c:	08002add 	.word	0x08002add
 8002aa0:	08002b2f 	.word	0x08002b2f
 8002aa4:	08002b1f 	.word	0x08002b1f
    {
    case SHT30_STATE_IDLE:
        // Czekamy aż minie 30 ms od poprzedniego pomiaru
        g_timerMs += 10;
 8002aa8:	4b25      	ldr	r3, [pc, #148]	@ (8002b40 <SHT30_10msHandler+0xc0>)
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	330a      	adds	r3, #10
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	4b23      	ldr	r3, [pc, #140]	@ (8002b40 <SHT30_10msHandler+0xc0>)
 8002ab2:	801a      	strh	r2, [r3, #0]
        if (g_timerMs >= SHT30_PERIOD_MS)
 8002ab4:	4b22      	ldr	r3, [pc, #136]	@ (8002b40 <SHT30_10msHandler+0xc0>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	2b77      	cmp	r3, #119	@ 0x77
 8002aba:	d93a      	bls.n	8002b32 <SHT30_10msHandler+0xb2>
        {
            // Reset licznika
            g_timerMs = 0;
 8002abc:	4b20      	ldr	r3, [pc, #128]	@ (8002b40 <SHT30_10msHandler+0xc0>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	801a      	strh	r2, [r3, #0]

            // Start transmisji DMA – wysyłamy komendę Single Shot
            if (HAL_I2C_Master_Transmit_DMA(&hi2c2, (SHT30_I2C_ADDR << 1),
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b44 <SHT30_10msHandler+0xc4>)
 8002ac6:	2188      	movs	r1, #136	@ 0x88
 8002ac8:	481f      	ldr	r0, [pc, #124]	@ (8002b48 <SHT30_10msHandler+0xc8>)
 8002aca:	f002 ff17 	bl	80058fc <HAL_I2C_Master_Transmit_DMA>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d12e      	bne.n	8002b32 <SHT30_10msHandler+0xb2>
                                            (uint8_t*)SHT30_CMD_SINGLE_SHOT, 2) == HAL_OK)
            {
                g_measState = SHT30_STATE_TX_IN_PROGRESS;
 8002ad4:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <SHT30_10msHandler+0xbc>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
            {
                // Błąd startu DMA – pozostajemy w stanie IDLE
                // Można dodać obsługę błędu tutaj
            }
        }
        break;
 8002ada:	e02a      	b.n	8002b32 <SHT30_10msHandler+0xb2>
        // Nic nie robimy – czekamy na callback TX
        break;

    case SHT30_STATE_WAITING_FOR_MEAS:
        // Odliczamy czas konwersji (15 ms)
        g_timerMs += 10;
 8002adc:	4b18      	ldr	r3, [pc, #96]	@ (8002b40 <SHT30_10msHandler+0xc0>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	330a      	adds	r3, #10
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	4b16      	ldr	r3, [pc, #88]	@ (8002b40 <SHT30_10msHandler+0xc0>)
 8002ae6:	801a      	strh	r2, [r3, #0]
        if (g_timerMs >= SHT30_MEAS_TIME_MS)
 8002ae8:	4b15      	ldr	r3, [pc, #84]	@ (8002b40 <SHT30_10msHandler+0xc0>)
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	2b59      	cmp	r3, #89	@ 0x59
 8002aee:	d922      	bls.n	8002b36 <SHT30_10msHandler+0xb6>
        {
            // Minął czas potrzebny na konwersję
            g_timerMs = 0; // Reset licznika
 8002af0:	4b13      	ldr	r3, [pc, #76]	@ (8002b40 <SHT30_10msHandler+0xc0>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	801a      	strh	r2, [r3, #0]

            // Rozpoczynamy odbiór surowych danych (6 bajtów) przez DMA
            if (HAL_I2C_Master_Receive_DMA(&hi2c2, (SHT30_I2C_ADDR << 1),
 8002af6:	2306      	movs	r3, #6
 8002af8:	4a14      	ldr	r2, [pc, #80]	@ (8002b4c <SHT30_10msHandler+0xcc>)
 8002afa:	2188      	movs	r1, #136	@ 0x88
 8002afc:	4812      	ldr	r0, [pc, #72]	@ (8002b48 <SHT30_10msHandler+0xc8>)
 8002afe:	f003 f829 	bl	8005b54 <HAL_I2C_Master_Receive_DMA>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d103      	bne.n	8002b10 <SHT30_10msHandler+0x90>
                                           g_rxBuffer, 6) == HAL_OK)
            {
                g_measState = SHT30_STATE_RX_IN_PROGRESS;
 8002b08:	4b0c      	ldr	r3, [pc, #48]	@ (8002b3c <SHT30_10msHandler+0xbc>)
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	701a      	strb	r2, [r3, #0]
                // Błąd startu DMA – powrót do IDLE
                g_measState = SHT30_STATE_IDLE;
                g_latestData.valid = false;
            }
        }
        break;
 8002b0e:	e012      	b.n	8002b36 <SHT30_10msHandler+0xb6>
                g_measState = SHT30_STATE_IDLE;
 8002b10:	4b0a      	ldr	r3, [pc, #40]	@ (8002b3c <SHT30_10msHandler+0xbc>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	701a      	strb	r2, [r3, #0]
                g_latestData.valid = false;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <SHT30_10msHandler+0xd0>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	721a      	strb	r2, [r3, #8]
        break;
 8002b1c:	e00b      	b.n	8002b36 <SHT30_10msHandler+0xb6>
        break;

    case SHT30_STATE_DONE:
        // Pomiar skończony. Przechodzimy do stanu IDLE.
        // Dalsze pomiary będą inicjowane po upływie kolejnych 30 ms
        g_measState = SHT30_STATE_IDLE;
 8002b1e:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <SHT30_10msHandler+0xbc>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
        break;
 8002b24:	e008      	b.n	8002b38 <SHT30_10msHandler+0xb8>

    default:
        g_measState = SHT30_STATE_IDLE;
 8002b26:	4b05      	ldr	r3, [pc, #20]	@ (8002b3c <SHT30_10msHandler+0xbc>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
        break;
 8002b2c:	e004      	b.n	8002b38 <SHT30_10msHandler+0xb8>
        break;
 8002b2e:	bf00      	nop
 8002b30:	e002      	b.n	8002b38 <SHT30_10msHandler+0xb8>
        break;
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <SHT30_10msHandler+0xb8>
        break;
 8002b36:	bf00      	nop
    }
}
 8002b38:	bf00      	nop
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	200006ca 	.word	0x200006ca
 8002b40:	200006d8 	.word	0x200006d8
 8002b44:	0800b4f0 	.word	0x0800b4f0
 8002b48:	20000554 	.word	0x20000554
 8002b4c:	200006c4 	.word	0x200006c4
 8002b50:	200006cc 	.word	0x200006cc

08002b54 <HAL_I2C_MasterTxCpltCallback>:

/* =========================================================================
   Callback zakończenia transmisji DMA (MasterTxCplt)
   ========================================================================= */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a09      	ldr	r2, [pc, #36]	@ (8002b88 <HAL_I2C_MasterTxCpltCallback+0x34>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d109      	bne.n	8002b7a <HAL_I2C_MasterTxCpltCallback+0x26>
    {
        if (g_measState == SHT30_STATE_TX_IN_PROGRESS)
 8002b66:	4b09      	ldr	r3, [pc, #36]	@ (8002b8c <HAL_I2C_MasterTxCpltCallback+0x38>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d105      	bne.n	8002b7a <HAL_I2C_MasterTxCpltCallback+0x26>
        {
            // Przejście do stanu oczekiwania na konwersję
            g_measState = SHT30_STATE_WAITING_FOR_MEAS;
 8002b6e:	4b07      	ldr	r3, [pc, #28]	@ (8002b8c <HAL_I2C_MasterTxCpltCallback+0x38>)
 8002b70:	2202      	movs	r2, #2
 8002b72:	701a      	strb	r2, [r3, #0]
            g_timerMs = 0; // Reset licznika
 8002b74:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40005800 	.word	0x40005800
 8002b8c:	200006ca 	.word	0x200006ca
 8002b90:	200006d8 	.word	0x200006d8

08002b94 <HAL_I2C_MasterRxCpltCallback>:

/* =========================================================================
   Callback zakończenia odbioru DMA (MasterRxCplt)
   ========================================================================= */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a13      	ldr	r2, [pc, #76]	@ (8002bf0 <HAL_I2C_MasterRxCpltCallback+0x5c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d120      	bne.n	8002be8 <HAL_I2C_MasterRxCpltCallback+0x54>
    {
        if (g_measState == SHT30_STATE_RX_IN_PROGRESS)
 8002ba6:	4b13      	ldr	r3, [pc, #76]	@ (8002bf4 <HAL_I2C_MasterRxCpltCallback+0x60>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d11c      	bne.n	8002be8 <HAL_I2C_MasterRxCpltCallback+0x54>
        {
            int32_t temp;   // Temperatura w 0.01°C
            uint32_t rh;    // Wilgotność w 0.01% RH

            bool ok = SHT30_ConvertRawData(g_rxBuffer, &temp, &rh);
 8002bae:	f107 020c 	add.w	r2, r7, #12
 8002bb2:	f107 0310 	add.w	r3, r7, #16
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	480f      	ldr	r0, [pc, #60]	@ (8002bf8 <HAL_I2C_MasterRxCpltCallback+0x64>)
 8002bba:	f000 f83d 	bl	8002c38 <SHT30_ConvertRawData>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	75fb      	strb	r3, [r7, #23]
            if (ok)
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d009      	beq.n	8002bdc <HAL_I2C_MasterRxCpltCallback+0x48>
            {
                g_latestData.temperature = temp;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4a0c      	ldr	r2, [pc, #48]	@ (8002bfc <HAL_I2C_MasterRxCpltCallback+0x68>)
 8002bcc:	6013      	str	r3, [r2, #0]
                g_latestData.humidity    = rh;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <HAL_I2C_MasterRxCpltCallback+0x68>)
 8002bd2:	6053      	str	r3, [r2, #4]
                g_latestData.valid       = true;
 8002bd4:	4b09      	ldr	r3, [pc, #36]	@ (8002bfc <HAL_I2C_MasterRxCpltCallback+0x68>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	721a      	strb	r2, [r3, #8]
 8002bda:	e002      	b.n	8002be2 <HAL_I2C_MasterRxCpltCallback+0x4e>
            }
            else
            {
                g_latestData.valid = false;
 8002bdc:	4b07      	ldr	r3, [pc, #28]	@ (8002bfc <HAL_I2C_MasterRxCpltCallback+0x68>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	721a      	strb	r2, [r3, #8]
            }

            // Przejście do stanu DONE
            g_measState = SHT30_STATE_DONE;
 8002be2:	4b04      	ldr	r3, [pc, #16]	@ (8002bf4 <HAL_I2C_MasterRxCpltCallback+0x60>)
 8002be4:	2204      	movs	r2, #4
 8002be6:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8002be8:	bf00      	nop
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40005800 	.word	0x40005800
 8002bf4:	200006ca 	.word	0x200006ca
 8002bf8:	200006c4 	.word	0x200006c4
 8002bfc:	200006cc 	.word	0x200006cc

08002c00 <HAL_I2C_ErrorCallback>:

/* =========================================================================
   Callback błędu transmisji DMA (Error)
   ========================================================================= */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a07      	ldr	r2, [pc, #28]	@ (8002c2c <HAL_I2C_ErrorCallback+0x2c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d105      	bne.n	8002c1e <HAL_I2C_ErrorCallback+0x1e>
    {
        // Obsługa błędu transmisji DMA/I2C
        g_measState = SHT30_STATE_IDLE;
 8002c12:	4b07      	ldr	r3, [pc, #28]	@ (8002c30 <HAL_I2C_ErrorCallback+0x30>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
        g_latestData.valid = false;
 8002c18:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <HAL_I2C_ErrorCallback+0x34>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	721a      	strb	r2, [r3, #8]
    }
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40005800 	.word	0x40005800
 8002c30:	200006ca 	.word	0x200006ca
 8002c34:	200006cc 	.word	0x200006cc

08002c38 <SHT30_ConvertRawData>:

/* =========================================================================
   Funkcja konwertująca surowe dane na wartości całkowite
   ========================================================================= */
static bool SHT30_ConvertRawData(const uint8_t *raw, int32_t *pTemp, uint32_t *pRH)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
    if (raw == NULL || pTemp == NULL || pRH == NULL)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <SHT30_ConvertRawData+0x1e>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <SHT30_ConvertRawData+0x1e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <SHT30_ConvertRawData+0x22>
        return false;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e04f      	b.n	8002cfa <SHT30_ConvertRawData+0xc2>

    // Sprawdzenie CRC
    if (SHT30_CalcCrc8(&raw[0], 2) != raw[2])
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f853 	bl	8002d08 <SHT30_CalcCrc8>
 8002c62:	4603      	mov	r3, r0
 8002c64:	461a      	mov	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3302      	adds	r3, #2
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <SHT30_ConvertRawData+0x3c>
        return false; // Błędny CRC temperatury
 8002c70:	2300      	movs	r3, #0
 8002c72:	e042      	b.n	8002cfa <SHT30_ConvertRawData+0xc2>

    if (SHT30_CalcCrc8(&raw[3], 2) != raw[5])
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3303      	adds	r3, #3
 8002c78:	2102      	movs	r1, #2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 f844 	bl	8002d08 <SHT30_CalcCrc8>
 8002c80:	4603      	mov	r3, r0
 8002c82:	461a      	mov	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	3305      	adds	r3, #5
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d001      	beq.n	8002c92 <SHT30_ConvertRawData+0x5a>
        return false; // Błędny CRC wilgotności
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e033      	b.n	8002cfa <SHT30_ConvertRawData+0xc2>

    // Surowa temperatura i wilgotność
    uint16_t rawT = (raw[0] << 8) | raw[1];
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	b21a      	sxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	b21b      	sxth	r3, r3
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	b21b      	sxth	r3, r3
 8002ca6:	82fb      	strh	r3, [r7, #22]
    uint16_t rawH = (raw[3] << 8) | raw[4];
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3303      	adds	r3, #3
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	021b      	lsls	r3, r3, #8
 8002cb0:	b21a      	sxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	b21b      	sxth	r3, r3
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	b21b      	sxth	r3, r3
 8002cbe:	82bb      	strh	r3, [r7, #20]

    // Konwersja na wartości całkowite:
    // T = -4500 + (17500 * rawT) / 65535
    // H = (10000 * rawH) / 65535
    *pTemp = (-4500) + ((17500 * (int32_t)rawT) / 65535);
 8002cc0:	8afb      	ldrh	r3, [r7, #22]
 8002cc2:	f244 425c 	movw	r2, #17500	@ 0x445c
 8002cc6:	fb02 f303 	mul.w	r3, r2, r3
 8002cca:	4a0e      	ldr	r2, [pc, #56]	@ (8002d04 <SHT30_ConvertRawData+0xcc>)
 8002ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8002cd0:	441a      	add	r2, r3
 8002cd2:	13d2      	asrs	r2, r2, #15
 8002cd4:	17db      	asrs	r3, r3, #31
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f5a3 538c 	sub.w	r3, r3, #4480	@ 0x1180
 8002cdc:	3b14      	subs	r3, #20
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	6013      	str	r3, [r2, #0]
    *pRH   = (10000 * (uint32_t)rawH) / 65535;
 8002ce2:	8abb      	ldrh	r3, [r7, #20]
 8002ce4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	4a05      	ldr	r2, [pc, #20]	@ (8002d04 <SHT30_ConvertRawData+0xcc>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0bda      	lsrs	r2, r3, #15
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	601a      	str	r2, [r3, #0]

    return true;
 8002cf8:	2301      	movs	r3, #1
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	80008001 	.word	0x80008001

08002d08 <SHT30_CalcCrc8>:
/* =========================================================================
   Funkcja obliczająca CRC8 wg specyfikacji SHT3x
   Polinom: 0x31, inicjalizacja: 0xFF
   ========================================================================= */
static uint8_t SHT30_CalcCrc8(const uint8_t *data, int len)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xFF;
 8002d12:	23ff      	movs	r3, #255	@ 0xff
 8002d14:	75fb      	strb	r3, [r7, #23]

    for (int i = 0; i < len; i++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	e021      	b.n	8002d60 <SHT30_CalcCrc8+0x58>
    {
        crc ^= data[i];
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	781a      	ldrb	r2, [r3, #0]
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
 8002d26:	4053      	eors	r3, r2
 8002d28:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	e011      	b.n	8002d54 <SHT30_CalcCrc8+0x4c>
        {
            if (crc & 0x80)
 8002d30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	da07      	bge.n	8002d48 <SHT30_CalcCrc8+0x40>
                crc = (crc << 1) ^ 0x31;
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	b25b      	sxtb	r3, r3
 8002d3e:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8002d42:	b25b      	sxtb	r3, r3
 8002d44:	75fb      	strb	r3, [r7, #23]
 8002d46:	e002      	b.n	8002d4e <SHT30_CalcCrc8+0x46>
            else
                crc <<= 1;
 8002d48:	7dfb      	ldrb	r3, [r7, #23]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3301      	adds	r3, #1
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b07      	cmp	r3, #7
 8002d58:	ddea      	ble.n	8002d30 <SHT30_CalcCrc8+0x28>
    for (int i = 0; i < len; i++)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	dbd9      	blt.n	8002d1c <SHT30_CalcCrc8+0x14>
        }
    }

    return crc;
 8002d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <PrepareBuffer18>:
 *         [0..5] = puste, [6..11] = 6 znaków napisu, [12..17] = puste.
 *         Jeśli text ma mniej niż 6 znaków, dopełniamy pustymi;
 *         jeśli ma więcej, obcinamy do 6.
 */
static void PrepareBuffer18(const char* text)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
    // Wyczyść cały bufor
    memset(buffer, 0, sizeof(buffer));
 8002d80:	2212      	movs	r2, #18
 8002d82:	2100      	movs	r1, #0
 8002d84:	481a      	ldr	r0, [pc, #104]	@ (8002df0 <PrepareBuffer18+0x78>)
 8002d86:	f008 fae5 	bl	800b354 <memset>

    // Kopiujemy do tymczasowego stringa tylko 6 znaków
    char temp[7];
    strncpy(temp, text, 6);
 8002d8a:	f107 030c 	add.w	r3, r7, #12
 8002d8e:	2206      	movs	r2, #6
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f008 faf8 	bl	800b388 <strncpy>
    temp[6] = '\0';   // na wszelki wypadek
 8002d98:	2300      	movs	r3, #0
 8002d9a:	74bb      	strb	r3, [r7, #18]

    // 1) Pierwsze 6 = puste
    // (już jest 0 po memset, więc nic nie trzeba robić)

    // 2) Indeksy 6..11 = treść napisu
    for (int i = 0; i < 6; i++)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e01d      	b.n	8002dde <PrepareBuffer18+0x66>
    {
        if (temp[i] == '\0') {
 8002da2:	f107 020c 	add.w	r2, r7, #12
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	4413      	add	r3, r2
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <PrepareBuffer18+0x44>
            // Jak się skończył tekst => puste
            buffer[6 + i] = 0;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	3306      	adds	r3, #6
 8002db4:	4a0e      	ldr	r2, [pc, #56]	@ (8002df0 <PrepareBuffer18+0x78>)
 8002db6:	2100      	movs	r1, #0
 8002db8:	54d1      	strb	r1, [r2, r3]
 8002dba:	e00d      	b.n	8002dd8 <PrepareBuffer18+0x60>
        }
        else {
            buffer[6 + i] = (uint8_t)charToSegment(temp[i]);
 8002dbc:	f107 020c 	add.w	r2, r7, #12
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	781a      	ldrb	r2, [r3, #0]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	1d9c      	adds	r4, r3, #6
 8002dca:	4610      	mov	r0, r2
 8002dcc:	f7fd fdec 	bl	80009a8 <charToSegment>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <PrepareBuffer18+0x78>)
 8002dd6:	551a      	strb	r2, [r3, r4]
    for (int i = 0; i < 6; i++)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	ddde      	ble.n	8002da2 <PrepareBuffer18+0x2a>
        }
    }

    // 3) Ostatnie 6 (12..17) = puste
    // (znów, już jest 0 po memset)
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd90      	pop	{r4, r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200006dc 	.word	0x200006dc

08002df4 <ShowWindow>:
 *
 *         Digit0 (najbardziej lewy) - wstawiamy w bity [47..40],
 *         Digit5 (najbardziej prawy) - w bity [7..0].
 */
static void ShowWindow(void)
{
 8002df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002df8:	b09b      	sub	sp, #108	@ 0x6c
 8002dfa:	af00      	add	r7, sp, #0
    // Zabezpieczenie – jeśli windowIndex < 0 lub windowIndex+5 >= 18,
    // to niektóre odczyty będą poza [0..17], ale wtedy możemy dać 0 (puste).
    // Najprościej – brać "safe read".
    uint64_t val = 0ULL;
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    // digit0 (lewa pozycja wyświetlacza)
    uint8_t d0 = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (windowIndex + 0 >= 0 && windowIndex + 0 < TOTAL_LEN)
 8002e0e:	4b90      	ldr	r3, [pc, #576]	@ (8003050 <ShowWindow+0x25c>)
 8002e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	db0c      	blt.n	8002e32 <ShowWindow+0x3e>
 8002e18:	4b8d      	ldr	r3, [pc, #564]	@ (8003050 <ShowWindow+0x25c>)
 8002e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e1e:	2b11      	cmp	r3, #17
 8002e20:	dc07      	bgt.n	8002e32 <ShowWindow+0x3e>
        d0 = buffer[windowIndex + 0];
 8002e22:	4b8b      	ldr	r3, [pc, #556]	@ (8003050 <ShowWindow+0x25c>)
 8002e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b8a      	ldr	r3, [pc, #552]	@ (8003054 <ShowWindow+0x260>)
 8002e2c:	5c9b      	ldrb	r3, [r3, r2]
 8002e2e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

    // digit1
    uint8_t d1 = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
    if (windowIndex + 1 >= 0 && windowIndex + 1 < TOTAL_LEN)
 8002e38:	4b85      	ldr	r3, [pc, #532]	@ (8003050 <ShowWindow+0x25c>)
 8002e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	db0c      	blt.n	8002e5e <ShowWindow+0x6a>
 8002e44:	4b82      	ldr	r3, [pc, #520]	@ (8003050 <ShowWindow+0x25c>)
 8002e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e4a:	2b10      	cmp	r3, #16
 8002e4c:	dc07      	bgt.n	8002e5e <ShowWindow+0x6a>
        d1 = buffer[windowIndex + 1];
 8002e4e:	4b80      	ldr	r3, [pc, #512]	@ (8003050 <ShowWindow+0x25c>)
 8002e50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	4b7f      	ldr	r3, [pc, #508]	@ (8003054 <ShowWindow+0x260>)
 8002e58:	5c9b      	ldrb	r3, [r3, r2]
 8002e5a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // digit2
    uint8_t d2 = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
    if (windowIndex + 2 >= 0 && windowIndex + 2 < TOTAL_LEN)
 8002e64:	4b7a      	ldr	r3, [pc, #488]	@ (8003050 <ShowWindow+0x25c>)
 8002e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e6a:	f113 0f02 	cmn.w	r3, #2
 8002e6e:	db0c      	blt.n	8002e8a <ShowWindow+0x96>
 8002e70:	4b77      	ldr	r3, [pc, #476]	@ (8003050 <ShowWindow+0x25c>)
 8002e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e76:	2b0f      	cmp	r3, #15
 8002e78:	dc07      	bgt.n	8002e8a <ShowWindow+0x96>
        d2 = buffer[windowIndex + 2];
 8002e7a:	4b75      	ldr	r3, [pc, #468]	@ (8003050 <ShowWindow+0x25c>)
 8002e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e80:	1c9a      	adds	r2, r3, #2
 8002e82:	4b74      	ldr	r3, [pc, #464]	@ (8003054 <ShowWindow+0x260>)
 8002e84:	5c9b      	ldrb	r3, [r3, r2]
 8002e86:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

    // digit3
    uint8_t d3 = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
    if (windowIndex + 3 >= 0 && windowIndex + 3 < TOTAL_LEN)
 8002e90:	4b6f      	ldr	r3, [pc, #444]	@ (8003050 <ShowWindow+0x25c>)
 8002e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e96:	f113 0f03 	cmn.w	r3, #3
 8002e9a:	db0c      	blt.n	8002eb6 <ShowWindow+0xc2>
 8002e9c:	4b6c      	ldr	r3, [pc, #432]	@ (8003050 <ShowWindow+0x25c>)
 8002e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ea2:	2b0e      	cmp	r3, #14
 8002ea4:	dc07      	bgt.n	8002eb6 <ShowWindow+0xc2>
        d3 = buffer[windowIndex + 3];
 8002ea6:	4b6a      	ldr	r3, [pc, #424]	@ (8003050 <ShowWindow+0x25c>)
 8002ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eac:	1cda      	adds	r2, r3, #3
 8002eae:	4b69      	ldr	r3, [pc, #420]	@ (8003054 <ShowWindow+0x260>)
 8002eb0:	5c9b      	ldrb	r3, [r3, r2]
 8002eb2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

    // digit4
    uint8_t d4 = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    if (windowIndex + 4 >= 0 && windowIndex + 4 < TOTAL_LEN)
 8002ebc:	4b64      	ldr	r3, [pc, #400]	@ (8003050 <ShowWindow+0x25c>)
 8002ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ec2:	f113 0f04 	cmn.w	r3, #4
 8002ec6:	db0c      	blt.n	8002ee2 <ShowWindow+0xee>
 8002ec8:	4b61      	ldr	r3, [pc, #388]	@ (8003050 <ShowWindow+0x25c>)
 8002eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ece:	2b0d      	cmp	r3, #13
 8002ed0:	dc07      	bgt.n	8002ee2 <ShowWindow+0xee>
        d4 = buffer[windowIndex + 4];
 8002ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8003050 <ShowWindow+0x25c>)
 8002ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ed8:	1d1a      	adds	r2, r3, #4
 8002eda:	4b5e      	ldr	r3, [pc, #376]	@ (8003054 <ShowWindow+0x260>)
 8002edc:	5c9b      	ldrb	r3, [r3, r2]
 8002ede:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

    // digit5 (prawa pozycja wyświetlacza)
    uint8_t d5 = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
    if (windowIndex + 5 >= 0 && windowIndex + 5 < TOTAL_LEN)
 8002ee8:	4b59      	ldr	r3, [pc, #356]	@ (8003050 <ShowWindow+0x25c>)
 8002eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eee:	f113 0f05 	cmn.w	r3, #5
 8002ef2:	db0c      	blt.n	8002f0e <ShowWindow+0x11a>
 8002ef4:	4b56      	ldr	r3, [pc, #344]	@ (8003050 <ShowWindow+0x25c>)
 8002ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	dc07      	bgt.n	8002f0e <ShowWindow+0x11a>
        d5 = buffer[windowIndex + 5];
 8002efe:	4b54      	ldr	r3, [pc, #336]	@ (8003050 <ShowWindow+0x25c>)
 8002f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f04:	1d5a      	adds	r2, r3, #5
 8002f06:	4b53      	ldr	r3, [pc, #332]	@ (8003054 <ShowWindow+0x260>)
 8002f08:	5c9b      	ldrb	r3, [r3, r2]
 8002f0a:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

    // Złóż do 48-bitów (digit0 w [47..40], digit1 w [39..32], ...)
    // UWAGA: digit0 to LEWA, digit5 to PRAWA
    val |= ((uint64_t)d5 << 40);
 8002f0e:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8002f12:	2200      	movs	r2, #0
 8002f14:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f16:	657a      	str	r2, [r7, #84]	@ 0x54
 8002f18:	f04f 0000 	mov.w	r0, #0
 8002f1c:	f04f 0100 	mov.w	r1, #0
 8002f20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f22:	0219      	lsls	r1, r3, #8
 8002f24:	2000      	movs	r0, #0
 8002f26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f2a:	ea42 0600 	orr.w	r6, r2, r0
 8002f2e:	62be      	str	r6, [r7, #40]	@ 0x28
 8002f30:	430b      	orrs	r3, r1
 8002f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f38:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    val |= ((uint64_t)d4 << 32);
 8002f3c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8002f40:	2200      	movs	r2, #0
 8002f42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f44:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f46:	f04f 0000 	mov.w	r0, #0
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f50:	0019      	movs	r1, r3
 8002f52:	2000      	movs	r0, #0
 8002f54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f58:	ea42 0600 	orr.w	r6, r2, r0
 8002f5c:	623e      	str	r6, [r7, #32]
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f66:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    val |= ((uint64_t)d3 << 24);
 8002f6a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8002f6e:	2200      	movs	r2, #0
 8002f70:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f72:	647a      	str	r2, [r7, #68]	@ 0x44
 8002f74:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8002f78:	460b      	mov	r3, r1
 8002f7a:	0a1d      	lsrs	r5, r3, #8
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	061c      	lsls	r4, r3, #24
 8002f80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f84:	ea42 0104 	orr.w	r1, r2, r4
 8002f88:	61b9      	str	r1, [r7, #24]
 8002f8a:	432b      	orrs	r3, r5
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002f92:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d2 << 16);
 8002f96:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	4698      	mov	r8, r3
 8002f9e:	4691      	mov	r9, r2
 8002fa0:	f04f 0000 	mov.w	r0, #0
 8002fa4:	f04f 0100 	mov.w	r1, #0
 8002fa8:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8002fac:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8002fb0:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8002fb4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fb8:	ea42 0400 	orr.w	r4, r2, r0
 8002fbc:	613c      	str	r4, [r7, #16]
 8002fbe:	430b      	orrs	r3, r1
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002fc6:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d1 << 8);
 8002fca:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002fce:	2200      	movs	r2, #0
 8002fd0:	469a      	mov	sl, r3
 8002fd2:	4693      	mov	fp, r2
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002fe0:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002fe4:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002fe8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002fec:	ea40 0402 	orr.w	r4, r0, r2
 8002ff0:	60bc      	str	r4, [r7, #8]
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002ffa:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d0 << 0);
 8002ffe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003002:	2200      	movs	r2, #0
 8003004:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003006:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003008:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800300c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003010:	4621      	mov	r1, r4
 8003012:	4311      	orrs	r1, r2
 8003014:	6039      	str	r1, [r7, #0]
 8003016:	4629      	mov	r1, r5
 8003018:	4319      	orrs	r1, r3
 800301a:	6079      	str	r1, [r7, #4]
 800301c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003020:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

    clockReg.bottomDisplay = val;
 8003024:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003028:	633a      	str	r2, [r7, #48]	@ 0x30
 800302a:	b29b      	uxth	r3, r3
 800302c:	637b      	str	r3, [r7, #52]	@ 0x34
 800302e:	4b0a      	ldr	r3, [pc, #40]	@ (8003058 <ShowWindow+0x264>)
 8003030:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003034:	4602      	mov	r2, r0
 8003036:	f8c3 2012 	str.w	r2, [r3, #18]
 800303a:	460a      	mov	r2, r1
 800303c:	82da      	strh	r2, [r3, #22]
    UpdateAllDisplays(&clockReg);
 800303e:	4806      	ldr	r0, [pc, #24]	@ (8003058 <ShowWindow+0x264>)
 8003040:	f7fe f976 	bl	8001330 <UpdateAllDisplays>
}
 8003044:	bf00      	nop
 8003046:	376c      	adds	r7, #108	@ 0x6c
 8003048:	46bd      	mov	sp, r7
 800304a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800304e:	bf00      	nop
 8003050:	200006f8 	.word	0x200006f8
 8003054:	200006dc 	.word	0x200006dc
 8003058:	20000688 	.word	0x20000688

0800305c <SLIDER_Init>:

/** ---------------------------------------------------------------------------
 *  @brief Inicjuje wszystkie zmienne slidera w stan "spoczynku". */
void SLIDER_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
    isScrolling        = false;
 8003060:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <SLIDER_Init+0x48>)
 8003062:	2200      	movs	r2, #0
 8003064:	701a      	strb	r2, [r3, #0]
    scrollPhase        = SCROLL_PHASE_NONE;
 8003066:	4b10      	ldr	r3, [pc, #64]	@ (80030a8 <SLIDER_Init+0x4c>)
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
    currentDirection   = SCROLL_RIGHT_TO_LEFT;
 800306c:	4b0f      	ldr	r3, [pc, #60]	@ (80030ac <SLIDER_Init+0x50>)
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]
    windowIndex        = 0;
 8003072:	4b0f      	ldr	r3, [pc, #60]	@ (80030b0 <SLIDER_Init+0x54>)
 8003074:	2200      	movs	r2, #0
 8003076:	801a      	strh	r2, [r3, #0]
    scrollSpeedCounter = 0;
 8003078:	4b0e      	ldr	r3, [pc, #56]	@ (80030b4 <SLIDER_Init+0x58>)
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]

    doStayForever  = false;
 800307e:	4b0e      	ldr	r3, [pc, #56]	@ (80030b8 <SLIDER_Init+0x5c>)
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
    doPauseThenOut = false;
 8003084:	4b0d      	ldr	r3, [pc, #52]	@ (80030bc <SLIDER_Init+0x60>)
 8003086:	2200      	movs	r2, #0
 8003088:	701a      	strb	r2, [r3, #0]
    pauseCounter   = 0;
 800308a:	4b0d      	ldr	r3, [pc, #52]	@ (80030c0 <SLIDER_Init+0x64>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
    pauseTicks     = 0;
 8003090:	4b0c      	ldr	r3, [pc, #48]	@ (80030c4 <SLIDER_Init+0x68>)
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]

    memset(buffer, 0, sizeof(buffer));
 8003096:	2212      	movs	r2, #18
 8003098:	2100      	movs	r1, #0
 800309a:	480b      	ldr	r0, [pc, #44]	@ (80030c8 <SLIDER_Init+0x6c>)
 800309c:	f008 f95a 	bl	800b354 <memset>
}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	200006ee 	.word	0x200006ee
 80030a8:	200006ef 	.word	0x200006ef
 80030ac:	200006f0 	.word	0x200006f0
 80030b0:	200006f8 	.word	0x200006f8
 80030b4:	200006fa 	.word	0x200006fa
 80030b8:	200006fb 	.word	0x200006fb
 80030bc:	200006fc 	.word	0x200006fc
 80030c0:	20000700 	.word	0x20000700
 80030c4:	20000704 	.word	0x20000704
 80030c8:	200006dc 	.word	0x200006dc

080030cc <SLIDER_SetString>:
 *  @brief Proste przewinięcie (bez fazy IN i pauzy) – tylko OUT.
 *         Załóżmy, że "startowo" cały napis jest na ekranie
 *         i jedzie na zewnątrz.
 */
void SLIDER_SetString(const char* text, ScrollDirection dir, uint32_t pauseTime)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	460b      	mov	r3, r1
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	72fb      	strb	r3, [r7, #11]
	 if (!text) return;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01d      	beq.n	800311c <SLIDER_SetString+0x50>

	    PrepareBuffer18(text);
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff fe49 	bl	8002d78 <PrepareBuffer18>

	    currentDirection = dir;
 80030e6:	4a0f      	ldr	r2, [pc, #60]	@ (8003124 <SLIDER_SetString+0x58>)
 80030e8:	7afb      	ldrb	r3, [r7, #11]
 80030ea:	7013      	strb	r3, [r2, #0]
	    scrollPhase      = SCROLL_PHASE_PAUSE;  // Rozpoczynamy od pauzy
 80030ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003128 <SLIDER_SetString+0x5c>)
 80030ee:	2202      	movs	r2, #2
 80030f0:	701a      	strb	r2, [r3, #0]
	    isScrolling      = true;
 80030f2:	4b0e      	ldr	r3, [pc, #56]	@ (800312c <SLIDER_SetString+0x60>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]

	    doStayForever    = false;
 80030f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <SLIDER_SetString+0x64>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
	    doPauseThenOut   = true;
 80030fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <SLIDER_SetString+0x68>)
 8003100:	2201      	movs	r2, #1
 8003102:	701a      	strb	r2, [r3, #0]
	    pauseTicks       = pauseTime;
 8003104:	4a0c      	ldr	r2, [pc, #48]	@ (8003138 <SLIDER_SetString+0x6c>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6013      	str	r3, [r2, #0]
	    pauseCounter     = pauseTime;
 800310a:	4a0c      	ldr	r2, [pc, #48]	@ (800313c <SLIDER_SetString+0x70>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6013      	str	r3, [r2, #0]

	    // Ustawienie widocznego napisu od razu
	    windowIndex = 6;  // Miejsce, gdzie napis jest w pełni widoczny
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <SLIDER_SetString+0x74>)
 8003112:	2206      	movs	r2, #6
 8003114:	801a      	strh	r2, [r3, #0]
	    ShowWindow();
 8003116:	f7ff fe6d 	bl	8002df4 <ShowWindow>
 800311a:	e000      	b.n	800311e <SLIDER_SetString+0x52>
	 if (!text) return;
 800311c:	bf00      	nop
}
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	200006f0 	.word	0x200006f0
 8003128:	200006ef 	.word	0x200006ef
 800312c:	200006ee 	.word	0x200006ee
 8003130:	200006fb 	.word	0x200006fb
 8003134:	200006fc 	.word	0x200006fc
 8003138:	20000704 	.word	0x20000704
 800313c:	20000700 	.word	0x20000700
 8003140:	200006f8 	.word	0x200006f8

08003144 <SLIDER_Stop>:

/** ---------------------------------------------------------------------------
 *  @brief Zatrzymuje scrolling natychmiast.
 */
void SLIDER_Stop(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
    isScrolling = false;
 8003148:	4b0b      	ldr	r3, [pc, #44]	@ (8003178 <SLIDER_Stop+0x34>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
    scrollPhase = SCROLL_PHASE_NONE;
 800314e:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <SLIDER_Stop+0x38>)
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
    windowIndex = 0;
 8003154:	4b0a      	ldr	r3, [pc, #40]	@ (8003180 <SLIDER_Stop+0x3c>)
 8003156:	2200      	movs	r2, #0
 8003158:	801a      	strh	r2, [r3, #0]

    // Jeśli istnieje oczekujące żądanie wyświetlenia liczby, realizujemy je.
    if (displayNumberPending) {
 800315a:	4b0a      	ldr	r3, [pc, #40]	@ (8003184 <SLIDER_Stop+0x40>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <SLIDER_Stop+0x2e>
        // Wyświetlamy zapamiętaną liczbę
        SLIDER_DisplayNumber(pendingNumberToDisplay);
 8003162:	4b09      	ldr	r3, [pc, #36]	@ (8003188 <SLIDER_Stop+0x44>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f8f6 	bl	8003358 <SLIDER_DisplayNumber>
        // Resetujemy flagę, bo żądanie zostało obsłużone
        displayNumberPending = false;
 800316c:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <SLIDER_Stop+0x40>)
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
    }
}
 8003172:	bf00      	nop
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	200006ee 	.word	0x200006ee
 800317c:	200006ef 	.word	0x200006ef
 8003180:	200006f8 	.word	0x200006f8
 8003184:	200006f1 	.word	0x200006f1
 8003188:	200006f4 	.word	0x200006f4

0800318c <SLIDER_Update>:

/** ---------------------------------------------------------------------------
 *  @brief Główna funkcja wywoływana cyklicznie (np. co 10 ms w przerwaniu).
 */
void SLIDER_Update(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
    if (!isScrolling) return;
 8003190:	4b60      	ldr	r3, [pc, #384]	@ (8003314 <SLIDER_Update+0x188>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	f083 0301 	eor.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	f040 80b5 	bne.w	800330a <SLIDER_Update+0x17e>

    // Co scrollSpeedTicks odświeżamy
    if (scrollSpeedCounter < scrollSpeedTicks)
 80031a0:	4b5d      	ldr	r3, [pc, #372]	@ (8003318 <SLIDER_Update+0x18c>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2205      	movs	r2, #5
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d206      	bcs.n	80031b8 <SLIDER_Update+0x2c>
    {
        scrollSpeedCounter++;
 80031aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003318 <SLIDER_Update+0x18c>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	3301      	adds	r3, #1
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4b59      	ldr	r3, [pc, #356]	@ (8003318 <SLIDER_Update+0x18c>)
 80031b4:	701a      	strb	r2, [r3, #0]
        return;
 80031b6:	e0ab      	b.n	8003310 <SLIDER_Update+0x184>
    }
    scrollSpeedCounter = 0;
 80031b8:	4b57      	ldr	r3, [pc, #348]	@ (8003318 <SLIDER_Update+0x18c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]

    switch (scrollPhase)
 80031be:	4b57      	ldr	r3, [pc, #348]	@ (800331c <SLIDER_Update+0x190>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d075      	beq.n	80032b2 <SLIDER_Update+0x126>
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	f300 80a1 	bgt.w	800330e <SLIDER_Update+0x182>
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d002      	beq.n	80031d6 <SLIDER_Update+0x4a>
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d060      	beq.n	8003296 <SLIDER_Update+0x10a>
        break;
    }

    default:
        // SCROLL_PHASE_NONE => nic
        return;
 80031d4:	e09b      	b.n	800330e <SLIDER_Update+0x182>
        if (currentDirection == SCROLL_RIGHT_TO_LEFT)
 80031d6:	4b52      	ldr	r3, [pc, #328]	@ (8003320 <SLIDER_Update+0x194>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d12d      	bne.n	800323a <SLIDER_Update+0xae>
            windowIndex--;
 80031de:	4b51      	ldr	r3, [pc, #324]	@ (8003324 <SLIDER_Update+0x198>)
 80031e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	b21a      	sxth	r2, r3
 80031ec:	4b4d      	ldr	r3, [pc, #308]	@ (8003324 <SLIDER_Update+0x198>)
 80031ee:	801a      	strh	r2, [r3, #0]
            if (windowIndex == 6)
 80031f0:	4b4c      	ldr	r3, [pc, #304]	@ (8003324 <SLIDER_Update+0x198>)
 80031f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031f6:	2b06      	cmp	r3, #6
 80031f8:	f040 8081 	bne.w	80032fe <SLIDER_Update+0x172>
                if (doStayForever)
 80031fc:	4b4a      	ldr	r3, [pc, #296]	@ (8003328 <SLIDER_Update+0x19c>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d006      	beq.n	8003212 <SLIDER_Update+0x86>
                    isScrolling = false;
 8003204:	4b43      	ldr	r3, [pc, #268]	@ (8003314 <SLIDER_Update+0x188>)
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
                    scrollPhase = SCROLL_PHASE_NONE;
 800320a:	4b44      	ldr	r3, [pc, #272]	@ (800331c <SLIDER_Update+0x190>)
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
        break;
 8003210:	e075      	b.n	80032fe <SLIDER_Update+0x172>
                else if (doPauseThenOut && pauseTicks > 0)
 8003212:	4b46      	ldr	r3, [pc, #280]	@ (800332c <SLIDER_Update+0x1a0>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <SLIDER_Update+0xa6>
 800321a:	4b45      	ldr	r3, [pc, #276]	@ (8003330 <SLIDER_Update+0x1a4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d007      	beq.n	8003232 <SLIDER_Update+0xa6>
                    scrollPhase = SCROLL_PHASE_PAUSE;
 8003222:	4b3e      	ldr	r3, [pc, #248]	@ (800331c <SLIDER_Update+0x190>)
 8003224:	2202      	movs	r2, #2
 8003226:	701a      	strb	r2, [r3, #0]
                    pauseCounter = pauseTicks;
 8003228:	4b41      	ldr	r3, [pc, #260]	@ (8003330 <SLIDER_Update+0x1a4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a41      	ldr	r2, [pc, #260]	@ (8003334 <SLIDER_Update+0x1a8>)
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e030      	b.n	8003294 <SLIDER_Update+0x108>
                    scrollPhase = SCROLL_PHASE_OUT;
 8003232:	4b3a      	ldr	r3, [pc, #232]	@ (800331c <SLIDER_Update+0x190>)
 8003234:	2203      	movs	r2, #3
 8003236:	701a      	strb	r2, [r3, #0]
        break;
 8003238:	e061      	b.n	80032fe <SLIDER_Update+0x172>
            windowIndex++;
 800323a:	4b3a      	ldr	r3, [pc, #232]	@ (8003324 <SLIDER_Update+0x198>)
 800323c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003240:	b29b      	uxth	r3, r3
 8003242:	3301      	adds	r3, #1
 8003244:	b29b      	uxth	r3, r3
 8003246:	b21a      	sxth	r2, r3
 8003248:	4b36      	ldr	r3, [pc, #216]	@ (8003324 <SLIDER_Update+0x198>)
 800324a:	801a      	strh	r2, [r3, #0]
            if (windowIndex == 6)
 800324c:	4b35      	ldr	r3, [pc, #212]	@ (8003324 <SLIDER_Update+0x198>)
 800324e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003252:	2b06      	cmp	r3, #6
 8003254:	d153      	bne.n	80032fe <SLIDER_Update+0x172>
                if (doStayForever)
 8003256:	4b34      	ldr	r3, [pc, #208]	@ (8003328 <SLIDER_Update+0x19c>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d006      	beq.n	800326c <SLIDER_Update+0xe0>
                    isScrolling = false;
 800325e:	4b2d      	ldr	r3, [pc, #180]	@ (8003314 <SLIDER_Update+0x188>)
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
                    scrollPhase = SCROLL_PHASE_NONE;
 8003264:	4b2d      	ldr	r3, [pc, #180]	@ (800331c <SLIDER_Update+0x190>)
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
        break;
 800326a:	e048      	b.n	80032fe <SLIDER_Update+0x172>
                else if (doPauseThenOut && pauseTicks > 0)
 800326c:	4b2f      	ldr	r3, [pc, #188]	@ (800332c <SLIDER_Update+0x1a0>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00b      	beq.n	800328c <SLIDER_Update+0x100>
 8003274:	4b2e      	ldr	r3, [pc, #184]	@ (8003330 <SLIDER_Update+0x1a4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d007      	beq.n	800328c <SLIDER_Update+0x100>
                    scrollPhase = SCROLL_PHASE_PAUSE;
 800327c:	4b27      	ldr	r3, [pc, #156]	@ (800331c <SLIDER_Update+0x190>)
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]
                    pauseCounter = pauseTicks;
 8003282:	4b2b      	ldr	r3, [pc, #172]	@ (8003330 <SLIDER_Update+0x1a4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a2b      	ldr	r2, [pc, #172]	@ (8003334 <SLIDER_Update+0x1a8>)
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e003      	b.n	8003294 <SLIDER_Update+0x108>
                    scrollPhase = SCROLL_PHASE_OUT;
 800328c:	4b23      	ldr	r3, [pc, #140]	@ (800331c <SLIDER_Update+0x190>)
 800328e:	2203      	movs	r2, #3
 8003290:	701a      	strb	r2, [r3, #0]
        break;
 8003292:	e034      	b.n	80032fe <SLIDER_Update+0x172>
 8003294:	e033      	b.n	80032fe <SLIDER_Update+0x172>
        if (pauseCounter > 0)
 8003296:	4b27      	ldr	r3, [pc, #156]	@ (8003334 <SLIDER_Update+0x1a8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <SLIDER_Update+0x11e>
            pauseCounter--;
 800329e:	4b25      	ldr	r3, [pc, #148]	@ (8003334 <SLIDER_Update+0x1a8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	4a23      	ldr	r2, [pc, #140]	@ (8003334 <SLIDER_Update+0x1a8>)
 80032a6:	6013      	str	r3, [r2, #0]
        break;
 80032a8:	e02c      	b.n	8003304 <SLIDER_Update+0x178>
            scrollPhase = SCROLL_PHASE_OUT;
 80032aa:	4b1c      	ldr	r3, [pc, #112]	@ (800331c <SLIDER_Update+0x190>)
 80032ac:	2203      	movs	r2, #3
 80032ae:	701a      	strb	r2, [r3, #0]
        break;
 80032b0:	e028      	b.n	8003304 <SLIDER_Update+0x178>
        if (currentDirection == SCROLL_RIGHT_TO_LEFT)
 80032b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003320 <SLIDER_Update+0x194>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d110      	bne.n	80032dc <SLIDER_Update+0x150>
            windowIndex--;
 80032ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003324 <SLIDER_Update+0x198>)
 80032bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	b21a      	sxth	r2, r3
 80032c8:	4b16      	ldr	r3, [pc, #88]	@ (8003324 <SLIDER_Update+0x198>)
 80032ca:	801a      	strh	r2, [r3, #0]
            if (windowIndex < 0)
 80032cc:	4b15      	ldr	r3, [pc, #84]	@ (8003324 <SLIDER_Update+0x198>)
 80032ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	da15      	bge.n	8003302 <SLIDER_Update+0x176>
                SLIDER_Stop();
 80032d6:	f7ff ff35 	bl	8003144 <SLIDER_Stop>
        break;
 80032da:	e012      	b.n	8003302 <SLIDER_Update+0x176>
            windowIndex++;
 80032dc:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <SLIDER_Update+0x198>)
 80032de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3301      	adds	r3, #1
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	b21a      	sxth	r2, r3
 80032ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003324 <SLIDER_Update+0x198>)
 80032ec:	801a      	strh	r2, [r3, #0]
            if (windowIndex > 12)
 80032ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003324 <SLIDER_Update+0x198>)
 80032f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032f4:	2b0c      	cmp	r3, #12
 80032f6:	dd04      	ble.n	8003302 <SLIDER_Update+0x176>
                SLIDER_Stop();
 80032f8:	f7ff ff24 	bl	8003144 <SLIDER_Stop>
        break;
 80032fc:	e001      	b.n	8003302 <SLIDER_Update+0x176>
        break;
 80032fe:	bf00      	nop
 8003300:	e000      	b.n	8003304 <SLIDER_Update+0x178>
        break;
 8003302:	bf00      	nop
    }

    // Po zmianie windowIndex – odśwież wyświetlacz
    ShowWindow();
 8003304:	f7ff fd76 	bl	8002df4 <ShowWindow>
 8003308:	e002      	b.n	8003310 <SLIDER_Update+0x184>
    if (!isScrolling) return;
 800330a:	bf00      	nop
 800330c:	e000      	b.n	8003310 <SLIDER_Update+0x184>
        return;
 800330e:	bf00      	nop
}
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	200006ee 	.word	0x200006ee
 8003318:	200006fa 	.word	0x200006fa
 800331c:	200006ef 	.word	0x200006ef
 8003320:	200006f0 	.word	0x200006f0
 8003324:	200006f8 	.word	0x200006f8
 8003328:	200006fb 	.word	0x200006fb
 800332c:	200006fc 	.word	0x200006fc
 8003330:	20000704 	.word	0x20000704
 8003334:	20000700 	.word	0x20000700

08003338 <SLIDER_IsStopped>:
bool SLIDER_IsStopped(void) {
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
    return (scrollPhase == SCROLL_PHASE_NONE);
 800333c:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <SLIDER_IsStopped+0x1c>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf0c      	ite	eq
 8003344:	2301      	moveq	r3, #1
 8003346:	2300      	movne	r3, #0
 8003348:	b2db      	uxtb	r3, r3
}
 800334a:	4618      	mov	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	200006ef 	.word	0x200006ef

08003358 <SLIDER_DisplayNumber>:



void SLIDER_DisplayNumber(uint32_t number)
{
 8003358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800335c:	b09f      	sub	sp, #124	@ 0x7c
 800335e:	af00      	add	r7, sp, #0
 8003360:	65f8      	str	r0, [r7, #92]	@ 0x5c
    // Jeżeli slider nie jest zatrzymany, zapamiętaj żądanie i wyjdź
    if (!SLIDER_IsStopped()) {
 8003362:	f7ff ffe9 	bl	8003338 <SLIDER_IsStopped>
 8003366:	4603      	mov	r3, r0
 8003368:	f083 0301 	eor.w	r3, r3, #1
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <SLIDER_DisplayNumber+0x30>
        displayNumberPending = true;
 8003372:	4b7b      	ldr	r3, [pc, #492]	@ (8003560 <SLIDER_DisplayNumber+0x208>)
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
        pendingNumberToDisplay = (number > 999999) ? 999999 : number;
 8003378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800337a:	4a7a      	ldr	r2, [pc, #488]	@ (8003564 <SLIDER_DisplayNumber+0x20c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	bf28      	it	cs
 8003380:	4613      	movcs	r3, r2
 8003382:	4a79      	ldr	r2, [pc, #484]	@ (8003568 <SLIDER_DisplayNumber+0x210>)
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e0e7      	b.n	8003558 <SLIDER_DisplayNumber+0x200>
    }

    // Slider jest zatrzymany – wyświetlamy liczbę od razu

    // Ograniczamy liczbę do maksimum 999999
    if (number > 999999)
 8003388:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800338a:	4b76      	ldr	r3, [pc, #472]	@ (8003564 <SLIDER_DisplayNumber+0x20c>)
 800338c:	429a      	cmp	r2, r3
 800338e:	d901      	bls.n	8003394 <SLIDER_DisplayNumber+0x3c>
        number = 999999;
 8003390:	4b74      	ldr	r3, [pc, #464]	@ (8003564 <SLIDER_DisplayNumber+0x20c>)
 8003392:	65fb      	str	r3, [r7, #92]	@ 0x5c

    uint8_t digits[6];

    // Inicjujemy wszystkie cyfry jako puste (segment odpowiadający spacji)
    for (int i = 0; i < 6; i++) {
 8003394:	2300      	movs	r3, #0
 8003396:	677b      	str	r3, [r7, #116]	@ 0x74
 8003398:	e00d      	b.n	80033b6 <SLIDER_DisplayNumber+0x5e>
        digits[i] = charToSegment(' ');
 800339a:	2020      	movs	r0, #32
 800339c:	f7fd fb04 	bl	80009a8 <charToSegment>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4619      	mov	r1, r3
 80033a4:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80033a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033aa:	441a      	add	r2, r3
 80033ac:	460b      	mov	r3, r1
 80033ae:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < 6; i++) {
 80033b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033b2:	3301      	adds	r3, #1
 80033b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80033b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	ddee      	ble.n	800339a <SLIDER_DisplayNumber+0x42>
    }

    // Zamieniamy liczbę na cyfry od końca
    for (int i = 5; i >= 0; i--) {
 80033bc:	2305      	movs	r3, #5
 80033be:	673b      	str	r3, [r7, #112]	@ 0x70
 80033c0:	e020      	b.n	8003404 <SLIDER_DisplayNumber+0xac>
        digits[i] = charToSegment('0' + (number % 10));
 80033c2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80033c4:	4b69      	ldr	r3, [pc, #420]	@ (800356c <SLIDER_DisplayNumber+0x214>)
 80033c6:	fba3 2301 	umull	r2, r3, r3, r1
 80033ca:	08da      	lsrs	r2, r3, #3
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	1aca      	subs	r2, r1, r3
 80033d6:	b2d3      	uxtb	r3, r2
 80033d8:	3330      	adds	r3, #48	@ 0x30
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fd fae3 	bl	80009a8 <charToSegment>
 80033e2:	4603      	mov	r3, r0
 80033e4:	4619      	mov	r1, r3
 80033e6:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80033ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033ec:	441a      	add	r2, r3
 80033ee:	460b      	mov	r3, r1
 80033f0:	7013      	strb	r3, [r2, #0]
        number /= 10;
 80033f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80033f4:	4b5d      	ldr	r3, [pc, #372]	@ (800356c <SLIDER_DisplayNumber+0x214>)
 80033f6:	fba3 2302 	umull	r2, r3, r3, r2
 80033fa:	08db      	lsrs	r3, r3, #3
 80033fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    for (int i = 5; i >= 0; i--) {
 80033fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003400:	3b01      	subs	r3, #1
 8003402:	673b      	str	r3, [r7, #112]	@ 0x70
 8003404:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003406:	2b00      	cmp	r3, #0
 8003408:	dadb      	bge.n	80033c2 <SLIDER_DisplayNumber+0x6a>
    }

    // Składamy 6 cyfr do 48-bitowej wartości
    uint64_t displayVal = 0ULL;
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[5] << 40);
 8003416:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2200      	movs	r2, #0
 800341e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003420:	657a      	str	r2, [r7, #84]	@ 0x54
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800342c:	0219      	lsls	r1, r3, #8
 800342e:	2000      	movs	r0, #0
 8003430:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003434:	ea42 0600 	orr.w	r6, r2, r0
 8003438:	62be      	str	r6, [r7, #40]	@ 0x28
 800343a:	430b      	orrs	r3, r1
 800343c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800343e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003442:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[4] << 32);
 8003446:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2200      	movs	r2, #0
 800344e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003450:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003452:	f04f 0000 	mov.w	r0, #0
 8003456:	f04f 0100 	mov.w	r1, #0
 800345a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800345c:	0019      	movs	r1, r3
 800345e:	2000      	movs	r0, #0
 8003460:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003464:	ea42 0600 	orr.w	r6, r2, r0
 8003468:	623e      	str	r6, [r7, #32]
 800346a:	430b      	orrs	r3, r1
 800346c:	627b      	str	r3, [r7, #36]	@ 0x24
 800346e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003472:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[3] << 24);
 8003476:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2200      	movs	r2, #0
 800347e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003480:	647a      	str	r2, [r7, #68]	@ 0x44
 8003482:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003486:	460b      	mov	r3, r1
 8003488:	0a1d      	lsrs	r5, r3, #8
 800348a:	460b      	mov	r3, r1
 800348c:	061c      	lsls	r4, r3, #24
 800348e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003492:	ea42 0104 	orr.w	r1, r2, r4
 8003496:	61b9      	str	r1, [r7, #24]
 8003498:	432b      	orrs	r3, r5
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80034a0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[2] << 16);
 80034a4:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2200      	movs	r2, #0
 80034ac:	4698      	mov	r8, r3
 80034ae:	4691      	mov	r9, r2
 80034b0:	f04f 0000 	mov.w	r0, #0
 80034b4:	f04f 0100 	mov.w	r1, #0
 80034b8:	ea4f 4109 	mov.w	r1, r9, lsl #16
 80034bc:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 80034c0:	ea4f 4008 	mov.w	r0, r8, lsl #16
 80034c4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80034c8:	ea42 0400 	orr.w	r4, r2, r0
 80034cc:	613c      	str	r4, [r7, #16]
 80034ce:	430b      	orrs	r3, r1
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80034d6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[1] << 8);
 80034da:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2200      	movs	r2, #0
 80034e2:	469a      	mov	sl, r3
 80034e4:	4693      	mov	fp, r2
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80034f2:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80034f6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80034fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80034fe:	ea40 0402 	orr.w	r4, r0, r2
 8003502:	60bc      	str	r4, [r7, #8]
 8003504:	430b      	orrs	r3, r1
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800350c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[0] << 0);
 8003510:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2200      	movs	r2, #0
 8003518:	63bb      	str	r3, [r7, #56]	@ 0x38
 800351a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800351c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003520:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003524:	4621      	mov	r1, r4
 8003526:	4311      	orrs	r1, r2
 8003528:	6039      	str	r1, [r7, #0]
 800352a:	4629      	mov	r1, r5
 800352c:	4319      	orrs	r1, r3
 800352e:	6079      	str	r1, [r7, #4]
 8003530:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003534:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68





    clockReg.bottomDisplay = displayVal;
 8003538:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800353c:	633a      	str	r2, [r7, #48]	@ 0x30
 800353e:	b29b      	uxth	r3, r3
 8003540:	637b      	str	r3, [r7, #52]	@ 0x34
 8003542:	4b0b      	ldr	r3, [pc, #44]	@ (8003570 <SLIDER_DisplayNumber+0x218>)
 8003544:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003548:	4602      	mov	r2, r0
 800354a:	f8c3 2012 	str.w	r2, [r3, #18]
 800354e:	460a      	mov	r2, r1
 8003550:	82da      	strh	r2, [r3, #22]
    UpdateAllDisplays(&clockReg);
 8003552:	4807      	ldr	r0, [pc, #28]	@ (8003570 <SLIDER_DisplayNumber+0x218>)
 8003554:	f7fd feec 	bl	8001330 <UpdateAllDisplays>
}
 8003558:	377c      	adds	r7, #124	@ 0x7c
 800355a:	46bd      	mov	sp, r7
 800355c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003560:	200006f1 	.word	0x200006f1
 8003564:	000f423f 	.word	0x000f423f
 8003568:	200006f4 	.word	0x200006f4
 800356c:	cccccccd 	.word	0xcccccccd
 8003570:	20000688 	.word	0x20000688

08003574 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003578:	4b17      	ldr	r3, [pc, #92]	@ (80035d8 <MX_SPI1_Init+0x64>)
 800357a:	4a18      	ldr	r2, [pc, #96]	@ (80035dc <MX_SPI1_Init+0x68>)
 800357c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800357e:	4b16      	ldr	r3, [pc, #88]	@ (80035d8 <MX_SPI1_Init+0x64>)
 8003580:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003584:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003586:	4b14      	ldr	r3, [pc, #80]	@ (80035d8 <MX_SPI1_Init+0x64>)
 8003588:	2200      	movs	r2, #0
 800358a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800358c:	4b12      	ldr	r3, [pc, #72]	@ (80035d8 <MX_SPI1_Init+0x64>)
 800358e:	2200      	movs	r2, #0
 8003590:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003592:	4b11      	ldr	r3, [pc, #68]	@ (80035d8 <MX_SPI1_Init+0x64>)
 8003594:	2200      	movs	r2, #0
 8003596:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003598:	4b0f      	ldr	r3, [pc, #60]	@ (80035d8 <MX_SPI1_Init+0x64>)
 800359a:	2200      	movs	r2, #0
 800359c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800359e:	4b0e      	ldr	r3, [pc, #56]	@ (80035d8 <MX_SPI1_Init+0x64>)
 80035a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80035a6:	4b0c      	ldr	r3, [pc, #48]	@ (80035d8 <MX_SPI1_Init+0x64>)
 80035a8:	2220      	movs	r2, #32
 80035aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035ac:	4b0a      	ldr	r3, [pc, #40]	@ (80035d8 <MX_SPI1_Init+0x64>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035b2:	4b09      	ldr	r3, [pc, #36]	@ (80035d8 <MX_SPI1_Init+0x64>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035b8:	4b07      	ldr	r3, [pc, #28]	@ (80035d8 <MX_SPI1_Init+0x64>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80035be:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <MX_SPI1_Init+0x64>)
 80035c0:	220a      	movs	r2, #10
 80035c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035c4:	4804      	ldr	r0, [pc, #16]	@ (80035d8 <MX_SPI1_Init+0x64>)
 80035c6:	f005 fc83 	bl	8008ed0 <HAL_SPI_Init>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80035d0:	f7ff f86b 	bl	80026aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035d4:	bf00      	nop
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000708 	.word	0x20000708
 80035dc:	40013000 	.word	0x40013000

080035e0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80035e4:	4b17      	ldr	r3, [pc, #92]	@ (8003644 <MX_SPI2_Init+0x64>)
 80035e6:	4a18      	ldr	r2, [pc, #96]	@ (8003648 <MX_SPI2_Init+0x68>)
 80035e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80035ea:	4b16      	ldr	r3, [pc, #88]	@ (8003644 <MX_SPI2_Init+0x64>)
 80035ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80035f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80035f2:	4b14      	ldr	r3, [pc, #80]	@ (8003644 <MX_SPI2_Init+0x64>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80035f8:	4b12      	ldr	r3, [pc, #72]	@ (8003644 <MX_SPI2_Init+0x64>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035fe:	4b11      	ldr	r3, [pc, #68]	@ (8003644 <MX_SPI2_Init+0x64>)
 8003600:	2200      	movs	r2, #0
 8003602:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003604:	4b0f      	ldr	r3, [pc, #60]	@ (8003644 <MX_SPI2_Init+0x64>)
 8003606:	2200      	movs	r2, #0
 8003608:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800360a:	4b0e      	ldr	r3, [pc, #56]	@ (8003644 <MX_SPI2_Init+0x64>)
 800360c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003610:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003612:	4b0c      	ldr	r3, [pc, #48]	@ (8003644 <MX_SPI2_Init+0x64>)
 8003614:	2208      	movs	r2, #8
 8003616:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003618:	4b0a      	ldr	r3, [pc, #40]	@ (8003644 <MX_SPI2_Init+0x64>)
 800361a:	2200      	movs	r2, #0
 800361c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800361e:	4b09      	ldr	r3, [pc, #36]	@ (8003644 <MX_SPI2_Init+0x64>)
 8003620:	2200      	movs	r2, #0
 8003622:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003624:	4b07      	ldr	r3, [pc, #28]	@ (8003644 <MX_SPI2_Init+0x64>)
 8003626:	2200      	movs	r2, #0
 8003628:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800362a:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <MX_SPI2_Init+0x64>)
 800362c:	220a      	movs	r2, #10
 800362e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003630:	4804      	ldr	r0, [pc, #16]	@ (8003644 <MX_SPI2_Init+0x64>)
 8003632:	f005 fc4d 	bl	8008ed0 <HAL_SPI_Init>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800363c:	f7ff f835 	bl	80026aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003640:	bf00      	nop
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000760 	.word	0x20000760
 8003648:	40003800 	.word	0x40003800

0800364c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08c      	sub	sp, #48	@ 0x30
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003654:	f107 031c 	add.w	r3, r7, #28
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a7f      	ldr	r2, [pc, #508]	@ (8003868 <HAL_SPI_MspInit+0x21c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d162      	bne.n	8003734 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	4b7e      	ldr	r3, [pc, #504]	@ (800386c <HAL_SPI_MspInit+0x220>)
 8003674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003676:	4a7d      	ldr	r2, [pc, #500]	@ (800386c <HAL_SPI_MspInit+0x220>)
 8003678:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800367c:	6453      	str	r3, [r2, #68]	@ 0x44
 800367e:	4b7b      	ldr	r3, [pc, #492]	@ (800386c <HAL_SPI_MspInit+0x220>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003682:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003686:	61bb      	str	r3, [r7, #24]
 8003688:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	4b77      	ldr	r3, [pc, #476]	@ (800386c <HAL_SPI_MspInit+0x220>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003692:	4a76      	ldr	r2, [pc, #472]	@ (800386c <HAL_SPI_MspInit+0x220>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6313      	str	r3, [r2, #48]	@ 0x30
 800369a:	4b74      	ldr	r3, [pc, #464]	@ (800386c <HAL_SPI_MspInit+0x220>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80036a6:	23a0      	movs	r3, #160	@ 0xa0
 80036a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	2302      	movs	r3, #2
 80036ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b2:	2303      	movs	r3, #3
 80036b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036b6:	2305      	movs	r3, #5
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ba:	f107 031c 	add.w	r3, r7, #28
 80036be:	4619      	mov	r1, r3
 80036c0:	486b      	ldr	r0, [pc, #428]	@ (8003870 <HAL_SPI_MspInit+0x224>)
 80036c2:	f001 fd0d 	bl	80050e0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80036c6:	4b6b      	ldr	r3, [pc, #428]	@ (8003874 <HAL_SPI_MspInit+0x228>)
 80036c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003878 <HAL_SPI_MspInit+0x22c>)
 80036ca:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80036cc:	4b69      	ldr	r3, [pc, #420]	@ (8003874 <HAL_SPI_MspInit+0x228>)
 80036ce:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80036d2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036d4:	4b67      	ldr	r3, [pc, #412]	@ (8003874 <HAL_SPI_MspInit+0x228>)
 80036d6:	2240      	movs	r2, #64	@ 0x40
 80036d8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036da:	4b66      	ldr	r3, [pc, #408]	@ (8003874 <HAL_SPI_MspInit+0x228>)
 80036dc:	2200      	movs	r2, #0
 80036de:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036e0:	4b64      	ldr	r3, [pc, #400]	@ (8003874 <HAL_SPI_MspInit+0x228>)
 80036e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036e6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036e8:	4b62      	ldr	r3, [pc, #392]	@ (8003874 <HAL_SPI_MspInit+0x228>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036ee:	4b61      	ldr	r3, [pc, #388]	@ (8003874 <HAL_SPI_MspInit+0x228>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80036f4:	4b5f      	ldr	r3, [pc, #380]	@ (8003874 <HAL_SPI_MspInit+0x228>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036fa:	4b5e      	ldr	r3, [pc, #376]	@ (8003874 <HAL_SPI_MspInit+0x228>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003700:	4b5c      	ldr	r3, [pc, #368]	@ (8003874 <HAL_SPI_MspInit+0x228>)
 8003702:	2200      	movs	r2, #0
 8003704:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003706:	485b      	ldr	r0, [pc, #364]	@ (8003874 <HAL_SPI_MspInit+0x228>)
 8003708:	f001 f93e 	bl	8004988 <HAL_DMA_Init>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8003712:	f7fe ffca 	bl	80026aa <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a56      	ldr	r2, [pc, #344]	@ (8003874 <HAL_SPI_MspInit+0x228>)
 800371a:	649a      	str	r2, [r3, #72]	@ 0x48
 800371c:	4a55      	ldr	r2, [pc, #340]	@ (8003874 <HAL_SPI_MspInit+0x228>)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	2100      	movs	r1, #0
 8003726:	2023      	movs	r0, #35	@ 0x23
 8003728:	f001 f8f7 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800372c:	2023      	movs	r0, #35	@ 0x23
 800372e:	f001 f910 	bl	8004952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003732:	e094      	b.n	800385e <HAL_SPI_MspInit+0x212>
  else if(spiHandle->Instance==SPI2)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a50      	ldr	r2, [pc, #320]	@ (800387c <HAL_SPI_MspInit+0x230>)
 800373a:	4293      	cmp	r3, r2
 800373c:	f040 808f 	bne.w	800385e <HAL_SPI_MspInit+0x212>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003740:	2300      	movs	r3, #0
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	4b49      	ldr	r3, [pc, #292]	@ (800386c <HAL_SPI_MspInit+0x220>)
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	4a48      	ldr	r2, [pc, #288]	@ (800386c <HAL_SPI_MspInit+0x220>)
 800374a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800374e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003750:	4b46      	ldr	r3, [pc, #280]	@ (800386c <HAL_SPI_MspInit+0x220>)
 8003752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	4b42      	ldr	r3, [pc, #264]	@ (800386c <HAL_SPI_MspInit+0x220>)
 8003762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003764:	4a41      	ldr	r2, [pc, #260]	@ (800386c <HAL_SPI_MspInit+0x220>)
 8003766:	f043 0302 	orr.w	r3, r3, #2
 800376a:	6313      	str	r3, [r2, #48]	@ 0x30
 800376c:	4b3f      	ldr	r3, [pc, #252]	@ (800386c <HAL_SPI_MspInit+0x220>)
 800376e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003778:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800377c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377e:	2302      	movs	r3, #2
 8003780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	2300      	movs	r3, #0
 8003784:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003786:	2303      	movs	r3, #3
 8003788:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800378a:	2305      	movs	r3, #5
 800378c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378e:	f107 031c 	add.w	r3, r7, #28
 8003792:	4619      	mov	r1, r3
 8003794:	483a      	ldr	r0, [pc, #232]	@ (8003880 <HAL_SPI_MspInit+0x234>)
 8003796:	f001 fca3 	bl	80050e0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800379a:	4b3a      	ldr	r3, [pc, #232]	@ (8003884 <HAL_SPI_MspInit+0x238>)
 800379c:	4a3a      	ldr	r2, [pc, #232]	@ (8003888 <HAL_SPI_MspInit+0x23c>)
 800379e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80037a0:	4b38      	ldr	r3, [pc, #224]	@ (8003884 <HAL_SPI_MspInit+0x238>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037a6:	4b37      	ldr	r3, [pc, #220]	@ (8003884 <HAL_SPI_MspInit+0x238>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037ac:	4b35      	ldr	r3, [pc, #212]	@ (8003884 <HAL_SPI_MspInit+0x238>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037b2:	4b34      	ldr	r3, [pc, #208]	@ (8003884 <HAL_SPI_MspInit+0x238>)
 80037b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037b8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037ba:	4b32      	ldr	r3, [pc, #200]	@ (8003884 <HAL_SPI_MspInit+0x238>)
 80037bc:	2200      	movs	r2, #0
 80037be:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037c0:	4b30      	ldr	r3, [pc, #192]	@ (8003884 <HAL_SPI_MspInit+0x238>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80037c6:	4b2f      	ldr	r3, [pc, #188]	@ (8003884 <HAL_SPI_MspInit+0x238>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003884 <HAL_SPI_MspInit+0x238>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003884 <HAL_SPI_MspInit+0x238>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80037d8:	482a      	ldr	r0, [pc, #168]	@ (8003884 <HAL_SPI_MspInit+0x238>)
 80037da:	f001 f8d5 	bl	8004988 <HAL_DMA_Init>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_SPI_MspInit+0x19c>
      Error_Handler();
 80037e4:	f7fe ff61 	bl	80026aa <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a26      	ldr	r2, [pc, #152]	@ (8003884 <HAL_SPI_MspInit+0x238>)
 80037ec:	64da      	str	r2, [r3, #76]	@ 0x4c
 80037ee:	4a25      	ldr	r2, [pc, #148]	@ (8003884 <HAL_SPI_MspInit+0x238>)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80037f4:	4b25      	ldr	r3, [pc, #148]	@ (800388c <HAL_SPI_MspInit+0x240>)
 80037f6:	4a26      	ldr	r2, [pc, #152]	@ (8003890 <HAL_SPI_MspInit+0x244>)
 80037f8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80037fa:	4b24      	ldr	r3, [pc, #144]	@ (800388c <HAL_SPI_MspInit+0x240>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003800:	4b22      	ldr	r3, [pc, #136]	@ (800388c <HAL_SPI_MspInit+0x240>)
 8003802:	2240      	movs	r2, #64	@ 0x40
 8003804:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003806:	4b21      	ldr	r3, [pc, #132]	@ (800388c <HAL_SPI_MspInit+0x240>)
 8003808:	2200      	movs	r2, #0
 800380a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800380c:	4b1f      	ldr	r3, [pc, #124]	@ (800388c <HAL_SPI_MspInit+0x240>)
 800380e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003812:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003814:	4b1d      	ldr	r3, [pc, #116]	@ (800388c <HAL_SPI_MspInit+0x240>)
 8003816:	2200      	movs	r2, #0
 8003818:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800381a:	4b1c      	ldr	r3, [pc, #112]	@ (800388c <HAL_SPI_MspInit+0x240>)
 800381c:	2200      	movs	r2, #0
 800381e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003820:	4b1a      	ldr	r3, [pc, #104]	@ (800388c <HAL_SPI_MspInit+0x240>)
 8003822:	2200      	movs	r2, #0
 8003824:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003826:	4b19      	ldr	r3, [pc, #100]	@ (800388c <HAL_SPI_MspInit+0x240>)
 8003828:	2200      	movs	r2, #0
 800382a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800382c:	4b17      	ldr	r3, [pc, #92]	@ (800388c <HAL_SPI_MspInit+0x240>)
 800382e:	2200      	movs	r2, #0
 8003830:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003832:	4816      	ldr	r0, [pc, #88]	@ (800388c <HAL_SPI_MspInit+0x240>)
 8003834:	f001 f8a8 	bl	8004988 <HAL_DMA_Init>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_SPI_MspInit+0x1f6>
      Error_Handler();
 800383e:	f7fe ff34 	bl	80026aa <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a11      	ldr	r2, [pc, #68]	@ (800388c <HAL_SPI_MspInit+0x240>)
 8003846:	649a      	str	r2, [r3, #72]	@ 0x48
 8003848:	4a10      	ldr	r2, [pc, #64]	@ (800388c <HAL_SPI_MspInit+0x240>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800384e:	2200      	movs	r2, #0
 8003850:	2100      	movs	r1, #0
 8003852:	2024      	movs	r0, #36	@ 0x24
 8003854:	f001 f861 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003858:	2024      	movs	r0, #36	@ 0x24
 800385a:	f001 f87a 	bl	8004952 <HAL_NVIC_EnableIRQ>
}
 800385e:	bf00      	nop
 8003860:	3730      	adds	r7, #48	@ 0x30
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40013000 	.word	0x40013000
 800386c:	40023800 	.word	0x40023800
 8003870:	40020000 	.word	0x40020000
 8003874:	200007b8 	.word	0x200007b8
 8003878:	40026458 	.word	0x40026458
 800387c:	40003800 	.word	0x40003800
 8003880:	40020400 	.word	0x40020400
 8003884:	20000818 	.word	0x20000818
 8003888:	40026058 	.word	0x40026058
 800388c:	20000878 	.word	0x20000878
 8003890:	40026070 	.word	0x40026070

08003894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a2:	4a0f      	ldr	r2, [pc, #60]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038aa:	4b0d      	ldr	r3, [pc, #52]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038b2:	607b      	str	r3, [r7, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	4b09      	ldr	r3, [pc, #36]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	4a08      	ldr	r2, [pc, #32]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038c6:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800

080038e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <NMI_Handler+0x4>

080038ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038f0:	bf00      	nop
 80038f2:	e7fd      	b.n	80038f0 <HardFault_Handler+0x4>

080038f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038f8:	bf00      	nop
 80038fa:	e7fd      	b.n	80038f8 <MemManage_Handler+0x4>

080038fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003900:	bf00      	nop
 8003902:	e7fd      	b.n	8003900 <BusFault_Handler+0x4>

08003904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003908:	bf00      	nop
 800390a:	e7fd      	b.n	8003908 <UsageFault_Handler+0x4>

0800390c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800391a:	b480      	push	{r7}
 800391c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800391e:	bf00      	nop
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800393a:	f000 fbb9 	bl	80040b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8003948:	4802      	ldr	r0, [pc, #8]	@ (8003954 <DMA1_Stream2_IRQHandler+0x10>)
 800394a:	f001 f945 	bl	8004bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200005a8 	.word	0x200005a8

08003958 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800395c:	4802      	ldr	r0, [pc, #8]	@ (8003968 <DMA1_Stream3_IRQHandler+0x10>)
 800395e:	f001 f93b 	bl	8004bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20000818 	.word	0x20000818

0800396c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003970:	4802      	ldr	r0, [pc, #8]	@ (800397c <DMA1_Stream4_IRQHandler+0x10>)
 8003972:	f001 f931 	bl	8004bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000878 	.word	0x20000878

08003980 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003984:	4802      	ldr	r0, [pc, #8]	@ (8003990 <TIM4_IRQHandler+0x10>)
 8003986:	f006 f969 	bl	8009c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000920 	.word	0x20000920

08003994 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003998:	4802      	ldr	r0, [pc, #8]	@ (80039a4 <I2C2_EV_IRQHandler+0x10>)
 800399a:	f002 fa07 	bl	8005dac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000554 	.word	0x20000554

080039a8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80039ac:	4802      	ldr	r0, [pc, #8]	@ (80039b8 <I2C2_ER_IRQHandler+0x10>)
 80039ae:	f002 fb50 	bl	8006052 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000554 	.word	0x20000554

080039bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80039c0:	4802      	ldr	r0, [pc, #8]	@ (80039cc <SPI1_IRQHandler+0x10>)
 80039c2:	f005 fbc1 	bl	8009148 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000708 	.word	0x20000708

080039d0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80039d4:	4802      	ldr	r0, [pc, #8]	@ (80039e0 <SPI2_IRQHandler+0x10>)
 80039d6:	f005 fbb7 	bl	8009148 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000760 	.word	0x20000760

080039e4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80039e8:	4802      	ldr	r0, [pc, #8]	@ (80039f4 <DMA1_Stream7_IRQHandler+0x10>)
 80039ea:	f001 f8f5 	bl	8004bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000608 	.word	0x20000608

080039f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80039fc:	4802      	ldr	r0, [pc, #8]	@ (8003a08 <TIM5_IRQHandler+0x10>)
 80039fe:	f006 f92d 	bl	8009c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000968 	.word	0x20000968

08003a0c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003a10:	4802      	ldr	r0, [pc, #8]	@ (8003a1c <DMA2_Stream2_IRQHandler+0x10>)
 8003a12:	f001 f8e1 	bl	8004bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	200009f8 	.word	0x200009f8

08003a20 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003a24:	4802      	ldr	r0, [pc, #8]	@ (8003a30 <DMA2_Stream3_IRQHandler+0x10>)
 8003a26:	f001 f8d7 	bl	8004bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	200007b8 	.word	0x200007b8

08003a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a38:	4b06      	ldr	r3, [pc, #24]	@ (8003a54 <SystemInit+0x20>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3e:	4a05      	ldr	r2, [pc, #20]	@ (8003a54 <SystemInit+0x20>)
 8003a40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a48:	bf00      	nop
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b096      	sub	sp, #88	@ 0x58
 8003a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a5e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	605a      	str	r2, [r3, #4]
 8003a68:	609a      	str	r2, [r3, #8]
 8003a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a6c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	605a      	str	r2, [r3, #4]
 8003a80:	609a      	str	r2, [r3, #8]
 8003a82:	60da      	str	r2, [r3, #12]
 8003a84:	611a      	str	r2, [r3, #16]
 8003a86:	615a      	str	r2, [r3, #20]
 8003a88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4618      	mov	r0, r3
 8003a92:	f007 fc5f 	bl	800b354 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a96:	4b3e      	ldr	r3, [pc, #248]	@ (8003b90 <MX_TIM1_Init+0x138>)
 8003a98:	4a3e      	ldr	r2, [pc, #248]	@ (8003b94 <MX_TIM1_Init+0x13c>)
 8003a9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 8003a9c:	4b3c      	ldr	r3, [pc, #240]	@ (8003b90 <MX_TIM1_Init+0x138>)
 8003a9e:	2218      	movs	r2, #24
 8003aa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8003b90 <MX_TIM1_Init+0x138>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8003aa8:	4b39      	ldr	r3, [pc, #228]	@ (8003b90 <MX_TIM1_Init+0x138>)
 8003aaa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003aae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ab0:	4b37      	ldr	r3, [pc, #220]	@ (8003b90 <MX_TIM1_Init+0x138>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ab6:	4b36      	ldr	r3, [pc, #216]	@ (8003b90 <MX_TIM1_Init+0x138>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003abc:	4b34      	ldr	r3, [pc, #208]	@ (8003b90 <MX_TIM1_Init+0x138>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ac2:	4833      	ldr	r0, [pc, #204]	@ (8003b90 <MX_TIM1_Init+0x138>)
 8003ac4:	f005 fdba 	bl	800963c <HAL_TIM_Base_Init>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003ace:	f7fe fdec 	bl	80026aa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ad2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003ad8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003adc:	4619      	mov	r1, r3
 8003ade:	482c      	ldr	r0, [pc, #176]	@ (8003b90 <MX_TIM1_Init+0x138>)
 8003ae0:	f006 fa6e 	bl	8009fc0 <HAL_TIM_ConfigClockSource>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003aea:	f7fe fdde 	bl	80026aa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003aee:	4828      	ldr	r0, [pc, #160]	@ (8003b90 <MX_TIM1_Init+0x138>)
 8003af0:	f005 fe56 	bl	80097a0 <HAL_TIM_PWM_Init>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003afa:	f7fe fdd6 	bl	80026aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003afe:	2300      	movs	r3, #0
 8003b00:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b06:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4820      	ldr	r0, [pc, #128]	@ (8003b90 <MX_TIM1_Init+0x138>)
 8003b0e:	f006 fe15 	bl	800a73c <HAL_TIMEx_MasterConfigSynchronization>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003b18:	f7fe fdc7 	bl	80026aa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b1c:	2360      	movs	r3, #96	@ 0x60
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003b24:	2302      	movs	r3, #2
 8003b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b30:	2300      	movs	r3, #0
 8003b32:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b34:	2300      	movs	r3, #0
 8003b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4813      	ldr	r0, [pc, #76]	@ (8003b90 <MX_TIM1_Init+0x138>)
 8003b42:	f006 f97b 	bl	8009e3c <HAL_TIM_PWM_ConfigChannel>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003b4c:	f7fe fdad 	bl	80026aa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b6e:	1d3b      	adds	r3, r7, #4
 8003b70:	4619      	mov	r1, r3
 8003b72:	4807      	ldr	r0, [pc, #28]	@ (8003b90 <MX_TIM1_Init+0x138>)
 8003b74:	f006 fe50 	bl	800a818 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003b7e:	f7fe fd94 	bl	80026aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003b82:	4803      	ldr	r0, [pc, #12]	@ (8003b90 <MX_TIM1_Init+0x138>)
 8003b84:	f000 f938 	bl	8003df8 <HAL_TIM_MspPostInit>

}
 8003b88:	bf00      	nop
 8003b8a:	3758      	adds	r7, #88	@ 0x58
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	200008d8 	.word	0x200008d8
 8003b94:	40010000 	.word	0x40010000

08003b98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08c      	sub	sp, #48	@ 0x30
 8003b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b9e:	f107 030c 	add.w	r3, r7, #12
 8003ba2:	2224      	movs	r2, #36	@ 0x24
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f007 fbd4 	bl	800b354 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bac:	1d3b      	adds	r3, r7, #4
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003bb4:	4b20      	ldr	r3, [pc, #128]	@ (8003c38 <MX_TIM4_Init+0xa0>)
 8003bb6:	4a21      	ldr	r2, [pc, #132]	@ (8003c3c <MX_TIM4_Init+0xa4>)
 8003bb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003bba:	4b1f      	ldr	r3, [pc, #124]	@ (8003c38 <MX_TIM4_Init+0xa0>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c38 <MX_TIM4_Init+0xa0>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c38 <MX_TIM4_Init+0xa0>)
 8003bc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bcc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bce:	4b1a      	ldr	r3, [pc, #104]	@ (8003c38 <MX_TIM4_Init+0xa0>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bd4:	4b18      	ldr	r3, [pc, #96]	@ (8003c38 <MX_TIM4_Init+0xa0>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003be2:	2301      	movs	r3, #1
 8003be4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003bfe:	f107 030c 	add.w	r3, r7, #12
 8003c02:	4619      	mov	r1, r3
 8003c04:	480c      	ldr	r0, [pc, #48]	@ (8003c38 <MX_TIM4_Init+0xa0>)
 8003c06:	f005 fed5 	bl	80099b4 <HAL_TIM_Encoder_Init>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003c10:	f7fe fd4b 	bl	80026aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c14:	2300      	movs	r3, #0
 8003c16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c1c:	1d3b      	adds	r3, r7, #4
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4805      	ldr	r0, [pc, #20]	@ (8003c38 <MX_TIM4_Init+0xa0>)
 8003c22:	f006 fd8b 	bl	800a73c <HAL_TIMEx_MasterConfigSynchronization>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003c2c:	f7fe fd3d 	bl	80026aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003c30:	bf00      	nop
 8003c32:	3730      	adds	r7, #48	@ 0x30
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000920 	.word	0x20000920
 8003c3c:	40000800 	.word	0x40000800

08003c40 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c46:	f107 0308 	add.w	r3, r7, #8
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	605a      	str	r2, [r3, #4]
 8003c50:	609a      	str	r2, [r3, #8]
 8003c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c54:	463b      	mov	r3, r7
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd4 <MX_TIM5_Init+0x94>)
 8003c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003cd8 <MX_TIM5_Init+0x98>)
 8003c60:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 24999;
 8003c62:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd4 <MX_TIM5_Init+0x94>)
 8003c64:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8003c68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd4 <MX_TIM5_Init+0x94>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9;
 8003c70:	4b18      	ldr	r3, [pc, #96]	@ (8003cd4 <MX_TIM5_Init+0x94>)
 8003c72:	2209      	movs	r2, #9
 8003c74:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c76:	4b17      	ldr	r3, [pc, #92]	@ (8003cd4 <MX_TIM5_Init+0x94>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c7c:	4b15      	ldr	r3, [pc, #84]	@ (8003cd4 <MX_TIM5_Init+0x94>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003c82:	4814      	ldr	r0, [pc, #80]	@ (8003cd4 <MX_TIM5_Init+0x94>)
 8003c84:	f005 fcda 	bl	800963c <HAL_TIM_Base_Init>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003c8e:	f7fe fd0c 	bl	80026aa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003c98:	f107 0308 	add.w	r3, r7, #8
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	480d      	ldr	r0, [pc, #52]	@ (8003cd4 <MX_TIM5_Init+0x94>)
 8003ca0:	f006 f98e 	bl	8009fc0 <HAL_TIM_ConfigClockSource>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003caa:	f7fe fcfe 	bl	80026aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003cb6:	463b      	mov	r3, r7
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4806      	ldr	r0, [pc, #24]	@ (8003cd4 <MX_TIM5_Init+0x94>)
 8003cbc:	f006 fd3e 	bl	800a73c <HAL_TIMEx_MasterConfigSynchronization>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003cc6:	f7fe fcf0 	bl	80026aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003cca:	bf00      	nop
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000968 	.word	0x20000968
 8003cd8:	40000c00 	.word	0x40000c00

08003cdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a18      	ldr	r2, [pc, #96]	@ (8003d4c <HAL_TIM_Base_MspInit+0x70>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d10e      	bne.n	8003d0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	4b17      	ldr	r3, [pc, #92]	@ (8003d50 <HAL_TIM_Base_MspInit+0x74>)
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	4a16      	ldr	r2, [pc, #88]	@ (8003d50 <HAL_TIM_Base_MspInit+0x74>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cfe:	4b14      	ldr	r3, [pc, #80]	@ (8003d50 <HAL_TIM_Base_MspInit+0x74>)
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003d0a:	e01a      	b.n	8003d42 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a10      	ldr	r2, [pc, #64]	@ (8003d54 <HAL_TIM_Base_MspInit+0x78>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d115      	bne.n	8003d42 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d50 <HAL_TIM_Base_MspInit+0x74>)
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d50 <HAL_TIM_Base_MspInit+0x74>)
 8003d20:	f043 0308 	orr.w	r3, r3, #8
 8003d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d26:	4b0a      	ldr	r3, [pc, #40]	@ (8003d50 <HAL_TIM_Base_MspInit+0x74>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003d32:	2200      	movs	r2, #0
 8003d34:	2100      	movs	r1, #0
 8003d36:	2032      	movs	r0, #50	@ 0x32
 8003d38:	f000 fdef 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003d3c:	2032      	movs	r0, #50	@ 0x32
 8003d3e:	f000 fe08 	bl	8004952 <HAL_NVIC_EnableIRQ>
}
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40000c00 	.word	0x40000c00

08003d58 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	@ 0x28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d60:	f107 0314 	add.w	r3, r7, #20
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	60da      	str	r2, [r3, #12]
 8003d6e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1d      	ldr	r2, [pc, #116]	@ (8003dec <HAL_TIM_Encoder_MspInit+0x94>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d133      	bne.n	8003de2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8003df0 <HAL_TIM_Encoder_MspInit+0x98>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d82:	4a1b      	ldr	r2, [pc, #108]	@ (8003df0 <HAL_TIM_Encoder_MspInit+0x98>)
 8003d84:	f043 0304 	orr.w	r3, r3, #4
 8003d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d8a:	4b19      	ldr	r3, [pc, #100]	@ (8003df0 <HAL_TIM_Encoder_MspInit+0x98>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	4b15      	ldr	r3, [pc, #84]	@ (8003df0 <HAL_TIM_Encoder_MspInit+0x98>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9e:	4a14      	ldr	r2, [pc, #80]	@ (8003df0 <HAL_TIM_Encoder_MspInit+0x98>)
 8003da0:	f043 0302 	orr.w	r3, r3, #2
 8003da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003da6:	4b12      	ldr	r3, [pc, #72]	@ (8003df0 <HAL_TIM_Encoder_MspInit+0x98>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003db2:	23c0      	movs	r3, #192	@ 0xc0
 8003db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db6:	2302      	movs	r3, #2
 8003db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc6:	f107 0314 	add.w	r3, r7, #20
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4809      	ldr	r0, [pc, #36]	@ (8003df4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8003dce:	f001 f987 	bl	80050e0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	201e      	movs	r0, #30
 8003dd8:	f000 fd9f 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ddc:	201e      	movs	r0, #30
 8003dde:	f000 fdb8 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003de2:	bf00      	nop
 8003de4:	3728      	adds	r7, #40	@ 0x28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40000800 	.word	0x40000800
 8003df0:	40023800 	.word	0x40023800
 8003df4:	40020400 	.word	0x40020400

08003df8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e00:	f107 030c 	add.w	r3, r7, #12
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a12      	ldr	r2, [pc, #72]	@ (8003e60 <HAL_TIM_MspPostInit+0x68>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d11e      	bne.n	8003e58 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	4b11      	ldr	r3, [pc, #68]	@ (8003e64 <HAL_TIM_MspPostInit+0x6c>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e22:	4a10      	ldr	r2, [pc, #64]	@ (8003e64 <HAL_TIM_MspPostInit+0x6c>)
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e64 <HAL_TIM_MspPostInit+0x6c>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e4c:	f107 030c 	add.w	r3, r7, #12
 8003e50:	4619      	mov	r1, r3
 8003e52:	4805      	ldr	r0, [pc, #20]	@ (8003e68 <HAL_TIM_MspPostInit+0x70>)
 8003e54:	f001 f944 	bl	80050e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003e58:	bf00      	nop
 8003e5a:	3720      	adds	r7, #32
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40010000 	.word	0x40010000
 8003e64:	40023800 	.word	0x40023800
 8003e68:	40020000 	.word	0x40020000

08003e6c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e70:	4b11      	ldr	r3, [pc, #68]	@ (8003eb8 <MX_USART1_UART_Init+0x4c>)
 8003e72:	4a12      	ldr	r2, [pc, #72]	@ (8003ebc <MX_USART1_UART_Init+0x50>)
 8003e74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003e76:	4b10      	ldr	r3, [pc, #64]	@ (8003eb8 <MX_USART1_UART_Init+0x4c>)
 8003e78:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003e7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb8 <MX_USART1_UART_Init+0x4c>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e84:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb8 <MX_USART1_UART_Init+0x4c>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb8 <MX_USART1_UART_Init+0x4c>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e90:	4b09      	ldr	r3, [pc, #36]	@ (8003eb8 <MX_USART1_UART_Init+0x4c>)
 8003e92:	220c      	movs	r2, #12
 8003e94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e96:	4b08      	ldr	r3, [pc, #32]	@ (8003eb8 <MX_USART1_UART_Init+0x4c>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e9c:	4b06      	ldr	r3, [pc, #24]	@ (8003eb8 <MX_USART1_UART_Init+0x4c>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ea2:	4805      	ldr	r0, [pc, #20]	@ (8003eb8 <MX_USART1_UART_Init+0x4c>)
 8003ea4:	f006 fd1e 	bl	800a8e4 <HAL_UART_Init>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003eae:	f7fe fbfc 	bl	80026aa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003eb2:	bf00      	nop
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	200009b0 	.word	0x200009b0
 8003ebc:	40011000 	.word	0x40011000

08003ec0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	@ 0x28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec8:	f107 0314 	add.w	r3, r7, #20
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	605a      	str	r2, [r3, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	60da      	str	r2, [r3, #12]
 8003ed6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a31      	ldr	r2, [pc, #196]	@ (8003fa4 <HAL_UART_MspInit+0xe4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d15b      	bne.n	8003f9a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	4b30      	ldr	r3, [pc, #192]	@ (8003fa8 <HAL_UART_MspInit+0xe8>)
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eea:	4a2f      	ldr	r2, [pc, #188]	@ (8003fa8 <HAL_UART_MspInit+0xe8>)
 8003eec:	f043 0310 	orr.w	r3, r3, #16
 8003ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa8 <HAL_UART_MspInit+0xe8>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef6:	f003 0310 	and.w	r3, r3, #16
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	4b29      	ldr	r3, [pc, #164]	@ (8003fa8 <HAL_UART_MspInit+0xe8>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f06:	4a28      	ldr	r2, [pc, #160]	@ (8003fa8 <HAL_UART_MspInit+0xe8>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f0e:	4b26      	ldr	r3, [pc, #152]	@ (8003fa8 <HAL_UART_MspInit+0xe8>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003f1a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f20:	2302      	movs	r3, #2
 8003f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f2c:	2307      	movs	r3, #7
 8003f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f30:	f107 0314 	add.w	r3, r7, #20
 8003f34:	4619      	mov	r1, r3
 8003f36:	481d      	ldr	r0, [pc, #116]	@ (8003fac <HAL_UART_MspInit+0xec>)
 8003f38:	f001 f8d2 	bl	80050e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb0 <HAL_UART_MspInit+0xf0>)
 8003f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb4 <HAL_UART_MspInit+0xf4>)
 8003f40:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003f42:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb0 <HAL_UART_MspInit+0xf0>)
 8003f44:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003f48:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f4a:	4b19      	ldr	r3, [pc, #100]	@ (8003fb0 <HAL_UART_MspInit+0xf0>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f50:	4b17      	ldr	r3, [pc, #92]	@ (8003fb0 <HAL_UART_MspInit+0xf0>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f56:	4b16      	ldr	r3, [pc, #88]	@ (8003fb0 <HAL_UART_MspInit+0xf0>)
 8003f58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f5c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f5e:	4b14      	ldr	r3, [pc, #80]	@ (8003fb0 <HAL_UART_MspInit+0xf0>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f64:	4b12      	ldr	r3, [pc, #72]	@ (8003fb0 <HAL_UART_MspInit+0xf0>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003f6a:	4b11      	ldr	r3, [pc, #68]	@ (8003fb0 <HAL_UART_MspInit+0xf0>)
 8003f6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f70:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f72:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb0 <HAL_UART_MspInit+0xf0>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f78:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb0 <HAL_UART_MspInit+0xf0>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003f7e:	480c      	ldr	r0, [pc, #48]	@ (8003fb0 <HAL_UART_MspInit+0xf0>)
 8003f80:	f000 fd02 	bl	8004988 <HAL_DMA_Init>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003f8a:	f7fe fb8e 	bl	80026aa <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a07      	ldr	r2, [pc, #28]	@ (8003fb0 <HAL_UART_MspInit+0xf0>)
 8003f92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f94:	4a06      	ldr	r2, [pc, #24]	@ (8003fb0 <HAL_UART_MspInit+0xf0>)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003f9a:	bf00      	nop
 8003f9c:	3728      	adds	r7, #40	@ 0x28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40011000 	.word	0x40011000
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40020000 	.word	0x40020000
 8003fb0:	200009f8 	.word	0x200009f8
 8003fb4:	40026440 	.word	0x40026440

08003fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003fb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ff0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003fbc:	f7ff fd3a 	bl	8003a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fc0:	480c      	ldr	r0, [pc, #48]	@ (8003ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fc2:	490d      	ldr	r1, [pc, #52]	@ (8003ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8003ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fc8:	e002      	b.n	8003fd0 <LoopCopyDataInit>

08003fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fce:	3304      	adds	r3, #4

08003fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fd4:	d3f9      	bcc.n	8003fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8004000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8004004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fdc:	e001      	b.n	8003fe2 <LoopFillZerobss>

08003fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fe0:	3204      	adds	r2, #4

08003fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fe4:	d3fb      	bcc.n	8003fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fe6:	f007 f9e3 	bl	800b3b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fea:	f7fe f92b 	bl	8002244 <main>
  bx  lr    
 8003fee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ff0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ff8:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8003ffc:	0800b524 	.word	0x0800b524
  ldr r2, =_sbss
 8004000:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8004004:	20000a5c 	.word	0x20000a5c

08004008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004008:	e7fe      	b.n	8004008 <ADC_IRQHandler>
	...

0800400c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004010:	4b0e      	ldr	r3, [pc, #56]	@ (800404c <HAL_Init+0x40>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0d      	ldr	r2, [pc, #52]	@ (800404c <HAL_Init+0x40>)
 8004016:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800401a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800401c:	4b0b      	ldr	r3, [pc, #44]	@ (800404c <HAL_Init+0x40>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a0a      	ldr	r2, [pc, #40]	@ (800404c <HAL_Init+0x40>)
 8004022:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004028:	4b08      	ldr	r3, [pc, #32]	@ (800404c <HAL_Init+0x40>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a07      	ldr	r2, [pc, #28]	@ (800404c <HAL_Init+0x40>)
 800402e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004034:	2003      	movs	r0, #3
 8004036:	f000 fc65 	bl	8004904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800403a:	200f      	movs	r0, #15
 800403c:	f000 f808 	bl	8004050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004040:	f7ff fc28 	bl	8003894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40023c00 	.word	0x40023c00

08004050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004058:	4b12      	ldr	r3, [pc, #72]	@ (80040a4 <HAL_InitTick+0x54>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4b12      	ldr	r3, [pc, #72]	@ (80040a8 <HAL_InitTick+0x58>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	4619      	mov	r1, r3
 8004062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004066:	fbb3 f3f1 	udiv	r3, r3, r1
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fc7d 	bl	800496e <HAL_SYSTICK_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e00e      	b.n	800409c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b0f      	cmp	r3, #15
 8004082:	d80a      	bhi.n	800409a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004084:	2200      	movs	r2, #0
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	f04f 30ff 	mov.w	r0, #4294967295
 800408c:	f000 fc45 	bl	800491a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004090:	4a06      	ldr	r2, [pc, #24]	@ (80040ac <HAL_InitTick+0x5c>)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	e000      	b.n	800409c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000030 	.word	0x20000030
 80040a8:	20000038 	.word	0x20000038
 80040ac:	20000034 	.word	0x20000034

080040b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040b4:	4b06      	ldr	r3, [pc, #24]	@ (80040d0 <HAL_IncTick+0x20>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <HAL_IncTick+0x24>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4413      	add	r3, r2
 80040c0:	4a04      	ldr	r2, [pc, #16]	@ (80040d4 <HAL_IncTick+0x24>)
 80040c2:	6013      	str	r3, [r2, #0]
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	20000038 	.word	0x20000038
 80040d4:	20000a58 	.word	0x20000a58

080040d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return uwTick;
 80040dc:	4b03      	ldr	r3, [pc, #12]	@ (80040ec <HAL_GetTick+0x14>)
 80040de:	681b      	ldr	r3, [r3, #0]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000a58 	.word	0x20000a58

080040f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040f8:	f7ff ffee 	bl	80040d8 <HAL_GetTick>
 80040fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d005      	beq.n	8004116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800410a:	4b0a      	ldr	r3, [pc, #40]	@ (8004134 <HAL_Delay+0x44>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004116:	bf00      	nop
 8004118:	f7ff ffde 	bl	80040d8 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	429a      	cmp	r2, r3
 8004126:	d8f7      	bhi.n	8004118 <HAL_Delay+0x28>
  {
  }
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000038 	.word	0x20000038

08004138 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e033      	b.n	80041b6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fc fa06 	bl	8000568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b00      	cmp	r3, #0
 8004174:	d118      	bne.n	80041a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800417e:	f023 0302 	bic.w	r3, r3, #2
 8004182:	f043 0202 	orr.w	r2, r3, #2
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f9ee 	bl	800456c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419a:	f023 0303 	bic.w	r3, r3, #3
 800419e:	f043 0201 	orr.w	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80041a6:	e001      	b.n	80041ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_ADC_Start+0x1a>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e097      	b.n	800430a <HAL_ADC_Start+0x14a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d018      	beq.n	8004222 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004200:	4b45      	ldr	r3, [pc, #276]	@ (8004318 <HAL_ADC_Start+0x158>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a45      	ldr	r2, [pc, #276]	@ (800431c <HAL_ADC_Start+0x15c>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	0c9a      	lsrs	r2, r3, #18
 800420c:	4613      	mov	r3, r2
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	4413      	add	r3, r2
 8004212:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004214:	e002      	b.n	800421c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	3b01      	subs	r3, #1
 800421a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f9      	bne.n	8004216 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b01      	cmp	r3, #1
 800422e:	d15f      	bne.n	80042f0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004234:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004238:	f023 0301 	bic.w	r3, r3, #1
 800423c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004256:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800425a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004266:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800426a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800426e:	d106      	bne.n	800427e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004274:	f023 0206 	bic.w	r2, r3, #6
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	645a      	str	r2, [r3, #68]	@ 0x44
 800427c:	e002      	b.n	8004284 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800428c:	4b24      	ldr	r3, [pc, #144]	@ (8004320 <HAL_ADC_Start+0x160>)
 800428e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004298:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10f      	bne.n	80042c6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d129      	bne.n	8004308 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80042c2:	609a      	str	r2, [r3, #8]
 80042c4:	e020      	b.n	8004308 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a16      	ldr	r2, [pc, #88]	@ (8004324 <HAL_ADC_Start+0x164>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d11b      	bne.n	8004308 <HAL_ADC_Start+0x148>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d114      	bne.n	8004308 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80042ec:	609a      	str	r2, [r3, #8]
 80042ee:	e00b      	b.n	8004308 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f4:	f043 0210 	orr.w	r2, r3, #16
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004300:	f043 0201 	orr.w	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	20000030 	.word	0x20000030
 800431c:	431bde83 	.word	0x431bde83
 8004320:	40012300 	.word	0x40012300
 8004324:	40012000 	.word	0x40012000

08004328 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x1c>
 8004340:	2302      	movs	r3, #2
 8004342:	e105      	b.n	8004550 <HAL_ADC_ConfigChannel+0x228>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b09      	cmp	r3, #9
 8004352:	d925      	bls.n	80043a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68d9      	ldr	r1, [r3, #12]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	461a      	mov	r2, r3
 8004362:	4613      	mov	r3, r2
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4413      	add	r3, r2
 8004368:	3b1e      	subs	r3, #30
 800436a:	2207      	movs	r2, #7
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	43da      	mvns	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	400a      	ands	r2, r1
 8004378:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68d9      	ldr	r1, [r3, #12]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	b29b      	uxth	r3, r3
 800438a:	4618      	mov	r0, r3
 800438c:	4603      	mov	r3, r0
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4403      	add	r3, r0
 8004392:	3b1e      	subs	r3, #30
 8004394:	409a      	lsls	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	60da      	str	r2, [r3, #12]
 800439e:	e022      	b.n	80043e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6919      	ldr	r1, [r3, #16]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	4613      	mov	r3, r2
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	4413      	add	r3, r2
 80043b4:	2207      	movs	r2, #7
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43da      	mvns	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	400a      	ands	r2, r1
 80043c2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6919      	ldr	r1, [r3, #16]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	4618      	mov	r0, r3
 80043d6:	4603      	mov	r3, r0
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4403      	add	r3, r0
 80043dc:	409a      	lsls	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b06      	cmp	r3, #6
 80043ec:	d824      	bhi.n	8004438 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	3b05      	subs	r3, #5
 8004400:	221f      	movs	r2, #31
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43da      	mvns	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	400a      	ands	r2, r1
 800440e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	4618      	mov	r0, r3
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	3b05      	subs	r3, #5
 800442a:	fa00 f203 	lsl.w	r2, r0, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	635a      	str	r2, [r3, #52]	@ 0x34
 8004436:	e04c      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b0c      	cmp	r3, #12
 800443e:	d824      	bhi.n	800448a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	3b23      	subs	r3, #35	@ 0x23
 8004452:	221f      	movs	r2, #31
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	43da      	mvns	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	400a      	ands	r2, r1
 8004460:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	4618      	mov	r0, r3
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	3b23      	subs	r3, #35	@ 0x23
 800447c:	fa00 f203 	lsl.w	r2, r0, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	631a      	str	r2, [r3, #48]	@ 0x30
 8004488:	e023      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	3b41      	subs	r3, #65	@ 0x41
 800449c:	221f      	movs	r2, #31
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	43da      	mvns	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	400a      	ands	r2, r1
 80044aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	4618      	mov	r0, r3
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	3b41      	subs	r3, #65	@ 0x41
 80044c6:	fa00 f203 	lsl.w	r2, r0, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044d2:	4b22      	ldr	r3, [pc, #136]	@ (800455c <HAL_ADC_ConfigChannel+0x234>)
 80044d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a21      	ldr	r2, [pc, #132]	@ (8004560 <HAL_ADC_ConfigChannel+0x238>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d109      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x1cc>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b12      	cmp	r3, #18
 80044e6:	d105      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a19      	ldr	r2, [pc, #100]	@ (8004560 <HAL_ADC_ConfigChannel+0x238>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d123      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x21e>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b10      	cmp	r3, #16
 8004504:	d003      	beq.n	800450e <HAL_ADC_ConfigChannel+0x1e6>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b11      	cmp	r3, #17
 800450c:	d11b      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b10      	cmp	r3, #16
 8004520:	d111      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004522:	4b10      	ldr	r3, [pc, #64]	@ (8004564 <HAL_ADC_ConfigChannel+0x23c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a10      	ldr	r2, [pc, #64]	@ (8004568 <HAL_ADC_ConfigChannel+0x240>)
 8004528:	fba2 2303 	umull	r2, r3, r2, r3
 800452c:	0c9a      	lsrs	r2, r3, #18
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004538:	e002      	b.n	8004540 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	3b01      	subs	r3, #1
 800453e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f9      	bne.n	800453a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	40012300 	.word	0x40012300
 8004560:	40012000 	.word	0x40012000
 8004564:	20000030 	.word	0x20000030
 8004568:	431bde83 	.word	0x431bde83

0800456c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004574:	4b79      	ldr	r3, [pc, #484]	@ (800475c <ADC_Init+0x1f0>)
 8004576:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	431a      	orrs	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6859      	ldr	r1, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	021a      	lsls	r2, r3, #8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80045c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6859      	ldr	r1, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6899      	ldr	r1, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fe:	4a58      	ldr	r2, [pc, #352]	@ (8004760 <ADC_Init+0x1f4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d022      	beq.n	800464a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004612:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6899      	ldr	r1, [r3, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004634:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6899      	ldr	r1, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	e00f      	b.n	800466a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004658:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004668:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0202 	bic.w	r2, r2, #2
 8004678:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6899      	ldr	r1, [r3, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	7e1b      	ldrb	r3, [r3, #24]
 8004684:	005a      	lsls	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01b      	beq.n	80046d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80046b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6859      	ldr	r1, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c2:	3b01      	subs	r3, #1
 80046c4:	035a      	lsls	r2, r3, #13
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
 80046ce:	e007      	b.n	80046e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80046ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	051a      	lsls	r2, r3, #20
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004714:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6899      	ldr	r1, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004722:	025a      	lsls	r2, r3, #9
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800473a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6899      	ldr	r1, [r3, #8]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	029a      	lsls	r2, r3, #10
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	609a      	str	r2, [r3, #8]
}
 8004750:	bf00      	nop
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40012300 	.word	0x40012300
 8004760:	0f000001 	.word	0x0f000001

08004764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004774:	4b0c      	ldr	r3, [pc, #48]	@ (80047a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004780:	4013      	ands	r3, r2
 8004782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800478c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004796:	4a04      	ldr	r2, [pc, #16]	@ (80047a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	60d3      	str	r3, [r2, #12]
}
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	e000ed00 	.word	0xe000ed00

080047ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047b0:	4b04      	ldr	r3, [pc, #16]	@ (80047c4 <__NVIC_GetPriorityGrouping+0x18>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	0a1b      	lsrs	r3, r3, #8
 80047b6:	f003 0307 	and.w	r3, r3, #7
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	e000ed00 	.word	0xe000ed00

080047c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	db0b      	blt.n	80047f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	f003 021f 	and.w	r2, r3, #31
 80047e0:	4907      	ldr	r1, [pc, #28]	@ (8004800 <__NVIC_EnableIRQ+0x38>)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	2001      	movs	r0, #1
 80047ea:	fa00 f202 	lsl.w	r2, r0, r2
 80047ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	e000e100 	.word	0xe000e100

08004804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	6039      	str	r1, [r7, #0]
 800480e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004814:	2b00      	cmp	r3, #0
 8004816:	db0a      	blt.n	800482e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	b2da      	uxtb	r2, r3
 800481c:	490c      	ldr	r1, [pc, #48]	@ (8004850 <__NVIC_SetPriority+0x4c>)
 800481e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004822:	0112      	lsls	r2, r2, #4
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	440b      	add	r3, r1
 8004828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800482c:	e00a      	b.n	8004844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	4908      	ldr	r1, [pc, #32]	@ (8004854 <__NVIC_SetPriority+0x50>)
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	3b04      	subs	r3, #4
 800483c:	0112      	lsls	r2, r2, #4
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	440b      	add	r3, r1
 8004842:	761a      	strb	r2, [r3, #24]
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	e000e100 	.word	0xe000e100
 8004854:	e000ed00 	.word	0xe000ed00

08004858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004858:	b480      	push	{r7}
 800485a:	b089      	sub	sp, #36	@ 0x24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f1c3 0307 	rsb	r3, r3, #7
 8004872:	2b04      	cmp	r3, #4
 8004874:	bf28      	it	cs
 8004876:	2304      	movcs	r3, #4
 8004878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3304      	adds	r3, #4
 800487e:	2b06      	cmp	r3, #6
 8004880:	d902      	bls.n	8004888 <NVIC_EncodePriority+0x30>
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3b03      	subs	r3, #3
 8004886:	e000      	b.n	800488a <NVIC_EncodePriority+0x32>
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800488c:	f04f 32ff 	mov.w	r2, #4294967295
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43da      	mvns	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	401a      	ands	r2, r3
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048a0:	f04f 31ff 	mov.w	r1, #4294967295
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	fa01 f303 	lsl.w	r3, r1, r3
 80048aa:	43d9      	mvns	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b0:	4313      	orrs	r3, r2
         );
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3724      	adds	r7, #36	@ 0x24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048d0:	d301      	bcc.n	80048d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048d2:	2301      	movs	r3, #1
 80048d4:	e00f      	b.n	80048f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004900 <SysTick_Config+0x40>)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3b01      	subs	r3, #1
 80048dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048de:	210f      	movs	r1, #15
 80048e0:	f04f 30ff 	mov.w	r0, #4294967295
 80048e4:	f7ff ff8e 	bl	8004804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048e8:	4b05      	ldr	r3, [pc, #20]	@ (8004900 <SysTick_Config+0x40>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ee:	4b04      	ldr	r3, [pc, #16]	@ (8004900 <SysTick_Config+0x40>)
 80048f0:	2207      	movs	r2, #7
 80048f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	e000e010 	.word	0xe000e010

08004904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff ff29 	bl	8004764 <__NVIC_SetPriorityGrouping>
}
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800491a:	b580      	push	{r7, lr}
 800491c:	b086      	sub	sp, #24
 800491e:	af00      	add	r7, sp, #0
 8004920:	4603      	mov	r3, r0
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	607a      	str	r2, [r7, #4]
 8004926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800492c:	f7ff ff3e 	bl	80047ac <__NVIC_GetPriorityGrouping>
 8004930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	6978      	ldr	r0, [r7, #20]
 8004938:	f7ff ff8e 	bl	8004858 <NVIC_EncodePriority>
 800493c:	4602      	mov	r2, r0
 800493e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004942:	4611      	mov	r1, r2
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff ff5d 	bl	8004804 <__NVIC_SetPriority>
}
 800494a:	bf00      	nop
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	4603      	mov	r3, r0
 800495a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800495c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff ff31 	bl	80047c8 <__NVIC_EnableIRQ>
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7ff ffa2 	bl	80048c0 <SysTick_Config>
 800497c:	4603      	mov	r3, r0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004994:	f7ff fba0 	bl	80040d8 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e099      	b.n	8004ad8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0201 	bic.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049c4:	e00f      	b.n	80049e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049c6:	f7ff fb87 	bl	80040d8 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b05      	cmp	r3, #5
 80049d2:	d908      	bls.n	80049e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2203      	movs	r2, #3
 80049de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e078      	b.n	8004ad8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e8      	bne.n	80049c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4b38      	ldr	r3, [pc, #224]	@ (8004ae0 <HAL_DMA_Init+0x158>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d107      	bne.n	8004a50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f023 0307 	bic.w	r3, r3, #7
 8004a66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d117      	bne.n	8004aaa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00e      	beq.n	8004aaa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 faab 	bl	8004fe8 <DMA_CheckFifoParam>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2240      	movs	r2, #64	@ 0x40
 8004a9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e016      	b.n	8004ad8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fa62 	bl	8004f7c <DMA_CalcBaseAndBitshift>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac0:	223f      	movs	r2, #63	@ 0x3f
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	f010803f 	.word	0xf010803f

08004ae4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_DMA_Start_IT+0x26>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e040      	b.n	8004b8c <HAL_DMA_Start_IT+0xa8>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d12f      	bne.n	8004b7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2202      	movs	r2, #2
 8004b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f9f4 	bl	8004f20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3c:	223f      	movs	r2, #63	@ 0x3f
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0216 	orr.w	r2, r2, #22
 8004b52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d007      	beq.n	8004b6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0208 	orr.w	r2, r2, #8
 8004b6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	e005      	b.n	8004b8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
 8004b88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d004      	beq.n	8004bb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2280      	movs	r2, #128	@ 0x80
 8004bac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e00c      	b.n	8004bcc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2205      	movs	r2, #5
 8004bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004be4:	4b8e      	ldr	r3, [pc, #568]	@ (8004e20 <HAL_DMA_IRQHandler+0x248>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a8e      	ldr	r2, [pc, #568]	@ (8004e24 <HAL_DMA_IRQHandler+0x24c>)
 8004bea:	fba2 2303 	umull	r2, r3, r2, r3
 8004bee:	0a9b      	lsrs	r3, r3, #10
 8004bf0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c02:	2208      	movs	r2, #8
 8004c04:	409a      	lsls	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d01a      	beq.n	8004c44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d013      	beq.n	8004c44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0204 	bic.w	r2, r2, #4
 8004c2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c30:	2208      	movs	r2, #8
 8004c32:	409a      	lsls	r2, r3
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c3c:	f043 0201 	orr.w	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c48:	2201      	movs	r2, #1
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d012      	beq.n	8004c7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00b      	beq.n	8004c7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c66:	2201      	movs	r2, #1
 8004c68:	409a      	lsls	r2, r3
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c72:	f043 0202 	orr.w	r2, r3, #2
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c7e:	2204      	movs	r2, #4
 8004c80:	409a      	lsls	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d012      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00b      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca8:	f043 0204 	orr.w	r2, r3, #4
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb4:	2210      	movs	r2, #16
 8004cb6:	409a      	lsls	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d043      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d03c      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd2:	2210      	movs	r2, #16
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d018      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d108      	bne.n	8004d08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d024      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	4798      	blx	r3
 8004d06:	e01f      	b.n	8004d48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01b      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	4798      	blx	r3
 8004d18:	e016      	b.n	8004d48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d107      	bne.n	8004d38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0208 	bic.w	r2, r2, #8
 8004d36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	409a      	lsls	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 808f 	beq.w	8004e78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0310 	and.w	r3, r3, #16
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 8087 	beq.w	8004e78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d6e:	2220      	movs	r2, #32
 8004d70:	409a      	lsls	r2, r3
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b05      	cmp	r3, #5
 8004d80:	d136      	bne.n	8004df0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0216 	bic.w	r2, r2, #22
 8004d90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695a      	ldr	r2, [r3, #20]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004da0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d103      	bne.n	8004db2 <HAL_DMA_IRQHandler+0x1da>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0208 	bic.w	r2, r2, #8
 8004dc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc6:	223f      	movs	r2, #63	@ 0x3f
 8004dc8:	409a      	lsls	r2, r3
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d07e      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	4798      	blx	r3
        }
        return;
 8004dee:	e079      	b.n	8004ee4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01d      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10d      	bne.n	8004e28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d031      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	4798      	blx	r3
 8004e1c:	e02c      	b.n	8004e78 <HAL_DMA_IRQHandler+0x2a0>
 8004e1e:	bf00      	nop
 8004e20:	20000030 	.word	0x20000030
 8004e24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d023      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4798      	blx	r3
 8004e38:	e01e      	b.n	8004e78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10f      	bne.n	8004e68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0210 	bic.w	r2, r2, #16
 8004e56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d032      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d022      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2205      	movs	r2, #5
 8004e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0201 	bic.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d307      	bcc.n	8004ec0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f2      	bne.n	8004ea4 <HAL_DMA_IRQHandler+0x2cc>
 8004ebe:	e000      	b.n	8004ec2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ec0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	4798      	blx	r3
 8004ee2:	e000      	b.n	8004ee6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ee4:	bf00      	nop
    }
  }
}
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004efa:	b2db      	uxtb	r3, r3
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b40      	cmp	r3, #64	@ 0x40
 8004f4c:	d108      	bne.n	8004f60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f5e:	e007      	b.n	8004f70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	60da      	str	r2, [r3, #12]
}
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	3b10      	subs	r3, #16
 8004f8c:	4a14      	ldr	r2, [pc, #80]	@ (8004fe0 <DMA_CalcBaseAndBitshift+0x64>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	091b      	lsrs	r3, r3, #4
 8004f94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f96:	4a13      	ldr	r2, [pc, #76]	@ (8004fe4 <DMA_CalcBaseAndBitshift+0x68>)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d909      	bls.n	8004fbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004fb2:	f023 0303 	bic.w	r3, r3, #3
 8004fb6:	1d1a      	adds	r2, r3, #4
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fbc:	e007      	b.n	8004fce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004fc6:	f023 0303 	bic.w	r3, r3, #3
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	aaaaaaab 	.word	0xaaaaaaab
 8004fe4:	0800b50c 	.word	0x0800b50c

08004fe8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d11f      	bne.n	8005042 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b03      	cmp	r3, #3
 8005006:	d856      	bhi.n	80050b6 <DMA_CheckFifoParam+0xce>
 8005008:	a201      	add	r2, pc, #4	@ (adr r2, 8005010 <DMA_CheckFifoParam+0x28>)
 800500a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500e:	bf00      	nop
 8005010:	08005021 	.word	0x08005021
 8005014:	08005033 	.word	0x08005033
 8005018:	08005021 	.word	0x08005021
 800501c:	080050b7 	.word	0x080050b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005024:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d046      	beq.n	80050ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005030:	e043      	b.n	80050ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005036:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800503a:	d140      	bne.n	80050be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005040:	e03d      	b.n	80050be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800504a:	d121      	bne.n	8005090 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b03      	cmp	r3, #3
 8005050:	d837      	bhi.n	80050c2 <DMA_CheckFifoParam+0xda>
 8005052:	a201      	add	r2, pc, #4	@ (adr r2, 8005058 <DMA_CheckFifoParam+0x70>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	08005069 	.word	0x08005069
 800505c:	0800506f 	.word	0x0800506f
 8005060:	08005069 	.word	0x08005069
 8005064:	08005081 	.word	0x08005081
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	73fb      	strb	r3, [r7, #15]
      break;
 800506c:	e030      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005072:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d025      	beq.n	80050c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800507e:	e022      	b.n	80050c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005088:	d11f      	bne.n	80050ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800508e:	e01c      	b.n	80050ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b02      	cmp	r3, #2
 8005094:	d903      	bls.n	800509e <DMA_CheckFifoParam+0xb6>
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b03      	cmp	r3, #3
 800509a:	d003      	beq.n	80050a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800509c:	e018      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	73fb      	strb	r3, [r7, #15]
      break;
 80050a2:	e015      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00e      	beq.n	80050ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
      break;
 80050b4:	e00b      	b.n	80050ce <DMA_CheckFifoParam+0xe6>
      break;
 80050b6:	bf00      	nop
 80050b8:	e00a      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>
      break;
 80050ba:	bf00      	nop
 80050bc:	e008      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>
      break;
 80050be:	bf00      	nop
 80050c0:	e006      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>
      break;
 80050c2:	bf00      	nop
 80050c4:	e004      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>
      break;
 80050c6:	bf00      	nop
 80050c8:	e002      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80050ca:	bf00      	nop
 80050cc:	e000      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>
      break;
 80050ce:	bf00      	nop
    }
  } 
  
  return status; 
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop

080050e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b089      	sub	sp, #36	@ 0x24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050f6:	2300      	movs	r3, #0
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	e159      	b.n	80053b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050fc:	2201      	movs	r2, #1
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4013      	ands	r3, r2
 800510e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	429a      	cmp	r2, r3
 8005116:	f040 8148 	bne.w	80053aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b01      	cmp	r3, #1
 8005124:	d005      	beq.n	8005132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800512e:	2b02      	cmp	r3, #2
 8005130:	d130      	bne.n	8005194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	2203      	movs	r2, #3
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	43db      	mvns	r3, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4013      	ands	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4313      	orrs	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005168:	2201      	movs	r2, #1
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	43db      	mvns	r3, r3
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	4013      	ands	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	091b      	lsrs	r3, r3, #4
 800517e:	f003 0201 	and.w	r2, r3, #1
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	4313      	orrs	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f003 0303 	and.w	r3, r3, #3
 800519c:	2b03      	cmp	r3, #3
 800519e:	d017      	beq.n	80051d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	2203      	movs	r2, #3
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	43db      	mvns	r3, r3
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4013      	ands	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d123      	bne.n	8005224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	08da      	lsrs	r2, r3, #3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3208      	adds	r2, #8
 80051e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	220f      	movs	r2, #15
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	43db      	mvns	r3, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4013      	ands	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4313      	orrs	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	08da      	lsrs	r2, r3, #3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3208      	adds	r2, #8
 800521e:	69b9      	ldr	r1, [r7, #24]
 8005220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	2203      	movs	r2, #3
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	43db      	mvns	r3, r3
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	4013      	ands	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f003 0203 	and.w	r2, r3, #3
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	4313      	orrs	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 80a2 	beq.w	80053aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	4b57      	ldr	r3, [pc, #348]	@ (80053c8 <HAL_GPIO_Init+0x2e8>)
 800526c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526e:	4a56      	ldr	r2, [pc, #344]	@ (80053c8 <HAL_GPIO_Init+0x2e8>)
 8005270:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005274:	6453      	str	r3, [r2, #68]	@ 0x44
 8005276:	4b54      	ldr	r3, [pc, #336]	@ (80053c8 <HAL_GPIO_Init+0x2e8>)
 8005278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005282:	4a52      	ldr	r2, [pc, #328]	@ (80053cc <HAL_GPIO_Init+0x2ec>)
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	089b      	lsrs	r3, r3, #2
 8005288:	3302      	adds	r3, #2
 800528a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	220f      	movs	r2, #15
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43db      	mvns	r3, r3
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	4013      	ands	r3, r2
 80052a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a49      	ldr	r2, [pc, #292]	@ (80053d0 <HAL_GPIO_Init+0x2f0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d019      	beq.n	80052e2 <HAL_GPIO_Init+0x202>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a48      	ldr	r2, [pc, #288]	@ (80053d4 <HAL_GPIO_Init+0x2f4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d013      	beq.n	80052de <HAL_GPIO_Init+0x1fe>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a47      	ldr	r2, [pc, #284]	@ (80053d8 <HAL_GPIO_Init+0x2f8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00d      	beq.n	80052da <HAL_GPIO_Init+0x1fa>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a46      	ldr	r2, [pc, #280]	@ (80053dc <HAL_GPIO_Init+0x2fc>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d007      	beq.n	80052d6 <HAL_GPIO_Init+0x1f6>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a45      	ldr	r2, [pc, #276]	@ (80053e0 <HAL_GPIO_Init+0x300>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d101      	bne.n	80052d2 <HAL_GPIO_Init+0x1f2>
 80052ce:	2304      	movs	r3, #4
 80052d0:	e008      	b.n	80052e4 <HAL_GPIO_Init+0x204>
 80052d2:	2307      	movs	r3, #7
 80052d4:	e006      	b.n	80052e4 <HAL_GPIO_Init+0x204>
 80052d6:	2303      	movs	r3, #3
 80052d8:	e004      	b.n	80052e4 <HAL_GPIO_Init+0x204>
 80052da:	2302      	movs	r3, #2
 80052dc:	e002      	b.n	80052e4 <HAL_GPIO_Init+0x204>
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <HAL_GPIO_Init+0x204>
 80052e2:	2300      	movs	r3, #0
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	f002 0203 	and.w	r2, r2, #3
 80052ea:	0092      	lsls	r2, r2, #2
 80052ec:	4093      	lsls	r3, r2
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052f4:	4935      	ldr	r1, [pc, #212]	@ (80053cc <HAL_GPIO_Init+0x2ec>)
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	089b      	lsrs	r3, r3, #2
 80052fa:	3302      	adds	r3, #2
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005302:	4b38      	ldr	r3, [pc, #224]	@ (80053e4 <HAL_GPIO_Init+0x304>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	43db      	mvns	r3, r3
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	4013      	ands	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005326:	4a2f      	ldr	r2, [pc, #188]	@ (80053e4 <HAL_GPIO_Init+0x304>)
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800532c:	4b2d      	ldr	r3, [pc, #180]	@ (80053e4 <HAL_GPIO_Init+0x304>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	43db      	mvns	r3, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4013      	ands	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005350:	4a24      	ldr	r2, [pc, #144]	@ (80053e4 <HAL_GPIO_Init+0x304>)
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005356:	4b23      	ldr	r3, [pc, #140]	@ (80053e4 <HAL_GPIO_Init+0x304>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	43db      	mvns	r3, r3
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	4013      	ands	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4313      	orrs	r3, r2
 8005378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800537a:	4a1a      	ldr	r2, [pc, #104]	@ (80053e4 <HAL_GPIO_Init+0x304>)
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005380:	4b18      	ldr	r3, [pc, #96]	@ (80053e4 <HAL_GPIO_Init+0x304>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	43db      	mvns	r3, r3
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	4013      	ands	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053a4:	4a0f      	ldr	r2, [pc, #60]	@ (80053e4 <HAL_GPIO_Init+0x304>)
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	3301      	adds	r3, #1
 80053ae:	61fb      	str	r3, [r7, #28]
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	2b0f      	cmp	r3, #15
 80053b4:	f67f aea2 	bls.w	80050fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053b8:	bf00      	nop
 80053ba:	bf00      	nop
 80053bc:	3724      	adds	r7, #36	@ 0x24
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40023800 	.word	0x40023800
 80053cc:	40013800 	.word	0x40013800
 80053d0:	40020000 	.word	0x40020000
 80053d4:	40020400 	.word	0x40020400
 80053d8:	40020800 	.word	0x40020800
 80053dc:	40020c00 	.word	0x40020c00
 80053e0:	40021000 	.word	0x40021000
 80053e4:	40013c00 	.word	0x40013c00

080053e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691a      	ldr	r2, [r3, #16]
 80053f8:	887b      	ldrh	r3, [r7, #2]
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005400:	2301      	movs	r3, #1
 8005402:	73fb      	strb	r3, [r7, #15]
 8005404:	e001      	b.n	800540a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005406:	2300      	movs	r3, #0
 8005408:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800540a:	7bfb      	ldrb	r3, [r7, #15]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	807b      	strh	r3, [r7, #2]
 8005424:	4613      	mov	r3, r2
 8005426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005428:	787b      	ldrb	r3, [r7, #1]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800542e:	887a      	ldrh	r2, [r7, #2]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005434:	e003      	b.n	800543e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005436:	887b      	ldrh	r3, [r7, #2]
 8005438:	041a      	lsls	r2, r3, #16
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	619a      	str	r2, [r3, #24]
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e12b      	b.n	80056b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d106      	bne.n	8005478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7fc fe18 	bl	80020a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2224      	movs	r2, #36	@ 0x24
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0201 	bic.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800549e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054b0:	f003 f8ec 	bl	800868c <HAL_RCC_GetPCLK1Freq>
 80054b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	4a81      	ldr	r2, [pc, #516]	@ (80056c0 <HAL_I2C_Init+0x274>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d807      	bhi.n	80054d0 <HAL_I2C_Init+0x84>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a80      	ldr	r2, [pc, #512]	@ (80056c4 <HAL_I2C_Init+0x278>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	bf94      	ite	ls
 80054c8:	2301      	movls	r3, #1
 80054ca:	2300      	movhi	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	e006      	b.n	80054de <HAL_I2C_Init+0x92>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4a7d      	ldr	r2, [pc, #500]	@ (80056c8 <HAL_I2C_Init+0x27c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	bf94      	ite	ls
 80054d8:	2301      	movls	r3, #1
 80054da:	2300      	movhi	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e0e7      	b.n	80056b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4a78      	ldr	r2, [pc, #480]	@ (80056cc <HAL_I2C_Init+0x280>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	0c9b      	lsrs	r3, r3, #18
 80054f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	430a      	orrs	r2, r1
 8005504:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	4a6a      	ldr	r2, [pc, #424]	@ (80056c0 <HAL_I2C_Init+0x274>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d802      	bhi.n	8005520 <HAL_I2C_Init+0xd4>
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	3301      	adds	r3, #1
 800551e:	e009      	b.n	8005534 <HAL_I2C_Init+0xe8>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005526:	fb02 f303 	mul.w	r3, r2, r3
 800552a:	4a69      	ldr	r2, [pc, #420]	@ (80056d0 <HAL_I2C_Init+0x284>)
 800552c:	fba2 2303 	umull	r2, r3, r2, r3
 8005530:	099b      	lsrs	r3, r3, #6
 8005532:	3301      	adds	r3, #1
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6812      	ldr	r2, [r2, #0]
 8005538:	430b      	orrs	r3, r1
 800553a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005546:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	495c      	ldr	r1, [pc, #368]	@ (80056c0 <HAL_I2C_Init+0x274>)
 8005550:	428b      	cmp	r3, r1
 8005552:	d819      	bhi.n	8005588 <HAL_I2C_Init+0x13c>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	1e59      	subs	r1, r3, #1
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005562:	1c59      	adds	r1, r3, #1
 8005564:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005568:	400b      	ands	r3, r1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_I2C_Init+0x138>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1e59      	subs	r1, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	fbb1 f3f3 	udiv	r3, r1, r3
 800557c:	3301      	adds	r3, #1
 800557e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005582:	e051      	b.n	8005628 <HAL_I2C_Init+0x1dc>
 8005584:	2304      	movs	r3, #4
 8005586:	e04f      	b.n	8005628 <HAL_I2C_Init+0x1dc>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d111      	bne.n	80055b4 <HAL_I2C_Init+0x168>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	1e58      	subs	r0, r3, #1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6859      	ldr	r1, [r3, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	440b      	add	r3, r1
 800559e:	fbb0 f3f3 	udiv	r3, r0, r3
 80055a2:	3301      	adds	r3, #1
 80055a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	bf0c      	ite	eq
 80055ac:	2301      	moveq	r3, #1
 80055ae:	2300      	movne	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	e012      	b.n	80055da <HAL_I2C_Init+0x18e>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	1e58      	subs	r0, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6859      	ldr	r1, [r3, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	0099      	lsls	r1, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ca:	3301      	adds	r3, #1
 80055cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	bf0c      	ite	eq
 80055d4:	2301      	moveq	r3, #1
 80055d6:	2300      	movne	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_I2C_Init+0x196>
 80055de:	2301      	movs	r3, #1
 80055e0:	e022      	b.n	8005628 <HAL_I2C_Init+0x1dc>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10e      	bne.n	8005608 <HAL_I2C_Init+0x1bc>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1e58      	subs	r0, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6859      	ldr	r1, [r3, #4]
 80055f2:	460b      	mov	r3, r1
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	440b      	add	r3, r1
 80055f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80055fc:	3301      	adds	r3, #1
 80055fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005606:	e00f      	b.n	8005628 <HAL_I2C_Init+0x1dc>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1e58      	subs	r0, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6859      	ldr	r1, [r3, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	0099      	lsls	r1, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	fbb0 f3f3 	udiv	r3, r0, r3
 800561e:	3301      	adds	r3, #1
 8005620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005624:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	6809      	ldr	r1, [r1, #0]
 800562c:	4313      	orrs	r3, r2
 800562e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005656:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6911      	ldr	r1, [r2, #16]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	68d2      	ldr	r2, [r2, #12]
 8005662:	4311      	orrs	r1, r2
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	430b      	orrs	r3, r1
 800566a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695a      	ldr	r2, [r3, #20]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	000186a0 	.word	0x000186a0
 80056c4:	001e847f 	.word	0x001e847f
 80056c8:	003d08ff 	.word	0x003d08ff
 80056cc:	431bde83 	.word	0x431bde83
 80056d0:	10624dd3 	.word	0x10624dd3

080056d4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e6:	2b80      	cmp	r3, #128	@ 0x80
 80056e8:	d103      	bne.n	80056f2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2200      	movs	r2, #0
 80056f0:	611a      	str	r2, [r3, #16]
  }
}
 80056f2:	bf00      	nop
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
	...

08005700 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af02      	add	r7, sp, #8
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	607a      	str	r2, [r7, #4]
 800570a:	461a      	mov	r2, r3
 800570c:	460b      	mov	r3, r1
 800570e:	817b      	strh	r3, [r7, #10]
 8005710:	4613      	mov	r3, r2
 8005712:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005714:	f7fe fce0 	bl	80040d8 <HAL_GetTick>
 8005718:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b20      	cmp	r3, #32
 8005724:	f040 80e0 	bne.w	80058e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	2319      	movs	r3, #25
 800572e:	2201      	movs	r2, #1
 8005730:	4970      	ldr	r1, [pc, #448]	@ (80058f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f002 f940 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800573e:	2302      	movs	r3, #2
 8005740:	e0d3      	b.n	80058ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_I2C_Master_Transmit+0x50>
 800574c:	2302      	movs	r3, #2
 800574e:	e0cc      	b.n	80058ea <HAL_I2C_Master_Transmit+0x1ea>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b01      	cmp	r3, #1
 8005764:	d007      	beq.n	8005776 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f042 0201 	orr.w	r2, r2, #1
 8005774:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005784:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2221      	movs	r2, #33	@ 0x21
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2210      	movs	r2, #16
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	893a      	ldrh	r2, [r7, #8]
 80057a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4a50      	ldr	r2, [pc, #320]	@ (80058f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80057b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80057b8:	8979      	ldrh	r1, [r7, #10]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	6a3a      	ldr	r2, [r7, #32]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f001 feb4 	bl	800752c <I2C_MasterRequestWrite>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e08d      	b.n	80058ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ce:	2300      	movs	r3, #0
 80057d0:	613b      	str	r3, [r7, #16]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	613b      	str	r3, [r7, #16]
 80057e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80057e4:	e066      	b.n	80058b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	6a39      	ldr	r1, [r7, #32]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f002 f9fe 	bl	8007bec <I2C_WaitOnTXEFlagUntilTimeout>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00d      	beq.n	8005812 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d107      	bne.n	800580e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800580c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e06b      	b.n	80058ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005816:	781a      	ldrb	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582c:	b29b      	uxth	r3, r3
 800582e:	3b01      	subs	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b04      	cmp	r3, #4
 800584e:	d11b      	bne.n	8005888 <HAL_I2C_Master_Transmit+0x188>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005854:	2b00      	cmp	r3, #0
 8005856:	d017      	beq.n	8005888 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	781a      	ldrb	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	6a39      	ldr	r1, [r7, #32]
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f002 f9f5 	bl	8007c7c <I2C_WaitOnBTFFlagUntilTimeout>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00d      	beq.n	80058b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589c:	2b04      	cmp	r3, #4
 800589e:	d107      	bne.n	80058b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e01a      	b.n	80058ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d194      	bne.n	80057e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	e000      	b.n	80058ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80058e8:	2302      	movs	r3, #2
  }
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	00100002 	.word	0x00100002
 80058f8:	ffff0000 	.word	0xffff0000

080058fc <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	607a      	str	r2, [r7, #4]
 8005906:	461a      	mov	r2, r3
 8005908:	460b      	mov	r3, r1
 800590a:	817b      	strh	r3, [r7, #10]
 800590c:	4613      	mov	r3, r2
 800590e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b20      	cmp	r3, #32
 800591e:	f040 8109 	bne.w	8005b34 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005922:	4b87      	ldr	r3, [pc, #540]	@ (8005b40 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	08db      	lsrs	r3, r3, #3
 8005928:	4a86      	ldr	r2, [pc, #536]	@ (8005b44 <HAL_I2C_Master_Transmit_DMA+0x248>)
 800592a:	fba2 2303 	umull	r2, r3, r2, r3
 800592e:	0a1a      	lsrs	r2, r3, #8
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	009a      	lsls	r2, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	3b01      	subs	r3, #1
 8005940:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d112      	bne.n	800596e <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2220      	movs	r2, #32
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005962:	f043 0220 	orr.w	r2, r3, #32
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800596a:	2302      	movs	r3, #2
 800596c:	e0e3      	b.n	8005b36 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b02      	cmp	r3, #2
 800597a:	d0df      	beq.n	800593c <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005982:	2b01      	cmp	r3, #1
 8005984:	d101      	bne.n	800598a <HAL_I2C_Master_Transmit_DMA+0x8e>
 8005986:	2302      	movs	r3, #2
 8005988:	e0d5      	b.n	8005b36 <HAL_I2C_Master_Transmit_DMA+0x23a>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b01      	cmp	r3, #1
 800599e:	d007      	beq.n	80059b0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0201 	orr.w	r2, r2, #1
 80059ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2221      	movs	r2, #33	@ 0x21
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2210      	movs	r2, #16
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	893a      	ldrh	r2, [r7, #8]
 80059e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4a56      	ldr	r2, [pc, #344]	@ (8005b48 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 80059f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80059f2:	897a      	ldrh	r2, [r7, #10]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d07b      	beq.n	8005af8 <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d02a      	beq.n	8005a5e <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a0c:	4a4f      	ldr	r2, [pc, #316]	@ (8005b4c <HAL_I2C_Master_Transmit_DMA+0x250>)
 8005a0e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a14:	4a4e      	ldr	r2, [pc, #312]	@ (8005b50 <HAL_I2C_Master_Transmit_DMA+0x254>)
 8005a16:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a24:	2200      	movs	r2, #0
 8005a26:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a34:	2200      	movs	r2, #0
 8005a36:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a40:	4619      	mov	r1, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3310      	adds	r3, #16
 8005a48:	461a      	mov	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a4e:	f7ff f849 	bl	8004ae4 <HAL_DMA_Start_IT>
 8005a52:	4603      	mov	r3, r0
 8005a54:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005a56:	7dfb      	ldrb	r3, [r7, #23]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d139      	bne.n	8005ad0 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 8005a5c:	e013      	b.n	8005a86 <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e057      	b.n	8005b36 <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005a9c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005aac:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005abc:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	e02f      	b.n	8005b30 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae4:	f043 0210 	orr.w	r2, r3, #16
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e01e      	b.n	8005b36 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b06:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b16:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8005b2e:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	e000      	b.n	8005b36 <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8005b34:	2302      	movs	r3, #2
  }
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000030 	.word	0x20000030
 8005b44:	14f8b589 	.word	0x14f8b589
 8005b48:	ffff0000 	.word	0xffff0000
 8005b4c:	08007631 	.word	0x08007631
 8005b50:	080077ef 	.word	0x080077ef

08005b54 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	607a      	str	r2, [r7, #4]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	460b      	mov	r3, r1
 8005b62:	817b      	strh	r3, [r7, #10]
 8005b64:	4613      	mov	r3, r2
 8005b66:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	f040 8109 	bne.w	8005d8c <HAL_I2C_Master_Receive_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b7a:	4b87      	ldr	r3, [pc, #540]	@ (8005d98 <HAL_I2C_Master_Receive_DMA+0x244>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	08db      	lsrs	r3, r3, #3
 8005b80:	4a86      	ldr	r2, [pc, #536]	@ (8005d9c <HAL_I2C_Master_Receive_DMA+0x248>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	0a1a      	lsrs	r2, r3, #8
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009a      	lsls	r2, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d112      	bne.n	8005bc6 <HAL_I2C_Master_Receive_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bba:	f043 0220 	orr.w	r2, r3, #32
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	e0e3      	b.n	8005d8e <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d0df      	beq.n	8005b94 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_I2C_Master_Receive_DMA+0x8e>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e0d5      	b.n	8005d8e <HAL_I2C_Master_Receive_DMA+0x23a>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d007      	beq.n	8005c08 <HAL_I2C_Master_Receive_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2222      	movs	r2, #34	@ 0x22
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2210      	movs	r2, #16
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	893a      	ldrh	r2, [r7, #8]
 8005c38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4a56      	ldr	r2, [pc, #344]	@ (8005da0 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8005c48:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005c4a:	897a      	ldrh	r2, [r7, #10]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d07b      	beq.n	8005d50 <HAL_I2C_Master_Receive_DMA+0x1fc>
    {
      if (hi2c->hdmarx != NULL)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d02a      	beq.n	8005cb6 <HAL_I2C_Master_Receive_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c64:	4a4f      	ldr	r2, [pc, #316]	@ (8005da4 <HAL_I2C_Master_Receive_DMA+0x250>)
 8005c66:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6c:	4a4e      	ldr	r2, [pc, #312]	@ (8005da8 <HAL_I2C_Master_Receive_DMA+0x254>)
 8005c6e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c74:	2200      	movs	r2, #0
 8005c76:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c84:	2200      	movs	r2, #0
 8005c86:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3310      	adds	r3, #16
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca6:	f7fe ff1d 	bl	8004ae4 <HAL_DMA_Start_IT>
 8005caa:	4603      	mov	r3, r0
 8005cac:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d139      	bne.n	8005d28 <HAL_I2C_Master_Receive_DMA+0x1d4>
 8005cb4:	e013      	b.n	8005cde <HAL_I2C_Master_Receive_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e057      	b.n	8005d8e <HAL_I2C_Master_Receive_DMA+0x23a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005cec:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cfc:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005d14:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d24:	605a      	str	r2, [r3, #4]
 8005d26:	e02f      	b.n	8005d88 <HAL_I2C_Master_Receive_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3c:	f043 0210 	orr.w	r2, r3, #16
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e01e      	b.n	8005d8e <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8005d66:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d76:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d86:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	e000      	b.n	8005d8e <HAL_I2C_Master_Receive_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8005d8c:	2302      	movs	r3, #2
  }
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	20000030 	.word	0x20000030
 8005d9c:	14f8b589 	.word	0x14f8b589
 8005da0:	ffff0000 	.word	0xffff0000
 8005da4:	08007631 	.word	0x08007631
 8005da8:	080077ef 	.word	0x080077ef

08005dac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005dcc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dd4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
 8005dd8:	2b10      	cmp	r3, #16
 8005dda:	d003      	beq.n	8005de4 <HAL_I2C_EV_IRQHandler+0x38>
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	2b40      	cmp	r3, #64	@ 0x40
 8005de0:	f040 80b1 	bne.w	8005f46 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10d      	bne.n	8005e1a <HAL_I2C_EV_IRQHandler+0x6e>
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005e04:	d003      	beq.n	8005e0e <HAL_I2C_EV_IRQHandler+0x62>
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005e0c:	d101      	bne.n	8005e12 <HAL_I2C_EV_IRQHandler+0x66>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <HAL_I2C_EV_IRQHandler+0x68>
 8005e12:	2300      	movs	r3, #0
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	f000 8114 	beq.w	8006042 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00b      	beq.n	8005e3c <HAL_I2C_EV_IRQHandler+0x90>
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d006      	beq.n	8005e3c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f001 ffcd 	bl	8007dce <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fd5c 	bl	80068f2 <I2C_Master_SB>
 8005e3a:	e083      	b.n	8005f44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d008      	beq.n	8005e58 <HAL_I2C_EV_IRQHandler+0xac>
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fdd4 	bl	80069fe <I2C_Master_ADD10>
 8005e56:	e075      	b.n	8005f44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d008      	beq.n	8005e74 <HAL_I2C_EV_IRQHandler+0xc8>
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fdf0 	bl	8006a52 <I2C_Master_ADDR>
 8005e72:	e067      	b.n	8005f44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	f003 0304 	and.w	r3, r3, #4
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d036      	beq.n	8005eec <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e8c:	f000 80db 	beq.w	8006046 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00d      	beq.n	8005eb6 <HAL_I2C_EV_IRQHandler+0x10a>
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d008      	beq.n	8005eb6 <HAL_I2C_EV_IRQHandler+0x10a>
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f9b8 	bl	8006224 <I2C_MasterTransmit_TXE>
 8005eb4:	e046      	b.n	8005f44 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 80c2 	beq.w	8006046 <HAL_I2C_EV_IRQHandler+0x29a>
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 80bc 	beq.w	8006046 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005ece:	7bbb      	ldrb	r3, [r7, #14]
 8005ed0:	2b21      	cmp	r3, #33	@ 0x21
 8005ed2:	d103      	bne.n	8005edc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fa41 	bl	800635c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005eda:	e0b4      	b.n	8006046 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	2b40      	cmp	r3, #64	@ 0x40
 8005ee0:	f040 80b1 	bne.w	8006046 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 faaf 	bl	8006448 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005eea:	e0ac      	b.n	8006046 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ef6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005efa:	f000 80a4 	beq.w	8006046 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00d      	beq.n	8005f24 <HAL_I2C_EV_IRQHandler+0x178>
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d008      	beq.n	8005f24 <HAL_I2C_EV_IRQHandler+0x178>
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d103      	bne.n	8005f24 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fb2b 	bl	8006578 <I2C_MasterReceive_RXNE>
 8005f22:	e00f      	b.n	8005f44 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f003 0304 	and.w	r3, r3, #4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 808b 	beq.w	8006046 <HAL_I2C_EV_IRQHandler+0x29a>
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 8085 	beq.w	8006046 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fbe3 	bl	8006708 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f42:	e080      	b.n	8006046 <HAL_I2C_EV_IRQHandler+0x29a>
 8005f44:	e07f      	b.n	8006046 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d004      	beq.n	8005f58 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	e007      	b.n	8005f68 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d011      	beq.n	8005f96 <HAL_I2C_EV_IRQHandler+0x1ea>
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00c      	beq.n	8005f96 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005f8c:	69b9      	ldr	r1, [r7, #24]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 ffae 	bl	8006ef0 <I2C_Slave_ADDR>
 8005f94:	e05a      	b.n	800604c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	f003 0310 	and.w	r3, r3, #16
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d008      	beq.n	8005fb2 <HAL_I2C_EV_IRQHandler+0x206>
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 ffe8 	bl	8006f80 <I2C_Slave_STOPF>
 8005fb0:	e04c      	b.n	800604c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fb2:	7bbb      	ldrb	r3, [r7, #14]
 8005fb4:	2b21      	cmp	r3, #33	@ 0x21
 8005fb6:	d002      	beq.n	8005fbe <HAL_I2C_EV_IRQHandler+0x212>
 8005fb8:	7bbb      	ldrb	r3, [r7, #14]
 8005fba:	2b29      	cmp	r3, #41	@ 0x29
 8005fbc:	d120      	bne.n	8006000 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00d      	beq.n	8005fe4 <HAL_I2C_EV_IRQHandler+0x238>
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d008      	beq.n	8005fe4 <HAL_I2C_EV_IRQHandler+0x238>
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d103      	bne.n	8005fe4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fec9 	bl	8006d74 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fe2:	e032      	b.n	800604a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	f003 0304 	and.w	r3, r3, #4
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d02d      	beq.n	800604a <HAL_I2C_EV_IRQHandler+0x29e>
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d028      	beq.n	800604a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fef8 	bl	8006dee <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ffe:	e024      	b.n	800604a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00d      	beq.n	8006026 <HAL_I2C_EV_IRQHandler+0x27a>
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006010:	2b00      	cmp	r3, #0
 8006012:	d008      	beq.n	8006026 <HAL_I2C_EV_IRQHandler+0x27a>
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d103      	bne.n	8006026 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 ff06 	bl	8006e30 <I2C_SlaveReceive_RXNE>
 8006024:	e012      	b.n	800604c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00d      	beq.n	800604c <HAL_I2C_EV_IRQHandler+0x2a0>
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006036:	2b00      	cmp	r3, #0
 8006038:	d008      	beq.n	800604c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 ff36 	bl	8006eac <I2C_SlaveReceive_BTF>
 8006040:	e004      	b.n	800604c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8006042:	bf00      	nop
 8006044:	e002      	b.n	800604c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006046:	bf00      	nop
 8006048:	e000      	b.n	800604c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800604a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800604c:	3720      	adds	r7, #32
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b08a      	sub	sp, #40	@ 0x28
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800606a:	2300      	movs	r3, #0
 800606c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006074:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00d      	beq.n	800609c <HAL_I2C_ER_IRQHandler+0x4a>
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006086:	2b00      	cmp	r3, #0
 8006088:	d008      	beq.n	800609c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608c:	f043 0301 	orr.w	r3, r3, #1
 8006090:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800609a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00d      	beq.n	80060c2 <HAL_I2C_ER_IRQHandler+0x70>
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b2:	f043 0302 	orr.w	r3, r3, #2
 80060b6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80060c0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d03e      	beq.n	800614a <HAL_I2C_ER_IRQHandler+0xf8>
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d039      	beq.n	800614a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80060d6:	7efb      	ldrb	r3, [r7, #27]
 80060d8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060de:	b29b      	uxth	r3, r3
 80060e0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060e8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80060f0:	7ebb      	ldrb	r3, [r7, #26]
 80060f2:	2b20      	cmp	r3, #32
 80060f4:	d112      	bne.n	800611c <HAL_I2C_ER_IRQHandler+0xca>
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10f      	bne.n	800611c <HAL_I2C_ER_IRQHandler+0xca>
 80060fc:	7cfb      	ldrb	r3, [r7, #19]
 80060fe:	2b21      	cmp	r3, #33	@ 0x21
 8006100:	d008      	beq.n	8006114 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006102:	7cfb      	ldrb	r3, [r7, #19]
 8006104:	2b29      	cmp	r3, #41	@ 0x29
 8006106:	d005      	beq.n	8006114 <HAL_I2C_ER_IRQHandler+0xc2>
 8006108:	7cfb      	ldrb	r3, [r7, #19]
 800610a:	2b28      	cmp	r3, #40	@ 0x28
 800610c:	d106      	bne.n	800611c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b21      	cmp	r3, #33	@ 0x21
 8006112:	d103      	bne.n	800611c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f001 f863 	bl	80071e0 <I2C_Slave_AF>
 800611a:	e016      	b.n	800614a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006124:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	f043 0304 	orr.w	r3, r3, #4
 800612c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800612e:	7efb      	ldrb	r3, [r7, #27]
 8006130:	2b10      	cmp	r3, #16
 8006132:	d002      	beq.n	800613a <HAL_I2C_ER_IRQHandler+0xe8>
 8006134:	7efb      	ldrb	r3, [r7, #27]
 8006136:	2b40      	cmp	r3, #64	@ 0x40
 8006138:	d107      	bne.n	800614a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006148:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00d      	beq.n	8006170 <HAL_I2C_ER_IRQHandler+0x11e>
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800615a:	2b00      	cmp	r3, #0
 800615c:	d008      	beq.n	8006170 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800615e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006160:	f043 0308 	orr.w	r3, r3, #8
 8006164:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800616e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006172:	2b00      	cmp	r3, #0
 8006174:	d008      	beq.n	8006188 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	431a      	orrs	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 f8a0 	bl	80072c8 <I2C_ITError>
  }
}
 8006188:	bf00      	nop
 800618a:	3728      	adds	r7, #40	@ 0x28
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	70fb      	strb	r3, [r7, #3]
 80061c4:	4613      	mov	r3, r2
 80061c6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006232:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800623a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006240:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006246:	2b00      	cmp	r3, #0
 8006248:	d150      	bne.n	80062ec <I2C_MasterTransmit_TXE+0xc8>
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	2b21      	cmp	r3, #33	@ 0x21
 800624e:	d14d      	bne.n	80062ec <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b08      	cmp	r3, #8
 8006254:	d01d      	beq.n	8006292 <I2C_MasterTransmit_TXE+0x6e>
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2b20      	cmp	r3, #32
 800625a:	d01a      	beq.n	8006292 <I2C_MasterTransmit_TXE+0x6e>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006262:	d016      	beq.n	8006292 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006272:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2211      	movs	r2, #17
 8006278:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7fc fc62 	bl	8002b54 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006290:	e060      	b.n	8006354 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80062a0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062b0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b40      	cmp	r3, #64	@ 0x40
 80062ca:	d107      	bne.n	80062dc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff ff87 	bl	80061e8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062da:	e03b      	b.n	8006354 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7fc fc35 	bl	8002b54 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062ea:	e033      	b.n	8006354 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	2b21      	cmp	r3, #33	@ 0x21
 80062f0:	d005      	beq.n	80062fe <I2C_MasterTransmit_TXE+0xda>
 80062f2:	7bbb      	ldrb	r3, [r7, #14]
 80062f4:	2b40      	cmp	r3, #64	@ 0x40
 80062f6:	d12d      	bne.n	8006354 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	2b22      	cmp	r3, #34	@ 0x22
 80062fc:	d12a      	bne.n	8006354 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006302:	b29b      	uxth	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d108      	bne.n	800631a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006316:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006318:	e01c      	b.n	8006354 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b40      	cmp	r3, #64	@ 0x40
 8006324:	d103      	bne.n	800632e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f88e 	bl	8006448 <I2C_MemoryTransmit_TXE_BTF>
}
 800632c:	e012      	b.n	8006354 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006332:	781a      	ldrb	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006348:	b29b      	uxth	r3, r3
 800634a:	3b01      	subs	r3, #1
 800634c:	b29a      	uxth	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006352:	e7ff      	b.n	8006354 <I2C_MasterTransmit_TXE+0x130>
 8006354:	bf00      	nop
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b21      	cmp	r3, #33	@ 0x21
 8006374:	d164      	bne.n	8006440 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d012      	beq.n	80063a6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006384:	781a      	ldrb	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80063a4:	e04c      	b.n	8006440 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d01d      	beq.n	80063e8 <I2C_MasterTransmit_BTF+0x8c>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	d01a      	beq.n	80063e8 <I2C_MasterTransmit_BTF+0x8c>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063b8:	d016      	beq.n	80063e8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80063c8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2211      	movs	r2, #17
 80063ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7fc fbb7 	bl	8002b54 <HAL_I2C_MasterTxCpltCallback>
}
 80063e6:	e02b      	b.n	8006440 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80063f6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006406:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b40      	cmp	r3, #64	@ 0x40
 8006420:	d107      	bne.n	8006432 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff fedc 	bl	80061e8 <HAL_I2C_MemTxCpltCallback>
}
 8006430:	e006      	b.n	8006440 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7fc fb8a 	bl	8002b54 <HAL_I2C_MasterTxCpltCallback>
}
 8006440:	bf00      	nop
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006456:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800645c:	2b00      	cmp	r3, #0
 800645e:	d11d      	bne.n	800649c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006464:	2b01      	cmp	r3, #1
 8006466:	d10b      	bne.n	8006480 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800646c:	b2da      	uxtb	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006478:	1c9a      	adds	r2, r3, #2
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800647e:	e077      	b.n	8006570 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006484:	b29b      	uxth	r3, r3
 8006486:	121b      	asrs	r3, r3, #8
 8006488:	b2da      	uxtb	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800649a:	e069      	b.n	8006570 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d10b      	bne.n	80064bc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80064ba:	e059      	b.n	8006570 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d152      	bne.n	800656a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	2b22      	cmp	r3, #34	@ 0x22
 80064c8:	d10d      	bne.n	80064e6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064d8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80064e4:	e044      	b.n	8006570 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d015      	beq.n	800651c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
 80064f2:	2b21      	cmp	r3, #33	@ 0x21
 80064f4:	d112      	bne.n	800651c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fa:	781a      	ldrb	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800651a:	e029      	b.n	8006570 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006520:	b29b      	uxth	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d124      	bne.n	8006570 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006526:	7bfb      	ldrb	r3, [r7, #15]
 8006528:	2b21      	cmp	r3, #33	@ 0x21
 800652a:	d121      	bne.n	8006570 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800653a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800654a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2220      	movs	r2, #32
 8006556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7ff fe40 	bl	80061e8 <HAL_I2C_MemTxCpltCallback>
}
 8006568:	e002      	b.n	8006570 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7ff f8b2 	bl	80056d4 <I2C_Flush_DR>
}
 8006570:	bf00      	nop
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b22      	cmp	r3, #34	@ 0x22
 800658a:	f040 80b9 	bne.w	8006700 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006592:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006598:	b29b      	uxth	r3, r3
 800659a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d921      	bls.n	80065e6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	f040 8096 	bne.w	8006700 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065e2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80065e4:	e08c      	b.n	8006700 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d07f      	beq.n	80066ee <I2C_MasterReceive_RXNE+0x176>
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d002      	beq.n	80065fa <I2C_MasterReceive_RXNE+0x82>
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d179      	bne.n	80066ee <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f001 fb86 	bl	8007d0c <I2C_WaitOnSTOPRequestThroughIT>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d14c      	bne.n	80066a0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006614:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006624:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006630:	b2d2      	uxtb	r2, r2
 8006632:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006642:	b29b      	uxth	r3, r3
 8006644:	3b01      	subs	r3, #1
 8006646:	b29a      	uxth	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b40      	cmp	r3, #64	@ 0x40
 800665e:	d10a      	bne.n	8006676 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7ff fdc4 	bl	80061fc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006674:	e044      	b.n	8006700 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b08      	cmp	r3, #8
 8006682:	d002      	beq.n	800668a <I2C_MasterReceive_RXNE+0x112>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b20      	cmp	r3, #32
 8006688:	d103      	bne.n	8006692 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006690:	e002      	b.n	8006698 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2212      	movs	r2, #18
 8006696:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7fc fa7b 	bl	8002b94 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800669e:	e02f      	b.n	8006700 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80066ae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	691a      	ldr	r2, [r3, #16]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	3b01      	subs	r3, #1
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2220      	movs	r2, #32
 80066da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7fc fa8a 	bl	8002c00 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80066ec:	e008      	b.n	8006700 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066fc:	605a      	str	r2, [r3, #4]
}
 80066fe:	e7ff      	b.n	8006700 <I2C_MasterReceive_RXNE+0x188>
 8006700:	bf00      	nop
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006714:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800671a:	b29b      	uxth	r3, r3
 800671c:	2b04      	cmp	r3, #4
 800671e:	d11b      	bne.n	8006758 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800672e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691a      	ldr	r2, [r3, #16]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800674c:	b29b      	uxth	r3, r3
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006756:	e0c8      	b.n	80068ea <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800675c:	b29b      	uxth	r3, r3
 800675e:	2b03      	cmp	r3, #3
 8006760:	d129      	bne.n	80067b6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006770:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b04      	cmp	r3, #4
 8006776:	d00a      	beq.n	800678e <I2C_MasterReceive_BTF+0x86>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b02      	cmp	r3, #2
 800677c:	d007      	beq.n	800678e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800678c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	691a      	ldr	r2, [r3, #16]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006798:	b2d2      	uxtb	r2, r2
 800679a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80067b4:	e099      	b.n	80068ea <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	f040 8081 	bne.w	80068c4 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d002      	beq.n	80067ce <I2C_MasterReceive_BTF+0xc6>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b10      	cmp	r3, #16
 80067cc:	d108      	bne.n	80067e0 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	e019      	b.n	8006814 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d002      	beq.n	80067ec <I2C_MasterReceive_BTF+0xe4>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d108      	bne.n	80067fe <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	e00a      	b.n	8006814 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b10      	cmp	r3, #16
 8006802:	d007      	beq.n	8006814 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006812:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691a      	ldr	r2, [r3, #16]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	691a      	ldr	r2, [r3, #16]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006856:	b29b      	uxth	r3, r3
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800686e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2220      	movs	r2, #32
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b40      	cmp	r3, #64	@ 0x40
 8006882:	d10a      	bne.n	800689a <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7ff fcb2 	bl	80061fc <HAL_I2C_MemRxCpltCallback>
}
 8006898:	e027      	b.n	80068ea <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d002      	beq.n	80068ae <I2C_MasterReceive_BTF+0x1a6>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d103      	bne.n	80068b6 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80068b4:	e002      	b.n	80068bc <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2212      	movs	r2, #18
 80068ba:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7fc f969 	bl	8002b94 <HAL_I2C_MasterRxCpltCallback>
}
 80068c2:	e012      	b.n	80068ea <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691a      	ldr	r2, [r3, #16]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b40      	cmp	r3, #64	@ 0x40
 8006904:	d117      	bne.n	8006936 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006912:	b2db      	uxtb	r3, r3
 8006914:	461a      	mov	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800691e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006920:	e067      	b.n	80069f2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006926:	b2db      	uxtb	r3, r3
 8006928:	f043 0301 	orr.w	r3, r3, #1
 800692c:	b2da      	uxtb	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	611a      	str	r2, [r3, #16]
}
 8006934:	e05d      	b.n	80069f2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800693e:	d133      	bne.n	80069a8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b21      	cmp	r3, #33	@ 0x21
 800694a:	d109      	bne.n	8006960 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006950:	b2db      	uxtb	r3, r3
 8006952:	461a      	mov	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800695c:	611a      	str	r2, [r3, #16]
 800695e:	e008      	b.n	8006972 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006964:	b2db      	uxtb	r3, r3
 8006966:	f043 0301 	orr.w	r3, r3, #1
 800696a:	b2da      	uxtb	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006976:	2b00      	cmp	r3, #0
 8006978:	d004      	beq.n	8006984 <I2C_Master_SB+0x92>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800697e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d108      	bne.n	8006996 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006988:	2b00      	cmp	r3, #0
 800698a:	d032      	beq.n	80069f2 <I2C_Master_SB+0x100>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006992:	2b00      	cmp	r3, #0
 8006994:	d02d      	beq.n	80069f2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069a4:	605a      	str	r2, [r3, #4]
}
 80069a6:	e024      	b.n	80069f2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10e      	bne.n	80069ce <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	11db      	asrs	r3, r3, #7
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	f003 0306 	and.w	r3, r3, #6
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	f063 030f 	orn	r3, r3, #15
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	611a      	str	r2, [r3, #16]
}
 80069cc:	e011      	b.n	80069f2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d10d      	bne.n	80069f2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069da:	b29b      	uxth	r3, r3
 80069dc:	11db      	asrs	r3, r3, #7
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	f003 0306 	and.w	r3, r3, #6
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	f063 030e 	orn	r3, r3, #14
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	611a      	str	r2, [r3, #16]
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d004      	beq.n	8006a24 <I2C_Master_ADD10+0x26>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d108      	bne.n	8006a36 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00c      	beq.n	8006a46 <I2C_Master_ADD10+0x48>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d007      	beq.n	8006a46 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a44:	605a      	str	r2, [r3, #4]
  }
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b091      	sub	sp, #68	@ 0x44
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a60:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a68:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b22      	cmp	r3, #34	@ 0x22
 8006a7a:	f040 8169 	bne.w	8006d50 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10f      	bne.n	8006aa6 <I2C_Master_ADDR+0x54>
 8006a86:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006a8a:	2b40      	cmp	r3, #64	@ 0x40
 8006a8c:	d10b      	bne.n	8006aa6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a8e:	2300      	movs	r3, #0
 8006a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa4:	e160      	b.n	8006d68 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d11d      	bne.n	8006aea <I2C_Master_ADDR+0x98>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006ab6:	d118      	bne.n	8006aea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ab8:	2300      	movs	r3, #0
 8006aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006adc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	651a      	str	r2, [r3, #80]	@ 0x50
 8006ae8:	e13e      	b.n	8006d68 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d113      	bne.n	8006b1c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006af4:	2300      	movs	r3, #0
 8006af6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	e115      	b.n	8006d48 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	f040 808a 	bne.w	8006c3c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b2e:	d137      	bne.n	8006ba0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b3e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b4e:	d113      	bne.n	8006b78 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b5e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b60:	2300      	movs	r3, #0
 8006b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b76:	e0e7      	b.n	8006d48 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b78:	2300      	movs	r3, #0
 8006b7a:	623b      	str	r3, [r7, #32]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	623b      	str	r3, [r7, #32]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	623b      	str	r3, [r7, #32]
 8006b8c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	e0d3      	b.n	8006d48 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba2:	2b08      	cmp	r3, #8
 8006ba4:	d02e      	beq.n	8006c04 <I2C_Master_ADDR+0x1b2>
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	d02b      	beq.n	8006c04 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bae:	2b12      	cmp	r3, #18
 8006bb0:	d102      	bne.n	8006bb8 <I2C_Master_ADDR+0x166>
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d125      	bne.n	8006c04 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d00e      	beq.n	8006bdc <I2C_Master_ADDR+0x18a>
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d00b      	beq.n	8006bdc <I2C_Master_ADDR+0x18a>
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc6:	2b10      	cmp	r3, #16
 8006bc8:	d008      	beq.n	8006bdc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	e007      	b.n	8006bec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006bea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bec:	2300      	movs	r3, #0
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	61fb      	str	r3, [r7, #28]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	61fb      	str	r3, [r7, #28]
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	e0a1      	b.n	8006d48 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c12:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c14:	2300      	movs	r3, #0
 8006c16:	61bb      	str	r3, [r7, #24]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	61bb      	str	r3, [r7, #24]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	61bb      	str	r3, [r7, #24]
 8006c28:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	e085      	b.n	8006d48 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d14d      	bne.n	8006ce2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d016      	beq.n	8006c7a <I2C_Master_ADDR+0x228>
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d013      	beq.n	8006c7a <I2C_Master_ADDR+0x228>
 8006c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c54:	2b10      	cmp	r3, #16
 8006c56:	d010      	beq.n	8006c7a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c66:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	e007      	b.n	8006c8a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006c88:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c98:	d117      	bne.n	8006cca <I2C_Master_ADDR+0x278>
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ca0:	d00b      	beq.n	8006cba <I2C_Master_ADDR+0x268>
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d008      	beq.n	8006cba <I2C_Master_ADDR+0x268>
 8006ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d005      	beq.n	8006cba <I2C_Master_ADDR+0x268>
 8006cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb0:	2b10      	cmp	r3, #16
 8006cb2:	d002      	beq.n	8006cba <I2C_Master_ADDR+0x268>
 8006cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb6:	2b20      	cmp	r3, #32
 8006cb8:	d107      	bne.n	8006cca <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006cc8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	e032      	b.n	8006d48 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006cf0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d00:	d117      	bne.n	8006d32 <I2C_Master_ADDR+0x2e0>
 8006d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d08:	d00b      	beq.n	8006d22 <I2C_Master_ADDR+0x2d0>
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d008      	beq.n	8006d22 <I2C_Master_ADDR+0x2d0>
 8006d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d12:	2b08      	cmp	r3, #8
 8006d14:	d005      	beq.n	8006d22 <I2C_Master_ADDR+0x2d0>
 8006d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d18:	2b10      	cmp	r3, #16
 8006d1a:	d002      	beq.n	8006d22 <I2C_Master_ADDR+0x2d0>
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	d107      	bne.n	8006d32 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d30:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d32:	2300      	movs	r3, #0
 8006d34:	613b      	str	r3, [r7, #16]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	613b      	str	r3, [r7, #16]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	613b      	str	r3, [r7, #16]
 8006d46:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006d4e:	e00b      	b.n	8006d68 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d50:	2300      	movs	r3, #0
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	68fb      	ldr	r3, [r7, #12]
}
 8006d66:	e7ff      	b.n	8006d68 <I2C_Master_ADDR+0x316>
 8006d68:	bf00      	nop
 8006d6a:	3744      	adds	r7, #68	@ 0x44
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d82:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d02b      	beq.n	8006de6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d92:	781a      	ldrb	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9e:	1c5a      	adds	r2, r3, #1
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	3b01      	subs	r3, #1
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d114      	bne.n	8006de6 <I2C_SlaveTransmit_TXE+0x72>
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	2b29      	cmp	r3, #41	@ 0x29
 8006dc0:	d111      	bne.n	8006de6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dd0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2221      	movs	r2, #33	@ 0x21
 8006dd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2228      	movs	r2, #40	@ 0x28
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff f9d5 	bl	8006190 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006de6:	bf00      	nop
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d011      	beq.n	8006e24 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e04:	781a      	ldrb	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d02c      	beq.n	8006ea4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d114      	bne.n	8006ea4 <I2C_SlaveReceive_RXNE+0x74>
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
 8006e7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e7e:	d111      	bne.n	8006ea4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e8e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2222      	movs	r2, #34	@ 0x22
 8006e94:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2228      	movs	r2, #40	@ 0x28
 8006e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7ff f980 	bl	80061a4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006ea4:	bf00      	nop
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d012      	beq.n	8006ee4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	691a      	ldr	r2, [r3, #16]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec8:	b2d2      	uxtb	r2, r2
 8006eca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	3b01      	subs	r3, #1
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006efa:	2300      	movs	r3, #0
 8006efc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f0a:	2b28      	cmp	r3, #40	@ 0x28
 8006f0c:	d125      	bne.n	8006f5a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f1c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d103      	bne.n	8006f3e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	81bb      	strh	r3, [r7, #12]
 8006f3c:	e002      	b.n	8006f44 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006f4c:	89ba      	ldrh	r2, [r7, #12]
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff f930 	bl	80061b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006f58:	e00e      	b.n	8006f78 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60bb      	str	r3, [r7, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	60bb      	str	r3, [r7, #8]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	60bb      	str	r3, [r7, #8]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006f78:	bf00      	nop
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f8e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006f9e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60bb      	str	r3, [r7, #8]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	60bb      	str	r3, [r7, #8]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0201 	orr.w	r2, r2, #1
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fcc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fdc:	d172      	bne.n	80070c4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
 8006fe0:	2b22      	cmp	r3, #34	@ 0x22
 8006fe2:	d002      	beq.n	8006fea <I2C_Slave_STOPF+0x6a>
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fe8:	d135      	bne.n	8007056 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d005      	beq.n	800700e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007006:	f043 0204 	orr.w	r2, r3, #4
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800701c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007022:	4618      	mov	r0, r3
 8007024:	f7fd ff62 	bl	8004eec <HAL_DMA_GetState>
 8007028:	4603      	mov	r3, r0
 800702a:	2b01      	cmp	r3, #1
 800702c:	d049      	beq.n	80070c2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007032:	4a69      	ldr	r2, [pc, #420]	@ (80071d8 <I2C_Slave_STOPF+0x258>)
 8007034:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703a:	4618      	mov	r0, r3
 800703c:	f7fd fdaa 	bl	8004b94 <HAL_DMA_Abort_IT>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d03d      	beq.n	80070c2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007050:	4610      	mov	r0, r2
 8007052:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007054:	e035      	b.n	80070c2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	b29a      	uxth	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d005      	beq.n	800707a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007072:	f043 0204 	orr.w	r2, r3, #4
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007088:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800708e:	4618      	mov	r0, r3
 8007090:	f7fd ff2c 	bl	8004eec <HAL_DMA_GetState>
 8007094:	4603      	mov	r3, r0
 8007096:	2b01      	cmp	r3, #1
 8007098:	d014      	beq.n	80070c4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800709e:	4a4e      	ldr	r2, [pc, #312]	@ (80071d8 <I2C_Slave_STOPF+0x258>)
 80070a0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fd fd74 	bl	8004b94 <HAL_DMA_Abort_IT>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d008      	beq.n	80070c4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80070bc:	4610      	mov	r0, r2
 80070be:	4798      	blx	r3
 80070c0:	e000      	b.n	80070c4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070c2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d03e      	beq.n	800714c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d112      	bne.n	8007102 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	691a      	ldr	r2, [r3, #16]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e6:	b2d2      	uxtb	r2, r2
 80070e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800710c:	2b40      	cmp	r3, #64	@ 0x40
 800710e:	d112      	bne.n	8007136 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691a      	ldr	r2, [r3, #16]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800713a:	b29b      	uxth	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007144:	f043 0204 	orr.w	r2, r3, #4
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f8b7 	bl	80072c8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800715a:	e039      	b.n	80071d0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800715c:	7bfb      	ldrb	r3, [r7, #15]
 800715e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007160:	d109      	bne.n	8007176 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2228      	movs	r2, #40	@ 0x28
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff f817 	bl	80061a4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b28      	cmp	r3, #40	@ 0x28
 8007180:	d111      	bne.n	80071a6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a15      	ldr	r2, [pc, #84]	@ (80071dc <I2C_Slave_STOPF+0x25c>)
 8007186:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2220      	movs	r2, #32
 8007192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7ff f818 	bl	80061d4 <HAL_I2C_ListenCpltCallback>
}
 80071a4:	e014      	b.n	80071d0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071aa:	2b22      	cmp	r3, #34	@ 0x22
 80071ac:	d002      	beq.n	80071b4 <I2C_Slave_STOPF+0x234>
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	2b22      	cmp	r3, #34	@ 0x22
 80071b2:	d10d      	bne.n	80071d0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2220      	movs	r2, #32
 80071be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7fe ffea 	bl	80061a4 <HAL_I2C_SlaveRxCpltCallback>
}
 80071d0:	bf00      	nop
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	08007869 	.word	0x08007869
 80071dc:	ffff0000 	.word	0xffff0000

080071e0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071ee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d002      	beq.n	8007202 <I2C_Slave_AF+0x22>
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d129      	bne.n	8007256 <I2C_Slave_AF+0x76>
 8007202:	7bfb      	ldrb	r3, [r7, #15]
 8007204:	2b28      	cmp	r3, #40	@ 0x28
 8007206:	d126      	bne.n	8007256 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a2e      	ldr	r2, [pc, #184]	@ (80072c4 <I2C_Slave_AF+0xe4>)
 800720c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800721c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007226:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007236:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2220      	movs	r2, #32
 8007242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7fe ffc0 	bl	80061d4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007254:	e031      	b.n	80072ba <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	2b21      	cmp	r3, #33	@ 0x21
 800725a:	d129      	bne.n	80072b0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a19      	ldr	r2, [pc, #100]	@ (80072c4 <I2C_Slave_AF+0xe4>)
 8007260:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2221      	movs	r2, #33	@ 0x21
 8007266:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2220      	movs	r2, #32
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007286:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007290:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072a0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fe fa16 	bl	80056d4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7fe ff71 	bl	8006190 <HAL_I2C_SlaveTxCpltCallback>
}
 80072ae:	e004      	b.n	80072ba <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80072b8:	615a      	str	r2, [r3, #20]
}
 80072ba:	bf00      	nop
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	ffff0000 	.word	0xffff0000

080072c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	2b10      	cmp	r3, #16
 80072e4:	d002      	beq.n	80072ec <I2C_ITError+0x24>
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	2b40      	cmp	r3, #64	@ 0x40
 80072ea:	d10a      	bne.n	8007302 <I2C_ITError+0x3a>
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
 80072ee:	2b22      	cmp	r3, #34	@ 0x22
 80072f0:	d107      	bne.n	8007302 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007300:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007308:	2b28      	cmp	r3, #40	@ 0x28
 800730a:	d107      	bne.n	800731c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2228      	movs	r2, #40	@ 0x28
 8007316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800731a:	e015      	b.n	8007348 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007326:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800732a:	d00a      	beq.n	8007342 <I2C_ITError+0x7a>
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	2b60      	cmp	r3, #96	@ 0x60
 8007330:	d007      	beq.n	8007342 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2220      	movs	r2, #32
 8007336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007352:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007356:	d162      	bne.n	800741e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007366:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800736c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b01      	cmp	r3, #1
 8007374:	d020      	beq.n	80073b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800737a:	4a6a      	ldr	r2, [pc, #424]	@ (8007524 <I2C_ITError+0x25c>)
 800737c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007382:	4618      	mov	r0, r3
 8007384:	f7fd fc06 	bl	8004b94 <HAL_DMA_Abort_IT>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 8089 	beq.w	80074a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0201 	bic.w	r2, r2, #1
 800739e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80073b2:	4610      	mov	r0, r2
 80073b4:	4798      	blx	r3
 80073b6:	e074      	b.n	80074a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073bc:	4a59      	ldr	r2, [pc, #356]	@ (8007524 <I2C_ITError+0x25c>)
 80073be:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fd fbe5 	bl	8004b94 <HAL_DMA_Abort_IT>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d068      	beq.n	80074a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073da:	2b40      	cmp	r3, #64	@ 0x40
 80073dc:	d10b      	bne.n	80073f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e8:	b2d2      	uxtb	r2, r2
 80073ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0201 	bic.w	r2, r2, #1
 8007404:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2220      	movs	r2, #32
 800740a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007418:	4610      	mov	r0, r2
 800741a:	4798      	blx	r3
 800741c:	e041      	b.n	80074a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b60      	cmp	r3, #96	@ 0x60
 8007428:	d125      	bne.n	8007476 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2220      	movs	r2, #32
 800742e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007442:	2b40      	cmp	r3, #64	@ 0x40
 8007444:	d10b      	bne.n	800745e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	691a      	ldr	r2, [r3, #16]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007450:	b2d2      	uxtb	r2, r2
 8007452:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 0201 	bic.w	r2, r2, #1
 800746c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7fe fece 	bl	8006210 <HAL_I2C_AbortCpltCallback>
 8007474:	e015      	b.n	80074a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007480:	2b40      	cmp	r3, #64	@ 0x40
 8007482:	d10b      	bne.n	800749c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691a      	ldr	r2, [r3, #16]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748e:	b2d2      	uxtb	r2, r2
 8007490:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7fb fbaf 	bl	8002c00 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10e      	bne.n	80074d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d109      	bne.n	80074d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d104      	bne.n	80074d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d007      	beq.n	80074e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80074de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d113      	bne.n	800751c <I2C_ITError+0x254>
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	2b28      	cmp	r3, #40	@ 0x28
 80074f8:	d110      	bne.n	800751c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007528 <I2C_ITError+0x260>)
 80074fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2220      	movs	r2, #32
 800750a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7fe fe5c 	bl	80061d4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800751c:	bf00      	nop
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	08007869 	.word	0x08007869
 8007528:	ffff0000 	.word	0xffff0000

0800752c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af02      	add	r7, sp, #8
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	607a      	str	r2, [r7, #4]
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	460b      	mov	r3, r1
 800753a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007540:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2b08      	cmp	r3, #8
 8007546:	d006      	beq.n	8007556 <I2C_MasterRequestWrite+0x2a>
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d003      	beq.n	8007556 <I2C_MasterRequestWrite+0x2a>
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007554:	d108      	bne.n	8007568 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	e00b      	b.n	8007580 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756c:	2b12      	cmp	r3, #18
 800756e:	d107      	bne.n	8007580 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800757e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 fa13 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00d      	beq.n	80075b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075a6:	d103      	bne.n	80075b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e035      	b.n	8007620 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075bc:	d108      	bne.n	80075d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80075be:	897b      	ldrh	r3, [r7, #10]
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	461a      	mov	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80075cc:	611a      	str	r2, [r3, #16]
 80075ce:	e01b      	b.n	8007608 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80075d0:	897b      	ldrh	r3, [r7, #10]
 80075d2:	11db      	asrs	r3, r3, #7
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	f003 0306 	and.w	r3, r3, #6
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f063 030f 	orn	r3, r3, #15
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	490e      	ldr	r1, [pc, #56]	@ (8007628 <I2C_MasterRequestWrite+0xfc>)
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 fa5c 	bl	8007aac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e010      	b.n	8007620 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80075fe:	897b      	ldrh	r3, [r7, #10]
 8007600:	b2da      	uxtb	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	4907      	ldr	r1, [pc, #28]	@ (800762c <I2C_MasterRequestWrite+0x100>)
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 fa4c 	bl	8007aac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e000      	b.n	8007620 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	00010008 	.word	0x00010008
 800762c:	00010002 	.word	0x00010002

08007630 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007644:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800764c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007652:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685a      	ldr	r2, [r3, #4]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007662:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007670:	2200      	movs	r2, #0
 8007672:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007680:	2200      	movs	r2, #0
 8007682:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8007684:	7cfb      	ldrb	r3, [r7, #19]
 8007686:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800768a:	2b21      	cmp	r3, #33	@ 0x21
 800768c:	d007      	beq.n	800769e <I2C_DMAXferCplt+0x6e>
 800768e:	7cfb      	ldrb	r3, [r7, #19]
 8007690:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8007694:	2b22      	cmp	r3, #34	@ 0x22
 8007696:	d131      	bne.n	80076fc <I2C_DMAXferCplt+0xcc>
 8007698:	7cbb      	ldrb	r3, [r7, #18]
 800769a:	2b20      	cmp	r3, #32
 800769c:	d12e      	bne.n	80076fc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076ac:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2200      	movs	r2, #0
 80076b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80076b4:	7cfb      	ldrb	r3, [r7, #19]
 80076b6:	2b29      	cmp	r3, #41	@ 0x29
 80076b8:	d10a      	bne.n	80076d0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2221      	movs	r2, #33	@ 0x21
 80076be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2228      	movs	r2, #40	@ 0x28
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80076c8:	6978      	ldr	r0, [r7, #20]
 80076ca:	f7fe fd61 	bl	8006190 <HAL_I2C_SlaveTxCpltCallback>
 80076ce:	e00c      	b.n	80076ea <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80076d0:	7cfb      	ldrb	r3, [r7, #19]
 80076d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80076d4:	d109      	bne.n	80076ea <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	2222      	movs	r2, #34	@ 0x22
 80076da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2228      	movs	r2, #40	@ 0x28
 80076e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80076e4:	6978      	ldr	r0, [r7, #20]
 80076e6:	f7fe fd5d 	bl	80061a4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80076f8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80076fa:	e074      	b.n	80077e6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	d06e      	beq.n	80077e6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800770c:	b29b      	uxth	r3, r3
 800770e:	2b01      	cmp	r3, #1
 8007710:	d107      	bne.n	8007722 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007720:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007730:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007738:	d009      	beq.n	800774e <I2C_DMAXferCplt+0x11e>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2b08      	cmp	r3, #8
 800773e:	d006      	beq.n	800774e <I2C_DMAXferCplt+0x11e>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007746:	d002      	beq.n	800774e <I2C_DMAXferCplt+0x11e>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b20      	cmp	r3, #32
 800774c:	d107      	bne.n	800775e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800775c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800776c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800777c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2200      	movs	r2, #0
 8007782:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800778c:	6978      	ldr	r0, [r7, #20]
 800778e:	f7fb fa37 	bl	8002c00 <HAL_I2C_ErrorCallback>
}
 8007792:	e028      	b.n	80077e6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2220      	movs	r2, #32
 8007798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b40      	cmp	r3, #64	@ 0x40
 80077a6:	d10a      	bne.n	80077be <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2200      	movs	r2, #0
 80077b4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80077b6:	6978      	ldr	r0, [r7, #20]
 80077b8:	f7fe fd20 	bl	80061fc <HAL_I2C_MemRxCpltCallback>
}
 80077bc:	e013      	b.n	80077e6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	d002      	beq.n	80077d2 <I2C_DMAXferCplt+0x1a2>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2b20      	cmp	r3, #32
 80077d0:	d103      	bne.n	80077da <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2200      	movs	r2, #0
 80077d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80077d8:	e002      	b.n	80077e0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2212      	movs	r2, #18
 80077de:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80077e0:	6978      	ldr	r0, [r7, #20]
 80077e2:	f7fb f9d7 	bl	8002b94 <HAL_I2C_MasterRxCpltCallback>
}
 80077e6:	bf00      	nop
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b084      	sub	sp, #16
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007808:	2200      	movs	r2, #0
 800780a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007810:	2b00      	cmp	r3, #0
 8007812:	d003      	beq.n	800781c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007818:	2200      	movs	r2, #0
 800781a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7fd fb73 	bl	8004f08 <HAL_DMA_GetError>
 8007822:	4603      	mov	r3, r0
 8007824:	2b02      	cmp	r3, #2
 8007826:	d01b      	beq.n	8007860 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007836:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2220      	movs	r2, #32
 8007842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007852:	f043 0210 	orr.w	r2, r3, #16
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f7fb f9d0 	bl	8002c00 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007860:	bf00      	nop
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007878:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007880:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007882:	4b4b      	ldr	r3, [pc, #300]	@ (80079b0 <I2C_DMAAbort+0x148>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	08db      	lsrs	r3, r3, #3
 8007888:	4a4a      	ldr	r2, [pc, #296]	@ (80079b4 <I2C_DMAAbort+0x14c>)
 800788a:	fba2 2303 	umull	r2, r3, r2, r3
 800788e:	0a1a      	lsrs	r2, r3, #8
 8007890:	4613      	mov	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	00da      	lsls	r2, r3, #3
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d106      	bne.n	80078b0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a6:	f043 0220 	orr.w	r2, r3, #32
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80078ae:	e00a      	b.n	80078c6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078c4:	d0ea      	beq.n	800789c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d003      	beq.n	80078d6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078d2:	2200      	movs	r2, #0
 80078d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e2:	2200      	movs	r2, #0
 80078e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2200      	movs	r2, #0
 80078fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007900:	2b00      	cmp	r3, #0
 8007902:	d003      	beq.n	800790c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007908:	2200      	movs	r2, #0
 800790a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007918:	2200      	movs	r2, #0
 800791a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0201 	bic.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b60      	cmp	r3, #96	@ 0x60
 8007936:	d10e      	bne.n	8007956 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	2220      	movs	r2, #32
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2200      	movs	r2, #0
 800794c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800794e:	6978      	ldr	r0, [r7, #20]
 8007950:	f7fe fc5e 	bl	8006210 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007954:	e027      	b.n	80079a6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007956:	7cfb      	ldrb	r3, [r7, #19]
 8007958:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800795c:	2b28      	cmp	r3, #40	@ 0x28
 800795e:	d117      	bne.n	8007990 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 0201 	orr.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800797e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	2200      	movs	r2, #0
 8007984:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2228      	movs	r2, #40	@ 0x28
 800798a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800798e:	e007      	b.n	80079a0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80079a0:	6978      	ldr	r0, [r7, #20]
 80079a2:	f7fb f92d 	bl	8002c00 <HAL_I2C_ErrorCallback>
}
 80079a6:	bf00      	nop
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	20000030 	.word	0x20000030
 80079b4:	14f8b589 	.word	0x14f8b589

080079b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	4613      	mov	r3, r2
 80079c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079c8:	e048      	b.n	8007a5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d0:	d044      	beq.n	8007a5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079d2:	f7fc fb81 	bl	80040d8 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d302      	bcc.n	80079e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d139      	bne.n	8007a5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	0c1b      	lsrs	r3, r3, #16
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d10d      	bne.n	8007a0e <I2C_WaitOnFlagUntilTimeout+0x56>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	43da      	mvns	r2, r3
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	4013      	ands	r3, r2
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	bf0c      	ite	eq
 8007a04:	2301      	moveq	r3, #1
 8007a06:	2300      	movne	r3, #0
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	e00c      	b.n	8007a28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	43da      	mvns	r2, r3
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	bf0c      	ite	eq
 8007a20:	2301      	moveq	r3, #1
 8007a22:	2300      	movne	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	461a      	mov	r2, r3
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d116      	bne.n	8007a5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2220      	movs	r2, #32
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a48:	f043 0220 	orr.w	r2, r3, #32
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e023      	b.n	8007aa4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	0c1b      	lsrs	r3, r3, #16
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d10d      	bne.n	8007a82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	43da      	mvns	r2, r3
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	4013      	ands	r3, r2
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	bf0c      	ite	eq
 8007a78:	2301      	moveq	r3, #1
 8007a7a:	2300      	movne	r3, #0
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	461a      	mov	r2, r3
 8007a80:	e00c      	b.n	8007a9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	43da      	mvns	r2, r3
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	bf0c      	ite	eq
 8007a94:	2301      	moveq	r3, #1
 8007a96:	2300      	movne	r3, #0
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	79fb      	ldrb	r3, [r7, #7]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d093      	beq.n	80079ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
 8007ab8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007aba:	e071      	b.n	8007ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aca:	d123      	bne.n	8007b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ada:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007ae4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b00:	f043 0204 	orr.w	r2, r3, #4
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e067      	b.n	8007be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1a:	d041      	beq.n	8007ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b1c:	f7fc fadc 	bl	80040d8 <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d302      	bcc.n	8007b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d136      	bne.n	8007ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	0c1b      	lsrs	r3, r3, #16
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d10c      	bne.n	8007b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	43da      	mvns	r2, r3
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	4013      	ands	r3, r2
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	bf14      	ite	ne
 8007b4e:	2301      	movne	r3, #1
 8007b50:	2300      	moveq	r3, #0
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	e00b      	b.n	8007b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	43da      	mvns	r2, r3
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	4013      	ands	r3, r2
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bf14      	ite	ne
 8007b68:	2301      	movne	r3, #1
 8007b6a:	2300      	moveq	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d016      	beq.n	8007ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b8c:	f043 0220 	orr.w	r2, r3, #32
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e021      	b.n	8007be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	0c1b      	lsrs	r3, r3, #16
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d10c      	bne.n	8007bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	43da      	mvns	r2, r3
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	bf14      	ite	ne
 8007bbc:	2301      	movne	r3, #1
 8007bbe:	2300      	moveq	r3, #0
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	e00b      	b.n	8007bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	43da      	mvns	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	4013      	ands	r3, r2
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	bf14      	ite	ne
 8007bd6:	2301      	movne	r3, #1
 8007bd8:	2300      	moveq	r3, #0
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f47f af6d 	bne.w	8007abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bf8:	e034      	b.n	8007c64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f8b8 	bl	8007d70 <I2C_IsAcknowledgeFailed>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e034      	b.n	8007c74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c10:	d028      	beq.n	8007c64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c12:	f7fc fa61 	bl	80040d8 <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d302      	bcc.n	8007c28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d11d      	bne.n	8007c64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c32:	2b80      	cmp	r3, #128	@ 0x80
 8007c34:	d016      	beq.n	8007c64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c50:	f043 0220 	orr.w	r2, r3, #32
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e007      	b.n	8007c74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c6e:	2b80      	cmp	r3, #128	@ 0x80
 8007c70:	d1c3      	bne.n	8007bfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c88:	e034      	b.n	8007cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 f870 	bl	8007d70 <I2C_IsAcknowledgeFailed>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e034      	b.n	8007d04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca0:	d028      	beq.n	8007cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ca2:	f7fc fa19 	bl	80040d8 <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d302      	bcc.n	8007cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d11d      	bne.n	8007cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	f003 0304 	and.w	r3, r3, #4
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	d016      	beq.n	8007cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce0:	f043 0220 	orr.w	r2, r3, #32
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e007      	b.n	8007d04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	f003 0304 	and.w	r3, r3, #4
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d1c3      	bne.n	8007c8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007d18:	4b13      	ldr	r3, [pc, #76]	@ (8007d68 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	08db      	lsrs	r3, r3, #3
 8007d1e:	4a13      	ldr	r2, [pc, #76]	@ (8007d6c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007d20:	fba2 2303 	umull	r2, r3, r2, r3
 8007d24:	0a1a      	lsrs	r2, r3, #8
 8007d26:	4613      	mov	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d107      	bne.n	8007d4a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3e:	f043 0220 	orr.w	r2, r3, #32
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e008      	b.n	8007d5c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d58:	d0e9      	beq.n	8007d2e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	20000030 	.word	0x20000030
 8007d6c:	14f8b589 	.word	0x14f8b589

08007d70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d86:	d11b      	bne.n	8007dc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007d90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dac:	f043 0204 	orr.w	r2, r3, #4
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e000      	b.n	8007dc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dda:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007dde:	d103      	bne.n	8007de8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007de6:	e007      	b.n	8007df8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dec:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007df0:	d102      	bne.n	8007df8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2208      	movs	r2, #8
 8007df6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8007e0a:	4b06      	ldr	r3, [pc, #24]	@ (8007e24 <HAL_PWR_EnableBkUpAccess+0x20>)
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8007e10:	4b05      	ldr	r3, [pc, #20]	@ (8007e28 <HAL_PWR_EnableBkUpAccess+0x24>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8007e16:	687b      	ldr	r3, [r7, #4]
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	420e0020 	.word	0x420e0020
 8007e28:	40007000 	.word	0x40007000

08007e2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e267      	b.n	800830e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d075      	beq.n	8007f36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007e4a:	4b88      	ldr	r3, [pc, #544]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f003 030c 	and.w	r3, r3, #12
 8007e52:	2b04      	cmp	r3, #4
 8007e54:	d00c      	beq.n	8007e70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e56:	4b85      	ldr	r3, [pc, #532]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007e5e:	2b08      	cmp	r3, #8
 8007e60:	d112      	bne.n	8007e88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e62:	4b82      	ldr	r3, [pc, #520]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e6e:	d10b      	bne.n	8007e88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e70:	4b7e      	ldr	r3, [pc, #504]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d05b      	beq.n	8007f34 <HAL_RCC_OscConfig+0x108>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d157      	bne.n	8007f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e242      	b.n	800830e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e90:	d106      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x74>
 8007e92:	4b76      	ldr	r3, [pc, #472]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a75      	ldr	r2, [pc, #468]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e9c:	6013      	str	r3, [r2, #0]
 8007e9e:	e01d      	b.n	8007edc <HAL_RCC_OscConfig+0xb0>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ea8:	d10c      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x98>
 8007eaa:	4b70      	ldr	r3, [pc, #448]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a6f      	ldr	r2, [pc, #444]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a6c      	ldr	r2, [pc, #432]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	e00b      	b.n	8007edc <HAL_RCC_OscConfig+0xb0>
 8007ec4:	4b69      	ldr	r3, [pc, #420]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a68      	ldr	r2, [pc, #416]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	4b66      	ldr	r3, [pc, #408]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a65      	ldr	r2, [pc, #404]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d013      	beq.n	8007f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ee4:	f7fc f8f8 	bl	80040d8 <HAL_GetTick>
 8007ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007eec:	f7fc f8f4 	bl	80040d8 <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b64      	cmp	r3, #100	@ 0x64
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e207      	b.n	800830e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007efe:	4b5b      	ldr	r3, [pc, #364]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0f0      	beq.n	8007eec <HAL_RCC_OscConfig+0xc0>
 8007f0a:	e014      	b.n	8007f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f0c:	f7fc f8e4 	bl	80040d8 <HAL_GetTick>
 8007f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f12:	e008      	b.n	8007f26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f14:	f7fc f8e0 	bl	80040d8 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	2b64      	cmp	r3, #100	@ 0x64
 8007f20:	d901      	bls.n	8007f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e1f3      	b.n	800830e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f26:	4b51      	ldr	r3, [pc, #324]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1f0      	bne.n	8007f14 <HAL_RCC_OscConfig+0xe8>
 8007f32:	e000      	b.n	8007f36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d063      	beq.n	800800a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007f42:	4b4a      	ldr	r3, [pc, #296]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f003 030c 	and.w	r3, r3, #12
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00b      	beq.n	8007f66 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f4e:	4b47      	ldr	r3, [pc, #284]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007f56:	2b08      	cmp	r3, #8
 8007f58:	d11c      	bne.n	8007f94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f5a:	4b44      	ldr	r3, [pc, #272]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d116      	bne.n	8007f94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f66:	4b41      	ldr	r3, [pc, #260]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d005      	beq.n	8007f7e <HAL_RCC_OscConfig+0x152>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d001      	beq.n	8007f7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e1c7      	b.n	800830e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	4937      	ldr	r1, [pc, #220]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f92:	e03a      	b.n	800800a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d020      	beq.n	8007fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f9c:	4b34      	ldr	r3, [pc, #208]	@ (8008070 <HAL_RCC_OscConfig+0x244>)
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fa2:	f7fc f899 	bl	80040d8 <HAL_GetTick>
 8007fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fa8:	e008      	b.n	8007fbc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007faa:	f7fc f895 	bl	80040d8 <HAL_GetTick>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d901      	bls.n	8007fbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e1a8      	b.n	800830e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d0f0      	beq.n	8007faa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fc8:	4b28      	ldr	r3, [pc, #160]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	00db      	lsls	r3, r3, #3
 8007fd6:	4925      	ldr	r1, [pc, #148]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	600b      	str	r3, [r1, #0]
 8007fdc:	e015      	b.n	800800a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fde:	4b24      	ldr	r3, [pc, #144]	@ (8008070 <HAL_RCC_OscConfig+0x244>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe4:	f7fc f878 	bl	80040d8 <HAL_GetTick>
 8007fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007fea:	e008      	b.n	8007ffe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fec:	f7fc f874 	bl	80040d8 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d901      	bls.n	8007ffe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e187      	b.n	800830e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1f0      	bne.n	8007fec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0308 	and.w	r3, r3, #8
 8008012:	2b00      	cmp	r3, #0
 8008014:	d036      	beq.n	8008084 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d016      	beq.n	800804c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800801e:	4b15      	ldr	r3, [pc, #84]	@ (8008074 <HAL_RCC_OscConfig+0x248>)
 8008020:	2201      	movs	r2, #1
 8008022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008024:	f7fc f858 	bl	80040d8 <HAL_GetTick>
 8008028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800802a:	e008      	b.n	800803e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800802c:	f7fc f854 	bl	80040d8 <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	2b02      	cmp	r3, #2
 8008038:	d901      	bls.n	800803e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e167      	b.n	800830e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800803e:	4b0b      	ldr	r3, [pc, #44]	@ (800806c <HAL_RCC_OscConfig+0x240>)
 8008040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0f0      	beq.n	800802c <HAL_RCC_OscConfig+0x200>
 800804a:	e01b      	b.n	8008084 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800804c:	4b09      	ldr	r3, [pc, #36]	@ (8008074 <HAL_RCC_OscConfig+0x248>)
 800804e:	2200      	movs	r2, #0
 8008050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008052:	f7fc f841 	bl	80040d8 <HAL_GetTick>
 8008056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008058:	e00e      	b.n	8008078 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800805a:	f7fc f83d 	bl	80040d8 <HAL_GetTick>
 800805e:	4602      	mov	r2, r0
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	2b02      	cmp	r3, #2
 8008066:	d907      	bls.n	8008078 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e150      	b.n	800830e <HAL_RCC_OscConfig+0x4e2>
 800806c:	40023800 	.word	0x40023800
 8008070:	42470000 	.word	0x42470000
 8008074:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008078:	4b88      	ldr	r3, [pc, #544]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 800807a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1ea      	bne.n	800805a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0304 	and.w	r3, r3, #4
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 8097 	beq.w	80081c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008092:	2300      	movs	r3, #0
 8008094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008096:	4b81      	ldr	r3, [pc, #516]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 8008098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800809a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10f      	bne.n	80080c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080a2:	2300      	movs	r3, #0
 80080a4:	60bb      	str	r3, [r7, #8]
 80080a6:	4b7d      	ldr	r3, [pc, #500]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 80080a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080aa:	4a7c      	ldr	r2, [pc, #496]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 80080ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80080b2:	4b7a      	ldr	r3, [pc, #488]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 80080b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080ba:	60bb      	str	r3, [r7, #8]
 80080bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080be:	2301      	movs	r3, #1
 80080c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080c2:	4b77      	ldr	r3, [pc, #476]	@ (80082a0 <HAL_RCC_OscConfig+0x474>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d118      	bne.n	8008100 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80080ce:	4b74      	ldr	r3, [pc, #464]	@ (80082a0 <HAL_RCC_OscConfig+0x474>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a73      	ldr	r2, [pc, #460]	@ (80082a0 <HAL_RCC_OscConfig+0x474>)
 80080d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080da:	f7fb fffd 	bl	80040d8 <HAL_GetTick>
 80080de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080e0:	e008      	b.n	80080f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080e2:	f7fb fff9 	bl	80040d8 <HAL_GetTick>
 80080e6:	4602      	mov	r2, r0
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d901      	bls.n	80080f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e10c      	b.n	800830e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080f4:	4b6a      	ldr	r3, [pc, #424]	@ (80082a0 <HAL_RCC_OscConfig+0x474>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d0f0      	beq.n	80080e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d106      	bne.n	8008116 <HAL_RCC_OscConfig+0x2ea>
 8008108:	4b64      	ldr	r3, [pc, #400]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 800810a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800810c:	4a63      	ldr	r2, [pc, #396]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 800810e:	f043 0301 	orr.w	r3, r3, #1
 8008112:	6713      	str	r3, [r2, #112]	@ 0x70
 8008114:	e01c      	b.n	8008150 <HAL_RCC_OscConfig+0x324>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	2b05      	cmp	r3, #5
 800811c:	d10c      	bne.n	8008138 <HAL_RCC_OscConfig+0x30c>
 800811e:	4b5f      	ldr	r3, [pc, #380]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 8008120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008122:	4a5e      	ldr	r2, [pc, #376]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 8008124:	f043 0304 	orr.w	r3, r3, #4
 8008128:	6713      	str	r3, [r2, #112]	@ 0x70
 800812a:	4b5c      	ldr	r3, [pc, #368]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 800812c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800812e:	4a5b      	ldr	r2, [pc, #364]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 8008130:	f043 0301 	orr.w	r3, r3, #1
 8008134:	6713      	str	r3, [r2, #112]	@ 0x70
 8008136:	e00b      	b.n	8008150 <HAL_RCC_OscConfig+0x324>
 8008138:	4b58      	ldr	r3, [pc, #352]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 800813a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800813c:	4a57      	ldr	r2, [pc, #348]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 800813e:	f023 0301 	bic.w	r3, r3, #1
 8008142:	6713      	str	r3, [r2, #112]	@ 0x70
 8008144:	4b55      	ldr	r3, [pc, #340]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 8008146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008148:	4a54      	ldr	r2, [pc, #336]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 800814a:	f023 0304 	bic.w	r3, r3, #4
 800814e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d015      	beq.n	8008184 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008158:	f7fb ffbe 	bl	80040d8 <HAL_GetTick>
 800815c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800815e:	e00a      	b.n	8008176 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008160:	f7fb ffba 	bl	80040d8 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800816e:	4293      	cmp	r3, r2
 8008170:	d901      	bls.n	8008176 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e0cb      	b.n	800830e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008176:	4b49      	ldr	r3, [pc, #292]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 8008178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b00      	cmp	r3, #0
 8008180:	d0ee      	beq.n	8008160 <HAL_RCC_OscConfig+0x334>
 8008182:	e014      	b.n	80081ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008184:	f7fb ffa8 	bl	80040d8 <HAL_GetTick>
 8008188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800818a:	e00a      	b.n	80081a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800818c:	f7fb ffa4 	bl	80040d8 <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800819a:	4293      	cmp	r3, r2
 800819c:	d901      	bls.n	80081a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e0b5      	b.n	800830e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081a2:	4b3e      	ldr	r3, [pc, #248]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 80081a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1ee      	bne.n	800818c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d105      	bne.n	80081c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081b4:	4b39      	ldr	r3, [pc, #228]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 80081b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b8:	4a38      	ldr	r2, [pc, #224]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 80081ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 80a1 	beq.w	800830c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80081ca:	4b34      	ldr	r3, [pc, #208]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f003 030c 	and.w	r3, r3, #12
 80081d2:	2b08      	cmp	r3, #8
 80081d4:	d05c      	beq.n	8008290 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d141      	bne.n	8008262 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081de:	4b31      	ldr	r3, [pc, #196]	@ (80082a4 <HAL_RCC_OscConfig+0x478>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081e4:	f7fb ff78 	bl	80040d8 <HAL_GetTick>
 80081e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081ea:	e008      	b.n	80081fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081ec:	f7fb ff74 	bl	80040d8 <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d901      	bls.n	80081fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e087      	b.n	800830e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081fe:	4b27      	ldr	r3, [pc, #156]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1f0      	bne.n	80081ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	69da      	ldr	r2, [r3, #28]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	431a      	orrs	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008218:	019b      	lsls	r3, r3, #6
 800821a:	431a      	orrs	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008220:	085b      	lsrs	r3, r3, #1
 8008222:	3b01      	subs	r3, #1
 8008224:	041b      	lsls	r3, r3, #16
 8008226:	431a      	orrs	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822c:	061b      	lsls	r3, r3, #24
 800822e:	491b      	ldr	r1, [pc, #108]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 8008230:	4313      	orrs	r3, r2
 8008232:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008234:	4b1b      	ldr	r3, [pc, #108]	@ (80082a4 <HAL_RCC_OscConfig+0x478>)
 8008236:	2201      	movs	r2, #1
 8008238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800823a:	f7fb ff4d 	bl	80040d8 <HAL_GetTick>
 800823e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008240:	e008      	b.n	8008254 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008242:	f7fb ff49 	bl	80040d8 <HAL_GetTick>
 8008246:	4602      	mov	r2, r0
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	2b02      	cmp	r3, #2
 800824e:	d901      	bls.n	8008254 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008250:	2303      	movs	r3, #3
 8008252:	e05c      	b.n	800830e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008254:	4b11      	ldr	r3, [pc, #68]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d0f0      	beq.n	8008242 <HAL_RCC_OscConfig+0x416>
 8008260:	e054      	b.n	800830c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008262:	4b10      	ldr	r3, [pc, #64]	@ (80082a4 <HAL_RCC_OscConfig+0x478>)
 8008264:	2200      	movs	r2, #0
 8008266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008268:	f7fb ff36 	bl	80040d8 <HAL_GetTick>
 800826c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800826e:	e008      	b.n	8008282 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008270:	f7fb ff32 	bl	80040d8 <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	2b02      	cmp	r3, #2
 800827c:	d901      	bls.n	8008282 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e045      	b.n	800830e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008282:	4b06      	ldr	r3, [pc, #24]	@ (800829c <HAL_RCC_OscConfig+0x470>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1f0      	bne.n	8008270 <HAL_RCC_OscConfig+0x444>
 800828e:	e03d      	b.n	800830c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d107      	bne.n	80082a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e038      	b.n	800830e <HAL_RCC_OscConfig+0x4e2>
 800829c:	40023800 	.word	0x40023800
 80082a0:	40007000 	.word	0x40007000
 80082a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80082a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008318 <HAL_RCC_OscConfig+0x4ec>)
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d028      	beq.n	8008308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d121      	bne.n	8008308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d11a      	bne.n	8008308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80082d8:	4013      	ands	r3, r2
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80082de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d111      	bne.n	8008308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ee:	085b      	lsrs	r3, r3, #1
 80082f0:	3b01      	subs	r3, #1
 80082f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d107      	bne.n	8008308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008302:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008304:	429a      	cmp	r2, r3
 8008306:	d001      	beq.n	800830c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e000      	b.n	800830e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	40023800 	.word	0x40023800

0800831c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d101      	bne.n	8008330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e0cc      	b.n	80084ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008330:	4b68      	ldr	r3, [pc, #416]	@ (80084d4 <HAL_RCC_ClockConfig+0x1b8>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0307 	and.w	r3, r3, #7
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	429a      	cmp	r2, r3
 800833c:	d90c      	bls.n	8008358 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800833e:	4b65      	ldr	r3, [pc, #404]	@ (80084d4 <HAL_RCC_ClockConfig+0x1b8>)
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	b2d2      	uxtb	r2, r2
 8008344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008346:	4b63      	ldr	r3, [pc, #396]	@ (80084d4 <HAL_RCC_ClockConfig+0x1b8>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0307 	and.w	r3, r3, #7
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	429a      	cmp	r2, r3
 8008352:	d001      	beq.n	8008358 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e0b8      	b.n	80084ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0302 	and.w	r3, r3, #2
 8008360:	2b00      	cmp	r3, #0
 8008362:	d020      	beq.n	80083a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0304 	and.w	r3, r3, #4
 800836c:	2b00      	cmp	r3, #0
 800836e:	d005      	beq.n	800837c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008370:	4b59      	ldr	r3, [pc, #356]	@ (80084d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	4a58      	ldr	r2, [pc, #352]	@ (80084d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008376:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800837a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0308 	and.w	r3, r3, #8
 8008384:	2b00      	cmp	r3, #0
 8008386:	d005      	beq.n	8008394 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008388:	4b53      	ldr	r3, [pc, #332]	@ (80084d8 <HAL_RCC_ClockConfig+0x1bc>)
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	4a52      	ldr	r2, [pc, #328]	@ (80084d8 <HAL_RCC_ClockConfig+0x1bc>)
 800838e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008392:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008394:	4b50      	ldr	r3, [pc, #320]	@ (80084d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	494d      	ldr	r1, [pc, #308]	@ (80084d8 <HAL_RCC_ClockConfig+0x1bc>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d044      	beq.n	800843c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d107      	bne.n	80083ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083ba:	4b47      	ldr	r3, [pc, #284]	@ (80084d8 <HAL_RCC_ClockConfig+0x1bc>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d119      	bne.n	80083fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e07f      	b.n	80084ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d003      	beq.n	80083da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d107      	bne.n	80083ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083da:	4b3f      	ldr	r3, [pc, #252]	@ (80084d8 <HAL_RCC_ClockConfig+0x1bc>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d109      	bne.n	80083fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e06f      	b.n	80084ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083ea:	4b3b      	ldr	r3, [pc, #236]	@ (80084d8 <HAL_RCC_ClockConfig+0x1bc>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0302 	and.w	r3, r3, #2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d101      	bne.n	80083fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e067      	b.n	80084ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083fa:	4b37      	ldr	r3, [pc, #220]	@ (80084d8 <HAL_RCC_ClockConfig+0x1bc>)
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f023 0203 	bic.w	r2, r3, #3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	4934      	ldr	r1, [pc, #208]	@ (80084d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008408:	4313      	orrs	r3, r2
 800840a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800840c:	f7fb fe64 	bl	80040d8 <HAL_GetTick>
 8008410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008412:	e00a      	b.n	800842a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008414:	f7fb fe60 	bl	80040d8 <HAL_GetTick>
 8008418:	4602      	mov	r2, r0
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008422:	4293      	cmp	r3, r2
 8008424:	d901      	bls.n	800842a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e04f      	b.n	80084ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800842a:	4b2b      	ldr	r3, [pc, #172]	@ (80084d8 <HAL_RCC_ClockConfig+0x1bc>)
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f003 020c 	and.w	r2, r3, #12
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	429a      	cmp	r2, r3
 800843a:	d1eb      	bne.n	8008414 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800843c:	4b25      	ldr	r3, [pc, #148]	@ (80084d4 <HAL_RCC_ClockConfig+0x1b8>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0307 	and.w	r3, r3, #7
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	429a      	cmp	r2, r3
 8008448:	d20c      	bcs.n	8008464 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800844a:	4b22      	ldr	r3, [pc, #136]	@ (80084d4 <HAL_RCC_ClockConfig+0x1b8>)
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	b2d2      	uxtb	r2, r2
 8008450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008452:	4b20      	ldr	r3, [pc, #128]	@ (80084d4 <HAL_RCC_ClockConfig+0x1b8>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0307 	and.w	r3, r3, #7
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	429a      	cmp	r2, r3
 800845e:	d001      	beq.n	8008464 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e032      	b.n	80084ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0304 	and.w	r3, r3, #4
 800846c:	2b00      	cmp	r3, #0
 800846e:	d008      	beq.n	8008482 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008470:	4b19      	ldr	r3, [pc, #100]	@ (80084d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	4916      	ldr	r1, [pc, #88]	@ (80084d8 <HAL_RCC_ClockConfig+0x1bc>)
 800847e:	4313      	orrs	r3, r2
 8008480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0308 	and.w	r3, r3, #8
 800848a:	2b00      	cmp	r3, #0
 800848c:	d009      	beq.n	80084a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800848e:	4b12      	ldr	r3, [pc, #72]	@ (80084d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	00db      	lsls	r3, r3, #3
 800849c:	490e      	ldr	r1, [pc, #56]	@ (80084d8 <HAL_RCC_ClockConfig+0x1bc>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80084a2:	f000 f821 	bl	80084e8 <HAL_RCC_GetSysClockFreq>
 80084a6:	4602      	mov	r2, r0
 80084a8:	4b0b      	ldr	r3, [pc, #44]	@ (80084d8 <HAL_RCC_ClockConfig+0x1bc>)
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	091b      	lsrs	r3, r3, #4
 80084ae:	f003 030f 	and.w	r3, r3, #15
 80084b2:	490a      	ldr	r1, [pc, #40]	@ (80084dc <HAL_RCC_ClockConfig+0x1c0>)
 80084b4:	5ccb      	ldrb	r3, [r1, r3]
 80084b6:	fa22 f303 	lsr.w	r3, r2, r3
 80084ba:	4a09      	ldr	r2, [pc, #36]	@ (80084e0 <HAL_RCC_ClockConfig+0x1c4>)
 80084bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80084be:	4b09      	ldr	r3, [pc, #36]	@ (80084e4 <HAL_RCC_ClockConfig+0x1c8>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fb fdc4 	bl	8004050 <HAL_InitTick>

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	40023c00 	.word	0x40023c00
 80084d8:	40023800 	.word	0x40023800
 80084dc:	0800b4f4 	.word	0x0800b4f4
 80084e0:	20000030 	.word	0x20000030
 80084e4:	20000034 	.word	0x20000034

080084e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084ec:	b090      	sub	sp, #64	@ 0x40
 80084ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80084f0:	2300      	movs	r3, #0
 80084f2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80084f8:	2300      	movs	r3, #0
 80084fa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008500:	4b59      	ldr	r3, [pc, #356]	@ (8008668 <HAL_RCC_GetSysClockFreq+0x180>)
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f003 030c 	and.w	r3, r3, #12
 8008508:	2b08      	cmp	r3, #8
 800850a:	d00d      	beq.n	8008528 <HAL_RCC_GetSysClockFreq+0x40>
 800850c:	2b08      	cmp	r3, #8
 800850e:	f200 80a1 	bhi.w	8008654 <HAL_RCC_GetSysClockFreq+0x16c>
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <HAL_RCC_GetSysClockFreq+0x34>
 8008516:	2b04      	cmp	r3, #4
 8008518:	d003      	beq.n	8008522 <HAL_RCC_GetSysClockFreq+0x3a>
 800851a:	e09b      	b.n	8008654 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800851c:	4b53      	ldr	r3, [pc, #332]	@ (800866c <HAL_RCC_GetSysClockFreq+0x184>)
 800851e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008520:	e09b      	b.n	800865a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008522:	4b53      	ldr	r3, [pc, #332]	@ (8008670 <HAL_RCC_GetSysClockFreq+0x188>)
 8008524:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008526:	e098      	b.n	800865a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008528:	4b4f      	ldr	r3, [pc, #316]	@ (8008668 <HAL_RCC_GetSysClockFreq+0x180>)
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008530:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008532:	4b4d      	ldr	r3, [pc, #308]	@ (8008668 <HAL_RCC_GetSysClockFreq+0x180>)
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d028      	beq.n	8008590 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800853e:	4b4a      	ldr	r3, [pc, #296]	@ (8008668 <HAL_RCC_GetSysClockFreq+0x180>)
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	099b      	lsrs	r3, r3, #6
 8008544:	2200      	movs	r2, #0
 8008546:	623b      	str	r3, [r7, #32]
 8008548:	627a      	str	r2, [r7, #36]	@ 0x24
 800854a:	6a3b      	ldr	r3, [r7, #32]
 800854c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008550:	2100      	movs	r1, #0
 8008552:	4b47      	ldr	r3, [pc, #284]	@ (8008670 <HAL_RCC_GetSysClockFreq+0x188>)
 8008554:	fb03 f201 	mul.w	r2, r3, r1
 8008558:	2300      	movs	r3, #0
 800855a:	fb00 f303 	mul.w	r3, r0, r3
 800855e:	4413      	add	r3, r2
 8008560:	4a43      	ldr	r2, [pc, #268]	@ (8008670 <HAL_RCC_GetSysClockFreq+0x188>)
 8008562:	fba0 1202 	umull	r1, r2, r0, r2
 8008566:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008568:	460a      	mov	r2, r1
 800856a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800856c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800856e:	4413      	add	r3, r2
 8008570:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008574:	2200      	movs	r2, #0
 8008576:	61bb      	str	r3, [r7, #24]
 8008578:	61fa      	str	r2, [r7, #28]
 800857a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800857e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008582:	f7f7 fe27 	bl	80001d4 <__aeabi_uldivmod>
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	4613      	mov	r3, r2
 800858c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800858e:	e053      	b.n	8008638 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008590:	4b35      	ldr	r3, [pc, #212]	@ (8008668 <HAL_RCC_GetSysClockFreq+0x180>)
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	099b      	lsrs	r3, r3, #6
 8008596:	2200      	movs	r2, #0
 8008598:	613b      	str	r3, [r7, #16]
 800859a:	617a      	str	r2, [r7, #20]
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80085a2:	f04f 0b00 	mov.w	fp, #0
 80085a6:	4652      	mov	r2, sl
 80085a8:	465b      	mov	r3, fp
 80085aa:	f04f 0000 	mov.w	r0, #0
 80085ae:	f04f 0100 	mov.w	r1, #0
 80085b2:	0159      	lsls	r1, r3, #5
 80085b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80085b8:	0150      	lsls	r0, r2, #5
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	ebb2 080a 	subs.w	r8, r2, sl
 80085c2:	eb63 090b 	sbc.w	r9, r3, fp
 80085c6:	f04f 0200 	mov.w	r2, #0
 80085ca:	f04f 0300 	mov.w	r3, #0
 80085ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80085d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80085d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80085da:	ebb2 0408 	subs.w	r4, r2, r8
 80085de:	eb63 0509 	sbc.w	r5, r3, r9
 80085e2:	f04f 0200 	mov.w	r2, #0
 80085e6:	f04f 0300 	mov.w	r3, #0
 80085ea:	00eb      	lsls	r3, r5, #3
 80085ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085f0:	00e2      	lsls	r2, r4, #3
 80085f2:	4614      	mov	r4, r2
 80085f4:	461d      	mov	r5, r3
 80085f6:	eb14 030a 	adds.w	r3, r4, sl
 80085fa:	603b      	str	r3, [r7, #0]
 80085fc:	eb45 030b 	adc.w	r3, r5, fp
 8008600:	607b      	str	r3, [r7, #4]
 8008602:	f04f 0200 	mov.w	r2, #0
 8008606:	f04f 0300 	mov.w	r3, #0
 800860a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800860e:	4629      	mov	r1, r5
 8008610:	028b      	lsls	r3, r1, #10
 8008612:	4621      	mov	r1, r4
 8008614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008618:	4621      	mov	r1, r4
 800861a:	028a      	lsls	r2, r1, #10
 800861c:	4610      	mov	r0, r2
 800861e:	4619      	mov	r1, r3
 8008620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008622:	2200      	movs	r2, #0
 8008624:	60bb      	str	r3, [r7, #8]
 8008626:	60fa      	str	r2, [r7, #12]
 8008628:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800862c:	f7f7 fdd2 	bl	80001d4 <__aeabi_uldivmod>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	4613      	mov	r3, r2
 8008636:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008638:	4b0b      	ldr	r3, [pc, #44]	@ (8008668 <HAL_RCC_GetSysClockFreq+0x180>)
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	0c1b      	lsrs	r3, r3, #16
 800863e:	f003 0303 	and.w	r3, r3, #3
 8008642:	3301      	adds	r3, #1
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008648:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800864a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008650:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008652:	e002      	b.n	800865a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008654:	4b05      	ldr	r3, [pc, #20]	@ (800866c <HAL_RCC_GetSysClockFreq+0x184>)
 8008656:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800865a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800865c:	4618      	mov	r0, r3
 800865e:	3740      	adds	r7, #64	@ 0x40
 8008660:	46bd      	mov	sp, r7
 8008662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008666:	bf00      	nop
 8008668:	40023800 	.word	0x40023800
 800866c:	00f42400 	.word	0x00f42400
 8008670:	017d7840 	.word	0x017d7840

08008674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008674:	b480      	push	{r7}
 8008676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008678:	4b03      	ldr	r3, [pc, #12]	@ (8008688 <HAL_RCC_GetHCLKFreq+0x14>)
 800867a:	681b      	ldr	r3, [r3, #0]
}
 800867c:	4618      	mov	r0, r3
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	20000030 	.word	0x20000030

0800868c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008690:	f7ff fff0 	bl	8008674 <HAL_RCC_GetHCLKFreq>
 8008694:	4602      	mov	r2, r0
 8008696:	4b05      	ldr	r3, [pc, #20]	@ (80086ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	0a9b      	lsrs	r3, r3, #10
 800869c:	f003 0307 	and.w	r3, r3, #7
 80086a0:	4903      	ldr	r1, [pc, #12]	@ (80086b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086a2:	5ccb      	ldrb	r3, [r1, r3]
 80086a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	40023800 	.word	0x40023800
 80086b0:	0800b504 	.word	0x0800b504

080086b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80086b8:	f7ff ffdc 	bl	8008674 <HAL_RCC_GetHCLKFreq>
 80086bc:	4602      	mov	r2, r0
 80086be:	4b05      	ldr	r3, [pc, #20]	@ (80086d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	0b5b      	lsrs	r3, r3, #13
 80086c4:	f003 0307 	and.w	r3, r3, #7
 80086c8:	4903      	ldr	r1, [pc, #12]	@ (80086d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086ca:	5ccb      	ldrb	r3, [r1, r3]
 80086cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	40023800 	.word	0x40023800
 80086d8:	0800b504 	.word	0x0800b504

080086dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086e4:	2300      	movs	r3, #0
 80086e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d105      	bne.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008700:	2b00      	cmp	r3, #0
 8008702:	d035      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008704:	4b67      	ldr	r3, [pc, #412]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008706:	2200      	movs	r2, #0
 8008708:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800870a:	f7fb fce5 	bl	80040d8 <HAL_GetTick>
 800870e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008710:	e008      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008712:	f7fb fce1 	bl	80040d8 <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	2b02      	cmp	r3, #2
 800871e:	d901      	bls.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e0ba      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008724:	4b60      	ldr	r3, [pc, #384]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1f0      	bne.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	019a      	lsls	r2, r3, #6
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	071b      	lsls	r3, r3, #28
 800873c:	495a      	ldr	r1, [pc, #360]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800873e:	4313      	orrs	r3, r2
 8008740:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008744:	4b57      	ldr	r3, [pc, #348]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008746:	2201      	movs	r2, #1
 8008748:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800874a:	f7fb fcc5 	bl	80040d8 <HAL_GetTick>
 800874e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008750:	e008      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008752:	f7fb fcc1 	bl	80040d8 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	2b02      	cmp	r3, #2
 800875e:	d901      	bls.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e09a      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008764:	4b50      	ldr	r3, [pc, #320]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d0f0      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 8083 	beq.w	8008884 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800877e:	2300      	movs	r3, #0
 8008780:	60fb      	str	r3, [r7, #12]
 8008782:	4b49      	ldr	r3, [pc, #292]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008786:	4a48      	ldr	r2, [pc, #288]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800878c:	6413      	str	r3, [r2, #64]	@ 0x40
 800878e:	4b46      	ldr	r3, [pc, #280]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800879a:	4b44      	ldr	r3, [pc, #272]	@ (80088ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a43      	ldr	r2, [pc, #268]	@ (80088ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087a6:	f7fb fc97 	bl	80040d8 <HAL_GetTick>
 80087aa:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80087ac:	e008      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087ae:	f7fb fc93 	bl	80040d8 <HAL_GetTick>
 80087b2:	4602      	mov	r2, r0
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d901      	bls.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e06c      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80087c0:	4b3a      	ldr	r3, [pc, #232]	@ (80088ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d0f0      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80087cc:	4b36      	ldr	r3, [pc, #216]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80087ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087d4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d02f      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d028      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80087ea:	4b2f      	ldr	r3, [pc, #188]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80087ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80087f4:	4b2e      	ldr	r3, [pc, #184]	@ (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80087f6:	2201      	movs	r2, #1
 80087f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80087fa:	4b2d      	ldr	r3, [pc, #180]	@ (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008800:	4a29      	ldr	r2, [pc, #164]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008806:	4b28      	ldr	r3, [pc, #160]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b01      	cmp	r3, #1
 8008810:	d114      	bne.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008812:	f7fb fc61 	bl	80040d8 <HAL_GetTick>
 8008816:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008818:	e00a      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800881a:	f7fb fc5d 	bl	80040d8 <HAL_GetTick>
 800881e:	4602      	mov	r2, r0
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008828:	4293      	cmp	r3, r2
 800882a:	d901      	bls.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e034      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008830:	4b1d      	ldr	r3, [pc, #116]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008834:	f003 0302 	and.w	r3, r3, #2
 8008838:	2b00      	cmp	r3, #0
 800883a:	d0ee      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008844:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008848:	d10d      	bne.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800884a:	4b17      	ldr	r3, [pc, #92]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800885a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800885e:	4912      	ldr	r1, [pc, #72]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008860:	4313      	orrs	r3, r2
 8008862:	608b      	str	r3, [r1, #8]
 8008864:	e005      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008866:	4b10      	ldr	r3, [pc, #64]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	4a0f      	ldr	r2, [pc, #60]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800886c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008870:	6093      	str	r3, [r2, #8]
 8008872:	4b0d      	ldr	r3, [pc, #52]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008874:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800887e:	490a      	ldr	r1, [pc, #40]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008880:	4313      	orrs	r3, r2
 8008882:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0308 	and.w	r3, r3, #8
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	7c1a      	ldrb	r2, [r3, #16]
 8008894:	4b07      	ldr	r3, [pc, #28]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008896:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3718      	adds	r7, #24
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	42470068 	.word	0x42470068
 80088a8:	40023800 	.word	0x40023800
 80088ac:	40007000 	.word	0x40007000
 80088b0:	42470e40 	.word	0x42470e40
 80088b4:	424711e0 	.word	0x424711e0

080088b8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d101      	bne.n	80088ce <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e073      	b.n	80089b6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	7f5b      	ldrb	r3, [r3, #29]
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d105      	bne.n	80088e4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f7fa f876 	bl	80029d0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2202      	movs	r2, #2
 80088e8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	f003 0310 	and.w	r3, r3, #16
 80088f4:	2b10      	cmp	r3, #16
 80088f6:	d055      	beq.n	80089a4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	22ca      	movs	r2, #202	@ 0xca
 80088fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2253      	movs	r2, #83	@ 0x53
 8008906:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 fa49 	bl	8008da0 <RTC_EnterInitMode>
 800890e:	4603      	mov	r3, r0
 8008910:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d12c      	bne.n	8008972 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6812      	ldr	r2, [r2, #0]
 8008922:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008926:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800892a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6899      	ldr	r1, [r3, #8]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	431a      	orrs	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	431a      	orrs	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	68d2      	ldr	r2, [r2, #12]
 8008952:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	6919      	ldr	r1, [r3, #16]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	041a      	lsls	r2, r3, #16
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	430a      	orrs	r2, r1
 8008966:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fa50 	bl	8008e0e <RTC_ExitInitMode>
 800896e:	4603      	mov	r3, r0
 8008970:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008972:	7bfb      	ldrb	r3, [r7, #15]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d110      	bne.n	800899a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008986:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	699a      	ldr	r2, [r3, #24]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	430a      	orrs	r2, r1
 8008998:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	22ff      	movs	r2, #255	@ 0xff
 80089a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80089a2:	e001      	b.n	80089a8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d102      	bne.n	80089b4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80089be:	b590      	push	{r4, r7, lr}
 80089c0:	b087      	sub	sp, #28
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	60f8      	str	r0, [r7, #12]
 80089c6:	60b9      	str	r1, [r7, #8]
 80089c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	7f1b      	ldrb	r3, [r3, #28]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d101      	bne.n	80089da <HAL_RTC_SetTime+0x1c>
 80089d6:	2302      	movs	r3, #2
 80089d8:	e087      	b.n	8008aea <HAL_RTC_SetTime+0x12c>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2201      	movs	r2, #1
 80089de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2202      	movs	r2, #2
 80089e4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d126      	bne.n	8008a3a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d102      	bne.n	8008a00 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2200      	movs	r2, #0
 80089fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 fa27 	bl	8008e58 <RTC_ByteToBcd2>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	785b      	ldrb	r3, [r3, #1]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 fa20 	bl	8008e58 <RTC_ByteToBcd2>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008a1c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	789b      	ldrb	r3, [r3, #2]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fa18 	bl	8008e58 <RTC_ByteToBcd2>
 8008a28:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008a2a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	78db      	ldrb	r3, [r3, #3]
 8008a32:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008a34:	4313      	orrs	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]
 8008a38:	e018      	b.n	8008a6c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d102      	bne.n	8008a4e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	785b      	ldrb	r3, [r3, #1]
 8008a58:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008a5a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008a60:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	78db      	ldrb	r3, [r3, #3]
 8008a66:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	22ca      	movs	r2, #202	@ 0xca
 8008a72:	625a      	str	r2, [r3, #36]	@ 0x24
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2253      	movs	r2, #83	@ 0x53
 8008a7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 f98f 	bl	8008da0 <RTC_EnterInitMode>
 8008a82:	4603      	mov	r3, r0
 8008a84:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008a86:	7cfb      	ldrb	r3, [r7, #19]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d120      	bne.n	8008ace <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008a96:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008a9a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689a      	ldr	r2, [r3, #8]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008aaa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6899      	ldr	r1, [r3, #8]
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	431a      	orrs	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 f9a2 	bl	8008e0e <RTC_ExitInitMode>
 8008aca:	4603      	mov	r3, r0
 8008acc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008ace:	7cfb      	ldrb	r3, [r7, #19]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d102      	bne.n	8008ada <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	22ff      	movs	r2, #255	@ 0xff
 8008ae0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	771a      	strb	r2, [r3, #28]

  return status;
 8008ae8:	7cfb      	ldrb	r3, [r7, #19]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	371c      	adds	r7, #28
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd90      	pop	{r4, r7, pc}

08008af2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b086      	sub	sp, #24
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008b24:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008b28:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	0c1b      	lsrs	r3, r3, #16
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	0a1b      	lsrs	r3, r3, #8
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	0d9b      	lsrs	r3, r3, #22
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d11a      	bne.n	8008ba4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 f98e 	bl	8008e94 <RTC_Bcd2ToByte>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	785b      	ldrb	r3, [r3, #1]
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 f985 	bl	8008e94 <RTC_Bcd2ToByte>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	789b      	ldrb	r3, [r3, #2]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 f97c 	bl	8008e94 <RTC_Bcd2ToByte>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3718      	adds	r7, #24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008bae:	b590      	push	{r4, r7, lr}
 8008bb0:	b087      	sub	sp, #28
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	60f8      	str	r0, [r7, #12]
 8008bb6:	60b9      	str	r1, [r7, #8]
 8008bb8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	7f1b      	ldrb	r3, [r3, #28]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d101      	bne.n	8008bca <HAL_RTC_SetDate+0x1c>
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	e071      	b.n	8008cae <HAL_RTC_SetDate+0x100>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10e      	bne.n	8008bfa <HAL_RTC_SetDate+0x4c>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	785b      	ldrb	r3, [r3, #1]
 8008be0:	f003 0310 	and.w	r3, r3, #16
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d008      	beq.n	8008bfa <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	785b      	ldrb	r3, [r3, #1]
 8008bec:	f023 0310 	bic.w	r3, r3, #16
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	330a      	adds	r3, #10
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d11c      	bne.n	8008c3a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	78db      	ldrb	r3, [r3, #3]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 f927 	bl	8008e58 <RTC_ByteToBcd2>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	785b      	ldrb	r3, [r3, #1]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 f920 	bl	8008e58 <RTC_ByteToBcd2>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008c1c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	789b      	ldrb	r3, [r3, #2]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 f918 	bl	8008e58 <RTC_ByteToBcd2>
 8008c28:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008c2a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008c34:	4313      	orrs	r3, r2
 8008c36:	617b      	str	r3, [r7, #20]
 8008c38:	e00e      	b.n	8008c58 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	78db      	ldrb	r3, [r3, #3]
 8008c3e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	785b      	ldrb	r3, [r3, #1]
 8008c44:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c46:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008c4c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c54:	4313      	orrs	r3, r2
 8008c56:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	22ca      	movs	r2, #202	@ 0xca
 8008c5e:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2253      	movs	r2, #83	@ 0x53
 8008c66:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 f899 	bl	8008da0 <RTC_EnterInitMode>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008c72:	7cfb      	ldrb	r3, [r7, #19]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10c      	bne.n	8008c92 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008c82:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008c86:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f000 f8c0 	bl	8008e0e <RTC_ExitInitMode>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008c92:	7cfb      	ldrb	r3, [r7, #19]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d102      	bne.n	8008c9e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	22ff      	movs	r2, #255	@ 0xff
 8008ca4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	771a      	strb	r2, [r3, #28]

  return status;
 8008cac:	7cfb      	ldrb	r3, [r7, #19]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	371c      	adds	r7, #28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd90      	pop	{r4, r7, pc}

08008cb6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b086      	sub	sp, #24
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	60f8      	str	r0, [r7, #12]
 8008cbe:	60b9      	str	r1, [r7, #8]
 8008cc0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008cd0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008cd4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	0c1b      	lsrs	r3, r3, #16
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	0a1b      	lsrs	r3, r3, #8
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	f003 031f 	and.w	r3, r3, #31
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	0b5b      	lsrs	r3, r3, #13
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f003 0307 	and.w	r3, r3, #7
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d11a      	bne.n	8008d4a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	78db      	ldrb	r3, [r3, #3]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 f8bb 	bl	8008e94 <RTC_Bcd2ToByte>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	461a      	mov	r2, r3
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	785b      	ldrb	r3, [r3, #1]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 f8b2 	bl	8008e94 <RTC_Bcd2ToByte>
 8008d30:	4603      	mov	r3, r0
 8008d32:	461a      	mov	r2, r3
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	789b      	ldrb	r3, [r3, #2]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f000 f8a9 	bl	8008e94 <RTC_Bcd2ToByte>
 8008d42:	4603      	mov	r3, r0
 8008d44:	461a      	mov	r2, r3
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3718      	adds	r7, #24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a0d      	ldr	r2, [pc, #52]	@ (8008d9c <HAL_RTC_WaitForSynchro+0x48>)
 8008d66:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d68:	f7fb f9b6 	bl	80040d8 <HAL_GetTick>
 8008d6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d6e:	e009      	b.n	8008d84 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d70:	f7fb f9b2 	bl	80040d8 <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d7e:	d901      	bls.n	8008d84 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e007      	b.n	8008d94 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	f003 0320 	and.w	r3, r3, #32
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d0ee      	beq.n	8008d70 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	00013f5f 	.word	0x00013f5f

08008da0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d122      	bne.n	8008e04 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008dcc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008dce:	f7fb f983 	bl	80040d8 <HAL_GetTick>
 8008dd2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008dd4:	e00c      	b.n	8008df0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008dd6:	f7fb f97f 	bl	80040d8 <HAL_GetTick>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008de4:	d904      	bls.n	8008df0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2204      	movs	r2, #4
 8008dea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d102      	bne.n	8008e04 <RTC_EnterInitMode+0x64>
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d1e8      	bne.n	8008dd6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b084      	sub	sp, #16
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68da      	ldr	r2, [r3, #12]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e28:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	f003 0320 	and.w	r3, r3, #32
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10a      	bne.n	8008e4e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7ff ff8b 	bl	8008d54 <HAL_RTC_WaitForSynchro>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d004      	beq.n	8008e4e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2204      	movs	r2, #4
 8008e48:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	4603      	mov	r3, r0
 8008e60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008e62:	2300      	movs	r3, #0
 8008e64:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8008e66:	e005      	b.n	8008e74 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008e6e:	79fb      	ldrb	r3, [r7, #7]
 8008e70:	3b0a      	subs	r3, #10
 8008e72:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008e74:	79fb      	ldrb	r3, [r7, #7]
 8008e76:	2b09      	cmp	r3, #9
 8008e78:	d8f6      	bhi.n	8008e68 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	011b      	lsls	r3, r3, #4
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	79fb      	ldrb	r3, [r7, #7]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	b2db      	uxtb	r3, r3
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8008ea2:	79fb      	ldrb	r3, [r7, #7]
 8008ea4:	091b      	lsrs	r3, r3, #4
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	4613      	mov	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	79fb      	ldrb	r3, [r7, #7]
 8008eba:	f003 030f 	and.w	r3, r3, #15
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	4413      	add	r3, r2
 8008ec2:	b2db      	uxtb	r3, r3
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e07b      	b.n	8008fda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d108      	bne.n	8008efc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ef2:	d009      	beq.n	8008f08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	61da      	str	r2, [r3, #28]
 8008efa:	e005      	b.n	8008f08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d106      	bne.n	8008f28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f7fa fb92 	bl	800364c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008f50:	431a      	orrs	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	f003 0302 	and.w	r3, r3, #2
 8008f64:	431a      	orrs	r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	f003 0301 	and.w	r3, r3, #1
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f78:	431a      	orrs	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f82:	431a      	orrs	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f8c:	ea42 0103 	orr.w	r1, r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f94:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	0c1b      	lsrs	r3, r3, #16
 8008fa6:	f003 0104 	and.w	r1, r3, #4
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fae:	f003 0210 	and.w	r2, r3, #16
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	69da      	ldr	r2, [r3, #28]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008fc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
	...

08008fe4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d001      	beq.n	8009002 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008ffe:	2302      	movs	r3, #2
 8009000:	e097      	b.n	8009132 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <HAL_SPI_Transmit_DMA+0x2a>
 8009008:	88fb      	ldrh	r3, [r7, #6]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d101      	bne.n	8009012 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e08f      	b.n	8009132 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009018:	2b01      	cmp	r3, #1
 800901a:	d101      	bne.n	8009020 <HAL_SPI_Transmit_DMA+0x3c>
 800901c:	2302      	movs	r3, #2
 800901e:	e088      	b.n	8009132 <HAL_SPI_Transmit_DMA+0x14e>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2203      	movs	r2, #3
 800902c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	88fa      	ldrh	r2, [r7, #6]
 8009040:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	88fa      	ldrh	r2, [r7, #6]
 8009046:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800906e:	d10f      	bne.n	8009090 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800907e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800908e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009094:	4a29      	ldr	r2, [pc, #164]	@ (800913c <HAL_SPI_Transmit_DMA+0x158>)
 8009096:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800909c:	4a28      	ldr	r2, [pc, #160]	@ (8009140 <HAL_SPI_Transmit_DMA+0x15c>)
 800909e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090a4:	4a27      	ldr	r2, [pc, #156]	@ (8009144 <HAL_SPI_Transmit_DMA+0x160>)
 80090a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090ac:	2200      	movs	r2, #0
 80090ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b8:	4619      	mov	r1, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	330c      	adds	r3, #12
 80090c0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090c6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80090c8:	f7fb fd0c 	bl	8004ae4 <HAL_DMA_Start_IT>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00b      	beq.n	80090ea <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090d6:	f043 0210 	orr.w	r2, r3, #16
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e023      	b.n	8009132 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090f4:	2b40      	cmp	r3, #64	@ 0x40
 80090f6:	d007      	beq.n	8009108 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009106:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f042 0220 	orr.w	r2, r2, #32
 800911e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	685a      	ldr	r2, [r3, #4]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f042 0202 	orr.w	r2, r2, #2
 800912e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	08009401 	.word	0x08009401
 8009140:	08009359 	.word	0x08009359
 8009144:	0800941d 	.word	0x0800941d

08009148 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b088      	sub	sp, #32
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10e      	bne.n	8009188 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009170:	2b00      	cmp	r3, #0
 8009172:	d009      	beq.n	8009188 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800917a:	2b00      	cmp	r3, #0
 800917c:	d004      	beq.n	8009188 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	4798      	blx	r3
    return;
 8009186:	e0ce      	b.n	8009326 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	2b00      	cmp	r3, #0
 8009190:	d009      	beq.n	80091a6 <HAL_SPI_IRQHandler+0x5e>
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009198:	2b00      	cmp	r3, #0
 800919a:	d004      	beq.n	80091a6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	4798      	blx	r3
    return;
 80091a4:	e0bf      	b.n	8009326 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	f003 0320 	and.w	r3, r3, #32
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10a      	bne.n	80091c6 <HAL_SPI_IRQHandler+0x7e>
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d105      	bne.n	80091c6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 80b0 	beq.w	8009326 <HAL_SPI_IRQHandler+0x1de>
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	f003 0320 	and.w	r3, r3, #32
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 80aa 	beq.w	8009326 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d023      	beq.n	8009224 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	d011      	beq.n	800920c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091ec:	f043 0204 	orr.w	r2, r3, #4
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091f4:	2300      	movs	r3, #0
 80091f6:	617b      	str	r3, [r7, #20]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	617b      	str	r3, [r7, #20]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	617b      	str	r3, [r7, #20]
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	e00b      	b.n	8009224 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800920c:	2300      	movs	r3, #0
 800920e:	613b      	str	r3, [r7, #16]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	613b      	str	r3, [r7, #16]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	613b      	str	r3, [r7, #16]
 8009220:	693b      	ldr	r3, [r7, #16]
        return;
 8009222:	e080      	b.n	8009326 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	f003 0320 	and.w	r3, r3, #32
 800922a:	2b00      	cmp	r3, #0
 800922c:	d014      	beq.n	8009258 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009232:	f043 0201 	orr.w	r2, r3, #1
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800923a:	2300      	movs	r3, #0
 800923c:	60fb      	str	r3, [r7, #12]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	60fb      	str	r3, [r7, #12]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00c      	beq.n	800927c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009266:	f043 0208 	orr.w	r2, r3, #8
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800926e:	2300      	movs	r3, #0
 8009270:	60bb      	str	r3, [r7, #8]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	60bb      	str	r3, [r7, #8]
 800927a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009280:	2b00      	cmp	r3, #0
 8009282:	d04f      	beq.n	8009324 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009292:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	f003 0302 	and.w	r3, r3, #2
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d104      	bne.n	80092b0 <HAL_SPI_IRQHandler+0x168>
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d034      	beq.n	800931a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f022 0203 	bic.w	r2, r2, #3
 80092be:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d011      	beq.n	80092ec <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092cc:	4a17      	ldr	r2, [pc, #92]	@ (800932c <HAL_SPI_IRQHandler+0x1e4>)
 80092ce:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fb fc5d 	bl	8004b94 <HAL_DMA_Abort_IT>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d005      	beq.n	80092ec <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d016      	beq.n	8009322 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092f8:	4a0c      	ldr	r2, [pc, #48]	@ (800932c <HAL_SPI_IRQHandler+0x1e4>)
 80092fa:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009300:	4618      	mov	r0, r3
 8009302:	f7fb fc47 	bl	8004b94 <HAL_DMA_Abort_IT>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00a      	beq.n	8009322 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009310:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8009318:	e003      	b.n	8009322 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f812 	bl	8009344 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009320:	e000      	b.n	8009324 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8009322:	bf00      	nop
    return;
 8009324:	bf00      	nop
  }
}
 8009326:	3720      	adds	r7, #32
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	0800945d 	.word	0x0800945d

08009330 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009364:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009366:	f7fa feb7 	bl	80040d8 <HAL_GetTick>
 800936a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800937a:	d03b      	beq.n	80093f4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f022 0220 	bic.w	r2, r2, #32
 800938a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f022 0202 	bic.w	r2, r2, #2
 800939a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	2164      	movs	r1, #100	@ 0x64
 80093a0:	6978      	ldr	r0, [r7, #20]
 80093a2:	f000 f8f7 	bl	8009594 <SPI_EndRxTxTransaction>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d005      	beq.n	80093b8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093b0:	f043 0220 	orr.w	r2, r3, #32
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10a      	bne.n	80093d6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093c0:	2300      	movs	r3, #0
 80093c2:	60fb      	str	r3, [r7, #12]
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	60fb      	str	r3, [r7, #12]
 80093d4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2200      	movs	r2, #0
 80093da:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2201      	movs	r2, #1
 80093e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d003      	beq.n	80093f4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80093ec:	6978      	ldr	r0, [r7, #20]
 80093ee:	f7ff ffa9 	bl	8009344 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80093f2:	e002      	b.n	80093fa <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80093f4:	6978      	ldr	r0, [r7, #20]
 80093f6:	f7f7 fbc7 	bl	8000b88 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800940c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f7ff ff8e 	bl	8009330 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009414:	bf00      	nop
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009428:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f022 0203 	bic.w	r2, r2, #3
 8009438:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800943e:	f043 0210 	orr.w	r2, r3, #16
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f7ff ff78 	bl	8009344 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009454:	bf00      	nop
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009468:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f7ff ff64 	bl	8009344 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800947c:	bf00      	nop
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b088      	sub	sp, #32
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	603b      	str	r3, [r7, #0]
 8009490:	4613      	mov	r3, r2
 8009492:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009494:	f7fa fe20 	bl	80040d8 <HAL_GetTick>
 8009498:	4602      	mov	r2, r0
 800949a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949c:	1a9b      	subs	r3, r3, r2
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	4413      	add	r3, r2
 80094a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80094a4:	f7fa fe18 	bl	80040d8 <HAL_GetTick>
 80094a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80094aa:	4b39      	ldr	r3, [pc, #228]	@ (8009590 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	015b      	lsls	r3, r3, #5
 80094b0:	0d1b      	lsrs	r3, r3, #20
 80094b2:	69fa      	ldr	r2, [r7, #28]
 80094b4:	fb02 f303 	mul.w	r3, r2, r3
 80094b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094ba:	e054      	b.n	8009566 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c2:	d050      	beq.n	8009566 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094c4:	f7fa fe08 	bl	80040d8 <HAL_GetTick>
 80094c8:	4602      	mov	r2, r0
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	69fa      	ldr	r2, [r7, #28]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d902      	bls.n	80094da <SPI_WaitFlagStateUntilTimeout+0x56>
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d13d      	bne.n	8009556 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	685a      	ldr	r2, [r3, #4]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80094e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094f2:	d111      	bne.n	8009518 <SPI_WaitFlagStateUntilTimeout+0x94>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094fc:	d004      	beq.n	8009508 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009506:	d107      	bne.n	8009518 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009516:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800951c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009520:	d10f      	bne.n	8009542 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009540:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e017      	b.n	8009586 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d101      	bne.n	8009560 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800955c:	2300      	movs	r3, #0
 800955e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	3b01      	subs	r3, #1
 8009564:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	689a      	ldr	r2, [r3, #8]
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	4013      	ands	r3, r2
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	429a      	cmp	r2, r3
 8009574:	bf0c      	ite	eq
 8009576:	2301      	moveq	r3, #1
 8009578:	2300      	movne	r3, #0
 800957a:	b2db      	uxtb	r3, r3
 800957c:	461a      	mov	r2, r3
 800957e:	79fb      	ldrb	r3, [r7, #7]
 8009580:	429a      	cmp	r2, r3
 8009582:	d19b      	bne.n	80094bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3720      	adds	r7, #32
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20000030 	.word	0x20000030

08009594 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b088      	sub	sp, #32
 8009598:	af02      	add	r7, sp, #8
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	2201      	movs	r2, #1
 80095a8:	2102      	movs	r1, #2
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f7ff ff6a 	bl	8009484 <SPI_WaitFlagStateUntilTimeout>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d007      	beq.n	80095c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095ba:	f043 0220 	orr.w	r2, r3, #32
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e032      	b.n	800962c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80095c6:	4b1b      	ldr	r3, [pc, #108]	@ (8009634 <SPI_EndRxTxTransaction+0xa0>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a1b      	ldr	r2, [pc, #108]	@ (8009638 <SPI_EndRxTxTransaction+0xa4>)
 80095cc:	fba2 2303 	umull	r2, r3, r2, r3
 80095d0:	0d5b      	lsrs	r3, r3, #21
 80095d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80095d6:	fb02 f303 	mul.w	r3, r2, r3
 80095da:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095e4:	d112      	bne.n	800960c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	2200      	movs	r2, #0
 80095ee:	2180      	movs	r1, #128	@ 0x80
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f7ff ff47 	bl	8009484 <SPI_WaitFlagStateUntilTimeout>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d016      	beq.n	800962a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009600:	f043 0220 	orr.w	r2, r3, #32
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009608:	2303      	movs	r3, #3
 800960a:	e00f      	b.n	800962c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00a      	beq.n	8009628 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	3b01      	subs	r3, #1
 8009616:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009622:	2b80      	cmp	r3, #128	@ 0x80
 8009624:	d0f2      	beq.n	800960c <SPI_EndRxTxTransaction+0x78>
 8009626:	e000      	b.n	800962a <SPI_EndRxTxTransaction+0x96>
        break;
 8009628:	bf00      	nop
  }

  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3718      	adds	r7, #24
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	20000030 	.word	0x20000030
 8009638:	165e9f81 	.word	0x165e9f81

0800963c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e041      	b.n	80096d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009654:	b2db      	uxtb	r3, r3
 8009656:	2b00      	cmp	r3, #0
 8009658:	d106      	bne.n	8009668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f7fa fb3a 	bl	8003cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2202      	movs	r2, #2
 800966c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3304      	adds	r3, #4
 8009678:	4619      	mov	r1, r3
 800967a:	4610      	mov	r0, r2
 800967c:	f000 fd86 	bl	800a18c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
	...

080096dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d001      	beq.n	80096f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e044      	b.n	800977e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2202      	movs	r2, #2
 80096f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68da      	ldr	r2, [r3, #12]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f042 0201 	orr.w	r2, r2, #1
 800970a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a1e      	ldr	r2, [pc, #120]	@ (800978c <HAL_TIM_Base_Start_IT+0xb0>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d018      	beq.n	8009748 <HAL_TIM_Base_Start_IT+0x6c>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800971e:	d013      	beq.n	8009748 <HAL_TIM_Base_Start_IT+0x6c>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a1a      	ldr	r2, [pc, #104]	@ (8009790 <HAL_TIM_Base_Start_IT+0xb4>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d00e      	beq.n	8009748 <HAL_TIM_Base_Start_IT+0x6c>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a19      	ldr	r2, [pc, #100]	@ (8009794 <HAL_TIM_Base_Start_IT+0xb8>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d009      	beq.n	8009748 <HAL_TIM_Base_Start_IT+0x6c>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a17      	ldr	r2, [pc, #92]	@ (8009798 <HAL_TIM_Base_Start_IT+0xbc>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d004      	beq.n	8009748 <HAL_TIM_Base_Start_IT+0x6c>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a16      	ldr	r2, [pc, #88]	@ (800979c <HAL_TIM_Base_Start_IT+0xc0>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d111      	bne.n	800976c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f003 0307 	and.w	r3, r3, #7
 8009752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2b06      	cmp	r3, #6
 8009758:	d010      	beq.n	800977c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f042 0201 	orr.w	r2, r2, #1
 8009768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800976a:	e007      	b.n	800977c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f042 0201 	orr.w	r2, r2, #1
 800977a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3714      	adds	r7, #20
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	40010000 	.word	0x40010000
 8009790:	40000400 	.word	0x40000400
 8009794:	40000800 	.word	0x40000800
 8009798:	40000c00 	.word	0x40000c00
 800979c:	40014000 	.word	0x40014000

080097a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d101      	bne.n	80097b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e041      	b.n	8009836 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d106      	bne.n	80097cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f839 	bl	800983e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2202      	movs	r2, #2
 80097d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	3304      	adds	r3, #4
 80097dc:	4619      	mov	r1, r3
 80097de:	4610      	mov	r0, r2
 80097e0:	f000 fcd4 	bl	800a18c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800983e:	b480      	push	{r7}
 8009840:	b083      	sub	sp, #12
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009846:	bf00      	nop
 8009848:	370c      	adds	r7, #12
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
	...

08009854 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d109      	bne.n	8009878 <HAL_TIM_PWM_Start+0x24>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b01      	cmp	r3, #1
 800986e:	bf14      	ite	ne
 8009870:	2301      	movne	r3, #1
 8009872:	2300      	moveq	r3, #0
 8009874:	b2db      	uxtb	r3, r3
 8009876:	e022      	b.n	80098be <HAL_TIM_PWM_Start+0x6a>
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	2b04      	cmp	r3, #4
 800987c:	d109      	bne.n	8009892 <HAL_TIM_PWM_Start+0x3e>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b01      	cmp	r3, #1
 8009888:	bf14      	ite	ne
 800988a:	2301      	movne	r3, #1
 800988c:	2300      	moveq	r3, #0
 800988e:	b2db      	uxtb	r3, r3
 8009890:	e015      	b.n	80098be <HAL_TIM_PWM_Start+0x6a>
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	2b08      	cmp	r3, #8
 8009896:	d109      	bne.n	80098ac <HAL_TIM_PWM_Start+0x58>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	bf14      	ite	ne
 80098a4:	2301      	movne	r3, #1
 80098a6:	2300      	moveq	r3, #0
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	e008      	b.n	80098be <HAL_TIM_PWM_Start+0x6a>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	bf14      	ite	ne
 80098b8:	2301      	movne	r3, #1
 80098ba:	2300      	moveq	r3, #0
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e068      	b.n	8009998 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d104      	bne.n	80098d6 <HAL_TIM_PWM_Start+0x82>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2202      	movs	r2, #2
 80098d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098d4:	e013      	b.n	80098fe <HAL_TIM_PWM_Start+0xaa>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2b04      	cmp	r3, #4
 80098da:	d104      	bne.n	80098e6 <HAL_TIM_PWM_Start+0x92>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2202      	movs	r2, #2
 80098e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098e4:	e00b      	b.n	80098fe <HAL_TIM_PWM_Start+0xaa>
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b08      	cmp	r3, #8
 80098ea:	d104      	bne.n	80098f6 <HAL_TIM_PWM_Start+0xa2>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2202      	movs	r2, #2
 80098f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80098f4:	e003      	b.n	80098fe <HAL_TIM_PWM_Start+0xaa>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2202      	movs	r2, #2
 80098fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2201      	movs	r2, #1
 8009904:	6839      	ldr	r1, [r7, #0]
 8009906:	4618      	mov	r0, r3
 8009908:	f000 fef2 	bl	800a6f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a23      	ldr	r2, [pc, #140]	@ (80099a0 <HAL_TIM_PWM_Start+0x14c>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d107      	bne.n	8009926 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009924:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a1d      	ldr	r2, [pc, #116]	@ (80099a0 <HAL_TIM_PWM_Start+0x14c>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d018      	beq.n	8009962 <HAL_TIM_PWM_Start+0x10e>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009938:	d013      	beq.n	8009962 <HAL_TIM_PWM_Start+0x10e>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a19      	ldr	r2, [pc, #100]	@ (80099a4 <HAL_TIM_PWM_Start+0x150>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d00e      	beq.n	8009962 <HAL_TIM_PWM_Start+0x10e>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a17      	ldr	r2, [pc, #92]	@ (80099a8 <HAL_TIM_PWM_Start+0x154>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d009      	beq.n	8009962 <HAL_TIM_PWM_Start+0x10e>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a16      	ldr	r2, [pc, #88]	@ (80099ac <HAL_TIM_PWM_Start+0x158>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d004      	beq.n	8009962 <HAL_TIM_PWM_Start+0x10e>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a14      	ldr	r2, [pc, #80]	@ (80099b0 <HAL_TIM_PWM_Start+0x15c>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d111      	bne.n	8009986 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	f003 0307 	and.w	r3, r3, #7
 800996c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2b06      	cmp	r3, #6
 8009972:	d010      	beq.n	8009996 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f042 0201 	orr.w	r2, r2, #1
 8009982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009984:	e007      	b.n	8009996 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f042 0201 	orr.w	r2, r2, #1
 8009994:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3710      	adds	r7, #16
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	40010000 	.word	0x40010000
 80099a4:	40000400 	.word	0x40000400
 80099a8:	40000800 	.word	0x40000800
 80099ac:	40000c00 	.word	0x40000c00
 80099b0:	40014000 	.word	0x40014000

080099b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e097      	b.n	8009af8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d106      	bne.n	80099e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f7fa f9bb 	bl	8003d58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2202      	movs	r2, #2
 80099e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	6812      	ldr	r2, [r2, #0]
 80099f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099f8:	f023 0307 	bic.w	r3, r3, #7
 80099fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	3304      	adds	r3, #4
 8009a06:	4619      	mov	r1, r3
 8009a08:	4610      	mov	r0, r2
 8009a0a:	f000 fbbf 	bl	800a18c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	6a1b      	ldr	r3, [r3, #32]
 8009a24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a36:	f023 0303 	bic.w	r3, r3, #3
 8009a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	689a      	ldr	r2, [r3, #8]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	021b      	lsls	r3, r3, #8
 8009a46:	4313      	orrs	r3, r2
 8009a48:	693a      	ldr	r2, [r7, #16]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009a54:	f023 030c 	bic.w	r3, r3, #12
 8009a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009a60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	68da      	ldr	r2, [r3, #12]
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	69db      	ldr	r3, [r3, #28]
 8009a6e:	021b      	lsls	r3, r3, #8
 8009a70:	4313      	orrs	r3, r2
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	4313      	orrs	r3, r2
 8009a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	011a      	lsls	r2, r3, #4
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	031b      	lsls	r3, r3, #12
 8009a84:	4313      	orrs	r3, r2
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009a92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009a9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	685a      	ldr	r2, [r3, #4]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	695b      	ldr	r3, [r3, #20]
 8009aa4:	011b      	lsls	r3, r3, #4
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	697a      	ldr	r2, [r7, #20]
 8009ab4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	693a      	ldr	r2, [r7, #16]
 8009abc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009b10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009b18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009b28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d110      	bne.n	8009b52 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d102      	bne.n	8009b3c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b36:	7b7b      	ldrb	r3, [r7, #13]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d001      	beq.n	8009b40 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e089      	b.n	8009c54 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2202      	movs	r2, #2
 8009b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b50:	e031      	b.n	8009bb6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	2b04      	cmp	r3, #4
 8009b56:	d110      	bne.n	8009b7a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b58:	7bbb      	ldrb	r3, [r7, #14]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d102      	bne.n	8009b64 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b5e:	7b3b      	ldrb	r3, [r7, #12]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d001      	beq.n	8009b68 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e075      	b.n	8009c54 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2202      	movs	r2, #2
 8009b74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b78:	e01d      	b.n	8009bb6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b7a:	7bfb      	ldrb	r3, [r7, #15]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d108      	bne.n	8009b92 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b80:	7bbb      	ldrb	r3, [r7, #14]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d105      	bne.n	8009b92 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b86:	7b7b      	ldrb	r3, [r7, #13]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d102      	bne.n	8009b92 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b8c:	7b3b      	ldrb	r3, [r7, #12]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d001      	beq.n	8009b96 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e05e      	b.n	8009c54 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2202      	movs	r2, #2
 8009b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2202      	movs	r2, #2
 8009ba2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2202      	movs	r2, #2
 8009baa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <HAL_TIM_Encoder_Start_IT+0xc4>
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	2b04      	cmp	r3, #4
 8009bc0:	d010      	beq.n	8009be4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8009bc2:	e01f      	b.n	8009c04 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	2100      	movs	r1, #0
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 fd8f 	bl	800a6f0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68da      	ldr	r2, [r3, #12]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f042 0202 	orr.w	r2, r2, #2
 8009be0:	60da      	str	r2, [r3, #12]
      break;
 8009be2:	e02e      	b.n	8009c42 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2201      	movs	r2, #1
 8009bea:	2104      	movs	r1, #4
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 fd7f 	bl	800a6f0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68da      	ldr	r2, [r3, #12]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f042 0204 	orr.w	r2, r2, #4
 8009c00:	60da      	str	r2, [r3, #12]
      break;
 8009c02:	e01e      	b.n	8009c42 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 fd6f 	bl	800a6f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2201      	movs	r2, #1
 8009c18:	2104      	movs	r1, #4
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f000 fd68 	bl	800a6f0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68da      	ldr	r2, [r3, #12]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f042 0202 	orr.w	r2, r2, #2
 8009c2e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68da      	ldr	r2, [r3, #12]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f042 0204 	orr.w	r2, r2, #4
 8009c3e:	60da      	str	r2, [r3, #12]
      break;
 8009c40:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f042 0201 	orr.w	r2, r2, #1
 8009c50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	f003 0302 	and.w	r3, r3, #2
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d020      	beq.n	8009cc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f003 0302 	and.w	r3, r3, #2
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d01b      	beq.n	8009cc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f06f 0202 	mvn.w	r2, #2
 8009c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	f003 0303 	and.w	r3, r3, #3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7f8 fca0 	bl	80025ec <HAL_TIM_IC_CaptureCallback>
 8009cac:	e005      	b.n	8009cba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fa4d 	bl	800a14e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fa54 	bl	800a162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	f003 0304 	and.w	r3, r3, #4
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d020      	beq.n	8009d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f003 0304 	and.w	r3, r3, #4
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d01b      	beq.n	8009d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f06f 0204 	mvn.w	r2, #4
 8009cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f7f8 fc7a 	bl	80025ec <HAL_TIM_IC_CaptureCallback>
 8009cf8:	e005      	b.n	8009d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fa27 	bl	800a14e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fa2e 	bl	800a162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f003 0308 	and.w	r3, r3, #8
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d020      	beq.n	8009d58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f003 0308 	and.w	r3, r3, #8
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d01b      	beq.n	8009d58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f06f 0208 	mvn.w	r2, #8
 8009d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2204      	movs	r2, #4
 8009d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	69db      	ldr	r3, [r3, #28]
 8009d36:	f003 0303 	and.w	r3, r3, #3
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d003      	beq.n	8009d46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7f8 fc54 	bl	80025ec <HAL_TIM_IC_CaptureCallback>
 8009d44:	e005      	b.n	8009d52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fa01 	bl	800a14e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 fa08 	bl	800a162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	f003 0310 	and.w	r3, r3, #16
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d020      	beq.n	8009da4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f003 0310 	and.w	r3, r3, #16
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d01b      	beq.n	8009da4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f06f 0210 	mvn.w	r2, #16
 8009d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2208      	movs	r2, #8
 8009d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d003      	beq.n	8009d92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7f8 fc2e 	bl	80025ec <HAL_TIM_IC_CaptureCallback>
 8009d90:	e005      	b.n	8009d9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f9db 	bl	800a14e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f9e2 	bl	800a162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	f003 0301 	and.w	r3, r3, #1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00c      	beq.n	8009dc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f003 0301 	and.w	r3, r3, #1
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d007      	beq.n	8009dc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f06f 0201 	mvn.w	r2, #1
 8009dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7f6 fd80 	bl	80008c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00c      	beq.n	8009dec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d007      	beq.n	8009dec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 fd72 	bl	800a8d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00c      	beq.n	8009e10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d007      	beq.n	8009e10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f9b3 	bl	800a176 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	f003 0320 	and.w	r3, r3, #32
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00c      	beq.n	8009e34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f003 0320 	and.w	r3, r3, #32
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d007      	beq.n	8009e34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f06f 0220 	mvn.w	r2, #32
 8009e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fd44 	bl	800a8bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e34:	bf00      	nop
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d101      	bne.n	8009e5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009e56:	2302      	movs	r3, #2
 8009e58:	e0ae      	b.n	8009fb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b0c      	cmp	r3, #12
 8009e66:	f200 809f 	bhi.w	8009fa8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e70:	08009ea5 	.word	0x08009ea5
 8009e74:	08009fa9 	.word	0x08009fa9
 8009e78:	08009fa9 	.word	0x08009fa9
 8009e7c:	08009fa9 	.word	0x08009fa9
 8009e80:	08009ee5 	.word	0x08009ee5
 8009e84:	08009fa9 	.word	0x08009fa9
 8009e88:	08009fa9 	.word	0x08009fa9
 8009e8c:	08009fa9 	.word	0x08009fa9
 8009e90:	08009f27 	.word	0x08009f27
 8009e94:	08009fa9 	.word	0x08009fa9
 8009e98:	08009fa9 	.word	0x08009fa9
 8009e9c:	08009fa9 	.word	0x08009fa9
 8009ea0:	08009f67 	.word	0x08009f67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68b9      	ldr	r1, [r7, #8]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 f9fa 	bl	800a2a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	699a      	ldr	r2, [r3, #24]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f042 0208 	orr.w	r2, r2, #8
 8009ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	699a      	ldr	r2, [r3, #24]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f022 0204 	bic.w	r2, r2, #4
 8009ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6999      	ldr	r1, [r3, #24]
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	691a      	ldr	r2, [r3, #16]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	430a      	orrs	r2, r1
 8009ee0:	619a      	str	r2, [r3, #24]
      break;
 8009ee2:	e064      	b.n	8009fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68b9      	ldr	r1, [r7, #8]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 fa40 	bl	800a370 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	699a      	ldr	r2, [r3, #24]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	699a      	ldr	r2, [r3, #24]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	6999      	ldr	r1, [r3, #24]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	021a      	lsls	r2, r3, #8
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	430a      	orrs	r2, r1
 8009f22:	619a      	str	r2, [r3, #24]
      break;
 8009f24:	e043      	b.n	8009fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68b9      	ldr	r1, [r7, #8]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f000 fa8b 	bl	800a448 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	69da      	ldr	r2, [r3, #28]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f042 0208 	orr.w	r2, r2, #8
 8009f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	69da      	ldr	r2, [r3, #28]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f022 0204 	bic.w	r2, r2, #4
 8009f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	69d9      	ldr	r1, [r3, #28]
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	691a      	ldr	r2, [r3, #16]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	430a      	orrs	r2, r1
 8009f62:	61da      	str	r2, [r3, #28]
      break;
 8009f64:	e023      	b.n	8009fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68b9      	ldr	r1, [r7, #8]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f000 fad5 	bl	800a51c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	69da      	ldr	r2, [r3, #28]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	69da      	ldr	r2, [r3, #28]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	69d9      	ldr	r1, [r3, #28]
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	021a      	lsls	r2, r3, #8
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	430a      	orrs	r2, r1
 8009fa4:	61da      	str	r2, [r3, #28]
      break;
 8009fa6:	e002      	b.n	8009fae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	75fb      	strb	r3, [r7, #23]
      break;
 8009fac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d101      	bne.n	8009fdc <HAL_TIM_ConfigClockSource+0x1c>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	e0b4      	b.n	800a146 <HAL_TIM_ConfigClockSource+0x186>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a002:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a014:	d03e      	beq.n	800a094 <HAL_TIM_ConfigClockSource+0xd4>
 800a016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a01a:	f200 8087 	bhi.w	800a12c <HAL_TIM_ConfigClockSource+0x16c>
 800a01e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a022:	f000 8086 	beq.w	800a132 <HAL_TIM_ConfigClockSource+0x172>
 800a026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a02a:	d87f      	bhi.n	800a12c <HAL_TIM_ConfigClockSource+0x16c>
 800a02c:	2b70      	cmp	r3, #112	@ 0x70
 800a02e:	d01a      	beq.n	800a066 <HAL_TIM_ConfigClockSource+0xa6>
 800a030:	2b70      	cmp	r3, #112	@ 0x70
 800a032:	d87b      	bhi.n	800a12c <HAL_TIM_ConfigClockSource+0x16c>
 800a034:	2b60      	cmp	r3, #96	@ 0x60
 800a036:	d050      	beq.n	800a0da <HAL_TIM_ConfigClockSource+0x11a>
 800a038:	2b60      	cmp	r3, #96	@ 0x60
 800a03a:	d877      	bhi.n	800a12c <HAL_TIM_ConfigClockSource+0x16c>
 800a03c:	2b50      	cmp	r3, #80	@ 0x50
 800a03e:	d03c      	beq.n	800a0ba <HAL_TIM_ConfigClockSource+0xfa>
 800a040:	2b50      	cmp	r3, #80	@ 0x50
 800a042:	d873      	bhi.n	800a12c <HAL_TIM_ConfigClockSource+0x16c>
 800a044:	2b40      	cmp	r3, #64	@ 0x40
 800a046:	d058      	beq.n	800a0fa <HAL_TIM_ConfigClockSource+0x13a>
 800a048:	2b40      	cmp	r3, #64	@ 0x40
 800a04a:	d86f      	bhi.n	800a12c <HAL_TIM_ConfigClockSource+0x16c>
 800a04c:	2b30      	cmp	r3, #48	@ 0x30
 800a04e:	d064      	beq.n	800a11a <HAL_TIM_ConfigClockSource+0x15a>
 800a050:	2b30      	cmp	r3, #48	@ 0x30
 800a052:	d86b      	bhi.n	800a12c <HAL_TIM_ConfigClockSource+0x16c>
 800a054:	2b20      	cmp	r3, #32
 800a056:	d060      	beq.n	800a11a <HAL_TIM_ConfigClockSource+0x15a>
 800a058:	2b20      	cmp	r3, #32
 800a05a:	d867      	bhi.n	800a12c <HAL_TIM_ConfigClockSource+0x16c>
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d05c      	beq.n	800a11a <HAL_TIM_ConfigClockSource+0x15a>
 800a060:	2b10      	cmp	r3, #16
 800a062:	d05a      	beq.n	800a11a <HAL_TIM_ConfigClockSource+0x15a>
 800a064:	e062      	b.n	800a12c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a076:	f000 fb1b 	bl	800a6b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a088:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	609a      	str	r2, [r3, #8]
      break;
 800a092:	e04f      	b.n	800a134 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a0a4:	f000 fb04 	bl	800a6b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689a      	ldr	r2, [r3, #8]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a0b6:	609a      	str	r2, [r3, #8]
      break;
 800a0b8:	e03c      	b.n	800a134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	f000 fa78 	bl	800a5bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2150      	movs	r1, #80	@ 0x50
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 fad1 	bl	800a67a <TIM_ITRx_SetConfig>
      break;
 800a0d8:	e02c      	b.n	800a134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	f000 fa97 	bl	800a61a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2160      	movs	r1, #96	@ 0x60
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f000 fac1 	bl	800a67a <TIM_ITRx_SetConfig>
      break;
 800a0f8:	e01c      	b.n	800a134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a106:	461a      	mov	r2, r3
 800a108:	f000 fa58 	bl	800a5bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2140      	movs	r1, #64	@ 0x40
 800a112:	4618      	mov	r0, r3
 800a114:	f000 fab1 	bl	800a67a <TIM_ITRx_SetConfig>
      break;
 800a118:	e00c      	b.n	800a134 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4619      	mov	r1, r3
 800a124:	4610      	mov	r0, r2
 800a126:	f000 faa8 	bl	800a67a <TIM_ITRx_SetConfig>
      break;
 800a12a:	e003      	b.n	800a134 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	73fb      	strb	r3, [r7, #15]
      break;
 800a130:	e000      	b.n	800a134 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a132:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a144:	7bfb      	ldrb	r3, [r7, #15]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a14e:	b480      	push	{r7}
 800a150:	b083      	sub	sp, #12
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a156:	bf00      	nop
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a162:	b480      	push	{r7}
 800a164:	b083      	sub	sp, #12
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a16a:	bf00      	nop
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr

0800a176 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a176:	b480      	push	{r7}
 800a178:	b083      	sub	sp, #12
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a17e:	bf00      	nop
 800a180:	370c      	adds	r7, #12
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
	...

0800a18c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a3a      	ldr	r2, [pc, #232]	@ (800a288 <TIM_Base_SetConfig+0xfc>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d00f      	beq.n	800a1c4 <TIM_Base_SetConfig+0x38>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1aa:	d00b      	beq.n	800a1c4 <TIM_Base_SetConfig+0x38>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a37      	ldr	r2, [pc, #220]	@ (800a28c <TIM_Base_SetConfig+0x100>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d007      	beq.n	800a1c4 <TIM_Base_SetConfig+0x38>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a36      	ldr	r2, [pc, #216]	@ (800a290 <TIM_Base_SetConfig+0x104>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d003      	beq.n	800a1c4 <TIM_Base_SetConfig+0x38>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a35      	ldr	r2, [pc, #212]	@ (800a294 <TIM_Base_SetConfig+0x108>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d108      	bne.n	800a1d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a2b      	ldr	r2, [pc, #172]	@ (800a288 <TIM_Base_SetConfig+0xfc>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d01b      	beq.n	800a216 <TIM_Base_SetConfig+0x8a>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1e4:	d017      	beq.n	800a216 <TIM_Base_SetConfig+0x8a>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a28      	ldr	r2, [pc, #160]	@ (800a28c <TIM_Base_SetConfig+0x100>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d013      	beq.n	800a216 <TIM_Base_SetConfig+0x8a>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a27      	ldr	r2, [pc, #156]	@ (800a290 <TIM_Base_SetConfig+0x104>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d00f      	beq.n	800a216 <TIM_Base_SetConfig+0x8a>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a26      	ldr	r2, [pc, #152]	@ (800a294 <TIM_Base_SetConfig+0x108>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d00b      	beq.n	800a216 <TIM_Base_SetConfig+0x8a>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a25      	ldr	r2, [pc, #148]	@ (800a298 <TIM_Base_SetConfig+0x10c>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d007      	beq.n	800a216 <TIM_Base_SetConfig+0x8a>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4a24      	ldr	r2, [pc, #144]	@ (800a29c <TIM_Base_SetConfig+0x110>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d003      	beq.n	800a216 <TIM_Base_SetConfig+0x8a>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4a23      	ldr	r2, [pc, #140]	@ (800a2a0 <TIM_Base_SetConfig+0x114>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d108      	bne.n	800a228 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a21c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	4313      	orrs	r3, r2
 800a226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	695b      	ldr	r3, [r3, #20]
 800a232:	4313      	orrs	r3, r2
 800a234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	689a      	ldr	r2, [r3, #8]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a0e      	ldr	r2, [pc, #56]	@ (800a288 <TIM_Base_SetConfig+0xfc>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d103      	bne.n	800a25c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	691a      	ldr	r2, [r3, #16]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d105      	bne.n	800a27a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	f023 0201 	bic.w	r2, r3, #1
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	611a      	str	r2, [r3, #16]
  }
}
 800a27a:	bf00      	nop
 800a27c:	3714      	adds	r7, #20
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	40010000 	.word	0x40010000
 800a28c:	40000400 	.word	0x40000400
 800a290:	40000800 	.word	0x40000800
 800a294:	40000c00 	.word	0x40000c00
 800a298:	40014000 	.word	0x40014000
 800a29c:	40014400 	.word	0x40014400
 800a2a0:	40014800 	.word	0x40014800

0800a2a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a1b      	ldr	r3, [r3, #32]
 800a2b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	f023 0201 	bic.w	r2, r3, #1
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	699b      	ldr	r3, [r3, #24]
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f023 0303 	bic.w	r3, r3, #3
 800a2da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	f023 0302 	bic.w	r3, r3, #2
 800a2ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	697a      	ldr	r2, [r7, #20]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a1c      	ldr	r2, [pc, #112]	@ (800a36c <TIM_OC1_SetConfig+0xc8>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d10c      	bne.n	800a31a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	f023 0308 	bic.w	r3, r3, #8
 800a306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	697a      	ldr	r2, [r7, #20]
 800a30e:	4313      	orrs	r3, r2
 800a310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	f023 0304 	bic.w	r3, r3, #4
 800a318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a13      	ldr	r2, [pc, #76]	@ (800a36c <TIM_OC1_SetConfig+0xc8>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d111      	bne.n	800a346 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	693a      	ldr	r2, [r7, #16]
 800a338:	4313      	orrs	r3, r2
 800a33a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	4313      	orrs	r3, r2
 800a344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	685a      	ldr	r2, [r3, #4]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	621a      	str	r2, [r3, #32]
}
 800a360:	bf00      	nop
 800a362:	371c      	adds	r7, #28
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr
 800a36c:	40010000 	.word	0x40010000

0800a370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a370:	b480      	push	{r7}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a1b      	ldr	r3, [r3, #32]
 800a384:	f023 0210 	bic.w	r2, r3, #16
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a39e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	021b      	lsls	r3, r3, #8
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	f023 0320 	bic.w	r3, r3, #32
 800a3ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	011b      	lsls	r3, r3, #4
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a1e      	ldr	r2, [pc, #120]	@ (800a444 <TIM_OC2_SetConfig+0xd4>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d10d      	bne.n	800a3ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	011b      	lsls	r3, r3, #4
 800a3de:	697a      	ldr	r2, [r7, #20]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a15      	ldr	r2, [pc, #84]	@ (800a444 <TIM_OC2_SetConfig+0xd4>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d113      	bne.n	800a41c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a3fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	695b      	ldr	r3, [r3, #20]
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	693a      	ldr	r2, [r7, #16]
 800a418:	4313      	orrs	r3, r2
 800a41a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	693a      	ldr	r2, [r7, #16]
 800a420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	685a      	ldr	r2, [r3, #4]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	697a      	ldr	r2, [r7, #20]
 800a434:	621a      	str	r2, [r3, #32]
}
 800a436:	bf00      	nop
 800a438:	371c      	adds	r7, #28
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	40010000 	.word	0x40010000

0800a448 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a448:	b480      	push	{r7}
 800a44a:	b087      	sub	sp, #28
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a1b      	ldr	r3, [r3, #32]
 800a456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a1b      	ldr	r3, [r3, #32]
 800a45c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	69db      	ldr	r3, [r3, #28]
 800a46e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f023 0303 	bic.w	r3, r3, #3
 800a47e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	4313      	orrs	r3, r2
 800a488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	021b      	lsls	r3, r3, #8
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a1d      	ldr	r2, [pc, #116]	@ (800a518 <TIM_OC3_SetConfig+0xd0>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d10d      	bne.n	800a4c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a4ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	021b      	lsls	r3, r3, #8
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a4c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a14      	ldr	r2, [pc, #80]	@ (800a518 <TIM_OC3_SetConfig+0xd0>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d113      	bne.n	800a4f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a4d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a4d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	011b      	lsls	r3, r3, #4
 800a4e0:	693a      	ldr	r2, [r7, #16]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	011b      	lsls	r3, r3, #4
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	685a      	ldr	r2, [r3, #4]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	621a      	str	r2, [r3, #32]
}
 800a50c:	bf00      	nop
 800a50e:	371c      	adds	r7, #28
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr
 800a518:	40010000 	.word	0x40010000

0800a51c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6a1b      	ldr	r3, [r3, #32]
 800a530:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a54a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	021b      	lsls	r3, r3, #8
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	031b      	lsls	r3, r3, #12
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	4313      	orrs	r3, r2
 800a572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a10      	ldr	r2, [pc, #64]	@ (800a5b8 <TIM_OC4_SetConfig+0x9c>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d109      	bne.n	800a590 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a582:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	695b      	ldr	r3, [r3, #20]
 800a588:	019b      	lsls	r3, r3, #6
 800a58a:	697a      	ldr	r2, [r7, #20]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	693a      	ldr	r2, [r7, #16]
 800a5a8:	621a      	str	r2, [r3, #32]
}
 800a5aa:	bf00      	nop
 800a5ac:	371c      	adds	r7, #28
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	40010000 	.word	0x40010000

0800a5bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b087      	sub	sp, #28
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6a1b      	ldr	r3, [r3, #32]
 800a5cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6a1b      	ldr	r3, [r3, #32]
 800a5d2:	f023 0201 	bic.w	r2, r3, #1
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	699b      	ldr	r3, [r3, #24]
 800a5de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a5e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	011b      	lsls	r3, r3, #4
 800a5ec:	693a      	ldr	r2, [r7, #16]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	f023 030a 	bic.w	r3, r3, #10
 800a5f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	621a      	str	r2, [r3, #32]
}
 800a60e:	bf00      	nop
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b087      	sub	sp, #28
 800a61e:	af00      	add	r7, sp, #0
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6a1b      	ldr	r3, [r3, #32]
 800a62a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6a1b      	ldr	r3, [r3, #32]
 800a630:	f023 0210 	bic.w	r2, r3, #16
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	699b      	ldr	r3, [r3, #24]
 800a63c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a644:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	031b      	lsls	r3, r3, #12
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a656:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	011b      	lsls	r3, r3, #4
 800a65c:	697a      	ldr	r2, [r7, #20]
 800a65e:	4313      	orrs	r3, r2
 800a660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	693a      	ldr	r2, [r7, #16]
 800a666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	621a      	str	r2, [r3, #32]
}
 800a66e:	bf00      	nop
 800a670:	371c      	adds	r7, #28
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b085      	sub	sp, #20
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	4313      	orrs	r3, r2
 800a698:	f043 0307 	orr.w	r3, r3, #7
 800a69c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	609a      	str	r2, [r3, #8]
}
 800a6a4:	bf00      	nop
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b087      	sub	sp, #28
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
 800a6bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a6ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	021a      	lsls	r2, r3, #8
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	431a      	orrs	r2, r3
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	697a      	ldr	r2, [r7, #20]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	609a      	str	r2, [r3, #8]
}
 800a6e4:	bf00      	nop
 800a6e6:	371c      	adds	r7, #28
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b087      	sub	sp, #28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f003 031f 	and.w	r3, r3, #31
 800a702:	2201      	movs	r2, #1
 800a704:	fa02 f303 	lsl.w	r3, r2, r3
 800a708:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6a1a      	ldr	r2, [r3, #32]
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	43db      	mvns	r3, r3
 800a712:	401a      	ands	r2, r3
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6a1a      	ldr	r2, [r3, #32]
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	f003 031f 	and.w	r3, r3, #31
 800a722:	6879      	ldr	r1, [r7, #4]
 800a724:	fa01 f303 	lsl.w	r3, r1, r3
 800a728:	431a      	orrs	r2, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	621a      	str	r2, [r3, #32]
}
 800a72e:	bf00      	nop
 800a730:	371c      	adds	r7, #28
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
	...

0800a73c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d101      	bne.n	800a754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a750:	2302      	movs	r3, #2
 800a752:	e050      	b.n	800a7f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2202      	movs	r2, #2
 800a760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a77a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	4313      	orrs	r3, r2
 800a784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a1c      	ldr	r2, [pc, #112]	@ (800a804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d018      	beq.n	800a7ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7a0:	d013      	beq.n	800a7ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a18      	ldr	r2, [pc, #96]	@ (800a808 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d00e      	beq.n	800a7ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a16      	ldr	r2, [pc, #88]	@ (800a80c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d009      	beq.n	800a7ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a15      	ldr	r2, [pc, #84]	@ (800a810 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d004      	beq.n	800a7ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a13      	ldr	r2, [pc, #76]	@ (800a814 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d10c      	bne.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	40010000 	.word	0x40010000
 800a808:	40000400 	.word	0x40000400
 800a80c:	40000800 	.word	0x40000800
 800a810:	40000c00 	.word	0x40000c00
 800a814:	40014000 	.word	0x40014000

0800a818 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a822:	2300      	movs	r3, #0
 800a824:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d101      	bne.n	800a834 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a830:	2302      	movs	r3, #2
 800a832:	e03d      	b.n	800a8b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	4313      	orrs	r3, r2
 800a848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	4313      	orrs	r3, r2
 800a856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	4313      	orrs	r3, r2
 800a864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4313      	orrs	r3, r2
 800a872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	4313      	orrs	r3, r2
 800a880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	695b      	ldr	r3, [r3, #20]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	69db      	ldr	r3, [r3, #28]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e042      	b.n	800a97c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d106      	bne.n	800a910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7f9 fad8 	bl	8003ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2224      	movs	r2, #36	@ 0x24
 800a914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68da      	ldr	r2, [r3, #12]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a926:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fa9f 	bl	800ae6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	691a      	ldr	r2, [r3, #16]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a93c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	695a      	ldr	r2, [r3, #20]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a94c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68da      	ldr	r2, [r3, #12]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a95c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2220      	movs	r2, #32
 800a968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2220      	movs	r2, #32
 800a970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3708      	adds	r7, #8
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	4613      	mov	r3, r2
 800a990:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b20      	cmp	r3, #32
 800a99c:	d112      	bne.n	800a9c4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d002      	beq.n	800a9aa <HAL_UART_Receive_DMA+0x26>
 800a9a4:	88fb      	ldrh	r3, [r7, #6]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d101      	bne.n	800a9ae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e00b      	b.n	800a9c6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a9b4:	88fb      	ldrh	r3, [r7, #6]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	68b9      	ldr	r1, [r7, #8]
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f000 f930 	bl	800ac20 <UART_Start_Receive_DMA>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	e000      	b.n	800a9c6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a9c4:	2302      	movs	r3, #2
  }
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b083      	sub	sp, #12
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a9d6:	bf00      	nop
 800a9d8:	370c      	adds	r7, #12
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b083      	sub	sp, #12
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a9ea:	bf00      	nop
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9f6:	b480      	push	{r7}
 800a9f8:	b083      	sub	sp, #12
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a9fe:	bf00      	nop
 800aa00:	370c      	adds	r7, #12
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b083      	sub	sp, #12
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	460b      	mov	r3, r1
 800aa14:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa16:	bf00      	nop
 800aa18:	370c      	adds	r7, #12
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr

0800aa22 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b09c      	sub	sp, #112	@ 0x70
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa2e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d172      	bne.n	800ab24 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800aa3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa40:	2200      	movs	r2, #0
 800aa42:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	330c      	adds	r3, #12
 800aa4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa4e:	e853 3f00 	ldrex	r3, [r3]
 800aa52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	330c      	adds	r3, #12
 800aa62:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aa64:	65ba      	str	r2, [r7, #88]	@ 0x58
 800aa66:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa6c:	e841 2300 	strex	r3, r2, [r1]
 800aa70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1e5      	bne.n	800aa44 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	3314      	adds	r3, #20
 800aa7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa82:	e853 3f00 	ldrex	r3, [r3]
 800aa86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa8a:	f023 0301 	bic.w	r3, r3, #1
 800aa8e:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	3314      	adds	r3, #20
 800aa96:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa98:	647a      	str	r2, [r7, #68]	@ 0x44
 800aa9a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aaa0:	e841 2300 	strex	r3, r2, [r1]
 800aaa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aaa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d1e5      	bne.n	800aa78 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	3314      	adds	r3, #20
 800aab2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab6:	e853 3f00 	ldrex	r3, [r3]
 800aaba:	623b      	str	r3, [r7, #32]
   return(result);
 800aabc:	6a3b      	ldr	r3, [r7, #32]
 800aabe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aac2:	663b      	str	r3, [r7, #96]	@ 0x60
 800aac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	3314      	adds	r3, #20
 800aaca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aacc:	633a      	str	r2, [r7, #48]	@ 0x30
 800aace:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aad4:	e841 2300 	strex	r3, r2, [r1]
 800aad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d1e5      	bne.n	800aaac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aae2:	2220      	movs	r2, #32
 800aae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aae8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d119      	bne.n	800ab24 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	330c      	adds	r3, #12
 800aaf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	e853 3f00 	ldrex	r3, [r3]
 800aafe:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f023 0310 	bic.w	r3, r3, #16
 800ab06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	330c      	adds	r3, #12
 800ab0e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ab10:	61fa      	str	r2, [r7, #28]
 800ab12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab14:	69b9      	ldr	r1, [r7, #24]
 800ab16:	69fa      	ldr	r2, [r7, #28]
 800ab18:	e841 2300 	strex	r3, r2, [r1]
 800ab1c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1e5      	bne.n	800aaf0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab26:	2200      	movs	r2, #0
 800ab28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d106      	bne.n	800ab40 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab36:	4619      	mov	r1, r3
 800ab38:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab3a:	f7ff ff66 	bl	800aa0a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab3e:	e002      	b.n	800ab46 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ab40:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab42:	f7ff ff44 	bl	800a9ce <HAL_UART_RxCpltCallback>
}
 800ab46:	bf00      	nop
 800ab48:	3770      	adds	r7, #112	@ 0x70
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b084      	sub	sp, #16
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab5a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d108      	bne.n	800ab7c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab6e:	085b      	lsrs	r3, r3, #1
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	4619      	mov	r1, r3
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f7ff ff48 	bl	800aa0a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab7a:	e002      	b.n	800ab82 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800ab7c:	68f8      	ldr	r0, [r7, #12]
 800ab7e:	f7ff ff30 	bl	800a9e2 <HAL_UART_RxHalfCpltCallback>
}
 800ab82:	bf00      	nop
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ab92:	2300      	movs	r3, #0
 800ab94:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab9a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	695b      	ldr	r3, [r3, #20]
 800aba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aba6:	2b80      	cmp	r3, #128	@ 0x80
 800aba8:	bf0c      	ite	eq
 800abaa:	2301      	moveq	r3, #1
 800abac:	2300      	movne	r3, #0
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	2b21      	cmp	r3, #33	@ 0x21
 800abbc:	d108      	bne.n	800abd0 <UART_DMAError+0x46>
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d005      	beq.n	800abd0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	2200      	movs	r2, #0
 800abc8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800abca:	68b8      	ldr	r0, [r7, #8]
 800abcc:	f000 f8c2 	bl	800ad54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	695b      	ldr	r3, [r3, #20]
 800abd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abda:	2b40      	cmp	r3, #64	@ 0x40
 800abdc:	bf0c      	ite	eq
 800abde:	2301      	moveq	r3, #1
 800abe0:	2300      	movne	r3, #0
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b22      	cmp	r3, #34	@ 0x22
 800abf0:	d108      	bne.n	800ac04 <UART_DMAError+0x7a>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d005      	beq.n	800ac04 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	2200      	movs	r2, #0
 800abfc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800abfe:	68b8      	ldr	r0, [r7, #8]
 800ac00:	f000 f8d0 	bl	800ada4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac08:	f043 0210 	orr.w	r2, r3, #16
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac10:	68b8      	ldr	r0, [r7, #8]
 800ac12:	f7ff fef0 	bl	800a9f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac16:	bf00      	nop
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
	...

0800ac20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b098      	sub	sp, #96	@ 0x60
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	88fa      	ldrh	r2, [r7, #6]
 800ac38:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2222      	movs	r2, #34	@ 0x22
 800ac44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac4c:	4a3e      	ldr	r2, [pc, #248]	@ (800ad48 <UART_Start_Receive_DMA+0x128>)
 800ac4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac54:	4a3d      	ldr	r2, [pc, #244]	@ (800ad4c <UART_Start_Receive_DMA+0x12c>)
 800ac56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac5c:	4a3c      	ldr	r2, [pc, #240]	@ (800ad50 <UART_Start_Receive_DMA+0x130>)
 800ac5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac64:	2200      	movs	r2, #0
 800ac66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ac68:	f107 0308 	add.w	r3, r7, #8
 800ac6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	3304      	adds	r3, #4
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	88fb      	ldrh	r3, [r7, #6]
 800ac80:	f7f9 ff30 	bl	8004ae4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ac84:	2300      	movs	r3, #0
 800ac86:	613b      	str	r3, [r7, #16]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	613b      	str	r3, [r7, #16]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	613b      	str	r3, [r7, #16]
 800ac98:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d019      	beq.n	800acd6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	330c      	adds	r3, #12
 800aca8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acac:	e853 3f00 	ldrex	r3, [r3]
 800acb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800acb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800acb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	330c      	adds	r3, #12
 800acc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800acc2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800acc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800acc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800acca:	e841 2300 	strex	r3, r2, [r1]
 800acce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800acd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1e5      	bne.n	800aca2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3314      	adds	r3, #20
 800acdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace0:	e853 3f00 	ldrex	r3, [r3]
 800ace4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ace6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace8:	f043 0301 	orr.w	r3, r3, #1
 800acec:	657b      	str	r3, [r7, #84]	@ 0x54
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	3314      	adds	r3, #20
 800acf4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800acf6:	63ba      	str	r2, [r7, #56]	@ 0x38
 800acf8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800acfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800acfe:	e841 2300 	strex	r3, r2, [r1]
 800ad02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1e5      	bne.n	800acd6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	3314      	adds	r3, #20
 800ad10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	e853 3f00 	ldrex	r3, [r3]
 800ad18:	617b      	str	r3, [r7, #20]
   return(result);
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad20:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3314      	adds	r3, #20
 800ad28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ad2a:	627a      	str	r2, [r7, #36]	@ 0x24
 800ad2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2e:	6a39      	ldr	r1, [r7, #32]
 800ad30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad32:	e841 2300 	strex	r3, r2, [r1]
 800ad36:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1e5      	bne.n	800ad0a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3760      	adds	r7, #96	@ 0x60
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	0800aa23 	.word	0x0800aa23
 800ad4c:	0800ab4f 	.word	0x0800ab4f
 800ad50:	0800ab8b 	.word	0x0800ab8b

0800ad54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b089      	sub	sp, #36	@ 0x24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	330c      	adds	r3, #12
 800ad62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	e853 3f00 	ldrex	r3, [r3]
 800ad6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ad72:	61fb      	str	r3, [r7, #28]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	330c      	adds	r3, #12
 800ad7a:	69fa      	ldr	r2, [r7, #28]
 800ad7c:	61ba      	str	r2, [r7, #24]
 800ad7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad80:	6979      	ldr	r1, [r7, #20]
 800ad82:	69ba      	ldr	r2, [r7, #24]
 800ad84:	e841 2300 	strex	r3, r2, [r1]
 800ad88:	613b      	str	r3, [r7, #16]
   return(result);
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1e5      	bne.n	800ad5c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2220      	movs	r2, #32
 800ad94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800ad98:	bf00      	nop
 800ad9a:	3724      	adds	r7, #36	@ 0x24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b095      	sub	sp, #84	@ 0x54
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	330c      	adds	r3, #12
 800adb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adb6:	e853 3f00 	ldrex	r3, [r3]
 800adba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800adbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800adc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	330c      	adds	r3, #12
 800adca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800adcc:	643a      	str	r2, [r7, #64]	@ 0x40
 800adce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800add2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800add4:	e841 2300 	strex	r3, r2, [r1]
 800add8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800adda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800addc:	2b00      	cmp	r3, #0
 800adde:	d1e5      	bne.n	800adac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	3314      	adds	r3, #20
 800ade6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade8:	6a3b      	ldr	r3, [r7, #32]
 800adea:	e853 3f00 	ldrex	r3, [r3]
 800adee:	61fb      	str	r3, [r7, #28]
   return(result);
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	f023 0301 	bic.w	r3, r3, #1
 800adf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	3314      	adds	r3, #20
 800adfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae08:	e841 2300 	strex	r3, r2, [r1]
 800ae0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d1e5      	bne.n	800ade0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d119      	bne.n	800ae50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	330c      	adds	r3, #12
 800ae22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	e853 3f00 	ldrex	r3, [r3]
 800ae2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	f023 0310 	bic.w	r3, r3, #16
 800ae32:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	330c      	adds	r3, #12
 800ae3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae3c:	61ba      	str	r2, [r7, #24]
 800ae3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae40:	6979      	ldr	r1, [r7, #20]
 800ae42:	69ba      	ldr	r2, [r7, #24]
 800ae44:	e841 2300 	strex	r3, r2, [r1]
 800ae48:	613b      	str	r3, [r7, #16]
   return(result);
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1e5      	bne.n	800ae1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2220      	movs	r2, #32
 800ae54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ae5e:	bf00      	nop
 800ae60:	3754      	adds	r7, #84	@ 0x54
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr
	...

0800ae6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae70:	b0c0      	sub	sp, #256	@ 0x100
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	691b      	ldr	r3, [r3, #16]
 800ae80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ae84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae88:	68d9      	ldr	r1, [r3, #12]
 800ae8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	ea40 0301 	orr.w	r3, r0, r1
 800ae94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae9a:	689a      	ldr	r2, [r3, #8]
 800ae9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	431a      	orrs	r2, r3
 800aea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aea8:	695b      	ldr	r3, [r3, #20]
 800aeaa:	431a      	orrs	r2, r3
 800aeac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeb0:	69db      	ldr	r3, [r3, #28]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aeb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800aec4:	f021 010c 	bic.w	r1, r1, #12
 800aec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800aed2:	430b      	orrs	r3, r1
 800aed4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	695b      	ldr	r3, [r3, #20]
 800aede:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800aee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aee6:	6999      	ldr	r1, [r3, #24]
 800aee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	ea40 0301 	orr.w	r3, r0, r1
 800aef2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	4b8f      	ldr	r3, [pc, #572]	@ (800b138 <UART_SetConfig+0x2cc>)
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d005      	beq.n	800af0c <UART_SetConfig+0xa0>
 800af00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	4b8d      	ldr	r3, [pc, #564]	@ (800b13c <UART_SetConfig+0x2d0>)
 800af08:	429a      	cmp	r2, r3
 800af0a:	d104      	bne.n	800af16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800af0c:	f7fd fbd2 	bl	80086b4 <HAL_RCC_GetPCLK2Freq>
 800af10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800af14:	e003      	b.n	800af1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800af16:	f7fd fbb9 	bl	800868c <HAL_RCC_GetPCLK1Freq>
 800af1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af22:	69db      	ldr	r3, [r3, #28]
 800af24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af28:	f040 810c 	bne.w	800b144 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af30:	2200      	movs	r2, #0
 800af32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800af36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800af3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800af3e:	4622      	mov	r2, r4
 800af40:	462b      	mov	r3, r5
 800af42:	1891      	adds	r1, r2, r2
 800af44:	65b9      	str	r1, [r7, #88]	@ 0x58
 800af46:	415b      	adcs	r3, r3
 800af48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800af4e:	4621      	mov	r1, r4
 800af50:	eb12 0801 	adds.w	r8, r2, r1
 800af54:	4629      	mov	r1, r5
 800af56:	eb43 0901 	adc.w	r9, r3, r1
 800af5a:	f04f 0200 	mov.w	r2, #0
 800af5e:	f04f 0300 	mov.w	r3, #0
 800af62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800af6e:	4690      	mov	r8, r2
 800af70:	4699      	mov	r9, r3
 800af72:	4623      	mov	r3, r4
 800af74:	eb18 0303 	adds.w	r3, r8, r3
 800af78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800af7c:	462b      	mov	r3, r5
 800af7e:	eb49 0303 	adc.w	r3, r9, r3
 800af82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800af86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800af92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800af96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800af9a:	460b      	mov	r3, r1
 800af9c:	18db      	adds	r3, r3, r3
 800af9e:	653b      	str	r3, [r7, #80]	@ 0x50
 800afa0:	4613      	mov	r3, r2
 800afa2:	eb42 0303 	adc.w	r3, r2, r3
 800afa6:	657b      	str	r3, [r7, #84]	@ 0x54
 800afa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800afac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800afb0:	f7f5 f910 	bl	80001d4 <__aeabi_uldivmod>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	4b61      	ldr	r3, [pc, #388]	@ (800b140 <UART_SetConfig+0x2d4>)
 800afba:	fba3 2302 	umull	r2, r3, r3, r2
 800afbe:	095b      	lsrs	r3, r3, #5
 800afc0:	011c      	lsls	r4, r3, #4
 800afc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800afc6:	2200      	movs	r2, #0
 800afc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800afcc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800afd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800afd4:	4642      	mov	r2, r8
 800afd6:	464b      	mov	r3, r9
 800afd8:	1891      	adds	r1, r2, r2
 800afda:	64b9      	str	r1, [r7, #72]	@ 0x48
 800afdc:	415b      	adcs	r3, r3
 800afde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800afe0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800afe4:	4641      	mov	r1, r8
 800afe6:	eb12 0a01 	adds.w	sl, r2, r1
 800afea:	4649      	mov	r1, r9
 800afec:	eb43 0b01 	adc.w	fp, r3, r1
 800aff0:	f04f 0200 	mov.w	r2, #0
 800aff4:	f04f 0300 	mov.w	r3, #0
 800aff8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800affc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b000:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b004:	4692      	mov	sl, r2
 800b006:	469b      	mov	fp, r3
 800b008:	4643      	mov	r3, r8
 800b00a:	eb1a 0303 	adds.w	r3, sl, r3
 800b00e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b012:	464b      	mov	r3, r9
 800b014:	eb4b 0303 	adc.w	r3, fp, r3
 800b018:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b01c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b028:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b02c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b030:	460b      	mov	r3, r1
 800b032:	18db      	adds	r3, r3, r3
 800b034:	643b      	str	r3, [r7, #64]	@ 0x40
 800b036:	4613      	mov	r3, r2
 800b038:	eb42 0303 	adc.w	r3, r2, r3
 800b03c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b03e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b042:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b046:	f7f5 f8c5 	bl	80001d4 <__aeabi_uldivmod>
 800b04a:	4602      	mov	r2, r0
 800b04c:	460b      	mov	r3, r1
 800b04e:	4611      	mov	r1, r2
 800b050:	4b3b      	ldr	r3, [pc, #236]	@ (800b140 <UART_SetConfig+0x2d4>)
 800b052:	fba3 2301 	umull	r2, r3, r3, r1
 800b056:	095b      	lsrs	r3, r3, #5
 800b058:	2264      	movs	r2, #100	@ 0x64
 800b05a:	fb02 f303 	mul.w	r3, r2, r3
 800b05e:	1acb      	subs	r3, r1, r3
 800b060:	00db      	lsls	r3, r3, #3
 800b062:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b066:	4b36      	ldr	r3, [pc, #216]	@ (800b140 <UART_SetConfig+0x2d4>)
 800b068:	fba3 2302 	umull	r2, r3, r3, r2
 800b06c:	095b      	lsrs	r3, r3, #5
 800b06e:	005b      	lsls	r3, r3, #1
 800b070:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b074:	441c      	add	r4, r3
 800b076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b07a:	2200      	movs	r2, #0
 800b07c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b080:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b084:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b088:	4642      	mov	r2, r8
 800b08a:	464b      	mov	r3, r9
 800b08c:	1891      	adds	r1, r2, r2
 800b08e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b090:	415b      	adcs	r3, r3
 800b092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b094:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b098:	4641      	mov	r1, r8
 800b09a:	1851      	adds	r1, r2, r1
 800b09c:	6339      	str	r1, [r7, #48]	@ 0x30
 800b09e:	4649      	mov	r1, r9
 800b0a0:	414b      	adcs	r3, r1
 800b0a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0a4:	f04f 0200 	mov.w	r2, #0
 800b0a8:	f04f 0300 	mov.w	r3, #0
 800b0ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b0b0:	4659      	mov	r1, fp
 800b0b2:	00cb      	lsls	r3, r1, #3
 800b0b4:	4651      	mov	r1, sl
 800b0b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0ba:	4651      	mov	r1, sl
 800b0bc:	00ca      	lsls	r2, r1, #3
 800b0be:	4610      	mov	r0, r2
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	4642      	mov	r2, r8
 800b0c6:	189b      	adds	r3, r3, r2
 800b0c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b0cc:	464b      	mov	r3, r9
 800b0ce:	460a      	mov	r2, r1
 800b0d0:	eb42 0303 	adc.w	r3, r2, r3
 800b0d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b0e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b0e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	18db      	adds	r3, r3, r3
 800b0f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	eb42 0303 	adc.w	r3, r2, r3
 800b0f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b0fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b102:	f7f5 f867 	bl	80001d4 <__aeabi_uldivmod>
 800b106:	4602      	mov	r2, r0
 800b108:	460b      	mov	r3, r1
 800b10a:	4b0d      	ldr	r3, [pc, #52]	@ (800b140 <UART_SetConfig+0x2d4>)
 800b10c:	fba3 1302 	umull	r1, r3, r3, r2
 800b110:	095b      	lsrs	r3, r3, #5
 800b112:	2164      	movs	r1, #100	@ 0x64
 800b114:	fb01 f303 	mul.w	r3, r1, r3
 800b118:	1ad3      	subs	r3, r2, r3
 800b11a:	00db      	lsls	r3, r3, #3
 800b11c:	3332      	adds	r3, #50	@ 0x32
 800b11e:	4a08      	ldr	r2, [pc, #32]	@ (800b140 <UART_SetConfig+0x2d4>)
 800b120:	fba2 2303 	umull	r2, r3, r2, r3
 800b124:	095b      	lsrs	r3, r3, #5
 800b126:	f003 0207 	and.w	r2, r3, #7
 800b12a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4422      	add	r2, r4
 800b132:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b134:	e106      	b.n	800b344 <UART_SetConfig+0x4d8>
 800b136:	bf00      	nop
 800b138:	40011000 	.word	0x40011000
 800b13c:	40011400 	.word	0x40011400
 800b140:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b148:	2200      	movs	r2, #0
 800b14a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b14e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b152:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b156:	4642      	mov	r2, r8
 800b158:	464b      	mov	r3, r9
 800b15a:	1891      	adds	r1, r2, r2
 800b15c:	6239      	str	r1, [r7, #32]
 800b15e:	415b      	adcs	r3, r3
 800b160:	627b      	str	r3, [r7, #36]	@ 0x24
 800b162:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b166:	4641      	mov	r1, r8
 800b168:	1854      	adds	r4, r2, r1
 800b16a:	4649      	mov	r1, r9
 800b16c:	eb43 0501 	adc.w	r5, r3, r1
 800b170:	f04f 0200 	mov.w	r2, #0
 800b174:	f04f 0300 	mov.w	r3, #0
 800b178:	00eb      	lsls	r3, r5, #3
 800b17a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b17e:	00e2      	lsls	r2, r4, #3
 800b180:	4614      	mov	r4, r2
 800b182:	461d      	mov	r5, r3
 800b184:	4643      	mov	r3, r8
 800b186:	18e3      	adds	r3, r4, r3
 800b188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b18c:	464b      	mov	r3, r9
 800b18e:	eb45 0303 	adc.w	r3, r5, r3
 800b192:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b1a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b1a6:	f04f 0200 	mov.w	r2, #0
 800b1aa:	f04f 0300 	mov.w	r3, #0
 800b1ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	008b      	lsls	r3, r1, #2
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1bc:	4621      	mov	r1, r4
 800b1be:	008a      	lsls	r2, r1, #2
 800b1c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b1c4:	f7f5 f806 	bl	80001d4 <__aeabi_uldivmod>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	4b60      	ldr	r3, [pc, #384]	@ (800b350 <UART_SetConfig+0x4e4>)
 800b1ce:	fba3 2302 	umull	r2, r3, r3, r2
 800b1d2:	095b      	lsrs	r3, r3, #5
 800b1d4:	011c      	lsls	r4, r3, #4
 800b1d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b1e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b1e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b1e8:	4642      	mov	r2, r8
 800b1ea:	464b      	mov	r3, r9
 800b1ec:	1891      	adds	r1, r2, r2
 800b1ee:	61b9      	str	r1, [r7, #24]
 800b1f0:	415b      	adcs	r3, r3
 800b1f2:	61fb      	str	r3, [r7, #28]
 800b1f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1f8:	4641      	mov	r1, r8
 800b1fa:	1851      	adds	r1, r2, r1
 800b1fc:	6139      	str	r1, [r7, #16]
 800b1fe:	4649      	mov	r1, r9
 800b200:	414b      	adcs	r3, r1
 800b202:	617b      	str	r3, [r7, #20]
 800b204:	f04f 0200 	mov.w	r2, #0
 800b208:	f04f 0300 	mov.w	r3, #0
 800b20c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b210:	4659      	mov	r1, fp
 800b212:	00cb      	lsls	r3, r1, #3
 800b214:	4651      	mov	r1, sl
 800b216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b21a:	4651      	mov	r1, sl
 800b21c:	00ca      	lsls	r2, r1, #3
 800b21e:	4610      	mov	r0, r2
 800b220:	4619      	mov	r1, r3
 800b222:	4603      	mov	r3, r0
 800b224:	4642      	mov	r2, r8
 800b226:	189b      	adds	r3, r3, r2
 800b228:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b22c:	464b      	mov	r3, r9
 800b22e:	460a      	mov	r2, r1
 800b230:	eb42 0303 	adc.w	r3, r2, r3
 800b234:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b242:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b244:	f04f 0200 	mov.w	r2, #0
 800b248:	f04f 0300 	mov.w	r3, #0
 800b24c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b250:	4649      	mov	r1, r9
 800b252:	008b      	lsls	r3, r1, #2
 800b254:	4641      	mov	r1, r8
 800b256:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b25a:	4641      	mov	r1, r8
 800b25c:	008a      	lsls	r2, r1, #2
 800b25e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b262:	f7f4 ffb7 	bl	80001d4 <__aeabi_uldivmod>
 800b266:	4602      	mov	r2, r0
 800b268:	460b      	mov	r3, r1
 800b26a:	4611      	mov	r1, r2
 800b26c:	4b38      	ldr	r3, [pc, #224]	@ (800b350 <UART_SetConfig+0x4e4>)
 800b26e:	fba3 2301 	umull	r2, r3, r3, r1
 800b272:	095b      	lsrs	r3, r3, #5
 800b274:	2264      	movs	r2, #100	@ 0x64
 800b276:	fb02 f303 	mul.w	r3, r2, r3
 800b27a:	1acb      	subs	r3, r1, r3
 800b27c:	011b      	lsls	r3, r3, #4
 800b27e:	3332      	adds	r3, #50	@ 0x32
 800b280:	4a33      	ldr	r2, [pc, #204]	@ (800b350 <UART_SetConfig+0x4e4>)
 800b282:	fba2 2303 	umull	r2, r3, r2, r3
 800b286:	095b      	lsrs	r3, r3, #5
 800b288:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b28c:	441c      	add	r4, r3
 800b28e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b292:	2200      	movs	r2, #0
 800b294:	673b      	str	r3, [r7, #112]	@ 0x70
 800b296:	677a      	str	r2, [r7, #116]	@ 0x74
 800b298:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b29c:	4642      	mov	r2, r8
 800b29e:	464b      	mov	r3, r9
 800b2a0:	1891      	adds	r1, r2, r2
 800b2a2:	60b9      	str	r1, [r7, #8]
 800b2a4:	415b      	adcs	r3, r3
 800b2a6:	60fb      	str	r3, [r7, #12]
 800b2a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b2ac:	4641      	mov	r1, r8
 800b2ae:	1851      	adds	r1, r2, r1
 800b2b0:	6039      	str	r1, [r7, #0]
 800b2b2:	4649      	mov	r1, r9
 800b2b4:	414b      	adcs	r3, r1
 800b2b6:	607b      	str	r3, [r7, #4]
 800b2b8:	f04f 0200 	mov.w	r2, #0
 800b2bc:	f04f 0300 	mov.w	r3, #0
 800b2c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b2c4:	4659      	mov	r1, fp
 800b2c6:	00cb      	lsls	r3, r1, #3
 800b2c8:	4651      	mov	r1, sl
 800b2ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2ce:	4651      	mov	r1, sl
 800b2d0:	00ca      	lsls	r2, r1, #3
 800b2d2:	4610      	mov	r0, r2
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	4642      	mov	r2, r8
 800b2da:	189b      	adds	r3, r3, r2
 800b2dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b2de:	464b      	mov	r3, r9
 800b2e0:	460a      	mov	r2, r1
 800b2e2:	eb42 0303 	adc.w	r3, r2, r3
 800b2e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b2e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b2f2:	667a      	str	r2, [r7, #100]	@ 0x64
 800b2f4:	f04f 0200 	mov.w	r2, #0
 800b2f8:	f04f 0300 	mov.w	r3, #0
 800b2fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b300:	4649      	mov	r1, r9
 800b302:	008b      	lsls	r3, r1, #2
 800b304:	4641      	mov	r1, r8
 800b306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b30a:	4641      	mov	r1, r8
 800b30c:	008a      	lsls	r2, r1, #2
 800b30e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b312:	f7f4 ff5f 	bl	80001d4 <__aeabi_uldivmod>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4b0d      	ldr	r3, [pc, #52]	@ (800b350 <UART_SetConfig+0x4e4>)
 800b31c:	fba3 1302 	umull	r1, r3, r3, r2
 800b320:	095b      	lsrs	r3, r3, #5
 800b322:	2164      	movs	r1, #100	@ 0x64
 800b324:	fb01 f303 	mul.w	r3, r1, r3
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	011b      	lsls	r3, r3, #4
 800b32c:	3332      	adds	r3, #50	@ 0x32
 800b32e:	4a08      	ldr	r2, [pc, #32]	@ (800b350 <UART_SetConfig+0x4e4>)
 800b330:	fba2 2303 	umull	r2, r3, r2, r3
 800b334:	095b      	lsrs	r3, r3, #5
 800b336:	f003 020f 	and.w	r2, r3, #15
 800b33a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4422      	add	r2, r4
 800b342:	609a      	str	r2, [r3, #8]
}
 800b344:	bf00      	nop
 800b346:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b34a:	46bd      	mov	sp, r7
 800b34c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b350:	51eb851f 	.word	0x51eb851f

0800b354 <memset>:
 800b354:	4402      	add	r2, r0
 800b356:	4603      	mov	r3, r0
 800b358:	4293      	cmp	r3, r2
 800b35a:	d100      	bne.n	800b35e <memset+0xa>
 800b35c:	4770      	bx	lr
 800b35e:	f803 1b01 	strb.w	r1, [r3], #1
 800b362:	e7f9      	b.n	800b358 <memset+0x4>

0800b364 <strncmp>:
 800b364:	b510      	push	{r4, lr}
 800b366:	b16a      	cbz	r2, 800b384 <strncmp+0x20>
 800b368:	3901      	subs	r1, #1
 800b36a:	1884      	adds	r4, r0, r2
 800b36c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b370:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b374:	429a      	cmp	r2, r3
 800b376:	d103      	bne.n	800b380 <strncmp+0x1c>
 800b378:	42a0      	cmp	r0, r4
 800b37a:	d001      	beq.n	800b380 <strncmp+0x1c>
 800b37c:	2a00      	cmp	r2, #0
 800b37e:	d1f5      	bne.n	800b36c <strncmp+0x8>
 800b380:	1ad0      	subs	r0, r2, r3
 800b382:	bd10      	pop	{r4, pc}
 800b384:	4610      	mov	r0, r2
 800b386:	e7fc      	b.n	800b382 <strncmp+0x1e>

0800b388 <strncpy>:
 800b388:	b510      	push	{r4, lr}
 800b38a:	3901      	subs	r1, #1
 800b38c:	4603      	mov	r3, r0
 800b38e:	b132      	cbz	r2, 800b39e <strncpy+0x16>
 800b390:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b394:	f803 4b01 	strb.w	r4, [r3], #1
 800b398:	3a01      	subs	r2, #1
 800b39a:	2c00      	cmp	r4, #0
 800b39c:	d1f7      	bne.n	800b38e <strncpy+0x6>
 800b39e:	441a      	add	r2, r3
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d100      	bne.n	800b3a8 <strncpy+0x20>
 800b3a6:	bd10      	pop	{r4, pc}
 800b3a8:	f803 1b01 	strb.w	r1, [r3], #1
 800b3ac:	e7f9      	b.n	800b3a2 <strncpy+0x1a>
	...

0800b3b0 <__libc_init_array>:
 800b3b0:	b570      	push	{r4, r5, r6, lr}
 800b3b2:	4d0d      	ldr	r5, [pc, #52]	@ (800b3e8 <__libc_init_array+0x38>)
 800b3b4:	4c0d      	ldr	r4, [pc, #52]	@ (800b3ec <__libc_init_array+0x3c>)
 800b3b6:	1b64      	subs	r4, r4, r5
 800b3b8:	10a4      	asrs	r4, r4, #2
 800b3ba:	2600      	movs	r6, #0
 800b3bc:	42a6      	cmp	r6, r4
 800b3be:	d109      	bne.n	800b3d4 <__libc_init_array+0x24>
 800b3c0:	4d0b      	ldr	r5, [pc, #44]	@ (800b3f0 <__libc_init_array+0x40>)
 800b3c2:	4c0c      	ldr	r4, [pc, #48]	@ (800b3f4 <__libc_init_array+0x44>)
 800b3c4:	f000 f818 	bl	800b3f8 <_init>
 800b3c8:	1b64      	subs	r4, r4, r5
 800b3ca:	10a4      	asrs	r4, r4, #2
 800b3cc:	2600      	movs	r6, #0
 800b3ce:	42a6      	cmp	r6, r4
 800b3d0:	d105      	bne.n	800b3de <__libc_init_array+0x2e>
 800b3d2:	bd70      	pop	{r4, r5, r6, pc}
 800b3d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3d8:	4798      	blx	r3
 800b3da:	3601      	adds	r6, #1
 800b3dc:	e7ee      	b.n	800b3bc <__libc_init_array+0xc>
 800b3de:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3e2:	4798      	blx	r3
 800b3e4:	3601      	adds	r6, #1
 800b3e6:	e7f2      	b.n	800b3ce <__libc_init_array+0x1e>
 800b3e8:	0800b51c 	.word	0x0800b51c
 800b3ec:	0800b51c 	.word	0x0800b51c
 800b3f0:	0800b51c 	.word	0x0800b51c
 800b3f4:	0800b520 	.word	0x0800b520

0800b3f8 <_init>:
 800b3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3fa:	bf00      	nop
 800b3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3fe:	bc08      	pop	{r3}
 800b400:	469e      	mov	lr, r3
 800b402:	4770      	bx	lr

0800b404 <_fini>:
 800b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b406:	bf00      	nop
 800b408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b40a:	bc08      	pop	{r3}
 800b40c:	469e      	mov	lr, r3
 800b40e:	4770      	bx	lr
