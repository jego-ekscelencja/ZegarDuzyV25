
ZegarDuzy21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b230  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800b3c4  0800b3c4  0000c3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4c8  0800b4c8  0000d03c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4c8  0800b4c8  0000c4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4d0  0800b4d0  0000d03c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4d0  0800b4d0  0000c4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b4d4  0800b4d4  0000c4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  0800b4d8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a20  2000003c  0800b514  0000d03c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a5c  0800b514  0000da5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d03c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7c2  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004568  00000000  00000000  0002882e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  0002cd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012d9  00000000  00000000  0002e5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf30  00000000  00000000  0002f899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021485  00000000  00000000  0004b7c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5681  00000000  00000000  0006cc4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001122cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064e4  00000000  00000000  00112314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  001187f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000003c 	.word	0x2000003c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800b3ac 	.word	0x0800b3ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000040 	.word	0x20000040
 80001d0:	0800b3ac 	.word	0x0800b3ac

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004d6:	4b21      	ldr	r3, [pc, #132]	@ (800055c <MX_ADC1_Init+0x98>)
 80004d8:	4a21      	ldr	r2, [pc, #132]	@ (8000560 <MX_ADC1_Init+0x9c>)
 80004da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004dc:	4b1f      	ldr	r3, [pc, #124]	@ (800055c <MX_ADC1_Init+0x98>)
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e2:	4b1e      	ldr	r3, [pc, #120]	@ (800055c <MX_ADC1_Init+0x98>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004e8:	4b1c      	ldr	r3, [pc, #112]	@ (800055c <MX_ADC1_Init+0x98>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ee:	4b1b      	ldr	r3, [pc, #108]	@ (800055c <MX_ADC1_Init+0x98>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f4:	4b19      	ldr	r3, [pc, #100]	@ (800055c <MX_ADC1_Init+0x98>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fc:	4b17      	ldr	r3, [pc, #92]	@ (800055c <MX_ADC1_Init+0x98>)
 80004fe:	2200      	movs	r2, #0
 8000500:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000502:	4b16      	ldr	r3, [pc, #88]	@ (800055c <MX_ADC1_Init+0x98>)
 8000504:	4a17      	ldr	r2, [pc, #92]	@ (8000564 <MX_ADC1_Init+0xa0>)
 8000506:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000508:	4b14      	ldr	r3, [pc, #80]	@ (800055c <MX_ADC1_Init+0x98>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800050e:	4b13      	ldr	r3, [pc, #76]	@ (800055c <MX_ADC1_Init+0x98>)
 8000510:	2201      	movs	r2, #1
 8000512:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000514:	4b11      	ldr	r3, [pc, #68]	@ (800055c <MX_ADC1_Init+0x98>)
 8000516:	2200      	movs	r2, #0
 8000518:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051c:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <MX_ADC1_Init+0x98>)
 800051e:	2201      	movs	r2, #1
 8000520:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000522:	480e      	ldr	r0, [pc, #56]	@ (800055c <MX_ADC1_Init+0x98>)
 8000524:	f003 fde2 	bl	80040ec <HAL_ADC_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800052e:	f001 fdb4 	bl	800209a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000532:	2303      	movs	r3, #3
 8000534:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053e:	463b      	mov	r3, r7
 8000540:	4619      	mov	r1, r3
 8000542:	4806      	ldr	r0, [pc, #24]	@ (800055c <MX_ADC1_Init+0x98>)
 8000544:	f003 feca 	bl	80042dc <HAL_ADC_ConfigChannel>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800054e:	f001 fda4 	bl	800209a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000058 	.word	0x20000058
 8000560:	40012000 	.word	0x40012000
 8000564:	0f000001 	.word	0x0f000001

08000568 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	@ 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a17      	ldr	r2, [pc, #92]	@ (80005e4 <HAL_ADC_MspInit+0x7c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d127      	bne.n	80005da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 8000590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000592:	4a15      	ldr	r2, [pc, #84]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 8000594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000598:	6453      	str	r3, [r2, #68]	@ 0x44
 800059a:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 800059c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800059e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a0e      	ldr	r2, [pc, #56]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005c2:	2308      	movs	r3, #8
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c6:	2303      	movs	r3, #3
 80005c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	@ (80005ec <HAL_ADC_MspInit+0x84>)
 80005d6:	f004 fd5d 	bl	8005094 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005da:	bf00      	nop
 80005dc:	3728      	adds	r7, #40	@ 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40012000 	.word	0x40012000
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020000 	.word	0x40020000

080005f0 <Encoder_RegisterRotateCallback>:
volatile uint8_t counter=0;

static EncoderRotateCallback_t s_encoderCb = NULL;

void Encoder_RegisterRotateCallback(EncoderRotateCallback_t cb)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    s_encoderCb = cb;
 80005f8:	4a04      	ldr	r2, [pc, #16]	@ (800060c <Encoder_RegisterRotateCallback+0x1c>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6013      	str	r3, [r2, #0]
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	200000a4 	.word	0x200000a4

08000610 <Encoder_UnregisterRotateCallback>:

void Encoder_UnregisterRotateCallback(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
    s_encoderCb = NULL;
 8000614:	4b03      	ldr	r3, [pc, #12]	@ (8000624 <Encoder_UnregisterRotateCallback+0x14>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	200000a4 	.word	0x200000a4

08000628 <Button_RegisterPressCallback>:
		0, 0, 0, false, 0, 0, false, NULL, NULL, NULL, NULL, NULL } //,
		//{BUTTON2_PORT, BUTTON2_PIN, BUTTON_RELEASED, 0, 0, 0, false, 0, 0, false, NULL, NULL, NULL, NULL, NULL}
};

// Implementacja funkcji rejestrujących callbacky
void Button_RegisterPressCallback(uint8_t buttonIndex, ButtonCallback cb) {
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d109      	bne.n	800064e <Button_RegisterPressCallback+0x26>
		buttons[buttonIndex].onPress = cb;
 800063a:	79fa      	ldrb	r2, [r7, #7]
 800063c:	4907      	ldr	r1, [pc, #28]	@ (800065c <Button_RegisterPressCallback+0x34>)
 800063e:	4613      	mov	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4413      	add	r3, r2
 8000644:	011b      	lsls	r3, r3, #4
 8000646:	440b      	add	r3, r1
 8000648:	331c      	adds	r3, #28
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	601a      	str	r2, [r3, #0]
	}
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000000 	.word	0x20000000

08000660 <Button_RegisterHoldCallback>:
	if (buttonIndex < NUM_BUTTONS) {
		buttons[buttonIndex].onRelease = cb;
	}
}

void Button_RegisterHoldCallback(uint8_t buttonIndex, ButtonCallback cb) {
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d109      	bne.n	8000686 <Button_RegisterHoldCallback+0x26>
		buttons[buttonIndex].onHold = cb;
 8000672:	79fa      	ldrb	r2, [r7, #7]
 8000674:	4907      	ldr	r1, [pc, #28]	@ (8000694 <Button_RegisterHoldCallback+0x34>)
 8000676:	4613      	mov	r3, r2
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	4413      	add	r3, r2
 800067c:	011b      	lsls	r3, r3, #4
 800067e:	440b      	add	r3, r1
 8000680:	3324      	adds	r3, #36	@ 0x24
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	601a      	str	r2, [r3, #0]
	}
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000000 	.word	0x20000000

08000698 <Button_RegisterDoubleClickCallback>:
	if (buttonIndex < NUM_BUTTONS) {
		buttons[buttonIndex].onRepeat = cb;
	}
}

void Button_RegisterDoubleClickCallback(uint8_t buttonIndex, ButtonCallback cb) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d109      	bne.n	80006be <Button_RegisterDoubleClickCallback+0x26>
		buttons[buttonIndex].onDoubleClick = cb;
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	4907      	ldr	r1, [pc, #28]	@ (80006cc <Button_RegisterDoubleClickCallback+0x34>)
 80006ae:	4613      	mov	r3, r2
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	4413      	add	r3, r2
 80006b4:	011b      	lsls	r3, r3, #4
 80006b6:	440b      	add	r3, r1
 80006b8:	332c      	adds	r3, #44	@ 0x2c
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	601a      	str	r2, [r3, #0]
	}
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000000 	.word	0x20000000

080006d0 <Button_Process>:

// Logika w przerwaniu timera
extern volatile uint32_t systemTicks;  // Globalny licznik taktów czasu

void Button_Process(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_BUTTONS; i++) {
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	e0e7      	b.n	80008ac <Button_Process+0x1dc>
        Button_t *btn = &buttons[i];
 80006dc:	68fa      	ldr	r2, [r7, #12]
 80006de:	4613      	mov	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	011b      	lsls	r3, r3, #4
 80006e6:	4a76      	ldr	r2, [pc, #472]	@ (80008c0 <Button_Process+0x1f0>)
 80006e8:	4413      	add	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]

        // Odczytaj aktualny stan przycisku
        bool rawState = (HAL_GPIO_ReadPin(btn->port, btn->pin) == GPIO_PIN_RESET);
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	889b      	ldrh	r3, [r3, #4]
 80006f4:	4619      	mov	r1, r3
 80006f6:	4610      	mov	r0, r2
 80006f8:	f004 fe50 	bl	800539c <HAL_GPIO_ReadPin>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	bf0c      	ite	eq
 8000702:	2301      	moveq	r3, #1
 8000704:	2300      	movne	r3, #0
 8000706:	71fb      	strb	r3, [r7, #7]

        // Debounce
        if (rawState != (btn->state == BUTTON_PRESSED)) {
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	7992      	ldrb	r2, [r2, #6]
 800070e:	2a01      	cmp	r2, #1
 8000710:	bf0c      	ite	eq
 8000712:	2201      	moveq	r2, #1
 8000714:	2200      	movne	r2, #0
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	4293      	cmp	r3, r2
 800071a:	d05d      	beq.n	80007d8 <Button_Process+0x108>
            btn->debounceCounter++;
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	79db      	ldrb	r3, [r3, #7]
 8000720:	3301      	adds	r3, #1
 8000722:	b2da      	uxtb	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	71da      	strb	r2, [r3, #7]
            if (btn->debounceCounter >= DEBOUNCE_TICKS) {
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	79db      	ldrb	r3, [r3, #7]
 800072c:	2b04      	cmp	r3, #4
 800072e:	d956      	bls.n	80007de <Button_Process+0x10e>
                btn->debounceCounter = 0;
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	2200      	movs	r2, #0
 8000734:	71da      	strb	r2, [r3, #7]
                if (rawState) {
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d00a      	beq.n	8000752 <Button_Process+0x82>
                    // Naciśnięcie
                    btn->state = BUTTON_PRESSED;
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	2201      	movs	r2, #1
 8000740:	719a      	strb	r2, [r3, #6]
                    btn->pressTime = systemTicks;
 8000742:	4b60      	ldr	r3, [pc, #384]	@ (80008c4 <Button_Process+0x1f4>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	609a      	str	r2, [r3, #8]
                    btn->holdTriggered = false;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	2200      	movs	r2, #0
 800074e:	741a      	strb	r2, [r3, #16]
 8000750:	e045      	b.n	80007de <Button_Process+0x10e>
                } else {
                    // Puszczenie
                    btn->state = BUTTON_RELEASED;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	2200      	movs	r2, #0
 8000756:	719a      	strb	r2, [r3, #6]

                    // Obsługa kliknięć (tylko jeśli nie było hold)
                    if (!btn->holdTriggered) {
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	7c1b      	ldrb	r3, [r3, #16]
 800075c:	f083 0301 	eor.w	r3, r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d030      	beq.n	80007c8 <Button_Process+0xf8>
                        if (btn->waitingForDoubleClick) {
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	7e1b      	ldrb	r3, [r3, #24]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d011      	beq.n	8000792 <Button_Process+0xc2>
                            if ((systemTicks - btn->lastClickTime) <= DOUBLE_CLICK_THRESHOLD) {
 800076e:	4b55      	ldr	r3, [pc, #340]	@ (80008c4 <Button_Process+0x1f4>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	2b1e      	cmp	r3, #30
 800077a:	d806      	bhi.n	800078a <Button_Process+0xba>
                                btn->clickCount++;
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	7c5b      	ldrb	r3, [r3, #17]
 8000780:	3301      	adds	r3, #1
 8000782:	b2da      	uxtb	r2, r3
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	745a      	strb	r2, [r3, #17]
 8000788:	e00d      	b.n	80007a6 <Button_Process+0xd6>
                            } else {
                                // Minął czas na dwuklik
                                btn->clickCount = 1;
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	2201      	movs	r2, #1
 800078e:	745a      	strb	r2, [r3, #17]
 8000790:	e009      	b.n	80007a6 <Button_Process+0xd6>
                            }
                        } else {
                            btn->clickCount = 1;
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	2201      	movs	r2, #1
 8000796:	745a      	strb	r2, [r3, #17]
                            btn->waitingForDoubleClick = true;
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	2201      	movs	r2, #1
 800079c:	761a      	strb	r2, [r3, #24]
                            btn->lastClickTime = systemTicks;
 800079e:	4b49      	ldr	r3, [pc, #292]	@ (80008c4 <Button_Process+0x1f4>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	615a      	str	r2, [r3, #20]
                        }

                        if (btn->clickCount == 2) {
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	7c5b      	ldrb	r3, [r3, #17]
 80007aa:	2b02      	cmp	r3, #2
 80007ac:	d10c      	bne.n	80007c8 <Button_Process+0xf8>
                            // Dwuklik
                            btn->waitingForDoubleClick = false;
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	2200      	movs	r2, #0
 80007b2:	761a      	strb	r2, [r3, #24]
                            btn->clickCount = 0;
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	2200      	movs	r2, #0
 80007b8:	745a      	strb	r2, [r3, #17]
                            if (btn->onDoubleClick) {
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d002      	beq.n	80007c8 <Button_Process+0xf8>
                                btn->onDoubleClick();
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007c6:	4798      	blx	r3
                            }
                        }
                    }

                    // Callback onRelease
                    if (btn->onRelease)
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	6a1b      	ldr	r3, [r3, #32]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d006      	beq.n	80007de <Button_Process+0x10e>
                        btn->onRelease();
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	6a1b      	ldr	r3, [r3, #32]
 80007d4:	4798      	blx	r3
 80007d6:	e002      	b.n	80007de <Button_Process+0x10e>
                }
            }
        } else {
            btn->debounceCounter = 0;
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	2200      	movs	r2, #0
 80007dc:	71da      	strb	r2, [r3, #7]
        }

        // Obsługa timeoutu dwukliku
        if (btn->waitingForDoubleClick
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	7e1b      	ldrb	r3, [r3, #24]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d01e      	beq.n	8000824 <Button_Process+0x154>
            && ((systemTicks - btn->lastClickTime) > DOUBLE_CLICK_THRESHOLD)) {
 80007e6:	4b37      	ldr	r3, [pc, #220]	@ (80008c4 <Button_Process+0x1f4>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	2b1e      	cmp	r3, #30
 80007f2:	d917      	bls.n	8000824 <Button_Process+0x154>
            if (btn->clickCount == 1) {
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	7c5b      	ldrb	r3, [r3, #17]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d10d      	bne.n	8000818 <Button_Process+0x148>
                // Pojedynczy klik
                // warunek: jeżeli NIE było hold
                if (!btn->holdTriggered && btn->onPress) {
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	7c1b      	ldrb	r3, [r3, #16]
 8000800:	f083 0301 	eor.w	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d006      	beq.n	8000818 <Button_Process+0x148>
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d002      	beq.n	8000818 <Button_Process+0x148>
                    btn->onPress();
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	4798      	blx	r3
                }
            }
            btn->waitingForDoubleClick = false;
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	2200      	movs	r2, #0
 800081c:	761a      	strb	r2, [r3, #24]
            btn->clickCount = 0;
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	2200      	movs	r2, #0
 8000822:	745a      	strb	r2, [r3, #17]
        }

        // Obsługa hold i repeat
        if (btn->state == BUTTON_PRESSED) {
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	799b      	ldrb	r3, [r3, #6]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d13c      	bne.n	80008a6 <Button_Process+0x1d6>
            uint32_t elapsed = systemTicks - btn->pressTime;
 800082c:	4b25      	ldr	r3, [pc, #148]	@ (80008c4 <Button_Process+0x1f4>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	603b      	str	r3, [r7, #0]
            if (!btn->holdTriggered && (elapsed >= HOLD_THRESHOLD)) {
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	7c1b      	ldrb	r3, [r3, #16]
 800083c:	f083 0301 	eor.w	r3, r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d018      	beq.n	8000878 <Button_Process+0x1a8>
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	2b63      	cmp	r3, #99	@ 0x63
 800084a:	d915      	bls.n	8000878 <Button_Process+0x1a8>
                btn->holdTriggered = true;
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	2201      	movs	r2, #1
 8000850:	741a      	strb	r2, [r3, #16]
                // zerujemy liczniki kliknięć, by nie był liczony single-click
                btn->clickCount = 0;
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	2200      	movs	r2, #0
 8000856:	745a      	strb	r2, [r3, #17]
                btn->waitingForDoubleClick = false;
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	2200      	movs	r2, #0
 800085c:	761a      	strb	r2, [r3, #24]

                if (btn->onHold)
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000862:	2b00      	cmp	r3, #0
 8000864:	d002      	beq.n	800086c <Button_Process+0x19c>
                    btn->onHold();
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800086a:	4798      	blx	r3
                btn->nextRepeatTime = systemTicks + REPEAT_INTERVAL;
 800086c:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <Button_Process+0x1f4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f103 0214 	add.w	r2, r3, #20
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	60da      	str	r2, [r3, #12]
            }
            if (btn->holdTriggered && (systemTicks >= btn->nextRepeatTime)) {
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	7c1b      	ldrb	r3, [r3, #16]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d012      	beq.n	80008a6 <Button_Process+0x1d6>
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	68da      	ldr	r2, [r3, #12]
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <Button_Process+0x1f4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	429a      	cmp	r2, r3
 800088a:	d80c      	bhi.n	80008a6 <Button_Process+0x1d6>
                if (btn->onRepeat)
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000890:	2b00      	cmp	r3, #0
 8000892:	d002      	beq.n	800089a <Button_Process+0x1ca>
                    btn->onRepeat();
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000898:	4798      	blx	r3
                btn->nextRepeatTime += REPEAT_INTERVAL;
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	f103 0214 	add.w	r2, r3, #20
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < NUM_BUTTONS; i++) {
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	3301      	adds	r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	f77f af14 	ble.w	80006dc <Button_Process+0xc>
            }
        }
    }
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000684 	.word	0x20000684

080008c8 <HAL_TIM_PeriodElapsedCallback>:

// Funkcja wywoływana w przerwaniu timera
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a23      	ldr	r2, [pc, #140]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d108      	bne.n	80008ec <HAL_TIM_PeriodElapsedCallback+0x24>

		SHT30_10msHandler();
 80008da:	f001 fda5 	bl	8002428 <SHT30_10msHandler>


		systemTicks++;  // Inkrementacja globalnego licznika czasu
 80008de:	4b22      	ldr	r3, [pc, #136]	@ (8000968 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	4a20      	ldr	r2, [pc, #128]	@ (8000968 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80008e6:	6013      	str	r3, [r2, #0]
		SLIDER_Update();
 80008e8:	f002 f944 	bl	8002b74 <SLIDER_Update>
	}
	if (colon == 1) {
 80008ec:	4b1f      	ldr	r3, [pc, #124]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d112      	bne.n	800091c <HAL_TIM_PeriodElapsedCallback+0x54>
	        if (counter > 0) {
 80008f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000970 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d007      	beq.n	8000910 <HAL_TIM_PeriodElapsedCallback+0x48>
	            counter--; // Odliczanie licznika
 8000900:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	3b01      	subs	r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	e005      	b.n	800091c <HAL_TIM_PeriodElapsedCallback+0x54>
	        } else {
	            counter = 50; // Reset licznika na 50
 8000910:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000912:	2232      	movs	r2, #50	@ 0x32
 8000914:	701a      	strb	r2, [r3, #0]
	            colon = 0;    // Ustawienie colon na 0
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
	        }
	    }

static volatile uint16_t cnter = 0 ;
		cnter++;
 800091c:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	b29b      	uxth	r3, r3
 8000922:	3301      	adds	r3, #1
 8000924:	b29a      	uxth	r2, r3
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000928:	801a      	strh	r2, [r3, #0]
		if  (cnter>400){
 800092a:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	b29b      	uxth	r3, r3
 8000930:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000934:	d911      	bls.n	800095a <HAL_TIM_PeriodElapsedCallback+0x92>
			cnter = 0 ;
 8000936:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000938:	2200      	movs	r2, #0
 800093a:	801a      	strh	r2, [r3, #0]
			disp_mode++;
 800093c:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	3301      	adds	r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000948:	701a      	strb	r2, [r3, #0]
			if (disp_mode > 1 )disp_mode = 0;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b01      	cmp	r3, #1
 8000952:	d902      	bls.n	800095a <HAL_TIM_PeriodElapsedCallback+0x92>
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
		}
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40000c00 	.word	0x40000c00
 8000968:	20000684 	.word	0x20000684
 800096c:	200000c5 	.word	0x200000c5
 8000970:	200000a0 	.word	0x200000a0
 8000974:	200000a8 	.word	0x200000a8
 8000978:	200006da 	.word	0x200006da

0800097c <Encoder_HandleInterrupt>:

void Encoder_HandleInterrupt(int8_t direction)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
    if (s_encoderCb != NULL) {
 8000986:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <Encoder_HandleInterrupt+0x28>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d005      	beq.n	800099a <Encoder_HandleInterrupt+0x1e>
        s_encoderCb(direction);
 800098e:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <Encoder_HandleInterrupt+0x28>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000996:	4610      	mov	r0, r2
 8000998:	4798      	blx	r3
    }
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000a4 	.word	0x200000a4

080009a8 <charToSegment>:
//static Bits192 regValue;         // Przechowuje 192 bity rozbite na 12×16

// Implementacja tablicy segmentMap i funkcji charToSegment.
// (Zwykle segmentMap mamy w Display.h jako static const,
//  ale jeśli wolisz mieć ją w .c, możesz przenieść tutaj.)
uint8_t charToSegment(char c) {
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]

    switch (c) {
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	3b2a      	subs	r3, #42	@ 0x2a
 80009b6:	2b50      	cmp	r3, #80	@ 0x50
 80009b8:	f200 80dd 	bhi.w	8000b76 <charToSegment+0x1ce>
 80009bc:	a201      	add	r2, pc, #4	@ (adr r2, 80009c4 <charToSegment+0x1c>)
 80009be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c2:	bf00      	nop
 80009c4:	08000b17 	.word	0x08000b17
 80009c8:	08000b77 	.word	0x08000b77
 80009cc:	08000b77 	.word	0x08000b77
 80009d0:	08000b13 	.word	0x08000b13
 80009d4:	08000b77 	.word	0x08000b77
 80009d8:	08000b77 	.word	0x08000b77
 80009dc:	08000b09 	.word	0x08000b09
 80009e0:	08000b09 	.word	0x08000b09
 80009e4:	08000b09 	.word	0x08000b09
 80009e8:	08000b09 	.word	0x08000b09
 80009ec:	08000b09 	.word	0x08000b09
 80009f0:	08000b09 	.word	0x08000b09
 80009f4:	08000b09 	.word	0x08000b09
 80009f8:	08000b09 	.word	0x08000b09
 80009fc:	08000b09 	.word	0x08000b09
 8000a00:	08000b09 	.word	0x08000b09
 8000a04:	08000b77 	.word	0x08000b77
 8000a08:	08000b77 	.word	0x08000b77
 8000a0c:	08000b77 	.word	0x08000b77
 8000a10:	08000b77 	.word	0x08000b77
 8000a14:	08000b77 	.word	0x08000b77
 8000a18:	08000b77 	.word	0x08000b77
 8000a1c:	08000b77 	.word	0x08000b77
 8000a20:	08000b33 	.word	0x08000b33
 8000a24:	08000b67 	.word	0x08000b67
 8000a28:	08000b1b 	.word	0x08000b1b
 8000a2c:	08000b77 	.word	0x08000b77
 8000a30:	08000b47 	.word	0x08000b47
 8000a34:	08000b2f 	.word	0x08000b2f
 8000a38:	08000b77 	.word	0x08000b77
 8000a3c:	08000b6f 	.word	0x08000b6f
 8000a40:	08000b77 	.word	0x08000b77
 8000a44:	08000b73 	.word	0x08000b73
 8000a48:	08000b77 	.word	0x08000b77
 8000a4c:	08000b5f 	.word	0x08000b5f
 8000a50:	08000b77 	.word	0x08000b77
 8000a54:	08000b3f 	.word	0x08000b3f
 8000a58:	08000b57 	.word	0x08000b57
 8000a5c:	08000b4f 	.word	0x08000b4f
 8000a60:	08000b77 	.word	0x08000b77
 8000a64:	08000b23 	.word	0x08000b23
 8000a68:	08000b2b 	.word	0x08000b2b
 8000a6c:	08000b37 	.word	0x08000b37
 8000a70:	08000b3b 	.word	0x08000b3b
 8000a74:	08000b3b 	.word	0x08000b3b
 8000a78:	08000b3b 	.word	0x08000b3b
 8000a7c:	08000b77 	.word	0x08000b77
 8000a80:	08000b77 	.word	0x08000b77
 8000a84:	08000b63 	.word	0x08000b63
 8000a88:	08000b77 	.word	0x08000b77
 8000a8c:	08000b77 	.word	0x08000b77
 8000a90:	08000b77 	.word	0x08000b77
 8000a94:	08000b77 	.word	0x08000b77
 8000a98:	08000b77 	.word	0x08000b77
 8000a9c:	08000b77 	.word	0x08000b77
 8000aa0:	08000b33 	.word	0x08000b33
 8000aa4:	08000b67 	.word	0x08000b67
 8000aa8:	08000b1f 	.word	0x08000b1f
 8000aac:	08000b4b 	.word	0x08000b4b
 8000ab0:	08000b47 	.word	0x08000b47
 8000ab4:	08000b77 	.word	0x08000b77
 8000ab8:	08000b77 	.word	0x08000b77
 8000abc:	08000b27 	.word	0x08000b27
 8000ac0:	08000b43 	.word	0x08000b43
 8000ac4:	08000b73 	.word	0x08000b73
 8000ac8:	08000b77 	.word	0x08000b77
 8000acc:	08000b77 	.word	0x08000b77
 8000ad0:	08000b77 	.word	0x08000b77
 8000ad4:	08000b3f 	.word	0x08000b3f
 8000ad8:	08000b53 	.word	0x08000b53
 8000adc:	08000b4f 	.word	0x08000b4f
 8000ae0:	08000b77 	.word	0x08000b77
 8000ae4:	08000b23 	.word	0x08000b23
 8000ae8:	08000b2b 	.word	0x08000b2b
 8000aec:	08000b37 	.word	0x08000b37
 8000af0:	08000b5b 	.word	0x08000b5b
 8000af4:	08000b5b 	.word	0x08000b5b
 8000af8:	08000b5b 	.word	0x08000b5b
 8000afc:	08000b77 	.word	0x08000b77
 8000b00:	08000b6b 	.word	0x08000b6b
 8000b04:	08000b63 	.word	0x08000b63
    case '0' ... '9':
        return segmentMap[c - '0'];
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	3b30      	subs	r3, #48	@ 0x30
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b84 <charToSegment+0x1dc>)
 8000b0e:	5cd3      	ldrb	r3, [r2, r3]
 8000b10:	e032      	b.n	8000b78 <charToSegment+0x1d0>
    case '-':
        return segmentMap[11];
 8000b12:	2340      	movs	r3, #64	@ 0x40
 8000b14:	e030      	b.n	8000b78 <charToSegment+0x1d0>
    case '*':// symbol  stopnia
        return segmentMap[12];
 8000b16:	2363      	movs	r3, #99	@ 0x63
 8000b18:	e02e      	b.n	8000b78 <charToSegment+0x1d0>
    case 'C':
        return segmentMap[13];
 8000b1a:	2339      	movs	r3, #57	@ 0x39
 8000b1c:	e02c      	b.n	8000b78 <charToSegment+0x1d0>
    case 'c':
        return segmentMap[29];
 8000b1e:	236e      	movs	r3, #110	@ 0x6e
 8000b20:	e02a      	b.n	8000b78 <charToSegment+0x1d0>
    case 'r':
    case 'R':
        return segmentMap[14];
 8000b22:	2350      	movs	r3, #80	@ 0x50
 8000b24:	e028      	b.n	8000b78 <charToSegment+0x1d0>
    case 'h':
        return segmentMap[15];
 8000b26:	2374      	movs	r3, #116	@ 0x74
 8000b28:	e026      	b.n	8000b78 <charToSegment+0x1d0>
    case 's':
    case 'S':
        return segmentMap[5];
 8000b2a:	236d      	movs	r3, #109	@ 0x6d
 8000b2c:	e024      	b.n	8000b78 <charToSegment+0x1d0>
    case 'F':
        return segmentMap[16];
 8000b2e:	2371      	movs	r3, #113	@ 0x71
 8000b30:	e022      	b.n	8000b78 <charToSegment+0x1d0>
    case 'A':
    case 'a':
        return segmentMap[17];
 8000b32:	2377      	movs	r3, #119	@ 0x77
 8000b34:	e020      	b.n	8000b78 <charToSegment+0x1d0>
    case 't':
    case 'T':
        return segmentMap[18];
 8000b36:	2378      	movs	r3, #120	@ 0x78
 8000b38:	e01e      	b.n	8000b78 <charToSegment+0x1d0>
    case 'V':
    case 'U':
    case 'W':
        return segmentMap[19];
 8000b3a:	233e      	movs	r3, #62	@ 0x3e
 8000b3c:	e01c      	b.n	8000b78 <charToSegment+0x1d0>
    case 'n':
    case 'N':
        return segmentMap[20];
 8000b3e:	2354      	movs	r3, #84	@ 0x54
 8000b40:	e01a      	b.n	8000b78 <charToSegment+0x1d0>
    case 'i':
        return segmentMap[21];
 8000b42:	2310      	movs	r3, #16
 8000b44:	e018      	b.n	8000b78 <charToSegment+0x1d0>
    case 'E':
    case 'e':
        return segmentMap[22];
 8000b46:	2379      	movs	r3, #121	@ 0x79
 8000b48:	e016      	b.n	8000b78 <charToSegment+0x1d0>
    case 'd':
        return segmentMap[23];
 8000b4a:	235e      	movs	r3, #94	@ 0x5e
 8000b4c:	e014      	b.n	8000b78 <charToSegment+0x1d0>
    case 'P':
    case 'p':
        return segmentMap[24];
 8000b4e:	2373      	movs	r3, #115	@ 0x73
 8000b50:	e012      	b.n	8000b78 <charToSegment+0x1d0>
    case 'o':
        return segmentMap[25];
 8000b52:	235c      	movs	r3, #92	@ 0x5c
 8000b54:	e010      	b.n	8000b78 <charToSegment+0x1d0>
    case 'O':
        return segmentMap[0];
 8000b56:	233f      	movs	r3, #63	@ 0x3f
 8000b58:	e00e      	b.n	8000b78 <charToSegment+0x1d0>
    case 'u':
    case 'w':
    case 'v':
        return segmentMap[26];
 8000b5a:	231c      	movs	r3, #28
 8000b5c:	e00c      	b.n	8000b78 <charToSegment+0x1d0>
    case 'L':
        return segmentMap[27];
 8000b5e:	2338      	movs	r3, #56	@ 0x38
 8000b60:	e00a      	b.n	8000b78 <charToSegment+0x1d0>
    case 'z':
    case 'Z':
        return segmentMap[2];
 8000b62:	235b      	movs	r3, #91	@ 0x5b
 8000b64:	e008      	b.n	8000b78 <charToSegment+0x1d0>
    case 'b':
    case 'B':
        return segmentMap[28];
 8000b66:	237c      	movs	r3, #124	@ 0x7c
 8000b68:	e006      	b.n	8000b78 <charToSegment+0x1d0>
    case 'y':
            return segmentMap[29];
 8000b6a:	236e      	movs	r3, #110	@ 0x6e
 8000b6c:	e004      	b.n	8000b78 <charToSegment+0x1d0>
    case 'H':
            return segmentMap[30];
 8000b6e:	2376      	movs	r3, #118	@ 0x76
 8000b70:	e002      	b.n	8000b78 <charToSegment+0x1d0>
    case 'j':
    case 'J':
                   return segmentMap[31];
 8000b72:	231e      	movs	r3, #30
 8000b74:	e000      	b.n	8000b78 <charToSegment+0x1d0>
    default:
        // spacja lub nieobsługiwany znak
        return segmentMap[10];
 8000b76:	2300      	movs	r3, #0
    }
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	0800b404 	.word	0x0800b404

08000b88 <HAL_SPI_TxCpltCallback>:
 * ---------------------------------------------------------------------------
 * Implementacja funkcji obsługujących 192-bitowy rejestr wyświetlaczy
 * ---------------------------------------------------------------------------
 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance == SPI1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a09      	ldr	r2, [pc, #36]	@ (8000bbc <HAL_SPI_TxCpltCallback+0x34>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d10c      	bne.n	8000bb4 <HAL_SPI_TxCpltCallback+0x2c>
  {
    // Krótki impuls na pin LATCH
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2140      	movs	r1, #64	@ 0x40
 8000b9e:	4808      	ldr	r0, [pc, #32]	@ (8000bc0 <HAL_SPI_TxCpltCallback+0x38>)
 8000ba0:	f004 fc14 	bl	80053cc <HAL_GPIO_WritePin>
    // Ewentualnie opóźnienie
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2140      	movs	r1, #64	@ 0x40
 8000ba8:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <HAL_SPI_TxCpltCallback+0x38>)
 8000baa:	f004 fc0f 	bl	80053cc <HAL_GPIO_WritePin>
    spiTransferInProgress = false;  // Zakończono transmisję
 8000bae:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <HAL_SPI_TxCpltCallback+0x3c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
  }

}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40013000 	.word	0x40013000
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	200000aa 	.word	0x200000aa

08000bc8 <ClearClockBits>:
  HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 24);
}


void ClearClockBits(MyClockBitFields* clockBits)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  memset(clockBits, 0, sizeof(MyClockBitFields));
 8000bd0:	2218      	movs	r2, #24
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f00a fb97 	bl	800b308 <memset>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <SetTime7Seg_Top>:

/**
 * Ustawia 6 wyświetlaczy 7-seg (top lub bottom) na HH:MM:SS
 */
void SetTime7Seg_Top(MyClockBitFields* clockBits, uint8_t h, uint8_t m, uint8_t s)
{
 8000be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be8:	b09d      	sub	sp, #116	@ 0x74
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8000bee:	4618      	mov	r0, r3
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

	  // Bufor na segmenty wyświetlacza (6 pozycji)
	    uint8_t backBuffer[6] = {0};
 8000c02:	2300      	movs	r3, #0
 8000c04:	663b      	str	r3, [r7, #96]	@ 0x60
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	    // Obsługa godzin
	    if (h < 10) {
 8000c0c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000c10:	2b09      	cmp	r3, #9
 8000c12:	d80d      	bhi.n	8000c30 <SetTime7Seg_Top+0x4c>
	        backBuffer[0] = segmentMap[10]; // Puste dziesiątki godzin
 8000c14:	2300      	movs	r3, #0
 8000c16:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = charToSegment('0' + h); // Jednostki godzin
 8000c1a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000c1e:	3330      	adds	r3, #48	@ 0x30
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fec0 	bl	80009a8 <charToSegment>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
 8000c2e:	e022      	b.n	8000c76 <SetTime7Seg_Top+0x92>
	    } else {
	        backBuffer[0] = charToSegment('0' + (h / 10)); // Dziesiątki godzin
 8000c30:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000c34:	4b87      	ldr	r3, [pc, #540]	@ (8000e54 <SetTime7Seg_Top+0x270>)
 8000c36:	fba3 2302 	umull	r2, r3, r3, r2
 8000c3a:	08db      	lsrs	r3, r3, #3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	3330      	adds	r3, #48	@ 0x30
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff feb0 	bl	80009a8 <charToSegment>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = charToSegment('0' + (h % 10)); // Jednostki godzin
 8000c4e:	f897 105b 	ldrb.w	r1, [r7, #91]	@ 0x5b
 8000c52:	4b80      	ldr	r3, [pc, #512]	@ (8000e54 <SetTime7Seg_Top+0x270>)
 8000c54:	fba3 2301 	umull	r2, r3, r3, r1
 8000c58:	08da      	lsrs	r2, r3, #3
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	1acb      	subs	r3, r1, r3
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	3330      	adds	r3, #48	@ 0x30
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fe9c 	bl	80009a8 <charToSegment>
 8000c70:	4603      	mov	r3, r0
 8000c72:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	    }

	    // Obsługa minut
	    backBuffer[2] = charToSegment('0' + (m / 10)); // Dziesiątki minut
 8000c76:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8000c7a:	4b76      	ldr	r3, [pc, #472]	@ (8000e54 <SetTime7Seg_Top+0x270>)
 8000c7c:	fba3 2302 	umull	r2, r3, r3, r2
 8000c80:	08db      	lsrs	r3, r3, #3
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	3330      	adds	r3, #48	@ 0x30
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fe8d 	bl	80009a8 <charToSegment>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	    backBuffer[3] = charToSegment('0' + (m % 10)); // Jednostki minut
 8000c94:	f897 105a 	ldrb.w	r1, [r7, #90]	@ 0x5a
 8000c98:	4b6e      	ldr	r3, [pc, #440]	@ (8000e54 <SetTime7Seg_Top+0x270>)
 8000c9a:	fba3 2301 	umull	r2, r3, r3, r1
 8000c9e:	08da      	lsrs	r2, r3, #3
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	1acb      	subs	r3, r1, r3
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	3330      	adds	r3, #48	@ 0x30
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fe79 	bl	80009a8 <charToSegment>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	    // Obsługa sekund
	    backBuffer[4] = charToSegment('0' + (s / 10)); // Dziesiątki sekund
 8000cbc:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8000cc0:	4b64      	ldr	r3, [pc, #400]	@ (8000e54 <SetTime7Seg_Top+0x270>)
 8000cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8000cc6:	08db      	lsrs	r3, r3, #3
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	3330      	adds	r3, #48	@ 0x30
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fe6a 	bl	80009a8 <charToSegment>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	    backBuffer[5] = charToSegment('0' + (s % 10)); // Jednostki sekund
 8000cda:	f897 1059 	ldrb.w	r1, [r7, #89]	@ 0x59
 8000cde:	4b5d      	ldr	r3, [pc, #372]	@ (8000e54 <SetTime7Seg_Top+0x270>)
 8000ce0:	fba3 2301 	umull	r2, r3, r3, r1
 8000ce4:	08da      	lsrs	r2, r3, #3
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	1acb      	subs	r3, r1, r3
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	3330      	adds	r3, #48	@ 0x30
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fe56 	bl	80009a8 <charToSegment>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	    // Zbudowanie wartości 48-bitowej na podstawie bufora
	    uint64_t displayVal = 0ULL;
 8000d02:	f04f 0200 	mov.w	r2, #0
 8000d06:	f04f 0300 	mov.w	r3, #0
 8000d0a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[5] << 40);
 8000d0e:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2200      	movs	r2, #0
 8000d16:	653b      	str	r3, [r7, #80]	@ 0x50
 8000d18:	657a      	str	r2, [r7, #84]	@ 0x54
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	f04f 0100 	mov.w	r1, #0
 8000d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d24:	0219      	lsls	r1, r3, #8
 8000d26:	2000      	movs	r0, #0
 8000d28:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000d2c:	ea42 0600 	orr.w	r6, r2, r0
 8000d30:	62be      	str	r6, [r7, #40]	@ 0x28
 8000d32:	430b      	orrs	r3, r1
 8000d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000d3a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[4] << 32);
 8000d3e:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2200      	movs	r2, #0
 8000d46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d48:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000d4a:	f04f 0000 	mov.w	r0, #0
 8000d4e:	f04f 0100 	mov.w	r1, #0
 8000d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d54:	0019      	movs	r1, r3
 8000d56:	2000      	movs	r0, #0
 8000d58:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000d5c:	ea42 0600 	orr.w	r6, r2, r0
 8000d60:	623e      	str	r6, [r7, #32]
 8000d62:	430b      	orrs	r3, r1
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d6a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[0] << 24);
 8000d6e:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2200      	movs	r2, #0
 8000d76:	643b      	str	r3, [r7, #64]	@ 0x40
 8000d78:	647a      	str	r2, [r7, #68]	@ 0x44
 8000d7a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8000d7e:	460b      	mov	r3, r1
 8000d80:	0a1d      	lsrs	r5, r3, #8
 8000d82:	460b      	mov	r3, r1
 8000d84:	061c      	lsls	r4, r3, #24
 8000d86:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000d8a:	ea42 0104 	orr.w	r1, r2, r4
 8000d8e:	61b9      	str	r1, [r7, #24]
 8000d90:	432b      	orrs	r3, r5
 8000d92:	61fb      	str	r3, [r7, #28]
 8000d94:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000d98:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[1] << 16);
 8000d9c:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2200      	movs	r2, #0
 8000da4:	4698      	mov	r8, r3
 8000da6:	4691      	mov	r9, r2
 8000da8:	f04f 0000 	mov.w	r0, #0
 8000dac:	f04f 0100 	mov.w	r1, #0
 8000db0:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8000db4:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8000db8:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8000dbc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000dc0:	ea42 0400 	orr.w	r4, r2, r0
 8000dc4:	613c      	str	r4, [r7, #16]
 8000dc6:	430b      	orrs	r3, r1
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000dce:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[2] << 8);
 8000dd2:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2200      	movs	r2, #0
 8000dda:	469a      	mov	sl, r3
 8000ddc:	4693      	mov	fp, r2
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8000dea:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8000dee:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8000df2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8000df6:	ea40 0402 	orr.w	r4, r0, r2
 8000dfa:	60bc      	str	r4, [r7, #8]
 8000dfc:	430b      	orrs	r3, r1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000e04:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[3] << 0);
 8000e08:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2200      	movs	r2, #0
 8000e10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000e12:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000e14:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000e18:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8000e1c:	4621      	mov	r1, r4
 8000e1e:	4311      	orrs	r1, r2
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	4629      	mov	r1, r5
 8000e24:	4319      	orrs	r1, r3
 8000e26:	6079      	str	r1, [r7, #4]
 8000e28:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000e2c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68

	    clockBits->topDisplay = displayVal;
 8000e30:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000e34:	633a      	str	r2, [r7, #48]	@ 0x30
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e3c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000e40:	4602      	mov	r2, r0
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	460a      	mov	r2, r1
 8000e46:	821a      	strh	r2, [r3, #16]
}
 8000e48:	bf00      	nop
 8000e4a:	3774      	adds	r7, #116	@ 0x74
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e52:	bf00      	nop
 8000e54:	cccccccd 	.word	0xcccccccd

08000e58 <UpdateAllDisplays>:




void UpdateAllDisplays(const MyClockBitFields* clockBits)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
    // Sprawdź, czy SPI jest zajęte
    if (spiTransferInProgress) {
 8000e60:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed4 <UpdateAllDisplays+0x7c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d130      	bne.n	8000ecc <UpdateAllDisplays+0x74>
        return;
    }

    spiTransferInProgress = true;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed4 <UpdateAllDisplays+0x7c>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]

    static uint8_t spiTxBuffer[24];
    memset(spiTxBuffer, 0, sizeof(spiTxBuffer));
 8000e70:	2218      	movs	r2, #24
 8000e72:	2100      	movs	r1, #0
 8000e74:	4818      	ldr	r0, [pc, #96]	@ (8000ed8 <UpdateAllDisplays+0x80>)
 8000e76:	f00a fa47 	bl	800b308 <memset>

    const uint8_t* p = (const uint8_t*)clockBits;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	60fb      	str	r3, [r7, #12]
    int byteIndex = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]

    for (int partIndex = 11; partIndex >= 0; partIndex--)
 8000e82:	230b      	movs	r3, #11
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	e018      	b.n	8000eba <UpdateAllDisplays+0x62>
    {
        spiTxBuffer[byteIndex++] = p[2 * partIndex + 1];
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	441a      	add	r2, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	1c59      	adds	r1, r3, #1
 8000e96:	6179      	str	r1, [r7, #20]
 8000e98:	7811      	ldrb	r1, [r2, #0]
 8000e9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed8 <UpdateAllDisplays+0x80>)
 8000e9c:	54d1      	strb	r1, [r2, r3]
        spiTxBuffer[byteIndex++] = p[2 * partIndex + 0];
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	441a      	add	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	1c59      	adds	r1, r3, #1
 8000eac:	6179      	str	r1, [r7, #20]
 8000eae:	7811      	ldrb	r1, [r2, #0]
 8000eb0:	4a09      	ldr	r2, [pc, #36]	@ (8000ed8 <UpdateAllDisplays+0x80>)
 8000eb2:	54d1      	strb	r1, [r2, r3]
    for (int partIndex = 11; partIndex >= 0; partIndex--)
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	dae3      	bge.n	8000e88 <UpdateAllDisplays+0x30>
    }

    HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 24);
 8000ec0:	2218      	movs	r2, #24
 8000ec2:	4905      	ldr	r1, [pc, #20]	@ (8000ed8 <UpdateAllDisplays+0x80>)
 8000ec4:	4805      	ldr	r0, [pc, #20]	@ (8000edc <UpdateAllDisplays+0x84>)
 8000ec6:	f008 f867 	bl	8008f98 <HAL_SPI_Transmit_DMA>
 8000eca:	e000      	b.n	8000ece <UpdateAllDisplays+0x76>
        return;
 8000ecc:	bf00      	nop
}
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200000aa 	.word	0x200000aa
 8000ed8:	200000ac 	.word	0x200000ac
 8000edc:	20000708 	.word	0x20000708

08000ee0 <SetPWMPercentGamma>:
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
  uint32_t compare_value = (period + 1) - ((period + 1) * percent / 100);
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
}

void SetPWMPercentGamma(uint8_t percent) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  if (percent > 100) {
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b64      	cmp	r3, #100	@ 0x64
 8000eee:	d901      	bls.n	8000ef4 <SetPWMPercentGamma+0x14>
      percent = 100;
 8000ef0:	2364      	movs	r3, #100	@ 0x64
 8000ef2:	71fb      	strb	r3, [r7, #7]
  }
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <SetPWMPercentGamma+0x4c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000efa:	617b      	str	r3, [r7, #20]
  uint8_t gamma_percent = gamma_table[percent];
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	4a0c      	ldr	r2, [pc, #48]	@ (8000f30 <SetPWMPercentGamma+0x50>)
 8000f00:	5cd3      	ldrb	r3, [r2, r3]
 8000f02:	74fb      	strb	r3, [r7, #19]
  uint32_t compare_value = (period + 1) * gamma_percent / 100;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3301      	adds	r3, #1
 8000f08:	7cfa      	ldrb	r2, [r7, #19]
 8000f0a:	fb02 f303 	mul.w	r3, r2, r3
 8000f0e:	4a09      	ldr	r2, [pc, #36]	@ (8000f34 <SetPWMPercentGamma+0x54>)
 8000f10:	fba2 2303 	umull	r2, r3, r2, r3
 8000f14:	095b      	lsrs	r3, r3, #5
 8000f16:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
 8000f18:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <SetPWMPercentGamma+0x4c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f20:	bf00      	nop
 8000f22:	371c      	adds	r7, #28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	200008d8 	.word	0x200008d8
 8000f30:	0800b430 	.word	0x0800b430
 8000f34:	51eb851f 	.word	0x51eb851f

08000f38 <SetSecondLedEvenOdd>:
        HAL_Delay(50);
    }
}

void SetSecondLedEvenOdd(MyClockBitFields* clockBits, uint8_t second, uint8_t minute)
{
 8000f38:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000f3c:	b08c      	sub	sp, #48	@ 0x30
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6278      	str	r0, [r7, #36]	@ 0x24
 8000f42:	460b      	mov	r3, r1
 8000f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000f48:	4613      	mov	r3, r2
 8000f4a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (second >= 60) {
 8000f4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000f52:	2b3b      	cmp	r3, #59	@ 0x3b
 8000f54:	d902      	bls.n	8000f5c <SetSecondLedEvenOdd+0x24>
        second = 59;
 8000f56:	233b      	movs	r3, #59	@ 0x3b
 8000f58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
    if ((minute % 2) == 0)
 8000f5c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d178      	bne.n	800105c <SetSecondLedEvenOdd+0x124>
    {
        clockBits->secondsRing = 0ULL;
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	2200      	movs	r2, #0
 8000f72:	705a      	strb	r2, [r3, #1]
 8000f74:	2200      	movs	r2, #0
 8000f76:	709a      	strb	r2, [r3, #2]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	70da      	strb	r2, [r3, #3]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	711a      	strb	r2, [r3, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	715a      	strb	r2, [r3, #5]
 8000f84:	2200      	movs	r2, #0
 8000f86:	719a      	strb	r2, [r3, #6]
 8000f88:	79da      	ldrb	r2, [r3, #7]
 8000f8a:	f022 020f 	bic.w	r2, r2, #15
 8000f8e:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = 0; i <= second; i++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000f96:	e05a      	b.n	800104e <SetSecondLedEvenOdd+0x116>
        {
            clockBits->secondsRing |= (1ULL << i);
 8000f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	791a      	ldrb	r2, [r3, #4]
 8000f9e:	795c      	ldrb	r4, [r3, #5]
 8000fa0:	0224      	lsls	r4, r4, #8
 8000fa2:	4322      	orrs	r2, r4
 8000fa4:	799c      	ldrb	r4, [r3, #6]
 8000fa6:	0424      	lsls	r4, r4, #16
 8000fa8:	4322      	orrs	r2, r4
 8000faa:	79db      	ldrb	r3, [r3, #7]
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	061b      	lsls	r3, r3, #24
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4680      	mov	r8, r0
 8000fb8:	4689      	mov	r9, r1
 8000fba:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8000fbe:	f04f 0201 	mov.w	r2, #1
 8000fc2:	f04f 0300 	mov.w	r3, #0
 8000fc6:	f1a1 0420 	sub.w	r4, r1, #32
 8000fca:	f1c1 0020 	rsb	r0, r1, #32
 8000fce:	fa03 f601 	lsl.w	r6, r3, r1
 8000fd2:	fa02 f404 	lsl.w	r4, r2, r4
 8000fd6:	4326      	orrs	r6, r4
 8000fd8:	fa22 f000 	lsr.w	r0, r2, r0
 8000fdc:	4306      	orrs	r6, r0
 8000fde:	fa02 f501 	lsl.w	r5, r2, r1
 8000fe2:	ea48 0305 	orr.w	r3, r8, r5
 8000fe6:	61bb      	str	r3, [r7, #24]
 8000fe8:	ea49 0306 	orr.w	r3, r9, r6
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001000:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001004:	4642      	mov	r2, r8
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	464a      	mov	r2, r9
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	2100      	movs	r1, #0
 800100e:	430a      	orrs	r2, r1
 8001010:	711a      	strb	r2, [r3, #4]
 8001012:	464a      	mov	r2, r9
 8001014:	0a12      	lsrs	r2, r2, #8
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	2100      	movs	r1, #0
 800101a:	430a      	orrs	r2, r1
 800101c:	715a      	strb	r2, [r3, #5]
 800101e:	464a      	mov	r2, r9
 8001020:	0c12      	lsrs	r2, r2, #16
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	2100      	movs	r1, #0
 8001026:	430a      	orrs	r2, r1
 8001028:	719a      	strb	r2, [r3, #6]
 800102a:	464a      	mov	r2, r9
 800102c:	0e12      	lsrs	r2, r2, #24
 800102e:	f002 020f 	and.w	r2, r2, #15
 8001032:	f002 000f 	and.w	r0, r2, #15
 8001036:	79da      	ldrb	r2, [r3, #7]
 8001038:	f022 020f 	bic.w	r2, r2, #15
 800103c:	4611      	mov	r1, r2
 800103e:	4602      	mov	r2, r0
 8001040:	430a      	orrs	r2, r1
 8001042:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = 0; i <= second; i++)
 8001044:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001048:	3301      	adds	r3, #1
 800104a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800104e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001052:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001056:	429a      	cmp	r2, r3
 8001058:	d99e      	bls.n	8000f98 <SetSecondLedEvenOdd+0x60>
        for (uint8_t i = second + 1; i < 60; i++)
        {
            clockBits->secondsRing |= (1ULL << i);
        }
    }
}
 800105a:	e079      	b.n	8001150 <SetSecondLedEvenOdd+0x218>
        clockBits->secondsRing = 0ULL;
 800105c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	2200      	movs	r2, #0
 8001064:	705a      	strb	r2, [r3, #1]
 8001066:	2200      	movs	r2, #0
 8001068:	709a      	strb	r2, [r3, #2]
 800106a:	2200      	movs	r2, #0
 800106c:	70da      	strb	r2, [r3, #3]
 800106e:	2200      	movs	r2, #0
 8001070:	711a      	strb	r2, [r3, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	715a      	strb	r2, [r3, #5]
 8001076:	2200      	movs	r2, #0
 8001078:	719a      	strb	r2, [r3, #6]
 800107a:	79da      	ldrb	r2, [r3, #7]
 800107c:	f022 020f 	bic.w	r2, r2, #15
 8001080:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = second + 1; i < 60; i++)
 8001082:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001086:	3301      	adds	r3, #1
 8001088:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800108c:	e05c      	b.n	8001148 <SetSecondLedEvenOdd+0x210>
            clockBits->secondsRing |= (1ULL << i);
 800108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	791a      	ldrb	r2, [r3, #4]
 8001094:	795c      	ldrb	r4, [r3, #5]
 8001096:	0224      	lsls	r4, r4, #8
 8001098:	4322      	orrs	r2, r4
 800109a:	799c      	ldrb	r4, [r3, #6]
 800109c:	0424      	lsls	r4, r4, #16
 800109e:	4322      	orrs	r2, r4
 80010a0:	79db      	ldrb	r3, [r3, #7]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	061b      	lsls	r3, r3, #24
 80010a8:	4313      	orrs	r3, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	4680      	mov	r8, r0
 80010ae:	4689      	mov	r9, r1
 80010b0:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80010b4:	f04f 0201 	mov.w	r2, #1
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	f1a1 0420 	sub.w	r4, r1, #32
 80010c0:	f1c1 0020 	rsb	r0, r1, #32
 80010c4:	fa03 fb01 	lsl.w	fp, r3, r1
 80010c8:	fa02 f404 	lsl.w	r4, r2, r4
 80010cc:	ea4b 0b04 	orr.w	fp, fp, r4
 80010d0:	fa22 f000 	lsr.w	r0, r2, r0
 80010d4:	ea4b 0b00 	orr.w	fp, fp, r0
 80010d8:	fa02 fa01 	lsl.w	sl, r2, r1
 80010dc:	ea48 030a 	orr.w	r3, r8, sl
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	ea49 030b 	orr.w	r3, r9, fp
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80010ec:	460b      	mov	r3, r1
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	4613      	mov	r3, r2
 80010f2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80010fe:	4622      	mov	r2, r4
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	462a      	mov	r2, r5
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	2100      	movs	r1, #0
 8001108:	430a      	orrs	r2, r1
 800110a:	711a      	strb	r2, [r3, #4]
 800110c:	462a      	mov	r2, r5
 800110e:	0a12      	lsrs	r2, r2, #8
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	2100      	movs	r1, #0
 8001114:	430a      	orrs	r2, r1
 8001116:	715a      	strb	r2, [r3, #5]
 8001118:	462a      	mov	r2, r5
 800111a:	0c12      	lsrs	r2, r2, #16
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	2100      	movs	r1, #0
 8001120:	430a      	orrs	r2, r1
 8001122:	719a      	strb	r2, [r3, #6]
 8001124:	462a      	mov	r2, r5
 8001126:	0e12      	lsrs	r2, r2, #24
 8001128:	f002 020f 	and.w	r2, r2, #15
 800112c:	f002 000f 	and.w	r0, r2, #15
 8001130:	79da      	ldrb	r2, [r3, #7]
 8001132:	f022 020f 	bic.w	r2, r2, #15
 8001136:	4611      	mov	r1, r2
 8001138:	4602      	mov	r2, r0
 800113a:	430a      	orrs	r2, r1
 800113c:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = second + 1; i < 60; i++)
 800113e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001142:	3301      	adds	r3, #1
 8001144:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001148:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800114c:	2b3b      	cmp	r3, #59	@ 0x3b
 800114e:	d99e      	bls.n	800108e <SetSecondLedEvenOdd+0x156>
}
 8001150:	bf00      	nop
 8001152:	3730      	adds	r7, #48	@ 0x30
 8001154:	46bd      	mov	sp, r7
 8001156:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800115a:	4770      	bx	lr

0800115c <SetHourRingCustom>:
  clockBits->dots = val;
}


void SetHourRingCustom(MyClockBitFields* clockBits, uint8_t outerMode, uint8_t innerMode)
{
 800115c:	b490      	push	{r4, r7}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
 8001168:	4613      	mov	r3, r2
 800116a:	70bb      	strb	r3, [r7, #2]
    // Maska dla pełnego pierścienia (wszystkie 12 godzin)
    uint16_t fullMask = 0x0FFF;  // 12-bitowy: bity 0-11 ustawione na 1
 800116c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001170:	81fb      	strh	r3, [r7, #14]
    // Maska dla kwadransów: godziny 12 (bit 0), 3 (bit 3), 6 (bit 6), 9 (bit 9)
    uint16_t quarterMask = (1U << 0) | (1U << 3) | (1U << 6) | (1U << 9);
 8001172:	f240 2349 	movw	r3, #585	@ 0x249
 8001176:	81bb      	strh	r3, [r7, #12]

    // Ustawienia dla zewnętrznego pierścienia
    switch(outerMode)
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d002      	beq.n	8001184 <SetHourRingCustom+0x28>
 800117e:	2b02      	cmp	r3, #2
 8001180:	d016      	beq.n	80011b0 <SetHourRingCustom+0x54>
 8001182:	e02b      	b.n	80011dc <SetHourRingCustom+0x80>
    {
        case 1:
            clockBits->hoursRingOuter = fullMask;
 8001184:	89fb      	ldrh	r3, [r7, #14]
 8001186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800118a:	b29a      	uxth	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f002 010f 	and.w	r1, r2, #15
 8001192:	010c      	lsls	r4, r1, #4
 8001194:	79d9      	ldrb	r1, [r3, #7]
 8001196:	f001 010f 	and.w	r1, r1, #15
 800119a:	4608      	mov	r0, r1
 800119c:	4621      	mov	r1, r4
 800119e:	4301      	orrs	r1, r0
 80011a0:	71d9      	strb	r1, [r3, #7]
 80011a2:	0912      	lsrs	r2, r2, #4
 80011a4:	b292      	uxth	r2, r2
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	2100      	movs	r1, #0
 80011aa:	430a      	orrs	r2, r1
 80011ac:	721a      	strb	r2, [r3, #8]
            break;
 80011ae:	e01d      	b.n	80011ec <SetHourRingCustom+0x90>
        case 2:
            clockBits->hoursRingOuter = quarterMask;
 80011b0:	89bb      	ldrh	r3, [r7, #12]
 80011b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f002 010f 	and.w	r1, r2, #15
 80011be:	010c      	lsls	r4, r1, #4
 80011c0:	79d9      	ldrb	r1, [r3, #7]
 80011c2:	f001 010f 	and.w	r1, r1, #15
 80011c6:	4608      	mov	r0, r1
 80011c8:	4621      	mov	r1, r4
 80011ca:	4301      	orrs	r1, r0
 80011cc:	71d9      	strb	r1, [r3, #7]
 80011ce:	0912      	lsrs	r2, r2, #4
 80011d0:	b292      	uxth	r2, r2
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	2100      	movs	r1, #0
 80011d6:	430a      	orrs	r2, r1
 80011d8:	721a      	strb	r2, [r3, #8]
            break;
 80011da:	e007      	b.n	80011ec <SetHourRingCustom+0x90>
        default:  // dla wartości 0 i innych nieznanych – wyłącz
            clockBits->hoursRingOuter = 0;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	79da      	ldrb	r2, [r3, #7]
 80011e0:	f002 020f 	and.w	r2, r2, #15
 80011e4:	71da      	strb	r2, [r3, #7]
 80011e6:	2200      	movs	r2, #0
 80011e8:	721a      	strb	r2, [r3, #8]
            break;
 80011ea:	bf00      	nop
    }

    // Ustawienia dla wewnętrznego pierścienia
    switch(innerMode)
 80011ec:	78bb      	ldrb	r3, [r7, #2]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d002      	beq.n	80011f8 <SetHourRingCustom+0x9c>
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d017      	beq.n	8001226 <SetHourRingCustom+0xca>
 80011f6:	e02d      	b.n	8001254 <SetHourRingCustom+0xf8>
    {
        case 1:
            clockBits->hoursRingInner = fullMask;
 80011f8:	89fb      	ldrh	r3, [r7, #14]
 80011fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011fe:	b29a      	uxth	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	b2d1      	uxtb	r1, r2
 8001204:	2000      	movs	r0, #0
 8001206:	4301      	orrs	r1, r0
 8001208:	7259      	strb	r1, [r3, #9]
 800120a:	0a12      	lsrs	r2, r2, #8
 800120c:	b292      	uxth	r2, r2
 800120e:	f002 020f 	and.w	r2, r2, #15
 8001212:	f002 000f 	and.w	r0, r2, #15
 8001216:	7a9a      	ldrb	r2, [r3, #10]
 8001218:	f022 020f 	bic.w	r2, r2, #15
 800121c:	4611      	mov	r1, r2
 800121e:	4602      	mov	r2, r0
 8001220:	430a      	orrs	r2, r1
 8001222:	729a      	strb	r2, [r3, #10]
            break;
 8001224:	e01e      	b.n	8001264 <SetHourRingCustom+0x108>
        case 2:
            clockBits->hoursRingInner = quarterMask;
 8001226:	89bb      	ldrh	r3, [r7, #12]
 8001228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800122c:	b29a      	uxth	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	b2d1      	uxtb	r1, r2
 8001232:	2000      	movs	r0, #0
 8001234:	4301      	orrs	r1, r0
 8001236:	7259      	strb	r1, [r3, #9]
 8001238:	0a12      	lsrs	r2, r2, #8
 800123a:	b292      	uxth	r2, r2
 800123c:	f002 020f 	and.w	r2, r2, #15
 8001240:	f002 000f 	and.w	r0, r2, #15
 8001244:	7a9a      	ldrb	r2, [r3, #10]
 8001246:	f022 020f 	bic.w	r2, r2, #15
 800124a:	4611      	mov	r1, r2
 800124c:	4602      	mov	r2, r0
 800124e:	430a      	orrs	r2, r1
 8001250:	729a      	strb	r2, [r3, #10]
            break;
 8001252:	e007      	b.n	8001264 <SetHourRingCustom+0x108>
        default:  // dla wartości 0 i innych nieznanych – wyłącz
            clockBits->hoursRingInner = 0;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	725a      	strb	r2, [r3, #9]
 800125a:	7a9a      	ldrb	r2, [r3, #10]
 800125c:	f022 020f 	bic.w	r2, r2, #15
 8001260:	729a      	strb	r2, [r3, #10]
            break;
 8001262:	bf00      	nop
    }
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bc90      	pop	{r4, r7}
 800126c:	4770      	bx	lr
	...

08001270 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b27      	ldr	r3, [pc, #156]	@ (8001318 <MX_DMA_Init+0xa8>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a26      	ldr	r2, [pc, #152]	@ (8001318 <MX_DMA_Init+0xa8>)
 8001280:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b24      	ldr	r3, [pc, #144]	@ (8001318 <MX_DMA_Init+0xa8>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <MX_DMA_Init+0xa8>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a1f      	ldr	r2, [pc, #124]	@ (8001318 <MX_DMA_Init+0xa8>)
 800129c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <MX_DMA_Init+0xa8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	200d      	movs	r0, #13
 80012b4:	f003 fb0b 	bl	80048ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012b8:	200d      	movs	r0, #13
 80012ba:	f003 fb24 	bl	8004906 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	200e      	movs	r0, #14
 80012c4:	f003 fb03 	bl	80048ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80012c8:	200e      	movs	r0, #14
 80012ca:	f003 fb1c 	bl	8004906 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	200f      	movs	r0, #15
 80012d4:	f003 fafb 	bl	80048ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80012d8:	200f      	movs	r0, #15
 80012da:	f003 fb14 	bl	8004906 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	202f      	movs	r0, #47	@ 0x2f
 80012e4:	f003 faf3 	bl	80048ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80012e8:	202f      	movs	r0, #47	@ 0x2f
 80012ea:	f003 fb0c 	bl	8004906 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	203a      	movs	r0, #58	@ 0x3a
 80012f4:	f003 faeb 	bl	80048ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012f8:	203a      	movs	r0, #58	@ 0x3a
 80012fa:	f003 fb04 	bl	8004906 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	203b      	movs	r0, #59	@ 0x3b
 8001304:	f003 fae3 	bl	80048ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001308:	203b      	movs	r0, #59	@ 0x3b
 800130a:	f003 fafc 	bl	8004906 <HAL_NVIC_EnableIRQ>

}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b2c      	ldr	r3, [pc, #176]	@ (80013e8 <MX_GPIO_Init+0xcc>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a2b      	ldr	r2, [pc, #172]	@ (80013e8 <MX_GPIO_Init+0xcc>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <MX_GPIO_Init+0xcc>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <MX_GPIO_Init+0xcc>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a24      	ldr	r2, [pc, #144]	@ (80013e8 <MX_GPIO_Init+0xcc>)
 8001358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <MX_GPIO_Init+0xcc>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b1e      	ldr	r3, [pc, #120]	@ (80013e8 <MX_GPIO_Init+0xcc>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a1d      	ldr	r2, [pc, #116]	@ (80013e8 <MX_GPIO_Init+0xcc>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <MX_GPIO_Init+0xcc>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <MX_GPIO_Init+0xcc>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a16      	ldr	r2, [pc, #88]	@ (80013e8 <MX_GPIO_Init+0xcc>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <MX_GPIO_Init+0xcc>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2140      	movs	r1, #64	@ 0x40
 80013a6:	4811      	ldr	r0, [pc, #68]	@ (80013ec <MX_GPIO_Init+0xd0>)
 80013a8:	f004 f810 	bl	80053cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_LATCH_Pin;
 80013ac:	2340      	movs	r3, #64	@ 0x40
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_LATCH_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	480a      	ldr	r0, [pc, #40]	@ (80013ec <MX_GPIO_Init+0xd0>)
 80013c4:	f003 fe66 	bl	8005094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 80013c8:	2320      	movs	r3, #32
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	4805      	ldr	r0, [pc, #20]	@ (80013f0 <MX_GPIO_Init+0xd4>)
 80013dc:	f003 fe5a 	bl	8005094 <HAL_GPIO_Init>

}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	@ 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000
 80013f0:	40020400 	.word	0x40020400

080013f4 <IsNmeaSeparator>:
extern DMA_HandleTypeDef hdma_usart1_rx;
uint8_t gps_dma_buffer[GPS_DMA_BUFFER_SIZE];
gps_data_t gps_data = {0};
static uint16_t old_pos = 0;
static bool IsNmeaSeparator(char c)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
    return (c == ',' || c == '*');  // Zwraca true, jeśli znak jest ',' lub '*'
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b2c      	cmp	r3, #44	@ 0x2c
 8001402:	d002      	beq.n	800140a <IsNmeaSeparator+0x16>
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2b2a      	cmp	r3, #42	@ 0x2a
 8001408:	d101      	bne.n	800140e <IsNmeaSeparator+0x1a>
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <IsNmeaSeparator+0x1c>
 800140e:	2300      	movs	r3, #0
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	b2db      	uxtb	r3, r3
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <ParseUInt8>:
static uint8_t ParseUInt8(const char *startingPtr, uint8_t maxLen)
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;  // Inicjalizacja zmiennej do przechowywania wyniku
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
    // Iteracja przez każdy znak w ciągu, do maksymalnej długości
    for (uint8_t i = 0; i < maxLen; i++)
 8001432:	2300      	movs	r3, #0
 8001434:	73bb      	strb	r3, [r7, #14]
 8001436:	e01c      	b.n	8001472 <ParseUInt8+0x50>
    {
        // Sprawdzenie, czy znak jest cyfrą ('0' - '9')
        if (startingPtr[i] < '0' || startingPtr[i] > '9')
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b2f      	cmp	r3, #47	@ 0x2f
 8001442:	d91a      	bls.n	800147a <ParseUInt8+0x58>
 8001444:	7bbb      	ldrb	r3, [r7, #14]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b39      	cmp	r3, #57	@ 0x39
 800144e:	d814      	bhi.n	800147a <ParseUInt8+0x58>
            break;  // Przerwanie pętli, jeśli znak nie jest cyfrą
        // Aktualizacja wartości poprzez przesunięcie dziesiętne i dodanie nowej cyfry
        value = (uint8_t)(value * 10 + (startingPtr[i] - '0'));
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	461a      	mov	r2, r3
 8001454:	0092      	lsls	r2, r2, #2
 8001456:	4413      	add	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	b2da      	uxtb	r2, r3
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	440b      	add	r3, r1
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4413      	add	r3, r2
 8001466:	b2db      	uxtb	r3, r3
 8001468:	3b30      	subs	r3, #48	@ 0x30
 800146a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < maxLen; i++)
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	3301      	adds	r3, #1
 8001470:	73bb      	strb	r3, [r7, #14]
 8001472:	7bba      	ldrb	r2, [r7, #14]
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	429a      	cmp	r2, r3
 8001478:	d3de      	bcc.n	8001438 <ParseUInt8+0x16>
    }
    return value;  // Zwrócenie sparsowanej wartości
 800147a:	7bfb      	ldrb	r3, [r7, #15]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <ParseGPRMC>:
 * // gps_data.day = 23
 * // gps_data.month = 03
 * // gps_data.year = 94
 */
static void ParseGPRMC(const char *nmeaLine)
{
 8001488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148a:	b091      	sub	sp, #68	@ 0x44
 800148c:	af04      	add	r7, sp, #16
 800148e:	6078      	str	r0, [r7, #4]
    const char *p = nmeaLine;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t fieldIndex = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    const char *fieldPtr = NULL;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
    for (; *p != '\0'; p++)
 800149e:	e071      	b.n	8001584 <ParseGPRMC+0xfc>
    {
        if (IsNmeaSeparator(*p) || *p == '\r' || *p == '\n')
 80014a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ffa5 	bl	80013f4 <IsNmeaSeparator>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d107      	bne.n	80014c0 <ParseGPRMC+0x38>
 80014b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b0d      	cmp	r3, #13
 80014b6:	d003      	beq.n	80014c0 <ParseGPRMC+0x38>
 80014b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b0a      	cmp	r3, #10
 80014be:	d155      	bne.n	800156c <ParseGPRMC+0xe4>
        {
            if (fieldPtr)
 80014c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d04a      	beq.n	800155c <ParseGPRMC+0xd4>
            {
                switch(fieldIndex)
 80014c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80014ca:	2b09      	cmp	r3, #9
 80014cc:	d028      	beq.n	8001520 <ParseGPRMC+0x98>
 80014ce:	2b09      	cmp	r3, #9
 80014d0:	dc43      	bgt.n	800155a <ParseGPRMC+0xd2>
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d002      	beq.n	80014dc <ParseGPRMC+0x54>
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d01d      	beq.n	8001516 <ParseGPRMC+0x8e>
                        gps_data.day   = ParseUInt8(fieldPtr, 2);
                        gps_data.month = ParseUInt8(fieldPtr+2, 2);
                        gps_data.year  = ParseUInt8(fieldPtr+4, 2);
                        break;
                    default:
                        break;
 80014da:	e03e      	b.n	800155a <ParseGPRMC+0xd2>
                        gps_data.hours   = ParseUInt8(fieldPtr, 2);
 80014dc:	2102      	movs	r1, #2
 80014de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014e0:	f7ff ff9f 	bl	8001422 <ParseUInt8>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b42      	ldr	r3, [pc, #264]	@ (80015f4 <ParseGPRMC+0x16c>)
 80014ea:	701a      	strb	r2, [r3, #0]
                        gps_data.minutes = ParseUInt8(fieldPtr+2, 2);
 80014ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ee:	3302      	adds	r3, #2
 80014f0:	2102      	movs	r1, #2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ff95 	bl	8001422 <ParseUInt8>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b3d      	ldr	r3, [pc, #244]	@ (80015f4 <ParseGPRMC+0x16c>)
 80014fe:	705a      	strb	r2, [r3, #1]
                        gps_data.seconds = ParseUInt8(fieldPtr+4, 2);
 8001500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001502:	3304      	adds	r3, #4
 8001504:	2102      	movs	r1, #2
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff8b 	bl	8001422 <ParseUInt8>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	4b38      	ldr	r3, [pc, #224]	@ (80015f4 <ParseGPRMC+0x16c>)
 8001512:	709a      	strb	r2, [r3, #2]
                        break;
 8001514:	e022      	b.n	800155c <ParseGPRMC+0xd4>
                        gps_data.fix = *fieldPtr;
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	781a      	ldrb	r2, [r3, #0]
 800151a:	4b36      	ldr	r3, [pc, #216]	@ (80015f4 <ParseGPRMC+0x16c>)
 800151c:	71da      	strb	r2, [r3, #7]
                        break;
 800151e:	e01d      	b.n	800155c <ParseGPRMC+0xd4>
                        gps_data.day   = ParseUInt8(fieldPtr, 2);
 8001520:	2102      	movs	r1, #2
 8001522:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001524:	f7ff ff7d 	bl	8001422 <ParseUInt8>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	4b31      	ldr	r3, [pc, #196]	@ (80015f4 <ParseGPRMC+0x16c>)
 800152e:	70da      	strb	r2, [r3, #3]
                        gps_data.month = ParseUInt8(fieldPtr+2, 2);
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	3302      	adds	r3, #2
 8001534:	2102      	movs	r1, #2
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff73 	bl	8001422 <ParseUInt8>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b2c      	ldr	r3, [pc, #176]	@ (80015f4 <ParseGPRMC+0x16c>)
 8001542:	711a      	strb	r2, [r3, #4]
                        gps_data.year  = ParseUInt8(fieldPtr+4, 2);
 8001544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001546:	3304      	adds	r3, #4
 8001548:	2102      	movs	r1, #2
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff69 	bl	8001422 <ParseUInt8>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <ParseGPRMC+0x16c>)
 8001556:	715a      	strb	r2, [r3, #5]
                        break;
 8001558:	e000      	b.n	800155c <ParseGPRMC+0xd4>
                        break;
 800155a:	bf00      	nop
                }
            }
            fieldPtr = NULL;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
            fieldIndex++;
 8001560:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001564:	3301      	adds	r3, #1
 8001566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800156a:	e004      	b.n	8001576 <ParseGPRMC+0xee>
        }
        else
        {
            if (!fieldPtr) fieldPtr = p;
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <ParseGPRMC+0xee>
 8001572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (*p == '*') break;
 8001576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b2a      	cmp	r3, #42	@ 0x2a
 800157c:	d007      	beq.n	800158e <ParseGPRMC+0x106>
    for (; *p != '\0'; p++)
 800157e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001580:	3301      	adds	r3, #1
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d189      	bne.n	80014a0 <ParseGPRMC+0x18>
 800158c:	e000      	b.n	8001590 <ParseGPRMC+0x108>
        if (*p == '*') break;
 800158e:	bf00      	nop
    }
    // Natychmiastowa aktualizacja RTC zaraz po poprawnym odczycie GPRMC
    // (sprawdzamy czy fix jest 'A'):
    if (gps_data.fix == 'A')
 8001590:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <ParseGPRMC+0x16c>)
 8001592:	79db      	ldrb	r3, [r3, #7]
 8001594:	2b41      	cmp	r3, #65	@ 0x41
 8001596:	d129      	bne.n	80015ec <ParseGPRMC+0x164>
        // Tworzymy struktury dla lokalnego czasu
        RTC_TimeTypeDef localTime;
        RTC_DateTypeDef localDate;

        // Konwertuj z GPS (UTC) na czas lokalny
        ConvertUtcToLocalTime(gps_data.hours, gps_data.minutes, gps_data.seconds,
 8001598:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <ParseGPRMC+0x16c>)
 800159a:	7818      	ldrb	r0, [r3, #0]
 800159c:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <ParseGPRMC+0x16c>)
 800159e:	785c      	ldrb	r4, [r3, #1]
 80015a0:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <ParseGPRMC+0x16c>)
 80015a2:	789d      	ldrb	r5, [r3, #2]
 80015a4:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <ParseGPRMC+0x16c>)
 80015a6:	78de      	ldrb	r6, [r3, #3]
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <ParseGPRMC+0x16c>)
 80015aa:	791b      	ldrb	r3, [r3, #4]
 80015ac:	4a11      	ldr	r2, [pc, #68]	@ (80015f4 <ParseGPRMC+0x16c>)
 80015ae:	7952      	ldrb	r2, [r2, #5]
 80015b0:	f107 010c 	add.w	r1, r7, #12
 80015b4:	9103      	str	r1, [sp, #12]
 80015b6:	f107 0110 	add.w	r1, r7, #16
 80015ba:	9102      	str	r1, [sp, #8]
 80015bc:	9201      	str	r2, [sp, #4]
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	4633      	mov	r3, r6
 80015c2:	462a      	mov	r2, r5
 80015c4:	4621      	mov	r1, r4
 80015c6:	f000 f911 	bl	80017ec <ConvertUtcToLocalTime>
                              gps_data.day,   gps_data.month,  gps_data.year,
                              &localTime, &localDate);
        // I wpisz do RTC
        HAL_RTC_SetTime(&hrtc, &localTime, RTC_FORMAT_BIN);
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	4809      	ldr	r0, [pc, #36]	@ (80015f8 <ParseGPRMC+0x170>)
 80015d4:	f007 f9cd 	bl	8008972 <HAL_RTC_SetTime>
        HAL_RTC_SetDate(&hrtc, &localDate, RTC_FORMAT_BIN);
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2200      	movs	r2, #0
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	@ (80015f8 <ParseGPRMC+0x170>)
 80015e2:	f007 fabe 	bl	8008b62 <HAL_RTC_SetDate>
        colon =1;
 80015e6:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <ParseGPRMC+0x174>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
    }
}
 80015ec:	bf00      	nop
 80015ee:	3734      	adds	r7, #52	@ 0x34
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f4:	200004c8 	.word	0x200004c8
 80015f8:	200006a4 	.word	0x200006a4
 80015fc:	200000c5 	.word	0x200000c5

08001600 <ParseGPGGA>:

static void ParseGPGGA(const char *nmeaLine)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
    const char *p = nmeaLine;          // Wskaźnik do iteracji przez ciąg znaków
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	617b      	str	r3, [r7, #20]
    uint8_t fieldIndex = 0;            // Indeks aktualnie przetwarzanego pola
 800160c:	2300      	movs	r3, #0
 800160e:	74fb      	strb	r3, [r7, #19]
    const char *fieldPtr = NULL;       // Wskaźnik do początku aktualnego pola
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
    // Iteracja przez każdy znak w linii NMEA
    for (; *p != '\0'; p++)
 8001614:	e02f      	b.n	8001676 <ParseGPGGA+0x76>
    {
        // Sprawdzenie, czy znak jest separatorem lub końcem linii
        if (IsNmeaSeparator(*p) || *p == '\r' || *p == '\n')
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff feea 	bl	80013f4 <IsNmeaSeparator>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d107      	bne.n	8001636 <ParseGPGGA+0x36>
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b0d      	cmp	r3, #13
 800162c:	d003      	beq.n	8001636 <ParseGPGGA+0x36>
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b0a      	cmp	r3, #10
 8001634:	d113      	bne.n	800165e <ParseGPGGA+0x5e>
        {
            // Jeśli aktualne pole nie jest puste i indeks pola to 7, przetwarzamy jego zawartość
            if (fieldPtr && fieldIndex == 7)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00a      	beq.n	8001652 <ParseGPGGA+0x52>
 800163c:	7cfb      	ldrb	r3, [r7, #19]
 800163e:	2b07      	cmp	r3, #7
 8001640:	d107      	bne.n	8001652 <ParseGPGGA+0x52>
            {
                gps_data.satellites = ParseUInt8(fieldPtr, 2);    // Liczba satelit (np. '08' oznacza 8)
 8001642:	2102      	movs	r1, #2
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f7ff feec 	bl	8001422 <ParseUInt8>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <ParseGPGGA+0x8c>)
 8001650:	719a      	strb	r2, [r3, #6]
            }
            fieldPtr = NULL;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
            fieldIndex++;
 8001656:	7cfb      	ldrb	r3, [r7, #19]
 8001658:	3301      	adds	r3, #1
 800165a:	74fb      	strb	r3, [r7, #19]
 800165c:	e004      	b.n	8001668 <ParseGPGGA+0x68>
        }
        else
        {
            // Jeśli jeszcze nie ustawiono początku pola, ustawiamy wskaźnik
            if (!fieldPtr)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <ParseGPGGA+0x68>
                fieldPtr = p;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	60fb      	str	r3, [r7, #12]
        }
        // Jeśli napotkano '*', kończymy parsowanie tej linii
        if (*p == '*')
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b2a      	cmp	r3, #42	@ 0x2a
 800166e:	d007      	beq.n	8001680 <ParseGPGGA+0x80>
    for (; *p != '\0'; p++)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	3301      	adds	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1cb      	bne.n	8001616 <ParseGPGGA+0x16>
            break;
    }
}
 800167e:	e000      	b.n	8001682 <ParseGPGGA+0x82>
            break;
 8001680:	bf00      	nop
}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200004c8 	.word	0x200004c8

08001690 <GPS_ProcessBuffer>:

void GPS_ProcessBuffer(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
    /* Obliczenie aktualnej pozycji w buforze */
    uint16_t now_pos = GPS_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8001696:	4b40      	ldr	r3, [pc, #256]	@ (8001798 <GPS_ProcessBuffer+0x108>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	b29b      	uxth	r3, r3
 800169e:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80016a2:	80fb      	strh	r3, [r7, #6]
    while (old_pos != now_pos)
 80016a4:	e06d      	b.n	8001782 <GPS_ProcessBuffer+0xf2>
    {
        char c = (char)gps_dma_buffer[old_pos];
 80016a6:	4b3d      	ldr	r3, [pc, #244]	@ (800179c <GPS_ProcessBuffer+0x10c>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b3c      	ldr	r3, [pc, #240]	@ (80017a0 <GPS_ProcessBuffer+0x110>)
 80016ae:	5c9b      	ldrb	r3, [r3, r2]
 80016b0:	717b      	strb	r3, [r7, #5]
        static char lineBuf[128];
        static uint8_t lineIndex = 0;
        if (lineIndex < sizeof(lineBuf) - 1)
 80016b2:	4b3c      	ldr	r3, [pc, #240]	@ (80017a4 <GPS_ProcessBuffer+0x114>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b7e      	cmp	r3, #126	@ 0x7e
 80016b8:	d809      	bhi.n	80016ce <GPS_ProcessBuffer+0x3e>
        {
            lineBuf[lineIndex++] = c;
 80016ba:	4b3a      	ldr	r3, [pc, #232]	@ (80017a4 <GPS_ProcessBuffer+0x114>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	b2d1      	uxtb	r1, r2
 80016c2:	4a38      	ldr	r2, [pc, #224]	@ (80017a4 <GPS_ProcessBuffer+0x114>)
 80016c4:	7011      	strb	r1, [r2, #0]
 80016c6:	4619      	mov	r1, r3
 80016c8:	4a37      	ldr	r2, [pc, #220]	@ (80017a8 <GPS_ProcessBuffer+0x118>)
 80016ca:	797b      	ldrb	r3, [r7, #5]
 80016cc:	5453      	strb	r3, [r2, r1]
        }
        if (c == '\n' || c == '\r')
 80016ce:	797b      	ldrb	r3, [r7, #5]
 80016d0:	2b0a      	cmp	r3, #10
 80016d2:	d002      	beq.n	80016da <GPS_ProcessBuffer+0x4a>
 80016d4:	797b      	ldrb	r3, [r7, #5]
 80016d6:	2b0d      	cmp	r3, #13
 80016d8:	d145      	bne.n	8001766 <GPS_ProcessBuffer+0xd6>
        {
            lineBuf[lineIndex] = '\0';
 80016da:	4b32      	ldr	r3, [pc, #200]	@ (80017a4 <GPS_ProcessBuffer+0x114>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	4b31      	ldr	r3, [pc, #196]	@ (80017a8 <GPS_ProcessBuffer+0x118>)
 80016e2:	2100      	movs	r1, #0
 80016e4:	5499      	strb	r1, [r3, r2]
            if (strncmp(lineBuf, "$GPRMC", 6) == 0)
 80016e6:	2206      	movs	r2, #6
 80016e8:	4930      	ldr	r1, [pc, #192]	@ (80017ac <GPS_ProcessBuffer+0x11c>)
 80016ea:	482f      	ldr	r0, [pc, #188]	@ (80017a8 <GPS_ProcessBuffer+0x118>)
 80016ec:	f009 fe14 	bl	800b318 <strncmp>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d102      	bne.n	80016fc <GPS_ProcessBuffer+0x6c>
            {
                ParseGPRMC(lineBuf);
 80016f6:	482c      	ldr	r0, [pc, #176]	@ (80017a8 <GPS_ProcessBuffer+0x118>)
 80016f8:	f7ff fec6 	bl	8001488 <ParseGPRMC>
            }
          if (strncmp(lineBuf, "$GPGGA", 6) == 0)
 80016fc:	2206      	movs	r2, #6
 80016fe:	492c      	ldr	r1, [pc, #176]	@ (80017b0 <GPS_ProcessBuffer+0x120>)
 8001700:	4829      	ldr	r0, [pc, #164]	@ (80017a8 <GPS_ProcessBuffer+0x118>)
 8001702:	f009 fe09 	bl	800b318 <strncmp>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <GPS_ProcessBuffer+0x82>
            {
                ParseGPGGA(lineBuf);
 800170c:	4826      	ldr	r0, [pc, #152]	@ (80017a8 <GPS_ProcessBuffer+0x118>)
 800170e:	f7ff ff77 	bl	8001600 <ParseGPGGA>
            }
            if (strncmp(lineBuf, "$GPRMC", 6) == 0 || strncmp(lineBuf, "$GNRMC", 6) == 0)
 8001712:	2206      	movs	r2, #6
 8001714:	4925      	ldr	r1, [pc, #148]	@ (80017ac <GPS_ProcessBuffer+0x11c>)
 8001716:	4824      	ldr	r0, [pc, #144]	@ (80017a8 <GPS_ProcessBuffer+0x118>)
 8001718:	f009 fdfe 	bl	800b318 <strncmp>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <GPS_ProcessBuffer+0xa2>
 8001722:	2206      	movs	r2, #6
 8001724:	4923      	ldr	r1, [pc, #140]	@ (80017b4 <GPS_ProcessBuffer+0x124>)
 8001726:	4820      	ldr	r0, [pc, #128]	@ (80017a8 <GPS_ProcessBuffer+0x118>)
 8001728:	f009 fdf6 	bl	800b318 <strncmp>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d103      	bne.n	800173a <GPS_ProcessBuffer+0xaa>
            {
                ParseGPRMC(lineBuf);
 8001732:	481d      	ldr	r0, [pc, #116]	@ (80017a8 <GPS_ProcessBuffer+0x118>)
 8001734:	f7ff fea8 	bl	8001488 <ParseGPRMC>
 8001738:	e012      	b.n	8001760 <GPS_ProcessBuffer+0xd0>
            }
            else if (strncmp(lineBuf, "$GPGGA", 6) == 0 || strncmp(lineBuf, "$GNGGA", 6) == 0)
 800173a:	2206      	movs	r2, #6
 800173c:	491c      	ldr	r1, [pc, #112]	@ (80017b0 <GPS_ProcessBuffer+0x120>)
 800173e:	481a      	ldr	r0, [pc, #104]	@ (80017a8 <GPS_ProcessBuffer+0x118>)
 8001740:	f009 fdea 	bl	800b318 <strncmp>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <GPS_ProcessBuffer+0xca>
 800174a:	2206      	movs	r2, #6
 800174c:	491a      	ldr	r1, [pc, #104]	@ (80017b8 <GPS_ProcessBuffer+0x128>)
 800174e:	4816      	ldr	r0, [pc, #88]	@ (80017a8 <GPS_ProcessBuffer+0x118>)
 8001750:	f009 fde2 	bl	800b318 <strncmp>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <GPS_ProcessBuffer+0xd0>
            {
                ParseGPGGA(lineBuf);
 800175a:	4813      	ldr	r0, [pc, #76]	@ (80017a8 <GPS_ProcessBuffer+0x118>)
 800175c:	f7ff ff50 	bl	8001600 <ParseGPGGA>
            }
            lineIndex = 0;
 8001760:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <GPS_ProcessBuffer+0x114>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
        }
        old_pos++;
 8001766:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <GPS_ProcessBuffer+0x10c>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <GPS_ProcessBuffer+0x10c>)
 8001770:	801a      	strh	r2, [r3, #0]
        if (old_pos >= GPS_DMA_BUFFER_SIZE)
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <GPS_ProcessBuffer+0x10c>)
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800177a:	d302      	bcc.n	8001782 <GPS_ProcessBuffer+0xf2>
            old_pos = 0;
 800177c:	4b07      	ldr	r3, [pc, #28]	@ (800179c <GPS_ProcessBuffer+0x10c>)
 800177e:	2200      	movs	r2, #0
 8001780:	801a      	strh	r2, [r3, #0]
    while (old_pos != now_pos)
 8001782:	4b06      	ldr	r3, [pc, #24]	@ (800179c <GPS_ProcessBuffer+0x10c>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	88fa      	ldrh	r2, [r7, #6]
 8001788:	429a      	cmp	r2, r3
 800178a:	d18c      	bne.n	80016a6 <GPS_ProcessBuffer+0x16>
    }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200009f8 	.word	0x200009f8
 800179c:	200004d0 	.word	0x200004d0
 80017a0:	200000c8 	.word	0x200000c8
 80017a4:	200004d2 	.word	0x200004d2
 80017a8:	200004d4 	.word	0x200004d4
 80017ac:	0800b3c4 	.word	0x0800b3c4
 80017b0:	0800b3cc 	.word	0x0800b3cc
 80017b4:	0800b3d4 	.word	0x0800b3d4
 80017b8:	0800b3dc 	.word	0x0800b3dc

080017bc <GPS_Init>:

void GPS_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
    memset(&gps_data, 0, sizeof(gps_data));
 80017c0:	2208      	movs	r2, #8
 80017c2:	2100      	movs	r1, #0
 80017c4:	4806      	ldr	r0, [pc, #24]	@ (80017e0 <GPS_Init+0x24>)
 80017c6:	f009 fd9f 	bl	800b308 <memset>
    memset(gps_dma_buffer, 0, GPS_DMA_BUFFER_SIZE);
 80017ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ce:	2100      	movs	r1, #0
 80017d0:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <GPS_Init+0x28>)
 80017d2:	f009 fd99 	bl	800b308 <memset>
    old_pos = 0;
 80017d6:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <GPS_Init+0x2c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	801a      	strh	r2, [r3, #0]
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200004c8 	.word	0x200004c8
 80017e4:	200000c8 	.word	0x200000c8
 80017e8:	200004d0 	.word	0x200004d0

080017ec <ConvertUtcToLocalTime>:

void ConvertUtcToLocalTime(uint8_t utcHours, uint8_t utcMinutes,
		uint8_t utcSeconds, uint8_t utcDay, uint8_t utcMonth, uint8_t utcYear,
		RTC_TimeTypeDef *localTime, RTC_DateTypeDef *localDate) {
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b08d      	sub	sp, #52	@ 0x34
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4604      	mov	r4, r0
 80017f4:	4608      	mov	r0, r1
 80017f6:	4611      	mov	r1, r2
 80017f8:	461a      	mov	r2, r3
 80017fa:	4623      	mov	r3, r4
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	4603      	mov	r3, r0
 8001800:	71bb      	strb	r3, [r7, #6]
 8001802:	460b      	mov	r3, r1
 8001804:	717b      	strb	r3, [r7, #5]
 8001806:	4613      	mov	r3, r2
 8001808:	713b      	strb	r3, [r7, #4]
	// UTC+1 dla Polski w czasie zimowym, a UTC+2 latem:
	// year w RTC to 00..99, można przerobić na 20xx itp.
	// Załóżmy, że gps_data.year = 24 oznacza 2024 (proste uproszczenie)
	uint16_t fullYear = 2000 + utcYear;
 800180a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800180e:	b29b      	uxth	r3, r3
 8001810:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001814:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int offset = 1;
 8001816:	2301      	movs	r3, #1
 8001818:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (IsDstActive(fullYear, utcMonth, utcDay)) {
 800181a:	793a      	ldrb	r2, [r7, #4]
 800181c:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 8001820:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f909 	bl	8001a3a <IsDstActive>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <ConvertUtcToLocalTime+0x46>
		offset = 2;
 800182e:	2302      	movs	r3, #2
 8001830:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	int hour = utcHours + offset;
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001836:	4413      	add	r3, r2
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
	int minute = utcMinutes;
 800183a:	79bb      	ldrb	r3, [r7, #6]
 800183c:	61bb      	str	r3, [r7, #24]
	int second = utcSeconds;
 800183e:	797b      	ldrb	r3, [r7, #5]
 8001840:	617b      	str	r3, [r7, #20]

	int day = utcDay;
 8001842:	793b      	ldrb	r3, [r7, #4]
 8001844:	623b      	str	r3, [r7, #32]
	int month = utcMonth;
 8001846:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800184a:	61fb      	str	r3, [r7, #28]
	int yearXX = utcYear;   // 0..99 w RTC
 800184c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001850:	613b      	str	r3, [r7, #16]


	DOW = GetDayOfWeek(fullYear, utcMonth, utcDay);
 8001852:	793a      	ldrb	r2, [r7, #4]
 8001854:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 8001858:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f92a 	bl	8001ab4 <GetDayOfWeek>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	4b3b      	ldr	r3, [pc, #236]	@ (8001954 <ConvertUtcToLocalTime+0x168>)
 8001866:	701a      	strb	r2, [r3, #0]

	// Ale do obliczeń powyżej używamy fullYear (np. 2024)
	// Korekty przekroczeń doby
	if (hour >= 24) {
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	2b17      	cmp	r3, #23
 800186c:	dd20      	ble.n	80018b0 <ConvertUtcToLocalTime+0xc4>
		hour -= 24;
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	3b18      	subs	r3, #24
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
		day++;
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	3301      	adds	r3, #1
 8001878:	623b      	str	r3, [r7, #32]
		// sprawdź, czy nie przekraczamy dni w tym miesiącu
		uint8_t mdays = DaysInMonth(fullYear, month);
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001880:	4611      	mov	r1, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f86a 	bl	800195c <DaysInMonth>
 8001888:	4603      	mov	r3, r0
 800188a:	73fb      	strb	r3, [r7, #15]
		if (day > mdays) {
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	6a3a      	ldr	r2, [r7, #32]
 8001890:	429a      	cmp	r2, r3
 8001892:	dd2d      	ble.n	80018f0 <ConvertUtcToLocalTime+0x104>
			day = 1;
 8001894:	2301      	movs	r3, #1
 8001896:	623b      	str	r3, [r7, #32]
			month++;
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	3301      	adds	r3, #1
 800189c:	61fb      	str	r3, [r7, #28]
			if (month > 12) {
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	2b0c      	cmp	r3, #12
 80018a2:	dd25      	ble.n	80018f0 <ConvertUtcToLocalTime+0x104>
				month = 1;
 80018a4:	2301      	movs	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
				fullYear++;
 80018a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80018aa:	3301      	adds	r3, #1
 80018ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80018ae:	e01f      	b.n	80018f0 <ConvertUtcToLocalTime+0x104>
			}
		}
	} else if (hour < 0) {
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	da1c      	bge.n	80018f0 <ConvertUtcToLocalTime+0x104>
		hour += 24;
 80018b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b8:	3318      	adds	r3, #24
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
		day--;
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	3b01      	subs	r3, #1
 80018c0:	623b      	str	r3, [r7, #32]
		if (day < 1) {
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	dc13      	bgt.n	80018f0 <ConvertUtcToLocalTime+0x104>
			// cofka do poprzedniego miesiąca
			month--;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	61fb      	str	r3, [r7, #28]
			if (month < 1) {
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	dc04      	bgt.n	80018de <ConvertUtcToLocalTime+0xf2>
				month = 12;
 80018d4:	230c      	movs	r3, #12
 80018d6:	61fb      	str	r3, [r7, #28]
				fullYear--;
 80018d8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80018da:	3b01      	subs	r3, #1
 80018dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			}
			day = DaysInMonth(fullYear, month);
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80018e4:	4611      	mov	r1, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f838 	bl	800195c <DaysInMonth>
 80018ec:	4603      	mov	r3, r0
 80018ee:	623b      	str	r3, [r7, #32]
		}
	}
	// fullYear z powrotem do 00..99
	// Proste: np. 2025 -> 25
	yearXX = (uint8_t) (fullYear % 100);
 80018f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80018f2:	4a19      	ldr	r2, [pc, #100]	@ (8001958 <ConvertUtcToLocalTime+0x16c>)
 80018f4:	fba2 1203 	umull	r1, r2, r2, r3
 80018f8:	0952      	lsrs	r2, r2, #5
 80018fa:	2164      	movs	r1, #100	@ 0x64
 80018fc:	fb01 f202 	mul.w	r2, r1, r2
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	b29b      	uxth	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	613b      	str	r3, [r7, #16]
	// Zapis do struktur RTC
	localTime->Hours = hour;
 8001908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190a:	b2da      	uxtb	r2, r3
 800190c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800190e:	701a      	strb	r2, [r3, #0]
	localTime->Minutes = minute;
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001916:	705a      	strb	r2, [r3, #1]
	localTime->Seconds = second;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800191e:	709a      	strb	r2, [r3, #2]
	localTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001920:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
	localTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8001926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
	localDate->Date = (uint8_t) day;
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001932:	709a      	strb	r2, [r3, #2]
	localDate->Month = (uint8_t) month;
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800193a:	705a      	strb	r2, [r3, #1]
	localDate->Year = (uint8_t) yearXX;
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001942:	70da      	strb	r2, [r3, #3]
	localDate->WeekDay = RTC_WEEKDAY_MONDAY; // albo oblicz w oparciu o GetDayOfWeek
 8001944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
}
 800194a:	bf00      	nop
 800194c:	3734      	adds	r7, #52	@ 0x34
 800194e:	46bd      	mov	sp, r7
 8001950:	bd90      	pop	{r4, r7, pc}
 8001952:	bf00      	nop
 8001954:	200000c4 	.word	0x200000c4
 8001958:	51eb851f 	.word	0x51eb851f

0800195c <DaysInMonth>:
uint8_t DaysInMonth(uint16_t year, uint8_t month) {
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	460a      	mov	r2, r1
 8001966:	80fb      	strh	r3, [r7, #6]
 8001968:	4613      	mov	r3, r2
 800196a:	717b      	strb	r3, [r7, #5]
	static const uint8_t daysTable[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30,
			31, 30, 31 };
	if (month == 2)  // luty
 800196c:	797b      	ldrb	r3, [r7, #5]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d12f      	bne.n	80019d2 <DaysInMonth+0x76>
			{
		// Sprawdź, czy rok przestępny
		// „Rok przestępny” jeżeli:
		//  - rok % 4 == 0 i rok % 100 != 0
		//  - lub rok % 400 == 0
		bool leap = false;
 8001972:	2300      	movs	r3, #0
 8001974:	73fb      	strb	r3, [r7, #15]
		if ((year % 400) == 0) {
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	4a1b      	ldr	r2, [pc, #108]	@ (80019e8 <DaysInMonth+0x8c>)
 800197a:	fba2 1203 	umull	r1, r2, r2, r3
 800197e:	09d2      	lsrs	r2, r2, #7
 8001980:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001984:	fb01 f202 	mul.w	r2, r1, r2
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	b29b      	uxth	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <DaysInMonth+0x3a>
			leap = true;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e016      	b.n	80019c4 <DaysInMonth+0x68>
		} else if ((year % 100) == 0) {
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	4a13      	ldr	r2, [pc, #76]	@ (80019e8 <DaysInMonth+0x8c>)
 800199a:	fba2 1203 	umull	r1, r2, r2, r3
 800199e:	0952      	lsrs	r2, r2, #5
 80019a0:	2164      	movs	r1, #100	@ 0x64
 80019a2:	fb01 f202 	mul.w	r2, r1, r2
 80019a6:	1a9b      	subs	r3, r3, r2
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d102      	bne.n	80019b4 <DaysInMonth+0x58>
			leap = false;
 80019ae:	2300      	movs	r3, #0
 80019b0:	73fb      	strb	r3, [r7, #15]
 80019b2:	e007      	b.n	80019c4 <DaysInMonth+0x68>
		} else if ((year % 4) == 0) {
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <DaysInMonth+0x68>
			leap = true;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
		}
		return (leap ? 29 : 28);
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <DaysInMonth+0x72>
 80019ca:	231d      	movs	r3, #29
 80019cc:	e005      	b.n	80019da <DaysInMonth+0x7e>
 80019ce:	231c      	movs	r3, #28
 80019d0:	e003      	b.n	80019da <DaysInMonth+0x7e>
	}
	return daysTable[month - 1];
 80019d2:	797b      	ldrb	r3, [r7, #5]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	4a05      	ldr	r2, [pc, #20]	@ (80019ec <DaysInMonth+0x90>)
 80019d8:	5cd3      	ldrb	r3, [r2, r3]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	51eb851f 	.word	0x51eb851f
 80019ec:	0800b498 	.word	0x0800b498

080019f0 <GetLastSundayOfMonth>:
/**
 * @brief Zwraca numer dnia (1..31) będący ostatnią niedzielą w danym miesiącu.
 *        Np. dla roku=2024, marzec=3, może zwrócić 31, 30, 29... w zależności,
 *        co jest faktycznie niedzielą.
 */
uint8_t GetLastSundayOfMonth(uint16_t year, uint8_t month) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	460a      	mov	r2, r1
 80019fa:	80fb      	strh	r3, [r7, #6]
 80019fc:	4613      	mov	r3, r2
 80019fe:	717b      	strb	r3, [r7, #5]
	uint8_t d = DaysInMonth(year, month);
 8001a00:	797a      	ldrb	r2, [r7, #5]
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ffa8 	bl	800195c <DaysInMonth>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	73fb      	strb	r3, [r7, #15]
	while (1) {
		uint8_t dow = GetDayOfWeek(year, month, d);
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	7979      	ldrb	r1, [r7, #5]
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f84c 	bl	8001ab4 <GetDayOfWeek>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	73bb      	strb	r3, [r7, #14]



		if (dow == 0) { // 0 = niedziela (Sunday)
 8001a20:	7bbb      	ldrb	r3, [r7, #14]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <GetLastSundayOfMonth+0x3a>
			return d;
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	e003      	b.n	8001a32 <GetLastSundayOfMonth+0x42>
		}
		d--;
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
	while (1) {
 8001a30:	e7ee      	b.n	8001a10 <GetLastSundayOfMonth+0x20>
	}
	// Teoretycznie dojdziemy na pewno do jakiejś niedzieli,
	// więc break nie jest potrzebny.
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <IsDstActive>:

bool IsDstActive(uint16_t year, uint8_t month, uint8_t day) {
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	80fb      	strh	r3, [r7, #6]
 8001a44:	460b      	mov	r3, r1
 8001a46:	717b      	strb	r3, [r7, #5]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	713b      	strb	r3, [r7, #4]
	// Ostatnia niedziela marca
	uint8_t lastSundayMarch = GetLastSundayOfMonth(year, 3);
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	2103      	movs	r1, #3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ffcd 	bl	80019f0 <GetLastSundayOfMonth>
 8001a56:	4603      	mov	r3, r0
 8001a58:	73fb      	strb	r3, [r7, #15]
	// Ostatnia niedziela października
	uint8_t lastSundayOctober = GetLastSundayOfMonth(year, 10);
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	210a      	movs	r1, #10
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ffc6 	bl	80019f0 <GetLastSundayOfMonth>
 8001a64:	4603      	mov	r3, r0
 8001a66:	73bb      	strb	r3, [r7, #14]
	// Warunek: jeżeli data >= (3, lastSundayMarch) i data < (10, lastSundayOctober),
	// to DST = true.
	// Oczywiście trzeba uwzględnić, że jeśli month < 3 to zawsze false,
	// jeśli month > 10 to zawsze false, itd.
	// A) Jeżeli miesiąc < 3 -> zima
	if (month < 3) {
 8001a68:	797b      	ldrb	r3, [r7, #5]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d801      	bhi.n	8001a72 <IsDstActive+0x38>
		return false;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e01b      	b.n	8001aaa <IsDstActive+0x70>
	}
	// B) Jeżeli miesiąc > 10 -> zima
	if (month > 10) {
 8001a72:	797b      	ldrb	r3, [r7, #5]
 8001a74:	2b0a      	cmp	r3, #10
 8001a76:	d901      	bls.n	8001a7c <IsDstActive+0x42>
		return false;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e016      	b.n	8001aaa <IsDstActive+0x70>
	}
	// C) Jeżeli to marzec:
	if (month == 3) {
 8001a7c:	797b      	ldrb	r3, [r7, #5]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d107      	bne.n	8001a92 <IsDstActive+0x58>
		// czy w danym dniu jest >= ostatniej niedzieli?
		// jeśli tak -> letni
		// jeśli nie -> zimowy
		if (day < lastSundayMarch) {
 8001a82:	793a      	ldrb	r2, [r7, #4]
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d201      	bcs.n	8001a8e <IsDstActive+0x54>
			return false;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e00d      	b.n	8001aaa <IsDstActive+0x70>
		} else {
			return true;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00b      	b.n	8001aaa <IsDstActive+0x70>
		}
	}
	// D) Jeżeli to październik
	if (month == 10) {
 8001a92:	797b      	ldrb	r3, [r7, #5]
 8001a94:	2b0a      	cmp	r3, #10
 8001a96:	d107      	bne.n	8001aa8 <IsDstActive+0x6e>
		// czy w danym dniu jest < ostatniej niedzieli?
		// jeśli tak -> letni
		// jeśli >= -> zimowy
		if (day < lastSundayOctober) {
 8001a98:	793a      	ldrb	r2, [r7, #4]
 8001a9a:	7bbb      	ldrb	r3, [r7, #14]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d201      	bcs.n	8001aa4 <IsDstActive+0x6a>
			return true;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e002      	b.n	8001aaa <IsDstActive+0x70>
		} else {
			return false;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e000      	b.n	8001aaa <IsDstActive+0x70>
		}
	}
	// E) W pozostałych miesiącach 4..9 włącznie mamy 100% DST:
	return true;
 8001aa8:	2301      	movs	r3, #1
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <GetDayOfWeek>:
			// Obsługa błędu ustawiania daty
			Error_Handler();
		}
	}
}
uint8_t GetDayOfWeek(uint16_t year, uint8_t month, uint8_t day) {
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	80fb      	strh	r3, [r7, #6]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	717b      	strb	r3, [r7, #5]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	713b      	strb	r3, [r7, #4]
	// Zeller’s Congruence – wersja dla kalendarza gregoriańskiego
	// Aby działała poprawnie dla stycznia i lutego, „przesuwamy” je na poprzedni rok:
	// styczeń -> 13 poprzedniego roku
	// luty    -> 14 poprzedniego roku
	if (month < 3) {
 8001ac6:	797b      	ldrb	r3, [r7, #5]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d805      	bhi.n	8001ad8 <GetDayOfWeek+0x24>
		month += 12;
 8001acc:	797b      	ldrb	r3, [r7, #5]
 8001ace:	330c      	adds	r3, #12
 8001ad0:	717b      	strb	r3, [r7, #5]
		year -= 1;
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	80fb      	strh	r3, [r7, #6]
	}
	uint16_t K = (uint16_t) (year % 100);
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	4a23      	ldr	r2, [pc, #140]	@ (8001b68 <GetDayOfWeek+0xb4>)
 8001adc:	fba2 1203 	umull	r1, r2, r2, r3
 8001ae0:	0952      	lsrs	r2, r2, #5
 8001ae2:	2164      	movs	r1, #100	@ 0x64
 8001ae4:	fb01 f202 	mul.w	r2, r1, r2
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	817b      	strh	r3, [r7, #10]
	uint16_t J = (uint16_t) (year / 100);
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	4a1e      	ldr	r2, [pc, #120]	@ (8001b68 <GetDayOfWeek+0xb4>)
 8001af0:	fba2 2303 	umull	r2, r3, r2, r3
 8001af4:	095b      	lsrs	r3, r3, #5
 8001af6:	813b      	strh	r3, [r7, #8]
	// day of week in [0..6], 0=Sunday
	int32_t h = (int32_t) (day + (13 * (month + 1)) / 5 + K + (K / 4) + (J / 4)
 8001af8:	7939      	ldrb	r1, [r7, #4]
 8001afa:	797b      	ldrb	r3, [r7, #5]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	4a18      	ldr	r2, [pc, #96]	@ (8001b6c <GetDayOfWeek+0xb8>)
 8001b0a:	fb82 0203 	smull	r0, r2, r2, r3
 8001b0e:	1052      	asrs	r2, r2, #1
 8001b10:	17db      	asrs	r3, r3, #31
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	18ca      	adds	r2, r1, r3
 8001b16:	897b      	ldrh	r3, [r7, #10]
 8001b18:	4413      	add	r3, r2
 8001b1a:	897a      	ldrh	r2, [r7, #10]
 8001b1c:	0892      	lsrs	r2, r2, #2
 8001b1e:	b292      	uxth	r2, r2
 8001b20:	4413      	add	r3, r2
 8001b22:	893a      	ldrh	r2, [r7, #8]
 8001b24:	0892      	lsrs	r2, r2, #2
 8001b26:	b292      	uxth	r2, r2
 8001b28:	441a      	add	r2, r3
			- (2 * J));
 8001b2a:	893b      	ldrh	r3, [r7, #8]
 8001b2c:	005b      	lsls	r3, r3, #1
	int32_t h = (int32_t) (day + (13 * (month + 1)) / 5 + K + (K / 4) + (J / 4)
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	60fb      	str	r3, [r7, #12]
	// W C++: h = (h % 7 + 7) % 7  (żeby się upewnić, że jest w 0..6):
	h = h % 7;
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4b0e      	ldr	r3, [pc, #56]	@ (8001b70 <GetDayOfWeek+0xbc>)
 8001b36:	fb83 1302 	smull	r1, r3, r3, r2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	1099      	asrs	r1, r3, #2
 8001b3e:	17d3      	asrs	r3, r2, #31
 8001b40:	1ac9      	subs	r1, r1, r3
 8001b42:	460b      	mov	r3, r1
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	1a5b      	subs	r3, r3, r1
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	60fb      	str	r3, [r7, #12]
	if (h < 0) {
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	da02      	bge.n	8001b58 <GetDayOfWeek+0xa4>
		h += 7;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3307      	adds	r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]
	}
	return (uint8_t) h;  // 0..6
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	b2db      	uxtb	r3, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	51eb851f 	.word	0x51eb851f
 8001b6c:	66666667 	.word	0x66666667
 8001b70:	92492493 	.word	0x92492493

08001b74 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b78:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <MX_I2C2_Init+0x50>)
 8001b7a:	4a13      	ldr	r2, [pc, #76]	@ (8001bc8 <MX_I2C2_Init+0x54>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b7e:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <MX_I2C2_Init+0x50>)
 8001b80:	4a12      	ldr	r2, [pc, #72]	@ (8001bcc <MX_I2C2_Init+0x58>)
 8001b82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <MX_I2C2_Init+0x50>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <MX_I2C2_Init+0x50>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <MX_I2C2_Init+0x50>)
 8001b92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b96:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b98:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <MX_I2C2_Init+0x50>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <MX_I2C2_Init+0x50>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ba4:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <MX_I2C2_Init+0x50>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <MX_I2C2_Init+0x50>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bb0:	4804      	ldr	r0, [pc, #16]	@ (8001bc4 <MX_I2C2_Init+0x50>)
 8001bb2:	f003 fc25 	bl	8005400 <HAL_I2C_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bbc:	f000 fa6d 	bl	800209a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000554 	.word	0x20000554
 8001bc8:	40005800 	.word	0x40005800
 8001bcc:	000186a0 	.word	0x000186a0

08001bd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	@ 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a58      	ldr	r2, [pc, #352]	@ (8001d50 <HAL_I2C_MspInit+0x180>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	f040 80a9 	bne.w	8001d46 <HAL_I2C_MspInit+0x176>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	4b56      	ldr	r3, [pc, #344]	@ (8001d54 <HAL_I2C_MspInit+0x184>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfc:	4a55      	ldr	r2, [pc, #340]	@ (8001d54 <HAL_I2C_MspInit+0x184>)
 8001bfe:	f043 0302 	orr.w	r3, r3, #2
 8001c02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c04:	4b53      	ldr	r3, [pc, #332]	@ (8001d54 <HAL_I2C_MspInit+0x184>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c16:	2312      	movs	r3, #18
 8001c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c22:	2304      	movs	r3, #4
 8001c24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	484a      	ldr	r0, [pc, #296]	@ (8001d58 <HAL_I2C_MspInit+0x188>)
 8001c2e:	f003 fa31 	bl	8005094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c32:	2308      	movs	r3, #8
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c36:	2312      	movs	r3, #18
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001c42:	2309      	movs	r3, #9
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4842      	ldr	r0, [pc, #264]	@ (8001d58 <HAL_I2C_MspInit+0x188>)
 8001c4e:	f003 fa21 	bl	8005094 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b3f      	ldr	r3, [pc, #252]	@ (8001d54 <HAL_I2C_MspInit+0x184>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d54 <HAL_I2C_MspInit+0x184>)
 8001c5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c62:	4b3c      	ldr	r3, [pc, #240]	@ (8001d54 <HAL_I2C_MspInit+0x184>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d5c <HAL_I2C_MspInit+0x18c>)
 8001c70:	4a3b      	ldr	r2, [pc, #236]	@ (8001d60 <HAL_I2C_MspInit+0x190>)
 8001c72:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001c74:	4b39      	ldr	r3, [pc, #228]	@ (8001d5c <HAL_I2C_MspInit+0x18c>)
 8001c76:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001c7a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c7c:	4b37      	ldr	r3, [pc, #220]	@ (8001d5c <HAL_I2C_MspInit+0x18c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c82:	4b36      	ldr	r3, [pc, #216]	@ (8001d5c <HAL_I2C_MspInit+0x18c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c88:	4b34      	ldr	r3, [pc, #208]	@ (8001d5c <HAL_I2C_MspInit+0x18c>)
 8001c8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c8e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c90:	4b32      	ldr	r3, [pc, #200]	@ (8001d5c <HAL_I2C_MspInit+0x18c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c96:	4b31      	ldr	r3, [pc, #196]	@ (8001d5c <HAL_I2C_MspInit+0x18c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d5c <HAL_I2C_MspInit+0x18c>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ca2:	4b2e      	ldr	r3, [pc, #184]	@ (8001d5c <HAL_I2C_MspInit+0x18c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ca8:	4b2c      	ldr	r3, [pc, #176]	@ (8001d5c <HAL_I2C_MspInit+0x18c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001cae:	482b      	ldr	r0, [pc, #172]	@ (8001d5c <HAL_I2C_MspInit+0x18c>)
 8001cb0:	f002 fe44 	bl	800493c <HAL_DMA_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8001cba:	f000 f9ee 	bl	800209a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a26      	ldr	r2, [pc, #152]	@ (8001d5c <HAL_I2C_MspInit+0x18c>)
 8001cc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cc4:	4a25      	ldr	r2, [pc, #148]	@ (8001d5c <HAL_I2C_MspInit+0x18c>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001cca:	4b26      	ldr	r3, [pc, #152]	@ (8001d64 <HAL_I2C_MspInit+0x194>)
 8001ccc:	4a26      	ldr	r2, [pc, #152]	@ (8001d68 <HAL_I2C_MspInit+0x198>)
 8001cce:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001cd0:	4b24      	ldr	r3, [pc, #144]	@ (8001d64 <HAL_I2C_MspInit+0x194>)
 8001cd2:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001cd6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cd8:	4b22      	ldr	r3, [pc, #136]	@ (8001d64 <HAL_I2C_MspInit+0x194>)
 8001cda:	2240      	movs	r2, #64	@ 0x40
 8001cdc:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cde:	4b21      	ldr	r3, [pc, #132]	@ (8001d64 <HAL_I2C_MspInit+0x194>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <HAL_I2C_MspInit+0x194>)
 8001ce6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cea:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cec:	4b1d      	ldr	r3, [pc, #116]	@ (8001d64 <HAL_I2C_MspInit+0x194>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <HAL_I2C_MspInit+0x194>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d64 <HAL_I2C_MspInit+0x194>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cfe:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <HAL_I2C_MspInit+0x194>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d04:	4b17      	ldr	r3, [pc, #92]	@ (8001d64 <HAL_I2C_MspInit+0x194>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001d0a:	4816      	ldr	r0, [pc, #88]	@ (8001d64 <HAL_I2C_MspInit+0x194>)
 8001d0c:	f002 fe16 	bl	800493c <HAL_DMA_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_MspInit+0x14a>
    {
      Error_Handler();
 8001d16:	f000 f9c0 	bl	800209a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a11      	ldr	r2, [pc, #68]	@ (8001d64 <HAL_I2C_MspInit+0x194>)
 8001d1e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d20:	4a10      	ldr	r2, [pc, #64]	@ (8001d64 <HAL_I2C_MspInit+0x194>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2021      	movs	r0, #33	@ 0x21
 8001d2c:	f002 fdcf 	bl	80048ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001d30:	2021      	movs	r0, #33	@ 0x21
 8001d32:	f002 fde8 	bl	8004906 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2022      	movs	r0, #34	@ 0x22
 8001d3c:	f002 fdc7 	bl	80048ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001d40:	2022      	movs	r0, #34	@ 0x22
 8001d42:	f002 fde0 	bl	8004906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d46:	bf00      	nop
 8001d48:	3728      	adds	r7, #40	@ 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40005800 	.word	0x40005800
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	200005a8 	.word	0x200005a8
 8001d60:	40026040 	.word	0x40026040
 8001d64:	20000608 	.word	0x20000608
 8001d68:	400260b8 	.word	0x400260b8

08001d6c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001d72:	f002 f925 	bl	8003fc0 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d76:	f000 f8bd 	bl	8001ef4 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	// Odblokowanie dostępu do backupu (dla RTC)
	HAL_PWR_EnableBkUpAccess();
 8001d7a:	f006 f81d 	bl	8007db8 <HAL_PWR_EnableBkUpAccess>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d96:	61bb      	str	r3, [r7, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f006 fc77 	bl	8008690 <HAL_RCCEx_PeriphCLKConfig>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001da2:	f7ff fabb 	bl	800131c <MX_GPIO_Init>
	MX_DMA_Init();
 8001da6:	f7ff fa63 	bl	8001270 <MX_DMA_Init>
	MX_SPI1_Init();
 8001daa:	f001 fbbd 	bl	8003528 <MX_SPI1_Init>
	MX_TIM1_Init();
 8001dae:	f001 fe2d 	bl	8003a0c <MX_TIM1_Init>
	MX_RTC_Init();
 8001db2:	f000 fa87 	bl	80022c4 <MX_RTC_Init>
	MX_I2C2_Init();
 8001db6:	f7ff fedd 	bl	8001b74 <MX_I2C2_Init>
	MX_ADC1_Init();
 8001dba:	f7fe fb83 	bl	80004c4 <MX_ADC1_Init>
	MX_TIM4_Init();
 8001dbe:	f001 fec5 	bl	8003b4c <MX_TIM4_Init>
	MX_TIM5_Init();
 8001dc2:	f001 ff17 	bl	8003bf4 <MX_TIM5_Init>
	MX_USART1_UART_Init();
 8001dc6:	f002 f82b 	bl	8003e20 <MX_USART1_UART_Init>
	MX_SPI2_Init();
 8001dca:	f001 fbe3 	bl	8003594 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001dce:	2100      	movs	r1, #0
 8001dd0:	483c      	ldr	r0, [pc, #240]	@ (8001ec4 <main+0x158>)
 8001dd2:	f007 fd19 	bl	8009808 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (htim1.Init.Period + 1) / 2);
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec4 <main+0x158>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	4b39      	ldr	r3, [pc, #228]	@ (8001ec4 <main+0x158>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0852      	lsrs	r2, r2, #1
 8001de2:	635a      	str	r2, [r3, #52]	@ 0x34

	SetPWMPercentGamma(30);
 8001de4:	201e      	movs	r0, #30
 8001de6:	f7ff f87b 	bl	8000ee0 <SetPWMPercentGamma>
	ClearClockBits(&clockReg);
 8001dea:	4837      	ldr	r0, [pc, #220]	@ (8001ec8 <main+0x15c>)
 8001dec:	f7fe feec 	bl	8000bc8 <ClearClockBits>
	UpdateAllDisplays(&clockReg);
 8001df0:	4835      	ldr	r0, [pc, #212]	@ (8001ec8 <main+0x15c>)
 8001df2:	f7ff f831 	bl	8000e58 <UpdateAllDisplays>
	SLIDER_Init();
 8001df6:	f000 fe25 	bl	8002a44 <SLIDER_Init>
	SHT30_Init();
 8001dfa:	f000 fae9 	bl	80023d0 <SHT30_Init>
	//Set_RTC_Time();
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001dfe:	213c      	movs	r1, #60	@ 0x3c
 8001e00:	4832      	ldr	r0, [pc, #200]	@ (8001ecc <main+0x160>)
 8001e02:	f007 fe57 	bl	8009ab4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8001e06:	4832      	ldr	r0, [pc, #200]	@ (8001ed0 <main+0x164>)
 8001e08:	f007 fc42 	bl	8009690 <HAL_TIM_Base_Start_IT>
	GPS_Init();
 8001e0c:	f7ff fcd6 	bl	80017bc <GPS_Init>
	if (HAL_UART_Receive_DMA(&huart1, gps_dma_buffer, GPS_DMA_BUFFER_SIZE)
 8001e10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e14:	492f      	ldr	r1, [pc, #188]	@ (8001ed4 <main+0x168>)
 8001e16:	4830      	ldr	r0, [pc, #192]	@ (8001ed8 <main+0x16c>)
 8001e18:	f008 fd8e 	bl	800a938 <HAL_UART_Receive_DMA>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <main+0xba>
			!= HAL_OK) {
		Error_Handler();
 8001e22:	f000 f93a 	bl	800209a <Error_Handler>
	}
	MENU_Init();  // Zainicjuj stan menu (IDLE)
 8001e26:	f000 f93f 	bl	80020a8 <MENU_Init>
	// Rejestracja callbacków
	Button_RegisterPressCallback(0, Button1_Pressed);
 8001e2a:	492c      	ldr	r1, [pc, #176]	@ (8001edc <main+0x170>)
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7fe fbfb 	bl	8000628 <Button_RegisterPressCallback>
	Button_RegisterDoubleClickCallback(0, Button1_DoubleClicked);
 8001e32:	492b      	ldr	r1, [pc, #172]	@ (8001ee0 <main+0x174>)
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7fe fc2f 	bl	8000698 <Button_RegisterDoubleClickCallback>
	Button_RegisterHoldCallback(0, Button1_Held);
 8001e3a:	492a      	ldr	r1, [pc, #168]	@ (8001ee4 <main+0x178>)
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7fe fc0f 	bl	8000660 <Button_RegisterHoldCallback>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// Odczytaj aktualny czas z RTC
		GPS_ProcessBuffer();
 8001e42:	f7ff fc25 	bl	8001690 <GPS_ProcessBuffer>
		Get_RTC_Time();
 8001e46:	f000 f8b5 	bl	8001fb4 <Get_RTC_Time>


		SetHourRingCustom(&clockReg, 1, 1);
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	481e      	ldr	r0, [pc, #120]	@ (8001ec8 <main+0x15c>)
 8001e50:	f7ff f984 	bl	800115c <SetHourRingCustom>

		SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 8001e54:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <main+0x17c>)
 8001e56:	789b      	ldrb	r3, [r3, #2]
 8001e58:	4a23      	ldr	r2, [pc, #140]	@ (8001ee8 <main+0x17c>)
 8001e5a:	7852      	ldrb	r2, [r2, #1]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	481a      	ldr	r0, [pc, #104]	@ (8001ec8 <main+0x15c>)
 8001e60:	f7ff f86a 	bl	8000f38 <SetSecondLedEvenOdd>

		SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001e64:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <main+0x17c>)
 8001e66:	7819      	ldrb	r1, [r3, #0]
 8001e68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee8 <main+0x17c>)
 8001e6a:	785a      	ldrb	r2, [r3, #1]
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee8 <main+0x17c>)
 8001e6e:	789b      	ldrb	r3, [r3, #2]
 8001e70:	4815      	ldr	r0, [pc, #84]	@ (8001ec8 <main+0x15c>)
 8001e72:	f7fe feb7 	bl	8000be4 <SetTime7Seg_Top>

		// Aktualizuj rejestry
		UpdateAllDisplays(&clockReg);
 8001e76:	4814      	ldr	r0, [pc, #80]	@ (8001ec8 <main+0x15c>)
 8001e78:	f7fe ffee 	bl	8000e58 <UpdateAllDisplays>


		SHT30_Data_t data; // Zadeklarowanie zmiennej 'data'

		if (SHT30_GetLatestData(&data)) {
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 fb3c 	bl	80024fc <SHT30_GetLatestData>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00d      	beq.n	8001ea6 <main+0x13a>

			disp_mode?  SLIDER_DisplayTemperature( data.temperature):SLIDER_DisplayHumidity( data.humidity);
 8001e8a:	4b18      	ldr	r3, [pc, #96]	@ (8001eec <main+0x180>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d004      	beq.n	8001e9e <main+0x132>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f001 f860 	bl	8002f5c <SLIDER_DisplayTemperature>
 8001e9c:	e003      	b.n	8001ea6 <main+0x13a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f001 f9eb 	bl	800327c <SLIDER_DisplayHumidity>
		}


		// Opóźnij (np. 100 ms)
		// Rozpoczęcie konwersji ADC
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 8001ea6:	4812      	ldr	r0, [pc, #72]	@ (8001ef0 <main+0x184>)
 8001ea8:	f002 f964 	bl	8004174 <HAL_ADC_Start>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <main+0x14a>
			Error_Handler();
 8001eb2:	f000 f8f2 	bl	800209a <Error_Handler>
		}
		Button_Process();
 8001eb6:	f7fe fc0b 	bl	80006d0 <Button_Process>
		HAL_Delay(10);
 8001eba:	200a      	movs	r0, #10
 8001ebc:	f002 f8f2 	bl	80040a4 <HAL_Delay>
	while (1) {
 8001ec0:	e7bf      	b.n	8001e42 <main+0xd6>
 8001ec2:	bf00      	nop
 8001ec4:	200008d8 	.word	0x200008d8
 8001ec8:	20000688 	.word	0x20000688
 8001ecc:	20000920 	.word	0x20000920
 8001ed0:	20000968 	.word	0x20000968
 8001ed4:	200000c8 	.word	0x200000c8
 8001ed8:	200009b0 	.word	0x200009b0
 8001edc:	08002041 	.word	0x08002041
 8001ee0:	08002069 	.word	0x08002069
 8001ee4:	0800207f 	.word	0x0800207f
 8001ee8:	20000668 	.word	0x20000668
 8001eec:	200006da 	.word	0x200006da
 8001ef0:	20000058 	.word	0x20000058

08001ef4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b094      	sub	sp, #80	@ 0x50
 8001ef8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001efa:	f107 0320 	add.w	r3, r7, #32
 8001efe:	2230      	movs	r2, #48	@ 0x30
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f009 fa00 	bl	800b308 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	4b23      	ldr	r3, [pc, #140]	@ (8001fac <SystemClock_Config+0xb8>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	4a22      	ldr	r2, [pc, #136]	@ (8001fac <SystemClock_Config+0xb8>)
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f28:	4b20      	ldr	r3, [pc, #128]	@ (8001fac <SystemClock_Config+0xb8>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f34:	2300      	movs	r3, #0
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb0 <SystemClock_Config+0xbc>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f40:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb0 <SystemClock_Config+0xbc>)
 8001f42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <SystemClock_Config+0xbc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8001f54:	2305      	movs	r3, #5
 8001f56:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f5c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f66:	f107 0320 	add.w	r3, r7, #32
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f005 ff38 	bl	8007de0 <HAL_RCC_OscConfig>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <SystemClock_Config+0x86>
		Error_Handler();
 8001f76:	f000 f890 	bl	800209a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f7a:	230f      	movs	r3, #15
 8001f7c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f006 f99b 	bl	80082d0 <HAL_RCC_ClockConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <SystemClock_Config+0xb0>
		Error_Handler();
 8001fa0:	f000 f87b 	bl	800209a <Error_Handler>
	}
}
 8001fa4:	bf00      	nop
 8001fa6:	3750      	adds	r7, #80	@ 0x50
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40007000 	.word	0x40007000

08001fb4 <Get_RTC_Time>:
}

/**
 * @brief Odczytuje bieżący czas z RTC.
 */
void Get_RTC_Time(void) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	4905      	ldr	r1, [pc, #20]	@ (8001fd0 <Get_RTC_Time+0x1c>)
 8001fbc:	4805      	ldr	r0, [pc, #20]	@ (8001fd4 <Get_RTC_Time+0x20>)
 8001fbe:	f006 fd72 	bl	8008aa6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	4904      	ldr	r1, [pc, #16]	@ (8001fd8 <Get_RTC_Time+0x24>)
 8001fc6:	4803      	ldr	r0, [pc, #12]	@ (8001fd4 <Get_RTC_Time+0x20>)
 8001fc8:	f006 fe4f 	bl	8008c6a <HAL_RTC_GetDate>
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000668 	.word	0x20000668
 8001fd4:	200006a4 	.word	0x200006a4
 8001fd8:	2000067c 	.word	0x2000067c

08001fdc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a13      	ldr	r2, [pc, #76]	@ (8002038 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d11f      	bne.n	800202e <HAL_TIM_IC_CaptureCallback+0x52>
		int8_t direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(htim) ? -1 : +1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b10      	cmp	r3, #16
 8001ffa:	d102      	bne.n	8002002 <HAL_TIM_IC_CaptureCallback+0x26>
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8002000:	e000      	b.n	8002004 <HAL_TIM_IC_CaptureCallback+0x28>
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
		// Zamiast sprawdzać s_encoderCb, wołamy:
		Encoder_HandleInterrupt(direction);
 8002006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fcb6 	bl	800097c <Encoder_HandleInterrupt>

		// Ewentualnie liczymy też encoderValue
		if (direction < 0)
 8002010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002014:	2b00      	cmp	r3, #0
 8002016:	da05      	bge.n	8002024 <HAL_TIM_IC_CaptureCallback+0x48>
			encoderValue--;
 8002018:	4b08      	ldr	r3, [pc, #32]	@ (800203c <HAL_TIM_IC_CaptureCallback+0x60>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3b01      	subs	r3, #1
 800201e:	4a07      	ldr	r2, [pc, #28]	@ (800203c <HAL_TIM_IC_CaptureCallback+0x60>)
 8002020:	6013      	str	r3, [r2, #0]
		else
			encoderValue++;
	}
}
 8002022:	e004      	b.n	800202e <HAL_TIM_IC_CaptureCallback+0x52>
			encoderValue++;
 8002024:	4b05      	ldr	r3, [pc, #20]	@ (800203c <HAL_TIM_IC_CaptureCallback+0x60>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	4a04      	ldr	r2, [pc, #16]	@ (800203c <HAL_TIM_IC_CaptureCallback+0x60>)
 800202c:	6013      	str	r3, [r2, #0]
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40000800 	.word	0x40000800
 800203c:	20000680 	.word	0x20000680

08002040 <Button1_Pressed>:

/* USER CODE BEGIN 0 */
void Button1_Pressed(void) {
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	// Jeśli menu jest aktywne, przechodzimy do kolejnego stanu w menu:
	if (MENU_IsActive()) {
 8002044:	f000 f83c 	bl	80020c0 <MENU_IsActive>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <Button1_Pressed+0x14>
		MENU_Next();
 800204e:	f000 f875 	bl	800213c <MENU_Next>
	} else {
		// Jeśli menu nie jest aktywne – można wyświetlić np. HELLO
		SLIDER_SetString("HELLO", SCROLL_RIGHT_TO_LEFT, 10);
	}
}
 8002052:	e004      	b.n	800205e <Button1_Pressed+0x1e>
		SLIDER_SetString("HELLO", SCROLL_RIGHT_TO_LEFT, 10);
 8002054:	220a      	movs	r2, #10
 8002056:	2100      	movs	r1, #0
 8002058:	4802      	ldr	r0, [pc, #8]	@ (8002064 <Button1_Pressed+0x24>)
 800205a:	f000 fd2b 	bl	8002ab4 <SLIDER_SetString>
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	0800b3e4 	.word	0x0800b3e4

08002068 <Button1_DoubleClicked>:

void Button1_DoubleClicked(void) {
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
	// Jeśli menu jest aktywne, wychodzimy o poziom wyżej:
	if (MENU_IsActive()) {
 800206c:	f000 f828 	bl	80020c0 <MENU_IsActive>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <Button1_DoubleClicked+0x12>
		MENU_Exit();
 8002076:	f000 f84f 	bl	8002118 <MENU_Exit>
	} else {
		// Jeśli menu nieaktywne – np. uruchom coś innego
		//SLIDER_SetString("DBLCL", SCROLL_RIGHT_TO_LEFT, 10);
	}
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}

0800207e <Button1_Held>:

void Button1_Held(void) {
 800207e:	b580      	push	{r7, lr}
 8002080:	af00      	add	r7, sp, #0
	// Długie przyciśnięcie – wchodzimy do menu (o ile nie jest aktywne)
	if (!MENU_IsActive()) {
 8002082:	f000 f81d 	bl	80020c0 <MENU_IsActive>
 8002086:	4603      	mov	r3, r0
 8002088:	f083 0301 	eor.w	r3, r3, #1
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <Button1_Held+0x18>
		MENU_Enter();
 8002092:	f000 f82d 	bl	80020f0 <MENU_Enter>
	} else {
		// Można tu np. nic nie robić, albo "MENU_Exit()" całkiem
		// w zależności od Twojej koncepcji.
	}
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}

0800209a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800209e:	b672      	cpsid	i
}
 80020a0:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();
	while (1) {
 80020a2:	bf00      	nop
 80020a4:	e7fd      	b.n	80020a2 <Error_Handler+0x8>
	...

080020a8 <MENU_Init>:
}

//------------------------------------------------- OBSŁUGA MENU

void MENU_Init(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
    currentState = MENU_STATE_IDLE;
 80020ac:	4b03      	ldr	r3, [pc, #12]	@ (80020bc <MENU_Init+0x14>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
    // Button_RegisterHoldCallback(0, MENU_EnterCallback);
    // Button_RegisterDoubleClickCallback(0, MENU_ExitCallback);
    // Ale możesz to też zrobić w button.c, odwołując się do MENU_Enter() i MENU_Exit().

    // Na starcie menu nieaktywne, więc nic nie robimy.
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	200006a3 	.word	0x200006a3

080020c0 <MENU_IsActive>:

bool MENU_IsActive(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
    return (currentState != MENU_STATE_IDLE && currentState != MENU_STATE_END);
 80020c4:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <MENU_IsActive+0x2c>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <MENU_IsActive+0x18>
 80020cc:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <MENU_IsActive+0x2c>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d001      	beq.n	80020d8 <MENU_IsActive+0x18>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <MENU_IsActive+0x1a>
 80020d8:	2300      	movs	r3, #0
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	b2db      	uxtb	r3, r3
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	200006a3 	.word	0x200006a3

080020f0 <MENU_Enter>:

void MENU_Enter(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
    // Wejście do menu (zwykle z długiego naciśnięcia):
    // Tylko jeśli jesteśmy w IDLE
	 if (currentState == MENU_STATE_IDLE) {
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <MENU_Enter+0x20>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <MENU_Enter+0x1c>
	        currentState = MENU_STATE_RINGZ;
 80020fc:	4b04      	ldr	r3, [pc, #16]	@ (8002110 <MENU_Enter+0x20>)
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
	        // REJESTRACJA callbacka:
	        Encoder_RegisterRotateCallback(MENU_EncoderCallback);
 8002102:	4804      	ldr	r0, [pc, #16]	@ (8002114 <MENU_Enter+0x24>)
 8002104:	f7fe fa74 	bl	80005f0 <Encoder_RegisterRotateCallback>

	        MENU_UpdateStateDisplay();
 8002108:	f000 f842 	bl	8002190 <MENU_UpdateStateDisplay>
    }
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	200006a3 	.word	0x200006a3
 8002114:	08002201 	.word	0x08002201

08002118 <MENU_Exit>:

void MENU_Exit(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
    switch (currentState)
 800211c:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <MENU_Exit+0x20>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d107      	bne.n	8002134 <MENU_Exit+0x1c>
    {
        case MENU_STATE_RINGZ:
            currentState = MENU_STATE_IDLE;
 8002124:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <MENU_Exit+0x20>)
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
            // WYREJESTROWANIE
            Encoder_UnregisterRotateCallback();
 800212a:	f7fe fa71 	bl	8000610 <Encoder_UnregisterRotateCallback>
            SLIDER_Stop();
 800212e:	f000 fcfd 	bl	8002b2c <SLIDER_Stop>
            break;
 8002132:	bf00      	nop

        // i tak dalej w innych stanach...
    }
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	200006a3 	.word	0x200006a3

0800213c <MENU_Next>:


void MENU_Next(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
    // Przejście do następnej opcji w ramach menu
    // (Niezależnie od enkodera, tu jest np. "pojedynczy klik".
    //  Możesz też obrót enkodera wykorzystać do modyfikacji ringMode.)
    switch (currentState)
 8002140:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <MENU_Next+0x4c>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d015      	beq.n	8002174 <MENU_Next+0x38>
 8002148:	2b04      	cmp	r3, #4
 800214a:	dc19      	bgt.n	8002180 <MENU_Next+0x44>
 800214c:	2b01      	cmp	r3, #1
 800214e:	d002      	beq.n	8002156 <MENU_Next+0x1a>
 8002150:	2b03      	cmp	r3, #3
 8002152:	d006      	beq.n	8002162 <MENU_Next+0x26>
            break;

        case MENU_STATE_IDLE:
        default:
            // Poza menu – brak akcji
            break;
 8002154:	e014      	b.n	8002180 <MENU_Next+0x44>
            currentState = MENU_STATE_TOP;
 8002156:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <MENU_Next+0x4c>)
 8002158:	2203      	movs	r2, #3
 800215a:	701a      	strb	r2, [r3, #0]
            MENU_UpdateStateDisplay();
 800215c:	f000 f818 	bl	8002190 <MENU_UpdateStateDisplay>
            break;
 8002160:	e00f      	b.n	8002182 <MENU_Next+0x46>
            currentState = MENU_STATE_END;
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <MENU_Next+0x4c>)
 8002164:	2204      	movs	r2, #4
 8002166:	701a      	strb	r2, [r3, #0]
            SLIDER_SetString("END", SCROLL_RIGHT_TO_LEFT, 10);
 8002168:	220a      	movs	r2, #10
 800216a:	2100      	movs	r1, #0
 800216c:	4807      	ldr	r0, [pc, #28]	@ (800218c <MENU_Next+0x50>)
 800216e:	f000 fca1 	bl	8002ab4 <SLIDER_SetString>
            break;
 8002172:	e006      	b.n	8002182 <MENU_Next+0x46>
            currentState = MENU_STATE_IDLE;
 8002174:	4b04      	ldr	r3, [pc, #16]	@ (8002188 <MENU_Next+0x4c>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
            SLIDER_Stop();
 800217a:	f000 fcd7 	bl	8002b2c <SLIDER_Stop>
            break;
 800217e:	e000      	b.n	8002182 <MENU_Next+0x46>
            break;
 8002180:	bf00      	nop
    }
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200006a3 	.word	0x200006a3
 800218c:	0800b3ec 	.word	0x0800b3ec

08002190 <MENU_UpdateStateDisplay>:

void MENU_UpdateStateDisplay(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
    // W zależności od currentState, wyświetlamy sliderem odpowiedni napis.
    // To jest wywoływane zaraz po wejściu w dany stan.
    switch (currentState)
 8002194:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <MENU_UpdateStateDisplay+0x5c>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	3b01      	subs	r3, #1
 800219a:	2b03      	cmp	r3, #3
 800219c:	d822      	bhi.n	80021e4 <MENU_UpdateStateDisplay+0x54>
 800219e:	a201      	add	r2, pc, #4	@ (adr r2, 80021a4 <MENU_UpdateStateDisplay+0x14>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021b5 	.word	0x080021b5
 80021a8:	080021c1 	.word	0x080021c1
 80021ac:	080021cd 	.word	0x080021cd
 80021b0:	080021d9 	.word	0x080021d9
    {
        case MENU_STATE_RINGZ:
            SLIDER_SetString("ring z", SCROLL_RIGHT_TO_LEFT, 10);
 80021b4:	220a      	movs	r2, #10
 80021b6:	2100      	movs	r1, #0
 80021b8:	480d      	ldr	r0, [pc, #52]	@ (80021f0 <MENU_UpdateStateDisplay+0x60>)
 80021ba:	f000 fc7b 	bl	8002ab4 <SLIDER_SetString>
            break;
 80021be:	e012      	b.n	80021e6 <MENU_UpdateStateDisplay+0x56>
        case MENU_STATE_RINGS:
            SLIDER_SetString("ring s", SCROLL_RIGHT_TO_LEFT, 10);
 80021c0:	220a      	movs	r2, #10
 80021c2:	2100      	movs	r1, #0
 80021c4:	480b      	ldr	r0, [pc, #44]	@ (80021f4 <MENU_UpdateStateDisplay+0x64>)
 80021c6:	f000 fc75 	bl	8002ab4 <SLIDER_SetString>
            break;
 80021ca:	e00c      	b.n	80021e6 <MENU_UpdateStateDisplay+0x56>

        case MENU_STATE_TOP:
            SLIDER_SetString("top", SCROLL_RIGHT_TO_LEFT, 10);
 80021cc:	220a      	movs	r2, #10
 80021ce:	2100      	movs	r1, #0
 80021d0:	4809      	ldr	r0, [pc, #36]	@ (80021f8 <MENU_UpdateStateDisplay+0x68>)
 80021d2:	f000 fc6f 	bl	8002ab4 <SLIDER_SetString>
            break;
 80021d6:	e006      	b.n	80021e6 <MENU_UpdateStateDisplay+0x56>
        case MENU_STATE_END:
            SLIDER_SetString("END", SCROLL_RIGHT_TO_LEFT, 10);
 80021d8:	220a      	movs	r2, #10
 80021da:	2100      	movs	r1, #0
 80021dc:	4807      	ldr	r0, [pc, #28]	@ (80021fc <MENU_UpdateStateDisplay+0x6c>)
 80021de:	f000 fc69 	bl	8002ab4 <SLIDER_SetString>
            break;
 80021e2:	e000      	b.n	80021e6 <MENU_UpdateStateDisplay+0x56>
        case MENU_STATE_IDLE:
        default:
            // Nic nie wyświetlamy
            break;
 80021e4:	bf00      	nop
    }
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	200006a3 	.word	0x200006a3
 80021f0:	0800b3f0 	.word	0x0800b3f0
 80021f4:	0800b3f8 	.word	0x0800b3f8
 80021f8:	0800b400 	.word	0x0800b400
 80021fc:	0800b3ec 	.word	0x0800b3ec

08002200 <MENU_EncoderCallback>:


void MENU_EncoderCallback(int8_t steps)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
    // Sprawdzamy, w jakim stanie jest menu:
    switch (currentState)
 800220a:	4b2a      	ldr	r3, [pc, #168]	@ (80022b4 <MENU_EncoderCallback+0xb4>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d032      	beq.n	8002278 <MENU_EncoderCallback+0x78>
 8002212:	2b03      	cmp	r3, #3
 8002214:	dc46      	bgt.n	80022a4 <MENU_EncoderCallback+0xa4>
 8002216:	2b01      	cmp	r3, #1
 8002218:	d002      	beq.n	8002220 <MENU_EncoderCallback+0x20>
 800221a:	2b02      	cmp	r3, #2
 800221c:	d016      	beq.n	800224c <MENU_EncoderCallback+0x4c>
            break;
        }

        default:
            // W innych stanach nie reagujemy
            break;
 800221e:	e041      	b.n	80022a4 <MENU_EncoderCallback+0xa4>
            int newMode = (int)g_externalRingMode + steps;
 8002220:	4b25      	ldr	r3, [pc, #148]	@ (80022b8 <MENU_EncoderCallback+0xb8>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	4413      	add	r3, r2
 800222c:	617b      	str	r3, [r7, #20]
            if (newMode < 0) newMode = 0;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	da01      	bge.n	8002238 <MENU_EncoderCallback+0x38>
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
            if (newMode >= RING_MODE_MAX) newMode = RING_MODE_MAX - 1;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b08      	cmp	r3, #8
 800223c:	dd01      	ble.n	8002242 <MENU_EncoderCallback+0x42>
 800223e:	2308      	movs	r3, #8
 8002240:	617b      	str	r3, [r7, #20]
            g_externalRingMode = (RingMode_t)newMode;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4b1c      	ldr	r3, [pc, #112]	@ (80022b8 <MENU_EncoderCallback+0xb8>)
 8002248:	701a      	strb	r2, [r3, #0]
            break;
 800224a:	e02c      	b.n	80022a6 <MENU_EncoderCallback+0xa6>
            int newMode = (int)g_secondRingMode + steps;
 800224c:	4b1b      	ldr	r3, [pc, #108]	@ (80022bc <MENU_EncoderCallback+0xbc>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	4413      	add	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
            if (newMode < 0) newMode = 0;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	da01      	bge.n	8002264 <MENU_EncoderCallback+0x64>
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
            if (newMode >= SEKRING_MODE_MAX) newMode = SEKRING_MODE_MAX - 1;
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	2b04      	cmp	r3, #4
 8002268:	dd01      	ble.n	800226e <MENU_EncoderCallback+0x6e>
 800226a:	2304      	movs	r3, #4
 800226c:	613b      	str	r3, [r7, #16]
            g_secondRingMode = (SekRingMode_t)newMode;
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4b12      	ldr	r3, [pc, #72]	@ (80022bc <MENU_EncoderCallback+0xbc>)
 8002274:	701a      	strb	r2, [r3, #0]
            break;
 8002276:	e016      	b.n	80022a6 <MENU_EncoderCallback+0xa6>
            int newMode = (int)g_topDisplayMode + steps;
 8002278:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <MENU_EncoderCallback+0xc0>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	4413      	add	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
            if (newMode < 0) newMode = 0;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	da01      	bge.n	8002290 <MENU_EncoderCallback+0x90>
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
            if (newMode >= TOP_DISPLAY_MAX) newMode = TOP_DISPLAY_MAX - 1;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b01      	cmp	r3, #1
 8002294:	dd01      	ble.n	800229a <MENU_EncoderCallback+0x9a>
 8002296:	2301      	movs	r3, #1
 8002298:	60fb      	str	r3, [r7, #12]
            g_topDisplayMode = (TopDisplayMode_t)newMode;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <MENU_EncoderCallback+0xc0>)
 80022a0:	701a      	strb	r2, [r3, #0]
            break;
 80022a2:	e000      	b.n	80022a6 <MENU_EncoderCallback+0xa6>
            break;
 80022a4:	bf00      	nop
    }
}
 80022a6:	bf00      	nop
 80022a8:	371c      	adds	r7, #28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	200006a3 	.word	0x200006a3
 80022b8:	200006a0 	.word	0x200006a0
 80022bc:	200006a1 	.word	0x200006a1
 80022c0:	200006a2 	.word	0x200006a2

080022c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80022d8:	2300      	movs	r3, #0
 80022da:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022dc:	4b24      	ldr	r3, [pc, #144]	@ (8002370 <MX_RTC_Init+0xac>)
 80022de:	4a25      	ldr	r2, [pc, #148]	@ (8002374 <MX_RTC_Init+0xb0>)
 80022e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80022e2:	4b23      	ldr	r3, [pc, #140]	@ (8002370 <MX_RTC_Init+0xac>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80022e8:	4b21      	ldr	r3, [pc, #132]	@ (8002370 <MX_RTC_Init+0xac>)
 80022ea:	227f      	movs	r2, #127	@ 0x7f
 80022ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80022ee:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <MX_RTC_Init+0xac>)
 80022f0:	22ff      	movs	r2, #255	@ 0xff
 80022f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002370 <MX_RTC_Init+0xac>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002370 <MX_RTC_Init+0xac>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002300:	4b1b      	ldr	r3, [pc, #108]	@ (8002370 <MX_RTC_Init+0xac>)
 8002302:	2200      	movs	r2, #0
 8002304:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002306:	481a      	ldr	r0, [pc, #104]	@ (8002370 <MX_RTC_Init+0xac>)
 8002308:	f006 fab0 	bl	800886c <HAL_RTC_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002312:	f7ff fec2 	bl	800209a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002316:	2300      	movs	r3, #0
 8002318:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800231a:	2300      	movs	r3, #0
 800231c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800231e:	2300      	movs	r3, #0
 8002320:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	2201      	movs	r2, #1
 800232e:	4619      	mov	r1, r3
 8002330:	480f      	ldr	r0, [pc, #60]	@ (8002370 <MX_RTC_Init+0xac>)
 8002332:	f006 fb1e 	bl	8008972 <HAL_RTC_SetTime>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800233c:	f7ff fead 	bl	800209a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002340:	2301      	movs	r3, #1
 8002342:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002344:	2301      	movs	r3, #1
 8002346:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002348:	2301      	movs	r3, #1
 800234a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800234c:	2300      	movs	r3, #0
 800234e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002350:	463b      	mov	r3, r7
 8002352:	2201      	movs	r2, #1
 8002354:	4619      	mov	r1, r3
 8002356:	4806      	ldr	r0, [pc, #24]	@ (8002370 <MX_RTC_Init+0xac>)
 8002358:	f006 fc03 	bl	8008b62 <HAL_RTC_SetDate>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002362:	f7ff fe9a 	bl	800209a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002366:	bf00      	nop
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200006a4 	.word	0x200006a4
 8002374:	40002800 	.word	0x40002800

08002378 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0c      	ldr	r2, [pc, #48]	@ (80023c8 <HAL_RTC_MspInit+0x50>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d111      	bne.n	80023be <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800239a:	2302      	movs	r3, #2
 800239c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800239e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023a2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	4618      	mov	r0, r3
 80023aa:	f006 f971 	bl	8008690 <HAL_RCCEx_PeriphCLKConfig>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80023b4:	f7ff fe71 	bl	800209a <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023b8:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <HAL_RTC_MspInit+0x54>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80023be:	bf00      	nop
 80023c0:	3720      	adds	r7, #32
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40002800 	.word	0x40002800
 80023cc:	42470e3c 	.word	0x42470e3c

080023d0 <SHT30_Init>:

/* =========================================================================
   Funkcja inicjalizacyjna
   ========================================================================= */
void SHT30_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af02      	add	r7, sp, #8
    g_measState = SHT30_STATE_IDLE;
 80023d6:	4b10      	ldr	r3, [pc, #64]	@ (8002418 <SHT30_Init+0x48>)
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
    g_timerMs   = 0;
 80023dc:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <SHT30_Init+0x4c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	801a      	strh	r2, [r3, #0]
    memset(&g_latestData, 0, sizeof(g_latestData));
 80023e2:	220c      	movs	r2, #12
 80023e4:	2100      	movs	r1, #0
 80023e6:	480e      	ldr	r0, [pc, #56]	@ (8002420 <SHT30_Init+0x50>)
 80023e8:	f008 ff8e 	bl	800b308 <memset>
    g_latestData.valid = false;
 80023ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <SHT30_Init+0x50>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	721a      	strb	r2, [r3, #8]

    // Opcjonalny Soft Reset (0x30A2) – wysyłamy synchronicznie
    uint8_t cmdReset[2] = {0x30, 0xA2};
 80023f2:	f24a 2330 	movw	r3, #41520	@ 0xa230
 80023f6:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&hi2c2, (SHT30_I2C_ADDR << 1), cmdReset, 2, 100);
 80023f8:	1d3a      	adds	r2, r7, #4
 80023fa:	2364      	movs	r3, #100	@ 0x64
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	2302      	movs	r3, #2
 8002400:	2188      	movs	r1, #136	@ 0x88
 8002402:	4808      	ldr	r0, [pc, #32]	@ (8002424 <SHT30_Init+0x54>)
 8002404:	f003 f956 	bl	80056b4 <HAL_I2C_Master_Transmit>
    HAL_Delay(10); // Odczekaj chwilę po resecie
 8002408:	200a      	movs	r0, #10
 800240a:	f001 fe4b 	bl	80040a4 <HAL_Delay>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200006ca 	.word	0x200006ca
 800241c:	200006d8 	.word	0x200006d8
 8002420:	200006cc 	.word	0x200006cc
 8002424:	20000554 	.word	0x20000554

08002428 <SHT30_10msHandler>:

/* =========================================================================
   Funkcja wywoływana co 10 ms (z przerwania timera)
   ========================================================================= */
void SHT30_10msHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
    switch (g_measState)
 800242c:	4b2d      	ldr	r3, [pc, #180]	@ (80024e4 <SHT30_10msHandler+0xbc>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b04      	cmp	r3, #4
 8002432:	d84c      	bhi.n	80024ce <SHT30_10msHandler+0xa6>
 8002434:	a201      	add	r2, pc, #4	@ (adr r2, 800243c <SHT30_10msHandler+0x14>)
 8002436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243a:	bf00      	nop
 800243c:	08002451 	.word	0x08002451
 8002440:	080024d7 	.word	0x080024d7
 8002444:	08002485 	.word	0x08002485
 8002448:	080024d7 	.word	0x080024d7
 800244c:	080024c7 	.word	0x080024c7
    {
    case SHT30_STATE_IDLE:
        // Czekamy aż minie 30 ms od poprzedniego pomiaru
        g_timerMs += 10;
 8002450:	4b25      	ldr	r3, [pc, #148]	@ (80024e8 <SHT30_10msHandler+0xc0>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	330a      	adds	r3, #10
 8002456:	b29a      	uxth	r2, r3
 8002458:	4b23      	ldr	r3, [pc, #140]	@ (80024e8 <SHT30_10msHandler+0xc0>)
 800245a:	801a      	strh	r2, [r3, #0]
        if (g_timerMs >= SHT30_PERIOD_MS)
 800245c:	4b22      	ldr	r3, [pc, #136]	@ (80024e8 <SHT30_10msHandler+0xc0>)
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	2b77      	cmp	r3, #119	@ 0x77
 8002462:	d93a      	bls.n	80024da <SHT30_10msHandler+0xb2>
        {
            // Reset licznika
            g_timerMs = 0;
 8002464:	4b20      	ldr	r3, [pc, #128]	@ (80024e8 <SHT30_10msHandler+0xc0>)
 8002466:	2200      	movs	r2, #0
 8002468:	801a      	strh	r2, [r3, #0]

            // Start transmisji DMA – wysyłamy komendę Single Shot
            if (HAL_I2C_Master_Transmit_DMA(&hi2c2, (SHT30_I2C_ADDR << 1),
 800246a:	2302      	movs	r3, #2
 800246c:	4a1f      	ldr	r2, [pc, #124]	@ (80024ec <SHT30_10msHandler+0xc4>)
 800246e:	2188      	movs	r1, #136	@ 0x88
 8002470:	481f      	ldr	r0, [pc, #124]	@ (80024f0 <SHT30_10msHandler+0xc8>)
 8002472:	f003 fa1d 	bl	80058b0 <HAL_I2C_Master_Transmit_DMA>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d12e      	bne.n	80024da <SHT30_10msHandler+0xb2>
                                            (uint8_t*)SHT30_CMD_SINGLE_SHOT, 2) == HAL_OK)
            {
                g_measState = SHT30_STATE_TX_IN_PROGRESS;
 800247c:	4b19      	ldr	r3, [pc, #100]	@ (80024e4 <SHT30_10msHandler+0xbc>)
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
            {
                // Błąd startu DMA – pozostajemy w stanie IDLE
                // Można dodać obsługę błędu tutaj
            }
        }
        break;
 8002482:	e02a      	b.n	80024da <SHT30_10msHandler+0xb2>
        // Nic nie robimy – czekamy na callback TX
        break;

    case SHT30_STATE_WAITING_FOR_MEAS:
        // Odliczamy czas konwersji (15 ms)
        g_timerMs += 10;
 8002484:	4b18      	ldr	r3, [pc, #96]	@ (80024e8 <SHT30_10msHandler+0xc0>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	330a      	adds	r3, #10
 800248a:	b29a      	uxth	r2, r3
 800248c:	4b16      	ldr	r3, [pc, #88]	@ (80024e8 <SHT30_10msHandler+0xc0>)
 800248e:	801a      	strh	r2, [r3, #0]
        if (g_timerMs >= SHT30_MEAS_TIME_MS)
 8002490:	4b15      	ldr	r3, [pc, #84]	@ (80024e8 <SHT30_10msHandler+0xc0>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	2b59      	cmp	r3, #89	@ 0x59
 8002496:	d922      	bls.n	80024de <SHT30_10msHandler+0xb6>
        {
            // Minął czas potrzebny na konwersję
            g_timerMs = 0; // Reset licznika
 8002498:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <SHT30_10msHandler+0xc0>)
 800249a:	2200      	movs	r2, #0
 800249c:	801a      	strh	r2, [r3, #0]

            // Rozpoczynamy odbiór surowych danych (6 bajtów) przez DMA
            if (HAL_I2C_Master_Receive_DMA(&hi2c2, (SHT30_I2C_ADDR << 1),
 800249e:	2306      	movs	r3, #6
 80024a0:	4a14      	ldr	r2, [pc, #80]	@ (80024f4 <SHT30_10msHandler+0xcc>)
 80024a2:	2188      	movs	r1, #136	@ 0x88
 80024a4:	4812      	ldr	r0, [pc, #72]	@ (80024f0 <SHT30_10msHandler+0xc8>)
 80024a6:	f003 fb2f 	bl	8005b08 <HAL_I2C_Master_Receive_DMA>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d103      	bne.n	80024b8 <SHT30_10msHandler+0x90>
                                           g_rxBuffer, 6) == HAL_OK)
            {
                g_measState = SHT30_STATE_RX_IN_PROGRESS;
 80024b0:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <SHT30_10msHandler+0xbc>)
 80024b2:	2203      	movs	r2, #3
 80024b4:	701a      	strb	r2, [r3, #0]
                // Błąd startu DMA – powrót do IDLE
                g_measState = SHT30_STATE_IDLE;
                g_latestData.valid = false;
            }
        }
        break;
 80024b6:	e012      	b.n	80024de <SHT30_10msHandler+0xb6>
                g_measState = SHT30_STATE_IDLE;
 80024b8:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <SHT30_10msHandler+0xbc>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
                g_latestData.valid = false;
 80024be:	4b0e      	ldr	r3, [pc, #56]	@ (80024f8 <SHT30_10msHandler+0xd0>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	721a      	strb	r2, [r3, #8]
        break;
 80024c4:	e00b      	b.n	80024de <SHT30_10msHandler+0xb6>
        break;

    case SHT30_STATE_DONE:
        // Pomiar skończony. Przechodzimy do stanu IDLE.
        // Dalsze pomiary będą inicjowane po upływie kolejnych 30 ms
        g_measState = SHT30_STATE_IDLE;
 80024c6:	4b07      	ldr	r3, [pc, #28]	@ (80024e4 <SHT30_10msHandler+0xbc>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
        break;
 80024cc:	e008      	b.n	80024e0 <SHT30_10msHandler+0xb8>

    default:
        g_measState = SHT30_STATE_IDLE;
 80024ce:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <SHT30_10msHandler+0xbc>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
        break;
 80024d4:	e004      	b.n	80024e0 <SHT30_10msHandler+0xb8>
        break;
 80024d6:	bf00      	nop
 80024d8:	e002      	b.n	80024e0 <SHT30_10msHandler+0xb8>
        break;
 80024da:	bf00      	nop
 80024dc:	e000      	b.n	80024e0 <SHT30_10msHandler+0xb8>
        break;
 80024de:	bf00      	nop
    }
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200006ca 	.word	0x200006ca
 80024e8:	200006d8 	.word	0x200006d8
 80024ec:	0800b4a4 	.word	0x0800b4a4
 80024f0:	20000554 	.word	0x20000554
 80024f4:	200006c4 	.word	0x200006c4
 80024f8:	200006cc 	.word	0x200006cc

080024fc <SHT30_GetLatestData>:

/* =========================================================================
   Funkcja pobierająca najnowsze dane pomiarowe
   ========================================================================= */
bool SHT30_GetLatestData(SHT30_Data_t *pData)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
    if (pData == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <SHT30_GetLatestData+0x12>
        return false;
 800250a:	2300      	movs	r3, #0
 800250c:	e00e      	b.n	800252c <SHT30_GetLatestData+0x30>

    if (!g_latestData.valid)
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <SHT30_GetLatestData+0x3c>)
 8002510:	7a1b      	ldrb	r3, [r3, #8]
 8002512:	f083 0301 	eor.w	r3, r3, #1
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <SHT30_GetLatestData+0x24>
        return false;
 800251c:	2300      	movs	r3, #0
 800251e:	e005      	b.n	800252c <SHT30_GetLatestData+0x30>

    *pData = g_latestData;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a05      	ldr	r2, [pc, #20]	@ (8002538 <SHT30_GetLatestData+0x3c>)
 8002524:	ca07      	ldmia	r2, {r0, r1, r2}
 8002526:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return true;
 800252a:	2301      	movs	r3, #1
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	200006cc 	.word	0x200006cc

0800253c <HAL_I2C_MasterTxCpltCallback>:

/* =========================================================================
   Callback zakończenia transmisji DMA (MasterTxCplt)
   ========================================================================= */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a09      	ldr	r2, [pc, #36]	@ (8002570 <HAL_I2C_MasterTxCpltCallback+0x34>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d109      	bne.n	8002562 <HAL_I2C_MasterTxCpltCallback+0x26>
    {
        if (g_measState == SHT30_STATE_TX_IN_PROGRESS)
 800254e:	4b09      	ldr	r3, [pc, #36]	@ (8002574 <HAL_I2C_MasterTxCpltCallback+0x38>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <HAL_I2C_MasterTxCpltCallback+0x26>
        {
            // Przejście do stanu oczekiwania na konwersję
            g_measState = SHT30_STATE_WAITING_FOR_MEAS;
 8002556:	4b07      	ldr	r3, [pc, #28]	@ (8002574 <HAL_I2C_MasterTxCpltCallback+0x38>)
 8002558:	2202      	movs	r2, #2
 800255a:	701a      	strb	r2, [r3, #0]
            g_timerMs = 0; // Reset licznika
 800255c:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 800255e:	2200      	movs	r2, #0
 8002560:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40005800 	.word	0x40005800
 8002574:	200006ca 	.word	0x200006ca
 8002578:	200006d8 	.word	0x200006d8

0800257c <HAL_I2C_MasterRxCpltCallback>:

/* =========================================================================
   Callback zakończenia odbioru DMA (MasterRxCplt)
   ========================================================================= */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a13      	ldr	r2, [pc, #76]	@ (80025d8 <HAL_I2C_MasterRxCpltCallback+0x5c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d120      	bne.n	80025d0 <HAL_I2C_MasterRxCpltCallback+0x54>
    {
        if (g_measState == SHT30_STATE_RX_IN_PROGRESS)
 800258e:	4b13      	ldr	r3, [pc, #76]	@ (80025dc <HAL_I2C_MasterRxCpltCallback+0x60>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b03      	cmp	r3, #3
 8002594:	d11c      	bne.n	80025d0 <HAL_I2C_MasterRxCpltCallback+0x54>
        {
            int32_t temp;   // Temperatura w 0.01°C
            uint32_t rh;    // Wilgotność w 0.01% RH

            bool ok = SHT30_ConvertRawData(g_rxBuffer, &temp, &rh);
 8002596:	f107 020c 	add.w	r2, r7, #12
 800259a:	f107 0310 	add.w	r3, r7, #16
 800259e:	4619      	mov	r1, r3
 80025a0:	480f      	ldr	r0, [pc, #60]	@ (80025e0 <HAL_I2C_MasterRxCpltCallback+0x64>)
 80025a2:	f000 f83d 	bl	8002620 <SHT30_ConvertRawData>
 80025a6:	4603      	mov	r3, r0
 80025a8:	75fb      	strb	r3, [r7, #23]
            if (ok)
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d009      	beq.n	80025c4 <HAL_I2C_MasterRxCpltCallback+0x48>
            {
                g_latestData.temperature = temp;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4a0c      	ldr	r2, [pc, #48]	@ (80025e4 <HAL_I2C_MasterRxCpltCallback+0x68>)
 80025b4:	6013      	str	r3, [r2, #0]
                g_latestData.humidity    = rh;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4a0a      	ldr	r2, [pc, #40]	@ (80025e4 <HAL_I2C_MasterRxCpltCallback+0x68>)
 80025ba:	6053      	str	r3, [r2, #4]
                g_latestData.valid       = true;
 80025bc:	4b09      	ldr	r3, [pc, #36]	@ (80025e4 <HAL_I2C_MasterRxCpltCallback+0x68>)
 80025be:	2201      	movs	r2, #1
 80025c0:	721a      	strb	r2, [r3, #8]
 80025c2:	e002      	b.n	80025ca <HAL_I2C_MasterRxCpltCallback+0x4e>
            }
            else
            {
                g_latestData.valid = false;
 80025c4:	4b07      	ldr	r3, [pc, #28]	@ (80025e4 <HAL_I2C_MasterRxCpltCallback+0x68>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	721a      	strb	r2, [r3, #8]
            }

            // Przejście do stanu DONE
            g_measState = SHT30_STATE_DONE;
 80025ca:	4b04      	ldr	r3, [pc, #16]	@ (80025dc <HAL_I2C_MasterRxCpltCallback+0x60>)
 80025cc:	2204      	movs	r2, #4
 80025ce:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80025d0:	bf00      	nop
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40005800 	.word	0x40005800
 80025dc:	200006ca 	.word	0x200006ca
 80025e0:	200006c4 	.word	0x200006c4
 80025e4:	200006cc 	.word	0x200006cc

080025e8 <HAL_I2C_ErrorCallback>:

/* =========================================================================
   Callback błędu transmisji DMA (Error)
   ========================================================================= */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a07      	ldr	r2, [pc, #28]	@ (8002614 <HAL_I2C_ErrorCallback+0x2c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d105      	bne.n	8002606 <HAL_I2C_ErrorCallback+0x1e>
    {
        // Obsługa błędu transmisji DMA/I2C
        g_measState = SHT30_STATE_IDLE;
 80025fa:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <HAL_I2C_ErrorCallback+0x30>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
        g_latestData.valid = false;
 8002600:	4b06      	ldr	r3, [pc, #24]	@ (800261c <HAL_I2C_ErrorCallback+0x34>)
 8002602:	2200      	movs	r2, #0
 8002604:	721a      	strb	r2, [r3, #8]
    }
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40005800 	.word	0x40005800
 8002618:	200006ca 	.word	0x200006ca
 800261c:	200006cc 	.word	0x200006cc

08002620 <SHT30_ConvertRawData>:

/* =========================================================================
   Funkcja konwertująca surowe dane na wartości całkowite
   ========================================================================= */
static bool SHT30_ConvertRawData(const uint8_t *raw, int32_t *pTemp, uint32_t *pRH)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
    if (raw == NULL || pTemp == NULL || pRH == NULL)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <SHT30_ConvertRawData+0x1e>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <SHT30_ConvertRawData+0x1e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <SHT30_ConvertRawData+0x22>
        return false;
 800263e:	2300      	movs	r3, #0
 8002640:	e04f      	b.n	80026e2 <SHT30_ConvertRawData+0xc2>

    // Sprawdzenie CRC
    if (SHT30_CalcCrc8(&raw[0], 2) != raw[2])
 8002642:	2102      	movs	r1, #2
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f853 	bl	80026f0 <SHT30_CalcCrc8>
 800264a:	4603      	mov	r3, r0
 800264c:	461a      	mov	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3302      	adds	r3, #2
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <SHT30_ConvertRawData+0x3c>
        return false; // Błędny CRC temperatury
 8002658:	2300      	movs	r3, #0
 800265a:	e042      	b.n	80026e2 <SHT30_ConvertRawData+0xc2>

    if (SHT30_CalcCrc8(&raw[3], 2) != raw[5])
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3303      	adds	r3, #3
 8002660:	2102      	movs	r1, #2
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f844 	bl	80026f0 <SHT30_CalcCrc8>
 8002668:	4603      	mov	r3, r0
 800266a:	461a      	mov	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	3305      	adds	r3, #5
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d001      	beq.n	800267a <SHT30_ConvertRawData+0x5a>
        return false; // Błędny CRC wilgotności
 8002676:	2300      	movs	r3, #0
 8002678:	e033      	b.n	80026e2 <SHT30_ConvertRawData+0xc2>

    // Surowa temperatura i wilgotność
    uint16_t rawT = (raw[0] << 8) | raw[1];
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	b21a      	sxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	3301      	adds	r3, #1
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	b21b      	sxth	r3, r3
 800268a:	4313      	orrs	r3, r2
 800268c:	b21b      	sxth	r3, r3
 800268e:	82fb      	strh	r3, [r7, #22]
    uint16_t rawH = (raw[3] << 8) | raw[4];
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3303      	adds	r3, #3
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	b21a      	sxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3304      	adds	r3, #4
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	b21b      	sxth	r3, r3
 80026a2:	4313      	orrs	r3, r2
 80026a4:	b21b      	sxth	r3, r3
 80026a6:	82bb      	strh	r3, [r7, #20]

    // Konwersja na wartości całkowite:
    // T = -4500 + (17500 * rawT) / 65535
    // H = (10000 * rawH) / 65535
    *pTemp = (-4500) + ((17500 * (int32_t)rawT) / 65535);
 80026a8:	8afb      	ldrh	r3, [r7, #22]
 80026aa:	f244 425c 	movw	r2, #17500	@ 0x445c
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	4a0e      	ldr	r2, [pc, #56]	@ (80026ec <SHT30_ConvertRawData+0xcc>)
 80026b4:	fb82 1203 	smull	r1, r2, r2, r3
 80026b8:	441a      	add	r2, r3
 80026ba:	13d2      	asrs	r2, r2, #15
 80026bc:	17db      	asrs	r3, r3, #31
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f5a3 538c 	sub.w	r3, r3, #4480	@ 0x1180
 80026c4:	3b14      	subs	r3, #20
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	6013      	str	r3, [r2, #0]
    *pRH   = (10000 * (uint32_t)rawH) / 65535;
 80026ca:	8abb      	ldrh	r3, [r7, #20]
 80026cc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	4a05      	ldr	r2, [pc, #20]	@ (80026ec <SHT30_ConvertRawData+0xcc>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	0bda      	lsrs	r2, r3, #15
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	601a      	str	r2, [r3, #0]

    return true;
 80026e0:	2301      	movs	r3, #1
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	80008001 	.word	0x80008001

080026f0 <SHT30_CalcCrc8>:
/* =========================================================================
   Funkcja obliczająca CRC8 wg specyfikacji SHT3x
   Polinom: 0x31, inicjalizacja: 0xFF
   ========================================================================= */
static uint8_t SHT30_CalcCrc8(const uint8_t *data, int len)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xFF;
 80026fa:	23ff      	movs	r3, #255	@ 0xff
 80026fc:	75fb      	strb	r3, [r7, #23]

    for (int i = 0; i < len; i++)
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	e021      	b.n	8002748 <SHT30_CalcCrc8+0x58>
    {
        crc ^= data[i];
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	4053      	eors	r3, r2
 8002710:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++)
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e011      	b.n	800273c <SHT30_CalcCrc8+0x4c>
        {
            if (crc & 0x80)
 8002718:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800271c:	2b00      	cmp	r3, #0
 800271e:	da07      	bge.n	8002730 <SHT30_CalcCrc8+0x40>
                crc = (crc << 1) ^ 0x31;
 8002720:	7dfb      	ldrb	r3, [r7, #23]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	b25b      	sxtb	r3, r3
 8002726:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 800272a:	b25b      	sxtb	r3, r3
 800272c:	75fb      	strb	r3, [r7, #23]
 800272e:	e002      	b.n	8002736 <SHT30_CalcCrc8+0x46>
            else
                crc <<= 1;
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3301      	adds	r3, #1
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b07      	cmp	r3, #7
 8002740:	ddea      	ble.n	8002718 <SHT30_CalcCrc8+0x28>
    for (int i = 0; i < len; i++)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	3301      	adds	r3, #1
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	dbd9      	blt.n	8002704 <SHT30_CalcCrc8+0x14>
        }
    }

    return crc;
 8002750:	7dfb      	ldrb	r3, [r7, #23]
}
 8002752:	4618      	mov	r0, r3
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <PrepareBuffer18>:
 *         [0..5] = puste, [6..11] = 6 znaków napisu, [12..17] = puste.
 *         Jeśli text ma mniej niż 6 znaków, dopełniamy pustymi;
 *         jeśli ma więcej, obcinamy do 6.
 */
static void PrepareBuffer18(const char* text)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
    // Wyczyść cały bufor
    memset(buffer, 0, sizeof(buffer));
 8002768:	2212      	movs	r2, #18
 800276a:	2100      	movs	r1, #0
 800276c:	481a      	ldr	r0, [pc, #104]	@ (80027d8 <PrepareBuffer18+0x78>)
 800276e:	f008 fdcb 	bl	800b308 <memset>

    // Kopiujemy do tymczasowego stringa tylko 6 znaków
    char temp[7];
    strncpy(temp, text, 6);
 8002772:	f107 030c 	add.w	r3, r7, #12
 8002776:	2206      	movs	r2, #6
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4618      	mov	r0, r3
 800277c:	f008 fdde 	bl	800b33c <strncpy>
    temp[6] = '\0';   // na wszelki wypadek
 8002780:	2300      	movs	r3, #0
 8002782:	74bb      	strb	r3, [r7, #18]

    // 1) Pierwsze 6 = puste
    // (już jest 0 po memset, więc nic nie trzeba robić)

    // 2) Indeksy 6..11 = treść napisu
    for (int i = 0; i < 6; i++)
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	e01d      	b.n	80027c6 <PrepareBuffer18+0x66>
    {
        if (temp[i] == '\0') {
 800278a:	f107 020c 	add.w	r2, r7, #12
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	4413      	add	r3, r2
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d105      	bne.n	80027a4 <PrepareBuffer18+0x44>
            // Jak się skończył tekst => puste
            buffer[6 + i] = 0;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	3306      	adds	r3, #6
 800279c:	4a0e      	ldr	r2, [pc, #56]	@ (80027d8 <PrepareBuffer18+0x78>)
 800279e:	2100      	movs	r1, #0
 80027a0:	54d1      	strb	r1, [r2, r3]
 80027a2:	e00d      	b.n	80027c0 <PrepareBuffer18+0x60>
        }
        else {
            buffer[6 + i] = (uint8_t)charToSegment(temp[i]);
 80027a4:	f107 020c 	add.w	r2, r7, #12
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	4413      	add	r3, r2
 80027ac:	781a      	ldrb	r2, [r3, #0]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	1d9c      	adds	r4, r3, #6
 80027b2:	4610      	mov	r0, r2
 80027b4:	f7fe f8f8 	bl	80009a8 <charToSegment>
 80027b8:	4603      	mov	r3, r0
 80027ba:	461a      	mov	r2, r3
 80027bc:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <PrepareBuffer18+0x78>)
 80027be:	551a      	strb	r2, [r3, r4]
    for (int i = 0; i < 6; i++)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	3301      	adds	r3, #1
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	ddde      	ble.n	800278a <PrepareBuffer18+0x2a>
        }
    }

    // 3) Ostatnie 6 (12..17) = puste
    // (znów, już jest 0 po memset)
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd90      	pop	{r4, r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200006dc 	.word	0x200006dc

080027dc <ShowWindow>:
 *
 *         Digit0 (najbardziej lewy) - wstawiamy w bity [47..40],
 *         Digit5 (najbardziej prawy) - w bity [7..0].
 */
static void ShowWindow(void)
{
 80027dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027e0:	b09b      	sub	sp, #108	@ 0x6c
 80027e2:	af00      	add	r7, sp, #0
    // Zabezpieczenie – jeśli windowIndex < 0 lub windowIndex+5 >= 18,
    // to niektóre odczyty będą poza [0..17], ale wtedy możemy dać 0 (puste).
    // Najprościej – brać "safe read".
    uint64_t val = 0ULL;
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    // digit0 (lewa pozycja wyświetlacza)
    uint8_t d0 = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (windowIndex + 0 >= 0 && windowIndex + 0 < TOTAL_LEN)
 80027f6:	4b90      	ldr	r3, [pc, #576]	@ (8002a38 <ShowWindow+0x25c>)
 80027f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	db0c      	blt.n	800281a <ShowWindow+0x3e>
 8002800:	4b8d      	ldr	r3, [pc, #564]	@ (8002a38 <ShowWindow+0x25c>)
 8002802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002806:	2b11      	cmp	r3, #17
 8002808:	dc07      	bgt.n	800281a <ShowWindow+0x3e>
        d0 = buffer[windowIndex + 0];
 800280a:	4b8b      	ldr	r3, [pc, #556]	@ (8002a38 <ShowWindow+0x25c>)
 800280c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002810:	461a      	mov	r2, r3
 8002812:	4b8a      	ldr	r3, [pc, #552]	@ (8002a3c <ShowWindow+0x260>)
 8002814:	5c9b      	ldrb	r3, [r3, r2]
 8002816:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

    // digit1
    uint8_t d1 = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
    if (windowIndex + 1 >= 0 && windowIndex + 1 < TOTAL_LEN)
 8002820:	4b85      	ldr	r3, [pc, #532]	@ (8002a38 <ShowWindow+0x25c>)
 8002822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282a:	db0c      	blt.n	8002846 <ShowWindow+0x6a>
 800282c:	4b82      	ldr	r3, [pc, #520]	@ (8002a38 <ShowWindow+0x25c>)
 800282e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002832:	2b10      	cmp	r3, #16
 8002834:	dc07      	bgt.n	8002846 <ShowWindow+0x6a>
        d1 = buffer[windowIndex + 1];
 8002836:	4b80      	ldr	r3, [pc, #512]	@ (8002a38 <ShowWindow+0x25c>)
 8002838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a3c <ShowWindow+0x260>)
 8002840:	5c9b      	ldrb	r3, [r3, r2]
 8002842:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // digit2
    uint8_t d2 = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
    if (windowIndex + 2 >= 0 && windowIndex + 2 < TOTAL_LEN)
 800284c:	4b7a      	ldr	r3, [pc, #488]	@ (8002a38 <ShowWindow+0x25c>)
 800284e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002852:	f113 0f02 	cmn.w	r3, #2
 8002856:	db0c      	blt.n	8002872 <ShowWindow+0x96>
 8002858:	4b77      	ldr	r3, [pc, #476]	@ (8002a38 <ShowWindow+0x25c>)
 800285a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800285e:	2b0f      	cmp	r3, #15
 8002860:	dc07      	bgt.n	8002872 <ShowWindow+0x96>
        d2 = buffer[windowIndex + 2];
 8002862:	4b75      	ldr	r3, [pc, #468]	@ (8002a38 <ShowWindow+0x25c>)
 8002864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002868:	1c9a      	adds	r2, r3, #2
 800286a:	4b74      	ldr	r3, [pc, #464]	@ (8002a3c <ShowWindow+0x260>)
 800286c:	5c9b      	ldrb	r3, [r3, r2]
 800286e:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

    // digit3
    uint8_t d3 = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
    if (windowIndex + 3 >= 0 && windowIndex + 3 < TOTAL_LEN)
 8002878:	4b6f      	ldr	r3, [pc, #444]	@ (8002a38 <ShowWindow+0x25c>)
 800287a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800287e:	f113 0f03 	cmn.w	r3, #3
 8002882:	db0c      	blt.n	800289e <ShowWindow+0xc2>
 8002884:	4b6c      	ldr	r3, [pc, #432]	@ (8002a38 <ShowWindow+0x25c>)
 8002886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800288a:	2b0e      	cmp	r3, #14
 800288c:	dc07      	bgt.n	800289e <ShowWindow+0xc2>
        d3 = buffer[windowIndex + 3];
 800288e:	4b6a      	ldr	r3, [pc, #424]	@ (8002a38 <ShowWindow+0x25c>)
 8002890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002894:	1cda      	adds	r2, r3, #3
 8002896:	4b69      	ldr	r3, [pc, #420]	@ (8002a3c <ShowWindow+0x260>)
 8002898:	5c9b      	ldrb	r3, [r3, r2]
 800289a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

    // digit4
    uint8_t d4 = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    if (windowIndex + 4 >= 0 && windowIndex + 4 < TOTAL_LEN)
 80028a4:	4b64      	ldr	r3, [pc, #400]	@ (8002a38 <ShowWindow+0x25c>)
 80028a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028aa:	f113 0f04 	cmn.w	r3, #4
 80028ae:	db0c      	blt.n	80028ca <ShowWindow+0xee>
 80028b0:	4b61      	ldr	r3, [pc, #388]	@ (8002a38 <ShowWindow+0x25c>)
 80028b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b6:	2b0d      	cmp	r3, #13
 80028b8:	dc07      	bgt.n	80028ca <ShowWindow+0xee>
        d4 = buffer[windowIndex + 4];
 80028ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002a38 <ShowWindow+0x25c>)
 80028bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028c0:	1d1a      	adds	r2, r3, #4
 80028c2:	4b5e      	ldr	r3, [pc, #376]	@ (8002a3c <ShowWindow+0x260>)
 80028c4:	5c9b      	ldrb	r3, [r3, r2]
 80028c6:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

    // digit5 (prawa pozycja wyświetlacza)
    uint8_t d5 = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
    if (windowIndex + 5 >= 0 && windowIndex + 5 < TOTAL_LEN)
 80028d0:	4b59      	ldr	r3, [pc, #356]	@ (8002a38 <ShowWindow+0x25c>)
 80028d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028d6:	f113 0f05 	cmn.w	r3, #5
 80028da:	db0c      	blt.n	80028f6 <ShowWindow+0x11a>
 80028dc:	4b56      	ldr	r3, [pc, #344]	@ (8002a38 <ShowWindow+0x25c>)
 80028de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	dc07      	bgt.n	80028f6 <ShowWindow+0x11a>
        d5 = buffer[windowIndex + 5];
 80028e6:	4b54      	ldr	r3, [pc, #336]	@ (8002a38 <ShowWindow+0x25c>)
 80028e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ec:	1d5a      	adds	r2, r3, #5
 80028ee:	4b53      	ldr	r3, [pc, #332]	@ (8002a3c <ShowWindow+0x260>)
 80028f0:	5c9b      	ldrb	r3, [r3, r2]
 80028f2:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

    // Złóż do 48-bitów (digit0 w [47..40], digit1 w [39..32], ...)
    // UWAGA: digit0 to LEWA, digit5 to PRAWA
    val |= ((uint64_t)d5 << 40);
 80028f6:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 80028fa:	2200      	movs	r2, #0
 80028fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80028fe:	657a      	str	r2, [r7, #84]	@ 0x54
 8002900:	f04f 0000 	mov.w	r0, #0
 8002904:	f04f 0100 	mov.w	r1, #0
 8002908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800290a:	0219      	lsls	r1, r3, #8
 800290c:	2000      	movs	r0, #0
 800290e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002912:	ea42 0600 	orr.w	r6, r2, r0
 8002916:	62be      	str	r6, [r7, #40]	@ 0x28
 8002918:	430b      	orrs	r3, r1
 800291a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800291c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002920:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    val |= ((uint64_t)d4 << 32);
 8002924:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8002928:	2200      	movs	r2, #0
 800292a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800292c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800292e:	f04f 0000 	mov.w	r0, #0
 8002932:	f04f 0100 	mov.w	r1, #0
 8002936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002938:	0019      	movs	r1, r3
 800293a:	2000      	movs	r0, #0
 800293c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002940:	ea42 0600 	orr.w	r6, r2, r0
 8002944:	623e      	str	r6, [r7, #32]
 8002946:	430b      	orrs	r3, r1
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
 800294a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800294e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    val |= ((uint64_t)d3 << 24);
 8002952:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8002956:	2200      	movs	r2, #0
 8002958:	643b      	str	r3, [r7, #64]	@ 0x40
 800295a:	647a      	str	r2, [r7, #68]	@ 0x44
 800295c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8002960:	460b      	mov	r3, r1
 8002962:	0a1d      	lsrs	r5, r3, #8
 8002964:	460b      	mov	r3, r1
 8002966:	061c      	lsls	r4, r3, #24
 8002968:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800296c:	ea42 0104 	orr.w	r1, r2, r4
 8002970:	61b9      	str	r1, [r7, #24]
 8002972:	432b      	orrs	r3, r5
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800297a:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d2 << 16);
 800297e:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8002982:	2200      	movs	r2, #0
 8002984:	4698      	mov	r8, r3
 8002986:	4691      	mov	r9, r2
 8002988:	f04f 0000 	mov.w	r0, #0
 800298c:	f04f 0100 	mov.w	r1, #0
 8002990:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8002994:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8002998:	ea4f 4008 	mov.w	r0, r8, lsl #16
 800299c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029a0:	ea42 0400 	orr.w	r4, r2, r0
 80029a4:	613c      	str	r4, [r7, #16]
 80029a6:	430b      	orrs	r3, r1
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80029ae:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d1 << 8);
 80029b2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80029b6:	2200      	movs	r2, #0
 80029b8:	469a      	mov	sl, r3
 80029ba:	4693      	mov	fp, r2
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80029c8:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80029cc:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80029d0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80029d4:	ea40 0402 	orr.w	r4, r0, r2
 80029d8:	60bc      	str	r4, [r7, #8]
 80029da:	430b      	orrs	r3, r1
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80029e2:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d0 << 0);
 80029e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80029ea:	2200      	movs	r2, #0
 80029ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80029f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029f4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80029f8:	4621      	mov	r1, r4
 80029fa:	4311      	orrs	r1, r2
 80029fc:	6039      	str	r1, [r7, #0]
 80029fe:	4629      	mov	r1, r5
 8002a00:	4319      	orrs	r1, r3
 8002a02:	6079      	str	r1, [r7, #4]
 8002a04:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002a08:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

    clockReg.bottomDisplay = val;
 8002a0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a10:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a16:	4b0a      	ldr	r3, [pc, #40]	@ (8002a40 <ShowWindow+0x264>)
 8002a18:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	f8c3 2012 	str.w	r2, [r3, #18]
 8002a22:	460a      	mov	r2, r1
 8002a24:	82da      	strh	r2, [r3, #22]
    UpdateAllDisplays(&clockReg);
 8002a26:	4806      	ldr	r0, [pc, #24]	@ (8002a40 <ShowWindow+0x264>)
 8002a28:	f7fe fa16 	bl	8000e58 <UpdateAllDisplays>
}
 8002a2c:	bf00      	nop
 8002a2e:	376c      	adds	r7, #108	@ 0x6c
 8002a30:	46bd      	mov	sp, r7
 8002a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a36:	bf00      	nop
 8002a38:	200006f8 	.word	0x200006f8
 8002a3c:	200006dc 	.word	0x200006dc
 8002a40:	20000688 	.word	0x20000688

08002a44 <SLIDER_Init>:

/** ---------------------------------------------------------------------------
 *  @brief Inicjuje wszystkie zmienne slidera w stan "spoczynku". */
void SLIDER_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
    isScrolling        = false;
 8002a48:	4b10      	ldr	r3, [pc, #64]	@ (8002a8c <SLIDER_Init+0x48>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	701a      	strb	r2, [r3, #0]
    scrollPhase        = SCROLL_PHASE_NONE;
 8002a4e:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <SLIDER_Init+0x4c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
    currentDirection   = SCROLL_RIGHT_TO_LEFT;
 8002a54:	4b0f      	ldr	r3, [pc, #60]	@ (8002a94 <SLIDER_Init+0x50>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]
    windowIndex        = 0;
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a98 <SLIDER_Init+0x54>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	801a      	strh	r2, [r3, #0]
    scrollSpeedCounter = 0;
 8002a60:	4b0e      	ldr	r3, [pc, #56]	@ (8002a9c <SLIDER_Init+0x58>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]

    doStayForever  = false;
 8002a66:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa0 <SLIDER_Init+0x5c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
    doPauseThenOut = false;
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa4 <SLIDER_Init+0x60>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
    pauseCounter   = 0;
 8002a72:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa8 <SLIDER_Init+0x64>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
    pauseTicks     = 0;
 8002a78:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <SLIDER_Init+0x68>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]

    memset(buffer, 0, sizeof(buffer));
 8002a7e:	2212      	movs	r2, #18
 8002a80:	2100      	movs	r1, #0
 8002a82:	480b      	ldr	r0, [pc, #44]	@ (8002ab0 <SLIDER_Init+0x6c>)
 8002a84:	f008 fc40 	bl	800b308 <memset>
}
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	200006ee 	.word	0x200006ee
 8002a90:	200006ef 	.word	0x200006ef
 8002a94:	200006f0 	.word	0x200006f0
 8002a98:	200006f8 	.word	0x200006f8
 8002a9c:	200006fa 	.word	0x200006fa
 8002aa0:	200006fb 	.word	0x200006fb
 8002aa4:	200006fc 	.word	0x200006fc
 8002aa8:	20000700 	.word	0x20000700
 8002aac:	20000704 	.word	0x20000704
 8002ab0:	200006dc 	.word	0x200006dc

08002ab4 <SLIDER_SetString>:
 *  @brief Proste przewinięcie (bez fazy IN i pauzy) – tylko OUT.
 *         Załóżmy, że "startowo" cały napis jest na ekranie
 *         i jedzie na zewnątrz.
 */
void SLIDER_SetString(const char* text, ScrollDirection dir, uint32_t pauseTime)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	460b      	mov	r3, r1
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	72fb      	strb	r3, [r7, #11]
	 if (!text) return;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d01d      	beq.n	8002b04 <SLIDER_SetString+0x50>

	    PrepareBuffer18(text);
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f7ff fe49 	bl	8002760 <PrepareBuffer18>

	    currentDirection = dir;
 8002ace:	4a0f      	ldr	r2, [pc, #60]	@ (8002b0c <SLIDER_SetString+0x58>)
 8002ad0:	7afb      	ldrb	r3, [r7, #11]
 8002ad2:	7013      	strb	r3, [r2, #0]
	    scrollPhase      = SCROLL_PHASE_PAUSE;  // Rozpoczynamy od pauzy
 8002ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b10 <SLIDER_SetString+0x5c>)
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	701a      	strb	r2, [r3, #0]
	    isScrolling      = true;
 8002ada:	4b0e      	ldr	r3, [pc, #56]	@ (8002b14 <SLIDER_SetString+0x60>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]

	    doStayForever    = false;
 8002ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b18 <SLIDER_SetString+0x64>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
	    doPauseThenOut   = true;
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <SLIDER_SetString+0x68>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	701a      	strb	r2, [r3, #0]
	    pauseTicks       = pauseTime;
 8002aec:	4a0c      	ldr	r2, [pc, #48]	@ (8002b20 <SLIDER_SetString+0x6c>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6013      	str	r3, [r2, #0]
	    pauseCounter     = pauseTime;
 8002af2:	4a0c      	ldr	r2, [pc, #48]	@ (8002b24 <SLIDER_SetString+0x70>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6013      	str	r3, [r2, #0]

	    // Ustawienie widocznego napisu od razu
	    windowIndex = 6;  // Miejsce, gdzie napis jest w pełni widoczny
 8002af8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b28 <SLIDER_SetString+0x74>)
 8002afa:	2206      	movs	r2, #6
 8002afc:	801a      	strh	r2, [r3, #0]
	    ShowWindow();
 8002afe:	f7ff fe6d 	bl	80027dc <ShowWindow>
 8002b02:	e000      	b.n	8002b06 <SLIDER_SetString+0x52>
	 if (!text) return;
 8002b04:	bf00      	nop
}
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	200006f0 	.word	0x200006f0
 8002b10:	200006ef 	.word	0x200006ef
 8002b14:	200006ee 	.word	0x200006ee
 8002b18:	200006fb 	.word	0x200006fb
 8002b1c:	200006fc 	.word	0x200006fc
 8002b20:	20000704 	.word	0x20000704
 8002b24:	20000700 	.word	0x20000700
 8002b28:	200006f8 	.word	0x200006f8

08002b2c <SLIDER_Stop>:

/** ---------------------------------------------------------------------------
 *  @brief Zatrzymuje scrolling natychmiast.
 */
void SLIDER_Stop(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
    isScrolling = false;
 8002b30:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <SLIDER_Stop+0x34>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
    scrollPhase = SCROLL_PHASE_NONE;
 8002b36:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <SLIDER_Stop+0x38>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
    windowIndex = 0;
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b68 <SLIDER_Stop+0x3c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	801a      	strh	r2, [r3, #0]

    // Jeśli istnieje oczekujące żądanie wyświetlenia liczby, realizujemy je.
    if (displayNumberPending) {
 8002b42:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <SLIDER_Stop+0x40>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d007      	beq.n	8002b5a <SLIDER_Stop+0x2e>
        // Wyświetlamy zapamiętaną liczbę
        SLIDER_DisplayNumber(pendingNumberToDisplay);
 8002b4a:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <SLIDER_Stop+0x44>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f8f6 	bl	8002d40 <SLIDER_DisplayNumber>
        // Resetujemy flagę, bo żądanie zostało obsłużone
        displayNumberPending = false;
 8002b54:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <SLIDER_Stop+0x40>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
    }
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200006ee 	.word	0x200006ee
 8002b64:	200006ef 	.word	0x200006ef
 8002b68:	200006f8 	.word	0x200006f8
 8002b6c:	200006f1 	.word	0x200006f1
 8002b70:	200006f4 	.word	0x200006f4

08002b74 <SLIDER_Update>:

/** ---------------------------------------------------------------------------
 *  @brief Główna funkcja wywoływana cyklicznie (np. co 10 ms w przerwaniu).
 */
void SLIDER_Update(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
    if (!isScrolling) return;
 8002b78:	4b60      	ldr	r3, [pc, #384]	@ (8002cfc <SLIDER_Update+0x188>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	f083 0301 	eor.w	r3, r3, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f040 80b5 	bne.w	8002cf2 <SLIDER_Update+0x17e>

    // Co scrollSpeedTicks odświeżamy
    if (scrollSpeedCounter < scrollSpeedTicks)
 8002b88:	4b5d      	ldr	r3, [pc, #372]	@ (8002d00 <SLIDER_Update+0x18c>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2205      	movs	r2, #5
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d206      	bcs.n	8002ba0 <SLIDER_Update+0x2c>
    {
        scrollSpeedCounter++;
 8002b92:	4b5b      	ldr	r3, [pc, #364]	@ (8002d00 <SLIDER_Update+0x18c>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	3301      	adds	r3, #1
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4b59      	ldr	r3, [pc, #356]	@ (8002d00 <SLIDER_Update+0x18c>)
 8002b9c:	701a      	strb	r2, [r3, #0]
        return;
 8002b9e:	e0ab      	b.n	8002cf8 <SLIDER_Update+0x184>
    }
    scrollSpeedCounter = 0;
 8002ba0:	4b57      	ldr	r3, [pc, #348]	@ (8002d00 <SLIDER_Update+0x18c>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]

    switch (scrollPhase)
 8002ba6:	4b57      	ldr	r3, [pc, #348]	@ (8002d04 <SLIDER_Update+0x190>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d075      	beq.n	8002c9a <SLIDER_Update+0x126>
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	f300 80a1 	bgt.w	8002cf6 <SLIDER_Update+0x182>
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d002      	beq.n	8002bbe <SLIDER_Update+0x4a>
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d060      	beq.n	8002c7e <SLIDER_Update+0x10a>
        break;
    }

    default:
        // SCROLL_PHASE_NONE => nic
        return;
 8002bbc:	e09b      	b.n	8002cf6 <SLIDER_Update+0x182>
        if (currentDirection == SCROLL_RIGHT_TO_LEFT)
 8002bbe:	4b52      	ldr	r3, [pc, #328]	@ (8002d08 <SLIDER_Update+0x194>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d12d      	bne.n	8002c22 <SLIDER_Update+0xae>
            windowIndex--;
 8002bc6:	4b51      	ldr	r3, [pc, #324]	@ (8002d0c <SLIDER_Update+0x198>)
 8002bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	b21a      	sxth	r2, r3
 8002bd4:	4b4d      	ldr	r3, [pc, #308]	@ (8002d0c <SLIDER_Update+0x198>)
 8002bd6:	801a      	strh	r2, [r3, #0]
            if (windowIndex == 6)
 8002bd8:	4b4c      	ldr	r3, [pc, #304]	@ (8002d0c <SLIDER_Update+0x198>)
 8002bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	f040 8081 	bne.w	8002ce6 <SLIDER_Update+0x172>
                if (doStayForever)
 8002be4:	4b4a      	ldr	r3, [pc, #296]	@ (8002d10 <SLIDER_Update+0x19c>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <SLIDER_Update+0x86>
                    isScrolling = false;
 8002bec:	4b43      	ldr	r3, [pc, #268]	@ (8002cfc <SLIDER_Update+0x188>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
                    scrollPhase = SCROLL_PHASE_NONE;
 8002bf2:	4b44      	ldr	r3, [pc, #272]	@ (8002d04 <SLIDER_Update+0x190>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
        break;
 8002bf8:	e075      	b.n	8002ce6 <SLIDER_Update+0x172>
                else if (doPauseThenOut && pauseTicks > 0)
 8002bfa:	4b46      	ldr	r3, [pc, #280]	@ (8002d14 <SLIDER_Update+0x1a0>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00b      	beq.n	8002c1a <SLIDER_Update+0xa6>
 8002c02:	4b45      	ldr	r3, [pc, #276]	@ (8002d18 <SLIDER_Update+0x1a4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <SLIDER_Update+0xa6>
                    scrollPhase = SCROLL_PHASE_PAUSE;
 8002c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d04 <SLIDER_Update+0x190>)
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	701a      	strb	r2, [r3, #0]
                    pauseCounter = pauseTicks;
 8002c10:	4b41      	ldr	r3, [pc, #260]	@ (8002d18 <SLIDER_Update+0x1a4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a41      	ldr	r2, [pc, #260]	@ (8002d1c <SLIDER_Update+0x1a8>)
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	e030      	b.n	8002c7c <SLIDER_Update+0x108>
                    scrollPhase = SCROLL_PHASE_OUT;
 8002c1a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d04 <SLIDER_Update+0x190>)
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	701a      	strb	r2, [r3, #0]
        break;
 8002c20:	e061      	b.n	8002ce6 <SLIDER_Update+0x172>
            windowIndex++;
 8002c22:	4b3a      	ldr	r3, [pc, #232]	@ (8002d0c <SLIDER_Update+0x198>)
 8002c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	b21a      	sxth	r2, r3
 8002c30:	4b36      	ldr	r3, [pc, #216]	@ (8002d0c <SLIDER_Update+0x198>)
 8002c32:	801a      	strh	r2, [r3, #0]
            if (windowIndex == 6)
 8002c34:	4b35      	ldr	r3, [pc, #212]	@ (8002d0c <SLIDER_Update+0x198>)
 8002c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d153      	bne.n	8002ce6 <SLIDER_Update+0x172>
                if (doStayForever)
 8002c3e:	4b34      	ldr	r3, [pc, #208]	@ (8002d10 <SLIDER_Update+0x19c>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d006      	beq.n	8002c54 <SLIDER_Update+0xe0>
                    isScrolling = false;
 8002c46:	4b2d      	ldr	r3, [pc, #180]	@ (8002cfc <SLIDER_Update+0x188>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
                    scrollPhase = SCROLL_PHASE_NONE;
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d04 <SLIDER_Update+0x190>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]
        break;
 8002c52:	e048      	b.n	8002ce6 <SLIDER_Update+0x172>
                else if (doPauseThenOut && pauseTicks > 0)
 8002c54:	4b2f      	ldr	r3, [pc, #188]	@ (8002d14 <SLIDER_Update+0x1a0>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00b      	beq.n	8002c74 <SLIDER_Update+0x100>
 8002c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d18 <SLIDER_Update+0x1a4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <SLIDER_Update+0x100>
                    scrollPhase = SCROLL_PHASE_PAUSE;
 8002c64:	4b27      	ldr	r3, [pc, #156]	@ (8002d04 <SLIDER_Update+0x190>)
 8002c66:	2202      	movs	r2, #2
 8002c68:	701a      	strb	r2, [r3, #0]
                    pauseCounter = pauseTicks;
 8002c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002d18 <SLIDER_Update+0x1a4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a2b      	ldr	r2, [pc, #172]	@ (8002d1c <SLIDER_Update+0x1a8>)
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e003      	b.n	8002c7c <SLIDER_Update+0x108>
                    scrollPhase = SCROLL_PHASE_OUT;
 8002c74:	4b23      	ldr	r3, [pc, #140]	@ (8002d04 <SLIDER_Update+0x190>)
 8002c76:	2203      	movs	r2, #3
 8002c78:	701a      	strb	r2, [r3, #0]
        break;
 8002c7a:	e034      	b.n	8002ce6 <SLIDER_Update+0x172>
 8002c7c:	e033      	b.n	8002ce6 <SLIDER_Update+0x172>
        if (pauseCounter > 0)
 8002c7e:	4b27      	ldr	r3, [pc, #156]	@ (8002d1c <SLIDER_Update+0x1a8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <SLIDER_Update+0x11e>
            pauseCounter--;
 8002c86:	4b25      	ldr	r3, [pc, #148]	@ (8002d1c <SLIDER_Update+0x1a8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	4a23      	ldr	r2, [pc, #140]	@ (8002d1c <SLIDER_Update+0x1a8>)
 8002c8e:	6013      	str	r3, [r2, #0]
        break;
 8002c90:	e02c      	b.n	8002cec <SLIDER_Update+0x178>
            scrollPhase = SCROLL_PHASE_OUT;
 8002c92:	4b1c      	ldr	r3, [pc, #112]	@ (8002d04 <SLIDER_Update+0x190>)
 8002c94:	2203      	movs	r2, #3
 8002c96:	701a      	strb	r2, [r3, #0]
        break;
 8002c98:	e028      	b.n	8002cec <SLIDER_Update+0x178>
        if (currentDirection == SCROLL_RIGHT_TO_LEFT)
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d08 <SLIDER_Update+0x194>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d110      	bne.n	8002cc4 <SLIDER_Update+0x150>
            windowIndex--;
 8002ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d0c <SLIDER_Update+0x198>)
 8002ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	b21a      	sxth	r2, r3
 8002cb0:	4b16      	ldr	r3, [pc, #88]	@ (8002d0c <SLIDER_Update+0x198>)
 8002cb2:	801a      	strh	r2, [r3, #0]
            if (windowIndex < 0)
 8002cb4:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <SLIDER_Update+0x198>)
 8002cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	da15      	bge.n	8002cea <SLIDER_Update+0x176>
                SLIDER_Stop();
 8002cbe:	f7ff ff35 	bl	8002b2c <SLIDER_Stop>
        break;
 8002cc2:	e012      	b.n	8002cea <SLIDER_Update+0x176>
            windowIndex++;
 8002cc4:	4b11      	ldr	r3, [pc, #68]	@ (8002d0c <SLIDER_Update+0x198>)
 8002cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3301      	adds	r3, #1
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	b21a      	sxth	r2, r3
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d0c <SLIDER_Update+0x198>)
 8002cd4:	801a      	strh	r2, [r3, #0]
            if (windowIndex > 12)
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d0c <SLIDER_Update+0x198>)
 8002cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cdc:	2b0c      	cmp	r3, #12
 8002cde:	dd04      	ble.n	8002cea <SLIDER_Update+0x176>
                SLIDER_Stop();
 8002ce0:	f7ff ff24 	bl	8002b2c <SLIDER_Stop>
        break;
 8002ce4:	e001      	b.n	8002cea <SLIDER_Update+0x176>
        break;
 8002ce6:	bf00      	nop
 8002ce8:	e000      	b.n	8002cec <SLIDER_Update+0x178>
        break;
 8002cea:	bf00      	nop
    }

    // Po zmianie windowIndex – odśwież wyświetlacz
    ShowWindow();
 8002cec:	f7ff fd76 	bl	80027dc <ShowWindow>
 8002cf0:	e002      	b.n	8002cf8 <SLIDER_Update+0x184>
    if (!isScrolling) return;
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <SLIDER_Update+0x184>
        return;
 8002cf6:	bf00      	nop
}
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200006ee 	.word	0x200006ee
 8002d00:	200006fa 	.word	0x200006fa
 8002d04:	200006ef 	.word	0x200006ef
 8002d08:	200006f0 	.word	0x200006f0
 8002d0c:	200006f8 	.word	0x200006f8
 8002d10:	200006fb 	.word	0x200006fb
 8002d14:	200006fc 	.word	0x200006fc
 8002d18:	20000704 	.word	0x20000704
 8002d1c:	20000700 	.word	0x20000700

08002d20 <SLIDER_IsStopped>:
bool SLIDER_IsStopped(void) {
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
    return (scrollPhase == SCROLL_PHASE_NONE);
 8002d24:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <SLIDER_IsStopped+0x1c>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf0c      	ite	eq
 8002d2c:	2301      	moveq	r3, #1
 8002d2e:	2300      	movne	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	200006ef 	.word	0x200006ef

08002d40 <SLIDER_DisplayNumber>:



void SLIDER_DisplayNumber(uint32_t number)
{
 8002d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d44:	b09f      	sub	sp, #124	@ 0x7c
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	65f8      	str	r0, [r7, #92]	@ 0x5c
    // Jeżeli slider nie jest zatrzymany, zapamiętaj żądanie i wyjdź
    if (!SLIDER_IsStopped()) {
 8002d4a:	f7ff ffe9 	bl	8002d20 <SLIDER_IsStopped>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f083 0301 	eor.w	r3, r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <SLIDER_DisplayNumber+0x30>
        displayNumberPending = true;
 8002d5a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f48 <SLIDER_DisplayNumber+0x208>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
        pendingNumberToDisplay = (number > 999999) ? 999999 : number;
 8002d60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d62:	4a7a      	ldr	r2, [pc, #488]	@ (8002f4c <SLIDER_DisplayNumber+0x20c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	bf28      	it	cs
 8002d68:	4613      	movcs	r3, r2
 8002d6a:	4a79      	ldr	r2, [pc, #484]	@ (8002f50 <SLIDER_DisplayNumber+0x210>)
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e0e7      	b.n	8002f40 <SLIDER_DisplayNumber+0x200>
    }

    // Slider jest zatrzymany – wyświetlamy liczbę od razu

    // Ograniczamy liczbę do maksimum 999999
    if (number > 999999)
 8002d70:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002d72:	4b76      	ldr	r3, [pc, #472]	@ (8002f4c <SLIDER_DisplayNumber+0x20c>)
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d901      	bls.n	8002d7c <SLIDER_DisplayNumber+0x3c>
        number = 999999;
 8002d78:	4b74      	ldr	r3, [pc, #464]	@ (8002f4c <SLIDER_DisplayNumber+0x20c>)
 8002d7a:	65fb      	str	r3, [r7, #92]	@ 0x5c

    uint8_t digits[6];

    // Inicjujemy wszystkie cyfry jako puste (segment odpowiadający spacji)
    for (int i = 0; i < 6; i++) {
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d80:	e00d      	b.n	8002d9e <SLIDER_DisplayNumber+0x5e>
        digits[i] = charToSegment(' ');
 8002d82:	2020      	movs	r0, #32
 8002d84:	f7fd fe10 	bl	80009a8 <charToSegment>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8002d90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d92:	441a      	add	r2, r3
 8002d94:	460b      	mov	r3, r1
 8002d96:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < 6; i++) {
 8002d98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	ddee      	ble.n	8002d82 <SLIDER_DisplayNumber+0x42>
    }

    // Zamieniamy liczbę na cyfry od końca
    for (int i = 5; i >= 0; i--) {
 8002da4:	2305      	movs	r3, #5
 8002da6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002da8:	e020      	b.n	8002dec <SLIDER_DisplayNumber+0xac>
        digits[i] = charToSegment('0' + (number % 10));
 8002daa:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002dac:	4b69      	ldr	r3, [pc, #420]	@ (8002f54 <SLIDER_DisplayNumber+0x214>)
 8002dae:	fba3 2301 	umull	r2, r3, r3, r1
 8002db2:	08da      	lsrs	r2, r3, #3
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	1aca      	subs	r2, r1, r3
 8002dbe:	b2d3      	uxtb	r3, r2
 8002dc0:	3330      	adds	r3, #48	@ 0x30
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd fdef 	bl	80009a8 <charToSegment>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8002dd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dd4:	441a      	add	r2, r3
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	7013      	strb	r3, [r2, #0]
        number /= 10;
 8002dda:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002ddc:	4b5d      	ldr	r3, [pc, #372]	@ (8002f54 <SLIDER_DisplayNumber+0x214>)
 8002dde:	fba3 2302 	umull	r2, r3, r3, r2
 8002de2:	08db      	lsrs	r3, r3, #3
 8002de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    for (int i = 5; i >= 0; i--) {
 8002de6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002de8:	3b01      	subs	r3, #1
 8002dea:	673b      	str	r3, [r7, #112]	@ 0x70
 8002dec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	dadb      	bge.n	8002daa <SLIDER_DisplayNumber+0x6a>
    }

    // Składamy 6 cyfr do 48-bitowej wartości
    uint64_t displayVal = 0ULL;
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[5] << 40);
 8002dfe:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2200      	movs	r2, #0
 8002e06:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e08:	657a      	str	r2, [r7, #84]	@ 0x54
 8002e0a:	f04f 0000 	mov.w	r0, #0
 8002e0e:	f04f 0100 	mov.w	r1, #0
 8002e12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e14:	0219      	lsls	r1, r3, #8
 8002e16:	2000      	movs	r0, #0
 8002e18:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002e1c:	ea42 0600 	orr.w	r6, r2, r0
 8002e20:	62be      	str	r6, [r7, #40]	@ 0x28
 8002e22:	430b      	orrs	r3, r1
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e2a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[4] << 32);
 8002e2e:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2200      	movs	r2, #0
 8002e36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e38:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002e3a:	f04f 0000 	mov.w	r0, #0
 8002e3e:	f04f 0100 	mov.w	r1, #0
 8002e42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e44:	0019      	movs	r1, r3
 8002e46:	2000      	movs	r0, #0
 8002e48:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002e4c:	ea42 0600 	orr.w	r6, r2, r0
 8002e50:	623e      	str	r6, [r7, #32]
 8002e52:	430b      	orrs	r3, r1
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e5a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[3] << 24);
 8002e5e:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2200      	movs	r2, #0
 8002e66:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e68:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e6a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8002e6e:	460b      	mov	r3, r1
 8002e70:	0a1d      	lsrs	r5, r3, #8
 8002e72:	460b      	mov	r3, r1
 8002e74:	061c      	lsls	r4, r3, #24
 8002e76:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002e7a:	ea42 0104 	orr.w	r1, r2, r4
 8002e7e:	61b9      	str	r1, [r7, #24]
 8002e80:	432b      	orrs	r3, r5
 8002e82:	61fb      	str	r3, [r7, #28]
 8002e84:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002e88:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[2] << 16);
 8002e8c:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2200      	movs	r2, #0
 8002e94:	4698      	mov	r8, r3
 8002e96:	4691      	mov	r9, r2
 8002e98:	f04f 0000 	mov.w	r0, #0
 8002e9c:	f04f 0100 	mov.w	r1, #0
 8002ea0:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8002ea4:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8002ea8:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8002eac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002eb0:	ea42 0400 	orr.w	r4, r2, r0
 8002eb4:	613c      	str	r4, [r7, #16]
 8002eb6:	430b      	orrs	r3, r1
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002ebe:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[1] << 8);
 8002ec2:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2200      	movs	r2, #0
 8002eca:	469a      	mov	sl, r3
 8002ecc:	4693      	mov	fp, r2
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002eda:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002ede:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002ee2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ee6:	ea40 0402 	orr.w	r4, r0, r2
 8002eea:	60bc      	str	r4, [r7, #8]
 8002eec:	430b      	orrs	r3, r1
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002ef4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[0] << 0);
 8002ef8:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2200      	movs	r2, #0
 8002f00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f02:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f04:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002f08:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8002f0c:	4621      	mov	r1, r4
 8002f0e:	4311      	orrs	r1, r2
 8002f10:	6039      	str	r1, [r7, #0]
 8002f12:	4629      	mov	r1, r5
 8002f14:	4319      	orrs	r1, r3
 8002f16:	6079      	str	r1, [r7, #4]
 8002f18:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002f1c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68





    clockReg.bottomDisplay = displayVal;
 8002f20:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002f24:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f58 <SLIDER_DisplayNumber+0x218>)
 8002f2c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002f30:	4602      	mov	r2, r0
 8002f32:	f8c3 2012 	str.w	r2, [r3, #18]
 8002f36:	460a      	mov	r2, r1
 8002f38:	82da      	strh	r2, [r3, #22]
    UpdateAllDisplays(&clockReg);
 8002f3a:	4807      	ldr	r0, [pc, #28]	@ (8002f58 <SLIDER_DisplayNumber+0x218>)
 8002f3c:	f7fd ff8c 	bl	8000e58 <UpdateAllDisplays>
}
 8002f40:	377c      	adds	r7, #124	@ 0x7c
 8002f42:	46bd      	mov	sp, r7
 8002f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f48:	200006f1 	.word	0x200006f1
 8002f4c:	000f423f 	.word	0x000f423f
 8002f50:	200006f4 	.word	0x200006f4
 8002f54:	cccccccd 	.word	0xcccccccd
 8002f58:	20000688 	.word	0x20000688

08002f5c <SLIDER_DisplayTemperature>:

void SLIDER_DisplayTemperature(int32_t temperature)
{
 8002f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f60:	b0a3      	sub	sp, #140	@ 0x8c
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6678      	str	r0, [r7, #100]	@ 0x64
    // Jeżeli slider nie jest zatrzymany, zapamiętaj żądanie i wyjdź
    if (!SLIDER_IsStopped()) {
 8002f66:	f7ff fedb 	bl	8002d20 <SLIDER_IsStopped>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f083 0301 	eor.w	r3, r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d01a      	beq.n	8002fac <SLIDER_DisplayTemperature+0x50>
        displayNumberPending = true;
 8002f76:	4bbb      	ldr	r3, [pc, #748]	@ (8003264 <SLIDER_DisplayTemperature+0x308>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]
        // Ograniczamy temperaturę do zakresu -99999 do 99999
        if (temperature > 99999) {
 8002f7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f7e:	4aba      	ldr	r2, [pc, #744]	@ (8003268 <SLIDER_DisplayTemperature+0x30c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	dd03      	ble.n	8002f8c <SLIDER_DisplayTemperature+0x30>
            pendingNumberToDisplay = 99999;
 8002f84:	4bb9      	ldr	r3, [pc, #740]	@ (800326c <SLIDER_DisplayTemperature+0x310>)
 8002f86:	4ab8      	ldr	r2, [pc, #736]	@ (8003268 <SLIDER_DisplayTemperature+0x30c>)
 8002f88:	601a      	str	r2, [r3, #0]
        } else if (temperature < -99999) {
            pendingNumberToDisplay = 99999; // Można dodać osobną zmienną dla znaku minus
        } else {
            pendingNumberToDisplay = (temperature < 0) ? (uint32_t)(-temperature) : (uint32_t)temperature;
        }
        return;
 8002f8a:	e166      	b.n	800325a <SLIDER_DisplayTemperature+0x2fe>
        } else if (temperature < -99999) {
 8002f8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f8e:	4ab8      	ldr	r2, [pc, #736]	@ (8003270 <SLIDER_DisplayTemperature+0x314>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	da03      	bge.n	8002f9c <SLIDER_DisplayTemperature+0x40>
            pendingNumberToDisplay = 99999; // Można dodać osobną zmienną dla znaku minus
 8002f94:	4bb5      	ldr	r3, [pc, #724]	@ (800326c <SLIDER_DisplayTemperature+0x310>)
 8002f96:	4ab4      	ldr	r2, [pc, #720]	@ (8003268 <SLIDER_DisplayTemperature+0x30c>)
 8002f98:	601a      	str	r2, [r3, #0]
        return;
 8002f9a:	e15e      	b.n	800325a <SLIDER_DisplayTemperature+0x2fe>
            pendingNumberToDisplay = (temperature < 0) ? (uint32_t)(-temperature) : (uint32_t)temperature;
 8002f9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bfb8      	it	lt
 8002fa2:	425b      	neglt	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4bb1      	ldr	r3, [pc, #708]	@ (800326c <SLIDER_DisplayTemperature+0x310>)
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	e156      	b.n	800325a <SLIDER_DisplayTemperature+0x2fe>
    }

    // Slider jest zatrzymany – wyświetlamy temperaturę od razu

    // Ograniczamy temperaturę do zakresu -99999 do 99999
    if (temperature > 99999)
 8002fac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002fae:	4bae      	ldr	r3, [pc, #696]	@ (8003268 <SLIDER_DisplayTemperature+0x30c>)
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	dd02      	ble.n	8002fba <SLIDER_DisplayTemperature+0x5e>
        temperature = 99999;
 8002fb4:	4bac      	ldr	r3, [pc, #688]	@ (8003268 <SLIDER_DisplayTemperature+0x30c>)
 8002fb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fb8:	e005      	b.n	8002fc6 <SLIDER_DisplayTemperature+0x6a>
    else if (temperature < -99999)
 8002fba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002fbc:	4bac      	ldr	r3, [pc, #688]	@ (8003270 <SLIDER_DisplayTemperature+0x314>)
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	da01      	bge.n	8002fc6 <SLIDER_DisplayTemperature+0x6a>
        temperature = -99999;
 8002fc2:	4bab      	ldr	r3, [pc, #684]	@ (8003270 <SLIDER_DisplayTemperature+0x314>)
 8002fc4:	667b      	str	r3, [r7, #100]	@ 0x64

    uint8_t digits[6];

    // Inicjujemy wszystkie cyfry jako puste (segment odpowiadający spacji)
    for (int i = 0; i < 6; i++) {
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002fcc:	e010      	b.n	8002ff0 <SLIDER_DisplayTemperature+0x94>
        digits[i] = charToSegment(' ');
 8002fce:	2020      	movs	r0, #32
 8002fd0:	f7fd fcea 	bl	80009a8 <charToSegment>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fe0:	441a      	add	r2, r3
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < 6; i++) {
 8002fe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fea:	3301      	adds	r3, #1
 8002fec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	ddea      	ble.n	8002fce <SLIDER_DisplayTemperature+0x72>
    }

    bool isNegative = false;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
    if (temperature < 0) {
 8002ffe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003000:	2b00      	cmp	r3, #0
 8003002:	da05      	bge.n	8003010 <SLIDER_DisplayTemperature+0xb4>
        isNegative = true;
 8003004:	2301      	movs	r3, #1
 8003006:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
        temperature = -temperature;
 800300a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800300c:	425b      	negs	r3, r3
 800300e:	667b      	str	r3, [r7, #100]	@ 0x64
    }

    // Przypisujemy symbole 'C' i '°' w zależności od warunków
    if (isNegative && temperature >= 10000) {
 8003010:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <SLIDER_DisplayTemperature+0xd4>
 8003018:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800301a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800301e:	429a      	cmp	r2, r3
 8003020:	dd06      	ble.n	8003030 <SLIDER_DisplayTemperature+0xd4>
        // Dla ujemnych wartości z 5 cyframi, wyświetlamy tylko '°'
        //digits[5] = charToSegment(' '); // Brak 'C'
        digits[5] = charToSegment('*'); // Symbol stopnia
 8003022:	202a      	movs	r0, #42	@ 0x2a
 8003024:	f7fd fcc0 	bl	80009a8 <charToSegment>
 8003028:	4603      	mov	r3, r0
 800302a:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 800302e:	e00b      	b.n	8003048 <SLIDER_DisplayTemperature+0xec>

    } else {
        // Dla dodatnich lub ujemnych wartości z mniej niż 5 cyframi, wyświetlamy '°C'
        digits[5] = charToSegment('C'); // Litera 'C'
 8003030:	2043      	movs	r0, #67	@ 0x43
 8003032:	f7fd fcb9 	bl	80009a8 <charToSegment>
 8003036:	4603      	mov	r3, r0
 8003038:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
        digits[4] = charToSegment('*'); // Symbol stopnia
 800303c:	202a      	movs	r0, #42	@ 0x2a
 800303e:	f7fd fcb3 	bl	80009a8 <charToSegment>
 8003042:	4603      	mov	r3, r0
 8003044:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
    }

    // Wypełniamy cyfry od prawej strony, zaczynając od indeksu 3
    int digitPos = 3;
 8003048:	2303      	movs	r3, #3
 800304a:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 4; i++) {
 800304c:	2300      	movs	r3, #0
 800304e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003050:	e044      	b.n	80030dc <SLIDER_DisplayTemperature+0x180>
        if (temperature > 0 || i > 0) { // Zapobiega wstawianiu '0' na początku
 8003052:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003054:	2b00      	cmp	r3, #0
 8003056:	dc02      	bgt.n	800305e <SLIDER_DisplayTemperature+0x102>
 8003058:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800305a:	2b00      	cmp	r3, #0
 800305c:	dd25      	ble.n	80030aa <SLIDER_DisplayTemperature+0x14e>
            digits[digitPos - i] = charToSegment('0' + (temperature % 10));
 800305e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003060:	4b84      	ldr	r3, [pc, #528]	@ (8003274 <SLIDER_DisplayTemperature+0x318>)
 8003062:	fb83 2301 	smull	r2, r3, r3, r1
 8003066:	109a      	asrs	r2, r3, #2
 8003068:	17cb      	asrs	r3, r1, #31
 800306a:	1ad2      	subs	r2, r2, r3
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	1aca      	subs	r2, r1, r3
 8003076:	b2d3      	uxtb	r3, r2
 8003078:	3330      	adds	r3, #48	@ 0x30
 800307a:	b2d9      	uxtb	r1, r3
 800307c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800307e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003080:	1ad4      	subs	r4, r2, r3
 8003082:	4608      	mov	r0, r1
 8003084:	f7fd fc90 	bl	80009a8 <charToSegment>
 8003088:	4603      	mov	r3, r0
 800308a:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 800308e:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8003092:	440a      	add	r2, r1
 8003094:	f802 3c20 	strb.w	r3, [r2, #-32]
            temperature /= 10;
 8003098:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800309a:	4b76      	ldr	r3, [pc, #472]	@ (8003274 <SLIDER_DisplayTemperature+0x318>)
 800309c:	fb83 2301 	smull	r2, r3, r3, r1
 80030a0:	109a      	asrs	r2, r3, #2
 80030a2:	17cb      	asrs	r3, r1, #31
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80030a8:	e015      	b.n	80030d6 <SLIDER_DisplayTemperature+0x17a>
        } else {
            digits[digitPos - i] = charToSegment('0');
 80030aa:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80030ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030ae:	1ad4      	subs	r4, r2, r3
 80030b0:	2030      	movs	r0, #48	@ 0x30
 80030b2:	f7fd fc79 	bl	80009a8 <charToSegment>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 80030bc:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80030c0:	440a      	add	r2, r1
 80030c2:	f802 3c20 	strb.w	r3, [r2, #-32]
            temperature /= 10;
 80030c6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80030c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003274 <SLIDER_DisplayTemperature+0x318>)
 80030ca:	fb83 2301 	smull	r2, r3, r3, r1
 80030ce:	109a      	asrs	r2, r3, #2
 80030d0:	17cb      	asrs	r3, r1, #31
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	667b      	str	r3, [r7, #100]	@ 0x64
    for (int i = 0; i < 4; i++) {
 80030d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030d8:	3301      	adds	r3, #1
 80030da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80030dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030de:	2b03      	cmp	r3, #3
 80030e0:	ddb7      	ble.n	8003052 <SLIDER_DisplayTemperature+0xf6>
        }
    }

    // Jeśli temperatura jest ujemna, ustawiamy znak minus
    if (isNegative) {
 80030e2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <SLIDER_DisplayTemperature+0x19a>
        digits[0] = charToSegment('-');
 80030ea:	202d      	movs	r0, #45	@ 0x2d
 80030ec:	f7fd fc5c 	bl	80009a8 <charToSegment>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
    }

    // Składamy 6 cyfr do 48-bitowej wartości
    uint64_t displayVal = 0ULL;
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[5] << 40);
 8003102:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2200      	movs	r2, #0
 800310a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800310c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800310e:	f04f 0000 	mov.w	r0, #0
 8003112:	f04f 0100 	mov.w	r1, #0
 8003116:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003118:	0219      	lsls	r1, r3, #8
 800311a:	2000      	movs	r0, #0
 800311c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003120:	ea42 0400 	orr.w	r4, r2, r0
 8003124:	633c      	str	r4, [r7, #48]	@ 0x30
 8003126:	430b      	orrs	r3, r1
 8003128:	637b      	str	r3, [r7, #52]	@ 0x34
 800312a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800312e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[4] << 32);
 8003132:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2200      	movs	r2, #0
 800313a:	653b      	str	r3, [r7, #80]	@ 0x50
 800313c:	657a      	str	r2, [r7, #84]	@ 0x54
 800313e:	f04f 0000 	mov.w	r0, #0
 8003142:	f04f 0100 	mov.w	r1, #0
 8003146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003148:	0019      	movs	r1, r3
 800314a:	2000      	movs	r0, #0
 800314c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003150:	ea42 0400 	orr.w	r4, r2, r0
 8003154:	62bc      	str	r4, [r7, #40]	@ 0x28
 8003156:	430b      	orrs	r3, r1
 8003158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800315a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800315e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[3] << 24);
 8003162:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2200      	movs	r2, #0
 800316a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800316c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800316e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003172:	460b      	mov	r3, r1
 8003174:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8003178:	460b      	mov	r3, r1
 800317a:	ea4f 6803 	mov.w	r8, r3, lsl #24
 800317e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003182:	ea42 0108 	orr.w	r1, r2, r8
 8003186:	6239      	str	r1, [r7, #32]
 8003188:	ea43 0309 	orr.w	r3, r3, r9
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24
 800318e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003192:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[2] << 16);
 8003196:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2200      	movs	r2, #0
 800319e:	469a      	mov	sl, r3
 80031a0:	4693      	mov	fp, r2
 80031a2:	f04f 0000 	mov.w	r0, #0
 80031a6:	f04f 0100 	mov.w	r1, #0
 80031aa:	ea4f 410b 	mov.w	r1, fp, lsl #16
 80031ae:	ea41 411a 	orr.w	r1, r1, sl, lsr #16
 80031b2:	ea4f 400a 	mov.w	r0, sl, lsl #16
 80031b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80031ba:	ea42 0400 	orr.w	r4, r2, r0
 80031be:	61bc      	str	r4, [r7, #24]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80031c8:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[1] << 8);
 80031cc:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2200      	movs	r2, #0
 80031d4:	461d      	mov	r5, r3
 80031d6:	4616      	mov	r6, r2
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	0233      	lsls	r3, r6, #8
 80031e2:	ea43 6315 	orr.w	r3, r3, r5, lsr #24
 80031e6:	022a      	lsls	r2, r5, #8
 80031e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80031ec:	ea40 0402 	orr.w	r4, r0, r2
 80031f0:	613c      	str	r4, [r7, #16]
 80031f2:	430b      	orrs	r3, r1
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80031fa:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[0] << 0);
 80031fe:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2200      	movs	r2, #0
 8003206:	643b      	str	r3, [r7, #64]	@ 0x40
 8003208:	647a      	str	r2, [r7, #68]	@ 0x44
 800320a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800320e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8003212:	4621      	mov	r1, r4
 8003214:	4311      	orrs	r1, r2
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	4629      	mov	r1, r5
 800321a:	4319      	orrs	r1, r3
 800321c:	60f9      	str	r1, [r7, #12]
 800321e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003222:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    displayVal |= ((uint64_t)0b10000000 << 8); // Kropka dziesiętna na digit[1]
 8003226:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800322a:	f442 4100 	orr.w	r1, r2, #32768	@ 0x8000
 800322e:	6039      	str	r1, [r7, #0]
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003236:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70



    // Ustawiamy wartość wyświetlacza i aktualizujemy wyświetlacze
    clockReg.bottomDisplay = displayVal;
 800323a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800323e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003240:	b29b      	uxth	r3, r3
 8003242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003244:	4b0c      	ldr	r3, [pc, #48]	@ (8003278 <SLIDER_DisplayTemperature+0x31c>)
 8003246:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800324a:	4602      	mov	r2, r0
 800324c:	f8c3 2012 	str.w	r2, [r3, #18]
 8003250:	460a      	mov	r2, r1
 8003252:	82da      	strh	r2, [r3, #22]
    UpdateAllDisplays(&clockReg);
 8003254:	4808      	ldr	r0, [pc, #32]	@ (8003278 <SLIDER_DisplayTemperature+0x31c>)
 8003256:	f7fd fdff 	bl	8000e58 <UpdateAllDisplays>
}
 800325a:	378c      	adds	r7, #140	@ 0x8c
 800325c:	46bd      	mov	sp, r7
 800325e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003262:	bf00      	nop
 8003264:	200006f1 	.word	0x200006f1
 8003268:	0001869f 	.word	0x0001869f
 800326c:	200006f4 	.word	0x200006f4
 8003270:	fffe7961 	.word	0xfffe7961
 8003274:	66666667 	.word	0x66666667
 8003278:	20000688 	.word	0x20000688

0800327c <SLIDER_DisplayHumidity>:
    clockReg.bottomDisplay = displayVal;
    UpdateAllDisplays(&clockReg);
}

void SLIDER_DisplayHumidity(uint32_t humidity)
{
 800327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003280:	b0a3      	sub	sp, #140	@ 0x8c
 8003282:	af00      	add	r7, sp, #0
 8003284:	6678      	str	r0, [r7, #100]	@ 0x64
    // Jeżeli slider nie jest zatrzymany, zapamiętaj żądanie i wyjdź
    if (!SLIDER_IsStopped()) {
 8003286:	f7ff fd4b 	bl	8002d20 <SLIDER_IsStopped>
 800328a:	4603      	mov	r3, r0
 800328c:	f083 0301 	eor.w	r3, r3, #1
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00e      	beq.n	80032b4 <SLIDER_DisplayHumidity+0x38>
        displayNumberPending = true;
 8003296:	4b9f      	ldr	r3, [pc, #636]	@ (8003514 <SLIDER_DisplayHumidity+0x298>)
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
        // Ograniczamy wilgotność do zakresu 0 do 999999
        if (humidity > 999999) {
 800329c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800329e:	4a9e      	ldr	r2, [pc, #632]	@ (8003518 <SLIDER_DisplayHumidity+0x29c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d903      	bls.n	80032ac <SLIDER_DisplayHumidity+0x30>
            pendingNumberToDisplay = 999999;
 80032a4:	4b9d      	ldr	r3, [pc, #628]	@ (800351c <SLIDER_DisplayHumidity+0x2a0>)
 80032a6:	4a9c      	ldr	r2, [pc, #624]	@ (8003518 <SLIDER_DisplayHumidity+0x29c>)
 80032a8:	601a      	str	r2, [r3, #0]
        } else {
            pendingNumberToDisplay = humidity;
        }
        return;
 80032aa:	e12e      	b.n	800350a <SLIDER_DisplayHumidity+0x28e>
            pendingNumberToDisplay = humidity;
 80032ac:	4a9b      	ldr	r2, [pc, #620]	@ (800351c <SLIDER_DisplayHumidity+0x2a0>)
 80032ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	e12a      	b.n	800350a <SLIDER_DisplayHumidity+0x28e>
    }

    // Slider jest zatrzymany – wyświetlamy wilgotność od razu

    // Ograniczamy wilgotność do zakresu 0 do 999999
    if (humidity > 999999)
 80032b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80032b6:	4b98      	ldr	r3, [pc, #608]	@ (8003518 <SLIDER_DisplayHumidity+0x29c>)
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d901      	bls.n	80032c0 <SLIDER_DisplayHumidity+0x44>
        humidity = 999999;
 80032bc:	4b96      	ldr	r3, [pc, #600]	@ (8003518 <SLIDER_DisplayHumidity+0x29c>)
 80032be:	667b      	str	r3, [r7, #100]	@ 0x64

    uint8_t digits[6];

    // Inicjujemy wszystkie cyfry jako puste (segment odpowiadający spacji)
    for (int i = 0; i < 6; i++) {
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032c6:	e010      	b.n	80032ea <SLIDER_DisplayHumidity+0x6e>
        digits[i] = charToSegment(' ');
 80032c8:	2020      	movs	r0, #32
 80032ca:	f7fd fb6d 	bl	80009a8 <charToSegment>
 80032ce:	4603      	mov	r3, r0
 80032d0:	4619      	mov	r1, r3
 80032d2:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80032d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032da:	441a      	add	r2, r3
 80032dc:	460b      	mov	r3, r1
 80032de:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < 6; i++) {
 80032e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032e4:	3301      	adds	r3, #1
 80032e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032ee:	2b05      	cmp	r3, #5
 80032f0:	ddea      	ble.n	80032c8 <SLIDER_DisplayHumidity+0x4c>
    }

    // Przypisujemy litery 'R' i 'H' na ostatnich dwóch pozycjach
    digits[5] = charToSegment('h'); // Litera 'H'
 80032f2:	2068      	movs	r0, #104	@ 0x68
 80032f4:	f7fd fb58 	bl	80009a8 <charToSegment>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
    digits[4] = charToSegment('R'); // Litera 'R'
 80032fe:	2052      	movs	r0, #82	@ 0x52
 8003300:	f7fd fb52 	bl	80009a8 <charToSegment>
 8003304:	4603      	mov	r3, r0
 8003306:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c

    // Wypełniamy cyfry wilgotności od prawej strony, zaczynając od indeksu 3
    int digitPos = 3;
 800330a:	2303      	movs	r3, #3
 800330c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for (int i = 0; i < 4; i++) { // Cztery cyfry dla wilgotności (0-9999)
 800330e:	2300      	movs	r3, #0
 8003310:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003314:	e043      	b.n	800339e <SLIDER_DisplayHumidity+0x122>
        if (humidity > 0 || i > 0) { // Zapobiega wstawianiu '0' na początku
 8003316:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003318:	2b00      	cmp	r3, #0
 800331a:	d103      	bne.n	8003324 <SLIDER_DisplayHumidity+0xa8>
 800331c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003320:	2b00      	cmp	r3, #0
 8003322:	dd22      	ble.n	800336a <SLIDER_DisplayHumidity+0xee>
            digits[digitPos - i] = charToSegment('0' + (humidity % 10));
 8003324:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003326:	4b7e      	ldr	r3, [pc, #504]	@ (8003520 <SLIDER_DisplayHumidity+0x2a4>)
 8003328:	fba3 2301 	umull	r2, r3, r3, r1
 800332c:	08da      	lsrs	r2, r3, #3
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	1aca      	subs	r2, r1, r3
 8003338:	b2d3      	uxtb	r3, r2
 800333a:	3330      	adds	r3, #48	@ 0x30
 800333c:	b2d9      	uxtb	r1, r3
 800333e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003340:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003344:	1ad4      	subs	r4, r2, r3
 8003346:	4608      	mov	r0, r1
 8003348:	f7fd fb2e 	bl	80009a8 <charToSegment>
 800334c:	4603      	mov	r3, r0
 800334e:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8003352:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8003356:	440a      	add	r2, r1
 8003358:	f802 3c20 	strb.w	r3, [r2, #-32]
            humidity /= 10;
 800335c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800335e:	4b70      	ldr	r3, [pc, #448]	@ (8003520 <SLIDER_DisplayHumidity+0x2a4>)
 8003360:	fba3 2302 	umull	r2, r3, r3, r2
 8003364:	08db      	lsrs	r3, r3, #3
 8003366:	667b      	str	r3, [r7, #100]	@ 0x64
 8003368:	e014      	b.n	8003394 <SLIDER_DisplayHumidity+0x118>
        } else {
            digits[digitPos - i] = charToSegment('0');
 800336a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800336c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003370:	1ad4      	subs	r4, r2, r3
 8003372:	2030      	movs	r0, #48	@ 0x30
 8003374:	f7fd fb18 	bl	80009a8 <charToSegment>
 8003378:	4603      	mov	r3, r0
 800337a:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 800337e:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8003382:	440a      	add	r2, r1
 8003384:	f802 3c20 	strb.w	r3, [r2, #-32]
            humidity /= 10;
 8003388:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800338a:	4b65      	ldr	r3, [pc, #404]	@ (8003520 <SLIDER_DisplayHumidity+0x2a4>)
 800338c:	fba3 2302 	umull	r2, r3, r3, r2
 8003390:	08db      	lsrs	r3, r3, #3
 8003392:	667b      	str	r3, [r7, #100]	@ 0x64
    for (int i = 0; i < 4; i++) { // Cztery cyfry dla wilgotności (0-9999)
 8003394:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003398:	3301      	adds	r3, #1
 800339a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800339e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	ddb7      	ble.n	8003316 <SLIDER_DisplayHumidity+0x9a>
        }
    }

    // Składamy 6 cyfr do 48-bitowej wartości
    uint64_t displayVal = 0ULL;
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[5] << 40);
 80033b2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2200      	movs	r2, #0
 80033ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033bc:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80033be:	f04f 0000 	mov.w	r0, #0
 80033c2:	f04f 0100 	mov.w	r1, #0
 80033c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033c8:	0219      	lsls	r1, r3, #8
 80033ca:	2000      	movs	r0, #0
 80033cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80033d0:	ea42 0400 	orr.w	r4, r2, r0
 80033d4:	633c      	str	r4, [r7, #48]	@ 0x30
 80033d6:	430b      	orrs	r3, r1
 80033d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80033da:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80033de:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[4] << 32);
 80033e2:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2200      	movs	r2, #0
 80033ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80033ec:	657a      	str	r2, [r7, #84]	@ 0x54
 80033ee:	f04f 0000 	mov.w	r0, #0
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033f8:	0019      	movs	r1, r3
 80033fa:	2000      	movs	r0, #0
 80033fc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003400:	ea42 0400 	orr.w	r4, r2, r0
 8003404:	62bc      	str	r4, [r7, #40]	@ 0x28
 8003406:	430b      	orrs	r3, r1
 8003408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800340a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800340e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[3] << 24);
 8003412:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2200      	movs	r2, #0
 800341a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800341c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800341e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003422:	460b      	mov	r3, r1
 8003424:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8003428:	460b      	mov	r3, r1
 800342a:	ea4f 6803 	mov.w	r8, r3, lsl #24
 800342e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003432:	ea42 0108 	orr.w	r1, r2, r8
 8003436:	6239      	str	r1, [r7, #32]
 8003438:	ea43 0309 	orr.w	r3, r3, r9
 800343c:	627b      	str	r3, [r7, #36]	@ 0x24
 800343e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003442:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[2] << 16);
 8003446:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2200      	movs	r2, #0
 800344e:	469a      	mov	sl, r3
 8003450:	4693      	mov	fp, r2
 8003452:	f04f 0000 	mov.w	r0, #0
 8003456:	f04f 0100 	mov.w	r1, #0
 800345a:	ea4f 410b 	mov.w	r1, fp, lsl #16
 800345e:	ea41 411a 	orr.w	r1, r1, sl, lsr #16
 8003462:	ea4f 400a 	mov.w	r0, sl, lsl #16
 8003466:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800346a:	ea42 0400 	orr.w	r4, r2, r0
 800346e:	61bc      	str	r4, [r7, #24]
 8003470:	430b      	orrs	r3, r1
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003478:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[1] << 8);
 800347c:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2200      	movs	r2, #0
 8003484:	461d      	mov	r5, r3
 8003486:	4616      	mov	r6, r2
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	0233      	lsls	r3, r6, #8
 8003492:	ea43 6315 	orr.w	r3, r3, r5, lsr #24
 8003496:	022a      	lsls	r2, r5, #8
 8003498:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800349c:	ea40 0402 	orr.w	r4, r0, r2
 80034a0:	613c      	str	r4, [r7, #16]
 80034a2:	430b      	orrs	r3, r1
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80034aa:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    displayVal |= ((uint64_t)digits[0] << 0);
 80034ae:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2200      	movs	r2, #0
 80034b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80034b8:	647a      	str	r2, [r7, #68]	@ 0x44
 80034ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80034be:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80034c2:	4621      	mov	r1, r4
 80034c4:	4311      	orrs	r1, r2
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	4629      	mov	r1, r5
 80034ca:	4319      	orrs	r1, r3
 80034cc:	60f9      	str	r1, [r7, #12]
 80034ce:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80034d2:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    // **Miejsce dodania maski kropki dziesiętnej**
    // Możesz dodać maskę kropki dziesiętnej na dowolnej pozycji, np. na drugiej cyfrze (indeks 1)
    // Przykład: Ustawienie kropki dziesiętnej na digit[1]
     displayVal |= ((uint64_t)0b10000000 << 8); // Opcjonalnie, możesz to zrobić w swoim kodzie
 80034d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80034da:	f442 4100 	orr.w	r1, r2, #32768	@ 0x8000
 80034de:	6039      	str	r1, [r7, #0]
 80034e0:	607b      	str	r3, [r7, #4]
 80034e2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80034e6:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    // Ustawiamy wartość wyświetlacza i aktualizujemy wyświetlacze
    clockReg.bottomDisplay = displayVal;
 80034ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80034ee:	63ba      	str	r2, [r7, #56]	@ 0x38
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <SLIDER_DisplayHumidity+0x2a8>)
 80034f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80034fa:	4602      	mov	r2, r0
 80034fc:	f8c3 2012 	str.w	r2, [r3, #18]
 8003500:	460a      	mov	r2, r1
 8003502:	82da      	strh	r2, [r3, #22]
    UpdateAllDisplays(&clockReg);
 8003504:	4807      	ldr	r0, [pc, #28]	@ (8003524 <SLIDER_DisplayHumidity+0x2a8>)
 8003506:	f7fd fca7 	bl	8000e58 <UpdateAllDisplays>
}
 800350a:	378c      	adds	r7, #140	@ 0x8c
 800350c:	46bd      	mov	sp, r7
 800350e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003512:	bf00      	nop
 8003514:	200006f1 	.word	0x200006f1
 8003518:	000f423f 	.word	0x000f423f
 800351c:	200006f4 	.word	0x200006f4
 8003520:	cccccccd 	.word	0xcccccccd
 8003524:	20000688 	.word	0x20000688

08003528 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800352c:	4b17      	ldr	r3, [pc, #92]	@ (800358c <MX_SPI1_Init+0x64>)
 800352e:	4a18      	ldr	r2, [pc, #96]	@ (8003590 <MX_SPI1_Init+0x68>)
 8003530:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003532:	4b16      	ldr	r3, [pc, #88]	@ (800358c <MX_SPI1_Init+0x64>)
 8003534:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003538:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800353a:	4b14      	ldr	r3, [pc, #80]	@ (800358c <MX_SPI1_Init+0x64>)
 800353c:	2200      	movs	r2, #0
 800353e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003540:	4b12      	ldr	r3, [pc, #72]	@ (800358c <MX_SPI1_Init+0x64>)
 8003542:	2200      	movs	r2, #0
 8003544:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003546:	4b11      	ldr	r3, [pc, #68]	@ (800358c <MX_SPI1_Init+0x64>)
 8003548:	2200      	movs	r2, #0
 800354a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800354c:	4b0f      	ldr	r3, [pc, #60]	@ (800358c <MX_SPI1_Init+0x64>)
 800354e:	2200      	movs	r2, #0
 8003550:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003552:	4b0e      	ldr	r3, [pc, #56]	@ (800358c <MX_SPI1_Init+0x64>)
 8003554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003558:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800355a:	4b0c      	ldr	r3, [pc, #48]	@ (800358c <MX_SPI1_Init+0x64>)
 800355c:	2220      	movs	r2, #32
 800355e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003560:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <MX_SPI1_Init+0x64>)
 8003562:	2200      	movs	r2, #0
 8003564:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003566:	4b09      	ldr	r3, [pc, #36]	@ (800358c <MX_SPI1_Init+0x64>)
 8003568:	2200      	movs	r2, #0
 800356a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800356c:	4b07      	ldr	r3, [pc, #28]	@ (800358c <MX_SPI1_Init+0x64>)
 800356e:	2200      	movs	r2, #0
 8003570:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003572:	4b06      	ldr	r3, [pc, #24]	@ (800358c <MX_SPI1_Init+0x64>)
 8003574:	220a      	movs	r2, #10
 8003576:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003578:	4804      	ldr	r0, [pc, #16]	@ (800358c <MX_SPI1_Init+0x64>)
 800357a:	f005 fc83 	bl	8008e84 <HAL_SPI_Init>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003584:	f7fe fd89 	bl	800209a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003588:	bf00      	nop
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20000708 	.word	0x20000708
 8003590:	40013000 	.word	0x40013000

08003594 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003598:	4b17      	ldr	r3, [pc, #92]	@ (80035f8 <MX_SPI2_Init+0x64>)
 800359a:	4a18      	ldr	r2, [pc, #96]	@ (80035fc <MX_SPI2_Init+0x68>)
 800359c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800359e:	4b16      	ldr	r3, [pc, #88]	@ (80035f8 <MX_SPI2_Init+0x64>)
 80035a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80035a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80035a6:	4b14      	ldr	r3, [pc, #80]	@ (80035f8 <MX_SPI2_Init+0x64>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80035ac:	4b12      	ldr	r3, [pc, #72]	@ (80035f8 <MX_SPI2_Init+0x64>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035b2:	4b11      	ldr	r3, [pc, #68]	@ (80035f8 <MX_SPI2_Init+0x64>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035b8:	4b0f      	ldr	r3, [pc, #60]	@ (80035f8 <MX_SPI2_Init+0x64>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80035be:	4b0e      	ldr	r3, [pc, #56]	@ (80035f8 <MX_SPI2_Init+0x64>)
 80035c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80035c6:	4b0c      	ldr	r3, [pc, #48]	@ (80035f8 <MX_SPI2_Init+0x64>)
 80035c8:	2208      	movs	r2, #8
 80035ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035cc:	4b0a      	ldr	r3, [pc, #40]	@ (80035f8 <MX_SPI2_Init+0x64>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80035d2:	4b09      	ldr	r3, [pc, #36]	@ (80035f8 <MX_SPI2_Init+0x64>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035d8:	4b07      	ldr	r3, [pc, #28]	@ (80035f8 <MX_SPI2_Init+0x64>)
 80035da:	2200      	movs	r2, #0
 80035dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80035de:	4b06      	ldr	r3, [pc, #24]	@ (80035f8 <MX_SPI2_Init+0x64>)
 80035e0:	220a      	movs	r2, #10
 80035e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80035e4:	4804      	ldr	r0, [pc, #16]	@ (80035f8 <MX_SPI2_Init+0x64>)
 80035e6:	f005 fc4d 	bl	8008e84 <HAL_SPI_Init>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80035f0:	f7fe fd53 	bl	800209a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80035f4:	bf00      	nop
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	20000760 	.word	0x20000760
 80035fc:	40003800 	.word	0x40003800

08003600 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08c      	sub	sp, #48	@ 0x30
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003608:	f107 031c 	add.w	r3, r7, #28
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a7f      	ldr	r2, [pc, #508]	@ (800381c <HAL_SPI_MspInit+0x21c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d162      	bne.n	80036e8 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	4b7e      	ldr	r3, [pc, #504]	@ (8003820 <HAL_SPI_MspInit+0x220>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362a:	4a7d      	ldr	r2, [pc, #500]	@ (8003820 <HAL_SPI_MspInit+0x220>)
 800362c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003630:	6453      	str	r3, [r2, #68]	@ 0x44
 8003632:	4b7b      	ldr	r3, [pc, #492]	@ (8003820 <HAL_SPI_MspInit+0x220>)
 8003634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003636:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800363a:	61bb      	str	r3, [r7, #24]
 800363c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	4b77      	ldr	r3, [pc, #476]	@ (8003820 <HAL_SPI_MspInit+0x220>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003646:	4a76      	ldr	r2, [pc, #472]	@ (8003820 <HAL_SPI_MspInit+0x220>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6313      	str	r3, [r2, #48]	@ 0x30
 800364e:	4b74      	ldr	r3, [pc, #464]	@ (8003820 <HAL_SPI_MspInit+0x220>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800365a:	23a0      	movs	r3, #160	@ 0xa0
 800365c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365e:	2302      	movs	r3, #2
 8003660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003662:	2300      	movs	r3, #0
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003666:	2303      	movs	r3, #3
 8003668:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800366a:	2305      	movs	r3, #5
 800366c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366e:	f107 031c 	add.w	r3, r7, #28
 8003672:	4619      	mov	r1, r3
 8003674:	486b      	ldr	r0, [pc, #428]	@ (8003824 <HAL_SPI_MspInit+0x224>)
 8003676:	f001 fd0d 	bl	8005094 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800367a:	4b6b      	ldr	r3, [pc, #428]	@ (8003828 <HAL_SPI_MspInit+0x228>)
 800367c:	4a6b      	ldr	r2, [pc, #428]	@ (800382c <HAL_SPI_MspInit+0x22c>)
 800367e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003680:	4b69      	ldr	r3, [pc, #420]	@ (8003828 <HAL_SPI_MspInit+0x228>)
 8003682:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003686:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003688:	4b67      	ldr	r3, [pc, #412]	@ (8003828 <HAL_SPI_MspInit+0x228>)
 800368a:	2240      	movs	r2, #64	@ 0x40
 800368c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800368e:	4b66      	ldr	r3, [pc, #408]	@ (8003828 <HAL_SPI_MspInit+0x228>)
 8003690:	2200      	movs	r2, #0
 8003692:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003694:	4b64      	ldr	r3, [pc, #400]	@ (8003828 <HAL_SPI_MspInit+0x228>)
 8003696:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800369a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800369c:	4b62      	ldr	r3, [pc, #392]	@ (8003828 <HAL_SPI_MspInit+0x228>)
 800369e:	2200      	movs	r2, #0
 80036a0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036a2:	4b61      	ldr	r3, [pc, #388]	@ (8003828 <HAL_SPI_MspInit+0x228>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80036a8:	4b5f      	ldr	r3, [pc, #380]	@ (8003828 <HAL_SPI_MspInit+0x228>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036ae:	4b5e      	ldr	r3, [pc, #376]	@ (8003828 <HAL_SPI_MspInit+0x228>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036b4:	4b5c      	ldr	r3, [pc, #368]	@ (8003828 <HAL_SPI_MspInit+0x228>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80036ba:	485b      	ldr	r0, [pc, #364]	@ (8003828 <HAL_SPI_MspInit+0x228>)
 80036bc:	f001 f93e 	bl	800493c <HAL_DMA_Init>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80036c6:	f7fe fce8 	bl	800209a <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a56      	ldr	r2, [pc, #344]	@ (8003828 <HAL_SPI_MspInit+0x228>)
 80036ce:	649a      	str	r2, [r3, #72]	@ 0x48
 80036d0:	4a55      	ldr	r2, [pc, #340]	@ (8003828 <HAL_SPI_MspInit+0x228>)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80036d6:	2200      	movs	r2, #0
 80036d8:	2100      	movs	r1, #0
 80036da:	2023      	movs	r0, #35	@ 0x23
 80036dc:	f001 f8f7 	bl	80048ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80036e0:	2023      	movs	r0, #35	@ 0x23
 80036e2:	f001 f910 	bl	8004906 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80036e6:	e094      	b.n	8003812 <HAL_SPI_MspInit+0x212>
  else if(spiHandle->Instance==SPI2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a50      	ldr	r2, [pc, #320]	@ (8003830 <HAL_SPI_MspInit+0x230>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	f040 808f 	bne.w	8003812 <HAL_SPI_MspInit+0x212>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	4b49      	ldr	r3, [pc, #292]	@ (8003820 <HAL_SPI_MspInit+0x220>)
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	4a48      	ldr	r2, [pc, #288]	@ (8003820 <HAL_SPI_MspInit+0x220>)
 80036fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003702:	6413      	str	r3, [r2, #64]	@ 0x40
 8003704:	4b46      	ldr	r3, [pc, #280]	@ (8003820 <HAL_SPI_MspInit+0x220>)
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	4b42      	ldr	r3, [pc, #264]	@ (8003820 <HAL_SPI_MspInit+0x220>)
 8003716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003718:	4a41      	ldr	r2, [pc, #260]	@ (8003820 <HAL_SPI_MspInit+0x220>)
 800371a:	f043 0302 	orr.w	r3, r3, #2
 800371e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003720:	4b3f      	ldr	r3, [pc, #252]	@ (8003820 <HAL_SPI_MspInit+0x220>)
 8003722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800372c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003732:	2302      	movs	r3, #2
 8003734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373a:	2303      	movs	r3, #3
 800373c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800373e:	2305      	movs	r3, #5
 8003740:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003742:	f107 031c 	add.w	r3, r7, #28
 8003746:	4619      	mov	r1, r3
 8003748:	483a      	ldr	r0, [pc, #232]	@ (8003834 <HAL_SPI_MspInit+0x234>)
 800374a:	f001 fca3 	bl	8005094 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800374e:	4b3a      	ldr	r3, [pc, #232]	@ (8003838 <HAL_SPI_MspInit+0x238>)
 8003750:	4a3a      	ldr	r2, [pc, #232]	@ (800383c <HAL_SPI_MspInit+0x23c>)
 8003752:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003754:	4b38      	ldr	r3, [pc, #224]	@ (8003838 <HAL_SPI_MspInit+0x238>)
 8003756:	2200      	movs	r2, #0
 8003758:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800375a:	4b37      	ldr	r3, [pc, #220]	@ (8003838 <HAL_SPI_MspInit+0x238>)
 800375c:	2200      	movs	r2, #0
 800375e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003760:	4b35      	ldr	r3, [pc, #212]	@ (8003838 <HAL_SPI_MspInit+0x238>)
 8003762:	2200      	movs	r2, #0
 8003764:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003766:	4b34      	ldr	r3, [pc, #208]	@ (8003838 <HAL_SPI_MspInit+0x238>)
 8003768:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800376c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800376e:	4b32      	ldr	r3, [pc, #200]	@ (8003838 <HAL_SPI_MspInit+0x238>)
 8003770:	2200      	movs	r2, #0
 8003772:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003774:	4b30      	ldr	r3, [pc, #192]	@ (8003838 <HAL_SPI_MspInit+0x238>)
 8003776:	2200      	movs	r2, #0
 8003778:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800377a:	4b2f      	ldr	r3, [pc, #188]	@ (8003838 <HAL_SPI_MspInit+0x238>)
 800377c:	2200      	movs	r2, #0
 800377e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003780:	4b2d      	ldr	r3, [pc, #180]	@ (8003838 <HAL_SPI_MspInit+0x238>)
 8003782:	2200      	movs	r2, #0
 8003784:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003786:	4b2c      	ldr	r3, [pc, #176]	@ (8003838 <HAL_SPI_MspInit+0x238>)
 8003788:	2200      	movs	r2, #0
 800378a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800378c:	482a      	ldr	r0, [pc, #168]	@ (8003838 <HAL_SPI_MspInit+0x238>)
 800378e:	f001 f8d5 	bl	800493c <HAL_DMA_Init>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_SPI_MspInit+0x19c>
      Error_Handler();
 8003798:	f7fe fc7f 	bl	800209a <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a26      	ldr	r2, [pc, #152]	@ (8003838 <HAL_SPI_MspInit+0x238>)
 80037a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80037a2:	4a25      	ldr	r2, [pc, #148]	@ (8003838 <HAL_SPI_MspInit+0x238>)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80037a8:	4b25      	ldr	r3, [pc, #148]	@ (8003840 <HAL_SPI_MspInit+0x240>)
 80037aa:	4a26      	ldr	r2, [pc, #152]	@ (8003844 <HAL_SPI_MspInit+0x244>)
 80037ac:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80037ae:	4b24      	ldr	r3, [pc, #144]	@ (8003840 <HAL_SPI_MspInit+0x240>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037b4:	4b22      	ldr	r3, [pc, #136]	@ (8003840 <HAL_SPI_MspInit+0x240>)
 80037b6:	2240      	movs	r2, #64	@ 0x40
 80037b8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037ba:	4b21      	ldr	r3, [pc, #132]	@ (8003840 <HAL_SPI_MspInit+0x240>)
 80037bc:	2200      	movs	r2, #0
 80037be:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003840 <HAL_SPI_MspInit+0x240>)
 80037c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037c6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003840 <HAL_SPI_MspInit+0x240>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003840 <HAL_SPI_MspInit+0x240>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80037d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003840 <HAL_SPI_MspInit+0x240>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037da:	4b19      	ldr	r3, [pc, #100]	@ (8003840 <HAL_SPI_MspInit+0x240>)
 80037dc:	2200      	movs	r2, #0
 80037de:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037e0:	4b17      	ldr	r3, [pc, #92]	@ (8003840 <HAL_SPI_MspInit+0x240>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80037e6:	4816      	ldr	r0, [pc, #88]	@ (8003840 <HAL_SPI_MspInit+0x240>)
 80037e8:	f001 f8a8 	bl	800493c <HAL_DMA_Init>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_SPI_MspInit+0x1f6>
      Error_Handler();
 80037f2:	f7fe fc52 	bl	800209a <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a11      	ldr	r2, [pc, #68]	@ (8003840 <HAL_SPI_MspInit+0x240>)
 80037fa:	649a      	str	r2, [r3, #72]	@ 0x48
 80037fc:	4a10      	ldr	r2, [pc, #64]	@ (8003840 <HAL_SPI_MspInit+0x240>)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003802:	2200      	movs	r2, #0
 8003804:	2100      	movs	r1, #0
 8003806:	2024      	movs	r0, #36	@ 0x24
 8003808:	f001 f861 	bl	80048ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800380c:	2024      	movs	r0, #36	@ 0x24
 800380e:	f001 f87a 	bl	8004906 <HAL_NVIC_EnableIRQ>
}
 8003812:	bf00      	nop
 8003814:	3730      	adds	r7, #48	@ 0x30
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40013000 	.word	0x40013000
 8003820:	40023800 	.word	0x40023800
 8003824:	40020000 	.word	0x40020000
 8003828:	200007b8 	.word	0x200007b8
 800382c:	40026458 	.word	0x40026458
 8003830:	40003800 	.word	0x40003800
 8003834:	40020400 	.word	0x40020400
 8003838:	20000818 	.word	0x20000818
 800383c:	40026058 	.word	0x40026058
 8003840:	20000878 	.word	0x20000878
 8003844:	40026070 	.word	0x40026070

08003848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	4b10      	ldr	r3, [pc, #64]	@ (8003894 <HAL_MspInit+0x4c>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003856:	4a0f      	ldr	r2, [pc, #60]	@ (8003894 <HAL_MspInit+0x4c>)
 8003858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800385c:	6453      	str	r3, [r2, #68]	@ 0x44
 800385e:	4b0d      	ldr	r3, [pc, #52]	@ (8003894 <HAL_MspInit+0x4c>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003866:	607b      	str	r3, [r7, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	4b09      	ldr	r3, [pc, #36]	@ (8003894 <HAL_MspInit+0x4c>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	4a08      	ldr	r2, [pc, #32]	@ (8003894 <HAL_MspInit+0x4c>)
 8003874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003878:	6413      	str	r3, [r2, #64]	@ 0x40
 800387a:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <HAL_MspInit+0x4c>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800

08003898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800389c:	bf00      	nop
 800389e:	e7fd      	b.n	800389c <NMI_Handler+0x4>

080038a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038a4:	bf00      	nop
 80038a6:	e7fd      	b.n	80038a4 <HardFault_Handler+0x4>

080038a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038ac:	bf00      	nop
 80038ae:	e7fd      	b.n	80038ac <MemManage_Handler+0x4>

080038b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038b4:	bf00      	nop
 80038b6:	e7fd      	b.n	80038b4 <BusFault_Handler+0x4>

080038b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038bc:	bf00      	nop
 80038be:	e7fd      	b.n	80038bc <UsageFault_Handler+0x4>

080038c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038ce:	b480      	push	{r7}
 80038d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038d2:	bf00      	nop
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038e0:	bf00      	nop
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038ee:	f000 fbb9 	bl	8004064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80038fc:	4802      	ldr	r0, [pc, #8]	@ (8003908 <DMA1_Stream2_IRQHandler+0x10>)
 80038fe:	f001 f945 	bl	8004b8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	200005a8 	.word	0x200005a8

0800390c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003910:	4802      	ldr	r0, [pc, #8]	@ (800391c <DMA1_Stream3_IRQHandler+0x10>)
 8003912:	f001 f93b 	bl	8004b8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20000818 	.word	0x20000818

08003920 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003924:	4802      	ldr	r0, [pc, #8]	@ (8003930 <DMA1_Stream4_IRQHandler+0x10>)
 8003926:	f001 f931 	bl	8004b8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000878 	.word	0x20000878

08003934 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003938:	4802      	ldr	r0, [pc, #8]	@ (8003944 <TIM4_IRQHandler+0x10>)
 800393a:	f006 f969 	bl	8009c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000920 	.word	0x20000920

08003948 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800394c:	4802      	ldr	r0, [pc, #8]	@ (8003958 <I2C2_EV_IRQHandler+0x10>)
 800394e:	f002 fa07 	bl	8005d60 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000554 	.word	0x20000554

0800395c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003960:	4802      	ldr	r0, [pc, #8]	@ (800396c <I2C2_ER_IRQHandler+0x10>)
 8003962:	f002 fb50 	bl	8006006 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000554 	.word	0x20000554

08003970 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003974:	4802      	ldr	r0, [pc, #8]	@ (8003980 <SPI1_IRQHandler+0x10>)
 8003976:	f005 fbc1 	bl	80090fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000708 	.word	0x20000708

08003984 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003988:	4802      	ldr	r0, [pc, #8]	@ (8003994 <SPI2_IRQHandler+0x10>)
 800398a:	f005 fbb7 	bl	80090fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000760 	.word	0x20000760

08003998 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800399c:	4802      	ldr	r0, [pc, #8]	@ (80039a8 <DMA1_Stream7_IRQHandler+0x10>)
 800399e:	f001 f8f5 	bl	8004b8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000608 	.word	0x20000608

080039ac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80039b0:	4802      	ldr	r0, [pc, #8]	@ (80039bc <TIM5_IRQHandler+0x10>)
 80039b2:	f006 f92d 	bl	8009c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000968 	.word	0x20000968

080039c0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80039c4:	4802      	ldr	r0, [pc, #8]	@ (80039d0 <DMA2_Stream2_IRQHandler+0x10>)
 80039c6:	f001 f8e1 	bl	8004b8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200009f8 	.word	0x200009f8

080039d4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80039d8:	4802      	ldr	r0, [pc, #8]	@ (80039e4 <DMA2_Stream3_IRQHandler+0x10>)
 80039da:	f001 f8d7 	bl	8004b8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	200007b8 	.word	0x200007b8

080039e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039ec:	4b06      	ldr	r3, [pc, #24]	@ (8003a08 <SystemInit+0x20>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f2:	4a05      	ldr	r2, [pc, #20]	@ (8003a08 <SystemInit+0x20>)
 80039f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b096      	sub	sp, #88	@ 0x58
 8003a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a12:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
 8003a1c:	609a      	str	r2, [r3, #8]
 8003a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a20:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	609a      	str	r2, [r3, #8]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	611a      	str	r2, [r3, #16]
 8003a3a:	615a      	str	r2, [r3, #20]
 8003a3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a3e:	1d3b      	adds	r3, r7, #4
 8003a40:	2220      	movs	r2, #32
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f007 fc5f 	bl	800b308 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a4a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b44 <MX_TIM1_Init+0x138>)
 8003a4c:	4a3e      	ldr	r2, [pc, #248]	@ (8003b48 <MX_TIM1_Init+0x13c>)
 8003a4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 8003a50:	4b3c      	ldr	r3, [pc, #240]	@ (8003b44 <MX_TIM1_Init+0x138>)
 8003a52:	2218      	movs	r2, #24
 8003a54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a56:	4b3b      	ldr	r3, [pc, #236]	@ (8003b44 <MX_TIM1_Init+0x138>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8003a5c:	4b39      	ldr	r3, [pc, #228]	@ (8003b44 <MX_TIM1_Init+0x138>)
 8003a5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003a62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a64:	4b37      	ldr	r3, [pc, #220]	@ (8003b44 <MX_TIM1_Init+0x138>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a6a:	4b36      	ldr	r3, [pc, #216]	@ (8003b44 <MX_TIM1_Init+0x138>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a70:	4b34      	ldr	r3, [pc, #208]	@ (8003b44 <MX_TIM1_Init+0x138>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003a76:	4833      	ldr	r0, [pc, #204]	@ (8003b44 <MX_TIM1_Init+0x138>)
 8003a78:	f005 fdba 	bl	80095f0 <HAL_TIM_Base_Init>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003a82:	f7fe fb0a 	bl	800209a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003a8c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003a90:	4619      	mov	r1, r3
 8003a92:	482c      	ldr	r0, [pc, #176]	@ (8003b44 <MX_TIM1_Init+0x138>)
 8003a94:	f006 fa6e 	bl	8009f74 <HAL_TIM_ConfigClockSource>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003a9e:	f7fe fafc 	bl	800209a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003aa2:	4828      	ldr	r0, [pc, #160]	@ (8003b44 <MX_TIM1_Init+0x138>)
 8003aa4:	f005 fe56 	bl	8009754 <HAL_TIM_PWM_Init>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003aae:	f7fe faf4 	bl	800209a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003aba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4820      	ldr	r0, [pc, #128]	@ (8003b44 <MX_TIM1_Init+0x138>)
 8003ac2:	f006 fe15 	bl	800a6f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003acc:	f7fe fae5 	bl	800209a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ad0:	2360      	movs	r3, #96	@ 0x60
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003adc:	2300      	movs	r3, #0
 8003ade:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003af0:	2200      	movs	r2, #0
 8003af2:	4619      	mov	r1, r3
 8003af4:	4813      	ldr	r0, [pc, #76]	@ (8003b44 <MX_TIM1_Init+0x138>)
 8003af6:	f006 f97b 	bl	8009df0 <HAL_TIM_PWM_ConfigChannel>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003b00:	f7fe facb 	bl	800209a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b04:	2300      	movs	r3, #0
 8003b06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b22:	1d3b      	adds	r3, r7, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	4807      	ldr	r0, [pc, #28]	@ (8003b44 <MX_TIM1_Init+0x138>)
 8003b28:	f006 fe50 	bl	800a7cc <HAL_TIMEx_ConfigBreakDeadTime>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003b32:	f7fe fab2 	bl	800209a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003b36:	4803      	ldr	r0, [pc, #12]	@ (8003b44 <MX_TIM1_Init+0x138>)
 8003b38:	f000 f938 	bl	8003dac <HAL_TIM_MspPostInit>

}
 8003b3c:	bf00      	nop
 8003b3e:	3758      	adds	r7, #88	@ 0x58
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	200008d8 	.word	0x200008d8
 8003b48:	40010000 	.word	0x40010000

08003b4c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08c      	sub	sp, #48	@ 0x30
 8003b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b52:	f107 030c 	add.w	r3, r7, #12
 8003b56:	2224      	movs	r2, #36	@ 0x24
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f007 fbd4 	bl	800b308 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b60:	1d3b      	adds	r3, r7, #4
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b68:	4b20      	ldr	r3, [pc, #128]	@ (8003bec <MX_TIM4_Init+0xa0>)
 8003b6a:	4a21      	ldr	r2, [pc, #132]	@ (8003bf0 <MX_TIM4_Init+0xa4>)
 8003b6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8003bec <MX_TIM4_Init+0xa0>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b74:	4b1d      	ldr	r3, [pc, #116]	@ (8003bec <MX_TIM4_Init+0xa0>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bec <MX_TIM4_Init+0xa0>)
 8003b7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b80:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b82:	4b1a      	ldr	r3, [pc, #104]	@ (8003bec <MX_TIM4_Init+0xa0>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b88:	4b18      	ldr	r3, [pc, #96]	@ (8003bec <MX_TIM4_Init+0xa0>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b92:	2300      	movs	r3, #0
 8003b94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b96:	2301      	movs	r3, #1
 8003b98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003baa:	2300      	movs	r3, #0
 8003bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003bb2:	f107 030c 	add.w	r3, r7, #12
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	480c      	ldr	r0, [pc, #48]	@ (8003bec <MX_TIM4_Init+0xa0>)
 8003bba:	f005 fed5 	bl	8009968 <HAL_TIM_Encoder_Init>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003bc4:	f7fe fa69 	bl	800209a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003bd0:	1d3b      	adds	r3, r7, #4
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4805      	ldr	r0, [pc, #20]	@ (8003bec <MX_TIM4_Init+0xa0>)
 8003bd6:	f006 fd8b 	bl	800a6f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003be0:	f7fe fa5b 	bl	800209a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003be4:	bf00      	nop
 8003be6:	3730      	adds	r7, #48	@ 0x30
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000920 	.word	0x20000920
 8003bf0:	40000800 	.word	0x40000800

08003bf4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bfa:	f107 0308 	add.w	r3, r7, #8
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	609a      	str	r2, [r3, #8]
 8003c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c08:	463b      	mov	r3, r7
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003c10:	4b1d      	ldr	r3, [pc, #116]	@ (8003c88 <MX_TIM5_Init+0x94>)
 8003c12:	4a1e      	ldr	r2, [pc, #120]	@ (8003c8c <MX_TIM5_Init+0x98>)
 8003c14:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 24999;
 8003c16:	4b1c      	ldr	r3, [pc, #112]	@ (8003c88 <MX_TIM5_Init+0x94>)
 8003c18:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8003c1c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003c88 <MX_TIM5_Init+0x94>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9;
 8003c24:	4b18      	ldr	r3, [pc, #96]	@ (8003c88 <MX_TIM5_Init+0x94>)
 8003c26:	2209      	movs	r2, #9
 8003c28:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c2a:	4b17      	ldr	r3, [pc, #92]	@ (8003c88 <MX_TIM5_Init+0x94>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c30:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <MX_TIM5_Init+0x94>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003c36:	4814      	ldr	r0, [pc, #80]	@ (8003c88 <MX_TIM5_Init+0x94>)
 8003c38:	f005 fcda 	bl	80095f0 <HAL_TIM_Base_Init>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003c42:	f7fe fa2a 	bl	800209a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003c4c:	f107 0308 	add.w	r3, r7, #8
 8003c50:	4619      	mov	r1, r3
 8003c52:	480d      	ldr	r0, [pc, #52]	@ (8003c88 <MX_TIM5_Init+0x94>)
 8003c54:	f006 f98e 	bl	8009f74 <HAL_TIM_ConfigClockSource>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003c5e:	f7fe fa1c 	bl	800209a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c62:	2300      	movs	r3, #0
 8003c64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003c6a:	463b      	mov	r3, r7
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4806      	ldr	r0, [pc, #24]	@ (8003c88 <MX_TIM5_Init+0x94>)
 8003c70:	f006 fd3e 	bl	800a6f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003c7a:	f7fe fa0e 	bl	800209a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003c7e:	bf00      	nop
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000968 	.word	0x20000968
 8003c8c:	40000c00 	.word	0x40000c00

08003c90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a18      	ldr	r2, [pc, #96]	@ (8003d00 <HAL_TIM_Base_MspInit+0x70>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d10e      	bne.n	8003cc0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	4b17      	ldr	r3, [pc, #92]	@ (8003d04 <HAL_TIM_Base_MspInit+0x74>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	4a16      	ldr	r2, [pc, #88]	@ (8003d04 <HAL_TIM_Base_MspInit+0x74>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cb2:	4b14      	ldr	r3, [pc, #80]	@ (8003d04 <HAL_TIM_Base_MspInit+0x74>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003cbe:	e01a      	b.n	8003cf6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a10      	ldr	r2, [pc, #64]	@ (8003d08 <HAL_TIM_Base_MspInit+0x78>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d115      	bne.n	8003cf6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	4b0d      	ldr	r3, [pc, #52]	@ (8003d04 <HAL_TIM_Base_MspInit+0x74>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003d04 <HAL_TIM_Base_MspInit+0x74>)
 8003cd4:	f043 0308 	orr.w	r3, r3, #8
 8003cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cda:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <HAL_TIM_Base_MspInit+0x74>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2100      	movs	r1, #0
 8003cea:	2032      	movs	r0, #50	@ 0x32
 8003cec:	f000 fdef 	bl	80048ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003cf0:	2032      	movs	r0, #50	@ 0x32
 8003cf2:	f000 fe08 	bl	8004906 <HAL_NVIC_EnableIRQ>
}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40010000 	.word	0x40010000
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40000c00 	.word	0x40000c00

08003d0c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	@ 0x28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d14:	f107 0314 	add.w	r3, r7, #20
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a1d      	ldr	r2, [pc, #116]	@ (8003da0 <HAL_TIM_Encoder_MspInit+0x94>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d133      	bne.n	8003d96 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	4b1c      	ldr	r3, [pc, #112]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x98>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d36:	4a1b      	ldr	r2, [pc, #108]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x98>)
 8003d38:	f043 0304 	orr.w	r3, r3, #4
 8003d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d3e:	4b19      	ldr	r3, [pc, #100]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x98>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	4b15      	ldr	r3, [pc, #84]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x98>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d52:	4a14      	ldr	r2, [pc, #80]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x98>)
 8003d54:	f043 0302 	orr.w	r3, r3, #2
 8003d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d5a:	4b12      	ldr	r3, [pc, #72]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x98>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d66:	23c0      	movs	r3, #192	@ 0xc0
 8003d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d72:	2300      	movs	r3, #0
 8003d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d76:	2302      	movs	r3, #2
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7a:	f107 0314 	add.w	r3, r7, #20
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4809      	ldr	r0, [pc, #36]	@ (8003da8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8003d82:	f001 f987 	bl	8005094 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003d86:	2200      	movs	r2, #0
 8003d88:	2100      	movs	r1, #0
 8003d8a:	201e      	movs	r0, #30
 8003d8c:	f000 fd9f 	bl	80048ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003d90:	201e      	movs	r0, #30
 8003d92:	f000 fdb8 	bl	8004906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003d96:	bf00      	nop
 8003d98:	3728      	adds	r7, #40	@ 0x28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40000800 	.word	0x40000800
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40020400 	.word	0x40020400

08003dac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db4:	f107 030c 	add.w	r3, r7, #12
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
 8003dc2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a12      	ldr	r2, [pc, #72]	@ (8003e14 <HAL_TIM_MspPostInit+0x68>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d11e      	bne.n	8003e0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	4b11      	ldr	r3, [pc, #68]	@ (8003e18 <HAL_TIM_MspPostInit+0x6c>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	4a10      	ldr	r2, [pc, #64]	@ (8003e18 <HAL_TIM_MspPostInit+0x6c>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dde:	4b0e      	ldr	r3, [pc, #56]	@ (8003e18 <HAL_TIM_MspPostInit+0x6c>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003dea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003dee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df0:	2302      	movs	r3, #2
 8003df2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e00:	f107 030c 	add.w	r3, r7, #12
 8003e04:	4619      	mov	r1, r3
 8003e06:	4805      	ldr	r0, [pc, #20]	@ (8003e1c <HAL_TIM_MspPostInit+0x70>)
 8003e08:	f001 f944 	bl	8005094 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003e0c:	bf00      	nop
 8003e0e:	3720      	adds	r7, #32
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40010000 	.word	0x40010000
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40020000 	.word	0x40020000

08003e20 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e24:	4b11      	ldr	r3, [pc, #68]	@ (8003e6c <MX_USART1_UART_Init+0x4c>)
 8003e26:	4a12      	ldr	r2, [pc, #72]	@ (8003e70 <MX_USART1_UART_Init+0x50>)
 8003e28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003e2a:	4b10      	ldr	r3, [pc, #64]	@ (8003e6c <MX_USART1_UART_Init+0x4c>)
 8003e2c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003e30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e32:	4b0e      	ldr	r3, [pc, #56]	@ (8003e6c <MX_USART1_UART_Init+0x4c>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e38:	4b0c      	ldr	r3, [pc, #48]	@ (8003e6c <MX_USART1_UART_Init+0x4c>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e6c <MX_USART1_UART_Init+0x4c>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e44:	4b09      	ldr	r3, [pc, #36]	@ (8003e6c <MX_USART1_UART_Init+0x4c>)
 8003e46:	220c      	movs	r2, #12
 8003e48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e4a:	4b08      	ldr	r3, [pc, #32]	@ (8003e6c <MX_USART1_UART_Init+0x4c>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e50:	4b06      	ldr	r3, [pc, #24]	@ (8003e6c <MX_USART1_UART_Init+0x4c>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e56:	4805      	ldr	r0, [pc, #20]	@ (8003e6c <MX_USART1_UART_Init+0x4c>)
 8003e58:	f006 fd1e 	bl	800a898 <HAL_UART_Init>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003e62:	f7fe f91a 	bl	800209a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	200009b0 	.word	0x200009b0
 8003e70:	40011000 	.word	0x40011000

08003e74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	@ 0x28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e7c:	f107 0314 	add.w	r3, r7, #20
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a31      	ldr	r2, [pc, #196]	@ (8003f58 <HAL_UART_MspInit+0xe4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d15b      	bne.n	8003f4e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	4b30      	ldr	r3, [pc, #192]	@ (8003f5c <HAL_UART_MspInit+0xe8>)
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	4a2f      	ldr	r2, [pc, #188]	@ (8003f5c <HAL_UART_MspInit+0xe8>)
 8003ea0:	f043 0310 	orr.w	r3, r3, #16
 8003ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8003f5c <HAL_UART_MspInit+0xe8>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	4b29      	ldr	r3, [pc, #164]	@ (8003f5c <HAL_UART_MspInit+0xe8>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eba:	4a28      	ldr	r2, [pc, #160]	@ (8003f5c <HAL_UART_MspInit+0xe8>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ec2:	4b26      	ldr	r3, [pc, #152]	@ (8003f5c <HAL_UART_MspInit+0xe8>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ece:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003edc:	2303      	movs	r3, #3
 8003ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ee0:	2307      	movs	r3, #7
 8003ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee4:	f107 0314 	add.w	r3, r7, #20
 8003ee8:	4619      	mov	r1, r3
 8003eea:	481d      	ldr	r0, [pc, #116]	@ (8003f60 <HAL_UART_MspInit+0xec>)
 8003eec:	f001 f8d2 	bl	8005094 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f64 <HAL_UART_MspInit+0xf0>)
 8003ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f68 <HAL_UART_MspInit+0xf4>)
 8003ef4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f64 <HAL_UART_MspInit+0xf0>)
 8003ef8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003efc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003efe:	4b19      	ldr	r3, [pc, #100]	@ (8003f64 <HAL_UART_MspInit+0xf0>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f04:	4b17      	ldr	r3, [pc, #92]	@ (8003f64 <HAL_UART_MspInit+0xf0>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f0a:	4b16      	ldr	r3, [pc, #88]	@ (8003f64 <HAL_UART_MspInit+0xf0>)
 8003f0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f10:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f12:	4b14      	ldr	r3, [pc, #80]	@ (8003f64 <HAL_UART_MspInit+0xf0>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f18:	4b12      	ldr	r3, [pc, #72]	@ (8003f64 <HAL_UART_MspInit+0xf0>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003f1e:	4b11      	ldr	r3, [pc, #68]	@ (8003f64 <HAL_UART_MspInit+0xf0>)
 8003f20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f24:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f26:	4b0f      	ldr	r3, [pc, #60]	@ (8003f64 <HAL_UART_MspInit+0xf0>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f64 <HAL_UART_MspInit+0xf0>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003f32:	480c      	ldr	r0, [pc, #48]	@ (8003f64 <HAL_UART_MspInit+0xf0>)
 8003f34:	f000 fd02 	bl	800493c <HAL_DMA_Init>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003f3e:	f7fe f8ac 	bl	800209a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a07      	ldr	r2, [pc, #28]	@ (8003f64 <HAL_UART_MspInit+0xf0>)
 8003f46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f48:	4a06      	ldr	r2, [pc, #24]	@ (8003f64 <HAL_UART_MspInit+0xf0>)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003f4e:	bf00      	nop
 8003f50:	3728      	adds	r7, #40	@ 0x28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40011000 	.word	0x40011000
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	40020000 	.word	0x40020000
 8003f64:	200009f8 	.word	0x200009f8
 8003f68:	40026440 	.word	0x40026440

08003f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003fa4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003f70:	f7ff fd3a 	bl	80039e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f74:	480c      	ldr	r0, [pc, #48]	@ (8003fa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f76:	490d      	ldr	r1, [pc, #52]	@ (8003fac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f78:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f7c:	e002      	b.n	8003f84 <LoopCopyDataInit>

08003f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f82:	3304      	adds	r3, #4

08003f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f88:	d3f9      	bcc.n	8003f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f8c:	4c0a      	ldr	r4, [pc, #40]	@ (8003fb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f90:	e001      	b.n	8003f96 <LoopFillZerobss>

08003f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f94:	3204      	adds	r2, #4

08003f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f98:	d3fb      	bcc.n	8003f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f9a:	f007 f9e3 	bl	800b364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f9e:	f7fd fee5 	bl	8001d6c <main>
  bx  lr    
 8003fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003fa4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fac:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8003fb0:	0800b4d8 	.word	0x0800b4d8
  ldr r2, =_sbss
 8003fb4:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8003fb8:	20000a5c 	.word	0x20000a5c

08003fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fbc:	e7fe      	b.n	8003fbc <ADC_IRQHandler>
	...

08003fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8004000 <HAL_Init+0x40>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8004000 <HAL_Init+0x40>)
 8003fca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <HAL_Init+0x40>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8004000 <HAL_Init+0x40>)
 8003fd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fdc:	4b08      	ldr	r3, [pc, #32]	@ (8004000 <HAL_Init+0x40>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a07      	ldr	r2, [pc, #28]	@ (8004000 <HAL_Init+0x40>)
 8003fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fe8:	2003      	movs	r0, #3
 8003fea:	f000 fc65 	bl	80048b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fee:	200f      	movs	r0, #15
 8003ff0:	f000 f808 	bl	8004004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ff4:	f7ff fc28 	bl	8003848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40023c00 	.word	0x40023c00

08004004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800400c:	4b12      	ldr	r3, [pc, #72]	@ (8004058 <HAL_InitTick+0x54>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4b12      	ldr	r3, [pc, #72]	@ (800405c <HAL_InitTick+0x58>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	4619      	mov	r1, r3
 8004016:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800401a:	fbb3 f3f1 	udiv	r3, r3, r1
 800401e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fc7d 	bl	8004922 <HAL_SYSTICK_Config>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e00e      	b.n	8004050 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b0f      	cmp	r3, #15
 8004036:	d80a      	bhi.n	800404e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004038:	2200      	movs	r2, #0
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	f04f 30ff 	mov.w	r0, #4294967295
 8004040:	f000 fc45 	bl	80048ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004044:	4a06      	ldr	r2, [pc, #24]	@ (8004060 <HAL_InitTick+0x5c>)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	e000      	b.n	8004050 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
}
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000030 	.word	0x20000030
 800405c:	20000038 	.word	0x20000038
 8004060:	20000034 	.word	0x20000034

08004064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004068:	4b06      	ldr	r3, [pc, #24]	@ (8004084 <HAL_IncTick+0x20>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	4b06      	ldr	r3, [pc, #24]	@ (8004088 <HAL_IncTick+0x24>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4413      	add	r3, r2
 8004074:	4a04      	ldr	r2, [pc, #16]	@ (8004088 <HAL_IncTick+0x24>)
 8004076:	6013      	str	r3, [r2, #0]
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000038 	.word	0x20000038
 8004088:	20000a58 	.word	0x20000a58

0800408c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  return uwTick;
 8004090:	4b03      	ldr	r3, [pc, #12]	@ (80040a0 <HAL_GetTick+0x14>)
 8004092:	681b      	ldr	r3, [r3, #0]
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	20000a58 	.word	0x20000a58

080040a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040ac:	f7ff ffee 	bl	800408c <HAL_GetTick>
 80040b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d005      	beq.n	80040ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040be:	4b0a      	ldr	r3, [pc, #40]	@ (80040e8 <HAL_Delay+0x44>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040ca:	bf00      	nop
 80040cc:	f7ff ffde 	bl	800408c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d8f7      	bhi.n	80040cc <HAL_Delay+0x28>
  {
  }
}
 80040dc:	bf00      	nop
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000038 	.word	0x20000038

080040ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e033      	b.n	800416a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fc fa2c 	bl	8000568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	f003 0310 	and.w	r3, r3, #16
 8004126:	2b00      	cmp	r3, #0
 8004128:	d118      	bne.n	800415c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004132:	f023 0302 	bic.w	r3, r3, #2
 8004136:	f043 0202 	orr.w	r2, r3, #2
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f9ee 	bl	8004520 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	f023 0303 	bic.w	r3, r3, #3
 8004152:	f043 0201 	orr.w	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	641a      	str	r2, [r3, #64]	@ 0x40
 800415a:	e001      	b.n	8004160 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_ADC_Start+0x1a>
 800418a:	2302      	movs	r3, #2
 800418c:	e097      	b.n	80042be <HAL_ADC_Start+0x14a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d018      	beq.n	80041d6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80041b4:	4b45      	ldr	r3, [pc, #276]	@ (80042cc <HAL_ADC_Start+0x158>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a45      	ldr	r2, [pc, #276]	@ (80042d0 <HAL_ADC_Start+0x15c>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	0c9a      	lsrs	r2, r3, #18
 80041c0:	4613      	mov	r3, r2
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	4413      	add	r3, r2
 80041c6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80041c8:	e002      	b.n	80041d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f9      	bne.n	80041ca <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d15f      	bne.n	80042a4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004202:	2b00      	cmp	r3, #0
 8004204:	d007      	beq.n	8004216 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800420e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800421e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004222:	d106      	bne.n	8004232 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004228:	f023 0206 	bic.w	r2, r3, #6
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004230:	e002      	b.n	8004238 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004240:	4b24      	ldr	r3, [pc, #144]	@ (80042d4 <HAL_ADC_Start+0x160>)
 8004242:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800424c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10f      	bne.n	800427a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d129      	bne.n	80042bc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004276:	609a      	str	r2, [r3, #8]
 8004278:	e020      	b.n	80042bc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a16      	ldr	r2, [pc, #88]	@ (80042d8 <HAL_ADC_Start+0x164>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d11b      	bne.n	80042bc <HAL_ADC_Start+0x148>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d114      	bne.n	80042bc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80042a0:	609a      	str	r2, [r3, #8]
 80042a2:	e00b      	b.n	80042bc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a8:	f043 0210 	orr.w	r2, r3, #16
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b4:	f043 0201 	orr.w	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000030 	.word	0x20000030
 80042d0:	431bde83 	.word	0x431bde83
 80042d4:	40012300 	.word	0x40012300
 80042d8:	40012000 	.word	0x40012000

080042dc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x1c>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e105      	b.n	8004504 <HAL_ADC_ConfigChannel+0x228>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b09      	cmp	r3, #9
 8004306:	d925      	bls.n	8004354 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68d9      	ldr	r1, [r3, #12]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	4613      	mov	r3, r2
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	4413      	add	r3, r2
 800431c:	3b1e      	subs	r3, #30
 800431e:	2207      	movs	r2, #7
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43da      	mvns	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	400a      	ands	r2, r1
 800432c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68d9      	ldr	r1, [r3, #12]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	4618      	mov	r0, r3
 8004340:	4603      	mov	r3, r0
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4403      	add	r3, r0
 8004346:	3b1e      	subs	r3, #30
 8004348:	409a      	lsls	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	e022      	b.n	800439a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6919      	ldr	r1, [r3, #16]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	461a      	mov	r2, r3
 8004362:	4613      	mov	r3, r2
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4413      	add	r3, r2
 8004368:	2207      	movs	r2, #7
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43da      	mvns	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	400a      	ands	r2, r1
 8004376:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6919      	ldr	r1, [r3, #16]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	4618      	mov	r0, r3
 800438a:	4603      	mov	r3, r0
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	4403      	add	r3, r0
 8004390:	409a      	lsls	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b06      	cmp	r3, #6
 80043a0:	d824      	bhi.n	80043ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	3b05      	subs	r3, #5
 80043b4:	221f      	movs	r2, #31
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43da      	mvns	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	400a      	ands	r2, r1
 80043c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	4618      	mov	r0, r3
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	3b05      	subs	r3, #5
 80043de:	fa00 f203 	lsl.w	r2, r0, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80043ea:	e04c      	b.n	8004486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b0c      	cmp	r3, #12
 80043f2:	d824      	bhi.n	800443e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	3b23      	subs	r3, #35	@ 0x23
 8004406:	221f      	movs	r2, #31
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43da      	mvns	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	400a      	ands	r2, r1
 8004414:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	b29b      	uxth	r3, r3
 8004422:	4618      	mov	r0, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	3b23      	subs	r3, #35	@ 0x23
 8004430:	fa00 f203 	lsl.w	r2, r0, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	631a      	str	r2, [r3, #48]	@ 0x30
 800443c:	e023      	b.n	8004486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	3b41      	subs	r3, #65	@ 0x41
 8004450:	221f      	movs	r2, #31
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43da      	mvns	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	400a      	ands	r2, r1
 800445e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	b29b      	uxth	r3, r3
 800446c:	4618      	mov	r0, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	3b41      	subs	r3, #65	@ 0x41
 800447a:	fa00 f203 	lsl.w	r2, r0, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004486:	4b22      	ldr	r3, [pc, #136]	@ (8004510 <HAL_ADC_ConfigChannel+0x234>)
 8004488:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a21      	ldr	r2, [pc, #132]	@ (8004514 <HAL_ADC_ConfigChannel+0x238>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d109      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x1cc>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b12      	cmp	r3, #18
 800449a:	d105      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a19      	ldr	r2, [pc, #100]	@ (8004514 <HAL_ADC_ConfigChannel+0x238>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d123      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x21e>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d003      	beq.n	80044c2 <HAL_ADC_ConfigChannel+0x1e6>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b11      	cmp	r3, #17
 80044c0:	d11b      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d111      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044d6:	4b10      	ldr	r3, [pc, #64]	@ (8004518 <HAL_ADC_ConfigChannel+0x23c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a10      	ldr	r2, [pc, #64]	@ (800451c <HAL_ADC_ConfigChannel+0x240>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	0c9a      	lsrs	r2, r3, #18
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80044ec:	e002      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f9      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	40012300 	.word	0x40012300
 8004514:	40012000 	.word	0x40012000
 8004518:	20000030 	.word	0x20000030
 800451c:	431bde83 	.word	0x431bde83

08004520 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004528:	4b79      	ldr	r3, [pc, #484]	@ (8004710 <ADC_Init+0x1f0>)
 800452a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	431a      	orrs	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004554:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6859      	ldr	r1, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	021a      	lsls	r2, r3, #8
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004578:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6859      	ldr	r1, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800459a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6899      	ldr	r1, [r3, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b2:	4a58      	ldr	r2, [pc, #352]	@ (8004714 <ADC_Init+0x1f4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d022      	beq.n	80045fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80045c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6899      	ldr	r1, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80045e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6899      	ldr	r1, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	609a      	str	r2, [r3, #8]
 80045fc:	e00f      	b.n	800461e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800460c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800461c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0202 	bic.w	r2, r2, #2
 800462c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6899      	ldr	r1, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	7e1b      	ldrb	r3, [r3, #24]
 8004638:	005a      	lsls	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01b      	beq.n	8004684 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800465a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800466a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6859      	ldr	r1, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004676:	3b01      	subs	r3, #1
 8004678:	035a      	lsls	r2, r3, #13
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	e007      	b.n	8004694 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004692:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80046a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	051a      	lsls	r2, r3, #20
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80046c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6899      	ldr	r1, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046d6:	025a      	lsls	r2, r3, #9
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6899      	ldr	r1, [r3, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	029a      	lsls	r2, r3, #10
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	609a      	str	r2, [r3, #8]
}
 8004704:	bf00      	nop
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	40012300 	.word	0x40012300
 8004714:	0f000001 	.word	0x0f000001

08004718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004728:	4b0c      	ldr	r3, [pc, #48]	@ (800475c <__NVIC_SetPriorityGrouping+0x44>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004734:	4013      	ands	r3, r2
 8004736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004740:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800474a:	4a04      	ldr	r2, [pc, #16]	@ (800475c <__NVIC_SetPriorityGrouping+0x44>)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	60d3      	str	r3, [r2, #12]
}
 8004750:	bf00      	nop
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	e000ed00 	.word	0xe000ed00

08004760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004764:	4b04      	ldr	r3, [pc, #16]	@ (8004778 <__NVIC_GetPriorityGrouping+0x18>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	0a1b      	lsrs	r3, r3, #8
 800476a:	f003 0307 	and.w	r3, r3, #7
}
 800476e:	4618      	mov	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	e000ed00 	.word	0xe000ed00

0800477c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478a:	2b00      	cmp	r3, #0
 800478c:	db0b      	blt.n	80047a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800478e:	79fb      	ldrb	r3, [r7, #7]
 8004790:	f003 021f 	and.w	r2, r3, #31
 8004794:	4907      	ldr	r1, [pc, #28]	@ (80047b4 <__NVIC_EnableIRQ+0x38>)
 8004796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	2001      	movs	r0, #1
 800479e:	fa00 f202 	lsl.w	r2, r0, r2
 80047a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	e000e100 	.word	0xe000e100

080047b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	6039      	str	r1, [r7, #0]
 80047c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	db0a      	blt.n	80047e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	490c      	ldr	r1, [pc, #48]	@ (8004804 <__NVIC_SetPriority+0x4c>)
 80047d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d6:	0112      	lsls	r2, r2, #4
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	440b      	add	r3, r1
 80047dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047e0:	e00a      	b.n	80047f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	4908      	ldr	r1, [pc, #32]	@ (8004808 <__NVIC_SetPriority+0x50>)
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	3b04      	subs	r3, #4
 80047f0:	0112      	lsls	r2, r2, #4
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	440b      	add	r3, r1
 80047f6:	761a      	strb	r2, [r3, #24]
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	e000e100 	.word	0xe000e100
 8004808:	e000ed00 	.word	0xe000ed00

0800480c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800480c:	b480      	push	{r7}
 800480e:	b089      	sub	sp, #36	@ 0x24
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f1c3 0307 	rsb	r3, r3, #7
 8004826:	2b04      	cmp	r3, #4
 8004828:	bf28      	it	cs
 800482a:	2304      	movcs	r3, #4
 800482c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	3304      	adds	r3, #4
 8004832:	2b06      	cmp	r3, #6
 8004834:	d902      	bls.n	800483c <NVIC_EncodePriority+0x30>
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	3b03      	subs	r3, #3
 800483a:	e000      	b.n	800483e <NVIC_EncodePriority+0x32>
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004840:	f04f 32ff 	mov.w	r2, #4294967295
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43da      	mvns	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	401a      	ands	r2, r3
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004854:	f04f 31ff 	mov.w	r1, #4294967295
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	fa01 f303 	lsl.w	r3, r1, r3
 800485e:	43d9      	mvns	r1, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004864:	4313      	orrs	r3, r2
         );
}
 8004866:	4618      	mov	r0, r3
 8004868:	3724      	adds	r7, #36	@ 0x24
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3b01      	subs	r3, #1
 8004880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004884:	d301      	bcc.n	800488a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004886:	2301      	movs	r3, #1
 8004888:	e00f      	b.n	80048aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800488a:	4a0a      	ldr	r2, [pc, #40]	@ (80048b4 <SysTick_Config+0x40>)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3b01      	subs	r3, #1
 8004890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004892:	210f      	movs	r1, #15
 8004894:	f04f 30ff 	mov.w	r0, #4294967295
 8004898:	f7ff ff8e 	bl	80047b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800489c:	4b05      	ldr	r3, [pc, #20]	@ (80048b4 <SysTick_Config+0x40>)
 800489e:	2200      	movs	r2, #0
 80048a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048a2:	4b04      	ldr	r3, [pc, #16]	@ (80048b4 <SysTick_Config+0x40>)
 80048a4:	2207      	movs	r2, #7
 80048a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	e000e010 	.word	0xe000e010

080048b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff ff29 	bl	8004718 <__NVIC_SetPriorityGrouping>
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b086      	sub	sp, #24
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	4603      	mov	r3, r0
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]
 80048da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048dc:	2300      	movs	r3, #0
 80048de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048e0:	f7ff ff3e 	bl	8004760 <__NVIC_GetPriorityGrouping>
 80048e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	6978      	ldr	r0, [r7, #20]
 80048ec:	f7ff ff8e 	bl	800480c <NVIC_EncodePriority>
 80048f0:	4602      	mov	r2, r0
 80048f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048f6:	4611      	mov	r1, r2
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff ff5d 	bl	80047b8 <__NVIC_SetPriority>
}
 80048fe:	bf00      	nop
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	4603      	mov	r3, r0
 800490e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff ff31 	bl	800477c <__NVIC_EnableIRQ>
}
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff ffa2 	bl	8004874 <SysTick_Config>
 8004930:	4603      	mov	r3, r0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004948:	f7ff fba0 	bl	800408c <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e099      	b.n	8004a8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0201 	bic.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004978:	e00f      	b.n	800499a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800497a:	f7ff fb87 	bl	800408c <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b05      	cmp	r3, #5
 8004986:	d908      	bls.n	800499a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2203      	movs	r2, #3
 8004992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e078      	b.n	8004a8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e8      	bne.n	800497a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4b38      	ldr	r3, [pc, #224]	@ (8004a94 <HAL_DMA_Init+0x158>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d107      	bne.n	8004a04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fc:	4313      	orrs	r3, r2
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f023 0307 	bic.w	r3, r3, #7
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d117      	bne.n	8004a5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00e      	beq.n	8004a5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 faab 	bl	8004f9c <DMA_CheckFifoParam>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d008      	beq.n	8004a5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2240      	movs	r2, #64	@ 0x40
 8004a50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e016      	b.n	8004a8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fa62 	bl	8004f30 <DMA_CalcBaseAndBitshift>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a74:	223f      	movs	r2, #63	@ 0x3f
 8004a76:	409a      	lsls	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	f010803f 	.word	0xf010803f

08004a98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_DMA_Start_IT+0x26>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e040      	b.n	8004b40 <HAL_DMA_Start_IT+0xa8>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d12f      	bne.n	8004b32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f9f4 	bl	8004ed4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af0:	223f      	movs	r2, #63	@ 0x3f
 8004af2:	409a      	lsls	r2, r3
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0216 	orr.w	r2, r2, #22
 8004b06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d007      	beq.n	8004b20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0208 	orr.w	r2, r2, #8
 8004b1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	e005      	b.n	8004b3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d004      	beq.n	8004b66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2280      	movs	r2, #128	@ 0x80
 8004b60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e00c      	b.n	8004b80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2205      	movs	r2, #5
 8004b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0201 	bic.w	r2, r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b98:	4b8e      	ldr	r3, [pc, #568]	@ (8004dd4 <HAL_DMA_IRQHandler+0x248>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a8e      	ldr	r2, [pc, #568]	@ (8004dd8 <HAL_DMA_IRQHandler+0x24c>)
 8004b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba2:	0a9b      	lsrs	r3, r3, #10
 8004ba4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004baa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb6:	2208      	movs	r2, #8
 8004bb8:	409a      	lsls	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d01a      	beq.n	8004bf8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d013      	beq.n	8004bf8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0204 	bic.w	r2, r2, #4
 8004bde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be4:	2208      	movs	r2, #8
 8004be6:	409a      	lsls	r2, r3
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf0:	f043 0201 	orr.w	r2, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	409a      	lsls	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d012      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00b      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	409a      	lsls	r2, r3
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c26:	f043 0202 	orr.w	r2, r3, #2
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c32:	2204      	movs	r2, #4
 8004c34:	409a      	lsls	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d012      	beq.n	8004c64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00b      	beq.n	8004c64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c50:	2204      	movs	r2, #4
 8004c52:	409a      	lsls	r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c5c:	f043 0204 	orr.w	r2, r3, #4
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c68:	2210      	movs	r2, #16
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d043      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d03c      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c86:	2210      	movs	r2, #16
 8004c88:	409a      	lsls	r2, r3
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d018      	beq.n	8004cce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d108      	bne.n	8004cbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d024      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	4798      	blx	r3
 8004cba:	e01f      	b.n	8004cfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01b      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	4798      	blx	r3
 8004ccc:	e016      	b.n	8004cfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d107      	bne.n	8004cec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0208 	bic.w	r2, r2, #8
 8004cea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d00:	2220      	movs	r2, #32
 8004d02:	409a      	lsls	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 808f 	beq.w	8004e2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 8087 	beq.w	8004e2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d22:	2220      	movs	r2, #32
 8004d24:	409a      	lsls	r2, r3
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b05      	cmp	r3, #5
 8004d34:	d136      	bne.n	8004da4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0216 	bic.w	r2, r2, #22
 8004d44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695a      	ldr	r2, [r3, #20]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d103      	bne.n	8004d66 <HAL_DMA_IRQHandler+0x1da>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d007      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0208 	bic.w	r2, r2, #8
 8004d74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d7a:	223f      	movs	r2, #63	@ 0x3f
 8004d7c:	409a      	lsls	r2, r3
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d07e      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	4798      	blx	r3
        }
        return;
 8004da2:	e079      	b.n	8004e98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01d      	beq.n	8004dee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10d      	bne.n	8004ddc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d031      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	4798      	blx	r3
 8004dd0:	e02c      	b.n	8004e2c <HAL_DMA_IRQHandler+0x2a0>
 8004dd2:	bf00      	nop
 8004dd4:	20000030 	.word	0x20000030
 8004dd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d023      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	4798      	blx	r3
 8004dec:	e01e      	b.n	8004e2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10f      	bne.n	8004e1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0210 	bic.w	r2, r2, #16
 8004e0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d032      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d022      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2205      	movs	r2, #5
 8004e44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0201 	bic.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d307      	bcc.n	8004e74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f2      	bne.n	8004e58 <HAL_DMA_IRQHandler+0x2cc>
 8004e72:	e000      	b.n	8004e76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d005      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	4798      	blx	r3
 8004e96:	e000      	b.n	8004e9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e98:	bf00      	nop
    }
  }
}
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004eae:	b2db      	uxtb	r3, r3
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004ef0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b40      	cmp	r3, #64	@ 0x40
 8004f00:	d108      	bne.n	8004f14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f12:	e007      	b.n	8004f24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	60da      	str	r2, [r3, #12]
}
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	3b10      	subs	r3, #16
 8004f40:	4a14      	ldr	r2, [pc, #80]	@ (8004f94 <DMA_CalcBaseAndBitshift+0x64>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	091b      	lsrs	r3, r3, #4
 8004f48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f4a:	4a13      	ldr	r2, [pc, #76]	@ (8004f98 <DMA_CalcBaseAndBitshift+0x68>)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d909      	bls.n	8004f72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004f66:	f023 0303 	bic.w	r3, r3, #3
 8004f6a:	1d1a      	adds	r2, r3, #4
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f70:	e007      	b.n	8004f82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004f7a:	f023 0303 	bic.w	r3, r3, #3
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	aaaaaaab 	.word	0xaaaaaaab
 8004f98:	0800b4c0 	.word	0x0800b4c0

08004f9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d11f      	bne.n	8004ff6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d856      	bhi.n	800506a <DMA_CheckFifoParam+0xce>
 8004fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc4 <DMA_CheckFifoParam+0x28>)
 8004fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	08004fd5 	.word	0x08004fd5
 8004fc8:	08004fe7 	.word	0x08004fe7
 8004fcc:	08004fd5 	.word	0x08004fd5
 8004fd0:	0800506b 	.word	0x0800506b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d046      	beq.n	800506e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe4:	e043      	b.n	800506e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004fee:	d140      	bne.n	8005072 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ff4:	e03d      	b.n	8005072 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ffe:	d121      	bne.n	8005044 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b03      	cmp	r3, #3
 8005004:	d837      	bhi.n	8005076 <DMA_CheckFifoParam+0xda>
 8005006:	a201      	add	r2, pc, #4	@ (adr r2, 800500c <DMA_CheckFifoParam+0x70>)
 8005008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500c:	0800501d 	.word	0x0800501d
 8005010:	08005023 	.word	0x08005023
 8005014:	0800501d 	.word	0x0800501d
 8005018:	08005035 	.word	0x08005035
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	73fb      	strb	r3, [r7, #15]
      break;
 8005020:	e030      	b.n	8005084 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005026:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d025      	beq.n	800507a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005032:	e022      	b.n	800507a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005038:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800503c:	d11f      	bne.n	800507e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005042:	e01c      	b.n	800507e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d903      	bls.n	8005052 <DMA_CheckFifoParam+0xb6>
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b03      	cmp	r3, #3
 800504e:	d003      	beq.n	8005058 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005050:	e018      	b.n	8005084 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	73fb      	strb	r3, [r7, #15]
      break;
 8005056:	e015      	b.n	8005084 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00e      	beq.n	8005082 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	73fb      	strb	r3, [r7, #15]
      break;
 8005068:	e00b      	b.n	8005082 <DMA_CheckFifoParam+0xe6>
      break;
 800506a:	bf00      	nop
 800506c:	e00a      	b.n	8005084 <DMA_CheckFifoParam+0xe8>
      break;
 800506e:	bf00      	nop
 8005070:	e008      	b.n	8005084 <DMA_CheckFifoParam+0xe8>
      break;
 8005072:	bf00      	nop
 8005074:	e006      	b.n	8005084 <DMA_CheckFifoParam+0xe8>
      break;
 8005076:	bf00      	nop
 8005078:	e004      	b.n	8005084 <DMA_CheckFifoParam+0xe8>
      break;
 800507a:	bf00      	nop
 800507c:	e002      	b.n	8005084 <DMA_CheckFifoParam+0xe8>
      break;   
 800507e:	bf00      	nop
 8005080:	e000      	b.n	8005084 <DMA_CheckFifoParam+0xe8>
      break;
 8005082:	bf00      	nop
    }
  } 
  
  return status; 
 8005084:	7bfb      	ldrb	r3, [r7, #15]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop

08005094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005094:	b480      	push	{r7}
 8005096:	b089      	sub	sp, #36	@ 0x24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]
 80050ae:	e159      	b.n	8005364 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050b0:	2201      	movs	r2, #1
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	4013      	ands	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	f040 8148 	bne.w	800535e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d005      	beq.n	80050e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d130      	bne.n	8005148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	2203      	movs	r2, #3
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	43db      	mvns	r3, r3
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4013      	ands	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4313      	orrs	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800511c:	2201      	movs	r2, #1
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	43db      	mvns	r3, r3
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4013      	ands	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	091b      	lsrs	r3, r3, #4
 8005132:	f003 0201 	and.w	r2, r3, #1
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	4313      	orrs	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f003 0303 	and.w	r3, r3, #3
 8005150:	2b03      	cmp	r3, #3
 8005152:	d017      	beq.n	8005184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	2203      	movs	r2, #3
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	43db      	mvns	r3, r3
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	4013      	ands	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	4313      	orrs	r3, r2
 800517c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d123      	bne.n	80051d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	08da      	lsrs	r2, r3, #3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3208      	adds	r2, #8
 8005198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800519c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	220f      	movs	r2, #15
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	43db      	mvns	r3, r3
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4013      	ands	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	08da      	lsrs	r2, r3, #3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3208      	adds	r2, #8
 80051d2:	69b9      	ldr	r1, [r7, #24]
 80051d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	2203      	movs	r2, #3
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	43db      	mvns	r3, r3
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	4013      	ands	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f003 0203 	and.w	r2, r3, #3
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	4313      	orrs	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 80a2 	beq.w	800535e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	4b57      	ldr	r3, [pc, #348]	@ (800537c <HAL_GPIO_Init+0x2e8>)
 8005220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005222:	4a56      	ldr	r2, [pc, #344]	@ (800537c <HAL_GPIO_Init+0x2e8>)
 8005224:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005228:	6453      	str	r3, [r2, #68]	@ 0x44
 800522a:	4b54      	ldr	r3, [pc, #336]	@ (800537c <HAL_GPIO_Init+0x2e8>)
 800522c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005236:	4a52      	ldr	r2, [pc, #328]	@ (8005380 <HAL_GPIO_Init+0x2ec>)
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	089b      	lsrs	r3, r3, #2
 800523c:	3302      	adds	r3, #2
 800523e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	220f      	movs	r2, #15
 800524e:	fa02 f303 	lsl.w	r3, r2, r3
 8005252:	43db      	mvns	r3, r3
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	4013      	ands	r3, r2
 8005258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a49      	ldr	r2, [pc, #292]	@ (8005384 <HAL_GPIO_Init+0x2f0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d019      	beq.n	8005296 <HAL_GPIO_Init+0x202>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a48      	ldr	r2, [pc, #288]	@ (8005388 <HAL_GPIO_Init+0x2f4>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d013      	beq.n	8005292 <HAL_GPIO_Init+0x1fe>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a47      	ldr	r2, [pc, #284]	@ (800538c <HAL_GPIO_Init+0x2f8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00d      	beq.n	800528e <HAL_GPIO_Init+0x1fa>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a46      	ldr	r2, [pc, #280]	@ (8005390 <HAL_GPIO_Init+0x2fc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d007      	beq.n	800528a <HAL_GPIO_Init+0x1f6>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a45      	ldr	r2, [pc, #276]	@ (8005394 <HAL_GPIO_Init+0x300>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d101      	bne.n	8005286 <HAL_GPIO_Init+0x1f2>
 8005282:	2304      	movs	r3, #4
 8005284:	e008      	b.n	8005298 <HAL_GPIO_Init+0x204>
 8005286:	2307      	movs	r3, #7
 8005288:	e006      	b.n	8005298 <HAL_GPIO_Init+0x204>
 800528a:	2303      	movs	r3, #3
 800528c:	e004      	b.n	8005298 <HAL_GPIO_Init+0x204>
 800528e:	2302      	movs	r3, #2
 8005290:	e002      	b.n	8005298 <HAL_GPIO_Init+0x204>
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <HAL_GPIO_Init+0x204>
 8005296:	2300      	movs	r3, #0
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	f002 0203 	and.w	r2, r2, #3
 800529e:	0092      	lsls	r2, r2, #2
 80052a0:	4093      	lsls	r3, r2
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052a8:	4935      	ldr	r1, [pc, #212]	@ (8005380 <HAL_GPIO_Init+0x2ec>)
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	089b      	lsrs	r3, r3, #2
 80052ae:	3302      	adds	r3, #2
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052b6:	4b38      	ldr	r3, [pc, #224]	@ (8005398 <HAL_GPIO_Init+0x304>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	43db      	mvns	r3, r3
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	4013      	ands	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052da:	4a2f      	ldr	r2, [pc, #188]	@ (8005398 <HAL_GPIO_Init+0x304>)
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005398 <HAL_GPIO_Init+0x304>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	43db      	mvns	r3, r3
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	4013      	ands	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005304:	4a24      	ldr	r2, [pc, #144]	@ (8005398 <HAL_GPIO_Init+0x304>)
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800530a:	4b23      	ldr	r3, [pc, #140]	@ (8005398 <HAL_GPIO_Init+0x304>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	43db      	mvns	r3, r3
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	4013      	ands	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800532e:	4a1a      	ldr	r2, [pc, #104]	@ (8005398 <HAL_GPIO_Init+0x304>)
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005334:	4b18      	ldr	r3, [pc, #96]	@ (8005398 <HAL_GPIO_Init+0x304>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	43db      	mvns	r3, r3
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	4013      	ands	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005358:	4a0f      	ldr	r2, [pc, #60]	@ (8005398 <HAL_GPIO_Init+0x304>)
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	3301      	adds	r3, #1
 8005362:	61fb      	str	r3, [r7, #28]
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	2b0f      	cmp	r3, #15
 8005368:	f67f aea2 	bls.w	80050b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800536c:	bf00      	nop
 800536e:	bf00      	nop
 8005370:	3724      	adds	r7, #36	@ 0x24
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40023800 	.word	0x40023800
 8005380:	40013800 	.word	0x40013800
 8005384:	40020000 	.word	0x40020000
 8005388:	40020400 	.word	0x40020400
 800538c:	40020800 	.word	0x40020800
 8005390:	40020c00 	.word	0x40020c00
 8005394:	40021000 	.word	0x40021000
 8005398:	40013c00 	.word	0x40013c00

0800539c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	887b      	ldrh	r3, [r7, #2]
 80053ae:	4013      	ands	r3, r2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053b4:	2301      	movs	r3, #1
 80053b6:	73fb      	strb	r3, [r7, #15]
 80053b8:	e001      	b.n	80053be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053ba:	2300      	movs	r3, #0
 80053bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053be:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	807b      	strh	r3, [r7, #2]
 80053d8:	4613      	mov	r3, r2
 80053da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053dc:	787b      	ldrb	r3, [r7, #1]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053e2:	887a      	ldrh	r2, [r7, #2]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053e8:	e003      	b.n	80053f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053ea:	887b      	ldrh	r3, [r7, #2]
 80053ec:	041a      	lsls	r2, r3, #16
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	619a      	str	r2, [r3, #24]
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
	...

08005400 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e12b      	b.n	800566a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d106      	bne.n	800542c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7fc fbd2 	bl	8001bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2224      	movs	r2, #36	@ 0x24
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0201 	bic.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005452:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005462:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005464:	f003 f8ec 	bl	8008640 <HAL_RCC_GetPCLK1Freq>
 8005468:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	4a81      	ldr	r2, [pc, #516]	@ (8005674 <HAL_I2C_Init+0x274>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d807      	bhi.n	8005484 <HAL_I2C_Init+0x84>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4a80      	ldr	r2, [pc, #512]	@ (8005678 <HAL_I2C_Init+0x278>)
 8005478:	4293      	cmp	r3, r2
 800547a:	bf94      	ite	ls
 800547c:	2301      	movls	r3, #1
 800547e:	2300      	movhi	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	e006      	b.n	8005492 <HAL_I2C_Init+0x92>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4a7d      	ldr	r2, [pc, #500]	@ (800567c <HAL_I2C_Init+0x27c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	bf94      	ite	ls
 800548c:	2301      	movls	r3, #1
 800548e:	2300      	movhi	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e0e7      	b.n	800566a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4a78      	ldr	r2, [pc, #480]	@ (8005680 <HAL_I2C_Init+0x280>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	0c9b      	lsrs	r3, r3, #18
 80054a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4a6a      	ldr	r2, [pc, #424]	@ (8005674 <HAL_I2C_Init+0x274>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d802      	bhi.n	80054d4 <HAL_I2C_Init+0xd4>
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	3301      	adds	r3, #1
 80054d2:	e009      	b.n	80054e8 <HAL_I2C_Init+0xe8>
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80054da:	fb02 f303 	mul.w	r3, r2, r3
 80054de:	4a69      	ldr	r2, [pc, #420]	@ (8005684 <HAL_I2C_Init+0x284>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	099b      	lsrs	r3, r3, #6
 80054e6:	3301      	adds	r3, #1
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6812      	ldr	r2, [r2, #0]
 80054ec:	430b      	orrs	r3, r1
 80054ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80054fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	495c      	ldr	r1, [pc, #368]	@ (8005674 <HAL_I2C_Init+0x274>)
 8005504:	428b      	cmp	r3, r1
 8005506:	d819      	bhi.n	800553c <HAL_I2C_Init+0x13c>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	1e59      	subs	r1, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	fbb1 f3f3 	udiv	r3, r1, r3
 8005516:	1c59      	adds	r1, r3, #1
 8005518:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800551c:	400b      	ands	r3, r1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <HAL_I2C_Init+0x138>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1e59      	subs	r1, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005530:	3301      	adds	r3, #1
 8005532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005536:	e051      	b.n	80055dc <HAL_I2C_Init+0x1dc>
 8005538:	2304      	movs	r3, #4
 800553a:	e04f      	b.n	80055dc <HAL_I2C_Init+0x1dc>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d111      	bne.n	8005568 <HAL_I2C_Init+0x168>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	1e58      	subs	r0, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6859      	ldr	r1, [r3, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	440b      	add	r3, r1
 8005552:	fbb0 f3f3 	udiv	r3, r0, r3
 8005556:	3301      	adds	r3, #1
 8005558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf0c      	ite	eq
 8005560:	2301      	moveq	r3, #1
 8005562:	2300      	movne	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	e012      	b.n	800558e <HAL_I2C_Init+0x18e>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	1e58      	subs	r0, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	0099      	lsls	r1, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	fbb0 f3f3 	udiv	r3, r0, r3
 800557e:	3301      	adds	r3, #1
 8005580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005584:	2b00      	cmp	r3, #0
 8005586:	bf0c      	ite	eq
 8005588:	2301      	moveq	r3, #1
 800558a:	2300      	movne	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <HAL_I2C_Init+0x196>
 8005592:	2301      	movs	r3, #1
 8005594:	e022      	b.n	80055dc <HAL_I2C_Init+0x1dc>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10e      	bne.n	80055bc <HAL_I2C_Init+0x1bc>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1e58      	subs	r0, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6859      	ldr	r1, [r3, #4]
 80055a6:	460b      	mov	r3, r1
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	440b      	add	r3, r1
 80055ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80055b0:	3301      	adds	r3, #1
 80055b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055ba:	e00f      	b.n	80055dc <HAL_I2C_Init+0x1dc>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	1e58      	subs	r0, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6859      	ldr	r1, [r3, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	0099      	lsls	r1, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80055d2:	3301      	adds	r3, #1
 80055d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	6809      	ldr	r1, [r1, #0]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69da      	ldr	r2, [r3, #28]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800560a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6911      	ldr	r1, [r2, #16]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	68d2      	ldr	r2, [r2, #12]
 8005616:	4311      	orrs	r1, r2
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	430b      	orrs	r3, r1
 800561e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695a      	ldr	r2, [r3, #20]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	000186a0 	.word	0x000186a0
 8005678:	001e847f 	.word	0x001e847f
 800567c:	003d08ff 	.word	0x003d08ff
 8005680:	431bde83 	.word	0x431bde83
 8005684:	10624dd3 	.word	0x10624dd3

08005688 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800569a:	2b80      	cmp	r3, #128	@ 0x80
 800569c:	d103      	bne.n	80056a6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2200      	movs	r2, #0
 80056a4:	611a      	str	r2, [r3, #16]
  }
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	461a      	mov	r2, r3
 80056c0:	460b      	mov	r3, r1
 80056c2:	817b      	strh	r3, [r7, #10]
 80056c4:	4613      	mov	r3, r2
 80056c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056c8:	f7fe fce0 	bl	800408c <HAL_GetTick>
 80056cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	f040 80e0 	bne.w	800589c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	2319      	movs	r3, #25
 80056e2:	2201      	movs	r2, #1
 80056e4:	4970      	ldr	r1, [pc, #448]	@ (80058a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f002 f940 	bl	800796c <I2C_WaitOnFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80056f2:	2302      	movs	r3, #2
 80056f4:	e0d3      	b.n	800589e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_I2C_Master_Transmit+0x50>
 8005700:	2302      	movs	r3, #2
 8005702:	e0cc      	b.n	800589e <HAL_I2C_Master_Transmit+0x1ea>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b01      	cmp	r3, #1
 8005718:	d007      	beq.n	800572a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0201 	orr.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005738:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2221      	movs	r2, #33	@ 0x21
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2210      	movs	r2, #16
 8005746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	893a      	ldrh	r2, [r7, #8]
 800575a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4a50      	ldr	r2, [pc, #320]	@ (80058ac <HAL_I2C_Master_Transmit+0x1f8>)
 800576a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800576c:	8979      	ldrh	r1, [r7, #10]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	6a3a      	ldr	r2, [r7, #32]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f001 feb4 	bl	80074e0 <I2C_MasterRequestWrite>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e08d      	b.n	800589e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005782:	2300      	movs	r3, #0
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005798:	e066      	b.n	8005868 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	6a39      	ldr	r1, [r7, #32]
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f002 f9fe 	bl	8007ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00d      	beq.n	80057c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d107      	bne.n	80057c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e06b      	b.n	800589e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ca:	781a      	ldrb	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b04      	cmp	r3, #4
 8005802:	d11b      	bne.n	800583c <HAL_I2C_Master_Transmit+0x188>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005808:	2b00      	cmp	r3, #0
 800580a:	d017      	beq.n	800583c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005810:	781a      	ldrb	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005834:	3b01      	subs	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	6a39      	ldr	r1, [r7, #32]
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f002 f9f5 	bl	8007c30 <I2C_WaitOnBTFFlagUntilTimeout>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00d      	beq.n	8005868 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005850:	2b04      	cmp	r3, #4
 8005852:	d107      	bne.n	8005864 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005862:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e01a      	b.n	800589e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800586c:	2b00      	cmp	r3, #0
 800586e:	d194      	bne.n	800579a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800587e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	e000      	b.n	800589e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800589c:	2302      	movs	r3, #2
  }
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	00100002 	.word	0x00100002
 80058ac:	ffff0000 	.word	0xffff0000

080058b0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	607a      	str	r2, [r7, #4]
 80058ba:	461a      	mov	r2, r3
 80058bc:	460b      	mov	r3, r1
 80058be:	817b      	strh	r3, [r7, #10]
 80058c0:	4613      	mov	r3, r2
 80058c2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	f040 8109 	bne.w	8005ae8 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80058d6:	4b87      	ldr	r3, [pc, #540]	@ (8005af4 <HAL_I2C_Master_Transmit_DMA+0x244>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	08db      	lsrs	r3, r3, #3
 80058dc:	4a86      	ldr	r2, [pc, #536]	@ (8005af8 <HAL_I2C_Master_Transmit_DMA+0x248>)
 80058de:	fba2 2303 	umull	r2, r3, r2, r3
 80058e2:	0a1a      	lsrs	r2, r3, #8
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	009a      	lsls	r2, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d112      	bne.n	8005922 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005916:	f043 0220 	orr.w	r2, r3, #32
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800591e:	2302      	movs	r3, #2
 8005920:	e0e3      	b.n	8005aea <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b02      	cmp	r3, #2
 800592e:	d0df      	beq.n	80058f0 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <HAL_I2C_Master_Transmit_DMA+0x8e>
 800593a:	2302      	movs	r3, #2
 800593c:	e0d5      	b.n	8005aea <HAL_I2C_Master_Transmit_DMA+0x23a>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b01      	cmp	r3, #1
 8005952:	d007      	beq.n	8005964 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0201 	orr.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005972:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2221      	movs	r2, #33	@ 0x21
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2210      	movs	r2, #16
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	893a      	ldrh	r2, [r7, #8]
 8005994:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4a56      	ldr	r2, [pc, #344]	@ (8005afc <HAL_I2C_Master_Transmit_DMA+0x24c>)
 80059a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80059a6:	897a      	ldrh	r2, [r7, #10]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d07b      	beq.n	8005aac <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d02a      	beq.n	8005a12 <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c0:	4a4f      	ldr	r2, [pc, #316]	@ (8005b00 <HAL_I2C_Master_Transmit_DMA+0x250>)
 80059c2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c8:	4a4e      	ldr	r2, [pc, #312]	@ (8005b04 <HAL_I2C_Master_Transmit_DMA+0x254>)
 80059ca:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d0:	2200      	movs	r2, #0
 80059d2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d8:	2200      	movs	r2, #0
 80059da:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e0:	2200      	movs	r2, #0
 80059e2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e8:	2200      	movs	r2, #0
 80059ea:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f4:	4619      	mov	r1, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3310      	adds	r3, #16
 80059fc:	461a      	mov	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a02:	f7ff f849 	bl	8004a98 <HAL_DMA_Start_IT>
 8005a06:	4603      	mov	r3, r0
 8005a08:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005a0a:	7dfb      	ldrb	r3, [r7, #23]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d139      	bne.n	8005a84 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 8005a10:	e013      	b.n	8005a3a <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a26:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e057      	b.n	8005aea <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005a50:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a60:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a70:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	e02f      	b.n	8005ae4 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a98:	f043 0210 	orr.w	r2, r3, #16
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e01e      	b.n	8005aea <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005aba:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005aca:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8005ae2:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e000      	b.n	8005aea <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8005ae8:	2302      	movs	r3, #2
  }
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20000030 	.word	0x20000030
 8005af8:	14f8b589 	.word	0x14f8b589
 8005afc:	ffff0000 	.word	0xffff0000
 8005b00:	080075e5 	.word	0x080075e5
 8005b04:	080077a3 	.word	0x080077a3

08005b08 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	607a      	str	r2, [r7, #4]
 8005b12:	461a      	mov	r2, r3
 8005b14:	460b      	mov	r3, r1
 8005b16:	817b      	strh	r3, [r7, #10]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	f040 8109 	bne.w	8005d40 <HAL_I2C_Master_Receive_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b2e:	4b87      	ldr	r3, [pc, #540]	@ (8005d4c <HAL_I2C_Master_Receive_DMA+0x244>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	08db      	lsrs	r3, r3, #3
 8005b34:	4a86      	ldr	r2, [pc, #536]	@ (8005d50 <HAL_I2C_Master_Receive_DMA+0x248>)
 8005b36:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3a:	0a1a      	lsrs	r2, r3, #8
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009a      	lsls	r2, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d112      	bne.n	8005b7a <HAL_I2C_Master_Receive_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	f043 0220 	orr.w	r2, r3, #32
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005b76:	2302      	movs	r3, #2
 8005b78:	e0e3      	b.n	8005d42 <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d0df      	beq.n	8005b48 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_I2C_Master_Receive_DMA+0x8e>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e0d5      	b.n	8005d42 <HAL_I2C_Master_Receive_DMA+0x23a>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d007      	beq.n	8005bbc <HAL_I2C_Master_Receive_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2222      	movs	r2, #34	@ 0x22
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2210      	movs	r2, #16
 8005bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	893a      	ldrh	r2, [r7, #8]
 8005bec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4a56      	ldr	r2, [pc, #344]	@ (8005d54 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8005bfc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005bfe:	897a      	ldrh	r2, [r7, #10]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d07b      	beq.n	8005d04 <HAL_I2C_Master_Receive_DMA+0x1fc>
    {
      if (hi2c->hdmarx != NULL)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d02a      	beq.n	8005c6a <HAL_I2C_Master_Receive_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c18:	4a4f      	ldr	r2, [pc, #316]	@ (8005d58 <HAL_I2C_Master_Receive_DMA+0x250>)
 8005c1a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c20:	4a4e      	ldr	r2, [pc, #312]	@ (8005d5c <HAL_I2C_Master_Receive_DMA+0x254>)
 8005c22:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c28:	2200      	movs	r2, #0
 8005c2a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c30:	2200      	movs	r2, #0
 8005c32:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c38:	2200      	movs	r2, #0
 8005c3a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c40:	2200      	movs	r2, #0
 8005c42:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3310      	adds	r3, #16
 8005c4e:	4619      	mov	r1, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c54:	461a      	mov	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c5a:	f7fe ff1d 	bl	8004a98 <HAL_DMA_Start_IT>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d139      	bne.n	8005cdc <HAL_I2C_Master_Receive_DMA+0x1d4>
 8005c68:	e013      	b.n	8005c92 <HAL_I2C_Master_Receive_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e057      	b.n	8005d42 <HAL_I2C_Master_Receive_DMA+0x23a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ca0:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cb0:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005cc8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cd8:	605a      	str	r2, [r3, #4]
 8005cda:	e02f      	b.n	8005d3c <HAL_I2C_Master_Receive_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf0:	f043 0210 	orr.w	r2, r3, #16
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e01e      	b.n	8005d42 <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8005d1a:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d2a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d3a:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e000      	b.n	8005d42 <HAL_I2C_Master_Receive_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8005d40:	2302      	movs	r3, #2
  }
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000030 	.word	0x20000030
 8005d50:	14f8b589 	.word	0x14f8b589
 8005d54:	ffff0000 	.word	0xffff0000
 8005d58:	080075e5 	.word	0x080075e5
 8005d5c:	080077a3 	.word	0x080077a3

08005d60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d78:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d80:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d88:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	2b10      	cmp	r3, #16
 8005d8e:	d003      	beq.n	8005d98 <HAL_I2C_EV_IRQHandler+0x38>
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
 8005d92:	2b40      	cmp	r3, #64	@ 0x40
 8005d94:	f040 80b1 	bne.w	8005efa <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10d      	bne.n	8005dce <HAL_I2C_EV_IRQHandler+0x6e>
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005db8:	d003      	beq.n	8005dc2 <HAL_I2C_EV_IRQHandler+0x62>
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005dc0:	d101      	bne.n	8005dc6 <HAL_I2C_EV_IRQHandler+0x66>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <HAL_I2C_EV_IRQHandler+0x68>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	f000 8114 	beq.w	8005ff6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00b      	beq.n	8005df0 <HAL_I2C_EV_IRQHandler+0x90>
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d006      	beq.n	8005df0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f001 ffcd 	bl	8007d82 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fd5c 	bl	80068a6 <I2C_Master_SB>
 8005dee:	e083      	b.n	8005ef8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d008      	beq.n	8005e0c <HAL_I2C_EV_IRQHandler+0xac>
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fdd4 	bl	80069b2 <I2C_Master_ADD10>
 8005e0a:	e075      	b.n	8005ef8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d008      	beq.n	8005e28 <HAL_I2C_EV_IRQHandler+0xc8>
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fdf0 	bl	8006a06 <I2C_Master_ADDR>
 8005e26:	e067      	b.n	8005ef8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d036      	beq.n	8005ea0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e40:	f000 80db 	beq.w	8005ffa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00d      	beq.n	8005e6a <HAL_I2C_EV_IRQHandler+0x10a>
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d008      	beq.n	8005e6a <HAL_I2C_EV_IRQHandler+0x10a>
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f9b8 	bl	80061d8 <I2C_MasterTransmit_TXE>
 8005e68:	e046      	b.n	8005ef8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 80c2 	beq.w	8005ffa <HAL_I2C_EV_IRQHandler+0x29a>
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 80bc 	beq.w	8005ffa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005e82:	7bbb      	ldrb	r3, [r7, #14]
 8005e84:	2b21      	cmp	r3, #33	@ 0x21
 8005e86:	d103      	bne.n	8005e90 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fa41 	bl	8006310 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e8e:	e0b4      	b.n	8005ffa <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	2b40      	cmp	r3, #64	@ 0x40
 8005e94:	f040 80b1 	bne.w	8005ffa <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 faaf 	bl	80063fc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e9e:	e0ac      	b.n	8005ffa <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eae:	f000 80a4 	beq.w	8005ffa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00d      	beq.n	8005ed8 <HAL_I2C_EV_IRQHandler+0x178>
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d008      	beq.n	8005ed8 <HAL_I2C_EV_IRQHandler+0x178>
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d103      	bne.n	8005ed8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fb2b 	bl	800652c <I2C_MasterReceive_RXNE>
 8005ed6:	e00f      	b.n	8005ef8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 808b 	beq.w	8005ffa <HAL_I2C_EV_IRQHandler+0x29a>
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 8085 	beq.w	8005ffa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fbe3 	bl	80066bc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ef6:	e080      	b.n	8005ffa <HAL_I2C_EV_IRQHandler+0x29a>
 8005ef8:	e07f      	b.n	8005ffa <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d004      	beq.n	8005f0c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	61fb      	str	r3, [r7, #28]
 8005f0a:	e007      	b.n	8005f1c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d011      	beq.n	8005f4a <HAL_I2C_EV_IRQHandler+0x1ea>
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00c      	beq.n	8005f4a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005f40:	69b9      	ldr	r1, [r7, #24]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 ffae 	bl	8006ea4 <I2C_Slave_ADDR>
 8005f48:	e05a      	b.n	8006000 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	f003 0310 	and.w	r3, r3, #16
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d008      	beq.n	8005f66 <HAL_I2C_EV_IRQHandler+0x206>
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 ffe8 	bl	8006f34 <I2C_Slave_STOPF>
 8005f64:	e04c      	b.n	8006000 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f66:	7bbb      	ldrb	r3, [r7, #14]
 8005f68:	2b21      	cmp	r3, #33	@ 0x21
 8005f6a:	d002      	beq.n	8005f72 <HAL_I2C_EV_IRQHandler+0x212>
 8005f6c:	7bbb      	ldrb	r3, [r7, #14]
 8005f6e:	2b29      	cmp	r3, #41	@ 0x29
 8005f70:	d120      	bne.n	8005fb4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00d      	beq.n	8005f98 <HAL_I2C_EV_IRQHandler+0x238>
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d008      	beq.n	8005f98 <HAL_I2C_EV_IRQHandler+0x238>
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d103      	bne.n	8005f98 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fec9 	bl	8006d28 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f96:	e032      	b.n	8005ffe <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	f003 0304 	and.w	r3, r3, #4
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d02d      	beq.n	8005ffe <HAL_I2C_EV_IRQHandler+0x29e>
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d028      	beq.n	8005ffe <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fef8 	bl	8006da2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fb2:	e024      	b.n	8005ffe <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00d      	beq.n	8005fda <HAL_I2C_EV_IRQHandler+0x27a>
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d008      	beq.n	8005fda <HAL_I2C_EV_IRQHandler+0x27a>
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d103      	bne.n	8005fda <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 ff06 	bl	8006de4 <I2C_SlaveReceive_RXNE>
 8005fd8:	e012      	b.n	8006000 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00d      	beq.n	8006000 <HAL_I2C_EV_IRQHandler+0x2a0>
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d008      	beq.n	8006000 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 ff36 	bl	8006e60 <I2C_SlaveReceive_BTF>
 8005ff4:	e004      	b.n	8006000 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8005ff6:	bf00      	nop
 8005ff8:	e002      	b.n	8006000 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ffa:	bf00      	nop
 8005ffc:	e000      	b.n	8006000 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ffe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006000:	3720      	adds	r7, #32
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b08a      	sub	sp, #40	@ 0x28
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800601e:	2300      	movs	r3, #0
 8006020:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006028:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00d      	beq.n	8006050 <HAL_I2C_ER_IRQHandler+0x4a>
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800603a:	2b00      	cmp	r3, #0
 800603c:	d008      	beq.n	8006050 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	f043 0301 	orr.w	r3, r3, #1
 8006044:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800604e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00d      	beq.n	8006076 <HAL_I2C_ER_IRQHandler+0x70>
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006066:	f043 0302 	orr.w	r3, r3, #2
 800606a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8006074:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800607c:	2b00      	cmp	r3, #0
 800607e:	d03e      	beq.n	80060fe <HAL_I2C_ER_IRQHandler+0xf8>
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006086:	2b00      	cmp	r3, #0
 8006088:	d039      	beq.n	80060fe <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800608a:	7efb      	ldrb	r3, [r7, #27]
 800608c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006092:	b29b      	uxth	r3, r3
 8006094:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800609c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80060a4:	7ebb      	ldrb	r3, [r7, #26]
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	d112      	bne.n	80060d0 <HAL_I2C_ER_IRQHandler+0xca>
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10f      	bne.n	80060d0 <HAL_I2C_ER_IRQHandler+0xca>
 80060b0:	7cfb      	ldrb	r3, [r7, #19]
 80060b2:	2b21      	cmp	r3, #33	@ 0x21
 80060b4:	d008      	beq.n	80060c8 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80060b6:	7cfb      	ldrb	r3, [r7, #19]
 80060b8:	2b29      	cmp	r3, #41	@ 0x29
 80060ba:	d005      	beq.n	80060c8 <HAL_I2C_ER_IRQHandler+0xc2>
 80060bc:	7cfb      	ldrb	r3, [r7, #19]
 80060be:	2b28      	cmp	r3, #40	@ 0x28
 80060c0:	d106      	bne.n	80060d0 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b21      	cmp	r3, #33	@ 0x21
 80060c6:	d103      	bne.n	80060d0 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f001 f863 	bl	8007194 <I2C_Slave_AF>
 80060ce:	e016      	b.n	80060fe <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060d8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	f043 0304 	orr.w	r3, r3, #4
 80060e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80060e2:	7efb      	ldrb	r3, [r7, #27]
 80060e4:	2b10      	cmp	r3, #16
 80060e6:	d002      	beq.n	80060ee <HAL_I2C_ER_IRQHandler+0xe8>
 80060e8:	7efb      	ldrb	r3, [r7, #27]
 80060ea:	2b40      	cmp	r3, #64	@ 0x40
 80060ec:	d107      	bne.n	80060fe <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060fc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00d      	beq.n	8006124 <HAL_I2C_ER_IRQHandler+0x11e>
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800610e:	2b00      	cmp	r3, #0
 8006110:	d008      	beq.n	8006124 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	f043 0308 	orr.w	r3, r3, #8
 8006118:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8006122:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006126:	2b00      	cmp	r3, #0
 8006128:	d008      	beq.n	800613c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800612e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f001 f8a0 	bl	800727c <I2C_ITError>
  }
}
 800613c:	bf00      	nop
 800613e:	3728      	adds	r7, #40	@ 0x28
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	70fb      	strb	r3, [r7, #3]
 8006178:	4613      	mov	r3, r2
 800617a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d150      	bne.n	80062a0 <I2C_MasterTransmit_TXE+0xc8>
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
 8006200:	2b21      	cmp	r3, #33	@ 0x21
 8006202:	d14d      	bne.n	80062a0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b08      	cmp	r3, #8
 8006208:	d01d      	beq.n	8006246 <I2C_MasterTransmit_TXE+0x6e>
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b20      	cmp	r3, #32
 800620e:	d01a      	beq.n	8006246 <I2C_MasterTransmit_TXE+0x6e>
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006216:	d016      	beq.n	8006246 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006226:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2211      	movs	r2, #17
 800622c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fc f97c 	bl	800253c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006244:	e060      	b.n	8006308 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006254:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006264:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2220      	movs	r2, #32
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b40      	cmp	r3, #64	@ 0x40
 800627e:	d107      	bne.n	8006290 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff ff87 	bl	800619c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800628e:	e03b      	b.n	8006308 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7fc f94f 	bl	800253c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800629e:	e033      	b.n	8006308 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	2b21      	cmp	r3, #33	@ 0x21
 80062a4:	d005      	beq.n	80062b2 <I2C_MasterTransmit_TXE+0xda>
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
 80062a8:	2b40      	cmp	r3, #64	@ 0x40
 80062aa:	d12d      	bne.n	8006308 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	2b22      	cmp	r3, #34	@ 0x22
 80062b0:	d12a      	bne.n	8006308 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d108      	bne.n	80062ce <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062ca:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80062cc:	e01c      	b.n	8006308 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b40      	cmp	r3, #64	@ 0x40
 80062d8:	d103      	bne.n	80062e2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f88e 	bl	80063fc <I2C_MemoryTransmit_TXE_BTF>
}
 80062e0:	e012      	b.n	8006308 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e6:	781a      	ldrb	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006306:	e7ff      	b.n	8006308 <I2C_MasterTransmit_TXE+0x130>
 8006308:	bf00      	nop
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b21      	cmp	r3, #33	@ 0x21
 8006328:	d164      	bne.n	80063f4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800632e:	b29b      	uxth	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d012      	beq.n	800635a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006338:	781a      	ldrb	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006358:	e04c      	b.n	80063f4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b08      	cmp	r3, #8
 800635e:	d01d      	beq.n	800639c <I2C_MasterTransmit_BTF+0x8c>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2b20      	cmp	r3, #32
 8006364:	d01a      	beq.n	800639c <I2C_MasterTransmit_BTF+0x8c>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800636c:	d016      	beq.n	800639c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800637c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2211      	movs	r2, #17
 8006382:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2220      	movs	r2, #32
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7fc f8d1 	bl	800253c <HAL_I2C_MasterTxCpltCallback>
}
 800639a:	e02b      	b.n	80063f4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80063aa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063ba:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b40      	cmp	r3, #64	@ 0x40
 80063d4:	d107      	bne.n	80063e6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff fedc 	bl	800619c <HAL_I2C_MemTxCpltCallback>
}
 80063e4:	e006      	b.n	80063f4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fc f8a4 	bl	800253c <HAL_I2C_MasterTxCpltCallback>
}
 80063f4:	bf00      	nop
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800640a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006410:	2b00      	cmp	r3, #0
 8006412:	d11d      	bne.n	8006450 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006418:	2b01      	cmp	r3, #1
 800641a:	d10b      	bne.n	8006434 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006420:	b2da      	uxtb	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800642c:	1c9a      	adds	r2, r3, #2
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006432:	e077      	b.n	8006524 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006438:	b29b      	uxth	r3, r3
 800643a:	121b      	asrs	r3, r3, #8
 800643c:	b2da      	uxtb	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800644e:	e069      	b.n	8006524 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006454:	2b01      	cmp	r3, #1
 8006456:	d10b      	bne.n	8006470 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800645c:	b2da      	uxtb	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800646e:	e059      	b.n	8006524 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006474:	2b02      	cmp	r3, #2
 8006476:	d152      	bne.n	800651e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	2b22      	cmp	r3, #34	@ 0x22
 800647c:	d10d      	bne.n	800649a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800648c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006498:	e044      	b.n	8006524 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800649e:	b29b      	uxth	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d015      	beq.n	80064d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
 80064a6:	2b21      	cmp	r3, #33	@ 0x21
 80064a8:	d112      	bne.n	80064d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ae:	781a      	ldrb	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80064ce:	e029      	b.n	8006524 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d124      	bne.n	8006524 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	2b21      	cmp	r3, #33	@ 0x21
 80064de:	d121      	bne.n	8006524 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80064ee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2220      	movs	r2, #32
 800650a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7ff fe40 	bl	800619c <HAL_I2C_MemTxCpltCallback>
}
 800651c:	e002      	b.n	8006524 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff f8b2 	bl	8005688 <I2C_Flush_DR>
}
 8006524:	bf00      	nop
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b22      	cmp	r3, #34	@ 0x22
 800653e:	f040 80b9 	bne.w	80066b4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006546:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800654c:	b29b      	uxth	r3, r3
 800654e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2b03      	cmp	r3, #3
 8006554:	d921      	bls.n	800659a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	691a      	ldr	r2, [r3, #16]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006560:	b2d2      	uxtb	r2, r2
 8006562:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006572:	b29b      	uxth	r3, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006580:	b29b      	uxth	r3, r3
 8006582:	2b03      	cmp	r3, #3
 8006584:	f040 8096 	bne.w	80066b4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006596:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006598:	e08c      	b.n	80066b4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d07f      	beq.n	80066a2 <I2C_MasterReceive_RXNE+0x176>
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d002      	beq.n	80065ae <I2C_MasterReceive_RXNE+0x82>
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d179      	bne.n	80066a2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f001 fb86 	bl	8007cc0 <I2C_WaitOnSTOPRequestThroughIT>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d14c      	bne.n	8006654 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065c8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80065d8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2220      	movs	r2, #32
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b40      	cmp	r3, #64	@ 0x40
 8006612:	d10a      	bne.n	800662a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7ff fdc4 	bl	80061b0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006628:	e044      	b.n	80066b4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b08      	cmp	r3, #8
 8006636:	d002      	beq.n	800663e <I2C_MasterReceive_RXNE+0x112>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b20      	cmp	r3, #32
 800663c:	d103      	bne.n	8006646 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	631a      	str	r2, [r3, #48]	@ 0x30
 8006644:	e002      	b.n	800664c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2212      	movs	r2, #18
 800664a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7fb ff95 	bl	800257c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006652:	e02f      	b.n	80066b4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006662:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691a      	ldr	r2, [r3, #16]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2220      	movs	r2, #32
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7fb ffa4 	bl	80025e8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80066a0:	e008      	b.n	80066b4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066b0:	605a      	str	r2, [r3, #4]
}
 80066b2:	e7ff      	b.n	80066b4 <I2C_MasterReceive_RXNE+0x188>
 80066b4:	bf00      	nop
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	d11b      	bne.n	800670c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066e2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691a      	ldr	r2, [r3, #16]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006700:	b29b      	uxth	r3, r3
 8006702:	3b01      	subs	r3, #1
 8006704:	b29a      	uxth	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800670a:	e0c8      	b.n	800689e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b03      	cmp	r3, #3
 8006714:	d129      	bne.n	800676a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006724:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b04      	cmp	r3, #4
 800672a:	d00a      	beq.n	8006742 <I2C_MasterReceive_BTF+0x86>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d007      	beq.n	8006742 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006740:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	691a      	ldr	r2, [r3, #16]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800675e:	b29b      	uxth	r3, r3
 8006760:	3b01      	subs	r3, #1
 8006762:	b29a      	uxth	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006768:	e099      	b.n	800689e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	f040 8081 	bne.w	8006878 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d002      	beq.n	8006782 <I2C_MasterReceive_BTF+0xc6>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2b10      	cmp	r3, #16
 8006780:	d108      	bne.n	8006794 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	e019      	b.n	80067c8 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b04      	cmp	r3, #4
 8006798:	d002      	beq.n	80067a0 <I2C_MasterReceive_BTF+0xe4>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b02      	cmp	r3, #2
 800679e:	d108      	bne.n	80067b2 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	e00a      	b.n	80067c8 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b10      	cmp	r3, #16
 80067b6:	d007      	beq.n	80067c8 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067c6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691a      	ldr	r2, [r3, #16]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	3b01      	subs	r3, #1
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	691a      	ldr	r2, [r3, #16]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006800:	1c5a      	adds	r2, r3, #1
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800680a:	b29b      	uxth	r3, r3
 800680c:	3b01      	subs	r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006822:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2220      	movs	r2, #32
 8006828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b40      	cmp	r3, #64	@ 0x40
 8006836:	d10a      	bne.n	800684e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff fcb2 	bl	80061b0 <HAL_I2C_MemRxCpltCallback>
}
 800684c:	e027      	b.n	800689e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b08      	cmp	r3, #8
 800685a:	d002      	beq.n	8006862 <I2C_MasterReceive_BTF+0x1a6>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b20      	cmp	r3, #32
 8006860:	d103      	bne.n	800686a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	631a      	str	r2, [r3, #48]	@ 0x30
 8006868:	e002      	b.n	8006870 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2212      	movs	r2, #18
 800686e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7fb fe83 	bl	800257c <HAL_I2C_MasterRxCpltCallback>
}
 8006876:	e012      	b.n	800689e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	691a      	ldr	r2, [r3, #16]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006882:	b2d2      	uxtb	r2, r2
 8006884:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	b29a      	uxth	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800689e:	bf00      	nop
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b40      	cmp	r3, #64	@ 0x40
 80068b8:	d117      	bne.n	80068ea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d109      	bne.n	80068d6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80068d2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80068d4:	e067      	b.n	80069a6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	f043 0301 	orr.w	r3, r3, #1
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	611a      	str	r2, [r3, #16]
}
 80068e8:	e05d      	b.n	80069a6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068f2:	d133      	bne.n	800695c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b21      	cmp	r3, #33	@ 0x21
 80068fe:	d109      	bne.n	8006914 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006904:	b2db      	uxtb	r3, r3
 8006906:	461a      	mov	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006910:	611a      	str	r2, [r3, #16]
 8006912:	e008      	b.n	8006926 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006918:	b2db      	uxtb	r3, r3
 800691a:	f043 0301 	orr.w	r3, r3, #1
 800691e:	b2da      	uxtb	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800692a:	2b00      	cmp	r3, #0
 800692c:	d004      	beq.n	8006938 <I2C_Master_SB+0x92>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d108      	bne.n	800694a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800693c:	2b00      	cmp	r3, #0
 800693e:	d032      	beq.n	80069a6 <I2C_Master_SB+0x100>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006946:	2b00      	cmp	r3, #0
 8006948:	d02d      	beq.n	80069a6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006958:	605a      	str	r2, [r3, #4]
}
 800695a:	e024      	b.n	80069a6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10e      	bne.n	8006982 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006968:	b29b      	uxth	r3, r3
 800696a:	11db      	asrs	r3, r3, #7
 800696c:	b2db      	uxtb	r3, r3
 800696e:	f003 0306 	and.w	r3, r3, #6
 8006972:	b2db      	uxtb	r3, r3
 8006974:	f063 030f 	orn	r3, r3, #15
 8006978:	b2da      	uxtb	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	611a      	str	r2, [r3, #16]
}
 8006980:	e011      	b.n	80069a6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006986:	2b01      	cmp	r3, #1
 8006988:	d10d      	bne.n	80069a6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800698e:	b29b      	uxth	r3, r3
 8006990:	11db      	asrs	r3, r3, #7
 8006992:	b2db      	uxtb	r3, r3
 8006994:	f003 0306 	and.w	r3, r3, #6
 8006998:	b2db      	uxtb	r3, r3
 800699a:	f063 030e 	orn	r3, r3, #14
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	611a      	str	r2, [r3, #16]
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d004      	beq.n	80069d8 <I2C_Master_ADD10+0x26>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d108      	bne.n	80069ea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00c      	beq.n	80069fa <I2C_Master_ADD10+0x48>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d007      	beq.n	80069fa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069f8:	605a      	str	r2, [r3, #4]
  }
}
 80069fa:	bf00      	nop
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b091      	sub	sp, #68	@ 0x44
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a22:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b22      	cmp	r3, #34	@ 0x22
 8006a2e:	f040 8169 	bne.w	8006d04 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10f      	bne.n	8006a5a <I2C_Master_ADDR+0x54>
 8006a3a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006a3e:	2b40      	cmp	r3, #64	@ 0x40
 8006a40:	d10b      	bne.n	8006a5a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a42:	2300      	movs	r3, #0
 8006a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a58:	e160      	b.n	8006d1c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d11d      	bne.n	8006a9e <I2C_Master_ADDR+0x98>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006a6a:	d118      	bne.n	8006a9e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a90:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	651a      	str	r2, [r3, #80]	@ 0x50
 8006a9c:	e13e      	b.n	8006d1c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d113      	bne.n	8006ad0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	e115      	b.n	8006cfc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	f040 808a 	bne.w	8006bf0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ade:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ae2:	d137      	bne.n	8006b54 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006af2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b02:	d113      	bne.n	8006b2c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b12:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b14:	2300      	movs	r3, #0
 8006b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2a:	e0e7      	b.n	8006cfc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	623b      	str	r3, [r7, #32]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	623b      	str	r3, [r7, #32]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	623b      	str	r3, [r7, #32]
 8006b40:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e0d3      	b.n	8006cfc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	d02e      	beq.n	8006bb8 <I2C_Master_ADDR+0x1b2>
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d02b      	beq.n	8006bb8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b62:	2b12      	cmp	r3, #18
 8006b64:	d102      	bne.n	8006b6c <I2C_Master_ADDR+0x166>
 8006b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d125      	bne.n	8006bb8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d00e      	beq.n	8006b90 <I2C_Master_ADDR+0x18a>
 8006b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d00b      	beq.n	8006b90 <I2C_Master_ADDR+0x18a>
 8006b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7a:	2b10      	cmp	r3, #16
 8006b7c:	d008      	beq.n	8006b90 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	e007      	b.n	8006ba0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b9e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61fb      	str	r3, [r7, #28]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	61fb      	str	r3, [r7, #28]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	e0a1      	b.n	8006cfc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bc6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bc8:	2300      	movs	r3, #0
 8006bca:	61bb      	str	r3, [r7, #24]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	61bb      	str	r3, [r7, #24]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	61bb      	str	r3, [r7, #24]
 8006bdc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	e085      	b.n	8006cfc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d14d      	bne.n	8006c96 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfc:	2b04      	cmp	r3, #4
 8006bfe:	d016      	beq.n	8006c2e <I2C_Master_ADDR+0x228>
 8006c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d013      	beq.n	8006c2e <I2C_Master_ADDR+0x228>
 8006c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c08:	2b10      	cmp	r3, #16
 8006c0a:	d010      	beq.n	8006c2e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c1a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	e007      	b.n	8006c3e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006c3c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c4c:	d117      	bne.n	8006c7e <I2C_Master_ADDR+0x278>
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c54:	d00b      	beq.n	8006c6e <I2C_Master_ADDR+0x268>
 8006c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d008      	beq.n	8006c6e <I2C_Master_ADDR+0x268>
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	d005      	beq.n	8006c6e <I2C_Master_ADDR+0x268>
 8006c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c64:	2b10      	cmp	r3, #16
 8006c66:	d002      	beq.n	8006c6e <I2C_Master_ADDR+0x268>
 8006c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6a:	2b20      	cmp	r3, #32
 8006c6c:	d107      	bne.n	8006c7e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c7c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c7e:	2300      	movs	r3, #0
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	617b      	str	r3, [r7, #20]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	617b      	str	r3, [r7, #20]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	e032      	b.n	8006cfc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ca4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cb4:	d117      	bne.n	8006ce6 <I2C_Master_ADDR+0x2e0>
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006cbc:	d00b      	beq.n	8006cd6 <I2C_Master_ADDR+0x2d0>
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d008      	beq.n	8006cd6 <I2C_Master_ADDR+0x2d0>
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc6:	2b08      	cmp	r3, #8
 8006cc8:	d005      	beq.n	8006cd6 <I2C_Master_ADDR+0x2d0>
 8006cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ccc:	2b10      	cmp	r3, #16
 8006cce:	d002      	beq.n	8006cd6 <I2C_Master_ADDR+0x2d0>
 8006cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d107      	bne.n	8006ce6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ce4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	613b      	str	r3, [r7, #16]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	613b      	str	r3, [r7, #16]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	613b      	str	r3, [r7, #16]
 8006cfa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006d02:	e00b      	b.n	8006d1c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	68fb      	ldr	r3, [r7, #12]
}
 8006d1a:	e7ff      	b.n	8006d1c <I2C_Master_ADDR+0x316>
 8006d1c:	bf00      	nop
 8006d1e:	3744      	adds	r7, #68	@ 0x44
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d36:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d02b      	beq.n	8006d9a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d46:	781a      	ldrb	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d114      	bne.n	8006d9a <I2C_SlaveTransmit_TXE+0x72>
 8006d70:	7bfb      	ldrb	r3, [r7, #15]
 8006d72:	2b29      	cmp	r3, #41	@ 0x29
 8006d74:	d111      	bne.n	8006d9a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d84:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2221      	movs	r2, #33	@ 0x21
 8006d8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2228      	movs	r2, #40	@ 0x28
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7ff f9d5 	bl	8006144 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d011      	beq.n	8006dd8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db8:	781a      	ldrb	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006df2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d02c      	beq.n	8006e58 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e08:	b2d2      	uxtb	r2, r2
 8006e0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d114      	bne.n	8006e58 <I2C_SlaveReceive_RXNE+0x74>
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
 8006e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e32:	d111      	bne.n	8006e58 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e42:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2222      	movs	r2, #34	@ 0x22
 8006e48:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2228      	movs	r2, #40	@ 0x28
 8006e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff f980 	bl	8006158 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006e58:	bf00      	nop
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d012      	beq.n	8006e98 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	691a      	ldr	r2, [r3, #16]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	b2d2      	uxtb	r2, r2
 8006e7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	3b01      	subs	r3, #1
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006ebe:	2b28      	cmp	r3, #40	@ 0x28
 8006ec0:	d125      	bne.n	8006f0e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ed0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006edc:	2301      	movs	r3, #1
 8006ede:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d103      	bne.n	8006ef2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	81bb      	strh	r3, [r7, #12]
 8006ef0:	e002      	b.n	8006ef8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006f00:	89ba      	ldrh	r2, [r7, #12]
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff f930 	bl	800616c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006f0c:	e00e      	b.n	8006f2c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60bb      	str	r3, [r7, #8]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	60bb      	str	r3, [r7, #8]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	60bb      	str	r3, [r7, #8]
 8006f22:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006f2c:	bf00      	nop
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f42:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006f52:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006f54:	2300      	movs	r3, #0
 8006f56:	60bb      	str	r3, [r7, #8]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	60bb      	str	r3, [r7, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0201 	orr.w	r2, r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f80:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f90:	d172      	bne.n	8007078 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	2b22      	cmp	r3, #34	@ 0x22
 8006f96:	d002      	beq.n	8006f9e <I2C_Slave_STOPF+0x6a>
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f9c:	d135      	bne.n	800700a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d005      	beq.n	8006fc2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fba:	f043 0204 	orr.w	r2, r3, #4
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fd0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fd ff62 	bl	8004ea0 <HAL_DMA_GetState>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d049      	beq.n	8007076 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe6:	4a69      	ldr	r2, [pc, #420]	@ (800718c <I2C_Slave_STOPF+0x258>)
 8006fe8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fd fdaa 	bl	8004b48 <HAL_DMA_Abort_IT>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d03d      	beq.n	8007076 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007004:	4610      	mov	r0, r2
 8007006:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007008:	e035      	b.n	8007076 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	b29a      	uxth	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800701c:	b29b      	uxth	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007026:	f043 0204 	orr.w	r2, r3, #4
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800703c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007042:	4618      	mov	r0, r3
 8007044:	f7fd ff2c 	bl	8004ea0 <HAL_DMA_GetState>
 8007048:	4603      	mov	r3, r0
 800704a:	2b01      	cmp	r3, #1
 800704c:	d014      	beq.n	8007078 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007052:	4a4e      	ldr	r2, [pc, #312]	@ (800718c <I2C_Slave_STOPF+0x258>)
 8007054:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800705a:	4618      	mov	r0, r3
 800705c:	f7fd fd74 	bl	8004b48 <HAL_DMA_Abort_IT>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d008      	beq.n	8007078 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800706a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007070:	4610      	mov	r0, r2
 8007072:	4798      	blx	r3
 8007074:	e000      	b.n	8007078 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007076:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d03e      	beq.n	8007100 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b04      	cmp	r3, #4
 800708e:	d112      	bne.n	80070b6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	3b01      	subs	r3, #1
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c0:	2b40      	cmp	r3, #64	@ 0x40
 80070c2:	d112      	bne.n	80070ea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	691a      	ldr	r2, [r3, #16]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f8:	f043 0204 	orr.w	r2, r3, #4
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f8b7 	bl	800727c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800710e:	e039      	b.n	8007184 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	2b2a      	cmp	r3, #42	@ 0x2a
 8007114:	d109      	bne.n	800712a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2228      	movs	r2, #40	@ 0x28
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7ff f817 	bl	8006158 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b28      	cmp	r3, #40	@ 0x28
 8007134:	d111      	bne.n	800715a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a15      	ldr	r2, [pc, #84]	@ (8007190 <I2C_Slave_STOPF+0x25c>)
 800713a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff f818 	bl	8006188 <HAL_I2C_ListenCpltCallback>
}
 8007158:	e014      	b.n	8007184 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800715e:	2b22      	cmp	r3, #34	@ 0x22
 8007160:	d002      	beq.n	8007168 <I2C_Slave_STOPF+0x234>
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	2b22      	cmp	r3, #34	@ 0x22
 8007166:	d10d      	bne.n	8007184 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2220      	movs	r2, #32
 8007172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fe ffea 	bl	8006158 <HAL_I2C_SlaveRxCpltCallback>
}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	0800781d 	.word	0x0800781d
 8007190:	ffff0000 	.word	0xffff0000

08007194 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071a2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d002      	beq.n	80071b6 <I2C_Slave_AF+0x22>
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2b20      	cmp	r3, #32
 80071b4:	d129      	bne.n	800720a <I2C_Slave_AF+0x76>
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
 80071b8:	2b28      	cmp	r3, #40	@ 0x28
 80071ba:	d126      	bne.n	800720a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a2e      	ldr	r2, [pc, #184]	@ (8007278 <I2C_Slave_AF+0xe4>)
 80071c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80071d0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80071da:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071ea:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fe ffc0 	bl	8006188 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007208:	e031      	b.n	800726e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	2b21      	cmp	r3, #33	@ 0x21
 800720e:	d129      	bne.n	8007264 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a19      	ldr	r2, [pc, #100]	@ (8007278 <I2C_Slave_AF+0xe4>)
 8007214:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2221      	movs	r2, #33	@ 0x21
 800721a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800723a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007244:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007254:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7fe fa16 	bl	8005688 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7fe ff71 	bl	8006144 <HAL_I2C_SlaveTxCpltCallback>
}
 8007262:	e004      	b.n	800726e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800726c:	615a      	str	r2, [r3, #20]
}
 800726e:	bf00      	nop
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	ffff0000 	.word	0xffff0000

0800727c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800728a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007292:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	2b10      	cmp	r3, #16
 8007298:	d002      	beq.n	80072a0 <I2C_ITError+0x24>
 800729a:	7bbb      	ldrb	r3, [r7, #14]
 800729c:	2b40      	cmp	r3, #64	@ 0x40
 800729e:	d10a      	bne.n	80072b6 <I2C_ITError+0x3a>
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	2b22      	cmp	r3, #34	@ 0x22
 80072a4:	d107      	bne.n	80072b6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072b4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
 80072b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80072bc:	2b28      	cmp	r3, #40	@ 0x28
 80072be:	d107      	bne.n	80072d0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2228      	movs	r2, #40	@ 0x28
 80072ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80072ce:	e015      	b.n	80072fc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072de:	d00a      	beq.n	80072f6 <I2C_ITError+0x7a>
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	2b60      	cmp	r3, #96	@ 0x60
 80072e4:	d007      	beq.n	80072f6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007306:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800730a:	d162      	bne.n	80073d2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800731a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007320:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b01      	cmp	r3, #1
 8007328:	d020      	beq.n	800736c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800732e:	4a6a      	ldr	r2, [pc, #424]	@ (80074d8 <I2C_ITError+0x25c>)
 8007330:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007336:	4618      	mov	r0, r3
 8007338:	f7fd fc06 	bl	8004b48 <HAL_DMA_Abort_IT>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 8089 	beq.w	8007456 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0201 	bic.w	r2, r2, #1
 8007352:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2220      	movs	r2, #32
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007366:	4610      	mov	r0, r2
 8007368:	4798      	blx	r3
 800736a:	e074      	b.n	8007456 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007370:	4a59      	ldr	r2, [pc, #356]	@ (80074d8 <I2C_ITError+0x25c>)
 8007372:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007378:	4618      	mov	r0, r3
 800737a:	f7fd fbe5 	bl	8004b48 <HAL_DMA_Abort_IT>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d068      	beq.n	8007456 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800738e:	2b40      	cmp	r3, #64	@ 0x40
 8007390:	d10b      	bne.n	80073aa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	691a      	ldr	r2, [r3, #16]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739c:	b2d2      	uxtb	r2, r2
 800739e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f022 0201 	bic.w	r2, r2, #1
 80073b8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2220      	movs	r2, #32
 80073be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80073cc:	4610      	mov	r0, r2
 80073ce:	4798      	blx	r3
 80073d0:	e041      	b.n	8007456 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b60      	cmp	r3, #96	@ 0x60
 80073dc:	d125      	bne.n	800742a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2220      	movs	r2, #32
 80073e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f6:	2b40      	cmp	r3, #64	@ 0x40
 80073f8:	d10b      	bne.n	8007412 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	691a      	ldr	r2, [r3, #16]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007404:	b2d2      	uxtb	r2, r2
 8007406:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f022 0201 	bic.w	r2, r2, #1
 8007420:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7fe fece 	bl	80061c4 <HAL_I2C_AbortCpltCallback>
 8007428:	e015      	b.n	8007456 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007434:	2b40      	cmp	r3, #64	@ 0x40
 8007436:	d10b      	bne.n	8007450 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	691a      	ldr	r2, [r3, #16]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007442:	b2d2      	uxtb	r2, r2
 8007444:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7fb f8c9 	bl	80025e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10e      	bne.n	8007484 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800746c:	2b00      	cmp	r3, #0
 800746e:	d109      	bne.n	8007484 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007476:	2b00      	cmp	r3, #0
 8007478:	d104      	bne.n	8007484 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007480:	2b00      	cmp	r3, #0
 8007482:	d007      	beq.n	8007494 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007492:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800749a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a0:	f003 0304 	and.w	r3, r3, #4
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	d113      	bne.n	80074d0 <I2C_ITError+0x254>
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	2b28      	cmp	r3, #40	@ 0x28
 80074ac:	d110      	bne.n	80074d0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a0a      	ldr	r2, [pc, #40]	@ (80074dc <I2C_ITError+0x260>)
 80074b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2220      	movs	r2, #32
 80074be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7fe fe5c 	bl	8006188 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80074d0:	bf00      	nop
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	0800781d 	.word	0x0800781d
 80074dc:	ffff0000 	.word	0xffff0000

080074e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b088      	sub	sp, #32
 80074e4:	af02      	add	r7, sp, #8
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	607a      	str	r2, [r7, #4]
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	460b      	mov	r3, r1
 80074ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d006      	beq.n	800750a <I2C_MasterRequestWrite+0x2a>
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d003      	beq.n	800750a <I2C_MasterRequestWrite+0x2a>
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007508:	d108      	bne.n	800751c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	e00b      	b.n	8007534 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007520:	2b12      	cmp	r3, #18
 8007522:	d107      	bne.n	8007534 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007532:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 fa13 	bl	800796c <I2C_WaitOnFlagUntilTimeout>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00d      	beq.n	8007568 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800755a:	d103      	bne.n	8007564 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007562:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e035      	b.n	80075d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007570:	d108      	bne.n	8007584 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007572:	897b      	ldrh	r3, [r7, #10]
 8007574:	b2db      	uxtb	r3, r3
 8007576:	461a      	mov	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007580:	611a      	str	r2, [r3, #16]
 8007582:	e01b      	b.n	80075bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007584:	897b      	ldrh	r3, [r7, #10]
 8007586:	11db      	asrs	r3, r3, #7
 8007588:	b2db      	uxtb	r3, r3
 800758a:	f003 0306 	and.w	r3, r3, #6
 800758e:	b2db      	uxtb	r3, r3
 8007590:	f063 030f 	orn	r3, r3, #15
 8007594:	b2da      	uxtb	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	490e      	ldr	r1, [pc, #56]	@ (80075dc <I2C_MasterRequestWrite+0xfc>)
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 fa5c 	bl	8007a60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e010      	b.n	80075d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80075b2:	897b      	ldrh	r3, [r7, #10]
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	4907      	ldr	r1, [pc, #28]	@ (80075e0 <I2C_MasterRequestWrite+0x100>)
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 fa4c 	bl	8007a60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e000      	b.n	80075d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	00010008 	.word	0x00010008
 80075e0:	00010002 	.word	0x00010002

080075e4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075f8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007600:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007606:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007616:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007624:	2200      	movs	r2, #0
 8007626:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007634:	2200      	movs	r2, #0
 8007636:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8007638:	7cfb      	ldrb	r3, [r7, #19]
 800763a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800763e:	2b21      	cmp	r3, #33	@ 0x21
 8007640:	d007      	beq.n	8007652 <I2C_DMAXferCplt+0x6e>
 8007642:	7cfb      	ldrb	r3, [r7, #19]
 8007644:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8007648:	2b22      	cmp	r3, #34	@ 0x22
 800764a:	d131      	bne.n	80076b0 <I2C_DMAXferCplt+0xcc>
 800764c:	7cbb      	ldrb	r3, [r7, #18]
 800764e:	2b20      	cmp	r3, #32
 8007650:	d12e      	bne.n	80076b0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007660:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2200      	movs	r2, #0
 8007666:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007668:	7cfb      	ldrb	r3, [r7, #19]
 800766a:	2b29      	cmp	r3, #41	@ 0x29
 800766c:	d10a      	bne.n	8007684 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2221      	movs	r2, #33	@ 0x21
 8007672:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	2228      	movs	r2, #40	@ 0x28
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800767c:	6978      	ldr	r0, [r7, #20]
 800767e:	f7fe fd61 	bl	8006144 <HAL_I2C_SlaveTxCpltCallback>
 8007682:	e00c      	b.n	800769e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007684:	7cfb      	ldrb	r3, [r7, #19]
 8007686:	2b2a      	cmp	r3, #42	@ 0x2a
 8007688:	d109      	bne.n	800769e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2222      	movs	r2, #34	@ 0x22
 800768e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2228      	movs	r2, #40	@ 0x28
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007698:	6978      	ldr	r0, [r7, #20]
 800769a:	f7fe fd5d 	bl	8006158 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80076ac:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80076ae:	e074      	b.n	800779a <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d06e      	beq.n	800779a <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d107      	bne.n	80076d6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076d4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80076e4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80076ec:	d009      	beq.n	8007702 <I2C_DMAXferCplt+0x11e>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d006      	beq.n	8007702 <I2C_DMAXferCplt+0x11e>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80076fa:	d002      	beq.n	8007702 <I2C_DMAXferCplt+0x11e>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b20      	cmp	r3, #32
 8007700:	d107      	bne.n	8007712 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007710:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007720:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007730:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2200      	movs	r2, #0
 8007736:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773c:	2b00      	cmp	r3, #0
 800773e:	d003      	beq.n	8007748 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8007740:	6978      	ldr	r0, [r7, #20]
 8007742:	f7fa ff51 	bl	80025e8 <HAL_I2C_ErrorCallback>
}
 8007746:	e028      	b.n	800779a <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	2220      	movs	r2, #32
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b40      	cmp	r3, #64	@ 0x40
 800775a:	d10a      	bne.n	8007772 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2200      	movs	r2, #0
 8007768:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800776a:	6978      	ldr	r0, [r7, #20]
 800776c:	f7fe fd20 	bl	80061b0 <HAL_I2C_MemRxCpltCallback>
}
 8007770:	e013      	b.n	800779a <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b08      	cmp	r3, #8
 800777e:	d002      	beq.n	8007786 <I2C_DMAXferCplt+0x1a2>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b20      	cmp	r3, #32
 8007784:	d103      	bne.n	800778e <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2200      	movs	r2, #0
 800778a:	631a      	str	r2, [r3, #48]	@ 0x30
 800778c:	e002      	b.n	8007794 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2212      	movs	r2, #18
 8007792:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007794:	6978      	ldr	r0, [r7, #20]
 8007796:	f7fa fef1 	bl	800257c <HAL_I2C_MasterRxCpltCallback>
}
 800779a:	bf00      	nop
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b084      	sub	sp, #16
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077bc:	2200      	movs	r2, #0
 80077be:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d003      	beq.n	80077d0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077cc:	2200      	movs	r2, #0
 80077ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7fd fb73 	bl	8004ebc <HAL_DMA_GetError>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d01b      	beq.n	8007814 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077ea:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007806:	f043 0210 	orr.w	r2, r3, #16
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f7fa feea 	bl	80025e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007814:	bf00      	nop
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007834:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007836:	4b4b      	ldr	r3, [pc, #300]	@ (8007964 <I2C_DMAAbort+0x148>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	08db      	lsrs	r3, r3, #3
 800783c:	4a4a      	ldr	r2, [pc, #296]	@ (8007968 <I2C_DMAAbort+0x14c>)
 800783e:	fba2 2303 	umull	r2, r3, r2, r3
 8007842:	0a1a      	lsrs	r2, r3, #8
 8007844:	4613      	mov	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	00da      	lsls	r2, r3, #3
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d106      	bne.n	8007864 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785a:	f043 0220 	orr.w	r2, r3, #32
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8007862:	e00a      	b.n	800787a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3b01      	subs	r3, #1
 8007868:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007878:	d0ea      	beq.n	8007850 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007886:	2200      	movs	r2, #0
 8007888:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007896:	2200      	movs	r2, #0
 8007898:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078a8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2200      	movs	r2, #0
 80078ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078bc:	2200      	movs	r2, #0
 80078be:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d003      	beq.n	80078d0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078cc:	2200      	movs	r2, #0
 80078ce:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 0201 	bic.w	r2, r2, #1
 80078de:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b60      	cmp	r3, #96	@ 0x60
 80078ea:	d10e      	bne.n	800790a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2220      	movs	r2, #32
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	2200      	movs	r2, #0
 8007900:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007902:	6978      	ldr	r0, [r7, #20]
 8007904:	f7fe fc5e 	bl	80061c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007908:	e027      	b.n	800795a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800790a:	7cfb      	ldrb	r3, [r7, #19]
 800790c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007910:	2b28      	cmp	r3, #40	@ 0x28
 8007912:	d117      	bne.n	8007944 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f042 0201 	orr.w	r2, r2, #1
 8007922:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007932:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	2200      	movs	r2, #0
 8007938:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2228      	movs	r2, #40	@ 0x28
 800793e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007942:	e007      	b.n	8007954 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	2220      	movs	r2, #32
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007954:	6978      	ldr	r0, [r7, #20]
 8007956:	f7fa fe47 	bl	80025e8 <HAL_I2C_ErrorCallback>
}
 800795a:	bf00      	nop
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20000030 	.word	0x20000030
 8007968:	14f8b589 	.word	0x14f8b589

0800796c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	603b      	str	r3, [r7, #0]
 8007978:	4613      	mov	r3, r2
 800797a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800797c:	e048      	b.n	8007a10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007984:	d044      	beq.n	8007a10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007986:	f7fc fb81 	bl	800408c <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d302      	bcc.n	800799c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d139      	bne.n	8007a10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	0c1b      	lsrs	r3, r3, #16
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d10d      	bne.n	80079c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	43da      	mvns	r2, r3
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	4013      	ands	r3, r2
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	bf0c      	ite	eq
 80079b8:	2301      	moveq	r3, #1
 80079ba:	2300      	movne	r3, #0
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	461a      	mov	r2, r3
 80079c0:	e00c      	b.n	80079dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	43da      	mvns	r2, r3
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	4013      	ands	r3, r2
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	bf0c      	ite	eq
 80079d4:	2301      	moveq	r3, #1
 80079d6:	2300      	movne	r3, #0
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	461a      	mov	r2, r3
 80079dc:	79fb      	ldrb	r3, [r7, #7]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d116      	bne.n	8007a10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2220      	movs	r2, #32
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079fc:	f043 0220 	orr.w	r2, r3, #32
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e023      	b.n	8007a58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	0c1b      	lsrs	r3, r3, #16
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d10d      	bne.n	8007a36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	43da      	mvns	r2, r3
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	4013      	ands	r3, r2
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	bf0c      	ite	eq
 8007a2c:	2301      	moveq	r3, #1
 8007a2e:	2300      	movne	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	461a      	mov	r2, r3
 8007a34:	e00c      	b.n	8007a50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	43da      	mvns	r2, r3
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	4013      	ands	r3, r2
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	bf0c      	ite	eq
 8007a48:	2301      	moveq	r3, #1
 8007a4a:	2300      	movne	r3, #0
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	461a      	mov	r2, r3
 8007a50:	79fb      	ldrb	r3, [r7, #7]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d093      	beq.n	800797e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
 8007a6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a6e:	e071      	b.n	8007b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a7e:	d123      	bne.n	8007ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007a98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab4:	f043 0204 	orr.w	r2, r3, #4
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e067      	b.n	8007b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ace:	d041      	beq.n	8007b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ad0:	f7fc fadc 	bl	800408c <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d302      	bcc.n	8007ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d136      	bne.n	8007b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	0c1b      	lsrs	r3, r3, #16
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d10c      	bne.n	8007b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	43da      	mvns	r2, r3
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	4013      	ands	r3, r2
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	bf14      	ite	ne
 8007b02:	2301      	movne	r3, #1
 8007b04:	2300      	moveq	r3, #0
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	e00b      	b.n	8007b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	43da      	mvns	r2, r3
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	4013      	ands	r3, r2
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	bf14      	ite	ne
 8007b1c:	2301      	movne	r3, #1
 8007b1e:	2300      	moveq	r3, #0
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d016      	beq.n	8007b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b40:	f043 0220 	orr.w	r2, r3, #32
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e021      	b.n	8007b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	0c1b      	lsrs	r3, r3, #16
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d10c      	bne.n	8007b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	43da      	mvns	r2, r3
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	4013      	ands	r3, r2
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	bf14      	ite	ne
 8007b70:	2301      	movne	r3, #1
 8007b72:	2300      	moveq	r3, #0
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	e00b      	b.n	8007b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	43da      	mvns	r2, r3
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	4013      	ands	r3, r2
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	bf14      	ite	ne
 8007b8a:	2301      	movne	r3, #1
 8007b8c:	2300      	moveq	r3, #0
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f47f af6d 	bne.w	8007a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bac:	e034      	b.n	8007c18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 f8b8 	bl	8007d24 <I2C_IsAcknowledgeFailed>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e034      	b.n	8007c28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc4:	d028      	beq.n	8007c18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bc6:	f7fc fa61 	bl	800408c <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d302      	bcc.n	8007bdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d11d      	bne.n	8007c18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007be6:	2b80      	cmp	r3, #128	@ 0x80
 8007be8:	d016      	beq.n	8007c18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c04:	f043 0220 	orr.w	r2, r3, #32
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e007      	b.n	8007c28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c22:	2b80      	cmp	r3, #128	@ 0x80
 8007c24:	d1c3      	bne.n	8007bae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c3c:	e034      	b.n	8007ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 f870 	bl	8007d24 <I2C_IsAcknowledgeFailed>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e034      	b.n	8007cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c54:	d028      	beq.n	8007ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c56:	f7fc fa19 	bl	800408c <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d302      	bcc.n	8007c6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d11d      	bne.n	8007ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	f003 0304 	and.w	r3, r3, #4
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	d016      	beq.n	8007ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2220      	movs	r2, #32
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c94:	f043 0220 	orr.w	r2, r3, #32
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e007      	b.n	8007cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	f003 0304 	and.w	r3, r3, #4
 8007cb2:	2b04      	cmp	r3, #4
 8007cb4:	d1c3      	bne.n	8007c3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ccc:	4b13      	ldr	r3, [pc, #76]	@ (8007d1c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	08db      	lsrs	r3, r3, #3
 8007cd2:	4a13      	ldr	r2, [pc, #76]	@ (8007d20 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd8:	0a1a      	lsrs	r2, r3, #8
 8007cda:	4613      	mov	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d107      	bne.n	8007cfe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf2:	f043 0220 	orr.w	r2, r3, #32
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e008      	b.n	8007d10 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d0c:	d0e9      	beq.n	8007ce2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3714      	adds	r7, #20
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr
 8007d1c:	20000030 	.word	0x20000030
 8007d20:	14f8b589 	.word	0x14f8b589

08007d24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d3a:	d11b      	bne.n	8007d74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007d44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d60:	f043 0204 	orr.w	r2, r3, #4
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e000      	b.n	8007d76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007d92:	d103      	bne.n	8007d9c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007d9a:	e007      	b.n	8007dac <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007da4:	d102      	bne.n	8007dac <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2208      	movs	r2, #8
 8007daa:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8007dbe:	4b06      	ldr	r3, [pc, #24]	@ (8007dd8 <HAL_PWR_EnableBkUpAccess+0x20>)
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8007dc4:	4b05      	ldr	r3, [pc, #20]	@ (8007ddc <HAL_PWR_EnableBkUpAccess+0x24>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8007dca:	687b      	ldr	r3, [r7, #4]
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	420e0020 	.word	0x420e0020
 8007ddc:	40007000 	.word	0x40007000

08007de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e267      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d075      	beq.n	8007eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007dfe:	4b88      	ldr	r3, [pc, #544]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f003 030c 	and.w	r3, r3, #12
 8007e06:	2b04      	cmp	r3, #4
 8007e08:	d00c      	beq.n	8007e24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e0a:	4b85      	ldr	r3, [pc, #532]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007e12:	2b08      	cmp	r3, #8
 8007e14:	d112      	bne.n	8007e3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e16:	4b82      	ldr	r3, [pc, #520]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e22:	d10b      	bne.n	8007e3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e24:	4b7e      	ldr	r3, [pc, #504]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d05b      	beq.n	8007ee8 <HAL_RCC_OscConfig+0x108>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d157      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e242      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e44:	d106      	bne.n	8007e54 <HAL_RCC_OscConfig+0x74>
 8007e46:	4b76      	ldr	r3, [pc, #472]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a75      	ldr	r2, [pc, #468]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	e01d      	b.n	8007e90 <HAL_RCC_OscConfig+0xb0>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e5c:	d10c      	bne.n	8007e78 <HAL_RCC_OscConfig+0x98>
 8007e5e:	4b70      	ldr	r3, [pc, #448]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a6f      	ldr	r2, [pc, #444]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e68:	6013      	str	r3, [r2, #0]
 8007e6a:	4b6d      	ldr	r3, [pc, #436]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a6c      	ldr	r2, [pc, #432]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	e00b      	b.n	8007e90 <HAL_RCC_OscConfig+0xb0>
 8007e78:	4b69      	ldr	r3, [pc, #420]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a68      	ldr	r2, [pc, #416]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e82:	6013      	str	r3, [r2, #0]
 8007e84:	4b66      	ldr	r3, [pc, #408]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a65      	ldr	r2, [pc, #404]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d013      	beq.n	8007ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e98:	f7fc f8f8 	bl	800408c <HAL_GetTick>
 8007e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e9e:	e008      	b.n	8007eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ea0:	f7fc f8f4 	bl	800408c <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	2b64      	cmp	r3, #100	@ 0x64
 8007eac:	d901      	bls.n	8007eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e207      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eb2:	4b5b      	ldr	r3, [pc, #364]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0f0      	beq.n	8007ea0 <HAL_RCC_OscConfig+0xc0>
 8007ebe:	e014      	b.n	8007eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ec0:	f7fc f8e4 	bl	800408c <HAL_GetTick>
 8007ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ec6:	e008      	b.n	8007eda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ec8:	f7fc f8e0 	bl	800408c <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	2b64      	cmp	r3, #100	@ 0x64
 8007ed4:	d901      	bls.n	8007eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e1f3      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007eda:	4b51      	ldr	r3, [pc, #324]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1f0      	bne.n	8007ec8 <HAL_RCC_OscConfig+0xe8>
 8007ee6:	e000      	b.n	8007eea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d063      	beq.n	8007fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f003 030c 	and.w	r3, r3, #12
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00b      	beq.n	8007f1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f02:	4b47      	ldr	r3, [pc, #284]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007f0a:	2b08      	cmp	r3, #8
 8007f0c:	d11c      	bne.n	8007f48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f0e:	4b44      	ldr	r3, [pc, #272]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d116      	bne.n	8007f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f1a:	4b41      	ldr	r3, [pc, #260]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d005      	beq.n	8007f32 <HAL_RCC_OscConfig+0x152>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d001      	beq.n	8007f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e1c7      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f32:	4b3b      	ldr	r3, [pc, #236]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	4937      	ldr	r1, [pc, #220]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f46:	e03a      	b.n	8007fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d020      	beq.n	8007f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f50:	4b34      	ldr	r3, [pc, #208]	@ (8008024 <HAL_RCC_OscConfig+0x244>)
 8007f52:	2201      	movs	r2, #1
 8007f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f56:	f7fc f899 	bl	800408c <HAL_GetTick>
 8007f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f5c:	e008      	b.n	8007f70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f5e:	f7fc f895 	bl	800408c <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d901      	bls.n	8007f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e1a8      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f70:	4b2b      	ldr	r3, [pc, #172]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0302 	and.w	r3, r3, #2
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d0f0      	beq.n	8007f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f7c:	4b28      	ldr	r3, [pc, #160]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	00db      	lsls	r3, r3, #3
 8007f8a:	4925      	ldr	r1, [pc, #148]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	600b      	str	r3, [r1, #0]
 8007f90:	e015      	b.n	8007fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f92:	4b24      	ldr	r3, [pc, #144]	@ (8008024 <HAL_RCC_OscConfig+0x244>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f98:	f7fc f878 	bl	800408c <HAL_GetTick>
 8007f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f9e:	e008      	b.n	8007fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fa0:	f7fc f874 	bl	800408c <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d901      	bls.n	8007fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e187      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0302 	and.w	r3, r3, #2
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1f0      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0308 	and.w	r3, r3, #8
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d036      	beq.n	8008038 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d016      	beq.n	8008000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fd2:	4b15      	ldr	r3, [pc, #84]	@ (8008028 <HAL_RCC_OscConfig+0x248>)
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fd8:	f7fc f858 	bl	800408c <HAL_GetTick>
 8007fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fde:	e008      	b.n	8007ff2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fe0:	f7fc f854 	bl	800408c <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d901      	bls.n	8007ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e167      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8008020 <HAL_RCC_OscConfig+0x240>)
 8007ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d0f0      	beq.n	8007fe0 <HAL_RCC_OscConfig+0x200>
 8007ffe:	e01b      	b.n	8008038 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008000:	4b09      	ldr	r3, [pc, #36]	@ (8008028 <HAL_RCC_OscConfig+0x248>)
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008006:	f7fc f841 	bl	800408c <HAL_GetTick>
 800800a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800800c:	e00e      	b.n	800802c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800800e:	f7fc f83d 	bl	800408c <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	2b02      	cmp	r3, #2
 800801a:	d907      	bls.n	800802c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e150      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e2>
 8008020:	40023800 	.word	0x40023800
 8008024:	42470000 	.word	0x42470000
 8008028:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800802c:	4b88      	ldr	r3, [pc, #544]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 800802e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008030:	f003 0302 	and.w	r3, r3, #2
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1ea      	bne.n	800800e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0304 	and.w	r3, r3, #4
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 8097 	beq.w	8008174 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008046:	2300      	movs	r3, #0
 8008048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800804a:	4b81      	ldr	r3, [pc, #516]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 800804c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800804e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10f      	bne.n	8008076 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008056:	2300      	movs	r3, #0
 8008058:	60bb      	str	r3, [r7, #8]
 800805a:	4b7d      	ldr	r3, [pc, #500]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 800805c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800805e:	4a7c      	ldr	r2, [pc, #496]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 8008060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008064:	6413      	str	r3, [r2, #64]	@ 0x40
 8008066:	4b7a      	ldr	r3, [pc, #488]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 8008068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800806a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800806e:	60bb      	str	r3, [r7, #8]
 8008070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008072:	2301      	movs	r3, #1
 8008074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008076:	4b77      	ldr	r3, [pc, #476]	@ (8008254 <HAL_RCC_OscConfig+0x474>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800807e:	2b00      	cmp	r3, #0
 8008080:	d118      	bne.n	80080b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008082:	4b74      	ldr	r3, [pc, #464]	@ (8008254 <HAL_RCC_OscConfig+0x474>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a73      	ldr	r2, [pc, #460]	@ (8008254 <HAL_RCC_OscConfig+0x474>)
 8008088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800808c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800808e:	f7fb fffd 	bl	800408c <HAL_GetTick>
 8008092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008094:	e008      	b.n	80080a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008096:	f7fb fff9 	bl	800408c <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d901      	bls.n	80080a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e10c      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080a8:	4b6a      	ldr	r3, [pc, #424]	@ (8008254 <HAL_RCC_OscConfig+0x474>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d0f0      	beq.n	8008096 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d106      	bne.n	80080ca <HAL_RCC_OscConfig+0x2ea>
 80080bc:	4b64      	ldr	r3, [pc, #400]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 80080be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080c0:	4a63      	ldr	r2, [pc, #396]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 80080c2:	f043 0301 	orr.w	r3, r3, #1
 80080c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80080c8:	e01c      	b.n	8008104 <HAL_RCC_OscConfig+0x324>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	2b05      	cmp	r3, #5
 80080d0:	d10c      	bne.n	80080ec <HAL_RCC_OscConfig+0x30c>
 80080d2:	4b5f      	ldr	r3, [pc, #380]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 80080d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080d6:	4a5e      	ldr	r2, [pc, #376]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 80080d8:	f043 0304 	orr.w	r3, r3, #4
 80080dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80080de:	4b5c      	ldr	r3, [pc, #368]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 80080e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080e2:	4a5b      	ldr	r2, [pc, #364]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 80080e4:	f043 0301 	orr.w	r3, r3, #1
 80080e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80080ea:	e00b      	b.n	8008104 <HAL_RCC_OscConfig+0x324>
 80080ec:	4b58      	ldr	r3, [pc, #352]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 80080ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080f0:	4a57      	ldr	r2, [pc, #348]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 80080f2:	f023 0301 	bic.w	r3, r3, #1
 80080f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80080f8:	4b55      	ldr	r3, [pc, #340]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 80080fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080fc:	4a54      	ldr	r2, [pc, #336]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 80080fe:	f023 0304 	bic.w	r3, r3, #4
 8008102:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d015      	beq.n	8008138 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800810c:	f7fb ffbe 	bl	800408c <HAL_GetTick>
 8008110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008112:	e00a      	b.n	800812a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008114:	f7fb ffba 	bl	800408c <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008122:	4293      	cmp	r3, r2
 8008124:	d901      	bls.n	800812a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e0cb      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800812a:	4b49      	ldr	r3, [pc, #292]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 800812c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	2b00      	cmp	r3, #0
 8008134:	d0ee      	beq.n	8008114 <HAL_RCC_OscConfig+0x334>
 8008136:	e014      	b.n	8008162 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008138:	f7fb ffa8 	bl	800408c <HAL_GetTick>
 800813c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800813e:	e00a      	b.n	8008156 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008140:	f7fb ffa4 	bl	800408c <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800814e:	4293      	cmp	r3, r2
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e0b5      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008156:	4b3e      	ldr	r3, [pc, #248]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 8008158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800815a:	f003 0302 	and.w	r3, r3, #2
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1ee      	bne.n	8008140 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008162:	7dfb      	ldrb	r3, [r7, #23]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d105      	bne.n	8008174 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008168:	4b39      	ldr	r3, [pc, #228]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 800816a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800816c:	4a38      	ldr	r2, [pc, #224]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 800816e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008172:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 80a1 	beq.w	80082c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800817e:	4b34      	ldr	r3, [pc, #208]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f003 030c 	and.w	r3, r3, #12
 8008186:	2b08      	cmp	r3, #8
 8008188:	d05c      	beq.n	8008244 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	2b02      	cmp	r3, #2
 8008190:	d141      	bne.n	8008216 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008192:	4b31      	ldr	r3, [pc, #196]	@ (8008258 <HAL_RCC_OscConfig+0x478>)
 8008194:	2200      	movs	r2, #0
 8008196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008198:	f7fb ff78 	bl	800408c <HAL_GetTick>
 800819c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800819e:	e008      	b.n	80081b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081a0:	f7fb ff74 	bl	800408c <HAL_GetTick>
 80081a4:	4602      	mov	r2, r0
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d901      	bls.n	80081b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e087      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081b2:	4b27      	ldr	r3, [pc, #156]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1f0      	bne.n	80081a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	69da      	ldr	r2, [r3, #28]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	431a      	orrs	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081cc:	019b      	lsls	r3, r3, #6
 80081ce:	431a      	orrs	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d4:	085b      	lsrs	r3, r3, #1
 80081d6:	3b01      	subs	r3, #1
 80081d8:	041b      	lsls	r3, r3, #16
 80081da:	431a      	orrs	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e0:	061b      	lsls	r3, r3, #24
 80081e2:	491b      	ldr	r1, [pc, #108]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008258 <HAL_RCC_OscConfig+0x478>)
 80081ea:	2201      	movs	r2, #1
 80081ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081ee:	f7fb ff4d 	bl	800408c <HAL_GetTick>
 80081f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081f4:	e008      	b.n	8008208 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081f6:	f7fb ff49 	bl	800408c <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	2b02      	cmp	r3, #2
 8008202:	d901      	bls.n	8008208 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e05c      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008208:	4b11      	ldr	r3, [pc, #68]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0f0      	beq.n	80081f6 <HAL_RCC_OscConfig+0x416>
 8008214:	e054      	b.n	80082c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008216:	4b10      	ldr	r3, [pc, #64]	@ (8008258 <HAL_RCC_OscConfig+0x478>)
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800821c:	f7fb ff36 	bl	800408c <HAL_GetTick>
 8008220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008222:	e008      	b.n	8008236 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008224:	f7fb ff32 	bl	800408c <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	2b02      	cmp	r3, #2
 8008230:	d901      	bls.n	8008236 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e045      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008236:	4b06      	ldr	r3, [pc, #24]	@ (8008250 <HAL_RCC_OscConfig+0x470>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1f0      	bne.n	8008224 <HAL_RCC_OscConfig+0x444>
 8008242:	e03d      	b.n	80082c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d107      	bne.n	800825c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e038      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e2>
 8008250:	40023800 	.word	0x40023800
 8008254:	40007000 	.word	0x40007000
 8008258:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800825c:	4b1b      	ldr	r3, [pc, #108]	@ (80082cc <HAL_RCC_OscConfig+0x4ec>)
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d028      	beq.n	80082bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008274:	429a      	cmp	r2, r3
 8008276:	d121      	bne.n	80082bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008282:	429a      	cmp	r2, r3
 8008284:	d11a      	bne.n	80082bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800828c:	4013      	ands	r3, r2
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008292:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008294:	4293      	cmp	r3, r2
 8008296:	d111      	bne.n	80082bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a2:	085b      	lsrs	r3, r3, #1
 80082a4:	3b01      	subs	r3, #1
 80082a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d107      	bne.n	80082bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d001      	beq.n	80082c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e000      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3718      	adds	r7, #24
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	40023800 	.word	0x40023800

080082d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e0cc      	b.n	800847e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082e4:	4b68      	ldr	r3, [pc, #416]	@ (8008488 <HAL_RCC_ClockConfig+0x1b8>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0307 	and.w	r3, r3, #7
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d90c      	bls.n	800830c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082f2:	4b65      	ldr	r3, [pc, #404]	@ (8008488 <HAL_RCC_ClockConfig+0x1b8>)
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	b2d2      	uxtb	r2, r2
 80082f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082fa:	4b63      	ldr	r3, [pc, #396]	@ (8008488 <HAL_RCC_ClockConfig+0x1b8>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0307 	and.w	r3, r3, #7
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	429a      	cmp	r2, r3
 8008306:	d001      	beq.n	800830c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e0b8      	b.n	800847e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0302 	and.w	r3, r3, #2
 8008314:	2b00      	cmp	r3, #0
 8008316:	d020      	beq.n	800835a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008324:	4b59      	ldr	r3, [pc, #356]	@ (800848c <HAL_RCC_ClockConfig+0x1bc>)
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	4a58      	ldr	r2, [pc, #352]	@ (800848c <HAL_RCC_ClockConfig+0x1bc>)
 800832a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800832e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0308 	and.w	r3, r3, #8
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800833c:	4b53      	ldr	r3, [pc, #332]	@ (800848c <HAL_RCC_ClockConfig+0x1bc>)
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	4a52      	ldr	r2, [pc, #328]	@ (800848c <HAL_RCC_ClockConfig+0x1bc>)
 8008342:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008348:	4b50      	ldr	r3, [pc, #320]	@ (800848c <HAL_RCC_ClockConfig+0x1bc>)
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	494d      	ldr	r1, [pc, #308]	@ (800848c <HAL_RCC_ClockConfig+0x1bc>)
 8008356:	4313      	orrs	r3, r2
 8008358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d044      	beq.n	80083f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d107      	bne.n	800837e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800836e:	4b47      	ldr	r3, [pc, #284]	@ (800848c <HAL_RCC_ClockConfig+0x1bc>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d119      	bne.n	80083ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e07f      	b.n	800847e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2b02      	cmp	r3, #2
 8008384:	d003      	beq.n	800838e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800838a:	2b03      	cmp	r3, #3
 800838c:	d107      	bne.n	800839e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800838e:	4b3f      	ldr	r3, [pc, #252]	@ (800848c <HAL_RCC_ClockConfig+0x1bc>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d109      	bne.n	80083ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	e06f      	b.n	800847e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800839e:	4b3b      	ldr	r3, [pc, #236]	@ (800848c <HAL_RCC_ClockConfig+0x1bc>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e067      	b.n	800847e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083ae:	4b37      	ldr	r3, [pc, #220]	@ (800848c <HAL_RCC_ClockConfig+0x1bc>)
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f023 0203 	bic.w	r2, r3, #3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	4934      	ldr	r1, [pc, #208]	@ (800848c <HAL_RCC_ClockConfig+0x1bc>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80083c0:	f7fb fe64 	bl	800408c <HAL_GetTick>
 80083c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083c6:	e00a      	b.n	80083de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083c8:	f7fb fe60 	bl	800408c <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d901      	bls.n	80083de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e04f      	b.n	800847e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083de:	4b2b      	ldr	r3, [pc, #172]	@ (800848c <HAL_RCC_ClockConfig+0x1bc>)
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f003 020c 	and.w	r2, r3, #12
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d1eb      	bne.n	80083c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083f0:	4b25      	ldr	r3, [pc, #148]	@ (8008488 <HAL_RCC_ClockConfig+0x1b8>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0307 	and.w	r3, r3, #7
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d20c      	bcs.n	8008418 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083fe:	4b22      	ldr	r3, [pc, #136]	@ (8008488 <HAL_RCC_ClockConfig+0x1b8>)
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	b2d2      	uxtb	r2, r2
 8008404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008406:	4b20      	ldr	r3, [pc, #128]	@ (8008488 <HAL_RCC_ClockConfig+0x1b8>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0307 	and.w	r3, r3, #7
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	429a      	cmp	r2, r3
 8008412:	d001      	beq.n	8008418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e032      	b.n	800847e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0304 	and.w	r3, r3, #4
 8008420:	2b00      	cmp	r3, #0
 8008422:	d008      	beq.n	8008436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008424:	4b19      	ldr	r3, [pc, #100]	@ (800848c <HAL_RCC_ClockConfig+0x1bc>)
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	4916      	ldr	r1, [pc, #88]	@ (800848c <HAL_RCC_ClockConfig+0x1bc>)
 8008432:	4313      	orrs	r3, r2
 8008434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0308 	and.w	r3, r3, #8
 800843e:	2b00      	cmp	r3, #0
 8008440:	d009      	beq.n	8008456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008442:	4b12      	ldr	r3, [pc, #72]	@ (800848c <HAL_RCC_ClockConfig+0x1bc>)
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	00db      	lsls	r3, r3, #3
 8008450:	490e      	ldr	r1, [pc, #56]	@ (800848c <HAL_RCC_ClockConfig+0x1bc>)
 8008452:	4313      	orrs	r3, r2
 8008454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008456:	f000 f821 	bl	800849c <HAL_RCC_GetSysClockFreq>
 800845a:	4602      	mov	r2, r0
 800845c:	4b0b      	ldr	r3, [pc, #44]	@ (800848c <HAL_RCC_ClockConfig+0x1bc>)
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	091b      	lsrs	r3, r3, #4
 8008462:	f003 030f 	and.w	r3, r3, #15
 8008466:	490a      	ldr	r1, [pc, #40]	@ (8008490 <HAL_RCC_ClockConfig+0x1c0>)
 8008468:	5ccb      	ldrb	r3, [r1, r3]
 800846a:	fa22 f303 	lsr.w	r3, r2, r3
 800846e:	4a09      	ldr	r2, [pc, #36]	@ (8008494 <HAL_RCC_ClockConfig+0x1c4>)
 8008470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008472:	4b09      	ldr	r3, [pc, #36]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4618      	mov	r0, r3
 8008478:	f7fb fdc4 	bl	8004004 <HAL_InitTick>

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	40023c00 	.word	0x40023c00
 800848c:	40023800 	.word	0x40023800
 8008490:	0800b4a8 	.word	0x0800b4a8
 8008494:	20000030 	.word	0x20000030
 8008498:	20000034 	.word	0x20000034

0800849c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800849c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084a0:	b090      	sub	sp, #64	@ 0x40
 80084a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80084ac:	2300      	movs	r3, #0
 80084ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80084b0:	2300      	movs	r3, #0
 80084b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80084b4:	4b59      	ldr	r3, [pc, #356]	@ (800861c <HAL_RCC_GetSysClockFreq+0x180>)
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	f003 030c 	and.w	r3, r3, #12
 80084bc:	2b08      	cmp	r3, #8
 80084be:	d00d      	beq.n	80084dc <HAL_RCC_GetSysClockFreq+0x40>
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	f200 80a1 	bhi.w	8008608 <HAL_RCC_GetSysClockFreq+0x16c>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <HAL_RCC_GetSysClockFreq+0x34>
 80084ca:	2b04      	cmp	r3, #4
 80084cc:	d003      	beq.n	80084d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80084ce:	e09b      	b.n	8008608 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80084d0:	4b53      	ldr	r3, [pc, #332]	@ (8008620 <HAL_RCC_GetSysClockFreq+0x184>)
 80084d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80084d4:	e09b      	b.n	800860e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80084d6:	4b53      	ldr	r3, [pc, #332]	@ (8008624 <HAL_RCC_GetSysClockFreq+0x188>)
 80084d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80084da:	e098      	b.n	800860e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80084dc:	4b4f      	ldr	r3, [pc, #316]	@ (800861c <HAL_RCC_GetSysClockFreq+0x180>)
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80084e6:	4b4d      	ldr	r3, [pc, #308]	@ (800861c <HAL_RCC_GetSysClockFreq+0x180>)
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d028      	beq.n	8008544 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084f2:	4b4a      	ldr	r3, [pc, #296]	@ (800861c <HAL_RCC_GetSysClockFreq+0x180>)
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	099b      	lsrs	r3, r3, #6
 80084f8:	2200      	movs	r2, #0
 80084fa:	623b      	str	r3, [r7, #32]
 80084fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008504:	2100      	movs	r1, #0
 8008506:	4b47      	ldr	r3, [pc, #284]	@ (8008624 <HAL_RCC_GetSysClockFreq+0x188>)
 8008508:	fb03 f201 	mul.w	r2, r3, r1
 800850c:	2300      	movs	r3, #0
 800850e:	fb00 f303 	mul.w	r3, r0, r3
 8008512:	4413      	add	r3, r2
 8008514:	4a43      	ldr	r2, [pc, #268]	@ (8008624 <HAL_RCC_GetSysClockFreq+0x188>)
 8008516:	fba0 1202 	umull	r1, r2, r0, r2
 800851a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800851c:	460a      	mov	r2, r1
 800851e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008520:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008522:	4413      	add	r3, r2
 8008524:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008528:	2200      	movs	r2, #0
 800852a:	61bb      	str	r3, [r7, #24]
 800852c:	61fa      	str	r2, [r7, #28]
 800852e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008532:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008536:	f7f7 fe4d 	bl	80001d4 <__aeabi_uldivmod>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4613      	mov	r3, r2
 8008540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008542:	e053      	b.n	80085ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008544:	4b35      	ldr	r3, [pc, #212]	@ (800861c <HAL_RCC_GetSysClockFreq+0x180>)
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	099b      	lsrs	r3, r3, #6
 800854a:	2200      	movs	r2, #0
 800854c:	613b      	str	r3, [r7, #16]
 800854e:	617a      	str	r2, [r7, #20]
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008556:	f04f 0b00 	mov.w	fp, #0
 800855a:	4652      	mov	r2, sl
 800855c:	465b      	mov	r3, fp
 800855e:	f04f 0000 	mov.w	r0, #0
 8008562:	f04f 0100 	mov.w	r1, #0
 8008566:	0159      	lsls	r1, r3, #5
 8008568:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800856c:	0150      	lsls	r0, r2, #5
 800856e:	4602      	mov	r2, r0
 8008570:	460b      	mov	r3, r1
 8008572:	ebb2 080a 	subs.w	r8, r2, sl
 8008576:	eb63 090b 	sbc.w	r9, r3, fp
 800857a:	f04f 0200 	mov.w	r2, #0
 800857e:	f04f 0300 	mov.w	r3, #0
 8008582:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008586:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800858a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800858e:	ebb2 0408 	subs.w	r4, r2, r8
 8008592:	eb63 0509 	sbc.w	r5, r3, r9
 8008596:	f04f 0200 	mov.w	r2, #0
 800859a:	f04f 0300 	mov.w	r3, #0
 800859e:	00eb      	lsls	r3, r5, #3
 80085a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085a4:	00e2      	lsls	r2, r4, #3
 80085a6:	4614      	mov	r4, r2
 80085a8:	461d      	mov	r5, r3
 80085aa:	eb14 030a 	adds.w	r3, r4, sl
 80085ae:	603b      	str	r3, [r7, #0]
 80085b0:	eb45 030b 	adc.w	r3, r5, fp
 80085b4:	607b      	str	r3, [r7, #4]
 80085b6:	f04f 0200 	mov.w	r2, #0
 80085ba:	f04f 0300 	mov.w	r3, #0
 80085be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80085c2:	4629      	mov	r1, r5
 80085c4:	028b      	lsls	r3, r1, #10
 80085c6:	4621      	mov	r1, r4
 80085c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80085cc:	4621      	mov	r1, r4
 80085ce:	028a      	lsls	r2, r1, #10
 80085d0:	4610      	mov	r0, r2
 80085d2:	4619      	mov	r1, r3
 80085d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d6:	2200      	movs	r2, #0
 80085d8:	60bb      	str	r3, [r7, #8]
 80085da:	60fa      	str	r2, [r7, #12]
 80085dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085e0:	f7f7 fdf8 	bl	80001d4 <__aeabi_uldivmod>
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	4613      	mov	r3, r2
 80085ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80085ec:	4b0b      	ldr	r3, [pc, #44]	@ (800861c <HAL_RCC_GetSysClockFreq+0x180>)
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	0c1b      	lsrs	r3, r3, #16
 80085f2:	f003 0303 	and.w	r3, r3, #3
 80085f6:	3301      	adds	r3, #1
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80085fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80085fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008600:	fbb2 f3f3 	udiv	r3, r2, r3
 8008604:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008606:	e002      	b.n	800860e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008608:	4b05      	ldr	r3, [pc, #20]	@ (8008620 <HAL_RCC_GetSysClockFreq+0x184>)
 800860a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800860c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800860e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008610:	4618      	mov	r0, r3
 8008612:	3740      	adds	r7, #64	@ 0x40
 8008614:	46bd      	mov	sp, r7
 8008616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800861a:	bf00      	nop
 800861c:	40023800 	.word	0x40023800
 8008620:	00f42400 	.word	0x00f42400
 8008624:	017d7840 	.word	0x017d7840

08008628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008628:	b480      	push	{r7}
 800862a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800862c:	4b03      	ldr	r3, [pc, #12]	@ (800863c <HAL_RCC_GetHCLKFreq+0x14>)
 800862e:	681b      	ldr	r3, [r3, #0]
}
 8008630:	4618      	mov	r0, r3
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	20000030 	.word	0x20000030

08008640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008644:	f7ff fff0 	bl	8008628 <HAL_RCC_GetHCLKFreq>
 8008648:	4602      	mov	r2, r0
 800864a:	4b05      	ldr	r3, [pc, #20]	@ (8008660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	0a9b      	lsrs	r3, r3, #10
 8008650:	f003 0307 	and.w	r3, r3, #7
 8008654:	4903      	ldr	r1, [pc, #12]	@ (8008664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008656:	5ccb      	ldrb	r3, [r1, r3]
 8008658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800865c:	4618      	mov	r0, r3
 800865e:	bd80      	pop	{r7, pc}
 8008660:	40023800 	.word	0x40023800
 8008664:	0800b4b8 	.word	0x0800b4b8

08008668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800866c:	f7ff ffdc 	bl	8008628 <HAL_RCC_GetHCLKFreq>
 8008670:	4602      	mov	r2, r0
 8008672:	4b05      	ldr	r3, [pc, #20]	@ (8008688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	0b5b      	lsrs	r3, r3, #13
 8008678:	f003 0307 	and.w	r3, r3, #7
 800867c:	4903      	ldr	r1, [pc, #12]	@ (800868c <HAL_RCC_GetPCLK2Freq+0x24>)
 800867e:	5ccb      	ldrb	r3, [r1, r3]
 8008680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008684:	4618      	mov	r0, r3
 8008686:	bd80      	pop	{r7, pc}
 8008688:	40023800 	.word	0x40023800
 800868c:	0800b4b8 	.word	0x0800b4b8

08008690 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008698:	2300      	movs	r3, #0
 800869a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800869c:	2300      	movs	r3, #0
 800869e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d105      	bne.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d035      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80086b8:	4b67      	ldr	r3, [pc, #412]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80086be:	f7fb fce5 	bl	800408c <HAL_GetTick>
 80086c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086c4:	e008      	b.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80086c6:	f7fb fce1 	bl	800408c <HAL_GetTick>
 80086ca:	4602      	mov	r2, r0
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d901      	bls.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e0ba      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086d8:	4b60      	ldr	r3, [pc, #384]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1f0      	bne.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	019a      	lsls	r2, r3, #6
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	071b      	lsls	r3, r3, #28
 80086f0:	495a      	ldr	r1, [pc, #360]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80086f2:	4313      	orrs	r3, r2
 80086f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80086f8:	4b57      	ldr	r3, [pc, #348]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80086fa:	2201      	movs	r2, #1
 80086fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80086fe:	f7fb fcc5 	bl	800408c <HAL_GetTick>
 8008702:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008704:	e008      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008706:	f7fb fcc1 	bl	800408c <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	2b02      	cmp	r3, #2
 8008712:	d901      	bls.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e09a      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008718:	4b50      	ldr	r3, [pc, #320]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d0f0      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0302 	and.w	r3, r3, #2
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 8083 	beq.w	8008838 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008732:	2300      	movs	r3, #0
 8008734:	60fb      	str	r3, [r7, #12]
 8008736:	4b49      	ldr	r3, [pc, #292]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800873a:	4a48      	ldr	r2, [pc, #288]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800873c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008740:	6413      	str	r3, [r2, #64]	@ 0x40
 8008742:	4b46      	ldr	r3, [pc, #280]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800874e:	4b44      	ldr	r3, [pc, #272]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a43      	ldr	r2, [pc, #268]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008758:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800875a:	f7fb fc97 	bl	800408c <HAL_GetTick>
 800875e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008760:	e008      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008762:	f7fb fc93 	bl	800408c <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	2b02      	cmp	r3, #2
 800876e:	d901      	bls.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e06c      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008774:	4b3a      	ldr	r3, [pc, #232]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800877c:	2b00      	cmp	r3, #0
 800877e:	d0f0      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008780:	4b36      	ldr	r3, [pc, #216]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008784:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008788:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d02f      	beq.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	429a      	cmp	r2, r3
 800879c:	d028      	beq.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800879e:	4b2f      	ldr	r3, [pc, #188]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80087a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80087a8:	4b2e      	ldr	r3, [pc, #184]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80087aa:	2201      	movs	r2, #1
 80087ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80087ae:	4b2d      	ldr	r3, [pc, #180]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80087b4:	4a29      	ldr	r2, [pc, #164]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80087ba:	4b28      	ldr	r3, [pc, #160]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80087bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d114      	bne.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80087c6:	f7fb fc61 	bl	800408c <HAL_GetTick>
 80087ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087cc:	e00a      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087ce:	f7fb fc5d 	bl	800408c <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087dc:	4293      	cmp	r3, r2
 80087de:	d901      	bls.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e034      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087e4:	4b1d      	ldr	r3, [pc, #116]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80087e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087e8:	f003 0302 	and.w	r3, r3, #2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d0ee      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087fc:	d10d      	bne.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80087fe:	4b17      	ldr	r3, [pc, #92]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800880e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008812:	4912      	ldr	r1, [pc, #72]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008814:	4313      	orrs	r3, r2
 8008816:	608b      	str	r3, [r1, #8]
 8008818:	e005      	b.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800881a:	4b10      	ldr	r3, [pc, #64]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	4a0f      	ldr	r2, [pc, #60]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008820:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008824:	6093      	str	r3, [r2, #8]
 8008826:	4b0d      	ldr	r3, [pc, #52]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008828:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008832:	490a      	ldr	r1, [pc, #40]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008834:	4313      	orrs	r3, r2
 8008836:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0308 	and.w	r3, r3, #8
 8008840:	2b00      	cmp	r3, #0
 8008842:	d003      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	7c1a      	ldrb	r2, [r3, #16]
 8008848:	4b07      	ldr	r3, [pc, #28]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800884a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	42470068 	.word	0x42470068
 800885c:	40023800 	.word	0x40023800
 8008860:	40007000 	.word	0x40007000
 8008864:	42470e40 	.word	0x42470e40
 8008868:	424711e0 	.word	0x424711e0

0800886c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e073      	b.n	800896a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	7f5b      	ldrb	r3, [r3, #29]
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d105      	bne.n	8008898 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7f9 fd70 	bl	8002378 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2202      	movs	r2, #2
 800889c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	f003 0310 	and.w	r3, r3, #16
 80088a8:	2b10      	cmp	r3, #16
 80088aa:	d055      	beq.n	8008958 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	22ca      	movs	r2, #202	@ 0xca
 80088b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2253      	movs	r2, #83	@ 0x53
 80088ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fa49 	bl	8008d54 <RTC_EnterInitMode>
 80088c2:	4603      	mov	r3, r0
 80088c4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d12c      	bne.n	8008926 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	6812      	ldr	r2, [r2, #0]
 80088d6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80088da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088de:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6899      	ldr	r1, [r3, #8]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	431a      	orrs	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	695b      	ldr	r3, [r3, #20]
 80088f4:	431a      	orrs	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	68d2      	ldr	r2, [r2, #12]
 8008906:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6919      	ldr	r1, [r3, #16]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	041a      	lsls	r2, r3, #16
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	430a      	orrs	r2, r1
 800891a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fa50 	bl	8008dc2 <RTC_ExitInitMode>
 8008922:	4603      	mov	r3, r0
 8008924:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d110      	bne.n	800894e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800893a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	699a      	ldr	r2, [r3, #24]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	22ff      	movs	r2, #255	@ 0xff
 8008954:	625a      	str	r2, [r3, #36]	@ 0x24
 8008956:	e001      	b.n	800895c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d102      	bne.n	8008968 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008968:	7bfb      	ldrb	r3, [r7, #15]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008972:	b590      	push	{r4, r7, lr}
 8008974:	b087      	sub	sp, #28
 8008976:	af00      	add	r7, sp, #0
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800897e:	2300      	movs	r3, #0
 8008980:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	7f1b      	ldrb	r3, [r3, #28]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d101      	bne.n	800898e <HAL_RTC_SetTime+0x1c>
 800898a:	2302      	movs	r3, #2
 800898c:	e087      	b.n	8008a9e <HAL_RTC_SetTime+0x12c>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2201      	movs	r2, #1
 8008992:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2202      	movs	r2, #2
 8008998:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d126      	bne.n	80089ee <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d102      	bne.n	80089b4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	2200      	movs	r2, #0
 80089b2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 fa27 	bl	8008e0c <RTC_ByteToBcd2>
 80089be:	4603      	mov	r3, r0
 80089c0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	785b      	ldrb	r3, [r3, #1]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 fa20 	bl	8008e0c <RTC_ByteToBcd2>
 80089cc:	4603      	mov	r3, r0
 80089ce:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80089d0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	789b      	ldrb	r3, [r3, #2]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 fa18 	bl	8008e0c <RTC_ByteToBcd2>
 80089dc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80089de:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	78db      	ldrb	r3, [r3, #3]
 80089e6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80089e8:	4313      	orrs	r3, r2
 80089ea:	617b      	str	r3, [r7, #20]
 80089ec:	e018      	b.n	8008a20 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d102      	bne.n	8008a02 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2200      	movs	r2, #0
 8008a00:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	785b      	ldrb	r3, [r3, #1]
 8008a0c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008a0e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008a14:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	78db      	ldrb	r3, [r3, #3]
 8008a1a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	22ca      	movs	r2, #202	@ 0xca
 8008a26:	625a      	str	r2, [r3, #36]	@ 0x24
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2253      	movs	r2, #83	@ 0x53
 8008a2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f000 f98f 	bl	8008d54 <RTC_EnterInitMode>
 8008a36:	4603      	mov	r3, r0
 8008a38:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008a3a:	7cfb      	ldrb	r3, [r7, #19]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d120      	bne.n	8008a82 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008a4a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008a4e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	689a      	ldr	r2, [r3, #8]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008a5e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6899      	ldr	r1, [r3, #8]
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	430a      	orrs	r2, r1
 8008a76:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 f9a2 	bl	8008dc2 <RTC_ExitInitMode>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008a82:	7cfb      	ldrb	r3, [r7, #19]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d102      	bne.n	8008a8e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	22ff      	movs	r2, #255	@ 0xff
 8008a94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	771a      	strb	r2, [r3, #28]

  return status;
 8008a9c:	7cfb      	ldrb	r3, [r7, #19]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	371c      	adds	r7, #28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd90      	pop	{r4, r7, pc}

08008aa6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b086      	sub	sp, #24
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	60f8      	str	r0, [r7, #12]
 8008aae:	60b9      	str	r1, [r7, #8]
 8008ab0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008ad8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008adc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	0c1b      	lsrs	r3, r3, #16
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	0a1b      	lsrs	r3, r3, #8
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	0d9b      	lsrs	r3, r3, #22
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d11a      	bne.n	8008b58 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 f98e 	bl	8008e48 <RTC_Bcd2ToByte>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	461a      	mov	r2, r3
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	785b      	ldrb	r3, [r3, #1]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 f985 	bl	8008e48 <RTC_Bcd2ToByte>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	461a      	mov	r2, r3
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	789b      	ldrb	r3, [r3, #2]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 f97c 	bl	8008e48 <RTC_Bcd2ToByte>
 8008b50:	4603      	mov	r3, r0
 8008b52:	461a      	mov	r2, r3
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008b62:	b590      	push	{r4, r7, lr}
 8008b64:	b087      	sub	sp, #28
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	60b9      	str	r1, [r7, #8]
 8008b6c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	7f1b      	ldrb	r3, [r3, #28]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d101      	bne.n	8008b7e <HAL_RTC_SetDate+0x1c>
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	e071      	b.n	8008c62 <HAL_RTC_SetDate+0x100>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2201      	movs	r2, #1
 8008b82:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2202      	movs	r2, #2
 8008b88:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10e      	bne.n	8008bae <HAL_RTC_SetDate+0x4c>
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	785b      	ldrb	r3, [r3, #1]
 8008b94:	f003 0310 	and.w	r3, r3, #16
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d008      	beq.n	8008bae <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	785b      	ldrb	r3, [r3, #1]
 8008ba0:	f023 0310 	bic.w	r3, r3, #16
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	330a      	adds	r3, #10
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d11c      	bne.n	8008bee <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	78db      	ldrb	r3, [r3, #3]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 f927 	bl	8008e0c <RTC_ByteToBcd2>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	785b      	ldrb	r3, [r3, #1]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f000 f920 	bl	8008e0c <RTC_ByteToBcd2>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008bd0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	789b      	ldrb	r3, [r3, #2]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 f918 	bl	8008e0c <RTC_ByteToBcd2>
 8008bdc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008bde:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008be8:	4313      	orrs	r3, r2
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	e00e      	b.n	8008c0c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	78db      	ldrb	r3, [r3, #3]
 8008bf2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	785b      	ldrb	r3, [r3, #1]
 8008bf8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008bfa:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008c00:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	22ca      	movs	r2, #202	@ 0xca
 8008c12:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2253      	movs	r2, #83	@ 0x53
 8008c1a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f000 f899 	bl	8008d54 <RTC_EnterInitMode>
 8008c22:	4603      	mov	r3, r0
 8008c24:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008c26:	7cfb      	ldrb	r3, [r7, #19]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10c      	bne.n	8008c46 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008c36:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008c3a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 f8c0 	bl	8008dc2 <RTC_ExitInitMode>
 8008c42:	4603      	mov	r3, r0
 8008c44:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008c46:	7cfb      	ldrb	r3, [r7, #19]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d102      	bne.n	8008c52 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	22ff      	movs	r2, #255	@ 0xff
 8008c58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	771a      	strb	r2, [r3, #28]

  return status;
 8008c60:	7cfb      	ldrb	r3, [r7, #19]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	371c      	adds	r7, #28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd90      	pop	{r4, r7, pc}

08008c6a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b086      	sub	sp, #24
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008c84:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008c88:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	0c1b      	lsrs	r3, r3, #16
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	0a1b      	lsrs	r3, r3, #8
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	f003 031f 	and.w	r3, r3, #31
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	0b5b      	lsrs	r3, r3, #13
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	f003 0307 	and.w	r3, r3, #7
 8008cbc:	b2da      	uxtb	r2, r3
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d11a      	bne.n	8008cfe <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	78db      	ldrb	r3, [r3, #3]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 f8bb 	bl	8008e48 <RTC_Bcd2ToByte>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	785b      	ldrb	r3, [r3, #1]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 f8b2 	bl	8008e48 <RTC_Bcd2ToByte>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	789b      	ldrb	r3, [r3, #2]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 f8a9 	bl	8008e48 <RTC_Bcd2ToByte>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d10:	2300      	movs	r3, #0
 8008d12:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a0d      	ldr	r2, [pc, #52]	@ (8008d50 <HAL_RTC_WaitForSynchro+0x48>)
 8008d1a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d1c:	f7fb f9b6 	bl	800408c <HAL_GetTick>
 8008d20:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d22:	e009      	b.n	8008d38 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d24:	f7fb f9b2 	bl	800408c <HAL_GetTick>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d32:	d901      	bls.n	8008d38 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e007      	b.n	8008d48 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f003 0320 	and.w	r3, r3, #32
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0ee      	beq.n	8008d24 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	00013f5f 	.word	0x00013f5f

08008d54 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008d60:	2300      	movs	r3, #0
 8008d62:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d122      	bne.n	8008db8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68da      	ldr	r2, [r3, #12]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008d80:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d82:	f7fb f983 	bl	800408c <HAL_GetTick>
 8008d86:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008d88:	e00c      	b.n	8008da4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d8a:	f7fb f97f 	bl	800408c <HAL_GetTick>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d98:	d904      	bls.n	8008da4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2204      	movs	r2, #4
 8008d9e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d102      	bne.n	8008db8 <RTC_EnterInitMode+0x64>
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d1e8      	bne.n	8008d8a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68da      	ldr	r2, [r3, #12]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ddc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f003 0320 	and.w	r3, r3, #32
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10a      	bne.n	8008e02 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7ff ff8b 	bl	8008d08 <HAL_RTC_WaitForSynchro>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d004      	beq.n	8008e02 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2204      	movs	r2, #4
 8008dfc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	4603      	mov	r3, r0
 8008e14:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008e16:	2300      	movs	r3, #0
 8008e18:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8008e1a:	e005      	b.n	8008e28 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008e22:	79fb      	ldrb	r3, [r7, #7]
 8008e24:	3b0a      	subs	r3, #10
 8008e26:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008e28:	79fb      	ldrb	r3, [r7, #7]
 8008e2a:	2b09      	cmp	r3, #9
 8008e2c:	d8f6      	bhi.n	8008e1c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	011b      	lsls	r3, r3, #4
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	79fb      	ldrb	r3, [r7, #7]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	b2db      	uxtb	r3, r3
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	4603      	mov	r3, r0
 8008e50:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8008e56:	79fb      	ldrb	r3, [r7, #7]
 8008e58:	091b      	lsrs	r3, r3, #4
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4613      	mov	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	005b      	lsls	r3, r3, #1
 8008e66:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	b2da      	uxtb	r2, r3
 8008e6c:	79fb      	ldrb	r3, [r7, #7]
 8008e6e:	f003 030f 	and.w	r3, r3, #15
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	4413      	add	r3, r2
 8008e76:	b2db      	uxtb	r3, r3
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e07b      	b.n	8008f8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d108      	bne.n	8008eb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ea6:	d009      	beq.n	8008ebc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	61da      	str	r2, [r3, #28]
 8008eae:	e005      	b.n	8008ebc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d106      	bne.n	8008edc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7fa fb92 	bl	8003600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2202      	movs	r2, #2
 8008ee0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ef2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008f04:	431a      	orrs	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	f003 0302 	and.w	r3, r3, #2
 8008f18:	431a      	orrs	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	f003 0301 	and.w	r3, r3, #1
 8008f22:	431a      	orrs	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f36:	431a      	orrs	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f40:	ea42 0103 	orr.w	r1, r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f48:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	430a      	orrs	r2, r1
 8008f52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	0c1b      	lsrs	r3, r3, #16
 8008f5a:	f003 0104 	and.w	r1, r3, #4
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f62:	f003 0210 	and.w	r2, r3, #16
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	69da      	ldr	r2, [r3, #28]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008f7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
	...

08008f98 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d001      	beq.n	8008fb6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008fb2:	2302      	movs	r3, #2
 8008fb4:	e097      	b.n	80090e6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d002      	beq.n	8008fc2 <HAL_SPI_Transmit_DMA+0x2a>
 8008fbc:	88fb      	ldrh	r3, [r7, #6]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d101      	bne.n	8008fc6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e08f      	b.n	80090e6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d101      	bne.n	8008fd4 <HAL_SPI_Transmit_DMA+0x3c>
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e088      	b.n	80090e6 <HAL_SPI_Transmit_DMA+0x14e>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2203      	movs	r2, #3
 8008fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	88fa      	ldrh	r2, [r7, #6]
 8008ff4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	88fa      	ldrh	r2, [r7, #6]
 8008ffa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009022:	d10f      	bne.n	8009044 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009032:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009042:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009048:	4a29      	ldr	r2, [pc, #164]	@ (80090f0 <HAL_SPI_Transmit_DMA+0x158>)
 800904a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009050:	4a28      	ldr	r2, [pc, #160]	@ (80090f4 <HAL_SPI_Transmit_DMA+0x15c>)
 8009052:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009058:	4a27      	ldr	r2, [pc, #156]	@ (80090f8 <HAL_SPI_Transmit_DMA+0x160>)
 800905a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009060:	2200      	movs	r2, #0
 8009062:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800906c:	4619      	mov	r1, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	330c      	adds	r3, #12
 8009074:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800907a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800907c:	f7fb fd0c 	bl	8004a98 <HAL_DMA_Start_IT>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00b      	beq.n	800909e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800908a:	f043 0210 	orr.w	r2, r3, #16
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e023      	b.n	80090e6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090a8:	2b40      	cmp	r3, #64	@ 0x40
 80090aa:	d007      	beq.n	80090bc <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090ba:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f042 0220 	orr.w	r2, r2, #32
 80090d2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0202 	orr.w	r2, r2, #2
 80090e2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	080093b5 	.word	0x080093b5
 80090f4:	0800930d 	.word	0x0800930d
 80090f8:	080093d1 	.word	0x080093d1

080090fc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10e      	bne.n	800913c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009124:	2b00      	cmp	r3, #0
 8009126:	d009      	beq.n	800913c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800912e:	2b00      	cmp	r3, #0
 8009130:	d004      	beq.n	800913c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	4798      	blx	r3
    return;
 800913a:	e0ce      	b.n	80092da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	f003 0302 	and.w	r3, r3, #2
 8009142:	2b00      	cmp	r3, #0
 8009144:	d009      	beq.n	800915a <HAL_SPI_IRQHandler+0x5e>
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800914c:	2b00      	cmp	r3, #0
 800914e:	d004      	beq.n	800915a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	4798      	blx	r3
    return;
 8009158:	e0bf      	b.n	80092da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	f003 0320 	and.w	r3, r3, #32
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10a      	bne.n	800917a <HAL_SPI_IRQHandler+0x7e>
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800916a:	2b00      	cmp	r3, #0
 800916c:	d105      	bne.n	800917a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 80b0 	beq.w	80092da <HAL_SPI_IRQHandler+0x1de>
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	f003 0320 	and.w	r3, r3, #32
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 80aa 	beq.w	80092da <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800918c:	2b00      	cmp	r3, #0
 800918e:	d023      	beq.n	80091d8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009196:	b2db      	uxtb	r3, r3
 8009198:	2b03      	cmp	r3, #3
 800919a:	d011      	beq.n	80091c0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091a0:	f043 0204 	orr.w	r2, r3, #4
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091a8:	2300      	movs	r3, #0
 80091aa:	617b      	str	r3, [r7, #20]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	617b      	str	r3, [r7, #20]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	617b      	str	r3, [r7, #20]
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	e00b      	b.n	80091d8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091c0:	2300      	movs	r3, #0
 80091c2:	613b      	str	r3, [r7, #16]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	613b      	str	r3, [r7, #16]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	613b      	str	r3, [r7, #16]
 80091d4:	693b      	ldr	r3, [r7, #16]
        return;
 80091d6:	e080      	b.n	80092da <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	f003 0320 	and.w	r3, r3, #32
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d014      	beq.n	800920c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091e6:	f043 0201 	orr.w	r2, r3, #1
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80091ee:	2300      	movs	r3, #0
 80091f0:	60fb      	str	r3, [r7, #12]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	60fb      	str	r3, [r7, #12]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009208:	601a      	str	r2, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00c      	beq.n	8009230 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800921a:	f043 0208 	orr.w	r2, r3, #8
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009222:	2300      	movs	r3, #0
 8009224:	60bb      	str	r3, [r7, #8]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	60bb      	str	r3, [r7, #8]
 800922e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009234:	2b00      	cmp	r3, #0
 8009236:	d04f      	beq.n	80092d8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	685a      	ldr	r2, [r3, #4]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009246:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b00      	cmp	r3, #0
 8009258:	d104      	bne.n	8009264 <HAL_SPI_IRQHandler+0x168>
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	2b00      	cmp	r3, #0
 8009262:	d034      	beq.n	80092ce <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f022 0203 	bic.w	r2, r2, #3
 8009272:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009278:	2b00      	cmp	r3, #0
 800927a:	d011      	beq.n	80092a0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009280:	4a17      	ldr	r2, [pc, #92]	@ (80092e0 <HAL_SPI_IRQHandler+0x1e4>)
 8009282:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009288:	4618      	mov	r0, r3
 800928a:	f7fb fc5d 	bl	8004b48 <HAL_DMA_Abort_IT>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d005      	beq.n	80092a0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009298:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d016      	beq.n	80092d6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092ac:	4a0c      	ldr	r2, [pc, #48]	@ (80092e0 <HAL_SPI_IRQHandler+0x1e4>)
 80092ae:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fb fc47 	bl	8004b48 <HAL_DMA_Abort_IT>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00a      	beq.n	80092d6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80092cc:	e003      	b.n	80092d6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f812 	bl	80092f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80092d4:	e000      	b.n	80092d8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80092d6:	bf00      	nop
    return;
 80092d8:	bf00      	nop
  }
}
 80092da:	3720      	adds	r7, #32
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	08009411 	.word	0x08009411

080092e4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009318:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800931a:	f7fa feb7 	bl	800408c <HAL_GetTick>
 800931e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800932a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800932e:	d03b      	beq.n	80093a8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f022 0220 	bic.w	r2, r2, #32
 800933e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f022 0202 	bic.w	r2, r2, #2
 800934e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	2164      	movs	r1, #100	@ 0x64
 8009354:	6978      	ldr	r0, [r7, #20]
 8009356:	f000 f8f7 	bl	8009548 <SPI_EndRxTxTransaction>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d005      	beq.n	800936c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009364:	f043 0220 	orr.w	r2, r3, #32
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10a      	bne.n	800938a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009374:	2300      	movs	r3, #0
 8009376:	60fb      	str	r3, [r7, #12]
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	60fb      	str	r3, [r7, #12]
 8009388:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2200      	movs	r2, #0
 800938e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800939c:	2b00      	cmp	r3, #0
 800939e:	d003      	beq.n	80093a8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80093a0:	6978      	ldr	r0, [r7, #20]
 80093a2:	f7ff ffa9 	bl	80092f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80093a6:	e002      	b.n	80093ae <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80093a8:	6978      	ldr	r0, [r7, #20]
 80093aa:	f7f7 fbed 	bl	8000b88 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f7ff ff8e 	bl	80092e4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80093c8:	bf00      	nop
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093dc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	685a      	ldr	r2, [r3, #4]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f022 0203 	bic.w	r2, r2, #3
 80093ec:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093f2:	f043 0210 	orr.w	r2, r3, #16
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f7ff ff78 	bl	80092f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009408:	bf00      	nop
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800941c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f7ff ff64 	bl	80092f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009430:	bf00      	nop
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b088      	sub	sp, #32
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	603b      	str	r3, [r7, #0]
 8009444:	4613      	mov	r3, r2
 8009446:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009448:	f7fa fe20 	bl	800408c <HAL_GetTick>
 800944c:	4602      	mov	r2, r0
 800944e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009450:	1a9b      	subs	r3, r3, r2
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	4413      	add	r3, r2
 8009456:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009458:	f7fa fe18 	bl	800408c <HAL_GetTick>
 800945c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800945e:	4b39      	ldr	r3, [pc, #228]	@ (8009544 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	015b      	lsls	r3, r3, #5
 8009464:	0d1b      	lsrs	r3, r3, #20
 8009466:	69fa      	ldr	r2, [r7, #28]
 8009468:	fb02 f303 	mul.w	r3, r2, r3
 800946c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800946e:	e054      	b.n	800951a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009476:	d050      	beq.n	800951a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009478:	f7fa fe08 	bl	800408c <HAL_GetTick>
 800947c:	4602      	mov	r2, r0
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	69fa      	ldr	r2, [r7, #28]
 8009484:	429a      	cmp	r2, r3
 8009486:	d902      	bls.n	800948e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d13d      	bne.n	800950a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800949c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094a6:	d111      	bne.n	80094cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094b0:	d004      	beq.n	80094bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094ba:	d107      	bne.n	80094cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094d4:	d10f      	bne.n	80094f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80094e4:	601a      	str	r2, [r3, #0]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80094f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e017      	b.n	800953a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d101      	bne.n	8009514 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009510:	2300      	movs	r3, #0
 8009512:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	3b01      	subs	r3, #1
 8009518:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	689a      	ldr	r2, [r3, #8]
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	4013      	ands	r3, r2
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	429a      	cmp	r2, r3
 8009528:	bf0c      	ite	eq
 800952a:	2301      	moveq	r3, #1
 800952c:	2300      	movne	r3, #0
 800952e:	b2db      	uxtb	r3, r3
 8009530:	461a      	mov	r2, r3
 8009532:	79fb      	ldrb	r3, [r7, #7]
 8009534:	429a      	cmp	r2, r3
 8009536:	d19b      	bne.n	8009470 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3720      	adds	r7, #32
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	20000030 	.word	0x20000030

08009548 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b088      	sub	sp, #32
 800954c:	af02      	add	r7, sp, #8
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	2201      	movs	r2, #1
 800955c:	2102      	movs	r1, #2
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f7ff ff6a 	bl	8009438 <SPI_WaitFlagStateUntilTimeout>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d007      	beq.n	800957a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800956e:	f043 0220 	orr.w	r2, r3, #32
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009576:	2303      	movs	r3, #3
 8009578:	e032      	b.n	80095e0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800957a:	4b1b      	ldr	r3, [pc, #108]	@ (80095e8 <SPI_EndRxTxTransaction+0xa0>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a1b      	ldr	r2, [pc, #108]	@ (80095ec <SPI_EndRxTxTransaction+0xa4>)
 8009580:	fba2 2303 	umull	r2, r3, r2, r3
 8009584:	0d5b      	lsrs	r3, r3, #21
 8009586:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800958a:	fb02 f303 	mul.w	r3, r2, r3
 800958e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009598:	d112      	bne.n	80095c0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	2200      	movs	r2, #0
 80095a2:	2180      	movs	r1, #128	@ 0x80
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f7ff ff47 	bl	8009438 <SPI_WaitFlagStateUntilTimeout>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d016      	beq.n	80095de <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095b4:	f043 0220 	orr.w	r2, r3, #32
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e00f      	b.n	80095e0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00a      	beq.n	80095dc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	3b01      	subs	r3, #1
 80095ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095d6:	2b80      	cmp	r3, #128	@ 0x80
 80095d8:	d0f2      	beq.n	80095c0 <SPI_EndRxTxTransaction+0x78>
 80095da:	e000      	b.n	80095de <SPI_EndRxTxTransaction+0x96>
        break;
 80095dc:	bf00      	nop
  }

  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	20000030 	.word	0x20000030
 80095ec:	165e9f81 	.word	0x165e9f81

080095f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d101      	bne.n	8009602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e041      	b.n	8009686 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	d106      	bne.n	800961c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f7fa fb3a 	bl	8003c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2202      	movs	r2, #2
 8009620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	3304      	adds	r3, #4
 800962c:	4619      	mov	r1, r3
 800962e:	4610      	mov	r0, r2
 8009630:	f000 fd86 	bl	800a140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
	...

08009690 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d001      	beq.n	80096a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e044      	b.n	8009732 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2202      	movs	r2, #2
 80096ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68da      	ldr	r2, [r3, #12]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f042 0201 	orr.w	r2, r2, #1
 80096be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a1e      	ldr	r2, [pc, #120]	@ (8009740 <HAL_TIM_Base_Start_IT+0xb0>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d018      	beq.n	80096fc <HAL_TIM_Base_Start_IT+0x6c>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096d2:	d013      	beq.n	80096fc <HAL_TIM_Base_Start_IT+0x6c>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a1a      	ldr	r2, [pc, #104]	@ (8009744 <HAL_TIM_Base_Start_IT+0xb4>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d00e      	beq.n	80096fc <HAL_TIM_Base_Start_IT+0x6c>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a19      	ldr	r2, [pc, #100]	@ (8009748 <HAL_TIM_Base_Start_IT+0xb8>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d009      	beq.n	80096fc <HAL_TIM_Base_Start_IT+0x6c>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a17      	ldr	r2, [pc, #92]	@ (800974c <HAL_TIM_Base_Start_IT+0xbc>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d004      	beq.n	80096fc <HAL_TIM_Base_Start_IT+0x6c>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a16      	ldr	r2, [pc, #88]	@ (8009750 <HAL_TIM_Base_Start_IT+0xc0>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d111      	bne.n	8009720 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f003 0307 	and.w	r3, r3, #7
 8009706:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2b06      	cmp	r3, #6
 800970c:	d010      	beq.n	8009730 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f042 0201 	orr.w	r2, r2, #1
 800971c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800971e:	e007      	b.n	8009730 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f042 0201 	orr.w	r2, r2, #1
 800972e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	40010000 	.word	0x40010000
 8009744:	40000400 	.word	0x40000400
 8009748:	40000800 	.word	0x40000800
 800974c:	40000c00 	.word	0x40000c00
 8009750:	40014000 	.word	0x40014000

08009754 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e041      	b.n	80097ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b00      	cmp	r3, #0
 8009770:	d106      	bne.n	8009780 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f839 	bl	80097f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2202      	movs	r2, #2
 8009784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	3304      	adds	r3, #4
 8009790:	4619      	mov	r1, r3
 8009792:	4610      	mov	r0, r2
 8009794:	f000 fcd4 	bl	800a140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80097f2:	b480      	push	{r7}
 80097f4:	b083      	sub	sp, #12
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80097fa:	bf00      	nop
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
	...

08009808 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d109      	bne.n	800982c <HAL_TIM_PWM_Start+0x24>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800981e:	b2db      	uxtb	r3, r3
 8009820:	2b01      	cmp	r3, #1
 8009822:	bf14      	ite	ne
 8009824:	2301      	movne	r3, #1
 8009826:	2300      	moveq	r3, #0
 8009828:	b2db      	uxtb	r3, r3
 800982a:	e022      	b.n	8009872 <HAL_TIM_PWM_Start+0x6a>
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	2b04      	cmp	r3, #4
 8009830:	d109      	bne.n	8009846 <HAL_TIM_PWM_Start+0x3e>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b01      	cmp	r3, #1
 800983c:	bf14      	ite	ne
 800983e:	2301      	movne	r3, #1
 8009840:	2300      	moveq	r3, #0
 8009842:	b2db      	uxtb	r3, r3
 8009844:	e015      	b.n	8009872 <HAL_TIM_PWM_Start+0x6a>
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	2b08      	cmp	r3, #8
 800984a:	d109      	bne.n	8009860 <HAL_TIM_PWM_Start+0x58>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b01      	cmp	r3, #1
 8009856:	bf14      	ite	ne
 8009858:	2301      	movne	r3, #1
 800985a:	2300      	moveq	r3, #0
 800985c:	b2db      	uxtb	r3, r3
 800985e:	e008      	b.n	8009872 <HAL_TIM_PWM_Start+0x6a>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009866:	b2db      	uxtb	r3, r3
 8009868:	2b01      	cmp	r3, #1
 800986a:	bf14      	ite	ne
 800986c:	2301      	movne	r3, #1
 800986e:	2300      	moveq	r3, #0
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d001      	beq.n	800987a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e068      	b.n	800994c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d104      	bne.n	800988a <HAL_TIM_PWM_Start+0x82>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2202      	movs	r2, #2
 8009884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009888:	e013      	b.n	80098b2 <HAL_TIM_PWM_Start+0xaa>
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b04      	cmp	r3, #4
 800988e:	d104      	bne.n	800989a <HAL_TIM_PWM_Start+0x92>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2202      	movs	r2, #2
 8009894:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009898:	e00b      	b.n	80098b2 <HAL_TIM_PWM_Start+0xaa>
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2b08      	cmp	r3, #8
 800989e:	d104      	bne.n	80098aa <HAL_TIM_PWM_Start+0xa2>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2202      	movs	r2, #2
 80098a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80098a8:	e003      	b.n	80098b2 <HAL_TIM_PWM_Start+0xaa>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2202      	movs	r2, #2
 80098ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2201      	movs	r2, #1
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 fef2 	bl	800a6a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a23      	ldr	r2, [pc, #140]	@ (8009954 <HAL_TIM_PWM_Start+0x14c>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d107      	bne.n	80098da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80098d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a1d      	ldr	r2, [pc, #116]	@ (8009954 <HAL_TIM_PWM_Start+0x14c>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d018      	beq.n	8009916 <HAL_TIM_PWM_Start+0x10e>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ec:	d013      	beq.n	8009916 <HAL_TIM_PWM_Start+0x10e>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a19      	ldr	r2, [pc, #100]	@ (8009958 <HAL_TIM_PWM_Start+0x150>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d00e      	beq.n	8009916 <HAL_TIM_PWM_Start+0x10e>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a17      	ldr	r2, [pc, #92]	@ (800995c <HAL_TIM_PWM_Start+0x154>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d009      	beq.n	8009916 <HAL_TIM_PWM_Start+0x10e>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a16      	ldr	r2, [pc, #88]	@ (8009960 <HAL_TIM_PWM_Start+0x158>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d004      	beq.n	8009916 <HAL_TIM_PWM_Start+0x10e>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a14      	ldr	r2, [pc, #80]	@ (8009964 <HAL_TIM_PWM_Start+0x15c>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d111      	bne.n	800993a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	f003 0307 	and.w	r3, r3, #7
 8009920:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2b06      	cmp	r3, #6
 8009926:	d010      	beq.n	800994a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f042 0201 	orr.w	r2, r2, #1
 8009936:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009938:	e007      	b.n	800994a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f042 0201 	orr.w	r2, r2, #1
 8009948:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	40010000 	.word	0x40010000
 8009958:	40000400 	.word	0x40000400
 800995c:	40000800 	.word	0x40000800
 8009960:	40000c00 	.word	0x40000c00
 8009964:	40014000 	.word	0x40014000

08009968 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d101      	bne.n	800997c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	e097      	b.n	8009aac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009982:	b2db      	uxtb	r3, r3
 8009984:	2b00      	cmp	r3, #0
 8009986:	d106      	bne.n	8009996 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7fa f9bb 	bl	8003d0c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2202      	movs	r2, #2
 800999a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	6812      	ldr	r2, [r2, #0]
 80099a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099ac:	f023 0307 	bic.w	r3, r3, #7
 80099b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	3304      	adds	r3, #4
 80099ba:	4619      	mov	r1, r3
 80099bc:	4610      	mov	r0, r2
 80099be:	f000 fbbf 	bl	800a140 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	699b      	ldr	r3, [r3, #24]
 80099d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6a1b      	ldr	r3, [r3, #32]
 80099d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	697a      	ldr	r2, [r7, #20]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099ea:	f023 0303 	bic.w	r3, r3, #3
 80099ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	689a      	ldr	r2, [r3, #8]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	021b      	lsls	r3, r3, #8
 80099fa:	4313      	orrs	r3, r2
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009a08:	f023 030c 	bic.w	r3, r3, #12
 8009a0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009a14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	68da      	ldr	r2, [r3, #12]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	69db      	ldr	r3, [r3, #28]
 8009a22:	021b      	lsls	r3, r3, #8
 8009a24:	4313      	orrs	r3, r2
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	011a      	lsls	r2, r3, #4
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	6a1b      	ldr	r3, [r3, #32]
 8009a36:	031b      	lsls	r3, r3, #12
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009a46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009a4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	695b      	ldr	r3, [r3, #20]
 8009a58:	011b      	lsls	r3, r3, #4
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009ac4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009acc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009ad4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009adc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d110      	bne.n	8009b06 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d102      	bne.n	8009af0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009aea:	7b7b      	ldrb	r3, [r7, #13]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d001      	beq.n	8009af4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	e089      	b.n	8009c08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2202      	movs	r2, #2
 8009af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2202      	movs	r2, #2
 8009b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b04:	e031      	b.n	8009b6a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	2b04      	cmp	r3, #4
 8009b0a:	d110      	bne.n	8009b2e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d102      	bne.n	8009b18 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b12:	7b3b      	ldrb	r3, [r7, #12]
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d001      	beq.n	8009b1c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e075      	b.n	8009c08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2202      	movs	r2, #2
 8009b28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b2c:	e01d      	b.n	8009b6a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d108      	bne.n	8009b46 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d105      	bne.n	8009b46 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b3a:	7b7b      	ldrb	r3, [r7, #13]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d102      	bne.n	8009b46 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b40:	7b3b      	ldrb	r3, [r7, #12]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d001      	beq.n	8009b4a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e05e      	b.n	8009c08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2202      	movs	r2, #2
 8009b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2202      	movs	r2, #2
 8009b56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2202      	movs	r2, #2
 8009b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2202      	movs	r2, #2
 8009b66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d003      	beq.n	8009b78 <HAL_TIM_Encoder_Start_IT+0xc4>
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	2b04      	cmp	r3, #4
 8009b74:	d010      	beq.n	8009b98 <HAL_TIM_Encoder_Start_IT+0xe4>
 8009b76:	e01f      	b.n	8009bb8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	2100      	movs	r1, #0
 8009b80:	4618      	mov	r0, r3
 8009b82:	f000 fd8f 	bl	800a6a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68da      	ldr	r2, [r3, #12]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f042 0202 	orr.w	r2, r2, #2
 8009b94:	60da      	str	r2, [r3, #12]
      break;
 8009b96:	e02e      	b.n	8009bf6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	2104      	movs	r1, #4
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f000 fd7f 	bl	800a6a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68da      	ldr	r2, [r3, #12]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f042 0204 	orr.w	r2, r2, #4
 8009bb4:	60da      	str	r2, [r3, #12]
      break;
 8009bb6:	e01e      	b.n	8009bf6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f000 fd6f 	bl	800a6a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	2104      	movs	r1, #4
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f000 fd68 	bl	800a6a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68da      	ldr	r2, [r3, #12]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f042 0202 	orr.w	r2, r2, #2
 8009be2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68da      	ldr	r2, [r3, #12]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f042 0204 	orr.w	r2, r2, #4
 8009bf2:	60da      	str	r2, [r3, #12]
      break;
 8009bf4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f042 0201 	orr.w	r2, r2, #1
 8009c04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	f003 0302 	and.w	r3, r3, #2
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d020      	beq.n	8009c74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f003 0302 	and.w	r3, r3, #2
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d01b      	beq.n	8009c74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f06f 0202 	mvn.w	r2, #2
 8009c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	f003 0303 	and.w	r3, r3, #3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7f8 f9be 	bl	8001fdc <HAL_TIM_IC_CaptureCallback>
 8009c60:	e005      	b.n	8009c6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fa4d 	bl	800a102 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fa54 	bl	800a116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	f003 0304 	and.w	r3, r3, #4
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d020      	beq.n	8009cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f003 0304 	and.w	r3, r3, #4
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d01b      	beq.n	8009cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f06f 0204 	mvn.w	r2, #4
 8009c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2202      	movs	r2, #2
 8009c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7f8 f998 	bl	8001fdc <HAL_TIM_IC_CaptureCallback>
 8009cac:	e005      	b.n	8009cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fa27 	bl	800a102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fa2e 	bl	800a116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	f003 0308 	and.w	r3, r3, #8
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d020      	beq.n	8009d0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f003 0308 	and.w	r3, r3, #8
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d01b      	beq.n	8009d0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f06f 0208 	mvn.w	r2, #8
 8009cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2204      	movs	r2, #4
 8009ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	69db      	ldr	r3, [r3, #28]
 8009cea:	f003 0303 	and.w	r3, r3, #3
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f7f8 f972 	bl	8001fdc <HAL_TIM_IC_CaptureCallback>
 8009cf8:	e005      	b.n	8009d06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fa01 	bl	800a102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fa08 	bl	800a116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f003 0310 	and.w	r3, r3, #16
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d020      	beq.n	8009d58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f003 0310 	and.w	r3, r3, #16
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d01b      	beq.n	8009d58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f06f 0210 	mvn.w	r2, #16
 8009d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2208      	movs	r2, #8
 8009d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	69db      	ldr	r3, [r3, #28]
 8009d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d003      	beq.n	8009d46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7f8 f94c 	bl	8001fdc <HAL_TIM_IC_CaptureCallback>
 8009d44:	e005      	b.n	8009d52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f9db 	bl	800a102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f9e2 	bl	800a116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00c      	beq.n	8009d7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f003 0301 	and.w	r3, r3, #1
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d007      	beq.n	8009d7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f06f 0201 	mvn.w	r2, #1
 8009d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7f6 fda6 	bl	80008c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00c      	beq.n	8009da0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d007      	beq.n	8009da0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fd72 	bl	800a884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00c      	beq.n	8009dc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d007      	beq.n	8009dc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f9b3 	bl	800a12a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	f003 0320 	and.w	r3, r3, #32
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00c      	beq.n	8009de8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f003 0320 	and.w	r3, r3, #32
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d007      	beq.n	8009de8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f06f 0220 	mvn.w	r2, #32
 8009de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 fd44 	bl	800a870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009de8:	bf00      	nop
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b086      	sub	sp, #24
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d101      	bne.n	8009e0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009e0a:	2302      	movs	r3, #2
 8009e0c:	e0ae      	b.n	8009f6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b0c      	cmp	r3, #12
 8009e1a:	f200 809f 	bhi.w	8009f5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e24:	08009e59 	.word	0x08009e59
 8009e28:	08009f5d 	.word	0x08009f5d
 8009e2c:	08009f5d 	.word	0x08009f5d
 8009e30:	08009f5d 	.word	0x08009f5d
 8009e34:	08009e99 	.word	0x08009e99
 8009e38:	08009f5d 	.word	0x08009f5d
 8009e3c:	08009f5d 	.word	0x08009f5d
 8009e40:	08009f5d 	.word	0x08009f5d
 8009e44:	08009edb 	.word	0x08009edb
 8009e48:	08009f5d 	.word	0x08009f5d
 8009e4c:	08009f5d 	.word	0x08009f5d
 8009e50:	08009f5d 	.word	0x08009f5d
 8009e54:	08009f1b 	.word	0x08009f1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68b9      	ldr	r1, [r7, #8]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 f9fa 	bl	800a258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	699a      	ldr	r2, [r3, #24]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f042 0208 	orr.w	r2, r2, #8
 8009e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	699a      	ldr	r2, [r3, #24]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f022 0204 	bic.w	r2, r2, #4
 8009e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6999      	ldr	r1, [r3, #24]
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	691a      	ldr	r2, [r3, #16]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	430a      	orrs	r2, r1
 8009e94:	619a      	str	r2, [r3, #24]
      break;
 8009e96:	e064      	b.n	8009f62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68b9      	ldr	r1, [r7, #8]
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f000 fa40 	bl	800a324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	699a      	ldr	r2, [r3, #24]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	699a      	ldr	r2, [r3, #24]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6999      	ldr	r1, [r3, #24]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	021a      	lsls	r2, r3, #8
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	430a      	orrs	r2, r1
 8009ed6:	619a      	str	r2, [r3, #24]
      break;
 8009ed8:	e043      	b.n	8009f62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68b9      	ldr	r1, [r7, #8]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 fa8b 	bl	800a3fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	69da      	ldr	r2, [r3, #28]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f042 0208 	orr.w	r2, r2, #8
 8009ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	69da      	ldr	r2, [r3, #28]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f022 0204 	bic.w	r2, r2, #4
 8009f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	69d9      	ldr	r1, [r3, #28]
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	691a      	ldr	r2, [r3, #16]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	430a      	orrs	r2, r1
 8009f16:	61da      	str	r2, [r3, #28]
      break;
 8009f18:	e023      	b.n	8009f62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68b9      	ldr	r1, [r7, #8]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 fad5 	bl	800a4d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	69da      	ldr	r2, [r3, #28]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	69da      	ldr	r2, [r3, #28]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	69d9      	ldr	r1, [r3, #28]
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	021a      	lsls	r2, r3, #8
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	430a      	orrs	r2, r1
 8009f58:	61da      	str	r2, [r3, #28]
      break;
 8009f5a:	e002      	b.n	8009f62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009f60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d101      	bne.n	8009f90 <HAL_TIM_ConfigClockSource+0x1c>
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	e0b4      	b.n	800a0fa <HAL_TIM_ConfigClockSource+0x186>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009fb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fc8:	d03e      	beq.n	800a048 <HAL_TIM_ConfigClockSource+0xd4>
 8009fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fce:	f200 8087 	bhi.w	800a0e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fd6:	f000 8086 	beq.w	800a0e6 <HAL_TIM_ConfigClockSource+0x172>
 8009fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fde:	d87f      	bhi.n	800a0e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009fe0:	2b70      	cmp	r3, #112	@ 0x70
 8009fe2:	d01a      	beq.n	800a01a <HAL_TIM_ConfigClockSource+0xa6>
 8009fe4:	2b70      	cmp	r3, #112	@ 0x70
 8009fe6:	d87b      	bhi.n	800a0e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009fe8:	2b60      	cmp	r3, #96	@ 0x60
 8009fea:	d050      	beq.n	800a08e <HAL_TIM_ConfigClockSource+0x11a>
 8009fec:	2b60      	cmp	r3, #96	@ 0x60
 8009fee:	d877      	bhi.n	800a0e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ff0:	2b50      	cmp	r3, #80	@ 0x50
 8009ff2:	d03c      	beq.n	800a06e <HAL_TIM_ConfigClockSource+0xfa>
 8009ff4:	2b50      	cmp	r3, #80	@ 0x50
 8009ff6:	d873      	bhi.n	800a0e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ff8:	2b40      	cmp	r3, #64	@ 0x40
 8009ffa:	d058      	beq.n	800a0ae <HAL_TIM_ConfigClockSource+0x13a>
 8009ffc:	2b40      	cmp	r3, #64	@ 0x40
 8009ffe:	d86f      	bhi.n	800a0e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a000:	2b30      	cmp	r3, #48	@ 0x30
 800a002:	d064      	beq.n	800a0ce <HAL_TIM_ConfigClockSource+0x15a>
 800a004:	2b30      	cmp	r3, #48	@ 0x30
 800a006:	d86b      	bhi.n	800a0e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a008:	2b20      	cmp	r3, #32
 800a00a:	d060      	beq.n	800a0ce <HAL_TIM_ConfigClockSource+0x15a>
 800a00c:	2b20      	cmp	r3, #32
 800a00e:	d867      	bhi.n	800a0e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a010:	2b00      	cmp	r3, #0
 800a012:	d05c      	beq.n	800a0ce <HAL_TIM_ConfigClockSource+0x15a>
 800a014:	2b10      	cmp	r3, #16
 800a016:	d05a      	beq.n	800a0ce <HAL_TIM_ConfigClockSource+0x15a>
 800a018:	e062      	b.n	800a0e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a02a:	f000 fb1b 	bl	800a664 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a03c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	609a      	str	r2, [r3, #8]
      break;
 800a046:	e04f      	b.n	800a0e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a058:	f000 fb04 	bl	800a664 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	689a      	ldr	r2, [r3, #8]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a06a:	609a      	str	r2, [r3, #8]
      break;
 800a06c:	e03c      	b.n	800a0e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a07a:	461a      	mov	r2, r3
 800a07c:	f000 fa78 	bl	800a570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2150      	movs	r1, #80	@ 0x50
 800a086:	4618      	mov	r0, r3
 800a088:	f000 fad1 	bl	800a62e <TIM_ITRx_SetConfig>
      break;
 800a08c:	e02c      	b.n	800a0e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a09a:	461a      	mov	r2, r3
 800a09c:	f000 fa97 	bl	800a5ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2160      	movs	r1, #96	@ 0x60
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 fac1 	bl	800a62e <TIM_ITRx_SetConfig>
      break;
 800a0ac:	e01c      	b.n	800a0e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	f000 fa58 	bl	800a570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2140      	movs	r1, #64	@ 0x40
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 fab1 	bl	800a62e <TIM_ITRx_SetConfig>
      break;
 800a0cc:	e00c      	b.n	800a0e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	4610      	mov	r0, r2
 800a0da:	f000 faa8 	bl	800a62e <TIM_ITRx_SetConfig>
      break;
 800a0de:	e003      	b.n	800a0e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	73fb      	strb	r3, [r7, #15]
      break;
 800a0e4:	e000      	b.n	800a0e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a0e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a102:	b480      	push	{r7}
 800a104:	b083      	sub	sp, #12
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a10a:	bf00      	nop
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a116:	b480      	push	{r7}
 800a118:	b083      	sub	sp, #12
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a11e:	bf00      	nop
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a132:	bf00      	nop
 800a134:	370c      	adds	r7, #12
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
	...

0800a140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a3a      	ldr	r2, [pc, #232]	@ (800a23c <TIM_Base_SetConfig+0xfc>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d00f      	beq.n	800a178 <TIM_Base_SetConfig+0x38>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a15e:	d00b      	beq.n	800a178 <TIM_Base_SetConfig+0x38>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a37      	ldr	r2, [pc, #220]	@ (800a240 <TIM_Base_SetConfig+0x100>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d007      	beq.n	800a178 <TIM_Base_SetConfig+0x38>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a36      	ldr	r2, [pc, #216]	@ (800a244 <TIM_Base_SetConfig+0x104>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d003      	beq.n	800a178 <TIM_Base_SetConfig+0x38>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a35      	ldr	r2, [pc, #212]	@ (800a248 <TIM_Base_SetConfig+0x108>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d108      	bne.n	800a18a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a17e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	4313      	orrs	r3, r2
 800a188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a2b      	ldr	r2, [pc, #172]	@ (800a23c <TIM_Base_SetConfig+0xfc>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d01b      	beq.n	800a1ca <TIM_Base_SetConfig+0x8a>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a198:	d017      	beq.n	800a1ca <TIM_Base_SetConfig+0x8a>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a28      	ldr	r2, [pc, #160]	@ (800a240 <TIM_Base_SetConfig+0x100>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d013      	beq.n	800a1ca <TIM_Base_SetConfig+0x8a>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a27      	ldr	r2, [pc, #156]	@ (800a244 <TIM_Base_SetConfig+0x104>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d00f      	beq.n	800a1ca <TIM_Base_SetConfig+0x8a>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a26      	ldr	r2, [pc, #152]	@ (800a248 <TIM_Base_SetConfig+0x108>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d00b      	beq.n	800a1ca <TIM_Base_SetConfig+0x8a>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a25      	ldr	r2, [pc, #148]	@ (800a24c <TIM_Base_SetConfig+0x10c>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d007      	beq.n	800a1ca <TIM_Base_SetConfig+0x8a>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a24      	ldr	r2, [pc, #144]	@ (800a250 <TIM_Base_SetConfig+0x110>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d003      	beq.n	800a1ca <TIM_Base_SetConfig+0x8a>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a23      	ldr	r2, [pc, #140]	@ (800a254 <TIM_Base_SetConfig+0x114>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d108      	bne.n	800a1dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	689a      	ldr	r2, [r3, #8]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a0e      	ldr	r2, [pc, #56]	@ (800a23c <TIM_Base_SetConfig+0xfc>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d103      	bne.n	800a210 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	691a      	ldr	r2, [r3, #16]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d105      	bne.n	800a22e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	691b      	ldr	r3, [r3, #16]
 800a226:	f023 0201 	bic.w	r2, r3, #1
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	611a      	str	r2, [r3, #16]
  }
}
 800a22e:	bf00      	nop
 800a230:	3714      	adds	r7, #20
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	40010000 	.word	0x40010000
 800a240:	40000400 	.word	0x40000400
 800a244:	40000800 	.word	0x40000800
 800a248:	40000c00 	.word	0x40000c00
 800a24c:	40014000 	.word	0x40014000
 800a250:	40014400 	.word	0x40014400
 800a254:	40014800 	.word	0x40014800

0800a258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a258:	b480      	push	{r7}
 800a25a:	b087      	sub	sp, #28
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a1b      	ldr	r3, [r3, #32]
 800a26c:	f023 0201 	bic.w	r2, r3, #1
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f023 0303 	bic.w	r3, r3, #3
 800a28e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	4313      	orrs	r3, r2
 800a298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f023 0302 	bic.w	r3, r3, #2
 800a2a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a1c      	ldr	r2, [pc, #112]	@ (800a320 <TIM_OC1_SetConfig+0xc8>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d10c      	bne.n	800a2ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	f023 0308 	bic.w	r3, r3, #8
 800a2ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f023 0304 	bic.w	r3, r3, #4
 800a2cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a13      	ldr	r2, [pc, #76]	@ (800a320 <TIM_OC1_SetConfig+0xc8>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d111      	bne.n	800a2fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a2e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	695b      	ldr	r3, [r3, #20]
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	685a      	ldr	r2, [r3, #4]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	621a      	str	r2, [r3, #32]
}
 800a314:	bf00      	nop
 800a316:	371c      	adds	r7, #28
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	40010000 	.word	0x40010000

0800a324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a324:	b480      	push	{r7}
 800a326:	b087      	sub	sp, #28
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a1b      	ldr	r3, [r3, #32]
 800a338:	f023 0210 	bic.w	r2, r3, #16
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	699b      	ldr	r3, [r3, #24]
 800a34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	021b      	lsls	r3, r3, #8
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	4313      	orrs	r3, r2
 800a366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	f023 0320 	bic.w	r3, r3, #32
 800a36e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	011b      	lsls	r3, r3, #4
 800a376:	697a      	ldr	r2, [r7, #20]
 800a378:	4313      	orrs	r3, r2
 800a37a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a1e      	ldr	r2, [pc, #120]	@ (800a3f8 <TIM_OC2_SetConfig+0xd4>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d10d      	bne.n	800a3a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a38a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	011b      	lsls	r3, r3, #4
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	4313      	orrs	r3, r2
 800a396:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a39e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a15      	ldr	r2, [pc, #84]	@ (800a3f8 <TIM_OC2_SetConfig+0xd4>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d113      	bne.n	800a3d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a3ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a3b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	695b      	ldr	r3, [r3, #20]
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	693a      	ldr	r2, [r7, #16]
 800a3d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	685a      	ldr	r2, [r3, #4]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	697a      	ldr	r2, [r7, #20]
 800a3e8:	621a      	str	r2, [r3, #32]
}
 800a3ea:	bf00      	nop
 800a3ec:	371c      	adds	r7, #28
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	40010000 	.word	0x40010000

0800a3fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b087      	sub	sp, #28
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6a1b      	ldr	r3, [r3, #32]
 800a410:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a42a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f023 0303 	bic.w	r3, r3, #3
 800a432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	4313      	orrs	r3, r2
 800a43c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	021b      	lsls	r3, r3, #8
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	4313      	orrs	r3, r2
 800a450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a1d      	ldr	r2, [pc, #116]	@ (800a4cc <TIM_OC3_SetConfig+0xd0>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d10d      	bne.n	800a476 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	021b      	lsls	r3, r3, #8
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4a14      	ldr	r2, [pc, #80]	@ (800a4cc <TIM_OC3_SetConfig+0xd0>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d113      	bne.n	800a4a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a48c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	695b      	ldr	r3, [r3, #20]
 800a492:	011b      	lsls	r3, r3, #4
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	4313      	orrs	r3, r2
 800a498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	011b      	lsls	r3, r3, #4
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	693a      	ldr	r2, [r7, #16]
 800a4aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	685a      	ldr	r2, [r3, #4]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	697a      	ldr	r2, [r7, #20]
 800a4be:	621a      	str	r2, [r3, #32]
}
 800a4c0:	bf00      	nop
 800a4c2:	371c      	adds	r7, #28
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr
 800a4cc:	40010000 	.word	0x40010000

0800a4d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b087      	sub	sp, #28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a1b      	ldr	r3, [r3, #32]
 800a4de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a1b      	ldr	r3, [r3, #32]
 800a4e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	021b      	lsls	r3, r3, #8
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	4313      	orrs	r3, r2
 800a512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a51a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	031b      	lsls	r3, r3, #12
 800a522:	693a      	ldr	r2, [r7, #16]
 800a524:	4313      	orrs	r3, r2
 800a526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4a10      	ldr	r2, [pc, #64]	@ (800a56c <TIM_OC4_SetConfig+0x9c>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d109      	bne.n	800a544 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a536:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	019b      	lsls	r3, r3, #6
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	4313      	orrs	r3, r2
 800a542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	693a      	ldr	r2, [r7, #16]
 800a55c:	621a      	str	r2, [r3, #32]
}
 800a55e:	bf00      	nop
 800a560:	371c      	adds	r7, #28
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	40010000 	.word	0x40010000

0800a570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a570:	b480      	push	{r7}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6a1b      	ldr	r3, [r3, #32]
 800a580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	f023 0201 	bic.w	r2, r3, #1
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a59a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	011b      	lsls	r3, r3, #4
 800a5a0:	693a      	ldr	r2, [r7, #16]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	f023 030a 	bic.w	r3, r3, #10
 800a5ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5ae:	697a      	ldr	r2, [r7, #20]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	693a      	ldr	r2, [r7, #16]
 800a5ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	621a      	str	r2, [r3, #32]
}
 800a5c2:	bf00      	nop
 800a5c4:	371c      	adds	r7, #28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b087      	sub	sp, #28
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	60f8      	str	r0, [r7, #12]
 800a5d6:	60b9      	str	r1, [r7, #8]
 800a5d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6a1b      	ldr	r3, [r3, #32]
 800a5e4:	f023 0210 	bic.w	r2, r3, #16
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	031b      	lsls	r3, r3, #12
 800a5fe:	693a      	ldr	r2, [r7, #16]
 800a600:	4313      	orrs	r3, r2
 800a602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a60a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	011b      	lsls	r3, r3, #4
 800a610:	697a      	ldr	r2, [r7, #20]
 800a612:	4313      	orrs	r3, r2
 800a614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	693a      	ldr	r2, [r7, #16]
 800a61a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	697a      	ldr	r2, [r7, #20]
 800a620:	621a      	str	r2, [r3, #32]
}
 800a622:	bf00      	nop
 800a624:	371c      	adds	r7, #28
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr

0800a62e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a62e:	b480      	push	{r7}
 800a630:	b085      	sub	sp, #20
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	f043 0307 	orr.w	r3, r3, #7
 800a650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	609a      	str	r2, [r3, #8]
}
 800a658:	bf00      	nop
 800a65a:	3714      	adds	r7, #20
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a664:	b480      	push	{r7}
 800a666:	b087      	sub	sp, #28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
 800a670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a67e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	021a      	lsls	r2, r3, #8
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	431a      	orrs	r2, r3
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	4313      	orrs	r3, r2
 800a690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	697a      	ldr	r2, [r7, #20]
 800a696:	609a      	str	r2, [r3, #8]
}
 800a698:	bf00      	nop
 800a69a:	371c      	adds	r7, #28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b087      	sub	sp, #28
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	f003 031f 	and.w	r3, r3, #31
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6a1a      	ldr	r2, [r3, #32]
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	43db      	mvns	r3, r3
 800a6c6:	401a      	ands	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6a1a      	ldr	r2, [r3, #32]
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	f003 031f 	and.w	r3, r3, #31
 800a6d6:	6879      	ldr	r1, [r7, #4]
 800a6d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a6dc:	431a      	orrs	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	621a      	str	r2, [r3, #32]
}
 800a6e2:	bf00      	nop
 800a6e4:	371c      	adds	r7, #28
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
	...

0800a6f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a700:	2b01      	cmp	r3, #1
 800a702:	d101      	bne.n	800a708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a704:	2302      	movs	r3, #2
 800a706:	e050      	b.n	800a7aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2202      	movs	r2, #2
 800a714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a72e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	4313      	orrs	r3, r2
 800a738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a1c      	ldr	r2, [pc, #112]	@ (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d018      	beq.n	800a77e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a754:	d013      	beq.n	800a77e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a18      	ldr	r2, [pc, #96]	@ (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d00e      	beq.n	800a77e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a16      	ldr	r2, [pc, #88]	@ (800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d009      	beq.n	800a77e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a15      	ldr	r2, [pc, #84]	@ (800a7c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d004      	beq.n	800a77e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a13      	ldr	r2, [pc, #76]	@ (800a7c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d10c      	bne.n	800a798 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	40010000 	.word	0x40010000
 800a7bc:	40000400 	.word	0x40000400
 800a7c0:	40000800 	.word	0x40000800
 800a7c4:	40000c00 	.word	0x40000c00
 800a7c8:	40014000 	.word	0x40014000

0800a7cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d101      	bne.n	800a7e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	e03d      	b.n	800a864 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	4313      	orrs	r3, r2
 800a80a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	4313      	orrs	r3, r2
 800a818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4313      	orrs	r3, r2
 800a826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	4313      	orrs	r3, r2
 800a834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	695b      	ldr	r3, [r3, #20]
 800a840:	4313      	orrs	r3, r2
 800a842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	69db      	ldr	r3, [r3, #28]
 800a84e:	4313      	orrs	r3, r2
 800a850:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3714      	adds	r7, #20
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a878:	bf00      	nop
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a88c:	bf00      	nop
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d101      	bne.n	800a8aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e042      	b.n	800a930 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d106      	bne.n	800a8c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f7f9 fad8 	bl	8003e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2224      	movs	r2, #36	@ 0x24
 800a8c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68da      	ldr	r2, [r3, #12]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a8da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fa9f 	bl	800ae20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	691a      	ldr	r2, [r3, #16]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a8f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	695a      	ldr	r2, [r3, #20]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68da      	ldr	r2, [r3, #12]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2220      	movs	r2, #32
 800a91c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2220      	movs	r2, #32
 800a924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	4613      	mov	r3, r2
 800a944:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b20      	cmp	r3, #32
 800a950:	d112      	bne.n	800a978 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d002      	beq.n	800a95e <HAL_UART_Receive_DMA+0x26>
 800a958:	88fb      	ldrh	r3, [r7, #6]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d101      	bne.n	800a962 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	e00b      	b.n	800a97a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2200      	movs	r2, #0
 800a966:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a968:	88fb      	ldrh	r3, [r7, #6]
 800a96a:	461a      	mov	r2, r3
 800a96c:	68b9      	ldr	r1, [r7, #8]
 800a96e:	68f8      	ldr	r0, [r7, #12]
 800a970:	f000 f930 	bl	800abd4 <UART_Start_Receive_DMA>
 800a974:	4603      	mov	r3, r0
 800a976:	e000      	b.n	800a97a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a978:	2302      	movs	r3, #2
  }
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a982:	b480      	push	{r7}
 800a984:	b083      	sub	sp, #12
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a98a:	bf00      	nop
 800a98c:	370c      	adds	r7, #12
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr

0800a996 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a996:	b480      	push	{r7}
 800a998:	b083      	sub	sp, #12
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a99e:	bf00      	nop
 800a9a0:	370c      	adds	r7, #12
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9aa:	b480      	push	{r7}
 800a9ac:	b083      	sub	sp, #12
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a9b2:	bf00      	nop
 800a9b4:	370c      	adds	r7, #12
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr

0800a9be <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a9be:	b480      	push	{r7}
 800a9c0:	b083      	sub	sp, #12
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a9ca:	bf00      	nop
 800a9cc:	370c      	adds	r7, #12
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b09c      	sub	sp, #112	@ 0x70
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d172      	bne.n	800aad8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a9f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	330c      	adds	r3, #12
 800a9fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa02:	e853 3f00 	ldrex	r3, [r3]
 800aa06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	330c      	adds	r3, #12
 800aa16:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aa18:	65ba      	str	r2, [r7, #88]	@ 0x58
 800aa1a:	657b      	str	r3, [r7, #84]	@ 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa20:	e841 2300 	strex	r3, r2, [r1]
 800aa24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1e5      	bne.n	800a9f8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	3314      	adds	r3, #20
 800aa32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa36:	e853 3f00 	ldrex	r3, [r3]
 800aa3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa3e:	f023 0301 	bic.w	r3, r3, #1
 800aa42:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	3314      	adds	r3, #20
 800aa4a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa4c:	647a      	str	r2, [r7, #68]	@ 0x44
 800aa4e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa54:	e841 2300 	strex	r3, r2, [r1]
 800aa58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1e5      	bne.n	800aa2c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	3314      	adds	r3, #20
 800aa66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6a:	e853 3f00 	ldrex	r3, [r3]
 800aa6e:	623b      	str	r3, [r7, #32]
   return(result);
 800aa70:	6a3b      	ldr	r3, [r7, #32]
 800aa72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa76:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	3314      	adds	r3, #20
 800aa7e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aa80:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa88:	e841 2300 	strex	r3, r2, [r1]
 800aa8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1e5      	bne.n	800aa60 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa96:	2220      	movs	r2, #32
 800aa98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d119      	bne.n	800aad8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	330c      	adds	r3, #12
 800aaaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	e853 3f00 	ldrex	r3, [r3]
 800aab2:	60fb      	str	r3, [r7, #12]
   return(result);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f023 0310 	bic.w	r3, r3, #16
 800aaba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aabc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	330c      	adds	r3, #12
 800aac2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aac4:	61fa      	str	r2, [r7, #28]
 800aac6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac8:	69b9      	ldr	r1, [r7, #24]
 800aaca:	69fa      	ldr	r2, [r7, #28]
 800aacc:	e841 2300 	strex	r3, r2, [r1]
 800aad0:	617b      	str	r3, [r7, #20]
   return(result);
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1e5      	bne.n	800aaa4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aada:	2200      	movs	r2, #0
 800aadc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aade:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d106      	bne.n	800aaf4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aae6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aae8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aaea:	4619      	mov	r1, r3
 800aaec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aaee:	f7ff ff66 	bl	800a9be <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aaf2:	e002      	b.n	800aafa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800aaf4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aaf6:	f7ff ff44 	bl	800a982 <HAL_UART_RxCpltCallback>
}
 800aafa:	bf00      	nop
 800aafc:	3770      	adds	r7, #112	@ 0x70
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b084      	sub	sp, #16
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab0e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2201      	movs	r2, #1
 800ab14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d108      	bne.n	800ab30 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab22:	085b      	lsrs	r3, r3, #1
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	4619      	mov	r1, r3
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f7ff ff48 	bl	800a9be <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab2e:	e002      	b.n	800ab36 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f7ff ff30 	bl	800a996 <HAL_UART_RxHalfCpltCallback>
}
 800ab36:	bf00      	nop
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b084      	sub	sp, #16
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ab46:	2300      	movs	r3, #0
 800ab48:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab4e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	695b      	ldr	r3, [r3, #20]
 800ab56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab5a:	2b80      	cmp	r3, #128	@ 0x80
 800ab5c:	bf0c      	ite	eq
 800ab5e:	2301      	moveq	r3, #1
 800ab60:	2300      	movne	r3, #0
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	2b21      	cmp	r3, #33	@ 0x21
 800ab70:	d108      	bne.n	800ab84 <UART_DMAError+0x46>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d005      	beq.n	800ab84 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800ab7e:	68b8      	ldr	r0, [r7, #8]
 800ab80:	f000 f8c2 	bl	800ad08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	695b      	ldr	r3, [r3, #20]
 800ab8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab8e:	2b40      	cmp	r3, #64	@ 0x40
 800ab90:	bf0c      	ite	eq
 800ab92:	2301      	moveq	r3, #1
 800ab94:	2300      	movne	r3, #0
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b22      	cmp	r3, #34	@ 0x22
 800aba4:	d108      	bne.n	800abb8 <UART_DMAError+0x7a>
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d005      	beq.n	800abb8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	2200      	movs	r2, #0
 800abb0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800abb2:	68b8      	ldr	r0, [r7, #8]
 800abb4:	f000 f8d0 	bl	800ad58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abbc:	f043 0210 	orr.w	r2, r3, #16
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abc4:	68b8      	ldr	r0, [r7, #8]
 800abc6:	f7ff fef0 	bl	800a9aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abca:	bf00      	nop
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
	...

0800abd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b098      	sub	sp, #96	@ 0x60
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	4613      	mov	r3, r2
 800abe0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	88fa      	ldrh	r2, [r7, #6]
 800abec:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2200      	movs	r2, #0
 800abf2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2222      	movs	r2, #34	@ 0x22
 800abf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac00:	4a3e      	ldr	r2, [pc, #248]	@ (800acfc <UART_Start_Receive_DMA+0x128>)
 800ac02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac08:	4a3d      	ldr	r2, [pc, #244]	@ (800ad00 <UART_Start_Receive_DMA+0x12c>)
 800ac0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac10:	4a3c      	ldr	r2, [pc, #240]	@ (800ad04 <UART_Start_Receive_DMA+0x130>)
 800ac12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac18:	2200      	movs	r2, #0
 800ac1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ac1c:	f107 0308 	add.w	r3, r7, #8
 800ac20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	88fb      	ldrh	r3, [r7, #6]
 800ac34:	f7f9 ff30 	bl	8004a98 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ac38:	2300      	movs	r3, #0
 800ac3a:	613b      	str	r3, [r7, #16]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	613b      	str	r3, [r7, #16]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	613b      	str	r3, [r7, #16]
 800ac4c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d019      	beq.n	800ac8a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	330c      	adds	r3, #12
 800ac5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac60:	e853 3f00 	ldrex	r3, [r3]
 800ac64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	330c      	adds	r3, #12
 800ac74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac76:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ac78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ac7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ac7e:	e841 2300 	strex	r3, r2, [r1]
 800ac82:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ac84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1e5      	bne.n	800ac56 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	3314      	adds	r3, #20
 800ac90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac94:	e853 3f00 	ldrex	r3, [r3]
 800ac98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac9c:	f043 0301 	orr.w	r3, r3, #1
 800aca0:	657b      	str	r3, [r7, #84]	@ 0x54
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	3314      	adds	r3, #20
 800aca8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800acaa:	63ba      	str	r2, [r7, #56]	@ 0x38
 800acac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800acb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800acb2:	e841 2300 	strex	r3, r2, [r1]
 800acb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800acb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1e5      	bne.n	800ac8a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3314      	adds	r3, #20
 800acc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	e853 3f00 	ldrex	r3, [r3]
 800accc:	617b      	str	r3, [r7, #20]
   return(result);
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acd4:	653b      	str	r3, [r7, #80]	@ 0x50
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3314      	adds	r3, #20
 800acdc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800acde:	627a      	str	r2, [r7, #36]	@ 0x24
 800ace0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace2:	6a39      	ldr	r1, [r7, #32]
 800ace4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ace6:	e841 2300 	strex	r3, r2, [r1]
 800acea:	61fb      	str	r3, [r7, #28]
   return(result);
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1e5      	bne.n	800acbe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3760      	adds	r7, #96	@ 0x60
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	0800a9d7 	.word	0x0800a9d7
 800ad00:	0800ab03 	.word	0x0800ab03
 800ad04:	0800ab3f 	.word	0x0800ab3f

0800ad08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b089      	sub	sp, #36	@ 0x24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	330c      	adds	r3, #12
 800ad16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	e853 3f00 	ldrex	r3, [r3]
 800ad1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ad26:	61fb      	str	r3, [r7, #28]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	330c      	adds	r3, #12
 800ad2e:	69fa      	ldr	r2, [r7, #28]
 800ad30:	61ba      	str	r2, [r7, #24]
 800ad32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad34:	6979      	ldr	r1, [r7, #20]
 800ad36:	69ba      	ldr	r2, [r7, #24]
 800ad38:	e841 2300 	strex	r3, r2, [r1]
 800ad3c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1e5      	bne.n	800ad10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2220      	movs	r2, #32
 800ad48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800ad4c:	bf00      	nop
 800ad4e:	3724      	adds	r7, #36	@ 0x24
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b095      	sub	sp, #84	@ 0x54
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	330c      	adds	r3, #12
 800ad66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad6a:	e853 3f00 	ldrex	r3, [r3]
 800ad6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	330c      	adds	r3, #12
 800ad7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ad80:	643a      	str	r2, [r7, #64]	@ 0x40
 800ad82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad88:	e841 2300 	strex	r3, r2, [r1]
 800ad8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1e5      	bne.n	800ad60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	3314      	adds	r3, #20
 800ad9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9c:	6a3b      	ldr	r3, [r7, #32]
 800ad9e:	e853 3f00 	ldrex	r3, [r3]
 800ada2:	61fb      	str	r3, [r7, #28]
   return(result);
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	f023 0301 	bic.w	r3, r3, #1
 800adaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	3314      	adds	r3, #20
 800adb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800adb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800adba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adbc:	e841 2300 	strex	r3, r2, [r1]
 800adc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800adc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d1e5      	bne.n	800ad94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d119      	bne.n	800ae04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	330c      	adds	r3, #12
 800add6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	e853 3f00 	ldrex	r3, [r3]
 800adde:	60bb      	str	r3, [r7, #8]
   return(result);
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	f023 0310 	bic.w	r3, r3, #16
 800ade6:	647b      	str	r3, [r7, #68]	@ 0x44
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	330c      	adds	r3, #12
 800adee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800adf0:	61ba      	str	r2, [r7, #24]
 800adf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf4:	6979      	ldr	r1, [r7, #20]
 800adf6:	69ba      	ldr	r2, [r7, #24]
 800adf8:	e841 2300 	strex	r3, r2, [r1]
 800adfc:	613b      	str	r3, [r7, #16]
   return(result);
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1e5      	bne.n	800add0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2220      	movs	r2, #32
 800ae08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ae12:	bf00      	nop
 800ae14:	3754      	adds	r7, #84	@ 0x54
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
	...

0800ae20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae24:	b0c0      	sub	sp, #256	@ 0x100
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ae38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae3c:	68d9      	ldr	r1, [r3, #12]
 800ae3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	ea40 0301 	orr.w	r3, r0, r1
 800ae48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae4e:	689a      	ldr	r2, [r3, #8]
 800ae50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	431a      	orrs	r2, r3
 800ae58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae5c:	695b      	ldr	r3, [r3, #20]
 800ae5e:	431a      	orrs	r2, r3
 800ae60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae64:	69db      	ldr	r3, [r3, #28]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ae6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ae78:	f021 010c 	bic.w	r1, r1, #12
 800ae7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ae86:	430b      	orrs	r3, r1
 800ae88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ae8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	695b      	ldr	r3, [r3, #20]
 800ae92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ae96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae9a:	6999      	ldr	r1, [r3, #24]
 800ae9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	ea40 0301 	orr.w	r3, r0, r1
 800aea6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	4b8f      	ldr	r3, [pc, #572]	@ (800b0ec <UART_SetConfig+0x2cc>)
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d005      	beq.n	800aec0 <UART_SetConfig+0xa0>
 800aeb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	4b8d      	ldr	r3, [pc, #564]	@ (800b0f0 <UART_SetConfig+0x2d0>)
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d104      	bne.n	800aeca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aec0:	f7fd fbd2 	bl	8008668 <HAL_RCC_GetPCLK2Freq>
 800aec4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800aec8:	e003      	b.n	800aed2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aeca:	f7fd fbb9 	bl	8008640 <HAL_RCC_GetPCLK1Freq>
 800aece:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aed6:	69db      	ldr	r3, [r3, #28]
 800aed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aedc:	f040 810c 	bne.w	800b0f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aee4:	2200      	movs	r2, #0
 800aee6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aeea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800aeee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800aef2:	4622      	mov	r2, r4
 800aef4:	462b      	mov	r3, r5
 800aef6:	1891      	adds	r1, r2, r2
 800aef8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800aefa:	415b      	adcs	r3, r3
 800aefc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aefe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800af02:	4621      	mov	r1, r4
 800af04:	eb12 0801 	adds.w	r8, r2, r1
 800af08:	4629      	mov	r1, r5
 800af0a:	eb43 0901 	adc.w	r9, r3, r1
 800af0e:	f04f 0200 	mov.w	r2, #0
 800af12:	f04f 0300 	mov.w	r3, #0
 800af16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800af22:	4690      	mov	r8, r2
 800af24:	4699      	mov	r9, r3
 800af26:	4623      	mov	r3, r4
 800af28:	eb18 0303 	adds.w	r3, r8, r3
 800af2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800af30:	462b      	mov	r3, r5
 800af32:	eb49 0303 	adc.w	r3, r9, r3
 800af36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800af3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800af46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800af4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800af4e:	460b      	mov	r3, r1
 800af50:	18db      	adds	r3, r3, r3
 800af52:	653b      	str	r3, [r7, #80]	@ 0x50
 800af54:	4613      	mov	r3, r2
 800af56:	eb42 0303 	adc.w	r3, r2, r3
 800af5a:	657b      	str	r3, [r7, #84]	@ 0x54
 800af5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800af60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800af64:	f7f5 f936 	bl	80001d4 <__aeabi_uldivmod>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4b61      	ldr	r3, [pc, #388]	@ (800b0f4 <UART_SetConfig+0x2d4>)
 800af6e:	fba3 2302 	umull	r2, r3, r3, r2
 800af72:	095b      	lsrs	r3, r3, #5
 800af74:	011c      	lsls	r4, r3, #4
 800af76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af7a:	2200      	movs	r2, #0
 800af7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800af80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800af84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800af88:	4642      	mov	r2, r8
 800af8a:	464b      	mov	r3, r9
 800af8c:	1891      	adds	r1, r2, r2
 800af8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800af90:	415b      	adcs	r3, r3
 800af92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800af98:	4641      	mov	r1, r8
 800af9a:	eb12 0a01 	adds.w	sl, r2, r1
 800af9e:	4649      	mov	r1, r9
 800afa0:	eb43 0b01 	adc.w	fp, r3, r1
 800afa4:	f04f 0200 	mov.w	r2, #0
 800afa8:	f04f 0300 	mov.w	r3, #0
 800afac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800afb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800afb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800afb8:	4692      	mov	sl, r2
 800afba:	469b      	mov	fp, r3
 800afbc:	4643      	mov	r3, r8
 800afbe:	eb1a 0303 	adds.w	r3, sl, r3
 800afc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800afc6:	464b      	mov	r3, r9
 800afc8:	eb4b 0303 	adc.w	r3, fp, r3
 800afcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800afd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800afdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800afe0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800afe4:	460b      	mov	r3, r1
 800afe6:	18db      	adds	r3, r3, r3
 800afe8:	643b      	str	r3, [r7, #64]	@ 0x40
 800afea:	4613      	mov	r3, r2
 800afec:	eb42 0303 	adc.w	r3, r2, r3
 800aff0:	647b      	str	r3, [r7, #68]	@ 0x44
 800aff2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800aff6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800affa:	f7f5 f8eb 	bl	80001d4 <__aeabi_uldivmod>
 800affe:	4602      	mov	r2, r0
 800b000:	460b      	mov	r3, r1
 800b002:	4611      	mov	r1, r2
 800b004:	4b3b      	ldr	r3, [pc, #236]	@ (800b0f4 <UART_SetConfig+0x2d4>)
 800b006:	fba3 2301 	umull	r2, r3, r3, r1
 800b00a:	095b      	lsrs	r3, r3, #5
 800b00c:	2264      	movs	r2, #100	@ 0x64
 800b00e:	fb02 f303 	mul.w	r3, r2, r3
 800b012:	1acb      	subs	r3, r1, r3
 800b014:	00db      	lsls	r3, r3, #3
 800b016:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b01a:	4b36      	ldr	r3, [pc, #216]	@ (800b0f4 <UART_SetConfig+0x2d4>)
 800b01c:	fba3 2302 	umull	r2, r3, r3, r2
 800b020:	095b      	lsrs	r3, r3, #5
 800b022:	005b      	lsls	r3, r3, #1
 800b024:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b028:	441c      	add	r4, r3
 800b02a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b02e:	2200      	movs	r2, #0
 800b030:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b034:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b038:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b03c:	4642      	mov	r2, r8
 800b03e:	464b      	mov	r3, r9
 800b040:	1891      	adds	r1, r2, r2
 800b042:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b044:	415b      	adcs	r3, r3
 800b046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b048:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b04c:	4641      	mov	r1, r8
 800b04e:	1851      	adds	r1, r2, r1
 800b050:	6339      	str	r1, [r7, #48]	@ 0x30
 800b052:	4649      	mov	r1, r9
 800b054:	414b      	adcs	r3, r1
 800b056:	637b      	str	r3, [r7, #52]	@ 0x34
 800b058:	f04f 0200 	mov.w	r2, #0
 800b05c:	f04f 0300 	mov.w	r3, #0
 800b060:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b064:	4659      	mov	r1, fp
 800b066:	00cb      	lsls	r3, r1, #3
 800b068:	4651      	mov	r1, sl
 800b06a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b06e:	4651      	mov	r1, sl
 800b070:	00ca      	lsls	r2, r1, #3
 800b072:	4610      	mov	r0, r2
 800b074:	4619      	mov	r1, r3
 800b076:	4603      	mov	r3, r0
 800b078:	4642      	mov	r2, r8
 800b07a:	189b      	adds	r3, r3, r2
 800b07c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b080:	464b      	mov	r3, r9
 800b082:	460a      	mov	r2, r1
 800b084:	eb42 0303 	adc.w	r3, r2, r3
 800b088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b08c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b098:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b09c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	18db      	adds	r3, r3, r3
 800b0a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	eb42 0303 	adc.w	r3, r2, r3
 800b0ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b0b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b0b6:	f7f5 f88d 	bl	80001d4 <__aeabi_uldivmod>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	460b      	mov	r3, r1
 800b0be:	4b0d      	ldr	r3, [pc, #52]	@ (800b0f4 <UART_SetConfig+0x2d4>)
 800b0c0:	fba3 1302 	umull	r1, r3, r3, r2
 800b0c4:	095b      	lsrs	r3, r3, #5
 800b0c6:	2164      	movs	r1, #100	@ 0x64
 800b0c8:	fb01 f303 	mul.w	r3, r1, r3
 800b0cc:	1ad3      	subs	r3, r2, r3
 800b0ce:	00db      	lsls	r3, r3, #3
 800b0d0:	3332      	adds	r3, #50	@ 0x32
 800b0d2:	4a08      	ldr	r2, [pc, #32]	@ (800b0f4 <UART_SetConfig+0x2d4>)
 800b0d4:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d8:	095b      	lsrs	r3, r3, #5
 800b0da:	f003 0207 	and.w	r2, r3, #7
 800b0de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4422      	add	r2, r4
 800b0e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b0e8:	e106      	b.n	800b2f8 <UART_SetConfig+0x4d8>
 800b0ea:	bf00      	nop
 800b0ec:	40011000 	.word	0x40011000
 800b0f0:	40011400 	.word	0x40011400
 800b0f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b0f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b102:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b106:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b10a:	4642      	mov	r2, r8
 800b10c:	464b      	mov	r3, r9
 800b10e:	1891      	adds	r1, r2, r2
 800b110:	6239      	str	r1, [r7, #32]
 800b112:	415b      	adcs	r3, r3
 800b114:	627b      	str	r3, [r7, #36]	@ 0x24
 800b116:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b11a:	4641      	mov	r1, r8
 800b11c:	1854      	adds	r4, r2, r1
 800b11e:	4649      	mov	r1, r9
 800b120:	eb43 0501 	adc.w	r5, r3, r1
 800b124:	f04f 0200 	mov.w	r2, #0
 800b128:	f04f 0300 	mov.w	r3, #0
 800b12c:	00eb      	lsls	r3, r5, #3
 800b12e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b132:	00e2      	lsls	r2, r4, #3
 800b134:	4614      	mov	r4, r2
 800b136:	461d      	mov	r5, r3
 800b138:	4643      	mov	r3, r8
 800b13a:	18e3      	adds	r3, r4, r3
 800b13c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b140:	464b      	mov	r3, r9
 800b142:	eb45 0303 	adc.w	r3, r5, r3
 800b146:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b14a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b156:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b15a:	f04f 0200 	mov.w	r2, #0
 800b15e:	f04f 0300 	mov.w	r3, #0
 800b162:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b166:	4629      	mov	r1, r5
 800b168:	008b      	lsls	r3, r1, #2
 800b16a:	4621      	mov	r1, r4
 800b16c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b170:	4621      	mov	r1, r4
 800b172:	008a      	lsls	r2, r1, #2
 800b174:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b178:	f7f5 f82c 	bl	80001d4 <__aeabi_uldivmod>
 800b17c:	4602      	mov	r2, r0
 800b17e:	460b      	mov	r3, r1
 800b180:	4b60      	ldr	r3, [pc, #384]	@ (800b304 <UART_SetConfig+0x4e4>)
 800b182:	fba3 2302 	umull	r2, r3, r3, r2
 800b186:	095b      	lsrs	r3, r3, #5
 800b188:	011c      	lsls	r4, r3, #4
 800b18a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b18e:	2200      	movs	r2, #0
 800b190:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b194:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b198:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b19c:	4642      	mov	r2, r8
 800b19e:	464b      	mov	r3, r9
 800b1a0:	1891      	adds	r1, r2, r2
 800b1a2:	61b9      	str	r1, [r7, #24]
 800b1a4:	415b      	adcs	r3, r3
 800b1a6:	61fb      	str	r3, [r7, #28]
 800b1a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1ac:	4641      	mov	r1, r8
 800b1ae:	1851      	adds	r1, r2, r1
 800b1b0:	6139      	str	r1, [r7, #16]
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	414b      	adcs	r3, r1
 800b1b6:	617b      	str	r3, [r7, #20]
 800b1b8:	f04f 0200 	mov.w	r2, #0
 800b1bc:	f04f 0300 	mov.w	r3, #0
 800b1c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b1c4:	4659      	mov	r1, fp
 800b1c6:	00cb      	lsls	r3, r1, #3
 800b1c8:	4651      	mov	r1, sl
 800b1ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1ce:	4651      	mov	r1, sl
 800b1d0:	00ca      	lsls	r2, r1, #3
 800b1d2:	4610      	mov	r0, r2
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	4642      	mov	r2, r8
 800b1da:	189b      	adds	r3, r3, r2
 800b1dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b1e0:	464b      	mov	r3, r9
 800b1e2:	460a      	mov	r2, r1
 800b1e4:	eb42 0303 	adc.w	r3, r2, r3
 800b1e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b1ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b1f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b1f8:	f04f 0200 	mov.w	r2, #0
 800b1fc:	f04f 0300 	mov.w	r3, #0
 800b200:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b204:	4649      	mov	r1, r9
 800b206:	008b      	lsls	r3, r1, #2
 800b208:	4641      	mov	r1, r8
 800b20a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b20e:	4641      	mov	r1, r8
 800b210:	008a      	lsls	r2, r1, #2
 800b212:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b216:	f7f4 ffdd 	bl	80001d4 <__aeabi_uldivmod>
 800b21a:	4602      	mov	r2, r0
 800b21c:	460b      	mov	r3, r1
 800b21e:	4611      	mov	r1, r2
 800b220:	4b38      	ldr	r3, [pc, #224]	@ (800b304 <UART_SetConfig+0x4e4>)
 800b222:	fba3 2301 	umull	r2, r3, r3, r1
 800b226:	095b      	lsrs	r3, r3, #5
 800b228:	2264      	movs	r2, #100	@ 0x64
 800b22a:	fb02 f303 	mul.w	r3, r2, r3
 800b22e:	1acb      	subs	r3, r1, r3
 800b230:	011b      	lsls	r3, r3, #4
 800b232:	3332      	adds	r3, #50	@ 0x32
 800b234:	4a33      	ldr	r2, [pc, #204]	@ (800b304 <UART_SetConfig+0x4e4>)
 800b236:	fba2 2303 	umull	r2, r3, r2, r3
 800b23a:	095b      	lsrs	r3, r3, #5
 800b23c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b240:	441c      	add	r4, r3
 800b242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b246:	2200      	movs	r2, #0
 800b248:	673b      	str	r3, [r7, #112]	@ 0x70
 800b24a:	677a      	str	r2, [r7, #116]	@ 0x74
 800b24c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b250:	4642      	mov	r2, r8
 800b252:	464b      	mov	r3, r9
 800b254:	1891      	adds	r1, r2, r2
 800b256:	60b9      	str	r1, [r7, #8]
 800b258:	415b      	adcs	r3, r3
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b260:	4641      	mov	r1, r8
 800b262:	1851      	adds	r1, r2, r1
 800b264:	6039      	str	r1, [r7, #0]
 800b266:	4649      	mov	r1, r9
 800b268:	414b      	adcs	r3, r1
 800b26a:	607b      	str	r3, [r7, #4]
 800b26c:	f04f 0200 	mov.w	r2, #0
 800b270:	f04f 0300 	mov.w	r3, #0
 800b274:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b278:	4659      	mov	r1, fp
 800b27a:	00cb      	lsls	r3, r1, #3
 800b27c:	4651      	mov	r1, sl
 800b27e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b282:	4651      	mov	r1, sl
 800b284:	00ca      	lsls	r2, r1, #3
 800b286:	4610      	mov	r0, r2
 800b288:	4619      	mov	r1, r3
 800b28a:	4603      	mov	r3, r0
 800b28c:	4642      	mov	r2, r8
 800b28e:	189b      	adds	r3, r3, r2
 800b290:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b292:	464b      	mov	r3, r9
 800b294:	460a      	mov	r2, r1
 800b296:	eb42 0303 	adc.w	r3, r2, r3
 800b29a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b29c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	663b      	str	r3, [r7, #96]	@ 0x60
 800b2a6:	667a      	str	r2, [r7, #100]	@ 0x64
 800b2a8:	f04f 0200 	mov.w	r2, #0
 800b2ac:	f04f 0300 	mov.w	r3, #0
 800b2b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b2b4:	4649      	mov	r1, r9
 800b2b6:	008b      	lsls	r3, r1, #2
 800b2b8:	4641      	mov	r1, r8
 800b2ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2be:	4641      	mov	r1, r8
 800b2c0:	008a      	lsls	r2, r1, #2
 800b2c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b2c6:	f7f4 ff85 	bl	80001d4 <__aeabi_uldivmod>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b304 <UART_SetConfig+0x4e4>)
 800b2d0:	fba3 1302 	umull	r1, r3, r3, r2
 800b2d4:	095b      	lsrs	r3, r3, #5
 800b2d6:	2164      	movs	r1, #100	@ 0x64
 800b2d8:	fb01 f303 	mul.w	r3, r1, r3
 800b2dc:	1ad3      	subs	r3, r2, r3
 800b2de:	011b      	lsls	r3, r3, #4
 800b2e0:	3332      	adds	r3, #50	@ 0x32
 800b2e2:	4a08      	ldr	r2, [pc, #32]	@ (800b304 <UART_SetConfig+0x4e4>)
 800b2e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b2e8:	095b      	lsrs	r3, r3, #5
 800b2ea:	f003 020f 	and.w	r2, r3, #15
 800b2ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4422      	add	r2, r4
 800b2f6:	609a      	str	r2, [r3, #8]
}
 800b2f8:	bf00      	nop
 800b2fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b2fe:	46bd      	mov	sp, r7
 800b300:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b304:	51eb851f 	.word	0x51eb851f

0800b308 <memset>:
 800b308:	4402      	add	r2, r0
 800b30a:	4603      	mov	r3, r0
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d100      	bne.n	800b312 <memset+0xa>
 800b310:	4770      	bx	lr
 800b312:	f803 1b01 	strb.w	r1, [r3], #1
 800b316:	e7f9      	b.n	800b30c <memset+0x4>

0800b318 <strncmp>:
 800b318:	b510      	push	{r4, lr}
 800b31a:	b16a      	cbz	r2, 800b338 <strncmp+0x20>
 800b31c:	3901      	subs	r1, #1
 800b31e:	1884      	adds	r4, r0, r2
 800b320:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b324:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b328:	429a      	cmp	r2, r3
 800b32a:	d103      	bne.n	800b334 <strncmp+0x1c>
 800b32c:	42a0      	cmp	r0, r4
 800b32e:	d001      	beq.n	800b334 <strncmp+0x1c>
 800b330:	2a00      	cmp	r2, #0
 800b332:	d1f5      	bne.n	800b320 <strncmp+0x8>
 800b334:	1ad0      	subs	r0, r2, r3
 800b336:	bd10      	pop	{r4, pc}
 800b338:	4610      	mov	r0, r2
 800b33a:	e7fc      	b.n	800b336 <strncmp+0x1e>

0800b33c <strncpy>:
 800b33c:	b510      	push	{r4, lr}
 800b33e:	3901      	subs	r1, #1
 800b340:	4603      	mov	r3, r0
 800b342:	b132      	cbz	r2, 800b352 <strncpy+0x16>
 800b344:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b348:	f803 4b01 	strb.w	r4, [r3], #1
 800b34c:	3a01      	subs	r2, #1
 800b34e:	2c00      	cmp	r4, #0
 800b350:	d1f7      	bne.n	800b342 <strncpy+0x6>
 800b352:	441a      	add	r2, r3
 800b354:	2100      	movs	r1, #0
 800b356:	4293      	cmp	r3, r2
 800b358:	d100      	bne.n	800b35c <strncpy+0x20>
 800b35a:	bd10      	pop	{r4, pc}
 800b35c:	f803 1b01 	strb.w	r1, [r3], #1
 800b360:	e7f9      	b.n	800b356 <strncpy+0x1a>
	...

0800b364 <__libc_init_array>:
 800b364:	b570      	push	{r4, r5, r6, lr}
 800b366:	4d0d      	ldr	r5, [pc, #52]	@ (800b39c <__libc_init_array+0x38>)
 800b368:	4c0d      	ldr	r4, [pc, #52]	@ (800b3a0 <__libc_init_array+0x3c>)
 800b36a:	1b64      	subs	r4, r4, r5
 800b36c:	10a4      	asrs	r4, r4, #2
 800b36e:	2600      	movs	r6, #0
 800b370:	42a6      	cmp	r6, r4
 800b372:	d109      	bne.n	800b388 <__libc_init_array+0x24>
 800b374:	4d0b      	ldr	r5, [pc, #44]	@ (800b3a4 <__libc_init_array+0x40>)
 800b376:	4c0c      	ldr	r4, [pc, #48]	@ (800b3a8 <__libc_init_array+0x44>)
 800b378:	f000 f818 	bl	800b3ac <_init>
 800b37c:	1b64      	subs	r4, r4, r5
 800b37e:	10a4      	asrs	r4, r4, #2
 800b380:	2600      	movs	r6, #0
 800b382:	42a6      	cmp	r6, r4
 800b384:	d105      	bne.n	800b392 <__libc_init_array+0x2e>
 800b386:	bd70      	pop	{r4, r5, r6, pc}
 800b388:	f855 3b04 	ldr.w	r3, [r5], #4
 800b38c:	4798      	blx	r3
 800b38e:	3601      	adds	r6, #1
 800b390:	e7ee      	b.n	800b370 <__libc_init_array+0xc>
 800b392:	f855 3b04 	ldr.w	r3, [r5], #4
 800b396:	4798      	blx	r3
 800b398:	3601      	adds	r6, #1
 800b39a:	e7f2      	b.n	800b382 <__libc_init_array+0x1e>
 800b39c:	0800b4d0 	.word	0x0800b4d0
 800b3a0:	0800b4d0 	.word	0x0800b4d0
 800b3a4:	0800b4d0 	.word	0x0800b4d0
 800b3a8:	0800b4d4 	.word	0x0800b4d4

0800b3ac <_init>:
 800b3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ae:	bf00      	nop
 800b3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3b2:	bc08      	pop	{r3}
 800b3b4:	469e      	mov	lr, r3
 800b3b6:	4770      	bx	lr

0800b3b8 <_fini>:
 800b3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ba:	bf00      	nop
 800b3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3be:	bc08      	pop	{r3}
 800b3c0:	469e      	mov	lr, r3
 800b3c2:	4770      	bx	lr
