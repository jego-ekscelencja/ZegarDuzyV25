
ZegarDuzy14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008464  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080085f8  080085f8  000095f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086e0  080086e0  0000a03c  2**0
                  CONTENTS
  4 .ARM          00000008  080086e0  080086e0  000096e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086e8  080086e8  0000a03c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086e8  080086e8  000096e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086ec  080086ec  000096ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  080086f0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  2000003c  0800872c  0000a03c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000920  0800872c  0000a920  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fe6  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004119  00000000  00000000  00024052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  00028170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011de  00000000  00000000  00029858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8a7  00000000  00000000  0002aa36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f818  00000000  00000000  000462dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4fdd  00000000  00000000  00065af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010aad2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006010  00000000  00000000  0010ab18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00110b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000003c 	.word	0x2000003c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080085e0 	.word	0x080085e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000040 	.word	0x20000040
 80001d0:	080085e0 	.word	0x080085e0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004d6:	4b21      	ldr	r3, [pc, #132]	@ (800055c <MX_ADC1_Init+0x98>)
 80004d8:	4a21      	ldr	r2, [pc, #132]	@ (8000560 <MX_ADC1_Init+0x9c>)
 80004da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004dc:	4b1f      	ldr	r3, [pc, #124]	@ (800055c <MX_ADC1_Init+0x98>)
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e2:	4b1e      	ldr	r3, [pc, #120]	@ (800055c <MX_ADC1_Init+0x98>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004e8:	4b1c      	ldr	r3, [pc, #112]	@ (800055c <MX_ADC1_Init+0x98>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ee:	4b1b      	ldr	r3, [pc, #108]	@ (800055c <MX_ADC1_Init+0x98>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f4:	4b19      	ldr	r3, [pc, #100]	@ (800055c <MX_ADC1_Init+0x98>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fc:	4b17      	ldr	r3, [pc, #92]	@ (800055c <MX_ADC1_Init+0x98>)
 80004fe:	2200      	movs	r2, #0
 8000500:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000502:	4b16      	ldr	r3, [pc, #88]	@ (800055c <MX_ADC1_Init+0x98>)
 8000504:	4a17      	ldr	r2, [pc, #92]	@ (8000564 <MX_ADC1_Init+0xa0>)
 8000506:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000508:	4b14      	ldr	r3, [pc, #80]	@ (800055c <MX_ADC1_Init+0x98>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800050e:	4b13      	ldr	r3, [pc, #76]	@ (800055c <MX_ADC1_Init+0x98>)
 8000510:	2201      	movs	r2, #1
 8000512:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000514:	4b11      	ldr	r3, [pc, #68]	@ (800055c <MX_ADC1_Init+0x98>)
 8000516:	2200      	movs	r2, #0
 8000518:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051c:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <MX_ADC1_Init+0x98>)
 800051e:	2201      	movs	r2, #1
 8000520:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000522:	480e      	ldr	r0, [pc, #56]	@ (800055c <MX_ADC1_Init+0x98>)
 8000524:	f003 faae 	bl	8003a84 <HAL_ADC_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800052e:	f002 f947 	bl	80027c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000532:	2303      	movs	r3, #3
 8000534:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053e:	463b      	mov	r3, r7
 8000540:	4619      	mov	r1, r3
 8000542:	4806      	ldr	r0, [pc, #24]	@ (800055c <MX_ADC1_Init+0x98>)
 8000544:	f003 fb96 	bl	8003c74 <HAL_ADC_ConfigChannel>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800054e:	f002 f937 	bl	80027c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000058 	.word	0x20000058
 8000560:	40012000 	.word	0x40012000
 8000564:	0f000001 	.word	0x0f000001

08000568 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	@ 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a17      	ldr	r2, [pc, #92]	@ (80005e4 <HAL_ADC_MspInit+0x7c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d127      	bne.n	80005da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 8000590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000592:	4a15      	ldr	r2, [pc, #84]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 8000594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000598:	6453      	str	r3, [r2, #68]	@ 0x44
 800059a:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 800059c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800059e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a0e      	ldr	r2, [pc, #56]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <HAL_ADC_MspInit+0x80>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005c2:	2308      	movs	r3, #8
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c6:	2303      	movs	r3, #3
 80005c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	@ (80005ec <HAL_ADC_MspInit+0x84>)
 80005d6:	f004 fa0f 	bl	80049f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005da:	bf00      	nop
 80005dc:	3728      	adds	r7, #40	@ 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40012000 	.word	0x40012000
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020000 	.word	0x40020000

080005f0 <Button_RegisterPressCallback>:
		0, 0, 0, false, 0, 0, false, NULL, NULL, NULL, NULL, NULL } //,
		//{BUTTON2_PORT, BUTTON2_PIN, BUTTON_RELEASED, 0, 0, 0, false, 0, 0, false, NULL, NULL, NULL, NULL, NULL}
};

// Implementacja funkcji rejestrujących callbacky
void Button_RegisterPressCallback(uint8_t buttonIndex, ButtonCallback cb) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d109      	bne.n	8000616 <Button_RegisterPressCallback+0x26>
		buttons[buttonIndex].onPress = cb;
 8000602:	79fa      	ldrb	r2, [r7, #7]
 8000604:	4907      	ldr	r1, [pc, #28]	@ (8000624 <Button_RegisterPressCallback+0x34>)
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	440b      	add	r3, r1
 8000610:	331c      	adds	r3, #28
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	601a      	str	r2, [r3, #0]
	}
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000000 	.word	0x20000000

08000628 <Button_RegisterHoldCallback>:
	if (buttonIndex < NUM_BUTTONS) {
		buttons[buttonIndex].onRelease = cb;
	}
}

void Button_RegisterHoldCallback(uint8_t buttonIndex, ButtonCallback cb) {
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d109      	bne.n	800064e <Button_RegisterHoldCallback+0x26>
		buttons[buttonIndex].onHold = cb;
 800063a:	79fa      	ldrb	r2, [r7, #7]
 800063c:	4907      	ldr	r1, [pc, #28]	@ (800065c <Button_RegisterHoldCallback+0x34>)
 800063e:	4613      	mov	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4413      	add	r3, r2
 8000644:	011b      	lsls	r3, r3, #4
 8000646:	440b      	add	r3, r1
 8000648:	3324      	adds	r3, #36	@ 0x24
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	601a      	str	r2, [r3, #0]
	}
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000000 	.word	0x20000000

08000660 <Button_RegisterDoubleClickCallback>:
	if (buttonIndex < NUM_BUTTONS) {
		buttons[buttonIndex].onRepeat = cb;
	}
}

void Button_RegisterDoubleClickCallback(uint8_t buttonIndex, ButtonCallback cb) {
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
	if (buttonIndex < NUM_BUTTONS) {
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d109      	bne.n	8000686 <Button_RegisterDoubleClickCallback+0x26>
		buttons[buttonIndex].onDoubleClick = cb;
 8000672:	79fa      	ldrb	r2, [r7, #7]
 8000674:	4907      	ldr	r1, [pc, #28]	@ (8000694 <Button_RegisterDoubleClickCallback+0x34>)
 8000676:	4613      	mov	r3, r2
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	4413      	add	r3, r2
 800067c:	011b      	lsls	r3, r3, #4
 800067e:	440b      	add	r3, r1
 8000680:	332c      	adds	r3, #44	@ 0x2c
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	601a      	str	r2, [r3, #0]
	}
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000000 	.word	0x20000000

08000698 <Button_Process>:

// Logika w przerwaniu timera
extern volatile uint32_t systemTicks;  // Globalny licznik taktów czasu

void Button_Process(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++) {
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	e0d3      	b.n	800084c <Button_Process+0x1b4>
		Button_t *btn = &buttons[i];
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	4613      	mov	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	4413      	add	r3, r2
 80006ac:	011b      	lsls	r3, r3, #4
 80006ae:	4a6c      	ldr	r2, [pc, #432]	@ (8000860 <Button_Process+0x1c8>)
 80006b0:	4413      	add	r3, r2
 80006b2:	60bb      	str	r3, [r7, #8]

		// Odczytaj aktualny stan przycisku
		bool rawState =
				(HAL_GPIO_ReadPin(btn->port, btn->pin) == GPIO_PIN_RESET);
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	889b      	ldrh	r3, [r3, #4]
 80006bc:	4619      	mov	r1, r3
 80006be:	4610      	mov	r0, r2
 80006c0:	f004 fb1e 	bl	8004d00 <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
		bool rawState =
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	bf0c      	ite	eq
 80006ca:	2301      	moveq	r3, #1
 80006cc:	2300      	movne	r3, #0
 80006ce:	71fb      	strb	r3, [r7, #7]

		// Debounce
		if (rawState != (btn->state == BUTTON_PRESSED)) {
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	7992      	ldrb	r2, [r2, #6]
 80006d6:	2a01      	cmp	r2, #1
 80006d8:	bf0c      	ite	eq
 80006da:	2201      	moveq	r2, #1
 80006dc:	2200      	movne	r2, #0
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d056      	beq.n	8000792 <Button_Process+0xfa>
			btn->debounceCounter++;
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	79db      	ldrb	r3, [r3, #7]
 80006e8:	3301      	adds	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	71da      	strb	r2, [r3, #7]
			if (btn->debounceCounter >= DEBOUNCE_TICKS) {
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	79db      	ldrb	r3, [r3, #7]
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	d94f      	bls.n	8000798 <Button_Process+0x100>
				btn->debounceCounter = 0;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	2200      	movs	r2, #0
 80006fc:	71da      	strb	r2, [r3, #7]
				if (rawState) {
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d00a      	beq.n	800071a <Button_Process+0x82>
					// Naciśnięcie
					btn->state = BUTTON_PRESSED;
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	2201      	movs	r2, #1
 8000708:	719a      	strb	r2, [r3, #6]
					btn->pressTime = systemTicks;
 800070a:	4b56      	ldr	r3, [pc, #344]	@ (8000864 <Button_Process+0x1cc>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	609a      	str	r2, [r3, #8]
					btn->holdTriggered = false;
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	2200      	movs	r2, #0
 8000716:	741a      	strb	r2, [r3, #16]
 8000718:	e03e      	b.n	8000798 <Button_Process+0x100>
				} else {
					// Puszczenie
					btn->state = BUTTON_RELEASED;
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	2200      	movs	r2, #0
 800071e:	719a      	strb	r2, [r3, #6]

					// Obsługa kliknięć
					if (btn->waitingForDoubleClick) {
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	7e1b      	ldrb	r3, [r3, #24]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d011      	beq.n	800074c <Button_Process+0xb4>
						if ((systemTicks - btn->lastClickTime)
 8000728:	4b4e      	ldr	r3, [pc, #312]	@ (8000864 <Button_Process+0x1cc>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	2b1e      	cmp	r3, #30
 8000734:	d806      	bhi.n	8000744 <Button_Process+0xac>
								<= DOUBLE_CLICK_THRESHOLD) {
							btn->clickCount++;
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	7c5b      	ldrb	r3, [r3, #17]
 800073a:	3301      	adds	r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	745a      	strb	r2, [r3, #17]
 8000742:	e00d      	b.n	8000760 <Button_Process+0xc8>
						} else {
							// Minął czas na dwuklik
							btn->clickCount = 1;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	2201      	movs	r2, #1
 8000748:	745a      	strb	r2, [r3, #17]
 800074a:	e009      	b.n	8000760 <Button_Process+0xc8>
						}
					} else {
						btn->clickCount = 1;
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	2201      	movs	r2, #1
 8000750:	745a      	strb	r2, [r3, #17]
						btn->waitingForDoubleClick = true;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	2201      	movs	r2, #1
 8000756:	761a      	strb	r2, [r3, #24]
						btn->lastClickTime = systemTicks;
 8000758:	4b42      	ldr	r3, [pc, #264]	@ (8000864 <Button_Process+0x1cc>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	615a      	str	r2, [r3, #20]
					}

					if (btn->clickCount == 2) {
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	7c5b      	ldrb	r3, [r3, #17]
 8000764:	2b02      	cmp	r3, #2
 8000766:	d10c      	bne.n	8000782 <Button_Process+0xea>
						// Dwuklik
						btn->waitingForDoubleClick = false;
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	2200      	movs	r2, #0
 800076c:	761a      	strb	r2, [r3, #24]
						btn->clickCount = 0;
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	2200      	movs	r2, #0
 8000772:	745a      	strb	r2, [r3, #17]
						if (btn->onDoubleClick)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <Button_Process+0xea>
							btn->onDoubleClick();
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000780:	4798      	blx	r3
					}

					// Callback onRelease
					if (btn->onRelease)
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	6a1b      	ldr	r3, [r3, #32]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d006      	beq.n	8000798 <Button_Process+0x100>
						btn->onRelease();
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	6a1b      	ldr	r3, [r3, #32]
 800078e:	4798      	blx	r3
 8000790:	e002      	b.n	8000798 <Button_Process+0x100>
				}
			}
		} else {
			btn->debounceCounter = 0;
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	2200      	movs	r2, #0
 8000796:	71da      	strb	r2, [r3, #7]
		}

		// Obsługa timeoutu dwukliku
		if (btn->waitingForDoubleClick
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	7e1b      	ldrb	r3, [r3, #24]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d017      	beq.n	80007d0 <Button_Process+0x138>
				&& ((systemTicks - btn->lastClickTime) > DOUBLE_CLICK_THRESHOLD)) {
 80007a0:	4b30      	ldr	r3, [pc, #192]	@ (8000864 <Button_Process+0x1cc>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	2b1e      	cmp	r3, #30
 80007ac:	d910      	bls.n	80007d0 <Button_Process+0x138>
			if (btn->clickCount == 1) {
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	7c5b      	ldrb	r3, [r3, #17]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d106      	bne.n	80007c4 <Button_Process+0x12c>
				// Pojedynczy klik
				if (btn->onPress)
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <Button_Process+0x12c>
					btn->onPress();
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	4798      	blx	r3
			}
			btn->waitingForDoubleClick = false;
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	2200      	movs	r2, #0
 80007c8:	761a      	strb	r2, [r3, #24]
			btn->clickCount = 0;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	2200      	movs	r2, #0
 80007ce:	745a      	strb	r2, [r3, #17]
		}

		// Obsługa hold i repeat
		if (btn->state == BUTTON_PRESSED) {
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	799b      	ldrb	r3, [r3, #6]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d136      	bne.n	8000846 <Button_Process+0x1ae>
			uint32_t elapsed = systemTicks - btn->pressTime;
 80007d8:	4b22      	ldr	r3, [pc, #136]	@ (8000864 <Button_Process+0x1cc>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	603b      	str	r3, [r7, #0]
			if (!btn->holdTriggered && (elapsed >= HOLD_THRESHOLD)) {
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	7c1b      	ldrb	r3, [r3, #16]
 80007e8:	f083 0301 	eor.w	r3, r3, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d012      	beq.n	8000818 <Button_Process+0x180>
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	2b63      	cmp	r3, #99	@ 0x63
 80007f6:	d90f      	bls.n	8000818 <Button_Process+0x180>
				btn->holdTriggered = true;
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	2201      	movs	r2, #1
 80007fc:	741a      	strb	r2, [r3, #16]
				if (btn->onHold)
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <Button_Process+0x174>
					btn->onHold();
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800080a:	4798      	blx	r3
				btn->nextRepeatTime = systemTicks + REPEAT_INTERVAL;
 800080c:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <Button_Process+0x1cc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f103 0214 	add.w	r2, r3, #20
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	60da      	str	r2, [r3, #12]
			}
			if (btn->holdTriggered && (systemTicks >= btn->nextRepeatTime)) {
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	7c1b      	ldrb	r3, [r3, #16]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d012      	beq.n	8000846 <Button_Process+0x1ae>
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	68da      	ldr	r2, [r3, #12]
 8000824:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <Button_Process+0x1cc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	d80c      	bhi.n	8000846 <Button_Process+0x1ae>
				if (btn->onRepeat)
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <Button_Process+0x1a2>
					btn->onRepeat();
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000838:	4798      	blx	r3
				btn->nextRepeatTime += REPEAT_INTERVAL;
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	f103 0214 	add.w	r2, r3, #20
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	60da      	str	r2, [r3, #12]
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	f77f af28 	ble.w	80006a4 <Button_Process+0xc>
			}
		}
	}
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000000 	.word	0x20000000
 8000864:	2000067c 	.word	0x2000067c

08000868 <HAL_TIM_PeriodElapsedCallback>:

// Funkcja wywoływana w przerwaniu timera
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a12      	ldr	r2, [pc, #72]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d106      	bne.n	8000888 <HAL_TIM_PeriodElapsedCallback+0x20>
		systemTicks++;  // Inkrementacja globalnego licznika czasu
 800087a:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	3301      	adds	r3, #1
 8000880:	4a10      	ldr	r2, [pc, #64]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000882:	6013      	str	r3, [r2, #0]
		SLIDER_Update();
 8000884:	f002 fa32 	bl	8002cec <SLIDER_Update>
	}
	if (colon == 1) {
 8000888:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b01      	cmp	r3, #1
 8000890:	d112      	bne.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x50>
	        if (counter > 0) {
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d007      	beq.n	80008ac <HAL_TIM_PeriodElapsedCallback+0x44>
	            counter--; // Odliczanie licznika
 800089c:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <HAL_TIM_PeriodElapsedCallback+0x64>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	3b01      	subs	r3, #1
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80008a8:	701a      	strb	r2, [r3, #0]
	        }
	    }



}
 80008aa:	e005      	b.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x50>
	            counter = 50; // Reset licznika na 50
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80008ae:	2232      	movs	r2, #50	@ 0x32
 80008b0:	701a      	strb	r2, [r3, #0]
	            colon = 0;    // Ustawienie colon na 0
 80008b2:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40000c00 	.word	0x40000c00
 80008c4:	2000067c 	.word	0x2000067c
 80008c8:	200000bd 	.word	0x200000bd
 80008cc:	200000a0 	.word	0x200000a0

080008d0 <charToSegment>:
//static Bits192 regValue;         // Przechowuje 192 bity rozbite na 12×16

// Implementacja tablicy segmentMap i funkcji charToSegment.
// (Zwykle segmentMap mamy w Display.h jako static const,
//  ale jeśli wolisz mieć ją w .c, możesz przenieść tutaj.)
uint8_t charToSegment(char c) {
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]

    switch (c) {
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	3b2a      	subs	r3, #42	@ 0x2a
 80008de:	2b50      	cmp	r3, #80	@ 0x50
 80008e0:	f200 80dd 	bhi.w	8000a9e <charToSegment+0x1ce>
 80008e4:	a201      	add	r2, pc, #4	@ (adr r2, 80008ec <charToSegment+0x1c>)
 80008e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ea:	bf00      	nop
 80008ec:	08000a3f 	.word	0x08000a3f
 80008f0:	08000a9f 	.word	0x08000a9f
 80008f4:	08000a9f 	.word	0x08000a9f
 80008f8:	08000a3b 	.word	0x08000a3b
 80008fc:	08000a9f 	.word	0x08000a9f
 8000900:	08000a9f 	.word	0x08000a9f
 8000904:	08000a31 	.word	0x08000a31
 8000908:	08000a31 	.word	0x08000a31
 800090c:	08000a31 	.word	0x08000a31
 8000910:	08000a31 	.word	0x08000a31
 8000914:	08000a31 	.word	0x08000a31
 8000918:	08000a31 	.word	0x08000a31
 800091c:	08000a31 	.word	0x08000a31
 8000920:	08000a31 	.word	0x08000a31
 8000924:	08000a31 	.word	0x08000a31
 8000928:	08000a31 	.word	0x08000a31
 800092c:	08000a9f 	.word	0x08000a9f
 8000930:	08000a9f 	.word	0x08000a9f
 8000934:	08000a9f 	.word	0x08000a9f
 8000938:	08000a9f 	.word	0x08000a9f
 800093c:	08000a9f 	.word	0x08000a9f
 8000940:	08000a9f 	.word	0x08000a9f
 8000944:	08000a9f 	.word	0x08000a9f
 8000948:	08000a5b 	.word	0x08000a5b
 800094c:	08000a8f 	.word	0x08000a8f
 8000950:	08000a43 	.word	0x08000a43
 8000954:	08000a9f 	.word	0x08000a9f
 8000958:	08000a6f 	.word	0x08000a6f
 800095c:	08000a57 	.word	0x08000a57
 8000960:	08000a9f 	.word	0x08000a9f
 8000964:	08000a97 	.word	0x08000a97
 8000968:	08000a9f 	.word	0x08000a9f
 800096c:	08000a9b 	.word	0x08000a9b
 8000970:	08000a9f 	.word	0x08000a9f
 8000974:	08000a87 	.word	0x08000a87
 8000978:	08000a9f 	.word	0x08000a9f
 800097c:	08000a67 	.word	0x08000a67
 8000980:	08000a7f 	.word	0x08000a7f
 8000984:	08000a77 	.word	0x08000a77
 8000988:	08000a9f 	.word	0x08000a9f
 800098c:	08000a4b 	.word	0x08000a4b
 8000990:	08000a53 	.word	0x08000a53
 8000994:	08000a5f 	.word	0x08000a5f
 8000998:	08000a63 	.word	0x08000a63
 800099c:	08000a63 	.word	0x08000a63
 80009a0:	08000a63 	.word	0x08000a63
 80009a4:	08000a9f 	.word	0x08000a9f
 80009a8:	08000a9f 	.word	0x08000a9f
 80009ac:	08000a8b 	.word	0x08000a8b
 80009b0:	08000a9f 	.word	0x08000a9f
 80009b4:	08000a9f 	.word	0x08000a9f
 80009b8:	08000a9f 	.word	0x08000a9f
 80009bc:	08000a9f 	.word	0x08000a9f
 80009c0:	08000a9f 	.word	0x08000a9f
 80009c4:	08000a9f 	.word	0x08000a9f
 80009c8:	08000a5b 	.word	0x08000a5b
 80009cc:	08000a8f 	.word	0x08000a8f
 80009d0:	08000a47 	.word	0x08000a47
 80009d4:	08000a73 	.word	0x08000a73
 80009d8:	08000a6f 	.word	0x08000a6f
 80009dc:	08000a9f 	.word	0x08000a9f
 80009e0:	08000a9f 	.word	0x08000a9f
 80009e4:	08000a4f 	.word	0x08000a4f
 80009e8:	08000a6b 	.word	0x08000a6b
 80009ec:	08000a9b 	.word	0x08000a9b
 80009f0:	08000a9f 	.word	0x08000a9f
 80009f4:	08000a9f 	.word	0x08000a9f
 80009f8:	08000a9f 	.word	0x08000a9f
 80009fc:	08000a67 	.word	0x08000a67
 8000a00:	08000a7b 	.word	0x08000a7b
 8000a04:	08000a77 	.word	0x08000a77
 8000a08:	08000a9f 	.word	0x08000a9f
 8000a0c:	08000a4b 	.word	0x08000a4b
 8000a10:	08000a53 	.word	0x08000a53
 8000a14:	08000a5f 	.word	0x08000a5f
 8000a18:	08000a83 	.word	0x08000a83
 8000a1c:	08000a83 	.word	0x08000a83
 8000a20:	08000a83 	.word	0x08000a83
 8000a24:	08000a9f 	.word	0x08000a9f
 8000a28:	08000a93 	.word	0x08000a93
 8000a2c:	08000a8b 	.word	0x08000a8b
    case '0' ... '9':
        return segmentMap[c - '0'];
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	3b30      	subs	r3, #48	@ 0x30
 8000a34:	4a1d      	ldr	r2, [pc, #116]	@ (8000aac <charToSegment+0x1dc>)
 8000a36:	5cd3      	ldrb	r3, [r2, r3]
 8000a38:	e032      	b.n	8000aa0 <charToSegment+0x1d0>
    case '-':
        return segmentMap[11];
 8000a3a:	2340      	movs	r3, #64	@ 0x40
 8000a3c:	e030      	b.n	8000aa0 <charToSegment+0x1d0>
    case '*':
        return segmentMap[12];
 8000a3e:	2363      	movs	r3, #99	@ 0x63
 8000a40:	e02e      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'C':
        return segmentMap[13];
 8000a42:	2339      	movs	r3, #57	@ 0x39
 8000a44:	e02c      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'c':
        return segmentMap[29];
 8000a46:	236e      	movs	r3, #110	@ 0x6e
 8000a48:	e02a      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'r':
    case 'R':
        return segmentMap[14];
 8000a4a:	2350      	movs	r3, #80	@ 0x50
 8000a4c:	e028      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'h':
        return segmentMap[15];
 8000a4e:	2374      	movs	r3, #116	@ 0x74
 8000a50:	e026      	b.n	8000aa0 <charToSegment+0x1d0>
    case 's':
    case 'S':
        return segmentMap[5];
 8000a52:	236d      	movs	r3, #109	@ 0x6d
 8000a54:	e024      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'F':
        return segmentMap[16];
 8000a56:	2371      	movs	r3, #113	@ 0x71
 8000a58:	e022      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'A':
    case 'a':
        return segmentMap[17];
 8000a5a:	2377      	movs	r3, #119	@ 0x77
 8000a5c:	e020      	b.n	8000aa0 <charToSegment+0x1d0>
    case 't':
    case 'T':
        return segmentMap[18];
 8000a5e:	2378      	movs	r3, #120	@ 0x78
 8000a60:	e01e      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'V':
    case 'U':
    case 'W':
        return segmentMap[19];
 8000a62:	233e      	movs	r3, #62	@ 0x3e
 8000a64:	e01c      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'n':
    case 'N':
        return segmentMap[20];
 8000a66:	2354      	movs	r3, #84	@ 0x54
 8000a68:	e01a      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'i':
        return segmentMap[21];
 8000a6a:	2310      	movs	r3, #16
 8000a6c:	e018      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'E':
    case 'e':
        return segmentMap[22];
 8000a6e:	2379      	movs	r3, #121	@ 0x79
 8000a70:	e016      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'd':
        return segmentMap[23];
 8000a72:	235e      	movs	r3, #94	@ 0x5e
 8000a74:	e014      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'P':
    case 'p':
        return segmentMap[24];
 8000a76:	2373      	movs	r3, #115	@ 0x73
 8000a78:	e012      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'o':
        return segmentMap[25];
 8000a7a:	235c      	movs	r3, #92	@ 0x5c
 8000a7c:	e010      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'O':
        return segmentMap[0];
 8000a7e:	233f      	movs	r3, #63	@ 0x3f
 8000a80:	e00e      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'u':
    case 'w':
    case 'v':
        return segmentMap[26];
 8000a82:	231c      	movs	r3, #28
 8000a84:	e00c      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'L':
        return segmentMap[27];
 8000a86:	2338      	movs	r3, #56	@ 0x38
 8000a88:	e00a      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'z':
    case 'Z':
        return segmentMap[2];
 8000a8a:	235b      	movs	r3, #91	@ 0x5b
 8000a8c:	e008      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'b':
    case 'B':
        return segmentMap[28];
 8000a8e:	237c      	movs	r3, #124	@ 0x7c
 8000a90:	e006      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'y':
            return segmentMap[29];
 8000a92:	236e      	movs	r3, #110	@ 0x6e
 8000a94:	e004      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'H':
            return segmentMap[30];
 8000a96:	2376      	movs	r3, #118	@ 0x76
 8000a98:	e002      	b.n	8000aa0 <charToSegment+0x1d0>
    case 'j':
    case 'J':
                   return segmentMap[31];
 8000a9a:	231e      	movs	r3, #30
 8000a9c:	e000      	b.n	8000aa0 <charToSegment+0x1d0>
    default:
        // spacja lub nieobsługiwany znak
        return segmentMap[10];
 8000a9e:	2300      	movs	r3, #0
    }
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	08008620 	.word	0x08008620

08000ab0 <HAL_SPI_TxCpltCallback>:
 * ---------------------------------------------------------------------------
 * Implementacja funkcji obsługujących 192-bitowy rejestr wyświetlaczy
 * ---------------------------------------------------------------------------
 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance == SPI1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a09      	ldr	r2, [pc, #36]	@ (8000ae4 <HAL_SPI_TxCpltCallback+0x34>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d10c      	bne.n	8000adc <HAL_SPI_TxCpltCallback+0x2c>
  {
    // Krótki impuls na pin LATCH
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2140      	movs	r1, #64	@ 0x40
 8000ac6:	4808      	ldr	r0, [pc, #32]	@ (8000ae8 <HAL_SPI_TxCpltCallback+0x38>)
 8000ac8:	f004 f932 	bl	8004d30 <HAL_GPIO_WritePin>
    // Ewentualnie opóźnienie
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2140      	movs	r1, #64	@ 0x40
 8000ad0:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <HAL_SPI_TxCpltCallback+0x38>)
 8000ad2:	f004 f92d 	bl	8004d30 <HAL_GPIO_WritePin>
    spiTransferInProgress = false;  // Zakończono transmisję
 8000ad6:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <HAL_SPI_TxCpltCallback+0x3c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
  }

}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40013000 	.word	0x40013000
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	200000a1 	.word	0x200000a1

08000af0 <ClearClockBits>:
  HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 24);
}


void ClearClockBits(MyClockBitFields* clockBits)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  memset(clockBits, 0, sizeof(MyClockBitFields));
 8000af8:	2218      	movs	r2, #24
 8000afa:	2100      	movs	r1, #0
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f007 fd1d 	bl	800853c <memset>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <SetSecondLedSingle>:

void SetSecondLedSingle(MyClockBitFields* clockBits, uint8_t second)
{
 8000b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0c:	b085      	sub	sp, #20
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 8000b14:	78f9      	ldrb	r1, [r7, #3]
 8000b16:	293b      	cmp	r1, #59	@ 0x3b
 8000b18:	d901      	bls.n	8000b1e <SetSecondLedSingle+0x14>
 8000b1a:	213b      	movs	r1, #59	@ 0x3b
 8000b1c:	70f9      	strb	r1, [r7, #3]

    clockBits->secondsRing = 0ULL;
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	2000      	movs	r0, #0
 8000b22:	7008      	strb	r0, [r1, #0]
 8000b24:	2000      	movs	r0, #0
 8000b26:	7048      	strb	r0, [r1, #1]
 8000b28:	2000      	movs	r0, #0
 8000b2a:	7088      	strb	r0, [r1, #2]
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	70c8      	strb	r0, [r1, #3]
 8000b30:	2000      	movs	r0, #0
 8000b32:	7108      	strb	r0, [r1, #4]
 8000b34:	2000      	movs	r0, #0
 8000b36:	7148      	strb	r0, [r1, #5]
 8000b38:	2000      	movs	r0, #0
 8000b3a:	7188      	strb	r0, [r1, #6]
 8000b3c:	79c8      	ldrb	r0, [r1, #7]
 8000b3e:	f020 000f 	bic.w	r0, r0, #15
 8000b42:	71c8      	strb	r0, [r1, #7]
    uint64_t mask = (1ULL << second);
 8000b44:	78fe      	ldrb	r6, [r7, #3]
 8000b46:	f04f 0001 	mov.w	r0, #1
 8000b4a:	f04f 0100 	mov.w	r1, #0
 8000b4e:	f1a6 0e20 	sub.w	lr, r6, #32
 8000b52:	f1c6 0c20 	rsb	ip, r6, #32
 8000b56:	fa01 f306 	lsl.w	r3, r1, r6
 8000b5a:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000b5e:	ea43 030e 	orr.w	r3, r3, lr
 8000b62:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b66:	ea43 030c 	orr.w	r3, r3, ip
 8000b6a:	fa00 f206 	lsl.w	r2, r0, r6
 8000b6e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    clockBits->secondsRing = mask;
 8000b72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b76:	4614      	mov	r4, r2
 8000b78:	f023 4570 	bic.w	r5, r3, #4026531840	@ 0xf0000000
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	601c      	str	r4, [r3, #0]
 8000b80:	462a      	mov	r2, r5
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	2100      	movs	r1, #0
 8000b86:	430a      	orrs	r2, r1
 8000b88:	711a      	strb	r2, [r3, #4]
 8000b8a:	0a2a      	lsrs	r2, r5, #8
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	2100      	movs	r1, #0
 8000b90:	430a      	orrs	r2, r1
 8000b92:	715a      	strb	r2, [r3, #5]
 8000b94:	0c2a      	lsrs	r2, r5, #16
 8000b96:	b2d2      	uxtb	r2, r2
 8000b98:	2100      	movs	r1, #0
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	719a      	strb	r2, [r3, #6]
 8000b9e:	0e2a      	lsrs	r2, r5, #24
 8000ba0:	f002 020f 	and.w	r2, r2, #15
 8000ba4:	f002 000f 	and.w	r0, r2, #15
 8000ba8:	79da      	ldrb	r2, [r3, #7]
 8000baa:	f022 020f 	bic.w	r2, r2, #15
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	71da      	strb	r2, [r3, #7]
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000bbe <SetSecondLedAccumulating>:

void SetSecondLedAccumulating(MyClockBitFields* clockBits, uint8_t second)
{
 8000bbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 8000bca:	78f9      	ldrb	r1, [r7, #3]
 8000bcc:	293b      	cmp	r1, #59	@ 0x3b
 8000bce:	d901      	bls.n	8000bd4 <SetSecondLedAccumulating+0x16>
 8000bd0:	213b      	movs	r1, #59	@ 0x3b
 8000bd2:	70f9      	strb	r1, [r7, #3]
    if (second == 0) {
 8000bd4:	78f9      	ldrb	r1, [r7, #3]
 8000bd6:	2900      	cmp	r1, #0
 8000bd8:	d113      	bne.n	8000c02 <SetSecondLedAccumulating+0x44>
        clockBits->secondsRing = 0ULL;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
 8000be0:	2200      	movs	r2, #0
 8000be2:	705a      	strb	r2, [r3, #1]
 8000be4:	2200      	movs	r2, #0
 8000be6:	709a      	strb	r2, [r3, #2]
 8000be8:	2200      	movs	r2, #0
 8000bea:	70da      	strb	r2, [r3, #3]
 8000bec:	2200      	movs	r2, #0
 8000bee:	711a      	strb	r2, [r3, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	715a      	strb	r2, [r3, #5]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	719a      	strb	r2, [r3, #6]
 8000bf8:	79da      	ldrb	r2, [r3, #7]
 8000bfa:	f022 020f 	bic.w	r2, r2, #15
 8000bfe:	71da      	strb	r2, [r3, #7]
    } else {
        clockBits->secondsRing |= (1ULL << second);
    }
}
 8000c00:	e048      	b.n	8000c94 <SetSecondLedAccumulating+0xd6>
        clockBits->secondsRing |= (1ULL << second);
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f8d1 a000 	ldr.w	sl, [r1]
 8000c08:	7908      	ldrb	r0, [r1, #4]
 8000c0a:	794e      	ldrb	r6, [r1, #5]
 8000c0c:	0236      	lsls	r6, r6, #8
 8000c0e:	4330      	orrs	r0, r6
 8000c10:	798e      	ldrb	r6, [r1, #6]
 8000c12:	0436      	lsls	r6, r6, #16
 8000c14:	4330      	orrs	r0, r6
 8000c16:	79c9      	ldrb	r1, [r1, #7]
 8000c18:	f001 010f 	and.w	r1, r1, #15
 8000c1c:	0609      	lsls	r1, r1, #24
 8000c1e:	4301      	orrs	r1, r0
 8000c20:	468b      	mov	fp, r1
 8000c22:	78fe      	ldrb	r6, [r7, #3]
 8000c24:	f04f 0001 	mov.w	r0, #1
 8000c28:	f04f 0100 	mov.w	r1, #0
 8000c2c:	f1a6 0e20 	sub.w	lr, r6, #32
 8000c30:	f1c6 0c20 	rsb	ip, r6, #32
 8000c34:	fa01 f306 	lsl.w	r3, r1, r6
 8000c38:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000c3c:	ea43 030e 	orr.w	r3, r3, lr
 8000c40:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c44:	ea43 030c 	orr.w	r3, r3, ip
 8000c48:	fa00 f206 	lsl.w	r2, r0, r6
 8000c4c:	ea4a 0802 	orr.w	r8, sl, r2
 8000c50:	ea4b 0903 	orr.w	r9, fp, r3
 8000c54:	4644      	mov	r4, r8
 8000c56:	f029 4570 	bic.w	r5, r9, #4026531840	@ 0xf0000000
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	601c      	str	r4, [r3, #0]
 8000c5e:	462a      	mov	r2, r5
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	2100      	movs	r1, #0
 8000c64:	430a      	orrs	r2, r1
 8000c66:	711a      	strb	r2, [r3, #4]
 8000c68:	0a2a      	lsrs	r2, r5, #8
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	715a      	strb	r2, [r3, #5]
 8000c72:	0c2a      	lsrs	r2, r5, #16
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	2100      	movs	r1, #0
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	719a      	strb	r2, [r3, #6]
 8000c7c:	0e2a      	lsrs	r2, r5, #24
 8000c7e:	f002 020f 	and.w	r2, r2, #15
 8000c82:	f002 000f 	and.w	r0, r2, #15
 8000c86:	79da      	ldrb	r2, [r3, #7]
 8000c88:	f022 020f 	bic.w	r2, r2, #15
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4602      	mov	r2, r0
 8000c90:	430a      	orrs	r2, r1
 8000c92:	71da      	strb	r2, [r3, #7]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000c9e <SetSecondLedAccumulating2>:

void SetSecondLedAccumulating2(MyClockBitFields* clockBits, uint8_t second)
{
 8000c9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	70f9      	strb	r1, [r7, #3]
    if (second >= 60) second = 59;
 8000caa:	78f9      	ldrb	r1, [r7, #3]
 8000cac:	293b      	cmp	r1, #59	@ 0x3b
 8000cae:	d901      	bls.n	8000cb4 <SetSecondLedAccumulating2+0x16>
 8000cb0:	213b      	movs	r1, #59	@ 0x3b
 8000cb2:	70f9      	strb	r1, [r7, #3]
    clockBits->secondsRing = 0ULL;
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	7008      	strb	r0, [r1, #0]
 8000cba:	2000      	movs	r0, #0
 8000cbc:	7048      	strb	r0, [r1, #1]
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	7088      	strb	r0, [r1, #2]
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	70c8      	strb	r0, [r1, #3]
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	7108      	strb	r0, [r1, #4]
 8000cca:	2000      	movs	r0, #0
 8000ccc:	7148      	strb	r0, [r1, #5]
 8000cce:	2000      	movs	r0, #0
 8000cd0:	7188      	strb	r0, [r1, #6]
 8000cd2:	79c8      	ldrb	r0, [r1, #7]
 8000cd4:	f020 000f 	bic.w	r0, r0, #15
 8000cd8:	71c8      	strb	r0, [r1, #7]
    for (uint8_t i = 0; i <= second; i++) {
 8000cda:	2100      	movs	r1, #0
 8000cdc:	73f9      	strb	r1, [r7, #15]
 8000cde:	e04b      	b.n	8000d78 <SetSecondLedAccumulating2+0xda>
        clockBits->secondsRing |= (1ULL << i);
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	f8d1 a000 	ldr.w	sl, [r1]
 8000ce6:	7908      	ldrb	r0, [r1, #4]
 8000ce8:	794e      	ldrb	r6, [r1, #5]
 8000cea:	0236      	lsls	r6, r6, #8
 8000cec:	4330      	orrs	r0, r6
 8000cee:	798e      	ldrb	r6, [r1, #6]
 8000cf0:	0436      	lsls	r6, r6, #16
 8000cf2:	4330      	orrs	r0, r6
 8000cf4:	79c9      	ldrb	r1, [r1, #7]
 8000cf6:	f001 010f 	and.w	r1, r1, #15
 8000cfa:	0609      	lsls	r1, r1, #24
 8000cfc:	4301      	orrs	r1, r0
 8000cfe:	468b      	mov	fp, r1
 8000d00:	7bfe      	ldrb	r6, [r7, #15]
 8000d02:	f04f 0001 	mov.w	r0, #1
 8000d06:	f04f 0100 	mov.w	r1, #0
 8000d0a:	f1a6 0e20 	sub.w	lr, r6, #32
 8000d0e:	f1c6 0c20 	rsb	ip, r6, #32
 8000d12:	fa01 f306 	lsl.w	r3, r1, r6
 8000d16:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000d1a:	ea43 030e 	orr.w	r3, r3, lr
 8000d1e:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d22:	ea43 030c 	orr.w	r3, r3, ip
 8000d26:	fa00 f206 	lsl.w	r2, r0, r6
 8000d2a:	ea4a 0802 	orr.w	r8, sl, r2
 8000d2e:	ea4b 0903 	orr.w	r9, fp, r3
 8000d32:	4644      	mov	r4, r8
 8000d34:	f029 4570 	bic.w	r5, r9, #4026531840	@ 0xf0000000
 8000d38:	6879      	ldr	r1, [r7, #4]
 8000d3a:	600c      	str	r4, [r1, #0]
 8000d3c:	4628      	mov	r0, r5
 8000d3e:	b2c0      	uxtb	r0, r0
 8000d40:	2600      	movs	r6, #0
 8000d42:	4330      	orrs	r0, r6
 8000d44:	7108      	strb	r0, [r1, #4]
 8000d46:	0a28      	lsrs	r0, r5, #8
 8000d48:	b2c0      	uxtb	r0, r0
 8000d4a:	2600      	movs	r6, #0
 8000d4c:	4330      	orrs	r0, r6
 8000d4e:	7148      	strb	r0, [r1, #5]
 8000d50:	0c28      	lsrs	r0, r5, #16
 8000d52:	b2c0      	uxtb	r0, r0
 8000d54:	2600      	movs	r6, #0
 8000d56:	4330      	orrs	r0, r6
 8000d58:	7188      	strb	r0, [r1, #6]
 8000d5a:	0e28      	lsrs	r0, r5, #24
 8000d5c:	f000 000f 	and.w	r0, r0, #15
 8000d60:	f000 0c0f 	and.w	ip, r0, #15
 8000d64:	79c8      	ldrb	r0, [r1, #7]
 8000d66:	f020 000f 	bic.w	r0, r0, #15
 8000d6a:	4606      	mov	r6, r0
 8000d6c:	4660      	mov	r0, ip
 8000d6e:	4330      	orrs	r0, r6
 8000d70:	71c8      	strb	r0, [r1, #7]
    for (uint8_t i = 0; i <= second; i++) {
 8000d72:	7bf9      	ldrb	r1, [r7, #15]
 8000d74:	3101      	adds	r1, #1
 8000d76:	73f9      	strb	r1, [r7, #15]
 8000d78:	7bf8      	ldrb	r0, [r7, #15]
 8000d7a:	78f9      	ldrb	r1, [r7, #3]
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	d9af      	bls.n	8000ce0 <SetSecondLedAccumulating2+0x42>
    }
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000d8c <SetHourRing>:
    SetDots(clockBits, true, true);
  }
}

void SetHourRing(MyClockBitFields* clockBits, uint8_t hour, bool outerRing, bool innerRing)
{
 8000d8c:	b490      	push	{r4, r7}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	4608      	mov	r0, r1
 8000d96:	4611      	mov	r1, r2
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	70fb      	strb	r3, [r7, #3]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	70bb      	strb	r3, [r7, #2]
 8000da2:	4613      	mov	r3, r2
 8000da4:	707b      	strb	r3, [r7, #1]
  uint8_t h12 = hour % 12;
 8000da6:	78fa      	ldrb	r2, [r7, #3]
 8000da8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e54 <SetHourRing+0xc8>)
 8000daa:	fba3 1302 	umull	r1, r3, r3, r2
 8000dae:	08d9      	lsrs	r1, r3, #3
 8000db0:	460b      	mov	r3, r1
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	440b      	add	r3, r1
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	73fb      	strb	r3, [r7, #15]
  if (outerRing)
 8000dbc:	78bb      	ldrb	r3, [r7, #2]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d018      	beq.n	8000df4 <SetHourRing+0x68>
    clockBits->hoursRingOuter = (1U << h12);
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f002 010f 	and.w	r1, r2, #15
 8000dd6:	010c      	lsls	r4, r1, #4
 8000dd8:	79d9      	ldrb	r1, [r3, #7]
 8000dda:	f001 010f 	and.w	r1, r1, #15
 8000dde:	4608      	mov	r0, r1
 8000de0:	4621      	mov	r1, r4
 8000de2:	4301      	orrs	r1, r0
 8000de4:	71d9      	strb	r1, [r3, #7]
 8000de6:	0912      	lsrs	r2, r2, #4
 8000de8:	b292      	uxth	r2, r2
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	2100      	movs	r1, #0
 8000dee:	430a      	orrs	r2, r1
 8000df0:	721a      	strb	r2, [r3, #8]
 8000df2:	e006      	b.n	8000e02 <SetHourRing+0x76>
  else
    clockBits->hoursRingOuter = 0;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	79da      	ldrb	r2, [r3, #7]
 8000df8:	f002 020f 	and.w	r2, r2, #15
 8000dfc:	71da      	strb	r2, [r3, #7]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	721a      	strb	r2, [r3, #8]

  if (innerRing)
 8000e02:	787b      	ldrb	r3, [r7, #1]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d019      	beq.n	8000e3c <SetHourRing+0xb0>
    clockBits->hoursRingInner = (1U << h12);
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	b2d1      	uxtb	r1, r2
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	4301      	orrs	r1, r0
 8000e1e:	7259      	strb	r1, [r3, #9]
 8000e20:	0a12      	lsrs	r2, r2, #8
 8000e22:	b292      	uxth	r2, r2
 8000e24:	f002 020f 	and.w	r2, r2, #15
 8000e28:	f002 000f 	and.w	r0, r2, #15
 8000e2c:	7a9a      	ldrb	r2, [r3, #10]
 8000e2e:	f022 020f 	bic.w	r2, r2, #15
 8000e32:	4611      	mov	r1, r2
 8000e34:	4602      	mov	r2, r0
 8000e36:	430a      	orrs	r2, r1
 8000e38:	729a      	strb	r2, [r3, #10]
  else
    clockBits->hoursRingInner = 0;
}
 8000e3a:	e006      	b.n	8000e4a <SetHourRing+0xbe>
    clockBits->hoursRingInner = 0;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	725a      	strb	r2, [r3, #9]
 8000e42:	7a9a      	ldrb	r2, [r3, #10]
 8000e44:	f022 020f 	bic.w	r2, r2, #15
 8000e48:	729a      	strb	r2, [r3, #10]
}
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc90      	pop	{r4, r7}
 8000e52:	4770      	bx	lr
 8000e54:	aaaaaaab 	.word	0xaaaaaaab

08000e58 <SetTime7Seg_Top>:

/**
 * Ustawia 6 wyświetlaczy 7-seg (top lub bottom) na HH:MM:SS
 */
void SetTime7Seg_Top(MyClockBitFields* clockBits, uint8_t h, uint8_t m, uint8_t s)
{
 8000e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e5c:	b09d      	sub	sp, #116	@ 0x74
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8000e62:	4618      	mov	r0, r3
 8000e64:	460b      	mov	r3, r1
 8000e66:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

	  // Bufor na segmenty wyświetlacza (6 pozycji)
	    uint8_t backBuffer[6] = {0};
 8000e76:	2300      	movs	r3, #0
 8000e78:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	    // Obsługa godzin
	    if (h < 10) {
 8000e80:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000e84:	2b09      	cmp	r3, #9
 8000e86:	d80d      	bhi.n	8000ea4 <SetTime7Seg_Top+0x4c>
	        backBuffer[0] = segmentMap[10]; // Puste dziesiątki godzin
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = charToSegment('0' + h); // Jednostki godzin
 8000e8e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000e92:	3330      	adds	r3, #48	@ 0x30
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fd1a 	bl	80008d0 <charToSegment>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
 8000ea2:	e022      	b.n	8000eea <SetTime7Seg_Top+0x92>
	    } else {
	        backBuffer[0] = charToSegment('0' + (h / 10)); // Dziesiątki godzin
 8000ea4:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000ea8:	4b87      	ldr	r3, [pc, #540]	@ (80010c8 <SetTime7Seg_Top+0x270>)
 8000eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8000eae:	08db      	lsrs	r3, r3, #3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	3330      	adds	r3, #48	@ 0x30
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fd0a 	bl	80008d0 <charToSegment>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = charToSegment('0' + (h % 10)); // Jednostki godzin
 8000ec2:	f897 105b 	ldrb.w	r1, [r7, #91]	@ 0x5b
 8000ec6:	4b80      	ldr	r3, [pc, #512]	@ (80010c8 <SetTime7Seg_Top+0x270>)
 8000ec8:	fba3 2301 	umull	r2, r3, r3, r1
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	1acb      	subs	r3, r1, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	3330      	adds	r3, #48	@ 0x30
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fcf6 	bl	80008d0 <charToSegment>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	    }

	    // Obsługa minut
	    backBuffer[2] = charToSegment('0' + (m / 10)); // Dziesiątki minut
 8000eea:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8000eee:	4b76      	ldr	r3, [pc, #472]	@ (80010c8 <SetTime7Seg_Top+0x270>)
 8000ef0:	fba3 2302 	umull	r2, r3, r3, r2
 8000ef4:	08db      	lsrs	r3, r3, #3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	3330      	adds	r3, #48	@ 0x30
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fce7 	bl	80008d0 <charToSegment>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	    backBuffer[3] = charToSegment('0' + (m % 10)); // Jednostki minut
 8000f08:	f897 105a 	ldrb.w	r1, [r7, #90]	@ 0x5a
 8000f0c:	4b6e      	ldr	r3, [pc, #440]	@ (80010c8 <SetTime7Seg_Top+0x270>)
 8000f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	1acb      	subs	r3, r1, r3
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	3330      	adds	r3, #48	@ 0x30
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fcd3 	bl	80008d0 <charToSegment>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	    // Obsługa sekund
	    backBuffer[4] = charToSegment('0' + (s / 10)); // Dziesiątki sekund
 8000f30:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8000f34:	4b64      	ldr	r3, [pc, #400]	@ (80010c8 <SetTime7Seg_Top+0x270>)
 8000f36:	fba3 2302 	umull	r2, r3, r3, r2
 8000f3a:	08db      	lsrs	r3, r3, #3
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	3330      	adds	r3, #48	@ 0x30
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fcc4 	bl	80008d0 <charToSegment>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	    backBuffer[5] = charToSegment('0' + (s % 10)); // Jednostki sekund
 8000f4e:	f897 1059 	ldrb.w	r1, [r7, #89]	@ 0x59
 8000f52:	4b5d      	ldr	r3, [pc, #372]	@ (80010c8 <SetTime7Seg_Top+0x270>)
 8000f54:	fba3 2301 	umull	r2, r3, r3, r1
 8000f58:	08da      	lsrs	r2, r3, #3
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	1acb      	subs	r3, r1, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	3330      	adds	r3, #48	@ 0x30
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fcb0 	bl	80008d0 <charToSegment>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	    // Zbudowanie wartości 48-bitowej na podstawie bufora
	    uint64_t displayVal = 0ULL;
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[5] << 40);
 8000f82:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8000f8c:	657a      	str	r2, [r7, #84]	@ 0x54
 8000f8e:	f04f 0000 	mov.w	r0, #0
 8000f92:	f04f 0100 	mov.w	r1, #0
 8000f96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f98:	0219      	lsls	r1, r3, #8
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000fa0:	ea42 0600 	orr.w	r6, r2, r0
 8000fa4:	62be      	str	r6, [r7, #40]	@ 0x28
 8000fa6:	430b      	orrs	r3, r1
 8000fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000faa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000fae:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[4] << 32);
 8000fb2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2200      	movs	r2, #0
 8000fba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000fbc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000fbe:	f04f 0000 	mov.w	r0, #0
 8000fc2:	f04f 0100 	mov.w	r1, #0
 8000fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000fc8:	0019      	movs	r1, r3
 8000fca:	2000      	movs	r0, #0
 8000fcc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000fd0:	ea42 0600 	orr.w	r6, r2, r0
 8000fd4:	623e      	str	r6, [r7, #32]
 8000fd6:	430b      	orrs	r3, r1
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fde:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[0] << 24);
 8000fe2:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	643b      	str	r3, [r7, #64]	@ 0x40
 8000fec:	647a      	str	r2, [r7, #68]	@ 0x44
 8000fee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	0a1d      	lsrs	r5, r3, #8
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	061c      	lsls	r4, r3, #24
 8000ffa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000ffe:	ea42 0104 	orr.w	r1, r2, r4
 8001002:	61b9      	str	r1, [r7, #24]
 8001004:	432b      	orrs	r3, r5
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800100c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[1] << 16);
 8001010:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2200      	movs	r2, #0
 8001018:	4698      	mov	r8, r3
 800101a:	4691      	mov	r9, r2
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	f04f 0100 	mov.w	r1, #0
 8001024:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8001028:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 800102c:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8001030:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001034:	ea42 0400 	orr.w	r4, r2, r0
 8001038:	613c      	str	r4, [r7, #16]
 800103a:	430b      	orrs	r3, r1
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001042:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[2] << 8);
 8001046:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2200      	movs	r2, #0
 800104e:	469a      	mov	sl, r3
 8001050:	4693      	mov	fp, r2
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800105e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8001062:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8001066:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800106a:	ea40 0402 	orr.w	r4, r0, r2
 800106e:	60bc      	str	r4, [r7, #8]
 8001070:	430b      	orrs	r3, r1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001078:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[3] << 0);
 800107c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2200      	movs	r2, #0
 8001084:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001086:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001088:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800108c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001090:	4621      	mov	r1, r4
 8001092:	4311      	orrs	r1, r2
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	4629      	mov	r1, r5
 8001098:	4319      	orrs	r1, r3
 800109a:	6079      	str	r1, [r7, #4]
 800109c:	e9d7 3400 	ldrd	r3, r4, [r7]
 80010a0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68

	    clockBits->topDisplay = displayVal;
 80010a4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80010a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80010ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010b0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80010b4:	4602      	mov	r2, r0
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	460a      	mov	r2, r1
 80010ba:	821a      	strh	r2, [r3, #16]
}
 80010bc:	bf00      	nop
 80010be:	3774      	adds	r7, #116	@ 0x74
 80010c0:	46bd      	mov	sp, r7
 80010c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010c6:	bf00      	nop
 80010c8:	cccccccd 	.word	0xcccccccd

080010cc <SetTime7Seg_Void>:



void SetTime7Seg_Void(MyClockBitFields* clockBits)
{
 80010cc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80010d0:	b09c      	sub	sp, #112	@ 0x70
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	65f8      	str	r0, [r7, #92]	@ 0x5c

	  // Bufor na segmenty wyświetlacza (6 pozycji)
	    uint8_t backBuffer[6] = {0};
 80010d6:	2300      	movs	r3, #0
 80010d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80010da:	2300      	movs	r3, #0
 80010dc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	    // Obsługa godzin

	        backBuffer[0] = segmentMap[10]; // Puste dziesiątki godzin
 80010e0:	2300      	movs	r3, #0
 80010e2:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	        backBuffer[1] = segmentMap[10]; // Jednostki godzin
 80010e6:	2300      	movs	r3, #0
 80010e8:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61


	    // Obsługa minut
	    backBuffer[2] = segmentMap[10]; // Dziesiątki minut
 80010ec:	2300      	movs	r3, #0
 80010ee:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	    backBuffer[3] = segmentMap[10]; // Jednostki minut
 80010f2:	2300      	movs	r3, #0
 80010f4:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	    // Obsługa sekund
	    backBuffer[4] = segmentMap[10]; // Dziesiątki sekund
 80010f8:	2300      	movs	r3, #0
 80010fa:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	    backBuffer[5] = segmentMap[10]; // Jednostki sekund
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	    // Zbudowanie wartości 48-bitowej na podstawie bufora
	    uint64_t displayVal = 0ULL;
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[5] << 40);
 8001110:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2200      	movs	r2, #0
 8001118:	653b      	str	r3, [r7, #80]	@ 0x50
 800111a:	657a      	str	r2, [r7, #84]	@ 0x54
 800111c:	f04f 0000 	mov.w	r0, #0
 8001120:	f04f 0100 	mov.w	r1, #0
 8001124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001126:	0219      	lsls	r1, r3, #8
 8001128:	2000      	movs	r0, #0
 800112a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800112e:	ea42 0800 	orr.w	r8, r2, r0
 8001132:	ea43 0901 	orr.w	r9, r3, r1
 8001136:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[4] << 32);
 800113a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2200      	movs	r2, #0
 8001142:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001144:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	f04f 0100 	mov.w	r1, #0
 800114e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001150:	0019      	movs	r1, r3
 8001152:	2000      	movs	r0, #0
 8001154:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001158:	ea42 0600 	orr.w	r6, r2, r0
 800115c:	623e      	str	r6, [r7, #32]
 800115e:	430b      	orrs	r3, r1
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
 8001162:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001166:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[0] << 24);
 800116a:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2200      	movs	r2, #0
 8001172:	643b      	str	r3, [r7, #64]	@ 0x40
 8001174:	647a      	str	r2, [r7, #68]	@ 0x44
 8001176:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800117a:	460b      	mov	r3, r1
 800117c:	0a1d      	lsrs	r5, r3, #8
 800117e:	460b      	mov	r3, r1
 8001180:	061c      	lsls	r4, r3, #24
 8001182:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001186:	ea42 0104 	orr.w	r1, r2, r4
 800118a:	61b9      	str	r1, [r7, #24]
 800118c:	432b      	orrs	r3, r5
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001194:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[1] << 16);
 8001198:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2200      	movs	r2, #0
 80011a0:	469a      	mov	sl, r3
 80011a2:	4693      	mov	fp, r2
 80011a4:	f04f 0000 	mov.w	r0, #0
 80011a8:	f04f 0100 	mov.w	r1, #0
 80011ac:	ea4f 410b 	mov.w	r1, fp, lsl #16
 80011b0:	ea41 411a 	orr.w	r1, r1, sl, lsr #16
 80011b4:	ea4f 400a 	mov.w	r0, sl, lsl #16
 80011b8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80011bc:	ea42 0400 	orr.w	r4, r2, r0
 80011c0:	613c      	str	r4, [r7, #16]
 80011c2:	430b      	orrs	r3, r1
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80011ca:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[2] << 8);
 80011ce:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2200      	movs	r2, #0
 80011d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80011e6:	4629      	mov	r1, r5
 80011e8:	020b      	lsls	r3, r1, #8
 80011ea:	4621      	mov	r1, r4
 80011ec:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80011f0:	4621      	mov	r1, r4
 80011f2:	020a      	lsls	r2, r1, #8
 80011f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80011f8:	ea40 0402 	orr.w	r4, r0, r2
 80011fc:	60bc      	str	r4, [r7, #8]
 80011fe:	430b      	orrs	r3, r1
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001206:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	    displayVal |= ((uint64_t)backBuffer[3] << 0);
 800120a:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2200      	movs	r2, #0
 8001212:	633b      	str	r3, [r7, #48]	@ 0x30
 8001214:	637a      	str	r2, [r7, #52]	@ 0x34
 8001216:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800121a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800121e:	4621      	mov	r1, r4
 8001220:	4311      	orrs	r1, r2
 8001222:	6039      	str	r1, [r7, #0]
 8001224:	4629      	mov	r1, r5
 8001226:	4319      	orrs	r1, r3
 8001228:	6079      	str	r1, [r7, #4]
 800122a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800122e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68

	    clockBits->topDisplay = displayVal;
 8001232:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001236:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001238:	b29b      	uxth	r3, r3
 800123a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800123c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800123e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001242:	4602      	mov	r2, r0
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	460a      	mov	r2, r1
 8001248:	821a      	strh	r2, [r3, #16]
}
 800124a:	bf00      	nop
 800124c:	3770      	adds	r7, #112	@ 0x70
 800124e:	46bd      	mov	sp, r7
 8001250:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001254:	4770      	bx	lr
	...

08001258 <UpdateAllDisplays>:




void UpdateAllDisplays(const MyClockBitFields* clockBits)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    // Sprawdź, czy SPI jest zajęte
    if (spiTransferInProgress) {
 8001260:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <UpdateAllDisplays+0x7c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d130      	bne.n	80012cc <UpdateAllDisplays+0x74>
        return;
    }

    spiTransferInProgress = true;
 800126a:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <UpdateAllDisplays+0x7c>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]

    static uint8_t spiTxBuffer[24];
    memset(spiTxBuffer, 0, sizeof(spiTxBuffer));
 8001270:	2218      	movs	r2, #24
 8001272:	2100      	movs	r1, #0
 8001274:	4818      	ldr	r0, [pc, #96]	@ (80012d8 <UpdateAllDisplays+0x80>)
 8001276:	f007 f961 	bl	800853c <memset>

    const uint8_t* p = (const uint8_t*)clockBits;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60fb      	str	r3, [r7, #12]
    int byteIndex = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]

    for (int partIndex = 11; partIndex >= 0; partIndex--)
 8001282:	230b      	movs	r3, #11
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	e018      	b.n	80012ba <UpdateAllDisplays+0x62>
    {
        spiTxBuffer[byteIndex++] = p[2 * partIndex + 1];
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	3301      	adds	r3, #1
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	441a      	add	r2, r3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	1c59      	adds	r1, r3, #1
 8001296:	6179      	str	r1, [r7, #20]
 8001298:	7811      	ldrb	r1, [r2, #0]
 800129a:	4a0f      	ldr	r2, [pc, #60]	@ (80012d8 <UpdateAllDisplays+0x80>)
 800129c:	54d1      	strb	r1, [r2, r3]
        spiTxBuffer[byteIndex++] = p[2 * partIndex + 0];
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	441a      	add	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	1c59      	adds	r1, r3, #1
 80012ac:	6179      	str	r1, [r7, #20]
 80012ae:	7811      	ldrb	r1, [r2, #0]
 80012b0:	4a09      	ldr	r2, [pc, #36]	@ (80012d8 <UpdateAllDisplays+0x80>)
 80012b2:	54d1      	strb	r1, [r2, r3]
    for (int partIndex = 11; partIndex >= 0; partIndex--)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	dae3      	bge.n	8001288 <UpdateAllDisplays+0x30>
    }

    HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 24);
 80012c0:	2218      	movs	r2, #24
 80012c2:	4905      	ldr	r1, [pc, #20]	@ (80012d8 <UpdateAllDisplays+0x80>)
 80012c4:	4805      	ldr	r0, [pc, #20]	@ (80012dc <UpdateAllDisplays+0x84>)
 80012c6:	f004 ff81 	bl	80061cc <HAL_SPI_Transmit_DMA>
 80012ca:	e000      	b.n	80012ce <UpdateAllDisplays+0x76>
        return;
 80012cc:	bf00      	nop
}
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200000a1 	.word	0x200000a1
 80012d8:	200000a4 	.word	0x200000a4
 80012dc:	200006e4 	.word	0x200006e4

080012e0 <SetPWMPercentGamma>:
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
  uint32_t compare_value = (period + 1) - ((period + 1) * percent / 100);
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
}

void SetPWMPercentGamma(uint8_t percent) {
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  if (percent > 100) {
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b64      	cmp	r3, #100	@ 0x64
 80012ee:	d901      	bls.n	80012f4 <SetPWMPercentGamma+0x14>
      percent = 100;
 80012f0:	2364      	movs	r3, #100	@ 0x64
 80012f2:	71fb      	strb	r3, [r7, #7]
  }
  uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 80012f4:	4b0d      	ldr	r3, [pc, #52]	@ (800132c <SetPWMPercentGamma+0x4c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fa:	617b      	str	r3, [r7, #20]
  uint8_t gamma_percent = gamma_table[percent];
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001330 <SetPWMPercentGamma+0x50>)
 8001300:	5cd3      	ldrb	r3, [r2, r3]
 8001302:	74fb      	strb	r3, [r7, #19]
  uint32_t compare_value = (period + 1) * gamma_percent / 100;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	3301      	adds	r3, #1
 8001308:	7cfa      	ldrb	r2, [r7, #19]
 800130a:	fb02 f303 	mul.w	r3, r2, r3
 800130e:	4a09      	ldr	r2, [pc, #36]	@ (8001334 <SetPWMPercentGamma+0x54>)
 8001310:	fba2 2303 	umull	r2, r3, r2, r3
 8001314:	095b      	lsrs	r3, r3, #5
 8001316:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
 8001318:	4b04      	ldr	r3, [pc, #16]	@ (800132c <SetPWMPercentGamma+0x4c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001320:	bf00      	nop
 8001322:	371c      	adds	r7, #28
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	2000079c 	.word	0x2000079c
 8001330:	0800864c 	.word	0x0800864c
 8001334:	51eb851f 	.word	0x51eb851f

08001338 <SetSecondLedEvenOdd>:
        HAL_Delay(50);
    }
}

void SetSecondLedEvenOdd(MyClockBitFields* clockBits, uint8_t second, uint8_t minute)
{
 8001338:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800133c:	b08c      	sub	sp, #48	@ 0x30
 800133e:	af00      	add	r7, sp, #0
 8001340:	6278      	str	r0, [r7, #36]	@ 0x24
 8001342:	460b      	mov	r3, r1
 8001344:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001348:	4613      	mov	r3, r2
 800134a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (second >= 60) {
 800134e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001352:	2b3b      	cmp	r3, #59	@ 0x3b
 8001354:	d902      	bls.n	800135c <SetSecondLedEvenOdd+0x24>
        second = 59;
 8001356:	233b      	movs	r3, #59	@ 0x3b
 8001358:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
    if ((minute % 2) == 0)
 800135c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d178      	bne.n	800145c <SetSecondLedEvenOdd+0x124>
    {
        clockBits->secondsRing = 0ULL;
 800136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
 8001370:	2200      	movs	r2, #0
 8001372:	705a      	strb	r2, [r3, #1]
 8001374:	2200      	movs	r2, #0
 8001376:	709a      	strb	r2, [r3, #2]
 8001378:	2200      	movs	r2, #0
 800137a:	70da      	strb	r2, [r3, #3]
 800137c:	2200      	movs	r2, #0
 800137e:	711a      	strb	r2, [r3, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	715a      	strb	r2, [r3, #5]
 8001384:	2200      	movs	r2, #0
 8001386:	719a      	strb	r2, [r3, #6]
 8001388:	79da      	ldrb	r2, [r3, #7]
 800138a:	f022 020f 	bic.w	r2, r2, #15
 800138e:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = 0; i <= second; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001396:	e05a      	b.n	800144e <SetSecondLedEvenOdd+0x116>
        {
            clockBits->secondsRing |= (1ULL << i);
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	791a      	ldrb	r2, [r3, #4]
 800139e:	795c      	ldrb	r4, [r3, #5]
 80013a0:	0224      	lsls	r4, r4, #8
 80013a2:	4322      	orrs	r2, r4
 80013a4:	799c      	ldrb	r4, [r3, #6]
 80013a6:	0424      	lsls	r4, r4, #16
 80013a8:	4322      	orrs	r2, r4
 80013aa:	79db      	ldrb	r3, [r3, #7]
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	061b      	lsls	r3, r3, #24
 80013b2:	4313      	orrs	r3, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	4680      	mov	r8, r0
 80013b8:	4689      	mov	r9, r1
 80013ba:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80013be:	f04f 0201 	mov.w	r2, #1
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	f1a1 0420 	sub.w	r4, r1, #32
 80013ca:	f1c1 0020 	rsb	r0, r1, #32
 80013ce:	fa03 f601 	lsl.w	r6, r3, r1
 80013d2:	fa02 f404 	lsl.w	r4, r2, r4
 80013d6:	4326      	orrs	r6, r4
 80013d8:	fa22 f000 	lsr.w	r0, r2, r0
 80013dc:	4306      	orrs	r6, r0
 80013de:	fa02 f501 	lsl.w	r5, r2, r1
 80013e2:	ea48 0305 	orr.w	r3, r8, r5
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	ea49 0306 	orr.w	r3, r9, r6
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80013f2:	460b      	mov	r3, r1
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4613      	mov	r3, r2
 80013f8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001400:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001404:	4642      	mov	r2, r8
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	464a      	mov	r2, r9
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	2100      	movs	r1, #0
 800140e:	430a      	orrs	r2, r1
 8001410:	711a      	strb	r2, [r3, #4]
 8001412:	464a      	mov	r2, r9
 8001414:	0a12      	lsrs	r2, r2, #8
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	2100      	movs	r1, #0
 800141a:	430a      	orrs	r2, r1
 800141c:	715a      	strb	r2, [r3, #5]
 800141e:	464a      	mov	r2, r9
 8001420:	0c12      	lsrs	r2, r2, #16
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	2100      	movs	r1, #0
 8001426:	430a      	orrs	r2, r1
 8001428:	719a      	strb	r2, [r3, #6]
 800142a:	464a      	mov	r2, r9
 800142c:	0e12      	lsrs	r2, r2, #24
 800142e:	f002 020f 	and.w	r2, r2, #15
 8001432:	f002 000f 	and.w	r0, r2, #15
 8001436:	79da      	ldrb	r2, [r3, #7]
 8001438:	f022 020f 	bic.w	r2, r2, #15
 800143c:	4611      	mov	r1, r2
 800143e:	4602      	mov	r2, r0
 8001440:	430a      	orrs	r2, r1
 8001442:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = 0; i <= second; i++)
 8001444:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001448:	3301      	adds	r3, #1
 800144a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800144e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001452:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001456:	429a      	cmp	r2, r3
 8001458:	d99e      	bls.n	8001398 <SetSecondLedEvenOdd+0x60>
        for (uint8_t i = second + 1; i < 60; i++)
        {
            clockBits->secondsRing |= (1ULL << i);
        }
    }
}
 800145a:	e079      	b.n	8001550 <SetSecondLedEvenOdd+0x218>
        clockBits->secondsRing = 0ULL;
 800145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	2200      	movs	r2, #0
 8001464:	705a      	strb	r2, [r3, #1]
 8001466:	2200      	movs	r2, #0
 8001468:	709a      	strb	r2, [r3, #2]
 800146a:	2200      	movs	r2, #0
 800146c:	70da      	strb	r2, [r3, #3]
 800146e:	2200      	movs	r2, #0
 8001470:	711a      	strb	r2, [r3, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	715a      	strb	r2, [r3, #5]
 8001476:	2200      	movs	r2, #0
 8001478:	719a      	strb	r2, [r3, #6]
 800147a:	79da      	ldrb	r2, [r3, #7]
 800147c:	f022 020f 	bic.w	r2, r2, #15
 8001480:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = second + 1; i < 60; i++)
 8001482:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001486:	3301      	adds	r3, #1
 8001488:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800148c:	e05c      	b.n	8001548 <SetSecondLedEvenOdd+0x210>
            clockBits->secondsRing |= (1ULL << i);
 800148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	791a      	ldrb	r2, [r3, #4]
 8001494:	795c      	ldrb	r4, [r3, #5]
 8001496:	0224      	lsls	r4, r4, #8
 8001498:	4322      	orrs	r2, r4
 800149a:	799c      	ldrb	r4, [r3, #6]
 800149c:	0424      	lsls	r4, r4, #16
 800149e:	4322      	orrs	r2, r4
 80014a0:	79db      	ldrb	r3, [r3, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	061b      	lsls	r3, r3, #24
 80014a8:	4313      	orrs	r3, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	4680      	mov	r8, r0
 80014ae:	4689      	mov	r9, r1
 80014b0:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80014b4:	f04f 0201 	mov.w	r2, #1
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	f1a1 0420 	sub.w	r4, r1, #32
 80014c0:	f1c1 0020 	rsb	r0, r1, #32
 80014c4:	fa03 fb01 	lsl.w	fp, r3, r1
 80014c8:	fa02 f404 	lsl.w	r4, r2, r4
 80014cc:	ea4b 0b04 	orr.w	fp, fp, r4
 80014d0:	fa22 f000 	lsr.w	r0, r2, r0
 80014d4:	ea4b 0b00 	orr.w	fp, fp, r0
 80014d8:	fa02 fa01 	lsl.w	sl, r2, r1
 80014dc:	ea48 030a 	orr.w	r3, r8, sl
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	ea49 030b 	orr.w	r3, r9, fp
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80014ec:	460b      	mov	r3, r1
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	4613      	mov	r3, r2
 80014f2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014fe:	4622      	mov	r2, r4
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	462a      	mov	r2, r5
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	2100      	movs	r1, #0
 8001508:	430a      	orrs	r2, r1
 800150a:	711a      	strb	r2, [r3, #4]
 800150c:	462a      	mov	r2, r5
 800150e:	0a12      	lsrs	r2, r2, #8
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	2100      	movs	r1, #0
 8001514:	430a      	orrs	r2, r1
 8001516:	715a      	strb	r2, [r3, #5]
 8001518:	462a      	mov	r2, r5
 800151a:	0c12      	lsrs	r2, r2, #16
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	2100      	movs	r1, #0
 8001520:	430a      	orrs	r2, r1
 8001522:	719a      	strb	r2, [r3, #6]
 8001524:	462a      	mov	r2, r5
 8001526:	0e12      	lsrs	r2, r2, #24
 8001528:	f002 020f 	and.w	r2, r2, #15
 800152c:	f002 000f 	and.w	r0, r2, #15
 8001530:	79da      	ldrb	r2, [r3, #7]
 8001532:	f022 020f 	bic.w	r2, r2, #15
 8001536:	4611      	mov	r1, r2
 8001538:	4602      	mov	r2, r0
 800153a:	430a      	orrs	r2, r1
 800153c:	71da      	strb	r2, [r3, #7]
        for (uint8_t i = second + 1; i < 60; i++)
 800153e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001542:	3301      	adds	r3, #1
 8001544:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001548:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800154c:	2b3b      	cmp	r3, #59	@ 0x3b
 800154e:	d99e      	bls.n	800148e <SetSecondLedEvenOdd+0x156>
}
 8001550:	bf00      	nop
 8001552:	3730      	adds	r7, #48	@ 0x30
 8001554:	46bd      	mov	sp, r7
 8001556:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800155a:	4770      	bx	lr

0800155c <SetDots>:
//  if (dot2) val |= (1ULL << 1);
//
//  clockBits->dots = val;
//}

void SetDots(MyClockBitFields* clockBits, bool dot1, bool dot2) {
 800155c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	70fb      	strb	r3, [r7, #3]
 800156a:	4613      	mov	r3, r2
 800156c:	70bb      	strb	r3, [r7, #2]
  uint64_t val = 0ULL;
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (dot1) val |= (1ULL << 0);
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <SetDots+0x32>
 8001580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001584:	f042 0801 	orr.w	r8, r2, #1
 8001588:	4699      	mov	r9, r3
 800158a:	e9c7 8902 	strd	r8, r9, [r7, #8]
  if (dot2) val |= (1ULL << 1);
 800158e:	78bb      	ldrb	r3, [r7, #2]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d006      	beq.n	80015a2 <SetDots+0x46>
 8001594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001598:	f042 0402 	orr.w	r4, r2, #2
 800159c:	461d      	mov	r5, r3
 800159e:	e9c7 4502 	strd	r4, r5, [r7, #8]
  clockBits->dots = val;
 80015a2:	7a3b      	ldrb	r3, [r7, #8]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	b2d9      	uxtb	r1, r3
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	7a93      	ldrb	r3, [r2, #10]
 80015ae:	f361 1305 	bfi	r3, r1, #4, #2
 80015b2:	7293      	strb	r3, [r2, #10]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80015be:	4770      	bx	lr

080015c0 <SetHourRingCustom>:


void SetHourRingCustom(MyClockBitFields* clockBits, uint8_t outerMode, uint8_t innerMode)
{
 80015c0:	b490      	push	{r4, r7}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
 80015cc:	4613      	mov	r3, r2
 80015ce:	70bb      	strb	r3, [r7, #2]
    // Maska dla pełnego pierścienia (wszystkie 12 godzin)
    uint16_t fullMask = 0x0FFF;  // 12-bitowy: bity 0-11 ustawione na 1
 80015d0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80015d4:	81fb      	strh	r3, [r7, #14]
    // Maska dla kwadransów: godziny 12 (bit 0), 3 (bit 3), 6 (bit 6), 9 (bit 9)
    uint16_t quarterMask = (1U << 0) | (1U << 3) | (1U << 6) | (1U << 9);
 80015d6:	f240 2349 	movw	r3, #585	@ 0x249
 80015da:	81bb      	strh	r3, [r7, #12]

    // Ustawienia dla zewnętrznego pierścienia
    switch(outerMode)
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d002      	beq.n	80015e8 <SetHourRingCustom+0x28>
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d016      	beq.n	8001614 <SetHourRingCustom+0x54>
 80015e6:	e02b      	b.n	8001640 <SetHourRingCustom+0x80>
    {
        case 1:
            clockBits->hoursRingOuter = fullMask;
 80015e8:	89fb      	ldrh	r3, [r7, #14]
 80015ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f002 010f 	and.w	r1, r2, #15
 80015f6:	010c      	lsls	r4, r1, #4
 80015f8:	79d9      	ldrb	r1, [r3, #7]
 80015fa:	f001 010f 	and.w	r1, r1, #15
 80015fe:	4608      	mov	r0, r1
 8001600:	4621      	mov	r1, r4
 8001602:	4301      	orrs	r1, r0
 8001604:	71d9      	strb	r1, [r3, #7]
 8001606:	0912      	lsrs	r2, r2, #4
 8001608:	b292      	uxth	r2, r2
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	2100      	movs	r1, #0
 800160e:	430a      	orrs	r2, r1
 8001610:	721a      	strb	r2, [r3, #8]
            break;
 8001612:	e01d      	b.n	8001650 <SetHourRingCustom+0x90>
        case 2:
            clockBits->hoursRingOuter = quarterMask;
 8001614:	89bb      	ldrh	r3, [r7, #12]
 8001616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800161a:	b29a      	uxth	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f002 010f 	and.w	r1, r2, #15
 8001622:	010c      	lsls	r4, r1, #4
 8001624:	79d9      	ldrb	r1, [r3, #7]
 8001626:	f001 010f 	and.w	r1, r1, #15
 800162a:	4608      	mov	r0, r1
 800162c:	4621      	mov	r1, r4
 800162e:	4301      	orrs	r1, r0
 8001630:	71d9      	strb	r1, [r3, #7]
 8001632:	0912      	lsrs	r2, r2, #4
 8001634:	b292      	uxth	r2, r2
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	2100      	movs	r1, #0
 800163a:	430a      	orrs	r2, r1
 800163c:	721a      	strb	r2, [r3, #8]
            break;
 800163e:	e007      	b.n	8001650 <SetHourRingCustom+0x90>
        default:  // dla wartości 0 i innych nieznanych – wyłącz
            clockBits->hoursRingOuter = 0;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	79da      	ldrb	r2, [r3, #7]
 8001644:	f002 020f 	and.w	r2, r2, #15
 8001648:	71da      	strb	r2, [r3, #7]
 800164a:	2200      	movs	r2, #0
 800164c:	721a      	strb	r2, [r3, #8]
            break;
 800164e:	bf00      	nop
    }

    // Ustawienia dla wewnętrznego pierścienia
    switch(innerMode)
 8001650:	78bb      	ldrb	r3, [r7, #2]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d002      	beq.n	800165c <SetHourRingCustom+0x9c>
 8001656:	2b02      	cmp	r3, #2
 8001658:	d017      	beq.n	800168a <SetHourRingCustom+0xca>
 800165a:	e02d      	b.n	80016b8 <SetHourRingCustom+0xf8>
    {
        case 1:
            clockBits->hoursRingInner = fullMask;
 800165c:	89fb      	ldrh	r3, [r7, #14]
 800165e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001662:	b29a      	uxth	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	b2d1      	uxtb	r1, r2
 8001668:	2000      	movs	r0, #0
 800166a:	4301      	orrs	r1, r0
 800166c:	7259      	strb	r1, [r3, #9]
 800166e:	0a12      	lsrs	r2, r2, #8
 8001670:	b292      	uxth	r2, r2
 8001672:	f002 020f 	and.w	r2, r2, #15
 8001676:	f002 000f 	and.w	r0, r2, #15
 800167a:	7a9a      	ldrb	r2, [r3, #10]
 800167c:	f022 020f 	bic.w	r2, r2, #15
 8001680:	4611      	mov	r1, r2
 8001682:	4602      	mov	r2, r0
 8001684:	430a      	orrs	r2, r1
 8001686:	729a      	strb	r2, [r3, #10]
            break;
 8001688:	e01e      	b.n	80016c8 <SetHourRingCustom+0x108>
        case 2:
            clockBits->hoursRingInner = quarterMask;
 800168a:	89bb      	ldrh	r3, [r7, #12]
 800168c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001690:	b29a      	uxth	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	b2d1      	uxtb	r1, r2
 8001696:	2000      	movs	r0, #0
 8001698:	4301      	orrs	r1, r0
 800169a:	7259      	strb	r1, [r3, #9]
 800169c:	0a12      	lsrs	r2, r2, #8
 800169e:	b292      	uxth	r2, r2
 80016a0:	f002 020f 	and.w	r2, r2, #15
 80016a4:	f002 000f 	and.w	r0, r2, #15
 80016a8:	7a9a      	ldrb	r2, [r3, #10]
 80016aa:	f022 020f 	bic.w	r2, r2, #15
 80016ae:	4611      	mov	r1, r2
 80016b0:	4602      	mov	r2, r0
 80016b2:	430a      	orrs	r2, r1
 80016b4:	729a      	strb	r2, [r3, #10]
            break;
 80016b6:	e007      	b.n	80016c8 <SetHourRingCustom+0x108>
        default:  // dla wartości 0 i innych nieznanych – wyłącz
            clockBits->hoursRingInner = 0;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	725a      	strb	r2, [r3, #9]
 80016be:	7a9a      	ldrb	r2, [r3, #10]
 80016c0:	f022 020f 	bic.w	r2, r2, #15
 80016c4:	729a      	strb	r2, [r3, #10]
            break;
 80016c6:	bf00      	nop
    }
}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc90      	pop	{r4, r7}
 80016d0:	4770      	bx	lr
	...

080016d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <MX_DMA_Init+0x88>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	4a1e      	ldr	r2, [pc, #120]	@ (800175c <MX_DMA_Init+0x88>)
 80016e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ea:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <MX_DMA_Init+0x88>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	4b18      	ldr	r3, [pc, #96]	@ (800175c <MX_DMA_Init+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a17      	ldr	r2, [pc, #92]	@ (800175c <MX_DMA_Init+0x88>)
 8001700:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <MX_DMA_Init+0x88>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	200d      	movs	r0, #13
 8001718:	f002 fda5 	bl	8004266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800171c:	200d      	movs	r0, #13
 800171e:	f002 fdbe 	bl	800429e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	202f      	movs	r0, #47	@ 0x2f
 8001728:	f002 fd9d 	bl	8004266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800172c:	202f      	movs	r0, #47	@ 0x2f
 800172e:	f002 fdb6 	bl	800429e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	203a      	movs	r0, #58	@ 0x3a
 8001738:	f002 fd95 	bl	8004266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800173c:	203a      	movs	r0, #58	@ 0x3a
 800173e:	f002 fdae 	bl	800429e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	203b      	movs	r0, #59	@ 0x3b
 8001748:	f002 fd8d 	bl	8004266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800174c:	203b      	movs	r0, #59	@ 0x3b
 800174e:	f002 fda6 	bl	800429e <HAL_NVIC_EnableIRQ>

}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800

08001760 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	@ 0x28
 8001764:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b2c      	ldr	r3, [pc, #176]	@ (800182c <MX_GPIO_Init+0xcc>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a2b      	ldr	r2, [pc, #172]	@ (800182c <MX_GPIO_Init+0xcc>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b29      	ldr	r3, [pc, #164]	@ (800182c <MX_GPIO_Init+0xcc>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b25      	ldr	r3, [pc, #148]	@ (800182c <MX_GPIO_Init+0xcc>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a24      	ldr	r2, [pc, #144]	@ (800182c <MX_GPIO_Init+0xcc>)
 800179c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b22      	ldr	r3, [pc, #136]	@ (800182c <MX_GPIO_Init+0xcc>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <MX_GPIO_Init+0xcc>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	4a1d      	ldr	r2, [pc, #116]	@ (800182c <MX_GPIO_Init+0xcc>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017be:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <MX_GPIO_Init+0xcc>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	4b17      	ldr	r3, [pc, #92]	@ (800182c <MX_GPIO_Init+0xcc>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a16      	ldr	r2, [pc, #88]	@ (800182c <MX_GPIO_Init+0xcc>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b14      	ldr	r3, [pc, #80]	@ (800182c <MX_GPIO_Init+0xcc>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2140      	movs	r1, #64	@ 0x40
 80017ea:	4811      	ldr	r0, [pc, #68]	@ (8001830 <MX_GPIO_Init+0xd0>)
 80017ec:	f003 faa0 	bl	8004d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_LATCH_Pin;
 80017f0:	2340      	movs	r3, #64	@ 0x40
 80017f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	480a      	ldr	r0, [pc, #40]	@ (8001830 <MX_GPIO_Init+0xd0>)
 8001808:	f003 f8f6 	bl	80049f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 800180c:	2320      	movs	r3, #32
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001814:	2301      	movs	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4619      	mov	r1, r3
 800181e:	4805      	ldr	r0, [pc, #20]	@ (8001834 <MX_GPIO_Init+0xd4>)
 8001820:	f003 f8ea 	bl	80049f8 <HAL_GPIO_Init>

}
 8001824:	bf00      	nop
 8001826:	3728      	adds	r7, #40	@ 0x28
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	40020000 	.word	0x40020000
 8001834:	40020400 	.word	0x40020400

08001838 <IsNmeaSeparator>:
extern DMA_HandleTypeDef hdma_usart1_rx;
uint8_t gps_dma_buffer[GPS_DMA_BUFFER_SIZE];
gps_data_t gps_data = {0};
static uint16_t old_pos = 0;
static bool IsNmeaSeparator(char c)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
    return (c == ',' || c == '*');  // Zwraca true, jeśli znak jest ',' lub '*'
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b2c      	cmp	r3, #44	@ 0x2c
 8001846:	d002      	beq.n	800184e <IsNmeaSeparator+0x16>
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	2b2a      	cmp	r3, #42	@ 0x2a
 800184c:	d101      	bne.n	8001852 <IsNmeaSeparator+0x1a>
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <IsNmeaSeparator+0x1c>
 8001852:	2300      	movs	r3, #0
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	b2db      	uxtb	r3, r3
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <ParseUInt8>:
static uint8_t ParseUInt8(const char *startingPtr, uint8_t maxLen)
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	460b      	mov	r3, r1
 8001870:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;  // Inicjalizacja zmiennej do przechowywania wyniku
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]
    // Iteracja przez każdy znak w ciągu, do maksymalnej długości
    for (uint8_t i = 0; i < maxLen; i++)
 8001876:	2300      	movs	r3, #0
 8001878:	73bb      	strb	r3, [r7, #14]
 800187a:	e01c      	b.n	80018b6 <ParseUInt8+0x50>
    {
        // Sprawdzenie, czy znak jest cyfrą ('0' - '9')
        if (startingPtr[i] < '0' || startingPtr[i] > '9')
 800187c:	7bbb      	ldrb	r3, [r7, #14]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b2f      	cmp	r3, #47	@ 0x2f
 8001886:	d91a      	bls.n	80018be <ParseUInt8+0x58>
 8001888:	7bbb      	ldrb	r3, [r7, #14]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b39      	cmp	r3, #57	@ 0x39
 8001892:	d814      	bhi.n	80018be <ParseUInt8+0x58>
            break;  // Przerwanie pętli, jeśli znak nie jest cyfrą
        // Aktualizacja wartości poprzez przesunięcie dziesiętne i dodanie nowej cyfry
        value = (uint8_t)(value * 10 + (startingPtr[i] - '0'));
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	461a      	mov	r2, r3
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	4413      	add	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	7bbb      	ldrb	r3, [r7, #14]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	440b      	add	r3, r1
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4413      	add	r3, r2
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	3b30      	subs	r3, #48	@ 0x30
 80018ae:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < maxLen; i++)
 80018b0:	7bbb      	ldrb	r3, [r7, #14]
 80018b2:	3301      	adds	r3, #1
 80018b4:	73bb      	strb	r3, [r7, #14]
 80018b6:	7bba      	ldrb	r2, [r7, #14]
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3de      	bcc.n	800187c <ParseUInt8+0x16>
    }
    return value;  // Zwrócenie sparsowanej wartości
 80018be:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <ParseGPRMC>:
 * // gps_data.day = 23
 * // gps_data.month = 03
 * // gps_data.year = 94
 */
static void ParseGPRMC(const char *nmeaLine)
{
 80018cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ce:	b091      	sub	sp, #68	@ 0x44
 80018d0:	af04      	add	r7, sp, #16
 80018d2:	6078      	str	r0, [r7, #4]
    const char *p = nmeaLine;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t fieldIndex = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    const char *fieldPtr = NULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
    for (; *p != '\0'; p++)
 80018e2:	e071      	b.n	80019c8 <ParseGPRMC+0xfc>
    {
        if (IsNmeaSeparator(*p) || *p == '\r' || *p == '\n')
 80018e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ffa5 	bl	8001838 <IsNmeaSeparator>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d107      	bne.n	8001904 <ParseGPRMC+0x38>
 80018f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b0d      	cmp	r3, #13
 80018fa:	d003      	beq.n	8001904 <ParseGPRMC+0x38>
 80018fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b0a      	cmp	r3, #10
 8001902:	d155      	bne.n	80019b0 <ParseGPRMC+0xe4>
        {
            if (fieldPtr)
 8001904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001906:	2b00      	cmp	r3, #0
 8001908:	d04a      	beq.n	80019a0 <ParseGPRMC+0xd4>
            {
                switch(fieldIndex)
 800190a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800190e:	2b09      	cmp	r3, #9
 8001910:	d028      	beq.n	8001964 <ParseGPRMC+0x98>
 8001912:	2b09      	cmp	r3, #9
 8001914:	dc43      	bgt.n	800199e <ParseGPRMC+0xd2>
 8001916:	2b01      	cmp	r3, #1
 8001918:	d002      	beq.n	8001920 <ParseGPRMC+0x54>
 800191a:	2b02      	cmp	r3, #2
 800191c:	d01d      	beq.n	800195a <ParseGPRMC+0x8e>
                        gps_data.day   = ParseUInt8(fieldPtr, 2);
                        gps_data.month = ParseUInt8(fieldPtr+2, 2);
                        gps_data.year  = ParseUInt8(fieldPtr+4, 2);
                        break;
                    default:
                        break;
 800191e:	e03e      	b.n	800199e <ParseGPRMC+0xd2>
                        gps_data.hours   = ParseUInt8(fieldPtr, 2);
 8001920:	2102      	movs	r1, #2
 8001922:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001924:	f7ff ff9f 	bl	8001866 <ParseUInt8>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
 800192c:	4b42      	ldr	r3, [pc, #264]	@ (8001a38 <ParseGPRMC+0x16c>)
 800192e:	701a      	strb	r2, [r3, #0]
                        gps_data.minutes = ParseUInt8(fieldPtr+2, 2);
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	3302      	adds	r3, #2
 8001934:	2102      	movs	r1, #2
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff95 	bl	8001866 <ParseUInt8>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	4b3d      	ldr	r3, [pc, #244]	@ (8001a38 <ParseGPRMC+0x16c>)
 8001942:	705a      	strb	r2, [r3, #1]
                        gps_data.seconds = ParseUInt8(fieldPtr+4, 2);
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001946:	3304      	adds	r3, #4
 8001948:	2102      	movs	r1, #2
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff8b 	bl	8001866 <ParseUInt8>
 8001950:	4603      	mov	r3, r0
 8001952:	461a      	mov	r2, r3
 8001954:	4b38      	ldr	r3, [pc, #224]	@ (8001a38 <ParseGPRMC+0x16c>)
 8001956:	709a      	strb	r2, [r3, #2]
                        break;
 8001958:	e022      	b.n	80019a0 <ParseGPRMC+0xd4>
                        gps_data.fix = *fieldPtr;
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	4b36      	ldr	r3, [pc, #216]	@ (8001a38 <ParseGPRMC+0x16c>)
 8001960:	71da      	strb	r2, [r3, #7]
                        break;
 8001962:	e01d      	b.n	80019a0 <ParseGPRMC+0xd4>
                        gps_data.day   = ParseUInt8(fieldPtr, 2);
 8001964:	2102      	movs	r1, #2
 8001966:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001968:	f7ff ff7d 	bl	8001866 <ParseUInt8>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	4b31      	ldr	r3, [pc, #196]	@ (8001a38 <ParseGPRMC+0x16c>)
 8001972:	70da      	strb	r2, [r3, #3]
                        gps_data.month = ParseUInt8(fieldPtr+2, 2);
 8001974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001976:	3302      	adds	r3, #2
 8001978:	2102      	movs	r1, #2
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff73 	bl	8001866 <ParseUInt8>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b2c      	ldr	r3, [pc, #176]	@ (8001a38 <ParseGPRMC+0x16c>)
 8001986:	711a      	strb	r2, [r3, #4]
                        gps_data.year  = ParseUInt8(fieldPtr+4, 2);
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	3304      	adds	r3, #4
 800198c:	2102      	movs	r1, #2
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ff69 	bl	8001866 <ParseUInt8>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	4b27      	ldr	r3, [pc, #156]	@ (8001a38 <ParseGPRMC+0x16c>)
 800199a:	715a      	strb	r2, [r3, #5]
                        break;
 800199c:	e000      	b.n	80019a0 <ParseGPRMC+0xd4>
                        break;
 800199e:	bf00      	nop
                }
            }
            fieldPtr = NULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
            fieldIndex++;
 80019a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80019a8:	3301      	adds	r3, #1
 80019aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80019ae:	e004      	b.n	80019ba <ParseGPRMC+0xee>
        }
        else
        {
            if (!fieldPtr) fieldPtr = p;
 80019b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <ParseGPRMC+0xee>
 80019b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (*p == '*') break;
 80019ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b2a      	cmp	r3, #42	@ 0x2a
 80019c0:	d007      	beq.n	80019d2 <ParseGPRMC+0x106>
    for (; *p != '\0'; p++)
 80019c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c4:	3301      	adds	r3, #1
 80019c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d189      	bne.n	80018e4 <ParseGPRMC+0x18>
 80019d0:	e000      	b.n	80019d4 <ParseGPRMC+0x108>
        if (*p == '*') break;
 80019d2:	bf00      	nop
    }
    // Natychmiastowa aktualizacja RTC zaraz po poprawnym odczycie GPRMC
    // (sprawdzamy czy fix jest 'A'):
    if (gps_data.fix == 'A')
 80019d4:	4b18      	ldr	r3, [pc, #96]	@ (8001a38 <ParseGPRMC+0x16c>)
 80019d6:	79db      	ldrb	r3, [r3, #7]
 80019d8:	2b41      	cmp	r3, #65	@ 0x41
 80019da:	d129      	bne.n	8001a30 <ParseGPRMC+0x164>
        // Tworzymy struktury dla lokalnego czasu
        RTC_TimeTypeDef localTime;
        RTC_DateTypeDef localDate;

        // Konwertuj z GPS (UTC) na czas lokalny
        ConvertUtcToLocalTime(gps_data.hours, gps_data.minutes, gps_data.seconds,
 80019dc:	4b16      	ldr	r3, [pc, #88]	@ (8001a38 <ParseGPRMC+0x16c>)
 80019de:	7818      	ldrb	r0, [r3, #0]
 80019e0:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <ParseGPRMC+0x16c>)
 80019e2:	785c      	ldrb	r4, [r3, #1]
 80019e4:	4b14      	ldr	r3, [pc, #80]	@ (8001a38 <ParseGPRMC+0x16c>)
 80019e6:	789d      	ldrb	r5, [r3, #2]
 80019e8:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <ParseGPRMC+0x16c>)
 80019ea:	78de      	ldrb	r6, [r3, #3]
 80019ec:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <ParseGPRMC+0x16c>)
 80019ee:	791b      	ldrb	r3, [r3, #4]
 80019f0:	4a11      	ldr	r2, [pc, #68]	@ (8001a38 <ParseGPRMC+0x16c>)
 80019f2:	7952      	ldrb	r2, [r2, #5]
 80019f4:	f107 010c 	add.w	r1, r7, #12
 80019f8:	9103      	str	r1, [sp, #12]
 80019fa:	f107 0110 	add.w	r1, r7, #16
 80019fe:	9102      	str	r1, [sp, #8]
 8001a00:	9201      	str	r2, [sp, #4]
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	4633      	mov	r3, r6
 8001a06:	462a      	mov	r2, r5
 8001a08:	4621      	mov	r1, r4
 8001a0a:	f000 f911 	bl	8001c30 <ConvertUtcToLocalTime>
                              gps_data.day,   gps_data.month,  gps_data.year,
                              &localTime, &localDate);
        // I wpisz do RTC
        HAL_RTC_SetTime(&hrtc, &localTime, RTC_FORMAT_BIN);
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	2200      	movs	r2, #0
 8001a14:	4619      	mov	r1, r3
 8001a16:	4809      	ldr	r0, [pc, #36]	@ (8001a3c <ParseGPRMC+0x170>)
 8001a18:	f004 f8c5 	bl	8005ba6 <HAL_RTC_SetTime>
        HAL_RTC_SetDate(&hrtc, &localDate, RTC_FORMAT_BIN);
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	2200      	movs	r2, #0
 8001a22:	4619      	mov	r1, r3
 8001a24:	4805      	ldr	r0, [pc, #20]	@ (8001a3c <ParseGPRMC+0x170>)
 8001a26:	f004 f9b6 	bl	8005d96 <HAL_RTC_SetDate>
        colon =1;
 8001a2a:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <ParseGPRMC+0x174>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
    }
}
 8001a30:	bf00      	nop
 8001a32:	3734      	adds	r7, #52	@ 0x34
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a38:	200004c0 	.word	0x200004c0
 8001a3c:	20000698 	.word	0x20000698
 8001a40:	200000bd 	.word	0x200000bd

08001a44 <ParseGPGGA>:

static void ParseGPGGA(const char *nmeaLine)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
    const char *p = nmeaLine;          // Wskaźnik do iteracji przez ciąg znaków
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	617b      	str	r3, [r7, #20]
    uint8_t fieldIndex = 0;            // Indeks aktualnie przetwarzanego pola
 8001a50:	2300      	movs	r3, #0
 8001a52:	74fb      	strb	r3, [r7, #19]
    const char *fieldPtr = NULL;       // Wskaźnik do początku aktualnego pola
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
    // Iteracja przez każdy znak w linii NMEA
    for (; *p != '\0'; p++)
 8001a58:	e02f      	b.n	8001aba <ParseGPGGA+0x76>
    {
        // Sprawdzenie, czy znak jest separatorem lub końcem linii
        if (IsNmeaSeparator(*p) || *p == '\r' || *p == '\n')
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff feea 	bl	8001838 <IsNmeaSeparator>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d107      	bne.n	8001a7a <ParseGPGGA+0x36>
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b0d      	cmp	r3, #13
 8001a70:	d003      	beq.n	8001a7a <ParseGPGGA+0x36>
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b0a      	cmp	r3, #10
 8001a78:	d113      	bne.n	8001aa2 <ParseGPGGA+0x5e>
        {
            // Jeśli aktualne pole nie jest puste i indeks pola to 7, przetwarzamy jego zawartość
            if (fieldPtr && fieldIndex == 7)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00a      	beq.n	8001a96 <ParseGPGGA+0x52>
 8001a80:	7cfb      	ldrb	r3, [r7, #19]
 8001a82:	2b07      	cmp	r3, #7
 8001a84:	d107      	bne.n	8001a96 <ParseGPGGA+0x52>
            {
                gps_data.satellites = ParseUInt8(fieldPtr, 2);    // Liczba satelit (np. '08' oznacza 8)
 8001a86:	2102      	movs	r1, #2
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff feec 	bl	8001866 <ParseUInt8>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <ParseGPGGA+0x8c>)
 8001a94:	719a      	strb	r2, [r3, #6]
            }
            fieldPtr = NULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
            fieldIndex++;
 8001a9a:	7cfb      	ldrb	r3, [r7, #19]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	74fb      	strb	r3, [r7, #19]
 8001aa0:	e004      	b.n	8001aac <ParseGPGGA+0x68>
        }
        else
        {
            // Jeśli jeszcze nie ustawiono początku pola, ustawiamy wskaźnik
            if (!fieldPtr)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <ParseGPGGA+0x68>
                fieldPtr = p;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	60fb      	str	r3, [r7, #12]
        }
        // Jeśli napotkano '*', kończymy parsowanie tej linii
        if (*p == '*')
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ab2:	d007      	beq.n	8001ac4 <ParseGPGGA+0x80>
    for (; *p != '\0'; p++)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1cb      	bne.n	8001a5a <ParseGPGGA+0x16>
            break;
    }
}
 8001ac2:	e000      	b.n	8001ac6 <ParseGPGGA+0x82>
            break;
 8001ac4:	bf00      	nop
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200004c0 	.word	0x200004c0

08001ad4 <GPS_ProcessBuffer>:

void GPS_ProcessBuffer(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
    /* Obliczenie aktualnej pozycji w buforze */
    uint16_t now_pos = GPS_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8001ada:	4b40      	ldr	r3, [pc, #256]	@ (8001bdc <GPS_ProcessBuffer+0x108>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8001ae6:	80fb      	strh	r3, [r7, #6]
    while (old_pos != now_pos)
 8001ae8:	e06d      	b.n	8001bc6 <GPS_ProcessBuffer+0xf2>
    {
        char c = (char)gps_dma_buffer[old_pos];
 8001aea:	4b3d      	ldr	r3, [pc, #244]	@ (8001be0 <GPS_ProcessBuffer+0x10c>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b3c      	ldr	r3, [pc, #240]	@ (8001be4 <GPS_ProcessBuffer+0x110>)
 8001af2:	5c9b      	ldrb	r3, [r3, r2]
 8001af4:	717b      	strb	r3, [r7, #5]
        static char lineBuf[128];
        static uint8_t lineIndex = 0;
        if (lineIndex < sizeof(lineBuf) - 1)
 8001af6:	4b3c      	ldr	r3, [pc, #240]	@ (8001be8 <GPS_ProcessBuffer+0x114>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b7e      	cmp	r3, #126	@ 0x7e
 8001afc:	d809      	bhi.n	8001b12 <GPS_ProcessBuffer+0x3e>
        {
            lineBuf[lineIndex++] = c;
 8001afe:	4b3a      	ldr	r3, [pc, #232]	@ (8001be8 <GPS_ProcessBuffer+0x114>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	b2d1      	uxtb	r1, r2
 8001b06:	4a38      	ldr	r2, [pc, #224]	@ (8001be8 <GPS_ProcessBuffer+0x114>)
 8001b08:	7011      	strb	r1, [r2, #0]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4a37      	ldr	r2, [pc, #220]	@ (8001bec <GPS_ProcessBuffer+0x118>)
 8001b0e:	797b      	ldrb	r3, [r7, #5]
 8001b10:	5453      	strb	r3, [r2, r1]
        }
        if (c == '\n' || c == '\r')
 8001b12:	797b      	ldrb	r3, [r7, #5]
 8001b14:	2b0a      	cmp	r3, #10
 8001b16:	d002      	beq.n	8001b1e <GPS_ProcessBuffer+0x4a>
 8001b18:	797b      	ldrb	r3, [r7, #5]
 8001b1a:	2b0d      	cmp	r3, #13
 8001b1c:	d145      	bne.n	8001baa <GPS_ProcessBuffer+0xd6>
        {
            lineBuf[lineIndex] = '\0';
 8001b1e:	4b32      	ldr	r3, [pc, #200]	@ (8001be8 <GPS_ProcessBuffer+0x114>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	4b31      	ldr	r3, [pc, #196]	@ (8001bec <GPS_ProcessBuffer+0x118>)
 8001b26:	2100      	movs	r1, #0
 8001b28:	5499      	strb	r1, [r3, r2]
            if (strncmp(lineBuf, "$GPRMC", 6) == 0)
 8001b2a:	2206      	movs	r2, #6
 8001b2c:	4930      	ldr	r1, [pc, #192]	@ (8001bf0 <GPS_ProcessBuffer+0x11c>)
 8001b2e:	482f      	ldr	r0, [pc, #188]	@ (8001bec <GPS_ProcessBuffer+0x118>)
 8001b30:	f006 fd0c 	bl	800854c <strncmp>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <GPS_ProcessBuffer+0x6c>
            {
                ParseGPRMC(lineBuf);
 8001b3a:	482c      	ldr	r0, [pc, #176]	@ (8001bec <GPS_ProcessBuffer+0x118>)
 8001b3c:	f7ff fec6 	bl	80018cc <ParseGPRMC>
            }
          if (strncmp(lineBuf, "$GPGGA", 6) == 0)
 8001b40:	2206      	movs	r2, #6
 8001b42:	492c      	ldr	r1, [pc, #176]	@ (8001bf4 <GPS_ProcessBuffer+0x120>)
 8001b44:	4829      	ldr	r0, [pc, #164]	@ (8001bec <GPS_ProcessBuffer+0x118>)
 8001b46:	f006 fd01 	bl	800854c <strncmp>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <GPS_ProcessBuffer+0x82>
            {
                ParseGPGGA(lineBuf);
 8001b50:	4826      	ldr	r0, [pc, #152]	@ (8001bec <GPS_ProcessBuffer+0x118>)
 8001b52:	f7ff ff77 	bl	8001a44 <ParseGPGGA>
            }
            if (strncmp(lineBuf, "$GPRMC", 6) == 0 || strncmp(lineBuf, "$GNRMC", 6) == 0)
 8001b56:	2206      	movs	r2, #6
 8001b58:	4925      	ldr	r1, [pc, #148]	@ (8001bf0 <GPS_ProcessBuffer+0x11c>)
 8001b5a:	4824      	ldr	r0, [pc, #144]	@ (8001bec <GPS_ProcessBuffer+0x118>)
 8001b5c:	f006 fcf6 	bl	800854c <strncmp>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d007      	beq.n	8001b76 <GPS_ProcessBuffer+0xa2>
 8001b66:	2206      	movs	r2, #6
 8001b68:	4923      	ldr	r1, [pc, #140]	@ (8001bf8 <GPS_ProcessBuffer+0x124>)
 8001b6a:	4820      	ldr	r0, [pc, #128]	@ (8001bec <GPS_ProcessBuffer+0x118>)
 8001b6c:	f006 fcee 	bl	800854c <strncmp>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d103      	bne.n	8001b7e <GPS_ProcessBuffer+0xaa>
            {
                ParseGPRMC(lineBuf);
 8001b76:	481d      	ldr	r0, [pc, #116]	@ (8001bec <GPS_ProcessBuffer+0x118>)
 8001b78:	f7ff fea8 	bl	80018cc <ParseGPRMC>
 8001b7c:	e012      	b.n	8001ba4 <GPS_ProcessBuffer+0xd0>
            }
            else if (strncmp(lineBuf, "$GPGGA", 6) == 0 || strncmp(lineBuf, "$GNGGA", 6) == 0)
 8001b7e:	2206      	movs	r2, #6
 8001b80:	491c      	ldr	r1, [pc, #112]	@ (8001bf4 <GPS_ProcessBuffer+0x120>)
 8001b82:	481a      	ldr	r0, [pc, #104]	@ (8001bec <GPS_ProcessBuffer+0x118>)
 8001b84:	f006 fce2 	bl	800854c <strncmp>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <GPS_ProcessBuffer+0xca>
 8001b8e:	2206      	movs	r2, #6
 8001b90:	491a      	ldr	r1, [pc, #104]	@ (8001bfc <GPS_ProcessBuffer+0x128>)
 8001b92:	4816      	ldr	r0, [pc, #88]	@ (8001bec <GPS_ProcessBuffer+0x118>)
 8001b94:	f006 fcda 	bl	800854c <strncmp>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d102      	bne.n	8001ba4 <GPS_ProcessBuffer+0xd0>
            {
                ParseGPGGA(lineBuf);
 8001b9e:	4813      	ldr	r0, [pc, #76]	@ (8001bec <GPS_ProcessBuffer+0x118>)
 8001ba0:	f7ff ff50 	bl	8001a44 <ParseGPGGA>
            }
            lineIndex = 0;
 8001ba4:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <GPS_ProcessBuffer+0x114>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
        }
        old_pos++;
 8001baa:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <GPS_ProcessBuffer+0x10c>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <GPS_ProcessBuffer+0x10c>)
 8001bb4:	801a      	strh	r2, [r3, #0]
        if (old_pos >= GPS_DMA_BUFFER_SIZE)
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <GPS_ProcessBuffer+0x10c>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bbe:	d302      	bcc.n	8001bc6 <GPS_ProcessBuffer+0xf2>
            old_pos = 0;
 8001bc0:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <GPS_ProcessBuffer+0x10c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	801a      	strh	r2, [r3, #0]
    while (old_pos != now_pos)
 8001bc6:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <GPS_ProcessBuffer+0x10c>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	88fa      	ldrh	r2, [r7, #6]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d18c      	bne.n	8001aea <GPS_ProcessBuffer+0x16>
    }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200008bc 	.word	0x200008bc
 8001be0:	200004c8 	.word	0x200004c8
 8001be4:	200000c0 	.word	0x200000c0
 8001be8:	200004ca 	.word	0x200004ca
 8001bec:	200004cc 	.word	0x200004cc
 8001bf0:	080085f8 	.word	0x080085f8
 8001bf4:	08008600 	.word	0x08008600
 8001bf8:	08008608 	.word	0x08008608
 8001bfc:	08008610 	.word	0x08008610

08001c00 <GPS_Init>:

void GPS_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
    memset(&gps_data, 0, sizeof(gps_data));
 8001c04:	2208      	movs	r2, #8
 8001c06:	2100      	movs	r1, #0
 8001c08:	4806      	ldr	r0, [pc, #24]	@ (8001c24 <GPS_Init+0x24>)
 8001c0a:	f006 fc97 	bl	800853c <memset>
    memset(gps_dma_buffer, 0, GPS_DMA_BUFFER_SIZE);
 8001c0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c12:	2100      	movs	r1, #0
 8001c14:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <GPS_Init+0x28>)
 8001c16:	f006 fc91 	bl	800853c <memset>
    old_pos = 0;
 8001c1a:	4b04      	ldr	r3, [pc, #16]	@ (8001c2c <GPS_Init+0x2c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	801a      	strh	r2, [r3, #0]
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	200004c0 	.word	0x200004c0
 8001c28:	200000c0 	.word	0x200000c0
 8001c2c:	200004c8 	.word	0x200004c8

08001c30 <ConvertUtcToLocalTime>:

void ConvertUtcToLocalTime(uint8_t utcHours, uint8_t utcMinutes,
		uint8_t utcSeconds, uint8_t utcDay, uint8_t utcMonth, uint8_t utcYear,
		RTC_TimeTypeDef *localTime, RTC_DateTypeDef *localDate) {
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b08d      	sub	sp, #52	@ 0x34
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4604      	mov	r4, r0
 8001c38:	4608      	mov	r0, r1
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4623      	mov	r3, r4
 8001c40:	71fb      	strb	r3, [r7, #7]
 8001c42:	4603      	mov	r3, r0
 8001c44:	71bb      	strb	r3, [r7, #6]
 8001c46:	460b      	mov	r3, r1
 8001c48:	717b      	strb	r3, [r7, #5]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	713b      	strb	r3, [r7, #4]
	// UTC+1 dla Polski w czasie zimowym, a UTC+2 latem:
	// year w RTC to 00..99, można przerobić na 20xx itp.
	// Załóżmy, że gps_data.year = 24 oznacza 2024 (proste uproszczenie)
	uint16_t fullYear = 2000 + utcYear;
 8001c4e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001c58:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int offset = 1;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (IsDstActive(fullYear, utcMonth, utcDay)) {
 8001c5e:	793a      	ldrb	r2, [r7, #4]
 8001c60:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 8001c64:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f909 	bl	8001e7e <IsDstActive>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <ConvertUtcToLocalTime+0x46>
		offset = 2;
 8001c72:	2302      	movs	r3, #2
 8001c74:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	int hour = utcHours + offset;
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c7a:	4413      	add	r3, r2
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
	int minute = utcMinutes;
 8001c7e:	79bb      	ldrb	r3, [r7, #6]
 8001c80:	61bb      	str	r3, [r7, #24]
	int second = utcSeconds;
 8001c82:	797b      	ldrb	r3, [r7, #5]
 8001c84:	617b      	str	r3, [r7, #20]

	int day = utcDay;
 8001c86:	793b      	ldrb	r3, [r7, #4]
 8001c88:	623b      	str	r3, [r7, #32]
	int month = utcMonth;
 8001c8a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001c8e:	61fb      	str	r3, [r7, #28]
	int yearXX = utcYear;   // 0..99 w RTC
 8001c90:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001c94:	613b      	str	r3, [r7, #16]


	DOW = GetDayOfWeek(fullYear, utcMonth, utcDay);
 8001c96:	793a      	ldrb	r2, [r7, #4]
 8001c98:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 8001c9c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f92a 	bl	8001ef8 <GetDayOfWeek>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8001d98 <ConvertUtcToLocalTime+0x168>)
 8001caa:	701a      	strb	r2, [r3, #0]

	// Ale do obliczeń powyżej używamy fullYear (np. 2024)
	// Korekty przekroczeń doby
	if (hour >= 24) {
 8001cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cae:	2b17      	cmp	r3, #23
 8001cb0:	dd20      	ble.n	8001cf4 <ConvertUtcToLocalTime+0xc4>
		hour -= 24;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	3b18      	subs	r3, #24
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24
		day++;
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	623b      	str	r3, [r7, #32]
		// sprawdź, czy nie przekraczamy dni w tym miesiącu
		uint8_t mdays = DaysInMonth(fullYear, month);
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f86a 	bl	8001da0 <DaysInMonth>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	73fb      	strb	r3, [r7, #15]
		if (day > mdays) {
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	6a3a      	ldr	r2, [r7, #32]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dd2d      	ble.n	8001d34 <ConvertUtcToLocalTime+0x104>
			day = 1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	623b      	str	r3, [r7, #32]
			month++;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	61fb      	str	r3, [r7, #28]
			if (month > 12) {
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	2b0c      	cmp	r3, #12
 8001ce6:	dd25      	ble.n	8001d34 <ConvertUtcToLocalTime+0x104>
				month = 1;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	61fb      	str	r3, [r7, #28]
				fullYear++;
 8001cec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001cee:	3301      	adds	r3, #1
 8001cf0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001cf2:	e01f      	b.n	8001d34 <ConvertUtcToLocalTime+0x104>
			}
		}
	} else if (hour < 0) {
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	da1c      	bge.n	8001d34 <ConvertUtcToLocalTime+0x104>
		hour += 24;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	3318      	adds	r3, #24
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
		day--;
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	623b      	str	r3, [r7, #32]
		if (day < 1) {
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	dc13      	bgt.n	8001d34 <ConvertUtcToLocalTime+0x104>
			// cofka do poprzedniego miesiąca
			month--;
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	61fb      	str	r3, [r7, #28]
			if (month < 1) {
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	dc04      	bgt.n	8001d22 <ConvertUtcToLocalTime+0xf2>
				month = 12;
 8001d18:	230c      	movs	r3, #12
 8001d1a:	61fb      	str	r3, [r7, #28]
				fullYear--;
 8001d1c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			}
			day = DaysInMonth(fullYear, month);
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f838 	bl	8001da0 <DaysInMonth>
 8001d30:	4603      	mov	r3, r0
 8001d32:	623b      	str	r3, [r7, #32]
		}
	}
	// fullYear z powrotem do 00..99
	// Proste: np. 2025 -> 25
	yearXX = (uint8_t) (fullYear % 100);
 8001d34:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d36:	4a19      	ldr	r2, [pc, #100]	@ (8001d9c <ConvertUtcToLocalTime+0x16c>)
 8001d38:	fba2 1203 	umull	r1, r2, r2, r3
 8001d3c:	0952      	lsrs	r2, r2, #5
 8001d3e:	2164      	movs	r1, #100	@ 0x64
 8001d40:	fb01 f202 	mul.w	r2, r1, r2
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	613b      	str	r3, [r7, #16]
	// Zapis do struktur RTC
	localTime->Hours = hour;
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d52:	701a      	strb	r2, [r3, #0]
	localTime->Minutes = minute;
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d5a:	705a      	strb	r2, [r3, #1]
	localTime->Seconds = second;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d62:	709a      	strb	r2, [r3, #2]
	localTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
	localTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8001d6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
	localDate->Date = (uint8_t) day;
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d76:	709a      	strb	r2, [r3, #2]
	localDate->Month = (uint8_t) month;
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d7e:	705a      	strb	r2, [r3, #1]
	localDate->Year = (uint8_t) yearXX;
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d86:	70da      	strb	r2, [r3, #3]
	localDate->WeekDay = RTC_WEEKDAY_MONDAY; // albo oblicz w oparciu o GetDayOfWeek
 8001d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	3734      	adds	r7, #52	@ 0x34
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd90      	pop	{r4, r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200000bc 	.word	0x200000bc
 8001d9c:	51eb851f 	.word	0x51eb851f

08001da0 <DaysInMonth>:
uint8_t DaysInMonth(uint16_t year, uint8_t month) {
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	460a      	mov	r2, r1
 8001daa:	80fb      	strh	r3, [r7, #6]
 8001dac:	4613      	mov	r3, r2
 8001dae:	717b      	strb	r3, [r7, #5]
	static const uint8_t daysTable[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30,
			31, 30, 31 };
	if (month == 2)  // luty
 8001db0:	797b      	ldrb	r3, [r7, #5]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d12f      	bne.n	8001e16 <DaysInMonth+0x76>
			{
		// Sprawdź, czy rok przestępny
		// „Rok przestępny” jeżeli:
		//  - rok % 4 == 0 i rok % 100 != 0
		//  - lub rok % 400 == 0
		bool leap = false;
 8001db6:	2300      	movs	r3, #0
 8001db8:	73fb      	strb	r3, [r7, #15]
		if ((year % 400) == 0) {
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001e2c <DaysInMonth+0x8c>)
 8001dbe:	fba2 1203 	umull	r1, r2, r2, r3
 8001dc2:	09d2      	lsrs	r2, r2, #7
 8001dc4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001dc8:	fb01 f202 	mul.w	r2, r1, r2
 8001dcc:	1a9b      	subs	r3, r3, r2
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <DaysInMonth+0x3a>
			leap = true;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
 8001dd8:	e016      	b.n	8001e08 <DaysInMonth+0x68>
		} else if ((year % 100) == 0) {
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	4a13      	ldr	r2, [pc, #76]	@ (8001e2c <DaysInMonth+0x8c>)
 8001dde:	fba2 1203 	umull	r1, r2, r2, r3
 8001de2:	0952      	lsrs	r2, r2, #5
 8001de4:	2164      	movs	r1, #100	@ 0x64
 8001de6:	fb01 f202 	mul.w	r2, r1, r2
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <DaysInMonth+0x58>
			leap = false;
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	e007      	b.n	8001e08 <DaysInMonth+0x68>
		} else if ((year % 4) == 0) {
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <DaysInMonth+0x68>
			leap = true;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
		}
		return (leap ? 29 : 28);
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <DaysInMonth+0x72>
 8001e0e:	231d      	movs	r3, #29
 8001e10:	e005      	b.n	8001e1e <DaysInMonth+0x7e>
 8001e12:	231c      	movs	r3, #28
 8001e14:	e003      	b.n	8001e1e <DaysInMonth+0x7e>
	}
	return daysTable[month - 1];
 8001e16:	797b      	ldrb	r3, [r7, #5]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	4a05      	ldr	r2, [pc, #20]	@ (8001e30 <DaysInMonth+0x90>)
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	51eb851f 	.word	0x51eb851f
 8001e30:	080086b4 	.word	0x080086b4

08001e34 <GetLastSundayOfMonth>:
/**
 * @brief Zwraca numer dnia (1..31) będący ostatnią niedzielą w danym miesiącu.
 *        Np. dla roku=2024, marzec=3, może zwrócić 31, 30, 29... w zależności,
 *        co jest faktycznie niedzielą.
 */
uint8_t GetLastSundayOfMonth(uint16_t year, uint8_t month) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	80fb      	strh	r3, [r7, #6]
 8001e40:	4613      	mov	r3, r2
 8001e42:	717b      	strb	r3, [r7, #5]
	uint8_t d = DaysInMonth(year, month);
 8001e44:	797a      	ldrb	r2, [r7, #5]
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ffa8 	bl	8001da0 <DaysInMonth>
 8001e50:	4603      	mov	r3, r0
 8001e52:	73fb      	strb	r3, [r7, #15]
	while (1) {
		uint8_t dow = GetDayOfWeek(year, month, d);
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	7979      	ldrb	r1, [r7, #5]
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f84c 	bl	8001ef8 <GetDayOfWeek>
 8001e60:	4603      	mov	r3, r0
 8001e62:	73bb      	strb	r3, [r7, #14]



		if (dow == 0) { // 0 = niedziela (Sunday)
 8001e64:	7bbb      	ldrb	r3, [r7, #14]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <GetLastSundayOfMonth+0x3a>
			return d;
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	e003      	b.n	8001e76 <GetLastSundayOfMonth+0x42>
		}
		d--;
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
	while (1) {
 8001e74:	e7ee      	b.n	8001e54 <GetLastSundayOfMonth+0x20>
	}
	// Teoretycznie dojdziemy na pewno do jakiejś niedzieli,
	// więc break nie jest potrzebny.
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <IsDstActive>:

bool IsDstActive(uint16_t year, uint8_t month, uint8_t day) {
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	80fb      	strh	r3, [r7, #6]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	717b      	strb	r3, [r7, #5]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	713b      	strb	r3, [r7, #4]
	// Ostatnia niedziela marca
	uint8_t lastSundayMarch = GetLastSundayOfMonth(year, 3);
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	2103      	movs	r1, #3
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ffcd 	bl	8001e34 <GetLastSundayOfMonth>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	73fb      	strb	r3, [r7, #15]
	// Ostatnia niedziela października
	uint8_t lastSundayOctober = GetLastSundayOfMonth(year, 10);
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	210a      	movs	r1, #10
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ffc6 	bl	8001e34 <GetLastSundayOfMonth>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	73bb      	strb	r3, [r7, #14]
	// Warunek: jeżeli data >= (3, lastSundayMarch) i data < (10, lastSundayOctober),
	// to DST = true.
	// Oczywiście trzeba uwzględnić, że jeśli month < 3 to zawsze false,
	// jeśli month > 10 to zawsze false, itd.
	// A) Jeżeli miesiąc < 3 -> zima
	if (month < 3) {
 8001eac:	797b      	ldrb	r3, [r7, #5]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d801      	bhi.n	8001eb6 <IsDstActive+0x38>
		return false;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e01b      	b.n	8001eee <IsDstActive+0x70>
	}
	// B) Jeżeli miesiąc > 10 -> zima
	if (month > 10) {
 8001eb6:	797b      	ldrb	r3, [r7, #5]
 8001eb8:	2b0a      	cmp	r3, #10
 8001eba:	d901      	bls.n	8001ec0 <IsDstActive+0x42>
		return false;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e016      	b.n	8001eee <IsDstActive+0x70>
	}
	// C) Jeżeli to marzec:
	if (month == 3) {
 8001ec0:	797b      	ldrb	r3, [r7, #5]
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d107      	bne.n	8001ed6 <IsDstActive+0x58>
		// czy w danym dniu jest >= ostatniej niedzieli?
		// jeśli tak -> letni
		// jeśli nie -> zimowy
		if (day < lastSundayMarch) {
 8001ec6:	793a      	ldrb	r2, [r7, #4]
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d201      	bcs.n	8001ed2 <IsDstActive+0x54>
			return false;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e00d      	b.n	8001eee <IsDstActive+0x70>
		} else {
			return true;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00b      	b.n	8001eee <IsDstActive+0x70>
		}
	}
	// D) Jeżeli to październik
	if (month == 10) {
 8001ed6:	797b      	ldrb	r3, [r7, #5]
 8001ed8:	2b0a      	cmp	r3, #10
 8001eda:	d107      	bne.n	8001eec <IsDstActive+0x6e>
		// czy w danym dniu jest < ostatniej niedzieli?
		// jeśli tak -> letni
		// jeśli >= -> zimowy
		if (day < lastSundayOctober) {
 8001edc:	793a      	ldrb	r2, [r7, #4]
 8001ede:	7bbb      	ldrb	r3, [r7, #14]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d201      	bcs.n	8001ee8 <IsDstActive+0x6a>
			return true;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e002      	b.n	8001eee <IsDstActive+0x70>
		} else {
			return false;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e000      	b.n	8001eee <IsDstActive+0x70>
		}
	}
	// E) W pozostałych miesiącach 4..9 włącznie mamy 100% DST:
	return true;
 8001eec:	2301      	movs	r3, #1
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <GetDayOfWeek>:
			// Obsługa błędu ustawiania daty
			Error_Handler();
		}
	}
}
uint8_t GetDayOfWeek(uint16_t year, uint8_t month, uint8_t day) {
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
 8001f02:	460b      	mov	r3, r1
 8001f04:	717b      	strb	r3, [r7, #5]
 8001f06:	4613      	mov	r3, r2
 8001f08:	713b      	strb	r3, [r7, #4]
	// Zeller’s Congruence – wersja dla kalendarza gregoriańskiego
	// Aby działała poprawnie dla stycznia i lutego, „przesuwamy” je na poprzedni rok:
	// styczeń -> 13 poprzedniego roku
	// luty    -> 14 poprzedniego roku
	if (month < 3) {
 8001f0a:	797b      	ldrb	r3, [r7, #5]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d805      	bhi.n	8001f1c <GetDayOfWeek+0x24>
		month += 12;
 8001f10:	797b      	ldrb	r3, [r7, #5]
 8001f12:	330c      	adds	r3, #12
 8001f14:	717b      	strb	r3, [r7, #5]
		year -= 1;
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	80fb      	strh	r3, [r7, #6]
	}
	uint16_t K = (uint16_t) (year % 100);
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	4a23      	ldr	r2, [pc, #140]	@ (8001fac <GetDayOfWeek+0xb4>)
 8001f20:	fba2 1203 	umull	r1, r2, r2, r3
 8001f24:	0952      	lsrs	r2, r2, #5
 8001f26:	2164      	movs	r1, #100	@ 0x64
 8001f28:	fb01 f202 	mul.w	r2, r1, r2
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	817b      	strh	r3, [r7, #10]
	uint16_t J = (uint16_t) (year / 100);
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	4a1e      	ldr	r2, [pc, #120]	@ (8001fac <GetDayOfWeek+0xb4>)
 8001f34:	fba2 2303 	umull	r2, r3, r2, r3
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	813b      	strh	r3, [r7, #8]
	// day of week in [0..6], 0=Sunday
	int32_t h = (int32_t) (day + (13 * (month + 1)) / 5 + K + (K / 4) + (J / 4)
 8001f3c:	7939      	ldrb	r1, [r7, #4]
 8001f3e:	797b      	ldrb	r3, [r7, #5]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a18      	ldr	r2, [pc, #96]	@ (8001fb0 <GetDayOfWeek+0xb8>)
 8001f4e:	fb82 0203 	smull	r0, r2, r2, r3
 8001f52:	1052      	asrs	r2, r2, #1
 8001f54:	17db      	asrs	r3, r3, #31
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	18ca      	adds	r2, r1, r3
 8001f5a:	897b      	ldrh	r3, [r7, #10]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	897a      	ldrh	r2, [r7, #10]
 8001f60:	0892      	lsrs	r2, r2, #2
 8001f62:	b292      	uxth	r2, r2
 8001f64:	4413      	add	r3, r2
 8001f66:	893a      	ldrh	r2, [r7, #8]
 8001f68:	0892      	lsrs	r2, r2, #2
 8001f6a:	b292      	uxth	r2, r2
 8001f6c:	441a      	add	r2, r3
			- (2 * J));
 8001f6e:	893b      	ldrh	r3, [r7, #8]
 8001f70:	005b      	lsls	r3, r3, #1
	int32_t h = (int32_t) (day + (13 * (month + 1)) / 5 + K + (K / 4) + (J / 4)
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	60fb      	str	r3, [r7, #12]
	// W C++: h = (h % 7 + 7) % 7  (żeby się upewnić, że jest w 0..6):
	h = h % 7;
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb4 <GetDayOfWeek+0xbc>)
 8001f7a:	fb83 1302 	smull	r1, r3, r3, r2
 8001f7e:	4413      	add	r3, r2
 8001f80:	1099      	asrs	r1, r3, #2
 8001f82:	17d3      	asrs	r3, r2, #31
 8001f84:	1ac9      	subs	r1, r1, r3
 8001f86:	460b      	mov	r3, r1
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	1a5b      	subs	r3, r3, r1
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	60fb      	str	r3, [r7, #12]
	if (h < 0) {
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	da02      	bge.n	8001f9c <GetDayOfWeek+0xa4>
		h += 7;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3307      	adds	r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]
	}
	return (uint8_t) h;  // 0..6
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	b2db      	uxtb	r3, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	51eb851f 	.word	0x51eb851f
 8001fb0:	66666667 	.word	0x66666667
 8001fb4:	92492493 	.word	0x92492493

08001fb8 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001fbc:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <MX_I2C2_Init+0x50>)
 8001fbe:	4a13      	ldr	r2, [pc, #76]	@ (800200c <MX_I2C2_Init+0x54>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <MX_I2C2_Init+0x50>)
 8001fc4:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <MX_I2C2_Init+0x58>)
 8001fc6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <MX_I2C2_Init+0x50>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <MX_I2C2_Init+0x50>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <MX_I2C2_Init+0x50>)
 8001fd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fda:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <MX_I2C2_Init+0x50>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <MX_I2C2_Init+0x50>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fe8:	4b07      	ldr	r3, [pc, #28]	@ (8002008 <MX_I2C2_Init+0x50>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <MX_I2C2_Init+0x50>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ff4:	4804      	ldr	r0, [pc, #16]	@ (8002008 <MX_I2C2_Init+0x50>)
 8001ff6:	f002 feb5 	bl	8004d64 <HAL_I2C_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002000:	f000 fbde 	bl	80027c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	2000054c 	.word	0x2000054c
 800200c:	40005800 	.word	0x40005800
 8002010:	000186a0 	.word	0x000186a0

08002014 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	@ 0x28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a50      	ldr	r2, [pc, #320]	@ (8002174 <HAL_I2C_MspInit+0x160>)
 8002032:	4293      	cmp	r3, r2
 8002034:	f040 8099 	bne.w	800216a <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	4b4e      	ldr	r3, [pc, #312]	@ (8002178 <HAL_I2C_MspInit+0x164>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002040:	4a4d      	ldr	r2, [pc, #308]	@ (8002178 <HAL_I2C_MspInit+0x164>)
 8002042:	f043 0302 	orr.w	r3, r3, #2
 8002046:	6313      	str	r3, [r2, #48]	@ 0x30
 8002048:	4b4b      	ldr	r3, [pc, #300]	@ (8002178 <HAL_I2C_MspInit+0x164>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002054:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800205a:	2312      	movs	r3, #18
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002066:	2304      	movs	r3, #4
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	4842      	ldr	r0, [pc, #264]	@ (800217c <HAL_I2C_MspInit+0x168>)
 8002072:	f002 fcc1 	bl	80049f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002076:	2308      	movs	r3, #8
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800207a:	2312      	movs	r3, #18
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002082:	2303      	movs	r3, #3
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002086:	2309      	movs	r3, #9
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	483a      	ldr	r0, [pc, #232]	@ (800217c <HAL_I2C_MspInit+0x168>)
 8002092:	f002 fcb1 	bl	80049f8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b37      	ldr	r3, [pc, #220]	@ (8002178 <HAL_I2C_MspInit+0x164>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	4a36      	ldr	r2, [pc, #216]	@ (8002178 <HAL_I2C_MspInit+0x164>)
 80020a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020a6:	4b34      	ldr	r3, [pc, #208]	@ (8002178 <HAL_I2C_MspInit+0x164>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80020b2:	4b33      	ldr	r3, [pc, #204]	@ (8002180 <HAL_I2C_MspInit+0x16c>)
 80020b4:	4a33      	ldr	r2, [pc, #204]	@ (8002184 <HAL_I2C_MspInit+0x170>)
 80020b6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80020b8:	4b31      	ldr	r3, [pc, #196]	@ (8002180 <HAL_I2C_MspInit+0x16c>)
 80020ba:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80020be:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002180 <HAL_I2C_MspInit+0x16c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002180 <HAL_I2C_MspInit+0x16c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002180 <HAL_I2C_MspInit+0x16c>)
 80020ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020d2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002180 <HAL_I2C_MspInit+0x16c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020da:	4b29      	ldr	r3, [pc, #164]	@ (8002180 <HAL_I2C_MspInit+0x16c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80020e0:	4b27      	ldr	r3, [pc, #156]	@ (8002180 <HAL_I2C_MspInit+0x16c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020e6:	4b26      	ldr	r3, [pc, #152]	@ (8002180 <HAL_I2C_MspInit+0x16c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ec:	4b24      	ldr	r3, [pc, #144]	@ (8002180 <HAL_I2C_MspInit+0x16c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80020f2:	4823      	ldr	r0, [pc, #140]	@ (8002180 <HAL_I2C_MspInit+0x16c>)
 80020f4:	f002 f8ee 	bl	80042d4 <HAL_DMA_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 80020fe:	f000 fb5f 	bl	80027c0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a1e      	ldr	r2, [pc, #120]	@ (8002180 <HAL_I2C_MspInit+0x16c>)
 8002106:	639a      	str	r2, [r3, #56]	@ 0x38
 8002108:	4a1d      	ldr	r2, [pc, #116]	@ (8002180 <HAL_I2C_MspInit+0x16c>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800210e:	4b1e      	ldr	r3, [pc, #120]	@ (8002188 <HAL_I2C_MspInit+0x174>)
 8002110:	4a1e      	ldr	r2, [pc, #120]	@ (800218c <HAL_I2C_MspInit+0x178>)
 8002112:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8002114:	4b1c      	ldr	r3, [pc, #112]	@ (8002188 <HAL_I2C_MspInit+0x174>)
 8002116:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800211a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800211c:	4b1a      	ldr	r3, [pc, #104]	@ (8002188 <HAL_I2C_MspInit+0x174>)
 800211e:	2240      	movs	r2, #64	@ 0x40
 8002120:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002122:	4b19      	ldr	r3, [pc, #100]	@ (8002188 <HAL_I2C_MspInit+0x174>)
 8002124:	2200      	movs	r2, #0
 8002126:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002128:	4b17      	ldr	r3, [pc, #92]	@ (8002188 <HAL_I2C_MspInit+0x174>)
 800212a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800212e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002130:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <HAL_I2C_MspInit+0x174>)
 8002132:	2200      	movs	r2, #0
 8002134:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002136:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <HAL_I2C_MspInit+0x174>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800213c:	4b12      	ldr	r3, [pc, #72]	@ (8002188 <HAL_I2C_MspInit+0x174>)
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002142:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <HAL_I2C_MspInit+0x174>)
 8002144:	2200      	movs	r2, #0
 8002146:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002148:	4b0f      	ldr	r3, [pc, #60]	@ (8002188 <HAL_I2C_MspInit+0x174>)
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800214e:	480e      	ldr	r0, [pc, #56]	@ (8002188 <HAL_I2C_MspInit+0x174>)
 8002150:	f002 f8c0 	bl	80042d4 <HAL_DMA_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_I2C_MspInit+0x14a>
    {
      Error_Handler();
 800215a:	f000 fb31 	bl	80027c0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a09      	ldr	r2, [pc, #36]	@ (8002188 <HAL_I2C_MspInit+0x174>)
 8002162:	635a      	str	r2, [r3, #52]	@ 0x34
 8002164:	4a08      	ldr	r2, [pc, #32]	@ (8002188 <HAL_I2C_MspInit+0x174>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800216a:	bf00      	nop
 800216c:	3728      	adds	r7, #40	@ 0x28
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40005800 	.word	0x40005800
 8002178:	40023800 	.word	0x40023800
 800217c:	40020400 	.word	0x40020400
 8002180:	200005a0 	.word	0x200005a0
 8002184:	40026040 	.word	0x40026040
 8002188:	20000600 	.word	0x20000600
 800218c:	400260b8 	.word	0x400260b8

08002190 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002196:	f001 fbdf 	bl	8003958 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800219a:	f000 fa5d 	bl	8002658 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	// Odblokowanie dostępu do backupu (dla RTC)
	HAL_PWR_EnableBkUpAccess();
 800219e:	f002 ff25 	bl	8004fec <HAL_PWR_EnableBkUpAccess>

	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021b0:	2302      	movs	r3, #2
 80021b2:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021b8:	613b      	str	r3, [r7, #16]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	4618      	mov	r0, r3
 80021be:	f003 fb81 	bl	80058c4 <HAL_RCCEx_PeriphCLKConfig>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80021c2:	f7ff facd 	bl	8001760 <MX_GPIO_Init>
	MX_DMA_Init();
 80021c6:	f7ff fa85 	bl	80016d4 <MX_DMA_Init>
	MX_SPI1_Init();
 80021ca:	f000 ff83 	bl	80030d4 <MX_SPI1_Init>
	MX_TIM1_Init();
 80021ce:	f001 f8e9 	bl	80033a4 <MX_TIM1_Init>
	MX_RTC_Init();
 80021d2:	f000 fafb 	bl	80027cc <MX_RTC_Init>
	MX_I2C2_Init();
 80021d6:	f7ff feef 	bl	8001fb8 <MX_I2C2_Init>
	MX_ADC1_Init();
 80021da:	f7fe f973 	bl	80004c4 <MX_ADC1_Init>
	MX_TIM4_Init();
 80021de:	f001 f981 	bl	80034e4 <MX_TIM4_Init>
	MX_TIM5_Init();
 80021e2:	f001 f9d3 	bl	800358c <MX_TIM5_Init>
	MX_USART1_UART_Init();
 80021e6:	f001 fae7 	bl	80037b8 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	// Start PWM na TIM1, kanał 1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80021ea:	2100      	movs	r1, #0
 80021ec:	4899      	ldr	r0, [pc, #612]	@ (8002454 <main+0x2c4>)
 80021ee:	f004 fc25 	bl	8006a3c <HAL_TIM_PWM_Start>
	// Ustaw wypełnienie do połowy
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (htim1.Init.Period + 1) / 2);
 80021f2:	4b98      	ldr	r3, [pc, #608]	@ (8002454 <main+0x2c4>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	4b96      	ldr	r3, [pc, #600]	@ (8002454 <main+0x2c4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0852      	lsrs	r2, r2, #1
 80021fe:	635a      	str	r2, [r3, #52]	@ 0x34

	// Ustaw przykładową jasność z korekcją gamma
	SetPWMPercentGamma(30);
 8002200:	201e      	movs	r0, #30
 8002202:	f7ff f86d 	bl	80012e0 <SetPWMPercentGamma>

	// Wyczyść strukturę zegara i wyślij do rejestrów
	ClearClockBits(&clockReg);
 8002206:	4894      	ldr	r0, [pc, #592]	@ (8002458 <main+0x2c8>)
 8002208:	f7fe fc72 	bl	8000af0 <ClearClockBits>
	UpdateAllDisplays(&clockReg);
 800220c:	4892      	ldr	r0, [pc, #584]	@ (8002458 <main+0x2c8>)
 800220e:	f7ff f823 	bl	8001258 <UpdateAllDisplays>
	SLIDER_Init();
 8002212:	f000 fcd3 	bl	8002bbc <SLIDER_Init>
	// Ustaw czas RTC (przykładowo)
	//Set_RTC_Time();
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8002216:	213c      	movs	r1, #60	@ 0x3c
 8002218:	4890      	ldr	r0, [pc, #576]	@ (800245c <main+0x2cc>)
 800221a:	f004 fd65 	bl	8006ce8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 800221e:	4890      	ldr	r0, [pc, #576]	@ (8002460 <main+0x2d0>)
 8002220:	f004 fb50 	bl	80068c4 <HAL_TIM_Base_Start_IT>
	GPS_Init();
 8002224:	f7ff fcec 	bl	8001c00 <GPS_Init>
	if (HAL_UART_Receive_DMA(&huart1, gps_dma_buffer, GPS_DMA_BUFFER_SIZE)
 8002228:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800222c:	498d      	ldr	r1, [pc, #564]	@ (8002464 <main+0x2d4>)
 800222e:	488e      	ldr	r0, [pc, #568]	@ (8002468 <main+0x2d8>)
 8002230:	f005 fc9c 	bl	8007b6c <HAL_UART_Receive_DMA>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <main+0xae>
			!= HAL_OK) {
		Error_Handler();
 800223a:	f000 fac1 	bl	80027c0 <Error_Handler>
	}

	// Rejestracja callbacków
	Button_RegisterPressCallback(0, Button1_Pressed);
 800223e:	498b      	ldr	r1, [pc, #556]	@ (800246c <main+0x2dc>)
 8002240:	2000      	movs	r0, #0
 8002242:	f7fe f9d5 	bl	80005f0 <Button_RegisterPressCallback>
	Button_RegisterDoubleClickCallback(0, Button1_DoubleClicked);
 8002246:	498a      	ldr	r1, [pc, #552]	@ (8002470 <main+0x2e0>)
 8002248:	2000      	movs	r0, #0
 800224a:	f7fe fa09 	bl	8000660 <Button_RegisterDoubleClickCallback>
	Button_RegisterHoldCallback(0, Button1_Held);
 800224e:	4989      	ldr	r1, [pc, #548]	@ (8002474 <main+0x2e4>)
 8002250:	2000      	movs	r0, #0
 8002252:	f7fe f9e9 	bl	8000628 <Button_RegisterHoldCallback>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// Odczytaj aktualny czas z RTC
		GPS_ProcessBuffer();
 8002256:	f7ff fc3d 	bl	8001ad4 <GPS_ProcessBuffer>
		Get_RTC_Time();
 800225a:	f000 fa5d 	bl	8002718 <Get_RTC_Time>

		// Sekundnik – zapal diody od 0 do sTime.Seconds
		//SetSecondLedAccumulating2(&clockReg, sTime.Seconds);
		if (encoderValue == 0) {
 800225e:	4b86      	ldr	r3, [pc, #536]	@ (8002478 <main+0x2e8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d125      	bne.n	80022b2 <main+0x122>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 8002266:	4b85      	ldr	r3, [pc, #532]	@ (800247c <main+0x2ec>)
 8002268:	789b      	ldrb	r3, [r3, #2]
 800226a:	4a84      	ldr	r2, [pc, #528]	@ (800247c <main+0x2ec>)
 800226c:	7852      	ldrb	r2, [r2, #1]
 800226e:	4619      	mov	r1, r3
 8002270:	4879      	ldr	r0, [pc, #484]	@ (8002458 <main+0x2c8>)
 8002272:	f7ff f861 	bl	8001338 <SetSecondLedEvenOdd>
			SetHourRingCustom(&clockReg, 1, 1);
 8002276:	2201      	movs	r2, #1
 8002278:	2101      	movs	r1, #1
 800227a:	4877      	ldr	r0, [pc, #476]	@ (8002458 <main+0x2c8>)
 800227c:	f7ff f9a0 	bl	80015c0 <SetHourRingCustom>
			colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 8002280:	4b7f      	ldr	r3, [pc, #508]	@ (8002480 <main+0x2f0>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <main+0x106>
 800228a:	2201      	movs	r2, #1
 800228c:	2101      	movs	r1, #1
 800228e:	4872      	ldr	r0, [pc, #456]	@ (8002458 <main+0x2c8>)
 8002290:	f7ff f964 	bl	800155c <SetDots>
 8002294:	e004      	b.n	80022a0 <main+0x110>
 8002296:	2200      	movs	r2, #0
 8002298:	2100      	movs	r1, #0
 800229a:	486f      	ldr	r0, [pc, #444]	@ (8002458 <main+0x2c8>)
 800229c:	f7ff f95e 	bl	800155c <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 80022a0:	4b76      	ldr	r3, [pc, #472]	@ (800247c <main+0x2ec>)
 80022a2:	7819      	ldrb	r1, [r3, #0]
 80022a4:	4b75      	ldr	r3, [pc, #468]	@ (800247c <main+0x2ec>)
 80022a6:	785a      	ldrb	r2, [r3, #1]
 80022a8:	4b74      	ldr	r3, [pc, #464]	@ (800247c <main+0x2ec>)
 80022aa:	789b      	ldrb	r3, [r3, #2]
 80022ac:	486a      	ldr	r0, [pc, #424]	@ (8002458 <main+0x2c8>)
 80022ae:	f7fe fdd3 	bl	8000e58 <SetTime7Seg_Top>
					sTime.Seconds);
		}

		if (encoderValue == 1) {
 80022b2:	4b71      	ldr	r3, [pc, #452]	@ (8002478 <main+0x2e8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d125      	bne.n	8002306 <main+0x176>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 80022ba:	4b70      	ldr	r3, [pc, #448]	@ (800247c <main+0x2ec>)
 80022bc:	789b      	ldrb	r3, [r3, #2]
 80022be:	4a6f      	ldr	r2, [pc, #444]	@ (800247c <main+0x2ec>)
 80022c0:	7852      	ldrb	r2, [r2, #1]
 80022c2:	4619      	mov	r1, r3
 80022c4:	4864      	ldr	r0, [pc, #400]	@ (8002458 <main+0x2c8>)
 80022c6:	f7ff f837 	bl	8001338 <SetSecondLedEvenOdd>
			SetHourRingCustom(&clockReg, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	4862      	ldr	r0, [pc, #392]	@ (8002458 <main+0x2c8>)
 80022d0:	f7ff f976 	bl	80015c0 <SetHourRingCustom>
			colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 80022d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002480 <main+0x2f0>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <main+0x15a>
 80022de:	2201      	movs	r2, #1
 80022e0:	2101      	movs	r1, #1
 80022e2:	485d      	ldr	r0, [pc, #372]	@ (8002458 <main+0x2c8>)
 80022e4:	f7ff f93a 	bl	800155c <SetDots>
 80022e8:	e004      	b.n	80022f4 <main+0x164>
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	485a      	ldr	r0, [pc, #360]	@ (8002458 <main+0x2c8>)
 80022f0:	f7ff f934 	bl	800155c <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 80022f4:	4b61      	ldr	r3, [pc, #388]	@ (800247c <main+0x2ec>)
 80022f6:	7819      	ldrb	r1, [r3, #0]
 80022f8:	4b60      	ldr	r3, [pc, #384]	@ (800247c <main+0x2ec>)
 80022fa:	785a      	ldrb	r2, [r3, #1]
 80022fc:	4b5f      	ldr	r3, [pc, #380]	@ (800247c <main+0x2ec>)
 80022fe:	789b      	ldrb	r3, [r3, #2]
 8002300:	4855      	ldr	r0, [pc, #340]	@ (8002458 <main+0x2c8>)
 8002302:	f7fe fda9 	bl	8000e58 <SetTime7Seg_Top>
					sTime.Seconds);
		}
		if (encoderValue == 2) {
 8002306:	4b5c      	ldr	r3, [pc, #368]	@ (8002478 <main+0x2e8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d130      	bne.n	8002370 <main+0x1e0>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 800230e:	4b5b      	ldr	r3, [pc, #364]	@ (800247c <main+0x2ec>)
 8002310:	789b      	ldrb	r3, [r3, #2]
 8002312:	4a5a      	ldr	r2, [pc, #360]	@ (800247c <main+0x2ec>)
 8002314:	7852      	ldrb	r2, [r2, #1]
 8002316:	4619      	mov	r1, r3
 8002318:	484f      	ldr	r0, [pc, #316]	@ (8002458 <main+0x2c8>)
 800231a:	f7ff f80d 	bl	8001338 <SetSecondLedEvenOdd>
			colon ? SetHourRingCustom(&clockReg, 1, 0) : SetHourRingCustom(
 800231e:	4b58      	ldr	r3, [pc, #352]	@ (8002480 <main+0x2f0>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <main+0x1a4>
 8002328:	2200      	movs	r2, #0
 800232a:	2101      	movs	r1, #1
 800232c:	484a      	ldr	r0, [pc, #296]	@ (8002458 <main+0x2c8>)
 800232e:	f7ff f947 	bl	80015c0 <SetHourRingCustom>
 8002332:	e004      	b.n	800233e <main+0x1ae>
 8002334:	2201      	movs	r2, #1
 8002336:	2100      	movs	r1, #0
 8002338:	4847      	ldr	r0, [pc, #284]	@ (8002458 <main+0x2c8>)
 800233a:	f7ff f941 	bl	80015c0 <SetHourRingCustom>
							&clockReg, 0, 1);
			colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 800233e:	4b50      	ldr	r3, [pc, #320]	@ (8002480 <main+0x2f0>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <main+0x1c4>
 8002348:	2201      	movs	r2, #1
 800234a:	2101      	movs	r1, #1
 800234c:	4842      	ldr	r0, [pc, #264]	@ (8002458 <main+0x2c8>)
 800234e:	f7ff f905 	bl	800155c <SetDots>
 8002352:	e004      	b.n	800235e <main+0x1ce>
 8002354:	2200      	movs	r2, #0
 8002356:	2100      	movs	r1, #0
 8002358:	483f      	ldr	r0, [pc, #252]	@ (8002458 <main+0x2c8>)
 800235a:	f7ff f8ff 	bl	800155c <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 800235e:	4b47      	ldr	r3, [pc, #284]	@ (800247c <main+0x2ec>)
 8002360:	7819      	ldrb	r1, [r3, #0]
 8002362:	4b46      	ldr	r3, [pc, #280]	@ (800247c <main+0x2ec>)
 8002364:	785a      	ldrb	r2, [r3, #1]
 8002366:	4b45      	ldr	r3, [pc, #276]	@ (800247c <main+0x2ec>)
 8002368:	789b      	ldrb	r3, [r3, #2]
 800236a:	483b      	ldr	r0, [pc, #236]	@ (8002458 <main+0x2c8>)
 800236c:	f7fe fd74 	bl	8000e58 <SetTime7Seg_Top>
					sTime.Seconds);
		}

		if (encoderValue == 3) {
 8002370:	4b41      	ldr	r3, [pc, #260]	@ (8002478 <main+0x2e8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d127      	bne.n	80023c8 <main+0x238>
			SetSecondLedEvenOdd(&clockReg, sTime.Seconds, sTime.Minutes);
 8002378:	4b40      	ldr	r3, [pc, #256]	@ (800247c <main+0x2ec>)
 800237a:	789b      	ldrb	r3, [r3, #2]
 800237c:	4a3f      	ldr	r2, [pc, #252]	@ (800247c <main+0x2ec>)
 800237e:	7852      	ldrb	r2, [r2, #1]
 8002380:	4619      	mov	r1, r3
 8002382:	4835      	ldr	r0, [pc, #212]	@ (8002458 <main+0x2c8>)
 8002384:	f7fe ffd8 	bl	8001338 <SetSecondLedEvenOdd>
			SetHourRing(&clockReg, sTime.Hours, 1, 1);
 8002388:	4b3c      	ldr	r3, [pc, #240]	@ (800247c <main+0x2ec>)
 800238a:	7819      	ldrb	r1, [r3, #0]
 800238c:	2301      	movs	r3, #1
 800238e:	2201      	movs	r2, #1
 8002390:	4831      	ldr	r0, [pc, #196]	@ (8002458 <main+0x2c8>)
 8002392:	f7fe fcfb 	bl	8000d8c <SetHourRing>
			colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 8002396:	4b3a      	ldr	r3, [pc, #232]	@ (8002480 <main+0x2f0>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <main+0x21c>
 80023a0:	2201      	movs	r2, #1
 80023a2:	2101      	movs	r1, #1
 80023a4:	482c      	ldr	r0, [pc, #176]	@ (8002458 <main+0x2c8>)
 80023a6:	f7ff f8d9 	bl	800155c <SetDots>
 80023aa:	e004      	b.n	80023b6 <main+0x226>
 80023ac:	2200      	movs	r2, #0
 80023ae:	2100      	movs	r1, #0
 80023b0:	4829      	ldr	r0, [pc, #164]	@ (8002458 <main+0x2c8>)
 80023b2:	f7ff f8d3 	bl	800155c <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 80023b6:	4b31      	ldr	r3, [pc, #196]	@ (800247c <main+0x2ec>)
 80023b8:	7819      	ldrb	r1, [r3, #0]
 80023ba:	4b30      	ldr	r3, [pc, #192]	@ (800247c <main+0x2ec>)
 80023bc:	785a      	ldrb	r2, [r3, #1]
 80023be:	4b2f      	ldr	r3, [pc, #188]	@ (800247c <main+0x2ec>)
 80023c0:	789b      	ldrb	r3, [r3, #2]
 80023c2:	4825      	ldr	r0, [pc, #148]	@ (8002458 <main+0x2c8>)
 80023c4:	f7fe fd48 	bl	8000e58 <SetTime7Seg_Top>
					sTime.Seconds);
		}

		if (encoderValue == 4) {
 80023c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002478 <main+0x2e8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d125      	bne.n	800241c <main+0x28c>
			SetSecondLedSingle(&clockReg, sTime.Seconds);
 80023d0:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <main+0x2ec>)
 80023d2:	789b      	ldrb	r3, [r3, #2]
 80023d4:	4619      	mov	r1, r3
 80023d6:	4820      	ldr	r0, [pc, #128]	@ (8002458 <main+0x2c8>)
 80023d8:	f7fe fb97 	bl	8000b0a <SetSecondLedSingle>
			SetHourRing(&clockReg, sTime.Hours, 1, 1);
 80023dc:	4b27      	ldr	r3, [pc, #156]	@ (800247c <main+0x2ec>)
 80023de:	7819      	ldrb	r1, [r3, #0]
 80023e0:	2301      	movs	r3, #1
 80023e2:	2201      	movs	r2, #1
 80023e4:	481c      	ldr	r0, [pc, #112]	@ (8002458 <main+0x2c8>)
 80023e6:	f7fe fcd1 	bl	8000d8c <SetHourRing>
			colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 80023ea:	4b25      	ldr	r3, [pc, #148]	@ (8002480 <main+0x2f0>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <main+0x270>
 80023f4:	2201      	movs	r2, #1
 80023f6:	2101      	movs	r1, #1
 80023f8:	4817      	ldr	r0, [pc, #92]	@ (8002458 <main+0x2c8>)
 80023fa:	f7ff f8af 	bl	800155c <SetDots>
 80023fe:	e004      	b.n	800240a <main+0x27a>
 8002400:	2200      	movs	r2, #0
 8002402:	2100      	movs	r1, #0
 8002404:	4814      	ldr	r0, [pc, #80]	@ (8002458 <main+0x2c8>)
 8002406:	f7ff f8a9 	bl	800155c <SetDots>
			SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 800240a:	4b1c      	ldr	r3, [pc, #112]	@ (800247c <main+0x2ec>)
 800240c:	7819      	ldrb	r1, [r3, #0]
 800240e:	4b1b      	ldr	r3, [pc, #108]	@ (800247c <main+0x2ec>)
 8002410:	785a      	ldrb	r2, [r3, #1]
 8002412:	4b1a      	ldr	r3, [pc, #104]	@ (800247c <main+0x2ec>)
 8002414:	789b      	ldrb	r3, [r3, #2]
 8002416:	4810      	ldr	r0, [pc, #64]	@ (8002458 <main+0x2c8>)
 8002418:	f7fe fd1e 	bl	8000e58 <SetTime7Seg_Top>
					sTime.Seconds);
		}

		if (encoderValue == 5) {
 800241c:	4b16      	ldr	r3, [pc, #88]	@ (8002478 <main+0x2e8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b05      	cmp	r3, #5
 8002422:	d137      	bne.n	8002494 <main+0x304>
			SetSecondLedSingle(&clockReg, sTime.Minutes);
 8002424:	4b15      	ldr	r3, [pc, #84]	@ (800247c <main+0x2ec>)
 8002426:	785b      	ldrb	r3, [r3, #1]
 8002428:	4619      	mov	r1, r3
 800242a:	480b      	ldr	r0, [pc, #44]	@ (8002458 <main+0x2c8>)
 800242c:	f7fe fb6d 	bl	8000b0a <SetSecondLedSingle>
			SetHourRing(&clockReg, sTime.Hours, 1, 1);
 8002430:	4b12      	ldr	r3, [pc, #72]	@ (800247c <main+0x2ec>)
 8002432:	7819      	ldrb	r1, [r3, #0]
 8002434:	2301      	movs	r3, #1
 8002436:	2201      	movs	r2, #1
 8002438:	4807      	ldr	r0, [pc, #28]	@ (8002458 <main+0x2c8>)
 800243a:	f7fe fca7 	bl	8000d8c <SetHourRing>
			colon ? SetDots(&clockReg, 0, 1) : SetDots(&clockReg, 0, 0);
 800243e:	4b10      	ldr	r3, [pc, #64]	@ (8002480 <main+0x2f0>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d01d      	beq.n	8002484 <main+0x2f4>
 8002448:	2201      	movs	r2, #1
 800244a:	2100      	movs	r1, #0
 800244c:	4802      	ldr	r0, [pc, #8]	@ (8002458 <main+0x2c8>)
 800244e:	f7ff f885 	bl	800155c <SetDots>
 8002452:	e01c      	b.n	800248e <main+0x2fe>
 8002454:	2000079c 	.word	0x2000079c
 8002458:	20000680 	.word	0x20000680
 800245c:	200007e4 	.word	0x200007e4
 8002460:	2000082c 	.word	0x2000082c
 8002464:	200000c0 	.word	0x200000c0
 8002468:	20000874 	.word	0x20000874
 800246c:	0800278d 	.word	0x0800278d
 8002470:	080027a5 	.word	0x080027a5
 8002474:	080027b3 	.word	0x080027b3
 8002478:	20000678 	.word	0x20000678
 800247c:	20000660 	.word	0x20000660
 8002480:	200000bd 	.word	0x200000bd
 8002484:	2200      	movs	r2, #0
 8002486:	2100      	movs	r1, #0
 8002488:	486e      	ldr	r0, [pc, #440]	@ (8002644 <main+0x4b4>)
 800248a:	f7ff f867 	bl	800155c <SetDots>
			SetTime7Seg_Void(&clockReg);
 800248e:	486d      	ldr	r0, [pc, #436]	@ (8002644 <main+0x4b4>)
 8002490:	f7fe fe1c 	bl	80010cc <SetTime7Seg_Void>
		}
		if (encoderValue == 6) {
 8002494:	4b6c      	ldr	r3, [pc, #432]	@ (8002648 <main+0x4b8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b06      	cmp	r3, #6
 800249a:	d121      	bne.n	80024e0 <main+0x350>
			SetSecondLedSingle(&clockReg, sTime.Minutes);
 800249c:	4b6b      	ldr	r3, [pc, #428]	@ (800264c <main+0x4bc>)
 800249e:	785b      	ldrb	r3, [r3, #1]
 80024a0:	4619      	mov	r1, r3
 80024a2:	4868      	ldr	r0, [pc, #416]	@ (8002644 <main+0x4b4>)
 80024a4:	f7fe fb31 	bl	8000b0a <SetSecondLedSingle>
			SetDots(&clockReg, 0, 0);
 80024a8:	2200      	movs	r2, #0
 80024aa:	2100      	movs	r1, #0
 80024ac:	4865      	ldr	r0, [pc, #404]	@ (8002644 <main+0x4b4>)
 80024ae:	f7ff f855 	bl	800155c <SetDots>
			colon ? SetHourRing(&clockReg, sTime.Hours, 1, 0) : SetHourRing(&clockReg, sTime.Hours, 0, 1);;
 80024b2:	4b67      	ldr	r3, [pc, #412]	@ (8002650 <main+0x4c0>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <main+0x33c>
 80024bc:	4b63      	ldr	r3, [pc, #396]	@ (800264c <main+0x4bc>)
 80024be:	7819      	ldrb	r1, [r3, #0]
 80024c0:	2300      	movs	r3, #0
 80024c2:	2201      	movs	r2, #1
 80024c4:	485f      	ldr	r0, [pc, #380]	@ (8002644 <main+0x4b4>)
 80024c6:	f7fe fc61 	bl	8000d8c <SetHourRing>
 80024ca:	e006      	b.n	80024da <main+0x34a>
 80024cc:	4b5f      	ldr	r3, [pc, #380]	@ (800264c <main+0x4bc>)
 80024ce:	7819      	ldrb	r1, [r3, #0]
 80024d0:	2301      	movs	r3, #1
 80024d2:	2200      	movs	r2, #0
 80024d4:	485b      	ldr	r0, [pc, #364]	@ (8002644 <main+0x4b4>)
 80024d6:	f7fe fc59 	bl	8000d8c <SetHourRing>
			SetTime7Seg_Void(&clockReg);
 80024da:	485a      	ldr	r0, [pc, #360]	@ (8002644 <main+0x4b4>)
 80024dc:	f7fe fdf6 	bl	80010cc <SetTime7Seg_Void>
		}
		if (encoderValue == 7) {
 80024e0:	4b59      	ldr	r3, [pc, #356]	@ (8002648 <main+0x4b8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b07      	cmp	r3, #7
 80024e6:	d123      	bne.n	8002530 <main+0x3a0>
			SetSecondLedAccumulating(&clockReg, sTime.Seconds);
 80024e8:	4b58      	ldr	r3, [pc, #352]	@ (800264c <main+0x4bc>)
 80024ea:	789b      	ldrb	r3, [r3, #2]
 80024ec:	4619      	mov	r1, r3
 80024ee:	4855      	ldr	r0, [pc, #340]	@ (8002644 <main+0x4b4>)
 80024f0:	f7fe fb65 	bl	8000bbe <SetSecondLedAccumulating>
			SetHourRingCustom(&clockReg, 2, 2);
 80024f4:	2202      	movs	r2, #2
 80024f6:	2102      	movs	r1, #2
 80024f8:	4852      	ldr	r0, [pc, #328]	@ (8002644 <main+0x4b4>)
 80024fa:	f7ff f861 	bl	80015c0 <SetHourRingCustom>
					colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 80024fe:	4b54      	ldr	r3, [pc, #336]	@ (8002650 <main+0x4c0>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <main+0x384>
 8002508:	2201      	movs	r2, #1
 800250a:	2101      	movs	r1, #1
 800250c:	484d      	ldr	r0, [pc, #308]	@ (8002644 <main+0x4b4>)
 800250e:	f7ff f825 	bl	800155c <SetDots>
 8002512:	e004      	b.n	800251e <main+0x38e>
 8002514:	2200      	movs	r2, #0
 8002516:	2100      	movs	r1, #0
 8002518:	484a      	ldr	r0, [pc, #296]	@ (8002644 <main+0x4b4>)
 800251a:	f7ff f81f 	bl	800155c <SetDots>
					SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 800251e:	4b4b      	ldr	r3, [pc, #300]	@ (800264c <main+0x4bc>)
 8002520:	7819      	ldrb	r1, [r3, #0]
 8002522:	4b4a      	ldr	r3, [pc, #296]	@ (800264c <main+0x4bc>)
 8002524:	785a      	ldrb	r2, [r3, #1]
 8002526:	4b49      	ldr	r3, [pc, #292]	@ (800264c <main+0x4bc>)
 8002528:	789b      	ldrb	r3, [r3, #2]
 800252a:	4846      	ldr	r0, [pc, #280]	@ (8002644 <main+0x4b4>)
 800252c:	f7fe fc94 	bl	8000e58 <SetTime7Seg_Top>
							sTime.Seconds);
				}

		if (encoderValue == 8) {
 8002530:	4b45      	ldr	r3, [pc, #276]	@ (8002648 <main+0x4b8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b08      	cmp	r3, #8
 8002536:	d123      	bne.n	8002580 <main+0x3f0>
					SetSecondLedAccumulating(&clockReg, sTime.Seconds);
 8002538:	4b44      	ldr	r3, [pc, #272]	@ (800264c <main+0x4bc>)
 800253a:	789b      	ldrb	r3, [r3, #2]
 800253c:	4619      	mov	r1, r3
 800253e:	4841      	ldr	r0, [pc, #260]	@ (8002644 <main+0x4b4>)
 8002540:	f7fe fb3d 	bl	8000bbe <SetSecondLedAccumulating>
					SetHourRingCustom(&clockReg, 1, 2);
 8002544:	2202      	movs	r2, #2
 8002546:	2101      	movs	r1, #1
 8002548:	483e      	ldr	r0, [pc, #248]	@ (8002644 <main+0x4b4>)
 800254a:	f7ff f839 	bl	80015c0 <SetHourRingCustom>
							colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 800254e:	4b40      	ldr	r3, [pc, #256]	@ (8002650 <main+0x4c0>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <main+0x3d4>
 8002558:	2201      	movs	r2, #1
 800255a:	2101      	movs	r1, #1
 800255c:	4839      	ldr	r0, [pc, #228]	@ (8002644 <main+0x4b4>)
 800255e:	f7fe fffd 	bl	800155c <SetDots>
 8002562:	e004      	b.n	800256e <main+0x3de>
 8002564:	2200      	movs	r2, #0
 8002566:	2100      	movs	r1, #0
 8002568:	4836      	ldr	r0, [pc, #216]	@ (8002644 <main+0x4b4>)
 800256a:	f7fe fff7 	bl	800155c <SetDots>
							SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 800256e:	4b37      	ldr	r3, [pc, #220]	@ (800264c <main+0x4bc>)
 8002570:	7819      	ldrb	r1, [r3, #0]
 8002572:	4b36      	ldr	r3, [pc, #216]	@ (800264c <main+0x4bc>)
 8002574:	785a      	ldrb	r2, [r3, #1]
 8002576:	4b35      	ldr	r3, [pc, #212]	@ (800264c <main+0x4bc>)
 8002578:	789b      	ldrb	r3, [r3, #2]
 800257a:	4832      	ldr	r0, [pc, #200]	@ (8002644 <main+0x4b4>)
 800257c:	f7fe fc6c 	bl	8000e58 <SetTime7Seg_Top>
									sTime.Seconds);
						}
		if (encoderValue == 9) {
 8002580:	4b31      	ldr	r3, [pc, #196]	@ (8002648 <main+0x4b8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b09      	cmp	r3, #9
 8002586:	d123      	bne.n	80025d0 <main+0x440>
							SetSecondLedAccumulating(&clockReg, sTime.Seconds);
 8002588:	4b30      	ldr	r3, [pc, #192]	@ (800264c <main+0x4bc>)
 800258a:	789b      	ldrb	r3, [r3, #2]
 800258c:	4619      	mov	r1, r3
 800258e:	482d      	ldr	r0, [pc, #180]	@ (8002644 <main+0x4b4>)
 8002590:	f7fe fb15 	bl	8000bbe <SetSecondLedAccumulating>
							SetHourRingCustom(&clockReg, 2, 1);
 8002594:	2201      	movs	r2, #1
 8002596:	2102      	movs	r1, #2
 8002598:	482a      	ldr	r0, [pc, #168]	@ (8002644 <main+0x4b4>)
 800259a:	f7ff f811 	bl	80015c0 <SetHourRingCustom>
									colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 800259e:	4b2c      	ldr	r3, [pc, #176]	@ (8002650 <main+0x4c0>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <main+0x424>
 80025a8:	2201      	movs	r2, #1
 80025aa:	2101      	movs	r1, #1
 80025ac:	4825      	ldr	r0, [pc, #148]	@ (8002644 <main+0x4b4>)
 80025ae:	f7fe ffd5 	bl	800155c <SetDots>
 80025b2:	e004      	b.n	80025be <main+0x42e>
 80025b4:	2200      	movs	r2, #0
 80025b6:	2100      	movs	r1, #0
 80025b8:	4822      	ldr	r0, [pc, #136]	@ (8002644 <main+0x4b4>)
 80025ba:	f7fe ffcf 	bl	800155c <SetDots>
									SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 80025be:	4b23      	ldr	r3, [pc, #140]	@ (800264c <main+0x4bc>)
 80025c0:	7819      	ldrb	r1, [r3, #0]
 80025c2:	4b22      	ldr	r3, [pc, #136]	@ (800264c <main+0x4bc>)
 80025c4:	785a      	ldrb	r2, [r3, #1]
 80025c6:	4b21      	ldr	r3, [pc, #132]	@ (800264c <main+0x4bc>)
 80025c8:	789b      	ldrb	r3, [r3, #2]
 80025ca:	481e      	ldr	r0, [pc, #120]	@ (8002644 <main+0x4b4>)
 80025cc:	f7fe fc44 	bl	8000e58 <SetTime7Seg_Top>
											sTime.Seconds);
								}
		if (encoderValue == 10) {
 80025d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002648 <main+0x4b8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b0a      	cmp	r3, #10
 80025d6:	d123      	bne.n	8002620 <main+0x490>
									SetSecondLedAccumulating2(&clockReg, sTime.Seconds);
 80025d8:	4b1c      	ldr	r3, [pc, #112]	@ (800264c <main+0x4bc>)
 80025da:	789b      	ldrb	r3, [r3, #2]
 80025dc:	4619      	mov	r1, r3
 80025de:	4819      	ldr	r0, [pc, #100]	@ (8002644 <main+0x4b4>)
 80025e0:	f7fe fb5d 	bl	8000c9e <SetSecondLedAccumulating2>
									SetHourRingCustom(&clockReg, 2, 2);
 80025e4:	2202      	movs	r2, #2
 80025e6:	2102      	movs	r1, #2
 80025e8:	4816      	ldr	r0, [pc, #88]	@ (8002644 <main+0x4b4>)
 80025ea:	f7fe ffe9 	bl	80015c0 <SetHourRingCustom>
											colon ? SetDots(&clockReg, 1, 1) : SetDots(&clockReg, 0, 0);
 80025ee:	4b18      	ldr	r3, [pc, #96]	@ (8002650 <main+0x4c0>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <main+0x474>
 80025f8:	2201      	movs	r2, #1
 80025fa:	2101      	movs	r1, #1
 80025fc:	4811      	ldr	r0, [pc, #68]	@ (8002644 <main+0x4b4>)
 80025fe:	f7fe ffad 	bl	800155c <SetDots>
 8002602:	e004      	b.n	800260e <main+0x47e>
 8002604:	2200      	movs	r2, #0
 8002606:	2100      	movs	r1, #0
 8002608:	480e      	ldr	r0, [pc, #56]	@ (8002644 <main+0x4b4>)
 800260a:	f7fe ffa7 	bl	800155c <SetDots>
											SetTime7Seg_Top(&clockReg, sTime.Hours, sTime.Minutes,
 800260e:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <main+0x4bc>)
 8002610:	7819      	ldrb	r1, [r3, #0]
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <main+0x4bc>)
 8002614:	785a      	ldrb	r2, [r3, #1]
 8002616:	4b0d      	ldr	r3, [pc, #52]	@ (800264c <main+0x4bc>)
 8002618:	789b      	ldrb	r3, [r3, #2]
 800261a:	480a      	ldr	r0, [pc, #40]	@ (8002644 <main+0x4b4>)
 800261c:	f7fe fc1c 	bl	8000e58 <SetTime7Seg_Top>

		// Dla przykładu – dolny wyświetlacz: stała wartość
		//SetTime7Seg(&clockReg, 0, encoderValue, 3, false);

		// Aktualizuj rejestry
		UpdateAllDisplays(&clockReg);
 8002620:	4808      	ldr	r0, [pc, #32]	@ (8002644 <main+0x4b4>)
 8002622:	f7fe fe19 	bl	8001258 <UpdateAllDisplays>

		// Opóźnij (np. 100 ms)
		// Rozpoczęcie konwersji ADC
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 8002626:	480b      	ldr	r0, [pc, #44]	@ (8002654 <main+0x4c4>)
 8002628:	f001 fa70 	bl	8003b0c <HAL_ADC_Start>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <main+0x4a6>
			Error_Handler();
 8002632:	f000 f8c5 	bl	80027c0 <Error_Handler>
		}
		Button_Process();
 8002636:	f7fe f82f 	bl	8000698 <Button_Process>
		HAL_Delay(10);
 800263a:	200a      	movs	r0, #10
 800263c:	f001 f9fe 	bl	8003a3c <HAL_Delay>
		GPS_ProcessBuffer();
 8002640:	e609      	b.n	8002256 <main+0xc6>
 8002642:	bf00      	nop
 8002644:	20000680 	.word	0x20000680
 8002648:	20000678 	.word	0x20000678
 800264c:	20000660 	.word	0x20000660
 8002650:	200000bd 	.word	0x200000bd
 8002654:	20000058 	.word	0x20000058

08002658 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b094      	sub	sp, #80	@ 0x50
 800265c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800265e:	f107 0320 	add.w	r3, r7, #32
 8002662:	2230      	movs	r2, #48	@ 0x30
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f005 ff68 	bl	800853c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800266c:	f107 030c 	add.w	r3, r7, #12
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800267c:	2300      	movs	r3, #0
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	4b23      	ldr	r3, [pc, #140]	@ (8002710 <SystemClock_Config+0xb8>)
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	4a22      	ldr	r2, [pc, #136]	@ (8002710 <SystemClock_Config+0xb8>)
 8002686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800268a:	6413      	str	r3, [r2, #64]	@ 0x40
 800268c:	4b20      	ldr	r3, [pc, #128]	@ (8002710 <SystemClock_Config+0xb8>)
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002698:	2300      	movs	r3, #0
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	4b1d      	ldr	r3, [pc, #116]	@ (8002714 <SystemClock_Config+0xbc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80026a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002714 <SystemClock_Config+0xbc>)
 80026a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <SystemClock_Config+0xbc>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 80026b8:	2305      	movs	r3, #5
 80026ba:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026c0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80026c2:	2301      	movs	r3, #1
 80026c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80026ca:	f107 0320 	add.w	r3, r7, #32
 80026ce:	4618      	mov	r0, r3
 80026d0:	f002 fca0 	bl	8005014 <HAL_RCC_OscConfig>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <SystemClock_Config+0x86>
		Error_Handler();
 80026da:	f000 f871 	bl	80027c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80026de:	230f      	movs	r3, #15
 80026e0:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80026e2:	2301      	movs	r3, #1
 80026e4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80026f2:	f107 030c 	add.w	r3, r7, #12
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f002 ff03 	bl	8005504 <HAL_RCC_ClockConfig>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <SystemClock_Config+0xb0>
		Error_Handler();
 8002704:	f000 f85c 	bl	80027c0 <Error_Handler>
	}
}
 8002708:	bf00      	nop
 800270a:	3750      	adds	r7, #80	@ 0x50
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40023800 	.word	0x40023800
 8002714:	40007000 	.word	0x40007000

08002718 <Get_RTC_Time>:
}

/**
 * @brief Odczytuje bieżący czas z RTC.
 */
void Get_RTC_Time(void) {
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800271c:	2200      	movs	r2, #0
 800271e:	4905      	ldr	r1, [pc, #20]	@ (8002734 <Get_RTC_Time+0x1c>)
 8002720:	4805      	ldr	r0, [pc, #20]	@ (8002738 <Get_RTC_Time+0x20>)
 8002722:	f003 fada 	bl	8005cda <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002726:	2200      	movs	r2, #0
 8002728:	4904      	ldr	r1, [pc, #16]	@ (800273c <Get_RTC_Time+0x24>)
 800272a:	4803      	ldr	r0, [pc, #12]	@ (8002738 <Get_RTC_Time+0x20>)
 800272c:	f003 fbb7 	bl	8005e9e <HAL_RTC_GetDate>
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000660 	.word	0x20000660
 8002738:	20000698 	.word	0x20000698
 800273c:	20000674 	.word	0x20000674

08002740 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
// Sprawdź, czy źródłem przerwania jest TIM5
	if (htim->Instance == TIM4) {
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0d      	ldr	r2, [pc, #52]	@ (8002784 <HAL_TIM_IC_CaptureCallback+0x44>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d111      	bne.n	8002776 <HAL_TIM_IC_CaptureCallback+0x36>
		// (Opcjonalnie) sprawdź, z którego kanału przyszło wywołanie:
		// if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { ... }
		// albo if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) { ... }

		// Sprawdź kierunek (czy licznik zlicza w dół czy w górę):
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b10      	cmp	r3, #16
 800275e:	d105      	bne.n	800276c <HAL_TIM_IC_CaptureCallback+0x2c>
			// Liczymy w dół
			encoderValue--;
 8002760:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <HAL_TIM_IC_CaptureCallback+0x48>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3b01      	subs	r3, #1
 8002766:	4a08      	ldr	r2, [pc, #32]	@ (8002788 <HAL_TIM_IC_CaptureCallback+0x48>)
 8002768:	6013      	str	r3, [r2, #0]
		} else {
			// Liczymy w górę
			encoderValue++;
		}
	}
}
 800276a:	e004      	b.n	8002776 <HAL_TIM_IC_CaptureCallback+0x36>
			encoderValue++;
 800276c:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <HAL_TIM_IC_CaptureCallback+0x48>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3301      	adds	r3, #1
 8002772:	4a05      	ldr	r2, [pc, #20]	@ (8002788 <HAL_TIM_IC_CaptureCallback+0x48>)
 8002774:	6013      	str	r3, [r2, #0]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40000800 	.word	0x40000800
 8002788:	20000678 	.word	0x20000678

0800278c <Button1_Pressed>:

/* USER CODE BEGIN 0 */
void Button1_Pressed(void) {
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
	// Implementacja obsługi pojedynczego naciśnięcia przycisku
	SLIDER_SetString("HELLO", SCROLL_RIGHT_TO_LEFT, 10);
 8002790:	220a      	movs	r2, #10
 8002792:	2100      	movs	r1, #0
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <Button1_Pressed+0x14>)
 8002796:	f000 fa49 	bl	8002c2c <SLIDER_SetString>
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	08008618 	.word	0x08008618

080027a4 <Button1_DoubleClicked>:

void Button1_DoubleClicked(void) {
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
	// Implementacja obsługi dwukliku przycisku
	//DisplayScrollingText("Napis");
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <Button1_Held>:

void Button1_Held(void) {
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
	//DisplayScrollingText("Napis");
	// Implementacja obsługi przytrzymania przycisku
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027c4:	b672      	cpsid	i
}
 80027c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();
	while (1) {
 80027c8:	bf00      	nop
 80027ca:	e7fd      	b.n	80027c8 <Error_Handler+0x8>

080027cc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80027e0:	2300      	movs	r3, #0
 80027e2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80027e4:	4b24      	ldr	r3, [pc, #144]	@ (8002878 <MX_RTC_Init+0xac>)
 80027e6:	4a25      	ldr	r2, [pc, #148]	@ (800287c <MX_RTC_Init+0xb0>)
 80027e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80027ea:	4b23      	ldr	r3, [pc, #140]	@ (8002878 <MX_RTC_Init+0xac>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80027f0:	4b21      	ldr	r3, [pc, #132]	@ (8002878 <MX_RTC_Init+0xac>)
 80027f2:	227f      	movs	r2, #127	@ 0x7f
 80027f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80027f6:	4b20      	ldr	r3, [pc, #128]	@ (8002878 <MX_RTC_Init+0xac>)
 80027f8:	22ff      	movs	r2, #255	@ 0xff
 80027fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80027fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002878 <MX_RTC_Init+0xac>)
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002802:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <MX_RTC_Init+0xac>)
 8002804:	2200      	movs	r2, #0
 8002806:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <MX_RTC_Init+0xac>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800280e:	481a      	ldr	r0, [pc, #104]	@ (8002878 <MX_RTC_Init+0xac>)
 8002810:	f003 f946 	bl	8005aa0 <HAL_RTC_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800281a:	f7ff ffd1 	bl	80027c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800281e:	2300      	movs	r3, #0
 8002820:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002822:	2300      	movs	r3, #0
 8002824:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002826:	2300      	movs	r3, #0
 8002828:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	2201      	movs	r2, #1
 8002836:	4619      	mov	r1, r3
 8002838:	480f      	ldr	r0, [pc, #60]	@ (8002878 <MX_RTC_Init+0xac>)
 800283a:	f003 f9b4 	bl	8005ba6 <HAL_RTC_SetTime>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002844:	f7ff ffbc 	bl	80027c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002848:	2301      	movs	r3, #1
 800284a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800284c:	2301      	movs	r3, #1
 800284e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002850:	2301      	movs	r3, #1
 8002852:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002854:	2300      	movs	r3, #0
 8002856:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002858:	463b      	mov	r3, r7
 800285a:	2201      	movs	r2, #1
 800285c:	4619      	mov	r1, r3
 800285e:	4806      	ldr	r0, [pc, #24]	@ (8002878 <MX_RTC_Init+0xac>)
 8002860:	f003 fa99 	bl	8005d96 <HAL_RTC_SetDate>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800286a:	f7ff ffa9 	bl	80027c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800286e:	bf00      	nop
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000698 	.word	0x20000698
 800287c:	40002800 	.word	0x40002800

08002880 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0c      	ldr	r2, [pc, #48]	@ (80028d0 <HAL_RTC_MspInit+0x50>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d111      	bne.n	80028c6 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80028a2:	2302      	movs	r3, #2
 80028a4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80028a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028aa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ac:	f107 030c 	add.w	r3, r7, #12
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 f807 	bl	80058c4 <HAL_RCCEx_PeriphCLKConfig>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80028bc:	f7ff ff80 	bl	80027c0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80028c0:	4b04      	ldr	r3, [pc, #16]	@ (80028d4 <HAL_RTC_MspInit+0x54>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80028c6:	bf00      	nop
 80028c8:	3720      	adds	r7, #32
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40002800 	.word	0x40002800
 80028d4:	42470e3c 	.word	0x42470e3c

080028d8 <PrepareBuffer18>:
 *         [0..5] = puste, [6..11] = 6 znaków napisu, [12..17] = puste.
 *         Jeśli text ma mniej niż 6 znaków, dopełniamy pustymi;
 *         jeśli ma więcej, obcinamy do 6.
 */
static void PrepareBuffer18(const char* text)
{
 80028d8:	b590      	push	{r4, r7, lr}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
    // Wyczyść cały bufor
    memset(buffer, 0, sizeof(buffer));
 80028e0:	2212      	movs	r2, #18
 80028e2:	2100      	movs	r1, #0
 80028e4:	481a      	ldr	r0, [pc, #104]	@ (8002950 <PrepareBuffer18+0x78>)
 80028e6:	f005 fe29 	bl	800853c <memset>

    // Kopiujemy do tymczasowego stringa tylko 6 znaków
    char temp[7];
    strncpy(temp, text, 6);
 80028ea:	f107 030c 	add.w	r3, r7, #12
 80028ee:	2206      	movs	r2, #6
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f005 fe3c 	bl	8008570 <strncpy>
    temp[6] = '\0';   // na wszelki wypadek
 80028f8:	2300      	movs	r3, #0
 80028fa:	74bb      	strb	r3, [r7, #18]

    // 1) Pierwsze 6 = puste
    // (już jest 0 po memset, więc nic nie trzeba robić)

    // 2) Indeksy 6..11 = treść napisu
    for (int i = 0; i < 6; i++)
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	e01d      	b.n	800293e <PrepareBuffer18+0x66>
    {
        if (temp[i] == '\0') {
 8002902:	f107 020c 	add.w	r2, r7, #12
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	4413      	add	r3, r2
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d105      	bne.n	800291c <PrepareBuffer18+0x44>
            // Jak się skończył tekst => puste
            buffer[6 + i] = 0;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	3306      	adds	r3, #6
 8002914:	4a0e      	ldr	r2, [pc, #56]	@ (8002950 <PrepareBuffer18+0x78>)
 8002916:	2100      	movs	r1, #0
 8002918:	54d1      	strb	r1, [r2, r3]
 800291a:	e00d      	b.n	8002938 <PrepareBuffer18+0x60>
        }
        else {
            buffer[6 + i] = (uint8_t)charToSegment(temp[i]);
 800291c:	f107 020c 	add.w	r2, r7, #12
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	4413      	add	r3, r2
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	1d9c      	adds	r4, r3, #6
 800292a:	4610      	mov	r0, r2
 800292c:	f7fd ffd0 	bl	80008d0 <charToSegment>
 8002930:	4603      	mov	r3, r0
 8002932:	461a      	mov	r2, r3
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <PrepareBuffer18+0x78>)
 8002936:	551a      	strb	r2, [r3, r4]
    for (int i = 0; i < 6; i++)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	3301      	adds	r3, #1
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b05      	cmp	r3, #5
 8002942:	ddde      	ble.n	8002902 <PrepareBuffer18+0x2a>
        }
    }

    // 3) Ostatnie 6 (12..17) = puste
    // (znów, już jest 0 po memset)
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	371c      	adds	r7, #28
 800294a:	46bd      	mov	sp, r7
 800294c:	bd90      	pop	{r4, r7, pc}
 800294e:	bf00      	nop
 8002950:	200006b8 	.word	0x200006b8

08002954 <ShowWindow>:
 *
 *         Digit0 (najbardziej lewy) - wstawiamy w bity [47..40],
 *         Digit5 (najbardziej prawy) - w bity [7..0].
 */
static void ShowWindow(void)
{
 8002954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002958:	b09b      	sub	sp, #108	@ 0x6c
 800295a:	af00      	add	r7, sp, #0
    // Zabezpieczenie – jeśli windowIndex < 0 lub windowIndex+5 >= 18,
    // to niektóre odczyty będą poza [0..17], ale wtedy możemy dać 0 (puste).
    // Najprościej – brać "safe read".
    uint64_t val = 0ULL;
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    // digit0 (lewa pozycja wyświetlacza)
    uint8_t d0 = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (windowIndex + 0 >= 0 && windowIndex + 0 < TOTAL_LEN)
 800296e:	4b90      	ldr	r3, [pc, #576]	@ (8002bb0 <ShowWindow+0x25c>)
 8002970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db0c      	blt.n	8002992 <ShowWindow+0x3e>
 8002978:	4b8d      	ldr	r3, [pc, #564]	@ (8002bb0 <ShowWindow+0x25c>)
 800297a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800297e:	2b11      	cmp	r3, #17
 8002980:	dc07      	bgt.n	8002992 <ShowWindow+0x3e>
        d0 = buffer[windowIndex + 0];
 8002982:	4b8b      	ldr	r3, [pc, #556]	@ (8002bb0 <ShowWindow+0x25c>)
 8002984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002988:	461a      	mov	r2, r3
 800298a:	4b8a      	ldr	r3, [pc, #552]	@ (8002bb4 <ShowWindow+0x260>)
 800298c:	5c9b      	ldrb	r3, [r3, r2]
 800298e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

    // digit1
    uint8_t d1 = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
    if (windowIndex + 1 >= 0 && windowIndex + 1 < TOTAL_LEN)
 8002998:	4b85      	ldr	r3, [pc, #532]	@ (8002bb0 <ShowWindow+0x25c>)
 800299a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800299e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a2:	db0c      	blt.n	80029be <ShowWindow+0x6a>
 80029a4:	4b82      	ldr	r3, [pc, #520]	@ (8002bb0 <ShowWindow+0x25c>)
 80029a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029aa:	2b10      	cmp	r3, #16
 80029ac:	dc07      	bgt.n	80029be <ShowWindow+0x6a>
        d1 = buffer[windowIndex + 1];
 80029ae:	4b80      	ldr	r3, [pc, #512]	@ (8002bb0 <ShowWindow+0x25c>)
 80029b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	4b7f      	ldr	r3, [pc, #508]	@ (8002bb4 <ShowWindow+0x260>)
 80029b8:	5c9b      	ldrb	r3, [r3, r2]
 80029ba:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // digit2
    uint8_t d2 = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
    if (windowIndex + 2 >= 0 && windowIndex + 2 < TOTAL_LEN)
 80029c4:	4b7a      	ldr	r3, [pc, #488]	@ (8002bb0 <ShowWindow+0x25c>)
 80029c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ca:	f113 0f02 	cmn.w	r3, #2
 80029ce:	db0c      	blt.n	80029ea <ShowWindow+0x96>
 80029d0:	4b77      	ldr	r3, [pc, #476]	@ (8002bb0 <ShowWindow+0x25c>)
 80029d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d6:	2b0f      	cmp	r3, #15
 80029d8:	dc07      	bgt.n	80029ea <ShowWindow+0x96>
        d2 = buffer[windowIndex + 2];
 80029da:	4b75      	ldr	r3, [pc, #468]	@ (8002bb0 <ShowWindow+0x25c>)
 80029dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e0:	1c9a      	adds	r2, r3, #2
 80029e2:	4b74      	ldr	r3, [pc, #464]	@ (8002bb4 <ShowWindow+0x260>)
 80029e4:	5c9b      	ldrb	r3, [r3, r2]
 80029e6:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

    // digit3
    uint8_t d3 = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
    if (windowIndex + 3 >= 0 && windowIndex + 3 < TOTAL_LEN)
 80029f0:	4b6f      	ldr	r3, [pc, #444]	@ (8002bb0 <ShowWindow+0x25c>)
 80029f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f6:	f113 0f03 	cmn.w	r3, #3
 80029fa:	db0c      	blt.n	8002a16 <ShowWindow+0xc2>
 80029fc:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb0 <ShowWindow+0x25c>)
 80029fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a02:	2b0e      	cmp	r3, #14
 8002a04:	dc07      	bgt.n	8002a16 <ShowWindow+0xc2>
        d3 = buffer[windowIndex + 3];
 8002a06:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb0 <ShowWindow+0x25c>)
 8002a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a0c:	1cda      	adds	r2, r3, #3
 8002a0e:	4b69      	ldr	r3, [pc, #420]	@ (8002bb4 <ShowWindow+0x260>)
 8002a10:	5c9b      	ldrb	r3, [r3, r2]
 8002a12:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

    // digit4
    uint8_t d4 = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    if (windowIndex + 4 >= 0 && windowIndex + 4 < TOTAL_LEN)
 8002a1c:	4b64      	ldr	r3, [pc, #400]	@ (8002bb0 <ShowWindow+0x25c>)
 8002a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a22:	f113 0f04 	cmn.w	r3, #4
 8002a26:	db0c      	blt.n	8002a42 <ShowWindow+0xee>
 8002a28:	4b61      	ldr	r3, [pc, #388]	@ (8002bb0 <ShowWindow+0x25c>)
 8002a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a2e:	2b0d      	cmp	r3, #13
 8002a30:	dc07      	bgt.n	8002a42 <ShowWindow+0xee>
        d4 = buffer[windowIndex + 4];
 8002a32:	4b5f      	ldr	r3, [pc, #380]	@ (8002bb0 <ShowWindow+0x25c>)
 8002a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a38:	1d1a      	adds	r2, r3, #4
 8002a3a:	4b5e      	ldr	r3, [pc, #376]	@ (8002bb4 <ShowWindow+0x260>)
 8002a3c:	5c9b      	ldrb	r3, [r3, r2]
 8002a3e:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

    // digit5 (prawa pozycja wyświetlacza)
    uint8_t d5 = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
    if (windowIndex + 5 >= 0 && windowIndex + 5 < TOTAL_LEN)
 8002a48:	4b59      	ldr	r3, [pc, #356]	@ (8002bb0 <ShowWindow+0x25c>)
 8002a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a4e:	f113 0f05 	cmn.w	r3, #5
 8002a52:	db0c      	blt.n	8002a6e <ShowWindow+0x11a>
 8002a54:	4b56      	ldr	r3, [pc, #344]	@ (8002bb0 <ShowWindow+0x25c>)
 8002a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a5a:	2b0c      	cmp	r3, #12
 8002a5c:	dc07      	bgt.n	8002a6e <ShowWindow+0x11a>
        d5 = buffer[windowIndex + 5];
 8002a5e:	4b54      	ldr	r3, [pc, #336]	@ (8002bb0 <ShowWindow+0x25c>)
 8002a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a64:	1d5a      	adds	r2, r3, #5
 8002a66:	4b53      	ldr	r3, [pc, #332]	@ (8002bb4 <ShowWindow+0x260>)
 8002a68:	5c9b      	ldrb	r3, [r3, r2]
 8002a6a:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

    // Złóż do 48-bitów (digit0 w [47..40], digit1 w [39..32], ...)
    // UWAGA: digit0 to LEWA, digit5 to PRAWA
    val |= ((uint64_t)d5 << 40);
 8002a6e:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8002a72:	2200      	movs	r2, #0
 8002a74:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a76:	657a      	str	r2, [r7, #84]	@ 0x54
 8002a78:	f04f 0000 	mov.w	r0, #0
 8002a7c:	f04f 0100 	mov.w	r1, #0
 8002a80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a82:	0219      	lsls	r1, r3, #8
 8002a84:	2000      	movs	r0, #0
 8002a86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a8a:	ea42 0600 	orr.w	r6, r2, r0
 8002a8e:	62be      	str	r6, [r7, #40]	@ 0x28
 8002a90:	430b      	orrs	r3, r1
 8002a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a98:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    val |= ((uint64_t)d4 << 32);
 8002a9c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002aa4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002aa6:	f04f 0000 	mov.w	r0, #0
 8002aaa:	f04f 0100 	mov.w	r1, #0
 8002aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ab8:	ea42 0600 	orr.w	r6, r2, r0
 8002abc:	623e      	str	r6, [r7, #32]
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ac6:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    val |= ((uint64_t)d3 << 24);
 8002aca:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8002ace:	2200      	movs	r2, #0
 8002ad0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ad2:	647a      	str	r2, [r7, #68]	@ 0x44
 8002ad4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8002ad8:	460b      	mov	r3, r1
 8002ada:	0a1d      	lsrs	r5, r3, #8
 8002adc:	460b      	mov	r3, r1
 8002ade:	061c      	lsls	r4, r3, #24
 8002ae0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ae4:	ea42 0104 	orr.w	r1, r2, r4
 8002ae8:	61b9      	str	r1, [r7, #24]
 8002aea:	432b      	orrs	r3, r5
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002af2:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d2 << 16);
 8002af6:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8002afa:	2200      	movs	r2, #0
 8002afc:	4698      	mov	r8, r3
 8002afe:	4691      	mov	r9, r2
 8002b00:	f04f 0000 	mov.w	r0, #0
 8002b04:	f04f 0100 	mov.w	r1, #0
 8002b08:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8002b0c:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8002b10:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8002b14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b18:	ea42 0400 	orr.w	r4, r2, r0
 8002b1c:	613c      	str	r4, [r7, #16]
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002b26:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d1 << 8);
 8002b2a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002b2e:	2200      	movs	r2, #0
 8002b30:	469a      	mov	sl, r3
 8002b32:	4693      	mov	fp, r2
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002b40:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002b44:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002b48:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002b4c:	ea40 0402 	orr.w	r4, r0, r2
 8002b50:	60bc      	str	r4, [r7, #8]
 8002b52:	430b      	orrs	r3, r1
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002b5a:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    val |= ((uint64_t)d0 << 0);
 8002b5e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002b62:	2200      	movs	r2, #0
 8002b64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b66:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b6c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8002b70:	4621      	mov	r1, r4
 8002b72:	4311      	orrs	r1, r2
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	4629      	mov	r1, r5
 8002b78:	4319      	orrs	r1, r3
 8002b7a:	6079      	str	r1, [r7, #4]
 8002b7c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002b80:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

    clockReg.bottomDisplay = val;
 8002b84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b88:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb8 <ShowWindow+0x264>)
 8002b90:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b94:	4602      	mov	r2, r0
 8002b96:	f8c3 2012 	str.w	r2, [r3, #18]
 8002b9a:	460a      	mov	r2, r1
 8002b9c:	82da      	strh	r2, [r3, #22]
    UpdateAllDisplays(&clockReg);
 8002b9e:	4806      	ldr	r0, [pc, #24]	@ (8002bb8 <ShowWindow+0x264>)
 8002ba0:	f7fe fb5a 	bl	8001258 <UpdateAllDisplays>
}
 8002ba4:	bf00      	nop
 8002ba6:	376c      	adds	r7, #108	@ 0x6c
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bae:	bf00      	nop
 8002bb0:	200006d4 	.word	0x200006d4
 8002bb4:	200006b8 	.word	0x200006b8
 8002bb8:	20000680 	.word	0x20000680

08002bbc <SLIDER_Init>:

/** ---------------------------------------------------------------------------
 *  @brief Inicjuje wszystkie zmienne slidera w stan "spoczynku". */
void SLIDER_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
    isScrolling        = false;
 8002bc0:	4b10      	ldr	r3, [pc, #64]	@ (8002c04 <SLIDER_Init+0x48>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
    scrollPhase        = SCROLL_PHASE_NONE;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	@ (8002c08 <SLIDER_Init+0x4c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
    currentDirection   = SCROLL_RIGHT_TO_LEFT;
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <SLIDER_Init+0x50>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
    windowIndex        = 0;
 8002bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8002c10 <SLIDER_Init+0x54>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	801a      	strh	r2, [r3, #0]
    scrollSpeedCounter = 0;
 8002bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c14 <SLIDER_Init+0x58>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]

    doStayForever  = false;
 8002bde:	4b0e      	ldr	r3, [pc, #56]	@ (8002c18 <SLIDER_Init+0x5c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
    doPauseThenOut = false;
 8002be4:	4b0d      	ldr	r3, [pc, #52]	@ (8002c1c <SLIDER_Init+0x60>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
    pauseCounter   = 0;
 8002bea:	4b0d      	ldr	r3, [pc, #52]	@ (8002c20 <SLIDER_Init+0x64>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
    pauseTicks     = 0;
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <SLIDER_Init+0x68>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]

    memset(buffer, 0, sizeof(buffer));
 8002bf6:	2212      	movs	r2, #18
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	480b      	ldr	r0, [pc, #44]	@ (8002c28 <SLIDER_Init+0x6c>)
 8002bfc:	f005 fc9e 	bl	800853c <memset>
}
 8002c00:	bf00      	nop
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	200006ca 	.word	0x200006ca
 8002c08:	200006cb 	.word	0x200006cb
 8002c0c:	200006cc 	.word	0x200006cc
 8002c10:	200006d4 	.word	0x200006d4
 8002c14:	200006d6 	.word	0x200006d6
 8002c18:	200006d7 	.word	0x200006d7
 8002c1c:	200006d8 	.word	0x200006d8
 8002c20:	200006dc 	.word	0x200006dc
 8002c24:	200006e0 	.word	0x200006e0
 8002c28:	200006b8 	.word	0x200006b8

08002c2c <SLIDER_SetString>:
 *  @brief Proste przewinięcie (bez fazy IN i pauzy) – tylko OUT.
 *         Załóżmy, że "startowo" cały napis jest na ekranie
 *         i jedzie na zewnątrz.
 */
void SLIDER_SetString(const char* text, ScrollDirection dir, uint32_t pauseTime)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	460b      	mov	r3, r1
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	72fb      	strb	r3, [r7, #11]
	 if (!text) return;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01d      	beq.n	8002c7c <SLIDER_SetString+0x50>

	    PrepareBuffer18(text);
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7ff fe49 	bl	80028d8 <PrepareBuffer18>

	    currentDirection = dir;
 8002c46:	4a0f      	ldr	r2, [pc, #60]	@ (8002c84 <SLIDER_SetString+0x58>)
 8002c48:	7afb      	ldrb	r3, [r7, #11]
 8002c4a:	7013      	strb	r3, [r2, #0]
	    scrollPhase      = SCROLL_PHASE_PAUSE;  // Rozpoczynamy od pauzy
 8002c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c88 <SLIDER_SetString+0x5c>)
 8002c4e:	2202      	movs	r2, #2
 8002c50:	701a      	strb	r2, [r3, #0]
	    isScrolling      = true;
 8002c52:	4b0e      	ldr	r3, [pc, #56]	@ (8002c8c <SLIDER_SetString+0x60>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]

	    doStayForever    = false;
 8002c58:	4b0d      	ldr	r3, [pc, #52]	@ (8002c90 <SLIDER_SetString+0x64>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	701a      	strb	r2, [r3, #0]
	    doPauseThenOut   = true;
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c94 <SLIDER_SetString+0x68>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
	    pauseTicks       = pauseTime;
 8002c64:	4a0c      	ldr	r2, [pc, #48]	@ (8002c98 <SLIDER_SetString+0x6c>)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6013      	str	r3, [r2, #0]
	    pauseCounter     = pauseTime;
 8002c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c9c <SLIDER_SetString+0x70>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6013      	str	r3, [r2, #0]

	    // Ustawienie widocznego napisu od razu
	    windowIndex = 6;  // Miejsce, gdzie napis jest w pełni widoczny
 8002c70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <SLIDER_SetString+0x74>)
 8002c72:	2206      	movs	r2, #6
 8002c74:	801a      	strh	r2, [r3, #0]
	    ShowWindow();
 8002c76:	f7ff fe6d 	bl	8002954 <ShowWindow>
 8002c7a:	e000      	b.n	8002c7e <SLIDER_SetString+0x52>
	 if (!text) return;
 8002c7c:	bf00      	nop
}
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	200006cc 	.word	0x200006cc
 8002c88:	200006cb 	.word	0x200006cb
 8002c8c:	200006ca 	.word	0x200006ca
 8002c90:	200006d7 	.word	0x200006d7
 8002c94:	200006d8 	.word	0x200006d8
 8002c98:	200006e0 	.word	0x200006e0
 8002c9c:	200006dc 	.word	0x200006dc
 8002ca0:	200006d4 	.word	0x200006d4

08002ca4 <SLIDER_Stop>:

/** ---------------------------------------------------------------------------
 *  @brief Zatrzymuje scrolling natychmiast.
 */
void SLIDER_Stop(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
    isScrolling = false;
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <SLIDER_Stop+0x34>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
    scrollPhase = SCROLL_PHASE_NONE;
 8002cae:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <SLIDER_Stop+0x38>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
    windowIndex = 0;
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce0 <SLIDER_Stop+0x3c>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	801a      	strh	r2, [r3, #0]

    // Jeśli istnieje oczekujące żądanie wyświetlenia liczby, realizujemy je.
    if (displayNumberPending) {
 8002cba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce4 <SLIDER_Stop+0x40>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <SLIDER_Stop+0x2e>
        // Wyświetlamy zapamiętaną liczbę
        SLIDER_DisplayNumber(pendingNumberToDisplay);
 8002cc2:	4b09      	ldr	r3, [pc, #36]	@ (8002ce8 <SLIDER_Stop+0x44>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f8f6 	bl	8002eb8 <SLIDER_DisplayNumber>
        // Resetujemy flagę, bo żądanie zostało obsłużone
        displayNumberPending = false;
 8002ccc:	4b05      	ldr	r3, [pc, #20]	@ (8002ce4 <SLIDER_Stop+0x40>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
    }
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200006ca 	.word	0x200006ca
 8002cdc:	200006cb 	.word	0x200006cb
 8002ce0:	200006d4 	.word	0x200006d4
 8002ce4:	200006cd 	.word	0x200006cd
 8002ce8:	200006d0 	.word	0x200006d0

08002cec <SLIDER_Update>:

/** ---------------------------------------------------------------------------
 *  @brief Główna funkcja wywoływana cyklicznie (np. co 10 ms w przerwaniu).
 */
void SLIDER_Update(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
    if (!isScrolling) return;
 8002cf0:	4b60      	ldr	r3, [pc, #384]	@ (8002e74 <SLIDER_Update+0x188>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	f083 0301 	eor.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 80b5 	bne.w	8002e6a <SLIDER_Update+0x17e>

    // Co scrollSpeedTicks odświeżamy
    if (scrollSpeedCounter < scrollSpeedTicks)
 8002d00:	4b5d      	ldr	r3, [pc, #372]	@ (8002e78 <SLIDER_Update+0x18c>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2205      	movs	r2, #5
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d206      	bcs.n	8002d18 <SLIDER_Update+0x2c>
    {
        scrollSpeedCounter++;
 8002d0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002e78 <SLIDER_Update+0x18c>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	4b59      	ldr	r3, [pc, #356]	@ (8002e78 <SLIDER_Update+0x18c>)
 8002d14:	701a      	strb	r2, [r3, #0]
        return;
 8002d16:	e0ab      	b.n	8002e70 <SLIDER_Update+0x184>
    }
    scrollSpeedCounter = 0;
 8002d18:	4b57      	ldr	r3, [pc, #348]	@ (8002e78 <SLIDER_Update+0x18c>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	701a      	strb	r2, [r3, #0]

    switch (scrollPhase)
 8002d1e:	4b57      	ldr	r3, [pc, #348]	@ (8002e7c <SLIDER_Update+0x190>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d075      	beq.n	8002e12 <SLIDER_Update+0x126>
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	f300 80a1 	bgt.w	8002e6e <SLIDER_Update+0x182>
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d002      	beq.n	8002d36 <SLIDER_Update+0x4a>
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d060      	beq.n	8002df6 <SLIDER_Update+0x10a>
        break;
    }

    default:
        // SCROLL_PHASE_NONE => nic
        return;
 8002d34:	e09b      	b.n	8002e6e <SLIDER_Update+0x182>
        if (currentDirection == SCROLL_RIGHT_TO_LEFT)
 8002d36:	4b52      	ldr	r3, [pc, #328]	@ (8002e80 <SLIDER_Update+0x194>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d12d      	bne.n	8002d9a <SLIDER_Update+0xae>
            windowIndex--;
 8002d3e:	4b51      	ldr	r3, [pc, #324]	@ (8002e84 <SLIDER_Update+0x198>)
 8002d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	b21a      	sxth	r2, r3
 8002d4c:	4b4d      	ldr	r3, [pc, #308]	@ (8002e84 <SLIDER_Update+0x198>)
 8002d4e:	801a      	strh	r2, [r3, #0]
            if (windowIndex == 6)
 8002d50:	4b4c      	ldr	r3, [pc, #304]	@ (8002e84 <SLIDER_Update+0x198>)
 8002d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	f040 8081 	bne.w	8002e5e <SLIDER_Update+0x172>
                if (doStayForever)
 8002d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8002e88 <SLIDER_Update+0x19c>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <SLIDER_Update+0x86>
                    isScrolling = false;
 8002d64:	4b43      	ldr	r3, [pc, #268]	@ (8002e74 <SLIDER_Update+0x188>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
                    scrollPhase = SCROLL_PHASE_NONE;
 8002d6a:	4b44      	ldr	r3, [pc, #272]	@ (8002e7c <SLIDER_Update+0x190>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
        break;
 8002d70:	e075      	b.n	8002e5e <SLIDER_Update+0x172>
                else if (doPauseThenOut && pauseTicks > 0)
 8002d72:	4b46      	ldr	r3, [pc, #280]	@ (8002e8c <SLIDER_Update+0x1a0>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <SLIDER_Update+0xa6>
 8002d7a:	4b45      	ldr	r3, [pc, #276]	@ (8002e90 <SLIDER_Update+0x1a4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <SLIDER_Update+0xa6>
                    scrollPhase = SCROLL_PHASE_PAUSE;
 8002d82:	4b3e      	ldr	r3, [pc, #248]	@ (8002e7c <SLIDER_Update+0x190>)
 8002d84:	2202      	movs	r2, #2
 8002d86:	701a      	strb	r2, [r3, #0]
                    pauseCounter = pauseTicks;
 8002d88:	4b41      	ldr	r3, [pc, #260]	@ (8002e90 <SLIDER_Update+0x1a4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a41      	ldr	r2, [pc, #260]	@ (8002e94 <SLIDER_Update+0x1a8>)
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	e030      	b.n	8002df4 <SLIDER_Update+0x108>
                    scrollPhase = SCROLL_PHASE_OUT;
 8002d92:	4b3a      	ldr	r3, [pc, #232]	@ (8002e7c <SLIDER_Update+0x190>)
 8002d94:	2203      	movs	r2, #3
 8002d96:	701a      	strb	r2, [r3, #0]
        break;
 8002d98:	e061      	b.n	8002e5e <SLIDER_Update+0x172>
            windowIndex++;
 8002d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e84 <SLIDER_Update+0x198>)
 8002d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	b21a      	sxth	r2, r3
 8002da8:	4b36      	ldr	r3, [pc, #216]	@ (8002e84 <SLIDER_Update+0x198>)
 8002daa:	801a      	strh	r2, [r3, #0]
            if (windowIndex == 6)
 8002dac:	4b35      	ldr	r3, [pc, #212]	@ (8002e84 <SLIDER_Update+0x198>)
 8002dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d153      	bne.n	8002e5e <SLIDER_Update+0x172>
                if (doStayForever)
 8002db6:	4b34      	ldr	r3, [pc, #208]	@ (8002e88 <SLIDER_Update+0x19c>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d006      	beq.n	8002dcc <SLIDER_Update+0xe0>
                    isScrolling = false;
 8002dbe:	4b2d      	ldr	r3, [pc, #180]	@ (8002e74 <SLIDER_Update+0x188>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
                    scrollPhase = SCROLL_PHASE_NONE;
 8002dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e7c <SLIDER_Update+0x190>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
        break;
 8002dca:	e048      	b.n	8002e5e <SLIDER_Update+0x172>
                else if (doPauseThenOut && pauseTicks > 0)
 8002dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8002e8c <SLIDER_Update+0x1a0>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <SLIDER_Update+0x100>
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002e90 <SLIDER_Update+0x1a4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d007      	beq.n	8002dec <SLIDER_Update+0x100>
                    scrollPhase = SCROLL_PHASE_PAUSE;
 8002ddc:	4b27      	ldr	r3, [pc, #156]	@ (8002e7c <SLIDER_Update+0x190>)
 8002dde:	2202      	movs	r2, #2
 8002de0:	701a      	strb	r2, [r3, #0]
                    pauseCounter = pauseTicks;
 8002de2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e90 <SLIDER_Update+0x1a4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2b      	ldr	r2, [pc, #172]	@ (8002e94 <SLIDER_Update+0x1a8>)
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e003      	b.n	8002df4 <SLIDER_Update+0x108>
                    scrollPhase = SCROLL_PHASE_OUT;
 8002dec:	4b23      	ldr	r3, [pc, #140]	@ (8002e7c <SLIDER_Update+0x190>)
 8002dee:	2203      	movs	r2, #3
 8002df0:	701a      	strb	r2, [r3, #0]
        break;
 8002df2:	e034      	b.n	8002e5e <SLIDER_Update+0x172>
 8002df4:	e033      	b.n	8002e5e <SLIDER_Update+0x172>
        if (pauseCounter > 0)
 8002df6:	4b27      	ldr	r3, [pc, #156]	@ (8002e94 <SLIDER_Update+0x1a8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <SLIDER_Update+0x11e>
            pauseCounter--;
 8002dfe:	4b25      	ldr	r3, [pc, #148]	@ (8002e94 <SLIDER_Update+0x1a8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	4a23      	ldr	r2, [pc, #140]	@ (8002e94 <SLIDER_Update+0x1a8>)
 8002e06:	6013      	str	r3, [r2, #0]
        break;
 8002e08:	e02c      	b.n	8002e64 <SLIDER_Update+0x178>
            scrollPhase = SCROLL_PHASE_OUT;
 8002e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e7c <SLIDER_Update+0x190>)
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	701a      	strb	r2, [r3, #0]
        break;
 8002e10:	e028      	b.n	8002e64 <SLIDER_Update+0x178>
        if (currentDirection == SCROLL_RIGHT_TO_LEFT)
 8002e12:	4b1b      	ldr	r3, [pc, #108]	@ (8002e80 <SLIDER_Update+0x194>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d110      	bne.n	8002e3c <SLIDER_Update+0x150>
            windowIndex--;
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e84 <SLIDER_Update+0x198>)
 8002e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	b21a      	sxth	r2, r3
 8002e28:	4b16      	ldr	r3, [pc, #88]	@ (8002e84 <SLIDER_Update+0x198>)
 8002e2a:	801a      	strh	r2, [r3, #0]
            if (windowIndex < 0)
 8002e2c:	4b15      	ldr	r3, [pc, #84]	@ (8002e84 <SLIDER_Update+0x198>)
 8002e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	da15      	bge.n	8002e62 <SLIDER_Update+0x176>
                SLIDER_Stop();
 8002e36:	f7ff ff35 	bl	8002ca4 <SLIDER_Stop>
        break;
 8002e3a:	e012      	b.n	8002e62 <SLIDER_Update+0x176>
            windowIndex++;
 8002e3c:	4b11      	ldr	r3, [pc, #68]	@ (8002e84 <SLIDER_Update+0x198>)
 8002e3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	b21a      	sxth	r2, r3
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e84 <SLIDER_Update+0x198>)
 8002e4c:	801a      	strh	r2, [r3, #0]
            if (windowIndex > 12)
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e84 <SLIDER_Update+0x198>)
 8002e50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	dd04      	ble.n	8002e62 <SLIDER_Update+0x176>
                SLIDER_Stop();
 8002e58:	f7ff ff24 	bl	8002ca4 <SLIDER_Stop>
        break;
 8002e5c:	e001      	b.n	8002e62 <SLIDER_Update+0x176>
        break;
 8002e5e:	bf00      	nop
 8002e60:	e000      	b.n	8002e64 <SLIDER_Update+0x178>
        break;
 8002e62:	bf00      	nop
    }

    // Po zmianie windowIndex – odśwież wyświetlacz
    ShowWindow();
 8002e64:	f7ff fd76 	bl	8002954 <ShowWindow>
 8002e68:	e002      	b.n	8002e70 <SLIDER_Update+0x184>
    if (!isScrolling) return;
 8002e6a:	bf00      	nop
 8002e6c:	e000      	b.n	8002e70 <SLIDER_Update+0x184>
        return;
 8002e6e:	bf00      	nop
}
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200006ca 	.word	0x200006ca
 8002e78:	200006d6 	.word	0x200006d6
 8002e7c:	200006cb 	.word	0x200006cb
 8002e80:	200006cc 	.word	0x200006cc
 8002e84:	200006d4 	.word	0x200006d4
 8002e88:	200006d7 	.word	0x200006d7
 8002e8c:	200006d8 	.word	0x200006d8
 8002e90:	200006e0 	.word	0x200006e0
 8002e94:	200006dc 	.word	0x200006dc

08002e98 <SLIDER_IsStopped>:
bool SLIDER_IsStopped(void) {
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
    return (scrollPhase == SCROLL_PHASE_NONE);
 8002e9c:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <SLIDER_IsStopped+0x1c>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	200006cb 	.word	0x200006cb

08002eb8 <SLIDER_DisplayNumber>:



void SLIDER_DisplayNumber(uint32_t number)
{
 8002eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ebc:	b09f      	sub	sp, #124	@ 0x7c
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	65f8      	str	r0, [r7, #92]	@ 0x5c
    // Jeżeli slider nie jest zatrzymany, zapamiętaj żądanie i wyjdź
    if (!SLIDER_IsStopped()) {
 8002ec2:	f7ff ffe9 	bl	8002e98 <SLIDER_IsStopped>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f083 0301 	eor.w	r3, r3, #1
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <SLIDER_DisplayNumber+0x30>
        displayNumberPending = true;
 8002ed2:	4b7b      	ldr	r3, [pc, #492]	@ (80030c0 <SLIDER_DisplayNumber+0x208>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
        pendingNumberToDisplay = (number > 999999) ? 999999 : number;
 8002ed8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eda:	4a7a      	ldr	r2, [pc, #488]	@ (80030c4 <SLIDER_DisplayNumber+0x20c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	bf28      	it	cs
 8002ee0:	4613      	movcs	r3, r2
 8002ee2:	4a79      	ldr	r2, [pc, #484]	@ (80030c8 <SLIDER_DisplayNumber+0x210>)
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e0e7      	b.n	80030b8 <SLIDER_DisplayNumber+0x200>
    }

    // Slider jest zatrzymany – wyświetlamy liczbę od razu

    // Ograniczamy liczbę do maksimum 999999
    if (number > 999999)
 8002ee8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002eea:	4b76      	ldr	r3, [pc, #472]	@ (80030c4 <SLIDER_DisplayNumber+0x20c>)
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d901      	bls.n	8002ef4 <SLIDER_DisplayNumber+0x3c>
        number = 999999;
 8002ef0:	4b74      	ldr	r3, [pc, #464]	@ (80030c4 <SLIDER_DisplayNumber+0x20c>)
 8002ef2:	65fb      	str	r3, [r7, #92]	@ 0x5c

    uint8_t digits[6];

    // Inicjujemy wszystkie cyfry jako puste (segment odpowiadający spacji)
    for (int i = 0; i < 6; i++) {
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ef8:	e00d      	b.n	8002f16 <SLIDER_DisplayNumber+0x5e>
        digits[i] = charToSegment(' ');
 8002efa:	2020      	movs	r0, #32
 8002efc:	f7fd fce8 	bl	80008d0 <charToSegment>
 8002f00:	4603      	mov	r3, r0
 8002f02:	4619      	mov	r1, r3
 8002f04:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8002f08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f0a:	441a      	add	r2, r3
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < 6; i++) {
 8002f10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f12:	3301      	adds	r3, #1
 8002f14:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	ddee      	ble.n	8002efa <SLIDER_DisplayNumber+0x42>
    }

    // Zamieniamy liczbę na cyfry od końca
    for (int i = 5; i >= 0; i--) {
 8002f1c:	2305      	movs	r3, #5
 8002f1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f20:	e020      	b.n	8002f64 <SLIDER_DisplayNumber+0xac>
        digits[i] = charToSegment('0' + (number % 10));
 8002f22:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002f24:	4b69      	ldr	r3, [pc, #420]	@ (80030cc <SLIDER_DisplayNumber+0x214>)
 8002f26:	fba3 2301 	umull	r2, r3, r3, r1
 8002f2a:	08da      	lsrs	r2, r3, #3
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	1aca      	subs	r2, r1, r3
 8002f36:	b2d3      	uxtb	r3, r2
 8002f38:	3330      	adds	r3, #48	@ 0x30
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd fcc7 	bl	80008d0 <charToSegment>
 8002f42:	4603      	mov	r3, r0
 8002f44:	4619      	mov	r1, r3
 8002f46:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8002f4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f4c:	441a      	add	r2, r3
 8002f4e:	460b      	mov	r3, r1
 8002f50:	7013      	strb	r3, [r2, #0]
        number /= 10;
 8002f52:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002f54:	4b5d      	ldr	r3, [pc, #372]	@ (80030cc <SLIDER_DisplayNumber+0x214>)
 8002f56:	fba3 2302 	umull	r2, r3, r3, r2
 8002f5a:	08db      	lsrs	r3, r3, #3
 8002f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    for (int i = 5; i >= 0; i--) {
 8002f5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f60:	3b01      	subs	r3, #1
 8002f62:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	dadb      	bge.n	8002f22 <SLIDER_DisplayNumber+0x6a>
    }

    // Składamy 6 cyfr do 48-bitowej wartości
    uint64_t displayVal = 0ULL;
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[0] << 40);
 8002f76:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f80:	657a      	str	r2, [r7, #84]	@ 0x54
 8002f82:	f04f 0000 	mov.w	r0, #0
 8002f86:	f04f 0100 	mov.w	r1, #0
 8002f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f8c:	0219      	lsls	r1, r3, #8
 8002f8e:	2000      	movs	r0, #0
 8002f90:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002f94:	ea42 0600 	orr.w	r6, r2, r0
 8002f98:	62be      	str	r6, [r7, #40]	@ 0x28
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fa2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[1] << 32);
 8002fa6:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2200      	movs	r2, #0
 8002fae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fb0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002fb2:	f04f 0000 	mov.w	r0, #0
 8002fb6:	f04f 0100 	mov.w	r1, #0
 8002fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002fc4:	ea42 0600 	orr.w	r6, r2, r0
 8002fc8:	623e      	str	r6, [r7, #32]
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fd2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[2] << 24);
 8002fd6:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2200      	movs	r2, #0
 8002fde:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fe0:	647a      	str	r2, [r7, #68]	@ 0x44
 8002fe2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	0a1d      	lsrs	r5, r3, #8
 8002fea:	460b      	mov	r3, r1
 8002fec:	061c      	lsls	r4, r3, #24
 8002fee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002ff2:	ea42 0104 	orr.w	r1, r2, r4
 8002ff6:	61b9      	str	r1, [r7, #24]
 8002ff8:	432b      	orrs	r3, r5
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003000:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[3] << 16);
 8003004:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2200      	movs	r2, #0
 800300c:	4698      	mov	r8, r3
 800300e:	4691      	mov	r9, r2
 8003010:	f04f 0000 	mov.w	r0, #0
 8003014:	f04f 0100 	mov.w	r1, #0
 8003018:	ea4f 4109 	mov.w	r1, r9, lsl #16
 800301c:	ea41 4118 	orr.w	r1, r1, r8, lsr #16
 8003020:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8003024:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003028:	ea42 0400 	orr.w	r4, r2, r0
 800302c:	613c      	str	r4, [r7, #16]
 800302e:	430b      	orrs	r3, r1
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003036:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[4] << 8);
 800303a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2200      	movs	r2, #0
 8003042:	469a      	mov	sl, r3
 8003044:	4693      	mov	fp, r2
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003052:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003056:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800305a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800305e:	ea40 0402 	orr.w	r4, r0, r2
 8003062:	60bc      	str	r4, [r7, #8]
 8003064:	430b      	orrs	r3, r1
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800306c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    displayVal |= ((uint64_t)digits[5] << 0);
 8003070:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2200      	movs	r2, #0
 8003078:	63bb      	str	r3, [r7, #56]	@ 0x38
 800307a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800307c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003080:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003084:	4621      	mov	r1, r4
 8003086:	4311      	orrs	r1, r2
 8003088:	6039      	str	r1, [r7, #0]
 800308a:	4629      	mov	r1, r5
 800308c:	4319      	orrs	r1, r3
 800308e:	6079      	str	r1, [r7, #4]
 8003090:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003094:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68

    clockReg.bottomDisplay = displayVal;
 8003098:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800309c:	633a      	str	r2, [r7, #48]	@ 0x30
 800309e:	b29b      	uxth	r3, r3
 80030a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80030a2:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <SLIDER_DisplayNumber+0x218>)
 80030a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80030a8:	4602      	mov	r2, r0
 80030aa:	f8c3 2012 	str.w	r2, [r3, #18]
 80030ae:	460a      	mov	r2, r1
 80030b0:	82da      	strh	r2, [r3, #22]
    UpdateAllDisplays(&clockReg);
 80030b2:	4807      	ldr	r0, [pc, #28]	@ (80030d0 <SLIDER_DisplayNumber+0x218>)
 80030b4:	f7fe f8d0 	bl	8001258 <UpdateAllDisplays>
}
 80030b8:	377c      	adds	r7, #124	@ 0x7c
 80030ba:	46bd      	mov	sp, r7
 80030bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030c0:	200006cd 	.word	0x200006cd
 80030c4:	000f423f 	.word	0x000f423f
 80030c8:	200006d0 	.word	0x200006d0
 80030cc:	cccccccd 	.word	0xcccccccd
 80030d0:	20000680 	.word	0x20000680

080030d4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80030d8:	4b17      	ldr	r3, [pc, #92]	@ (8003138 <MX_SPI1_Init+0x64>)
 80030da:	4a18      	ldr	r2, [pc, #96]	@ (800313c <MX_SPI1_Init+0x68>)
 80030dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030de:	4b16      	ldr	r3, [pc, #88]	@ (8003138 <MX_SPI1_Init+0x64>)
 80030e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80030e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030e6:	4b14      	ldr	r3, [pc, #80]	@ (8003138 <MX_SPI1_Init+0x64>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030ec:	4b12      	ldr	r3, [pc, #72]	@ (8003138 <MX_SPI1_Init+0x64>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030f2:	4b11      	ldr	r3, [pc, #68]	@ (8003138 <MX_SPI1_Init+0x64>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003138 <MX_SPI1_Init+0x64>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003138 <MX_SPI1_Init+0x64>)
 8003100:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003104:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003106:	4b0c      	ldr	r3, [pc, #48]	@ (8003138 <MX_SPI1_Init+0x64>)
 8003108:	2220      	movs	r2, #32
 800310a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800310c:	4b0a      	ldr	r3, [pc, #40]	@ (8003138 <MX_SPI1_Init+0x64>)
 800310e:	2200      	movs	r2, #0
 8003110:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003112:	4b09      	ldr	r3, [pc, #36]	@ (8003138 <MX_SPI1_Init+0x64>)
 8003114:	2200      	movs	r2, #0
 8003116:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003118:	4b07      	ldr	r3, [pc, #28]	@ (8003138 <MX_SPI1_Init+0x64>)
 800311a:	2200      	movs	r2, #0
 800311c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800311e:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <MX_SPI1_Init+0x64>)
 8003120:	220a      	movs	r2, #10
 8003122:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003124:	4804      	ldr	r0, [pc, #16]	@ (8003138 <MX_SPI1_Init+0x64>)
 8003126:	f002 ffc7 	bl	80060b8 <HAL_SPI_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003130:	f7ff fb46 	bl	80027c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}
 8003138:	200006e4 	.word	0x200006e4
 800313c:	40013000 	.word	0x40013000

08003140 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	@ 0x28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	f107 0314 	add.w	r3, r7, #20
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a34      	ldr	r2, [pc, #208]	@ (8003230 <HAL_SPI_MspInit+0xf0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d161      	bne.n	8003226 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	4b33      	ldr	r3, [pc, #204]	@ (8003234 <HAL_SPI_MspInit+0xf4>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316a:	4a32      	ldr	r2, [pc, #200]	@ (8003234 <HAL_SPI_MspInit+0xf4>)
 800316c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003170:	6453      	str	r3, [r2, #68]	@ 0x44
 8003172:	4b30      	ldr	r3, [pc, #192]	@ (8003234 <HAL_SPI_MspInit+0xf4>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	4b2c      	ldr	r3, [pc, #176]	@ (8003234 <HAL_SPI_MspInit+0xf4>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	4a2b      	ldr	r2, [pc, #172]	@ (8003234 <HAL_SPI_MspInit+0xf4>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	6313      	str	r3, [r2, #48]	@ 0x30
 800318e:	4b29      	ldr	r3, [pc, #164]	@ (8003234 <HAL_SPI_MspInit+0xf4>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800319a:	23a0      	movs	r3, #160	@ 0xa0
 800319c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	2302      	movs	r3, #2
 80031a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a6:	2303      	movs	r3, #3
 80031a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031aa:	2305      	movs	r3, #5
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ae:	f107 0314 	add.w	r3, r7, #20
 80031b2:	4619      	mov	r1, r3
 80031b4:	4820      	ldr	r0, [pc, #128]	@ (8003238 <HAL_SPI_MspInit+0xf8>)
 80031b6:	f001 fc1f 	bl	80049f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80031ba:	4b20      	ldr	r3, [pc, #128]	@ (800323c <HAL_SPI_MspInit+0xfc>)
 80031bc:	4a20      	ldr	r2, [pc, #128]	@ (8003240 <HAL_SPI_MspInit+0x100>)
 80031be:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80031c0:	4b1e      	ldr	r3, [pc, #120]	@ (800323c <HAL_SPI_MspInit+0xfc>)
 80031c2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80031c6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031c8:	4b1c      	ldr	r3, [pc, #112]	@ (800323c <HAL_SPI_MspInit+0xfc>)
 80031ca:	2240      	movs	r2, #64	@ 0x40
 80031cc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031ce:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <HAL_SPI_MspInit+0xfc>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031d4:	4b19      	ldr	r3, [pc, #100]	@ (800323c <HAL_SPI_MspInit+0xfc>)
 80031d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031da:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031dc:	4b17      	ldr	r3, [pc, #92]	@ (800323c <HAL_SPI_MspInit+0xfc>)
 80031de:	2200      	movs	r2, #0
 80031e0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031e2:	4b16      	ldr	r3, [pc, #88]	@ (800323c <HAL_SPI_MspInit+0xfc>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80031e8:	4b14      	ldr	r3, [pc, #80]	@ (800323c <HAL_SPI_MspInit+0xfc>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031ee:	4b13      	ldr	r3, [pc, #76]	@ (800323c <HAL_SPI_MspInit+0xfc>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031f4:	4b11      	ldr	r3, [pc, #68]	@ (800323c <HAL_SPI_MspInit+0xfc>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80031fa:	4810      	ldr	r0, [pc, #64]	@ (800323c <HAL_SPI_MspInit+0xfc>)
 80031fc:	f001 f86a 	bl	80042d4 <HAL_DMA_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8003206:	f7ff fadb 	bl	80027c0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a0b      	ldr	r2, [pc, #44]	@ (800323c <HAL_SPI_MspInit+0xfc>)
 800320e:	649a      	str	r2, [r3, #72]	@ 0x48
 8003210:	4a0a      	ldr	r2, [pc, #40]	@ (800323c <HAL_SPI_MspInit+0xfc>)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	2100      	movs	r1, #0
 800321a:	2023      	movs	r0, #35	@ 0x23
 800321c:	f001 f823 	bl	8004266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003220:	2023      	movs	r0, #35	@ 0x23
 8003222:	f001 f83c 	bl	800429e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003226:	bf00      	nop
 8003228:	3728      	adds	r7, #40	@ 0x28
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40013000 	.word	0x40013000
 8003234:	40023800 	.word	0x40023800
 8003238:	40020000 	.word	0x40020000
 800323c:	2000073c 	.word	0x2000073c
 8003240:	40026458 	.word	0x40026458

08003244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	4b10      	ldr	r3, [pc, #64]	@ (8003290 <HAL_MspInit+0x4c>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003252:	4a0f      	ldr	r2, [pc, #60]	@ (8003290 <HAL_MspInit+0x4c>)
 8003254:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003258:	6453      	str	r3, [r2, #68]	@ 0x44
 800325a:	4b0d      	ldr	r3, [pc, #52]	@ (8003290 <HAL_MspInit+0x4c>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003262:	607b      	str	r3, [r7, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	603b      	str	r3, [r7, #0]
 800326a:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <HAL_MspInit+0x4c>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	4a08      	ldr	r2, [pc, #32]	@ (8003290 <HAL_MspInit+0x4c>)
 8003270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003274:	6413      	str	r3, [r2, #64]	@ 0x40
 8003276:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <HAL_MspInit+0x4c>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800

08003294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003298:	bf00      	nop
 800329a:	e7fd      	b.n	8003298 <NMI_Handler+0x4>

0800329c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032a0:	bf00      	nop
 80032a2:	e7fd      	b.n	80032a0 <HardFault_Handler+0x4>

080032a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032a8:	bf00      	nop
 80032aa:	e7fd      	b.n	80032a8 <MemManage_Handler+0x4>

080032ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032b0:	bf00      	nop
 80032b2:	e7fd      	b.n	80032b0 <BusFault_Handler+0x4>

080032b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032b8:	bf00      	nop
 80032ba:	e7fd      	b.n	80032b8 <UsageFault_Handler+0x4>

080032bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032ca:	b480      	push	{r7}
 80032cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032dc:	bf00      	nop
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032ea:	f000 fb87 	bl	80039fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80032f8:	4802      	ldr	r0, [pc, #8]	@ (8003304 <DMA1_Stream2_IRQHandler+0x10>)
 80032fa:	f001 f913 	bl	8004524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	200005a0 	.word	0x200005a0

08003308 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800330c:	4802      	ldr	r0, [pc, #8]	@ (8003318 <TIM4_IRQHandler+0x10>)
 800330e:	f003 fd99 	bl	8006e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	200007e4 	.word	0x200007e4

0800331c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003320:	4802      	ldr	r0, [pc, #8]	@ (800332c <SPI1_IRQHandler+0x10>)
 8003322:	f003 f805 	bl	8006330 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	200006e4 	.word	0x200006e4

08003330 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8003334:	4802      	ldr	r0, [pc, #8]	@ (8003340 <DMA1_Stream7_IRQHandler+0x10>)
 8003336:	f001 f8f5 	bl	8004524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000600 	.word	0x20000600

08003344 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003348:	4802      	ldr	r0, [pc, #8]	@ (8003354 <TIM5_IRQHandler+0x10>)
 800334a:	f003 fd7b 	bl	8006e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	2000082c 	.word	0x2000082c

08003358 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800335c:	4802      	ldr	r0, [pc, #8]	@ (8003368 <DMA2_Stream2_IRQHandler+0x10>)
 800335e:	f001 f8e1 	bl	8004524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	200008bc 	.word	0x200008bc

0800336c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003370:	4802      	ldr	r0, [pc, #8]	@ (800337c <DMA2_Stream3_IRQHandler+0x10>)
 8003372:	f001 f8d7 	bl	8004524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	2000073c 	.word	0x2000073c

08003380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003384:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <SystemInit+0x20>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800338a:	4a05      	ldr	r2, [pc, #20]	@ (80033a0 <SystemInit+0x20>)
 800338c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b096      	sub	sp, #88	@ 0x58
 80033a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	605a      	str	r2, [r3, #4]
 80033b4:	609a      	str	r2, [r3, #8]
 80033b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	609a      	str	r2, [r3, #8]
 80033ce:	60da      	str	r2, [r3, #12]
 80033d0:	611a      	str	r2, [r3, #16]
 80033d2:	615a      	str	r2, [r3, #20]
 80033d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	2220      	movs	r2, #32
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f005 f8ad 	bl	800853c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80033e2:	4b3e      	ldr	r3, [pc, #248]	@ (80034dc <MX_TIM1_Init+0x138>)
 80033e4:	4a3e      	ldr	r2, [pc, #248]	@ (80034e0 <MX_TIM1_Init+0x13c>)
 80033e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 80033e8:	4b3c      	ldr	r3, [pc, #240]	@ (80034dc <MX_TIM1_Init+0x138>)
 80033ea:	2218      	movs	r2, #24
 80033ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ee:	4b3b      	ldr	r3, [pc, #236]	@ (80034dc <MX_TIM1_Init+0x138>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80033f4:	4b39      	ldr	r3, [pc, #228]	@ (80034dc <MX_TIM1_Init+0x138>)
 80033f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80033fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033fc:	4b37      	ldr	r3, [pc, #220]	@ (80034dc <MX_TIM1_Init+0x138>)
 80033fe:	2200      	movs	r2, #0
 8003400:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003402:	4b36      	ldr	r3, [pc, #216]	@ (80034dc <MX_TIM1_Init+0x138>)
 8003404:	2200      	movs	r2, #0
 8003406:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003408:	4b34      	ldr	r3, [pc, #208]	@ (80034dc <MX_TIM1_Init+0x138>)
 800340a:	2200      	movs	r2, #0
 800340c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800340e:	4833      	ldr	r0, [pc, #204]	@ (80034dc <MX_TIM1_Init+0x138>)
 8003410:	f003 fa08 	bl	8006824 <HAL_TIM_Base_Init>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800341a:	f7ff f9d1 	bl	80027c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800341e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003422:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003424:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003428:	4619      	mov	r1, r3
 800342a:	482c      	ldr	r0, [pc, #176]	@ (80034dc <MX_TIM1_Init+0x138>)
 800342c:	f003 febc 	bl	80071a8 <HAL_TIM_ConfigClockSource>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003436:	f7ff f9c3 	bl	80027c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800343a:	4828      	ldr	r0, [pc, #160]	@ (80034dc <MX_TIM1_Init+0x138>)
 800343c:	f003 faa4 	bl	8006988 <HAL_TIM_PWM_Init>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003446:	f7ff f9bb 	bl	80027c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800344a:	2300      	movs	r3, #0
 800344c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800344e:	2300      	movs	r3, #0
 8003450:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003452:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003456:	4619      	mov	r1, r3
 8003458:	4820      	ldr	r0, [pc, #128]	@ (80034dc <MX_TIM1_Init+0x138>)
 800345a:	f004 fa63 	bl	8007924 <HAL_TIMEx_MasterConfigSynchronization>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003464:	f7ff f9ac 	bl	80027c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003468:	2360      	movs	r3, #96	@ 0x60
 800346a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003470:	2302      	movs	r3, #2
 8003472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003474:	2300      	movs	r3, #0
 8003476:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003478:	2300      	movs	r3, #0
 800347a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800347c:	2300      	movs	r3, #0
 800347e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003480:	2300      	movs	r3, #0
 8003482:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003488:	2200      	movs	r2, #0
 800348a:	4619      	mov	r1, r3
 800348c:	4813      	ldr	r0, [pc, #76]	@ (80034dc <MX_TIM1_Init+0x138>)
 800348e:	f003 fdc9 	bl	8007024 <HAL_TIM_PWM_ConfigChannel>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003498:	f7ff f992 	bl	80027c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800349c:	2300      	movs	r3, #0
 800349e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80034ba:	1d3b      	adds	r3, r7, #4
 80034bc:	4619      	mov	r1, r3
 80034be:	4807      	ldr	r0, [pc, #28]	@ (80034dc <MX_TIM1_Init+0x138>)
 80034c0:	f004 fa9e 	bl	8007a00 <HAL_TIMEx_ConfigBreakDeadTime>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80034ca:	f7ff f979 	bl	80027c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80034ce:	4803      	ldr	r0, [pc, #12]	@ (80034dc <MX_TIM1_Init+0x138>)
 80034d0:	f000 f938 	bl	8003744 <HAL_TIM_MspPostInit>

}
 80034d4:	bf00      	nop
 80034d6:	3758      	adds	r7, #88	@ 0x58
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	2000079c 	.word	0x2000079c
 80034e0:	40010000 	.word	0x40010000

080034e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08c      	sub	sp, #48	@ 0x30
 80034e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80034ea:	f107 030c 	add.w	r3, r7, #12
 80034ee:	2224      	movs	r2, #36	@ 0x24
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f005 f822 	bl	800853c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034f8:	1d3b      	adds	r3, r7, #4
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003500:	4b20      	ldr	r3, [pc, #128]	@ (8003584 <MX_TIM4_Init+0xa0>)
 8003502:	4a21      	ldr	r2, [pc, #132]	@ (8003588 <MX_TIM4_Init+0xa4>)
 8003504:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003506:	4b1f      	ldr	r3, [pc, #124]	@ (8003584 <MX_TIM4_Init+0xa0>)
 8003508:	2200      	movs	r2, #0
 800350a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800350c:	4b1d      	ldr	r3, [pc, #116]	@ (8003584 <MX_TIM4_Init+0xa0>)
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003512:	4b1c      	ldr	r3, [pc, #112]	@ (8003584 <MX_TIM4_Init+0xa0>)
 8003514:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003518:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800351a:	4b1a      	ldr	r3, [pc, #104]	@ (8003584 <MX_TIM4_Init+0xa0>)
 800351c:	2200      	movs	r2, #0
 800351e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003520:	4b18      	ldr	r3, [pc, #96]	@ (8003584 <MX_TIM4_Init+0xa0>)
 8003522:	2200      	movs	r2, #0
 8003524:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003526:	2301      	movs	r3, #1
 8003528:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800352a:	2300      	movs	r3, #0
 800352c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800352e:	2301      	movs	r3, #1
 8003530:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003532:	2300      	movs	r3, #0
 8003534:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800353a:	2302      	movs	r3, #2
 800353c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800353e:	2301      	movs	r3, #1
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003542:	2300      	movs	r3, #0
 8003544:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003546:	2300      	movs	r3, #0
 8003548:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800354a:	f107 030c 	add.w	r3, r7, #12
 800354e:	4619      	mov	r1, r3
 8003550:	480c      	ldr	r0, [pc, #48]	@ (8003584 <MX_TIM4_Init+0xa0>)
 8003552:	f003 fb23 	bl	8006b9c <HAL_TIM_Encoder_Init>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800355c:	f7ff f930 	bl	80027c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003560:	2300      	movs	r3, #0
 8003562:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003564:	2300      	movs	r3, #0
 8003566:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	4619      	mov	r1, r3
 800356c:	4805      	ldr	r0, [pc, #20]	@ (8003584 <MX_TIM4_Init+0xa0>)
 800356e:	f004 f9d9 	bl	8007924 <HAL_TIMEx_MasterConfigSynchronization>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003578:	f7ff f922 	bl	80027c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800357c:	bf00      	nop
 800357e:	3730      	adds	r7, #48	@ 0x30
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	200007e4 	.word	0x200007e4
 8003588:	40000800 	.word	0x40000800

0800358c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003592:	f107 0308 	add.w	r3, r7, #8
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	609a      	str	r2, [r3, #8]
 800359e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035a0:	463b      	mov	r3, r7
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80035a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003620 <MX_TIM5_Init+0x94>)
 80035aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003624 <MX_TIM5_Init+0x98>)
 80035ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 24999;
 80035ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003620 <MX_TIM5_Init+0x94>)
 80035b0:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 80035b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003620 <MX_TIM5_Init+0x94>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9;
 80035bc:	4b18      	ldr	r3, [pc, #96]	@ (8003620 <MX_TIM5_Init+0x94>)
 80035be:	2209      	movs	r2, #9
 80035c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035c2:	4b17      	ldr	r3, [pc, #92]	@ (8003620 <MX_TIM5_Init+0x94>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035c8:	4b15      	ldr	r3, [pc, #84]	@ (8003620 <MX_TIM5_Init+0x94>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80035ce:	4814      	ldr	r0, [pc, #80]	@ (8003620 <MX_TIM5_Init+0x94>)
 80035d0:	f003 f928 	bl	8006824 <HAL_TIM_Base_Init>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80035da:	f7ff f8f1 	bl	80027c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80035e4:	f107 0308 	add.w	r3, r7, #8
 80035e8:	4619      	mov	r1, r3
 80035ea:	480d      	ldr	r0, [pc, #52]	@ (8003620 <MX_TIM5_Init+0x94>)
 80035ec:	f003 fddc 	bl	80071a8 <HAL_TIM_ConfigClockSource>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80035f6:	f7ff f8e3 	bl	80027c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035fa:	2300      	movs	r3, #0
 80035fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035fe:	2300      	movs	r3, #0
 8003600:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003602:	463b      	mov	r3, r7
 8003604:	4619      	mov	r1, r3
 8003606:	4806      	ldr	r0, [pc, #24]	@ (8003620 <MX_TIM5_Init+0x94>)
 8003608:	f004 f98c 	bl	8007924 <HAL_TIMEx_MasterConfigSynchronization>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003612:	f7ff f8d5 	bl	80027c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003616:	bf00      	nop
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	2000082c 	.word	0x2000082c
 8003624:	40000c00 	.word	0x40000c00

08003628 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a18      	ldr	r2, [pc, #96]	@ (8003698 <HAL_TIM_Base_MspInit+0x70>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d10e      	bne.n	8003658 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	4b17      	ldr	r3, [pc, #92]	@ (800369c <HAL_TIM_Base_MspInit+0x74>)
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	4a16      	ldr	r2, [pc, #88]	@ (800369c <HAL_TIM_Base_MspInit+0x74>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6453      	str	r3, [r2, #68]	@ 0x44
 800364a:	4b14      	ldr	r3, [pc, #80]	@ (800369c <HAL_TIM_Base_MspInit+0x74>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003656:	e01a      	b.n	800368e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a10      	ldr	r2, [pc, #64]	@ (80036a0 <HAL_TIM_Base_MspInit+0x78>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d115      	bne.n	800368e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	4b0d      	ldr	r3, [pc, #52]	@ (800369c <HAL_TIM_Base_MspInit+0x74>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	4a0c      	ldr	r2, [pc, #48]	@ (800369c <HAL_TIM_Base_MspInit+0x74>)
 800366c:	f043 0308 	orr.w	r3, r3, #8
 8003670:	6413      	str	r3, [r2, #64]	@ 0x40
 8003672:	4b0a      	ldr	r3, [pc, #40]	@ (800369c <HAL_TIM_Base_MspInit+0x74>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800367e:	2200      	movs	r2, #0
 8003680:	2100      	movs	r1, #0
 8003682:	2032      	movs	r0, #50	@ 0x32
 8003684:	f000 fdef 	bl	8004266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003688:	2032      	movs	r0, #50	@ 0x32
 800368a:	f000 fe08 	bl	800429e <HAL_NVIC_EnableIRQ>
}
 800368e:	bf00      	nop
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40010000 	.word	0x40010000
 800369c:	40023800 	.word	0x40023800
 80036a0:	40000c00 	.word	0x40000c00

080036a4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	@ 0x28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ac:	f107 0314 	add.w	r3, r7, #20
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	609a      	str	r2, [r3, #8]
 80036b8:	60da      	str	r2, [r3, #12]
 80036ba:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003738 <HAL_TIM_Encoder_MspInit+0x94>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d133      	bne.n	800372e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	4b1c      	ldr	r3, [pc, #112]	@ (800373c <HAL_TIM_Encoder_MspInit+0x98>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	4a1b      	ldr	r2, [pc, #108]	@ (800373c <HAL_TIM_Encoder_MspInit+0x98>)
 80036d0:	f043 0304 	orr.w	r3, r3, #4
 80036d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036d6:	4b19      	ldr	r3, [pc, #100]	@ (800373c <HAL_TIM_Encoder_MspInit+0x98>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	4b15      	ldr	r3, [pc, #84]	@ (800373c <HAL_TIM_Encoder_MspInit+0x98>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ea:	4a14      	ldr	r2, [pc, #80]	@ (800373c <HAL_TIM_Encoder_MspInit+0x98>)
 80036ec:	f043 0302 	orr.w	r3, r3, #2
 80036f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036f2:	4b12      	ldr	r3, [pc, #72]	@ (800373c <HAL_TIM_Encoder_MspInit+0x98>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036fe:	23c0      	movs	r3, #192	@ 0xc0
 8003700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003702:	2302      	movs	r3, #2
 8003704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003706:	2302      	movs	r3, #2
 8003708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370a:	2300      	movs	r3, #0
 800370c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800370e:	2302      	movs	r3, #2
 8003710:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003712:	f107 0314 	add.w	r3, r7, #20
 8003716:	4619      	mov	r1, r3
 8003718:	4809      	ldr	r0, [pc, #36]	@ (8003740 <HAL_TIM_Encoder_MspInit+0x9c>)
 800371a:	f001 f96d 	bl	80049f8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800371e:	2200      	movs	r2, #0
 8003720:	2100      	movs	r1, #0
 8003722:	201e      	movs	r0, #30
 8003724:	f000 fd9f 	bl	8004266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003728:	201e      	movs	r0, #30
 800372a:	f000 fdb8 	bl	800429e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800372e:	bf00      	nop
 8003730:	3728      	adds	r7, #40	@ 0x28
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40000800 	.word	0x40000800
 800373c:	40023800 	.word	0x40023800
 8003740:	40020400 	.word	0x40020400

08003744 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800374c:	f107 030c 	add.w	r3, r7, #12
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a12      	ldr	r2, [pc, #72]	@ (80037ac <HAL_TIM_MspPostInit+0x68>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d11e      	bne.n	80037a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	4b11      	ldr	r3, [pc, #68]	@ (80037b0 <HAL_TIM_MspPostInit+0x6c>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	4a10      	ldr	r2, [pc, #64]	@ (80037b0 <HAL_TIM_MspPostInit+0x6c>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	6313      	str	r3, [r2, #48]	@ 0x30
 8003776:	4b0e      	ldr	r3, [pc, #56]	@ (80037b0 <HAL_TIM_MspPostInit+0x6c>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003782:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003786:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003788:	2302      	movs	r3, #2
 800378a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003790:	2300      	movs	r3, #0
 8003792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003794:	2301      	movs	r3, #1
 8003796:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003798:	f107 030c 	add.w	r3, r7, #12
 800379c:	4619      	mov	r1, r3
 800379e:	4805      	ldr	r0, [pc, #20]	@ (80037b4 <HAL_TIM_MspPostInit+0x70>)
 80037a0:	f001 f92a 	bl	80049f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80037a4:	bf00      	nop
 80037a6:	3720      	adds	r7, #32
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40010000 	.word	0x40010000
 80037b0:	40023800 	.word	0x40023800
 80037b4:	40020000 	.word	0x40020000

080037b8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037bc:	4b11      	ldr	r3, [pc, #68]	@ (8003804 <MX_USART1_UART_Init+0x4c>)
 80037be:	4a12      	ldr	r2, [pc, #72]	@ (8003808 <MX_USART1_UART_Init+0x50>)
 80037c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80037c2:	4b10      	ldr	r3, [pc, #64]	@ (8003804 <MX_USART1_UART_Init+0x4c>)
 80037c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80037c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003804 <MX_USART1_UART_Init+0x4c>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003804 <MX_USART1_UART_Init+0x4c>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <MX_USART1_UART_Init+0x4c>)
 80037d8:	2200      	movs	r2, #0
 80037da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037dc:	4b09      	ldr	r3, [pc, #36]	@ (8003804 <MX_USART1_UART_Init+0x4c>)
 80037de:	220c      	movs	r2, #12
 80037e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037e2:	4b08      	ldr	r3, [pc, #32]	@ (8003804 <MX_USART1_UART_Init+0x4c>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037e8:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <MX_USART1_UART_Init+0x4c>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037ee:	4805      	ldr	r0, [pc, #20]	@ (8003804 <MX_USART1_UART_Init+0x4c>)
 80037f0:	f004 f96c 	bl	8007acc <HAL_UART_Init>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80037fa:	f7fe ffe1 	bl	80027c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20000874 	.word	0x20000874
 8003808:	40011000 	.word	0x40011000

0800380c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	@ 0x28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003814:	f107 0314 	add.w	r3, r7, #20
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a31      	ldr	r2, [pc, #196]	@ (80038f0 <HAL_UART_MspInit+0xe4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d15b      	bne.n	80038e6 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	4b30      	ldr	r3, [pc, #192]	@ (80038f4 <HAL_UART_MspInit+0xe8>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003836:	4a2f      	ldr	r2, [pc, #188]	@ (80038f4 <HAL_UART_MspInit+0xe8>)
 8003838:	f043 0310 	orr.w	r3, r3, #16
 800383c:	6453      	str	r3, [r2, #68]	@ 0x44
 800383e:	4b2d      	ldr	r3, [pc, #180]	@ (80038f4 <HAL_UART_MspInit+0xe8>)
 8003840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	4b29      	ldr	r3, [pc, #164]	@ (80038f4 <HAL_UART_MspInit+0xe8>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	4a28      	ldr	r2, [pc, #160]	@ (80038f4 <HAL_UART_MspInit+0xe8>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	6313      	str	r3, [r2, #48]	@ 0x30
 800385a:	4b26      	ldr	r3, [pc, #152]	@ (80038f4 <HAL_UART_MspInit+0xe8>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003866:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800386a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386c:	2302      	movs	r3, #2
 800386e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003874:	2303      	movs	r3, #3
 8003876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003878:	2307      	movs	r3, #7
 800387a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387c:	f107 0314 	add.w	r3, r7, #20
 8003880:	4619      	mov	r1, r3
 8003882:	481d      	ldr	r0, [pc, #116]	@ (80038f8 <HAL_UART_MspInit+0xec>)
 8003884:	f001 f8b8 	bl	80049f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003888:	4b1c      	ldr	r3, [pc, #112]	@ (80038fc <HAL_UART_MspInit+0xf0>)
 800388a:	4a1d      	ldr	r2, [pc, #116]	@ (8003900 <HAL_UART_MspInit+0xf4>)
 800388c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800388e:	4b1b      	ldr	r3, [pc, #108]	@ (80038fc <HAL_UART_MspInit+0xf0>)
 8003890:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003894:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003896:	4b19      	ldr	r3, [pc, #100]	@ (80038fc <HAL_UART_MspInit+0xf0>)
 8003898:	2200      	movs	r2, #0
 800389a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800389c:	4b17      	ldr	r3, [pc, #92]	@ (80038fc <HAL_UART_MspInit+0xf0>)
 800389e:	2200      	movs	r2, #0
 80038a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038a2:	4b16      	ldr	r3, [pc, #88]	@ (80038fc <HAL_UART_MspInit+0xf0>)
 80038a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038aa:	4b14      	ldr	r3, [pc, #80]	@ (80038fc <HAL_UART_MspInit+0xf0>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038b0:	4b12      	ldr	r3, [pc, #72]	@ (80038fc <HAL_UART_MspInit+0xf0>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80038b6:	4b11      	ldr	r3, [pc, #68]	@ (80038fc <HAL_UART_MspInit+0xf0>)
 80038b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038bc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038be:	4b0f      	ldr	r3, [pc, #60]	@ (80038fc <HAL_UART_MspInit+0xf0>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038c4:	4b0d      	ldr	r3, [pc, #52]	@ (80038fc <HAL_UART_MspInit+0xf0>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80038ca:	480c      	ldr	r0, [pc, #48]	@ (80038fc <HAL_UART_MspInit+0xf0>)
 80038cc:	f000 fd02 	bl	80042d4 <HAL_DMA_Init>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80038d6:	f7fe ff73 	bl	80027c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a07      	ldr	r2, [pc, #28]	@ (80038fc <HAL_UART_MspInit+0xf0>)
 80038de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038e0:	4a06      	ldr	r2, [pc, #24]	@ (80038fc <HAL_UART_MspInit+0xf0>)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80038e6:	bf00      	nop
 80038e8:	3728      	adds	r7, #40	@ 0x28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40011000 	.word	0x40011000
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40020000 	.word	0x40020000
 80038fc:	200008bc 	.word	0x200008bc
 8003900:	40026440 	.word	0x40026440

08003904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003904:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800393c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003908:	f7ff fd3a 	bl	8003380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800390c:	480c      	ldr	r0, [pc, #48]	@ (8003940 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800390e:	490d      	ldr	r1, [pc, #52]	@ (8003944 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003910:	4a0d      	ldr	r2, [pc, #52]	@ (8003948 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003914:	e002      	b.n	800391c <LoopCopyDataInit>

08003916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800391a:	3304      	adds	r3, #4

0800391c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800391c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800391e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003920:	d3f9      	bcc.n	8003916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003922:	4a0a      	ldr	r2, [pc, #40]	@ (800394c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003924:	4c0a      	ldr	r4, [pc, #40]	@ (8003950 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003928:	e001      	b.n	800392e <LoopFillZerobss>

0800392a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800392a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800392c:	3204      	adds	r2, #4

0800392e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800392e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003930:	d3fb      	bcc.n	800392a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003932:	f004 fe31 	bl	8008598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003936:	f7fe fc2b 	bl	8002190 <main>
  bx  lr    
 800393a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800393c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003944:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8003948:	080086f0 	.word	0x080086f0
  ldr r2, =_sbss
 800394c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8003950:	20000920 	.word	0x20000920

08003954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003954:	e7fe      	b.n	8003954 <ADC_IRQHandler>
	...

08003958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800395c:	4b0e      	ldr	r3, [pc, #56]	@ (8003998 <HAL_Init+0x40>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0d      	ldr	r2, [pc, #52]	@ (8003998 <HAL_Init+0x40>)
 8003962:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003968:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <HAL_Init+0x40>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0a      	ldr	r2, [pc, #40]	@ (8003998 <HAL_Init+0x40>)
 800396e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003974:	4b08      	ldr	r3, [pc, #32]	@ (8003998 <HAL_Init+0x40>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a07      	ldr	r2, [pc, #28]	@ (8003998 <HAL_Init+0x40>)
 800397a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800397e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003980:	2003      	movs	r0, #3
 8003982:	f000 fc65 	bl	8004250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003986:	200f      	movs	r0, #15
 8003988:	f000 f808 	bl	800399c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800398c:	f7ff fc5a 	bl	8003244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40023c00 	.word	0x40023c00

0800399c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039a4:	4b12      	ldr	r3, [pc, #72]	@ (80039f0 <HAL_InitTick+0x54>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	4b12      	ldr	r3, [pc, #72]	@ (80039f4 <HAL_InitTick+0x58>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	4619      	mov	r1, r3
 80039ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80039b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fc7d 	bl	80042ba <HAL_SYSTICK_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e00e      	b.n	80039e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b0f      	cmp	r3, #15
 80039ce:	d80a      	bhi.n	80039e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039d0:	2200      	movs	r2, #0
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295
 80039d8:	f000 fc45 	bl	8004266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039dc:	4a06      	ldr	r2, [pc, #24]	@ (80039f8 <HAL_InitTick+0x5c>)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e000      	b.n	80039e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000030 	.word	0x20000030
 80039f4:	20000038 	.word	0x20000038
 80039f8:	20000034 	.word	0x20000034

080039fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a00:	4b06      	ldr	r3, [pc, #24]	@ (8003a1c <HAL_IncTick+0x20>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b06      	ldr	r3, [pc, #24]	@ (8003a20 <HAL_IncTick+0x24>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	4a04      	ldr	r2, [pc, #16]	@ (8003a20 <HAL_IncTick+0x24>)
 8003a0e:	6013      	str	r3, [r2, #0]
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000038 	.word	0x20000038
 8003a20:	2000091c 	.word	0x2000091c

08003a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  return uwTick;
 8003a28:	4b03      	ldr	r3, [pc, #12]	@ (8003a38 <HAL_GetTick+0x14>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	2000091c 	.word	0x2000091c

08003a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a44:	f7ff ffee 	bl	8003a24 <HAL_GetTick>
 8003a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d005      	beq.n	8003a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a56:	4b0a      	ldr	r3, [pc, #40]	@ (8003a80 <HAL_Delay+0x44>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a62:	bf00      	nop
 8003a64:	f7ff ffde 	bl	8003a24 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d8f7      	bhi.n	8003a64 <HAL_Delay+0x28>
  {
  }
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000038 	.word	0x20000038

08003a84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e033      	b.n	8003b02 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fc fd60 	bl	8000568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d118      	bne.n	8003af4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003aca:	f023 0302 	bic.w	r3, r3, #2
 8003ace:	f043 0202 	orr.w	r2, r3, #2
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f9ee 	bl	8003eb8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae6:	f023 0303 	bic.w	r3, r3, #3
 8003aea:	f043 0201 	orr.w	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	641a      	str	r2, [r3, #64]	@ 0x40
 8003af2:	e001      	b.n	8003af8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_ADC_Start+0x1a>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e097      	b.n	8003c56 <HAL_ADC_Start+0x14a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d018      	beq.n	8003b6e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b4c:	4b45      	ldr	r3, [pc, #276]	@ (8003c64 <HAL_ADC_Start+0x158>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a45      	ldr	r2, [pc, #276]	@ (8003c68 <HAL_ADC_Start+0x15c>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	0c9a      	lsrs	r2, r3, #18
 8003b58:	4613      	mov	r3, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4413      	add	r3, r2
 8003b5e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003b60:	e002      	b.n	8003b68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f9      	bne.n	8003b62 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d15f      	bne.n	8003c3c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003b84:	f023 0301 	bic.w	r3, r3, #1
 8003b88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d007      	beq.n	8003bae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003ba6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bba:	d106      	bne.n	8003bca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc0:	f023 0206 	bic.w	r2, r3, #6
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	645a      	str	r2, [r3, #68]	@ 0x44
 8003bc8:	e002      	b.n	8003bd0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bd8:	4b24      	ldr	r3, [pc, #144]	@ (8003c6c <HAL_ADC_Start+0x160>)
 8003bda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003be4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d129      	bne.n	8003c54 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c0e:	609a      	str	r2, [r3, #8]
 8003c10:	e020      	b.n	8003c54 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a16      	ldr	r2, [pc, #88]	@ (8003c70 <HAL_ADC_Start+0x164>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d11b      	bne.n	8003c54 <HAL_ADC_Start+0x148>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d114      	bne.n	8003c54 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c38:	609a      	str	r2, [r3, #8]
 8003c3a:	e00b      	b.n	8003c54 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	f043 0210 	orr.w	r2, r3, #16
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4c:	f043 0201 	orr.w	r2, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	20000030 	.word	0x20000030
 8003c68:	431bde83 	.word	0x431bde83
 8003c6c:	40012300 	.word	0x40012300
 8003c70:	40012000 	.word	0x40012000

08003c74 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x1c>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e105      	b.n	8003e9c <HAL_ADC_ConfigChannel+0x228>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b09      	cmp	r3, #9
 8003c9e:	d925      	bls.n	8003cec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68d9      	ldr	r1, [r3, #12]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	4613      	mov	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3b1e      	subs	r3, #30
 8003cb6:	2207      	movs	r2, #7
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	43da      	mvns	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68d9      	ldr	r1, [r3, #12]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	4603      	mov	r3, r0
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4403      	add	r3, r0
 8003cde:	3b1e      	subs	r3, #30
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	e022      	b.n	8003d32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6919      	ldr	r1, [r3, #16]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	4413      	add	r3, r2
 8003d00:	2207      	movs	r2, #7
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43da      	mvns	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6919      	ldr	r1, [r3, #16]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	4618      	mov	r0, r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4403      	add	r3, r0
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d824      	bhi.n	8003d84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	3b05      	subs	r3, #5
 8003d4c:	221f      	movs	r2, #31
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43da      	mvns	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	400a      	ands	r2, r1
 8003d5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	4618      	mov	r0, r3
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	3b05      	subs	r3, #5
 8003d76:	fa00 f203 	lsl.w	r2, r0, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d82:	e04c      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b0c      	cmp	r3, #12
 8003d8a:	d824      	bhi.n	8003dd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3b23      	subs	r3, #35	@ 0x23
 8003d9e:	221f      	movs	r2, #31
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43da      	mvns	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	400a      	ands	r2, r1
 8003dac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	4618      	mov	r0, r3
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3b23      	subs	r3, #35	@ 0x23
 8003dc8:	fa00 f203 	lsl.w	r2, r0, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003dd4:	e023      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	3b41      	subs	r3, #65	@ 0x41
 8003de8:	221f      	movs	r2, #31
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43da      	mvns	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	400a      	ands	r2, r1
 8003df6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	4618      	mov	r0, r3
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	3b41      	subs	r3, #65	@ 0x41
 8003e12:	fa00 f203 	lsl.w	r2, r0, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e1e:	4b22      	ldr	r3, [pc, #136]	@ (8003ea8 <HAL_ADC_ConfigChannel+0x234>)
 8003e20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a21      	ldr	r2, [pc, #132]	@ (8003eac <HAL_ADC_ConfigChannel+0x238>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d109      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x1cc>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b12      	cmp	r3, #18
 8003e32:	d105      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a19      	ldr	r2, [pc, #100]	@ (8003eac <HAL_ADC_ConfigChannel+0x238>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d123      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x21e>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d003      	beq.n	8003e5a <HAL_ADC_ConfigChannel+0x1e6>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b11      	cmp	r3, #17
 8003e58:	d11b      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b10      	cmp	r3, #16
 8003e6c:	d111      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e6e:	4b10      	ldr	r3, [pc, #64]	@ (8003eb0 <HAL_ADC_ConfigChannel+0x23c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a10      	ldr	r2, [pc, #64]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x240>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	0c9a      	lsrs	r2, r3, #18
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e84:	e002      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f9      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40012300 	.word	0x40012300
 8003eac:	40012000 	.word	0x40012000
 8003eb0:	20000030 	.word	0x20000030
 8003eb4:	431bde83 	.word	0x431bde83

08003eb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ec0:	4b79      	ldr	r3, [pc, #484]	@ (80040a8 <ADC_Init+0x1f0>)
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003eec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	021a      	lsls	r2, r3, #8
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003f10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6899      	ldr	r1, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4a:	4a58      	ldr	r2, [pc, #352]	@ (80040ac <ADC_Init+0x1f4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d022      	beq.n	8003f96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6899      	ldr	r1, [r3, #8]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003f80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6899      	ldr	r1, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	e00f      	b.n	8003fb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003fb4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0202 	bic.w	r2, r2, #2
 8003fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6899      	ldr	r1, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	7e1b      	ldrb	r3, [r3, #24]
 8003fd0:	005a      	lsls	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01b      	beq.n	800401c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ff2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004002:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6859      	ldr	r1, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400e:	3b01      	subs	r3, #1
 8004010:	035a      	lsls	r2, r3, #13
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	e007      	b.n	800402c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800402a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800403a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	3b01      	subs	r3, #1
 8004048:	051a      	lsls	r2, r3, #20
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004060:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6899      	ldr	r1, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800406e:	025a      	lsls	r2, r3, #9
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6899      	ldr	r1, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	029a      	lsls	r2, r3, #10
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	609a      	str	r2, [r3, #8]
}
 800409c:	bf00      	nop
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	40012300 	.word	0x40012300
 80040ac:	0f000001 	.word	0x0f000001

080040b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040c0:	4b0c      	ldr	r3, [pc, #48]	@ (80040f4 <__NVIC_SetPriorityGrouping+0x44>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040cc:	4013      	ands	r3, r2
 80040ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040e2:	4a04      	ldr	r2, [pc, #16]	@ (80040f4 <__NVIC_SetPriorityGrouping+0x44>)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	60d3      	str	r3, [r2, #12]
}
 80040e8:	bf00      	nop
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	e000ed00 	.word	0xe000ed00

080040f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040fc:	4b04      	ldr	r3, [pc, #16]	@ (8004110 <__NVIC_GetPriorityGrouping+0x18>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	0a1b      	lsrs	r3, r3, #8
 8004102:	f003 0307 	and.w	r3, r3, #7
}
 8004106:	4618      	mov	r0, r3
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	e000ed00 	.word	0xe000ed00

08004114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800411e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004122:	2b00      	cmp	r3, #0
 8004124:	db0b      	blt.n	800413e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	f003 021f 	and.w	r2, r3, #31
 800412c:	4907      	ldr	r1, [pc, #28]	@ (800414c <__NVIC_EnableIRQ+0x38>)
 800412e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	2001      	movs	r0, #1
 8004136:	fa00 f202 	lsl.w	r2, r0, r2
 800413a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	e000e100 	.word	0xe000e100

08004150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	6039      	str	r1, [r7, #0]
 800415a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800415c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004160:	2b00      	cmp	r3, #0
 8004162:	db0a      	blt.n	800417a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	b2da      	uxtb	r2, r3
 8004168:	490c      	ldr	r1, [pc, #48]	@ (800419c <__NVIC_SetPriority+0x4c>)
 800416a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416e:	0112      	lsls	r2, r2, #4
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	440b      	add	r3, r1
 8004174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004178:	e00a      	b.n	8004190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	b2da      	uxtb	r2, r3
 800417e:	4908      	ldr	r1, [pc, #32]	@ (80041a0 <__NVIC_SetPriority+0x50>)
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	3b04      	subs	r3, #4
 8004188:	0112      	lsls	r2, r2, #4
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	440b      	add	r3, r1
 800418e:	761a      	strb	r2, [r3, #24]
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	e000e100 	.word	0xe000e100
 80041a0:	e000ed00 	.word	0xe000ed00

080041a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b089      	sub	sp, #36	@ 0x24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f1c3 0307 	rsb	r3, r3, #7
 80041be:	2b04      	cmp	r3, #4
 80041c0:	bf28      	it	cs
 80041c2:	2304      	movcs	r3, #4
 80041c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3304      	adds	r3, #4
 80041ca:	2b06      	cmp	r3, #6
 80041cc:	d902      	bls.n	80041d4 <NVIC_EncodePriority+0x30>
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3b03      	subs	r3, #3
 80041d2:	e000      	b.n	80041d6 <NVIC_EncodePriority+0x32>
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d8:	f04f 32ff 	mov.w	r2, #4294967295
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43da      	mvns	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	401a      	ands	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041ec:	f04f 31ff 	mov.w	r1, #4294967295
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	fa01 f303 	lsl.w	r3, r1, r3
 80041f6:	43d9      	mvns	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041fc:	4313      	orrs	r3, r2
         );
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3724      	adds	r7, #36	@ 0x24
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
	...

0800420c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3b01      	subs	r3, #1
 8004218:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800421c:	d301      	bcc.n	8004222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800421e:	2301      	movs	r3, #1
 8004220:	e00f      	b.n	8004242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004222:	4a0a      	ldr	r2, [pc, #40]	@ (800424c <SysTick_Config+0x40>)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3b01      	subs	r3, #1
 8004228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800422a:	210f      	movs	r1, #15
 800422c:	f04f 30ff 	mov.w	r0, #4294967295
 8004230:	f7ff ff8e 	bl	8004150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004234:	4b05      	ldr	r3, [pc, #20]	@ (800424c <SysTick_Config+0x40>)
 8004236:	2200      	movs	r2, #0
 8004238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800423a:	4b04      	ldr	r3, [pc, #16]	@ (800424c <SysTick_Config+0x40>)
 800423c:	2207      	movs	r2, #7
 800423e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	e000e010 	.word	0xe000e010

08004250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff ff29 	bl	80040b0 <__NVIC_SetPriorityGrouping>
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004266:	b580      	push	{r7, lr}
 8004268:	b086      	sub	sp, #24
 800426a:	af00      	add	r7, sp, #0
 800426c:	4603      	mov	r3, r0
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
 8004272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004278:	f7ff ff3e 	bl	80040f8 <__NVIC_GetPriorityGrouping>
 800427c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	6978      	ldr	r0, [r7, #20]
 8004284:	f7ff ff8e 	bl	80041a4 <NVIC_EncodePriority>
 8004288:	4602      	mov	r2, r0
 800428a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800428e:	4611      	mov	r1, r2
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff ff5d 	bl	8004150 <__NVIC_SetPriority>
}
 8004296:	bf00      	nop
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	4603      	mov	r3, r0
 80042a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff ff31 	bl	8004114 <__NVIC_EnableIRQ>
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff ffa2 	bl	800420c <SysTick_Config>
 80042c8:	4603      	mov	r3, r0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042e0:	f7ff fba0 	bl	8003a24 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e099      	b.n	8004424 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004310:	e00f      	b.n	8004332 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004312:	f7ff fb87 	bl	8003a24 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b05      	cmp	r3, #5
 800431e:	d908      	bls.n	8004332 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2203      	movs	r2, #3
 800432a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e078      	b.n	8004424 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e8      	bne.n	8004312 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4b38      	ldr	r3, [pc, #224]	@ (800442c <HAL_DMA_Init+0x158>)
 800434c:	4013      	ands	r3, r2
 800434e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800435e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800436a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4313      	orrs	r3, r2
 8004382:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	2b04      	cmp	r3, #4
 800438a:	d107      	bne.n	800439c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	4313      	orrs	r3, r2
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f023 0307 	bic.w	r3, r3, #7
 80043b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d117      	bne.n	80043f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00e      	beq.n	80043f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 fa91 	bl	8004900 <DMA_CheckFifoParam>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2240      	movs	r2, #64	@ 0x40
 80043e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80043f2:	2301      	movs	r3, #1
 80043f4:	e016      	b.n	8004424 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fa48 	bl	8004894 <DMA_CalcBaseAndBitshift>
 8004404:	4603      	mov	r3, r0
 8004406:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440c:	223f      	movs	r2, #63	@ 0x3f
 800440e:	409a      	lsls	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	f010803f 	.word	0xf010803f

08004430 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004446:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_DMA_Start_IT+0x26>
 8004452:	2302      	movs	r3, #2
 8004454:	e040      	b.n	80044d8 <HAL_DMA_Start_IT+0xa8>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b01      	cmp	r3, #1
 8004468:	d12f      	bne.n	80044ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2202      	movs	r2, #2
 800446e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68b9      	ldr	r1, [r7, #8]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 f9da 	bl	8004838 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004488:	223f      	movs	r2, #63	@ 0x3f
 800448a:	409a      	lsls	r2, r3
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0216 	orr.w	r2, r2, #22
 800449e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0208 	orr.w	r2, r2, #8
 80044b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	e005      	b.n	80044d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80044d2:	2302      	movs	r3, #2
 80044d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80044d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d004      	beq.n	80044fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2280      	movs	r2, #128	@ 0x80
 80044f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e00c      	b.n	8004518 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2205      	movs	r2, #5
 8004502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0201 	bic.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004530:	4b8e      	ldr	r3, [pc, #568]	@ (800476c <HAL_DMA_IRQHandler+0x248>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a8e      	ldr	r2, [pc, #568]	@ (8004770 <HAL_DMA_IRQHandler+0x24c>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	0a9b      	lsrs	r3, r3, #10
 800453c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004542:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454e:	2208      	movs	r2, #8
 8004550:	409a      	lsls	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4013      	ands	r3, r2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01a      	beq.n	8004590 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d013      	beq.n	8004590 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0204 	bic.w	r2, r2, #4
 8004576:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800457c:	2208      	movs	r2, #8
 800457e:	409a      	lsls	r2, r3
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004588:	f043 0201 	orr.w	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004594:	2201      	movs	r2, #1
 8004596:	409a      	lsls	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4013      	ands	r3, r2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d012      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b2:	2201      	movs	r2, #1
 80045b4:	409a      	lsls	r2, r3
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045be:	f043 0202 	orr.w	r2, r3, #2
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ca:	2204      	movs	r2, #4
 80045cc:	409a      	lsls	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d012      	beq.n	80045fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00b      	beq.n	80045fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e8:	2204      	movs	r2, #4
 80045ea:	409a      	lsls	r2, r3
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f4:	f043 0204 	orr.w	r2, r3, #4
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004600:	2210      	movs	r2, #16
 8004602:	409a      	lsls	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d043      	beq.n	8004694 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d03c      	beq.n	8004694 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800461e:	2210      	movs	r2, #16
 8004620:	409a      	lsls	r2, r3
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d018      	beq.n	8004666 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d108      	bne.n	8004654 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d024      	beq.n	8004694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	4798      	blx	r3
 8004652:	e01f      	b.n	8004694 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01b      	beq.n	8004694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	4798      	blx	r3
 8004664:	e016      	b.n	8004694 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d107      	bne.n	8004684 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0208 	bic.w	r2, r2, #8
 8004682:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004698:	2220      	movs	r2, #32
 800469a:	409a      	lsls	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4013      	ands	r3, r2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 808f 	beq.w	80047c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8087 	beq.w	80047c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ba:	2220      	movs	r2, #32
 80046bc:	409a      	lsls	r2, r3
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b05      	cmp	r3, #5
 80046cc:	d136      	bne.n	800473c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0216 	bic.w	r2, r2, #22
 80046dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695a      	ldr	r2, [r3, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d103      	bne.n	80046fe <HAL_DMA_IRQHandler+0x1da>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0208 	bic.w	r2, r2, #8
 800470c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004712:	223f      	movs	r2, #63	@ 0x3f
 8004714:	409a      	lsls	r2, r3
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800472e:	2b00      	cmp	r3, #0
 8004730:	d07e      	beq.n	8004830 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	4798      	blx	r3
        }
        return;
 800473a:	e079      	b.n	8004830 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d01d      	beq.n	8004786 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10d      	bne.n	8004774 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475c:	2b00      	cmp	r3, #0
 800475e:	d031      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	4798      	blx	r3
 8004768:	e02c      	b.n	80047c4 <HAL_DMA_IRQHandler+0x2a0>
 800476a:	bf00      	nop
 800476c:	20000030 	.word	0x20000030
 8004770:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d023      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	4798      	blx	r3
 8004784:	e01e      	b.n	80047c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10f      	bne.n	80047b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0210 	bic.w	r2, r2, #16
 80047a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d032      	beq.n	8004832 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d022      	beq.n	800481e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2205      	movs	r2, #5
 80047dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0201 	bic.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	3301      	adds	r3, #1
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d307      	bcc.n	800480c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f2      	bne.n	80047f0 <HAL_DMA_IRQHandler+0x2cc>
 800480a:	e000      	b.n	800480e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800480c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	4798      	blx	r3
 800482e:	e000      	b.n	8004832 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004830:	bf00      	nop
    }
  }
}
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004854:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b40      	cmp	r3, #64	@ 0x40
 8004864:	d108      	bne.n	8004878 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004876:	e007      	b.n	8004888 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	60da      	str	r2, [r3, #12]
}
 8004888:	bf00      	nop
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	3b10      	subs	r3, #16
 80048a4:	4a14      	ldr	r2, [pc, #80]	@ (80048f8 <DMA_CalcBaseAndBitshift+0x64>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	091b      	lsrs	r3, r3, #4
 80048ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048ae:	4a13      	ldr	r2, [pc, #76]	@ (80048fc <DMA_CalcBaseAndBitshift+0x68>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d909      	bls.n	80048d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80048ca:	f023 0303 	bic.w	r3, r3, #3
 80048ce:	1d1a      	adds	r2, r3, #4
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80048d4:	e007      	b.n	80048e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	aaaaaaab 	.word	0xaaaaaaab
 80048fc:	080086d8 	.word	0x080086d8

08004900 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004910:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d11f      	bne.n	800495a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b03      	cmp	r3, #3
 800491e:	d856      	bhi.n	80049ce <DMA_CheckFifoParam+0xce>
 8004920:	a201      	add	r2, pc, #4	@ (adr r2, 8004928 <DMA_CheckFifoParam+0x28>)
 8004922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004926:	bf00      	nop
 8004928:	08004939 	.word	0x08004939
 800492c:	0800494b 	.word	0x0800494b
 8004930:	08004939 	.word	0x08004939
 8004934:	080049cf 	.word	0x080049cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d046      	beq.n	80049d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004948:	e043      	b.n	80049d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004952:	d140      	bne.n	80049d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004958:	e03d      	b.n	80049d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004962:	d121      	bne.n	80049a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b03      	cmp	r3, #3
 8004968:	d837      	bhi.n	80049da <DMA_CheckFifoParam+0xda>
 800496a:	a201      	add	r2, pc, #4	@ (adr r2, 8004970 <DMA_CheckFifoParam+0x70>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	08004981 	.word	0x08004981
 8004974:	08004987 	.word	0x08004987
 8004978:	08004981 	.word	0x08004981
 800497c:	08004999 	.word	0x08004999
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	73fb      	strb	r3, [r7, #15]
      break;
 8004984:	e030      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d025      	beq.n	80049de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004996:	e022      	b.n	80049de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80049a0:	d11f      	bne.n	80049e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049a6:	e01c      	b.n	80049e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d903      	bls.n	80049b6 <DMA_CheckFifoParam+0xb6>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d003      	beq.n	80049bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049b4:	e018      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	73fb      	strb	r3, [r7, #15]
      break;
 80049ba:	e015      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00e      	beq.n	80049e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	73fb      	strb	r3, [r7, #15]
      break;
 80049cc:	e00b      	b.n	80049e6 <DMA_CheckFifoParam+0xe6>
      break;
 80049ce:	bf00      	nop
 80049d0:	e00a      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
      break;
 80049d2:	bf00      	nop
 80049d4:	e008      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
      break;
 80049d6:	bf00      	nop
 80049d8:	e006      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
      break;
 80049da:	bf00      	nop
 80049dc:	e004      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
      break;
 80049de:	bf00      	nop
 80049e0:	e002      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80049e2:	bf00      	nop
 80049e4:	e000      	b.n	80049e8 <DMA_CheckFifoParam+0xe8>
      break;
 80049e6:	bf00      	nop
    }
  } 
  
  return status; 
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop

080049f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b089      	sub	sp, #36	@ 0x24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	e159      	b.n	8004cc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a14:	2201      	movs	r2, #1
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4013      	ands	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	f040 8148 	bne.w	8004cc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d005      	beq.n	8004a4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d130      	bne.n	8004aac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	2203      	movs	r2, #3
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a80:	2201      	movs	r2, #1
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	091b      	lsrs	r3, r3, #4
 8004a96:	f003 0201 	and.w	r2, r3, #1
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d017      	beq.n	8004ae8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d123      	bne.n	8004b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	08da      	lsrs	r2, r3, #3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3208      	adds	r2, #8
 8004afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	220f      	movs	r2, #15
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	43db      	mvns	r3, r3
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4013      	ands	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	08da      	lsrs	r2, r3, #3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3208      	adds	r2, #8
 8004b36:	69b9      	ldr	r1, [r7, #24]
 8004b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	2203      	movs	r2, #3
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	4013      	ands	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 0203 	and.w	r2, r3, #3
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 80a2 	beq.w	8004cc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	4b57      	ldr	r3, [pc, #348]	@ (8004ce0 <HAL_GPIO_Init+0x2e8>)
 8004b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b86:	4a56      	ldr	r2, [pc, #344]	@ (8004ce0 <HAL_GPIO_Init+0x2e8>)
 8004b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b8e:	4b54      	ldr	r3, [pc, #336]	@ (8004ce0 <HAL_GPIO_Init+0x2e8>)
 8004b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b9a:	4a52      	ldr	r2, [pc, #328]	@ (8004ce4 <HAL_GPIO_Init+0x2ec>)
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	089b      	lsrs	r3, r3, #2
 8004ba0:	3302      	adds	r3, #2
 8004ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	220f      	movs	r2, #15
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a49      	ldr	r2, [pc, #292]	@ (8004ce8 <HAL_GPIO_Init+0x2f0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d019      	beq.n	8004bfa <HAL_GPIO_Init+0x202>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a48      	ldr	r2, [pc, #288]	@ (8004cec <HAL_GPIO_Init+0x2f4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d013      	beq.n	8004bf6 <HAL_GPIO_Init+0x1fe>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a47      	ldr	r2, [pc, #284]	@ (8004cf0 <HAL_GPIO_Init+0x2f8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00d      	beq.n	8004bf2 <HAL_GPIO_Init+0x1fa>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a46      	ldr	r2, [pc, #280]	@ (8004cf4 <HAL_GPIO_Init+0x2fc>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d007      	beq.n	8004bee <HAL_GPIO_Init+0x1f6>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a45      	ldr	r2, [pc, #276]	@ (8004cf8 <HAL_GPIO_Init+0x300>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d101      	bne.n	8004bea <HAL_GPIO_Init+0x1f2>
 8004be6:	2304      	movs	r3, #4
 8004be8:	e008      	b.n	8004bfc <HAL_GPIO_Init+0x204>
 8004bea:	2307      	movs	r3, #7
 8004bec:	e006      	b.n	8004bfc <HAL_GPIO_Init+0x204>
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e004      	b.n	8004bfc <HAL_GPIO_Init+0x204>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e002      	b.n	8004bfc <HAL_GPIO_Init+0x204>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <HAL_GPIO_Init+0x204>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	f002 0203 	and.w	r2, r2, #3
 8004c02:	0092      	lsls	r2, r2, #2
 8004c04:	4093      	lsls	r3, r2
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c0c:	4935      	ldr	r1, [pc, #212]	@ (8004ce4 <HAL_GPIO_Init+0x2ec>)
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	089b      	lsrs	r3, r3, #2
 8004c12:	3302      	adds	r3, #2
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c1a:	4b38      	ldr	r3, [pc, #224]	@ (8004cfc <HAL_GPIO_Init+0x304>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	43db      	mvns	r3, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4013      	ands	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c3e:	4a2f      	ldr	r2, [pc, #188]	@ (8004cfc <HAL_GPIO_Init+0x304>)
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c44:	4b2d      	ldr	r3, [pc, #180]	@ (8004cfc <HAL_GPIO_Init+0x304>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	4013      	ands	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c68:	4a24      	ldr	r2, [pc, #144]	@ (8004cfc <HAL_GPIO_Init+0x304>)
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c6e:	4b23      	ldr	r3, [pc, #140]	@ (8004cfc <HAL_GPIO_Init+0x304>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	43db      	mvns	r3, r3
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c92:	4a1a      	ldr	r2, [pc, #104]	@ (8004cfc <HAL_GPIO_Init+0x304>)
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c98:	4b18      	ldr	r3, [pc, #96]	@ (8004cfc <HAL_GPIO_Init+0x304>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cbc:	4a0f      	ldr	r2, [pc, #60]	@ (8004cfc <HAL_GPIO_Init+0x304>)
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	2b0f      	cmp	r3, #15
 8004ccc:	f67f aea2 	bls.w	8004a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	bf00      	nop
 8004cd4:	3724      	adds	r7, #36	@ 0x24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	40013800 	.word	0x40013800
 8004ce8:	40020000 	.word	0x40020000
 8004cec:	40020400 	.word	0x40020400
 8004cf0:	40020800 	.word	0x40020800
 8004cf4:	40020c00 	.word	0x40020c00
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40013c00 	.word	0x40013c00

08004d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	887b      	ldrh	r3, [r7, #2]
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
 8004d1c:	e001      	b.n	8004d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	807b      	strh	r3, [r7, #2]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d40:	787b      	ldrb	r3, [r7, #1]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d46:	887a      	ldrh	r2, [r7, #2]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d4c:	e003      	b.n	8004d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d4e:	887b      	ldrh	r3, [r7, #2]
 8004d50:	041a      	lsls	r2, r3, #16
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	619a      	str	r2, [r3, #24]
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
	...

08004d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e12b      	b.n	8004fce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fd f942 	bl	8002014 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2224      	movs	r2, #36	@ 0x24
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0201 	bic.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004db6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004dc8:	f000 fd54 	bl	8005874 <HAL_RCC_GetPCLK1Freq>
 8004dcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	4a81      	ldr	r2, [pc, #516]	@ (8004fd8 <HAL_I2C_Init+0x274>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d807      	bhi.n	8004de8 <HAL_I2C_Init+0x84>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4a80      	ldr	r2, [pc, #512]	@ (8004fdc <HAL_I2C_Init+0x278>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	bf94      	ite	ls
 8004de0:	2301      	movls	r3, #1
 8004de2:	2300      	movhi	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	e006      	b.n	8004df6 <HAL_I2C_Init+0x92>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4a7d      	ldr	r2, [pc, #500]	@ (8004fe0 <HAL_I2C_Init+0x27c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	bf94      	ite	ls
 8004df0:	2301      	movls	r3, #1
 8004df2:	2300      	movhi	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e0e7      	b.n	8004fce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4a78      	ldr	r2, [pc, #480]	@ (8004fe4 <HAL_I2C_Init+0x280>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	0c9b      	lsrs	r3, r3, #18
 8004e08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	4a6a      	ldr	r2, [pc, #424]	@ (8004fd8 <HAL_I2C_Init+0x274>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d802      	bhi.n	8004e38 <HAL_I2C_Init+0xd4>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	3301      	adds	r3, #1
 8004e36:	e009      	b.n	8004e4c <HAL_I2C_Init+0xe8>
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004e3e:	fb02 f303 	mul.w	r3, r2, r3
 8004e42:	4a69      	ldr	r2, [pc, #420]	@ (8004fe8 <HAL_I2C_Init+0x284>)
 8004e44:	fba2 2303 	umull	r2, r3, r2, r3
 8004e48:	099b      	lsrs	r3, r3, #6
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	430b      	orrs	r3, r1
 8004e52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004e5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	495c      	ldr	r1, [pc, #368]	@ (8004fd8 <HAL_I2C_Init+0x274>)
 8004e68:	428b      	cmp	r3, r1
 8004e6a:	d819      	bhi.n	8004ea0 <HAL_I2C_Init+0x13c>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	1e59      	subs	r1, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e7a:	1c59      	adds	r1, r3, #1
 8004e7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e80:	400b      	ands	r3, r1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_I2C_Init+0x138>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1e59      	subs	r1, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e94:	3301      	adds	r3, #1
 8004e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e9a:	e051      	b.n	8004f40 <HAL_I2C_Init+0x1dc>
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	e04f      	b.n	8004f40 <HAL_I2C_Init+0x1dc>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d111      	bne.n	8004ecc <HAL_I2C_Init+0x168>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	1e58      	subs	r0, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6859      	ldr	r1, [r3, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	440b      	add	r3, r1
 8004eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2301      	moveq	r3, #1
 8004ec6:	2300      	movne	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	e012      	b.n	8004ef2 <HAL_I2C_Init+0x18e>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	1e58      	subs	r0, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6859      	ldr	r1, [r3, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	0099      	lsls	r1, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_I2C_Init+0x196>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e022      	b.n	8004f40 <HAL_I2C_Init+0x1dc>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10e      	bne.n	8004f20 <HAL_I2C_Init+0x1bc>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	1e58      	subs	r0, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6859      	ldr	r1, [r3, #4]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	440b      	add	r3, r1
 8004f10:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f14:	3301      	adds	r3, #1
 8004f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f1e:	e00f      	b.n	8004f40 <HAL_I2C_Init+0x1dc>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	1e58      	subs	r0, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6859      	ldr	r1, [r3, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	0099      	lsls	r1, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f36:	3301      	adds	r3, #1
 8004f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	6809      	ldr	r1, [r1, #0]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69da      	ldr	r2, [r3, #28]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004f6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6911      	ldr	r1, [r2, #16]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	68d2      	ldr	r2, [r2, #12]
 8004f7a:	4311      	orrs	r1, r2
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	430b      	orrs	r3, r1
 8004f82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695a      	ldr	r2, [r3, #20]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	000186a0 	.word	0x000186a0
 8004fdc:	001e847f 	.word	0x001e847f
 8004fe0:	003d08ff 	.word	0x003d08ff
 8004fe4:	431bde83 	.word	0x431bde83
 8004fe8:	10624dd3 	.word	0x10624dd3

08004fec <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004ff2:	4b06      	ldr	r3, [pc, #24]	@ (800500c <HAL_PWR_EnableBkUpAccess+0x20>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004ff8:	4b05      	ldr	r3, [pc, #20]	@ (8005010 <HAL_PWR_EnableBkUpAccess+0x24>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004ffe:	687b      	ldr	r3, [r7, #4]
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	420e0020 	.word	0x420e0020
 8005010:	40007000 	.word	0x40007000

08005014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e267      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d075      	beq.n	800511e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005032:	4b88      	ldr	r3, [pc, #544]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 030c 	and.w	r3, r3, #12
 800503a:	2b04      	cmp	r3, #4
 800503c:	d00c      	beq.n	8005058 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800503e:	4b85      	ldr	r3, [pc, #532]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005046:	2b08      	cmp	r3, #8
 8005048:	d112      	bne.n	8005070 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800504a:	4b82      	ldr	r3, [pc, #520]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005052:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005056:	d10b      	bne.n	8005070 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005058:	4b7e      	ldr	r3, [pc, #504]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d05b      	beq.n	800511c <HAL_RCC_OscConfig+0x108>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d157      	bne.n	800511c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e242      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005078:	d106      	bne.n	8005088 <HAL_RCC_OscConfig+0x74>
 800507a:	4b76      	ldr	r3, [pc, #472]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a75      	ldr	r2, [pc, #468]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	e01d      	b.n	80050c4 <HAL_RCC_OscConfig+0xb0>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005090:	d10c      	bne.n	80050ac <HAL_RCC_OscConfig+0x98>
 8005092:	4b70      	ldr	r3, [pc, #448]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a6f      	ldr	r2, [pc, #444]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005098:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	4b6d      	ldr	r3, [pc, #436]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a6c      	ldr	r2, [pc, #432]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80050a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e00b      	b.n	80050c4 <HAL_RCC_OscConfig+0xb0>
 80050ac:	4b69      	ldr	r3, [pc, #420]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a68      	ldr	r2, [pc, #416]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80050b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	4b66      	ldr	r3, [pc, #408]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a65      	ldr	r2, [pc, #404]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80050be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d013      	beq.n	80050f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050cc:	f7fe fcaa 	bl	8003a24 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d4:	f7fe fca6 	bl	8003a24 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b64      	cmp	r3, #100	@ 0x64
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e207      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e6:	4b5b      	ldr	r3, [pc, #364]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0f0      	beq.n	80050d4 <HAL_RCC_OscConfig+0xc0>
 80050f2:	e014      	b.n	800511e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f4:	f7fe fc96 	bl	8003a24 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050fc:	f7fe fc92 	bl	8003a24 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b64      	cmp	r3, #100	@ 0x64
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e1f3      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800510e:	4b51      	ldr	r3, [pc, #324]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f0      	bne.n	80050fc <HAL_RCC_OscConfig+0xe8>
 800511a:	e000      	b.n	800511e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800511c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d063      	beq.n	80051f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800512a:	4b4a      	ldr	r3, [pc, #296]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 030c 	and.w	r3, r3, #12
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00b      	beq.n	800514e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005136:	4b47      	ldr	r3, [pc, #284]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800513e:	2b08      	cmp	r3, #8
 8005140:	d11c      	bne.n	800517c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005142:	4b44      	ldr	r3, [pc, #272]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d116      	bne.n	800517c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800514e:	4b41      	ldr	r3, [pc, #260]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d005      	beq.n	8005166 <HAL_RCC_OscConfig+0x152>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d001      	beq.n	8005166 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e1c7      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005166:	4b3b      	ldr	r3, [pc, #236]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	4937      	ldr	r1, [pc, #220]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005176:	4313      	orrs	r3, r2
 8005178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800517a:	e03a      	b.n	80051f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d020      	beq.n	80051c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005184:	4b34      	ldr	r3, [pc, #208]	@ (8005258 <HAL_RCC_OscConfig+0x244>)
 8005186:	2201      	movs	r2, #1
 8005188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518a:	f7fe fc4b 	bl	8003a24 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005192:	f7fe fc47 	bl	8003a24 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e1a8      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0f0      	beq.n	8005192 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b0:	4b28      	ldr	r3, [pc, #160]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	4925      	ldr	r1, [pc, #148]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	600b      	str	r3, [r1, #0]
 80051c4:	e015      	b.n	80051f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051c6:	4b24      	ldr	r3, [pc, #144]	@ (8005258 <HAL_RCC_OscConfig+0x244>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fe fc2a 	bl	8003a24 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d4:	f7fe fc26 	bl	8003a24 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e187      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d036      	beq.n	800526c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d016      	beq.n	8005234 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005206:	4b15      	ldr	r3, [pc, #84]	@ (800525c <HAL_RCC_OscConfig+0x248>)
 8005208:	2201      	movs	r2, #1
 800520a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520c:	f7fe fc0a 	bl	8003a24 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005214:	f7fe fc06 	bl	8003a24 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e167      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005226:	4b0b      	ldr	r3, [pc, #44]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0x200>
 8005232:	e01b      	b.n	800526c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005234:	4b09      	ldr	r3, [pc, #36]	@ (800525c <HAL_RCC_OscConfig+0x248>)
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800523a:	f7fe fbf3 	bl	8003a24 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005240:	e00e      	b.n	8005260 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005242:	f7fe fbef 	bl	8003a24 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d907      	bls.n	8005260 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e150      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
 8005254:	40023800 	.word	0x40023800
 8005258:	42470000 	.word	0x42470000
 800525c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005260:	4b88      	ldr	r3, [pc, #544]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1ea      	bne.n	8005242 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 8097 	beq.w	80053a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800527a:	2300      	movs	r3, #0
 800527c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800527e:	4b81      	ldr	r3, [pc, #516]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10f      	bne.n	80052aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800528a:	2300      	movs	r3, #0
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	4b7d      	ldr	r3, [pc, #500]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005292:	4a7c      	ldr	r2, [pc, #496]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005298:	6413      	str	r3, [r2, #64]	@ 0x40
 800529a:	4b7a      	ldr	r3, [pc, #488]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 800529c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052a2:	60bb      	str	r3, [r7, #8]
 80052a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052a6:	2301      	movs	r3, #1
 80052a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052aa:	4b77      	ldr	r3, [pc, #476]	@ (8005488 <HAL_RCC_OscConfig+0x474>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d118      	bne.n	80052e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052b6:	4b74      	ldr	r3, [pc, #464]	@ (8005488 <HAL_RCC_OscConfig+0x474>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a73      	ldr	r2, [pc, #460]	@ (8005488 <HAL_RCC_OscConfig+0x474>)
 80052bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c2:	f7fe fbaf 	bl	8003a24 <HAL_GetTick>
 80052c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c8:	e008      	b.n	80052dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ca:	f7fe fbab 	bl	8003a24 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e10c      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052dc:	4b6a      	ldr	r3, [pc, #424]	@ (8005488 <HAL_RCC_OscConfig+0x474>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0f0      	beq.n	80052ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d106      	bne.n	80052fe <HAL_RCC_OscConfig+0x2ea>
 80052f0:	4b64      	ldr	r3, [pc, #400]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 80052f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f4:	4a63      	ldr	r2, [pc, #396]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 80052f6:	f043 0301 	orr.w	r3, r3, #1
 80052fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80052fc:	e01c      	b.n	8005338 <HAL_RCC_OscConfig+0x324>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b05      	cmp	r3, #5
 8005304:	d10c      	bne.n	8005320 <HAL_RCC_OscConfig+0x30c>
 8005306:	4b5f      	ldr	r3, [pc, #380]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530a:	4a5e      	ldr	r2, [pc, #376]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 800530c:	f043 0304 	orr.w	r3, r3, #4
 8005310:	6713      	str	r3, [r2, #112]	@ 0x70
 8005312:	4b5c      	ldr	r3, [pc, #368]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005316:	4a5b      	ldr	r2, [pc, #364]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005318:	f043 0301 	orr.w	r3, r3, #1
 800531c:	6713      	str	r3, [r2, #112]	@ 0x70
 800531e:	e00b      	b.n	8005338 <HAL_RCC_OscConfig+0x324>
 8005320:	4b58      	ldr	r3, [pc, #352]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005324:	4a57      	ldr	r2, [pc, #348]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005326:	f023 0301 	bic.w	r3, r3, #1
 800532a:	6713      	str	r3, [r2, #112]	@ 0x70
 800532c:	4b55      	ldr	r3, [pc, #340]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 800532e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005330:	4a54      	ldr	r2, [pc, #336]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005332:	f023 0304 	bic.w	r3, r3, #4
 8005336:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d015      	beq.n	800536c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005340:	f7fe fb70 	bl	8003a24 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005346:	e00a      	b.n	800535e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005348:	f7fe fb6c 	bl	8003a24 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005356:	4293      	cmp	r3, r2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e0cb      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800535e:	4b49      	ldr	r3, [pc, #292]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0ee      	beq.n	8005348 <HAL_RCC_OscConfig+0x334>
 800536a:	e014      	b.n	8005396 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800536c:	f7fe fb5a 	bl	8003a24 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005372:	e00a      	b.n	800538a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005374:	f7fe fb56 	bl	8003a24 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005382:	4293      	cmp	r3, r2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e0b5      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800538a:	4b3e      	ldr	r3, [pc, #248]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1ee      	bne.n	8005374 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005396:	7dfb      	ldrb	r3, [r7, #23]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d105      	bne.n	80053a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539c:	4b39      	ldr	r3, [pc, #228]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	4a38      	ldr	r2, [pc, #224]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 80053a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 80a1 	beq.w	80054f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053b2:	4b34      	ldr	r3, [pc, #208]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 030c 	and.w	r3, r3, #12
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d05c      	beq.n	8005478 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d141      	bne.n	800544a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c6:	4b31      	ldr	r3, [pc, #196]	@ (800548c <HAL_RCC_OscConfig+0x478>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053cc:	f7fe fb2a 	bl	8003a24 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d4:	f7fe fb26 	bl	8003a24 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e087      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e6:	4b27      	ldr	r3, [pc, #156]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1f0      	bne.n	80053d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69da      	ldr	r2, [r3, #28]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005400:	019b      	lsls	r3, r3, #6
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005408:	085b      	lsrs	r3, r3, #1
 800540a:	3b01      	subs	r3, #1
 800540c:	041b      	lsls	r3, r3, #16
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005414:	061b      	lsls	r3, r3, #24
 8005416:	491b      	ldr	r1, [pc, #108]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005418:	4313      	orrs	r3, r2
 800541a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800541c:	4b1b      	ldr	r3, [pc, #108]	@ (800548c <HAL_RCC_OscConfig+0x478>)
 800541e:	2201      	movs	r2, #1
 8005420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005422:	f7fe faff 	bl	8003a24 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800542a:	f7fe fafb 	bl	8003a24 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e05c      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543c:	4b11      	ldr	r3, [pc, #68]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0f0      	beq.n	800542a <HAL_RCC_OscConfig+0x416>
 8005448:	e054      	b.n	80054f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544a:	4b10      	ldr	r3, [pc, #64]	@ (800548c <HAL_RCC_OscConfig+0x478>)
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005450:	f7fe fae8 	bl	8003a24 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005458:	f7fe fae4 	bl	8003a24 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e045      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546a:	4b06      	ldr	r3, [pc, #24]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f0      	bne.n	8005458 <HAL_RCC_OscConfig+0x444>
 8005476:	e03d      	b.n	80054f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d107      	bne.n	8005490 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e038      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
 8005484:	40023800 	.word	0x40023800
 8005488:	40007000 	.word	0x40007000
 800548c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005490:	4b1b      	ldr	r3, [pc, #108]	@ (8005500 <HAL_RCC_OscConfig+0x4ec>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d028      	beq.n	80054f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d121      	bne.n	80054f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d11a      	bne.n	80054f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054c0:	4013      	ands	r3, r2
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d111      	bne.n	80054f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d6:	085b      	lsrs	r3, r3, #1
 80054d8:	3b01      	subs	r3, #1
 80054da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054dc:	429a      	cmp	r2, r3
 80054de:	d107      	bne.n	80054f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d001      	beq.n	80054f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40023800 	.word	0x40023800

08005504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e0cc      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005518:	4b68      	ldr	r3, [pc, #416]	@ (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d90c      	bls.n	8005540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005526:	4b65      	ldr	r3, [pc, #404]	@ (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800552e:	4b63      	ldr	r3, [pc, #396]	@ (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d001      	beq.n	8005540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e0b8      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d020      	beq.n	800558e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005558:	4b59      	ldr	r3, [pc, #356]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	4a58      	ldr	r2, [pc, #352]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005562:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005570:	4b53      	ldr	r3, [pc, #332]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4a52      	ldr	r2, [pc, #328]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800557a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800557c:	4b50      	ldr	r3, [pc, #320]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	494d      	ldr	r1, [pc, #308]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	4313      	orrs	r3, r2
 800558c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d044      	beq.n	8005624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d107      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a2:	4b47      	ldr	r3, [pc, #284]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d119      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e07f      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d003      	beq.n	80055c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d107      	bne.n	80055d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c2:	4b3f      	ldr	r3, [pc, #252]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d109      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e06f      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d2:	4b3b      	ldr	r3, [pc, #236]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e067      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055e2:	4b37      	ldr	r3, [pc, #220]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f023 0203 	bic.w	r2, r3, #3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	4934      	ldr	r1, [pc, #208]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055f4:	f7fe fa16 	bl	8003a24 <HAL_GetTick>
 80055f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fa:	e00a      	b.n	8005612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055fc:	f7fe fa12 	bl	8003a24 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800560a:	4293      	cmp	r3, r2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e04f      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005612:	4b2b      	ldr	r3, [pc, #172]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 020c 	and.w	r2, r3, #12
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	429a      	cmp	r2, r3
 8005622:	d1eb      	bne.n	80055fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005624:	4b25      	ldr	r3, [pc, #148]	@ (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d20c      	bcs.n	800564c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005632:	4b22      	ldr	r3, [pc, #136]	@ (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800563a:	4b20      	ldr	r3, [pc, #128]	@ (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d001      	beq.n	800564c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e032      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005658:	4b19      	ldr	r3, [pc, #100]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	4916      	ldr	r1, [pc, #88]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005666:	4313      	orrs	r3, r2
 8005668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d009      	beq.n	800568a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005676:	4b12      	ldr	r3, [pc, #72]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	490e      	ldr	r1, [pc, #56]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005686:	4313      	orrs	r3, r2
 8005688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800568a:	f000 f821 	bl	80056d0 <HAL_RCC_GetSysClockFreq>
 800568e:	4602      	mov	r2, r0
 8005690:	4b0b      	ldr	r3, [pc, #44]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	490a      	ldr	r1, [pc, #40]	@ (80056c4 <HAL_RCC_ClockConfig+0x1c0>)
 800569c:	5ccb      	ldrb	r3, [r1, r3]
 800569e:	fa22 f303 	lsr.w	r3, r2, r3
 80056a2:	4a09      	ldr	r2, [pc, #36]	@ (80056c8 <HAL_RCC_ClockConfig+0x1c4>)
 80056a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80056a6:	4b09      	ldr	r3, [pc, #36]	@ (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fe f976 	bl	800399c <HAL_InitTick>

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40023c00 	.word	0x40023c00
 80056c0:	40023800 	.word	0x40023800
 80056c4:	080086c0 	.word	0x080086c0
 80056c8:	20000030 	.word	0x20000030
 80056cc:	20000034 	.word	0x20000034

080056d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d4:	b090      	sub	sp, #64	@ 0x40
 80056d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056e8:	4b59      	ldr	r3, [pc, #356]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x180>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f003 030c 	and.w	r3, r3, #12
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d00d      	beq.n	8005710 <HAL_RCC_GetSysClockFreq+0x40>
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	f200 80a1 	bhi.w	800583c <HAL_RCC_GetSysClockFreq+0x16c>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <HAL_RCC_GetSysClockFreq+0x34>
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d003      	beq.n	800570a <HAL_RCC_GetSysClockFreq+0x3a>
 8005702:	e09b      	b.n	800583c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005704:	4b53      	ldr	r3, [pc, #332]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x184>)
 8005706:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005708:	e09b      	b.n	8005842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800570a:	4b53      	ldr	r3, [pc, #332]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x188>)
 800570c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800570e:	e098      	b.n	8005842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005710:	4b4f      	ldr	r3, [pc, #316]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x180>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005718:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800571a:	4b4d      	ldr	r3, [pc, #308]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x180>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d028      	beq.n	8005778 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005726:	4b4a      	ldr	r3, [pc, #296]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x180>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	099b      	lsrs	r3, r3, #6
 800572c:	2200      	movs	r2, #0
 800572e:	623b      	str	r3, [r7, #32]
 8005730:	627a      	str	r2, [r7, #36]	@ 0x24
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005738:	2100      	movs	r1, #0
 800573a:	4b47      	ldr	r3, [pc, #284]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x188>)
 800573c:	fb03 f201 	mul.w	r2, r3, r1
 8005740:	2300      	movs	r3, #0
 8005742:	fb00 f303 	mul.w	r3, r0, r3
 8005746:	4413      	add	r3, r2
 8005748:	4a43      	ldr	r2, [pc, #268]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x188>)
 800574a:	fba0 1202 	umull	r1, r2, r0, r2
 800574e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005750:	460a      	mov	r2, r1
 8005752:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005754:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005756:	4413      	add	r3, r2
 8005758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800575a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575c:	2200      	movs	r2, #0
 800575e:	61bb      	str	r3, [r7, #24]
 8005760:	61fa      	str	r2, [r7, #28]
 8005762:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005766:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800576a:	f7fa fd33 	bl	80001d4 <__aeabi_uldivmod>
 800576e:	4602      	mov	r2, r0
 8005770:	460b      	mov	r3, r1
 8005772:	4613      	mov	r3, r2
 8005774:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005776:	e053      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005778:	4b35      	ldr	r3, [pc, #212]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x180>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	099b      	lsrs	r3, r3, #6
 800577e:	2200      	movs	r2, #0
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	617a      	str	r2, [r7, #20]
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800578a:	f04f 0b00 	mov.w	fp, #0
 800578e:	4652      	mov	r2, sl
 8005790:	465b      	mov	r3, fp
 8005792:	f04f 0000 	mov.w	r0, #0
 8005796:	f04f 0100 	mov.w	r1, #0
 800579a:	0159      	lsls	r1, r3, #5
 800579c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057a0:	0150      	lsls	r0, r2, #5
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	ebb2 080a 	subs.w	r8, r2, sl
 80057aa:	eb63 090b 	sbc.w	r9, r3, fp
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80057ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80057be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80057c2:	ebb2 0408 	subs.w	r4, r2, r8
 80057c6:	eb63 0509 	sbc.w	r5, r3, r9
 80057ca:	f04f 0200 	mov.w	r2, #0
 80057ce:	f04f 0300 	mov.w	r3, #0
 80057d2:	00eb      	lsls	r3, r5, #3
 80057d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057d8:	00e2      	lsls	r2, r4, #3
 80057da:	4614      	mov	r4, r2
 80057dc:	461d      	mov	r5, r3
 80057de:	eb14 030a 	adds.w	r3, r4, sl
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	eb45 030b 	adc.w	r3, r5, fp
 80057e8:	607b      	str	r3, [r7, #4]
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	f04f 0300 	mov.w	r3, #0
 80057f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057f6:	4629      	mov	r1, r5
 80057f8:	028b      	lsls	r3, r1, #10
 80057fa:	4621      	mov	r1, r4
 80057fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005800:	4621      	mov	r1, r4
 8005802:	028a      	lsls	r2, r1, #10
 8005804:	4610      	mov	r0, r2
 8005806:	4619      	mov	r1, r3
 8005808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580a:	2200      	movs	r2, #0
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	60fa      	str	r2, [r7, #12]
 8005810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005814:	f7fa fcde 	bl	80001d4 <__aeabi_uldivmod>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4613      	mov	r3, r2
 800581e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005820:	4b0b      	ldr	r3, [pc, #44]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x180>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	0c1b      	lsrs	r3, r3, #16
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	3301      	adds	r3, #1
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005830:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005834:	fbb2 f3f3 	udiv	r3, r2, r3
 8005838:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800583a:	e002      	b.n	8005842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800583c:	4b05      	ldr	r3, [pc, #20]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x184>)
 800583e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005844:	4618      	mov	r0, r3
 8005846:	3740      	adds	r7, #64	@ 0x40
 8005848:	46bd      	mov	sp, r7
 800584a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800584e:	bf00      	nop
 8005850:	40023800 	.word	0x40023800
 8005854:	00f42400 	.word	0x00f42400
 8005858:	017d7840 	.word	0x017d7840

0800585c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005860:	4b03      	ldr	r3, [pc, #12]	@ (8005870 <HAL_RCC_GetHCLKFreq+0x14>)
 8005862:	681b      	ldr	r3, [r3, #0]
}
 8005864:	4618      	mov	r0, r3
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	20000030 	.word	0x20000030

08005874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005878:	f7ff fff0 	bl	800585c <HAL_RCC_GetHCLKFreq>
 800587c:	4602      	mov	r2, r0
 800587e:	4b05      	ldr	r3, [pc, #20]	@ (8005894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	0a9b      	lsrs	r3, r3, #10
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	4903      	ldr	r1, [pc, #12]	@ (8005898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800588a:	5ccb      	ldrb	r3, [r1, r3]
 800588c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005890:	4618      	mov	r0, r3
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40023800 	.word	0x40023800
 8005898:	080086d0 	.word	0x080086d0

0800589c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058a0:	f7ff ffdc 	bl	800585c <HAL_RCC_GetHCLKFreq>
 80058a4:	4602      	mov	r2, r0
 80058a6:	4b05      	ldr	r3, [pc, #20]	@ (80058bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	0b5b      	lsrs	r3, r3, #13
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	4903      	ldr	r1, [pc, #12]	@ (80058c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058b2:	5ccb      	ldrb	r3, [r1, r3]
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40023800 	.word	0x40023800
 80058c0:	080086d0 	.word	0x080086d0

080058c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d105      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d035      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058ec:	4b67      	ldr	r3, [pc, #412]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058f2:	f7fe f897 	bl	8003a24 <HAL_GetTick>
 80058f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058f8:	e008      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058fa:	f7fe f893 	bl	8003a24 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d901      	bls.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e0ba      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800590c:	4b60      	ldr	r3, [pc, #384]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1f0      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	019a      	lsls	r2, r3, #6
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	071b      	lsls	r3, r3, #28
 8005924:	495a      	ldr	r1, [pc, #360]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800592c:	4b57      	ldr	r3, [pc, #348]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800592e:	2201      	movs	r2, #1
 8005930:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005932:	f7fe f877 	bl	8003a24 <HAL_GetTick>
 8005936:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005938:	e008      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800593a:	f7fe f873 	bl	8003a24 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e09a      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800594c:	4b50      	ldr	r3, [pc, #320]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0f0      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 8083 	beq.w	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	4b49      	ldr	r3, [pc, #292]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800596c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596e:	4a48      	ldr	r2, [pc, #288]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005974:	6413      	str	r3, [r2, #64]	@ 0x40
 8005976:	4b46      	ldr	r3, [pc, #280]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005982:	4b44      	ldr	r3, [pc, #272]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a43      	ldr	r2, [pc, #268]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800598c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800598e:	f7fe f849 	bl	8003a24 <HAL_GetTick>
 8005992:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005994:	e008      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005996:	f7fe f845 	bl	8003a24 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d901      	bls.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e06c      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80059a8:	4b3a      	ldr	r3, [pc, #232]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0f0      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059b4:	4b36      	ldr	r3, [pc, #216]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059bc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d02f      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d028      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059de:	2201      	movs	r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80059e8:	4a29      	ldr	r2, [pc, #164]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059ee:	4b28      	ldr	r3, [pc, #160]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d114      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059fa:	f7fe f813 	bl	8003a24 <HAL_GetTick>
 80059fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a00:	e00a      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a02:	f7fe f80f 	bl	8003a24 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e034      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a18:	4b1d      	ldr	r3, [pc, #116]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0ee      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a30:	d10d      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005a32:	4b17      	ldr	r3, [pc, #92]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005a42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a46:	4912      	ldr	r1, [pc, #72]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	608b      	str	r3, [r1, #8]
 8005a4c:	e005      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005a4e:	4b10      	ldr	r3, [pc, #64]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	4a0f      	ldr	r2, [pc, #60]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a54:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a58:	6093      	str	r3, [r2, #8]
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a5c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a66:	490a      	ldr	r1, [pc, #40]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	7c1a      	ldrb	r2, [r3, #16]
 8005a7c:	4b07      	ldr	r3, [pc, #28]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a7e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	42470068 	.word	0x42470068
 8005a90:	40023800 	.word	0x40023800
 8005a94:	40007000 	.word	0x40007000
 8005a98:	42470e40 	.word	0x42470e40
 8005a9c:	424711e0 	.word	0x424711e0

08005aa0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e073      	b.n	8005b9e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	7f5b      	ldrb	r3, [r3, #29]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d105      	bne.n	8005acc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fc feda 	bl	8002880 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b10      	cmp	r3, #16
 8005ade:	d055      	beq.n	8005b8c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	22ca      	movs	r2, #202	@ 0xca
 8005ae6:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2253      	movs	r2, #83	@ 0x53
 8005aee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fa49 	bl	8005f88 <RTC_EnterInitMode>
 8005af6:	4603      	mov	r3, r0
 8005af8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d12c      	bne.n	8005b5a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6812      	ldr	r2, [r2, #0]
 8005b0a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005b0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b12:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6899      	ldr	r1, [r3, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	68d2      	ldr	r2, [r2, #12]
 8005b3a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6919      	ldr	r1, [r3, #16]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	041a      	lsls	r2, r3, #16
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fa50 	bl	8005ff6 <RTC_ExitInitMode>
 8005b56:	4603      	mov	r3, r0
 8005b58:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d110      	bne.n	8005b82 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b6e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699a      	ldr	r2, [r3, #24]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	22ff      	movs	r2, #255	@ 0xff
 8005b88:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b8a:	e001      	b.n	8005b90 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d102      	bne.n	8005b9c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ba6:	b590      	push	{r4, r7, lr}
 8005ba8:	b087      	sub	sp, #28
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	7f1b      	ldrb	r3, [r3, #28]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_RTC_SetTime+0x1c>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e087      	b.n	8005cd2 <HAL_RTC_SetTime+0x12c>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d126      	bne.n	8005c22 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d102      	bne.n	8005be8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2200      	movs	r2, #0
 8005be6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 fa27 	bl	8006040 <RTC_ByteToBcd2>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	785b      	ldrb	r3, [r3, #1]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fa20 	bl	8006040 <RTC_ByteToBcd2>
 8005c00:	4603      	mov	r3, r0
 8005c02:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c04:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	789b      	ldrb	r3, [r3, #2]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fa18 	bl	8006040 <RTC_ByteToBcd2>
 8005c10:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c12:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	78db      	ldrb	r3, [r3, #3]
 8005c1a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	e018      	b.n	8005c54 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d102      	bne.n	8005c36 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2200      	movs	r2, #0
 8005c34:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c42:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c48:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	78db      	ldrb	r3, [r3, #3]
 8005c4e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	22ca      	movs	r2, #202	@ 0xca
 8005c5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2253      	movs	r2, #83	@ 0x53
 8005c62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 f98f 	bl	8005f88 <RTC_EnterInitMode>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005c6e:	7cfb      	ldrb	r3, [r7, #19]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d120      	bne.n	8005cb6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005c7e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005c82:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005c92:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6899      	ldr	r1, [r3, #8]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 f9a2 	bl	8005ff6 <RTC_ExitInitMode>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005cb6:	7cfb      	ldrb	r3, [r7, #19]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d102      	bne.n	8005cc2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	22ff      	movs	r2, #255	@ 0xff
 8005cc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	771a      	strb	r2, [r3, #28]

  return status;
 8005cd0:	7cfb      	ldrb	r3, [r7, #19]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd90      	pop	{r4, r7, pc}

08005cda <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b086      	sub	sp, #24
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005d0c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005d10:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	0c1b      	lsrs	r3, r3, #16
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	0a1b      	lsrs	r3, r3, #8
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	0d9b      	lsrs	r3, r3, #22
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d11a      	bne.n	8005d8c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 f98e 	bl	800607c <RTC_Bcd2ToByte>
 8005d60:	4603      	mov	r3, r0
 8005d62:	461a      	mov	r2, r3
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	785b      	ldrb	r3, [r3, #1]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 f985 	bl	800607c <RTC_Bcd2ToByte>
 8005d72:	4603      	mov	r3, r0
 8005d74:	461a      	mov	r2, r3
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	789b      	ldrb	r3, [r3, #2]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 f97c 	bl	800607c <RTC_Bcd2ToByte>
 8005d84:	4603      	mov	r3, r0
 8005d86:	461a      	mov	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d96:	b590      	push	{r4, r7, lr}
 8005d98:	b087      	sub	sp, #28
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	7f1b      	ldrb	r3, [r3, #28]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_RTC_SetDate+0x1c>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e071      	b.n	8005e96 <HAL_RTC_SetDate+0x100>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10e      	bne.n	8005de2 <HAL_RTC_SetDate+0x4c>
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	f003 0310 	and.w	r3, r3, #16
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d008      	beq.n	8005de2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	f023 0310 	bic.w	r3, r3, #16
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	330a      	adds	r3, #10
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d11c      	bne.n	8005e22 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	78db      	ldrb	r3, [r3, #3]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 f927 	bl	8006040 <RTC_ByteToBcd2>
 8005df2:	4603      	mov	r3, r0
 8005df4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 f920 	bl	8006040 <RTC_ByteToBcd2>
 8005e00:	4603      	mov	r3, r0
 8005e02:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e04:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	789b      	ldrb	r3, [r3, #2]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 f918 	bl	8006040 <RTC_ByteToBcd2>
 8005e10:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005e12:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	e00e      	b.n	8005e40 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	78db      	ldrb	r3, [r3, #3]
 8005e26:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	785b      	ldrb	r3, [r3, #1]
 8005e2c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e2e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005e34:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	22ca      	movs	r2, #202	@ 0xca
 8005e46:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2253      	movs	r2, #83	@ 0x53
 8005e4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 f899 	bl	8005f88 <RTC_EnterInitMode>
 8005e56:	4603      	mov	r3, r0
 8005e58:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005e5a:	7cfb      	ldrb	r3, [r7, #19]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10c      	bne.n	8005e7a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005e6a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005e6e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f8c0 	bl	8005ff6 <RTC_ExitInitMode>
 8005e76:	4603      	mov	r3, r0
 8005e78:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005e7a:	7cfb      	ldrb	r3, [r7, #19]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d102      	bne.n	8005e86 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	22ff      	movs	r2, #255	@ 0xff
 8005e8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	771a      	strb	r2, [r3, #28]

  return status;
 8005e94:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd90      	pop	{r4, r7, pc}

08005e9e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b086      	sub	sp, #24
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005eb8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	0c1b      	lsrs	r3, r3, #16
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	0a1b      	lsrs	r3, r3, #8
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	f003 031f 	and.w	r3, r3, #31
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	0b5b      	lsrs	r3, r3, #13
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d11a      	bne.n	8005f32 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	78db      	ldrb	r3, [r3, #3]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 f8bb 	bl	800607c <RTC_Bcd2ToByte>
 8005f06:	4603      	mov	r3, r0
 8005f08:	461a      	mov	r2, r3
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	785b      	ldrb	r3, [r3, #1]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 f8b2 	bl	800607c <RTC_Bcd2ToByte>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	789b      	ldrb	r3, [r3, #2]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 f8a9 	bl	800607c <RTC_Bcd2ToByte>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8005f84 <HAL_RTC_WaitForSynchro+0x48>)
 8005f4e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f50:	f7fd fd68 	bl	8003a24 <HAL_GetTick>
 8005f54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f56:	e009      	b.n	8005f6c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f58:	f7fd fd64 	bl	8003a24 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f66:	d901      	bls.n	8005f6c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e007      	b.n	8005f7c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0ee      	beq.n	8005f58 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	00013f5f 	.word	0x00013f5f

08005f88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d122      	bne.n	8005fec <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005fb4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fb6:	f7fd fd35 	bl	8003a24 <HAL_GetTick>
 8005fba:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005fbc:	e00c      	b.n	8005fd8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fbe:	f7fd fd31 	bl	8003a24 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fcc:	d904      	bls.n	8005fd8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2204      	movs	r2, #4
 8005fd2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d102      	bne.n	8005fec <RTC_EnterInitMode+0x64>
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d1e8      	bne.n	8005fbe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006010:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 0320 	and.w	r3, r3, #32
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10a      	bne.n	8006036 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff ff8b 	bl	8005f3c <HAL_RTC_WaitForSynchro>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d004      	beq.n	8006036 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2204      	movs	r2, #4
 8006030:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006036:	7bfb      	ldrb	r3, [r7, #15]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	4603      	mov	r3, r0
 8006048:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800604e:	e005      	b.n	800605c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3301      	adds	r3, #1
 8006054:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006056:	79fb      	ldrb	r3, [r7, #7]
 8006058:	3b0a      	subs	r3, #10
 800605a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800605c:	79fb      	ldrb	r3, [r7, #7]
 800605e:	2b09      	cmp	r3, #9
 8006060:	d8f6      	bhi.n	8006050 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	b2db      	uxtb	r3, r3
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	b2da      	uxtb	r2, r3
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	4313      	orrs	r3, r2
 800606e:	b2db      	uxtb	r3, r3
}
 8006070:	4618      	mov	r0, r3
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	4603      	mov	r3, r0
 8006084:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	091b      	lsrs	r3, r3, #4
 800608e:	b2db      	uxtb	r3, r3
 8006090:	461a      	mov	r2, r3
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	4413      	add	r3, r2
 80060aa:	b2db      	uxtb	r3, r3
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e07b      	b.n	80061c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d108      	bne.n	80060e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060da:	d009      	beq.n	80060f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	61da      	str	r2, [r3, #28]
 80060e2:	e005      	b.n	80060f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d106      	bne.n	8006110 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fd f818 	bl	8003140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006126:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	431a      	orrs	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006160:	431a      	orrs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006174:	ea42 0103 	orr.w	r1, r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	0c1b      	lsrs	r3, r3, #16
 800618e:	f003 0104 	and.w	r1, r3, #4
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006196:	f003 0210 	and.w	r2, r3, #16
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69da      	ldr	r2, [r3, #28]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	4613      	mov	r3, r2
 80061d8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d001      	beq.n	80061ea <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80061e6:	2302      	movs	r3, #2
 80061e8:	e097      	b.n	800631a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <HAL_SPI_Transmit_DMA+0x2a>
 80061f0:	88fb      	ldrh	r3, [r7, #6]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e08f      	b.n	800631a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_SPI_Transmit_DMA+0x3c>
 8006204:	2302      	movs	r3, #2
 8006206:	e088      	b.n	800631a <HAL_SPI_Transmit_DMA+0x14e>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2203      	movs	r2, #3
 8006214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	88fa      	ldrh	r2, [r7, #6]
 8006228:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	88fa      	ldrh	r2, [r7, #6]
 800622e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006256:	d10f      	bne.n	8006278 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006266:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006276:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800627c:	4a29      	ldr	r2, [pc, #164]	@ (8006324 <HAL_SPI_Transmit_DMA+0x158>)
 800627e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006284:	4a28      	ldr	r2, [pc, #160]	@ (8006328 <HAL_SPI_Transmit_DMA+0x15c>)
 8006286:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800628c:	4a27      	ldr	r2, [pc, #156]	@ (800632c <HAL_SPI_Transmit_DMA+0x160>)
 800628e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006294:	2200      	movs	r2, #0
 8006296:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a0:	4619      	mov	r1, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	330c      	adds	r3, #12
 80062a8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062ae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80062b0:	f7fe f8be 	bl	8004430 <HAL_DMA_Start_IT>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00b      	beq.n	80062d2 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062be:	f043 0210 	orr.w	r2, r3, #16
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e023      	b.n	800631a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062dc:	2b40      	cmp	r3, #64	@ 0x40
 80062de:	d007      	beq.n	80062f0 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062ee:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0220 	orr.w	r2, r2, #32
 8006306:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0202 	orr.w	r2, r2, #2
 8006316:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	080065e9 	.word	0x080065e9
 8006328:	08006541 	.word	0x08006541
 800632c:	08006605 	.word	0x08006605

08006330 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b088      	sub	sp, #32
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10e      	bne.n	8006370 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006358:	2b00      	cmp	r3, #0
 800635a:	d009      	beq.n	8006370 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	d004      	beq.n	8006370 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	4798      	blx	r3
    return;
 800636e:	e0ce      	b.n	800650e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d009      	beq.n	800638e <HAL_SPI_IRQHandler+0x5e>
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006380:	2b00      	cmp	r3, #0
 8006382:	d004      	beq.n	800638e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	4798      	blx	r3
    return;
 800638c:	e0bf      	b.n	800650e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	f003 0320 	and.w	r3, r3, #32
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10a      	bne.n	80063ae <HAL_SPI_IRQHandler+0x7e>
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d105      	bne.n	80063ae <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 80b0 	beq.w	800650e <HAL_SPI_IRQHandler+0x1de>
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	f003 0320 	and.w	r3, r3, #32
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 80aa 	beq.w	800650e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d023      	beq.n	800640c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d011      	beq.n	80063f4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d4:	f043 0204 	orr.w	r2, r3, #4
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063dc:	2300      	movs	r3, #0
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	e00b      	b.n	800640c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063f4:	2300      	movs	r3, #0
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	693b      	ldr	r3, [r7, #16]
        return;
 800640a:	e080      	b.n	800650e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d014      	beq.n	8006440 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800641a:	f043 0201 	orr.w	r2, r3, #1
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00c      	beq.n	8006464 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800644e:	f043 0208 	orr.w	r2, r3, #8
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006456:	2300      	movs	r3, #0
 8006458:	60bb      	str	r3, [r7, #8]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	60bb      	str	r3, [r7, #8]
 8006462:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006468:	2b00      	cmp	r3, #0
 800646a:	d04f      	beq.n	800650c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800647a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d104      	bne.n	8006498 <HAL_SPI_IRQHandler+0x168>
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d034      	beq.n	8006502 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0203 	bic.w	r2, r2, #3
 80064a6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d011      	beq.n	80064d4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b4:	4a17      	ldr	r2, [pc, #92]	@ (8006514 <HAL_SPI_IRQHandler+0x1e4>)
 80064b6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fe f80f 	bl	80044e0 <HAL_DMA_Abort_IT>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d016      	beq.n	800650a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064e0:	4a0c      	ldr	r2, [pc, #48]	@ (8006514 <HAL_SPI_IRQHandler+0x1e4>)
 80064e2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fd fff9 	bl	80044e0 <HAL_DMA_Abort_IT>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006500:	e003      	b.n	800650a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f812 	bl	800652c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006508:	e000      	b.n	800650c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800650a:	bf00      	nop
    return;
 800650c:	bf00      	nop
  }
}
 800650e:	3720      	adds	r7, #32
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	08006645 	.word	0x08006645

08006518 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800654c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800654e:	f7fd fa69 	bl	8003a24 <HAL_GetTick>
 8006552:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800655e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006562:	d03b      	beq.n	80065dc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 0220 	bic.w	r2, r2, #32
 8006572:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0202 	bic.w	r2, r2, #2
 8006582:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	2164      	movs	r1, #100	@ 0x64
 8006588:	6978      	ldr	r0, [r7, #20]
 800658a:	f000 f8f7 	bl	800677c <SPI_EndRxTxTransaction>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d005      	beq.n	80065a0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006598:	f043 0220 	orr.w	r2, r3, #32
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10a      	bne.n	80065be <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2200      	movs	r2, #0
 80065c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80065d4:	6978      	ldr	r0, [r7, #20]
 80065d6:	f7ff ffa9 	bl	800652c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80065da:	e002      	b.n	80065e2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80065dc:	6978      	ldr	r0, [r7, #20]
 80065de:	f7fa fa67 	bl	8000ab0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7ff ff8e 	bl	8006518 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80065fc:	bf00      	nop
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006610:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0203 	bic.w	r2, r2, #3
 8006620:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006626:	f043 0210 	orr.w	r2, r3, #16
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f7ff ff78 	bl	800652c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800663c:	bf00      	nop
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006650:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f7ff ff64 	bl	800652c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006664:	bf00      	nop
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b088      	sub	sp, #32
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	603b      	str	r3, [r7, #0]
 8006678:	4613      	mov	r3, r2
 800667a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800667c:	f7fd f9d2 	bl	8003a24 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	4413      	add	r3, r2
 800668a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800668c:	f7fd f9ca 	bl	8003a24 <HAL_GetTick>
 8006690:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006692:	4b39      	ldr	r3, [pc, #228]	@ (8006778 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	015b      	lsls	r3, r3, #5
 8006698:	0d1b      	lsrs	r3, r3, #20
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	fb02 f303 	mul.w	r3, r2, r3
 80066a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066a2:	e054      	b.n	800674e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066aa:	d050      	beq.n	800674e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066ac:	f7fd f9ba 	bl	8003a24 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d902      	bls.n	80066c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d13d      	bne.n	800673e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80066d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066da:	d111      	bne.n	8006700 <SPI_WaitFlagStateUntilTimeout+0x94>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066e4:	d004      	beq.n	80066f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ee:	d107      	bne.n	8006700 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006708:	d10f      	bne.n	800672a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006728:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e017      	b.n	800676e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	3b01      	subs	r3, #1
 800674c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689a      	ldr	r2, [r3, #8]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4013      	ands	r3, r2
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	429a      	cmp	r2, r3
 800675c:	bf0c      	ite	eq
 800675e:	2301      	moveq	r3, #1
 8006760:	2300      	movne	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	461a      	mov	r2, r3
 8006766:	79fb      	ldrb	r3, [r7, #7]
 8006768:	429a      	cmp	r2, r3
 800676a:	d19b      	bne.n	80066a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3720      	adds	r7, #32
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20000030 	.word	0x20000030

0800677c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af02      	add	r7, sp, #8
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2201      	movs	r2, #1
 8006790:	2102      	movs	r1, #2
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff ff6a 	bl	800666c <SPI_WaitFlagStateUntilTimeout>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d007      	beq.n	80067ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067a2:	f043 0220 	orr.w	r2, r3, #32
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e032      	b.n	8006814 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067ae:	4b1b      	ldr	r3, [pc, #108]	@ (800681c <SPI_EndRxTxTransaction+0xa0>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006820 <SPI_EndRxTxTransaction+0xa4>)
 80067b4:	fba2 2303 	umull	r2, r3, r2, r3
 80067b8:	0d5b      	lsrs	r3, r3, #21
 80067ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80067be:	fb02 f303 	mul.w	r3, r2, r3
 80067c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067cc:	d112      	bne.n	80067f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	2180      	movs	r1, #128	@ 0x80
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f7ff ff47 	bl	800666c <SPI_WaitFlagStateUntilTimeout>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d016      	beq.n	8006812 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e8:	f043 0220 	orr.w	r2, r3, #32
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e00f      	b.n	8006814 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800680a:	2b80      	cmp	r3, #128	@ 0x80
 800680c:	d0f2      	beq.n	80067f4 <SPI_EndRxTxTransaction+0x78>
 800680e:	e000      	b.n	8006812 <SPI_EndRxTxTransaction+0x96>
        break;
 8006810:	bf00      	nop
  }

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	20000030 	.word	0x20000030
 8006820:	165e9f81 	.word	0x165e9f81

08006824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e041      	b.n	80068ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d106      	bne.n	8006850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7fc feec 	bl	8003628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	3304      	adds	r3, #4
 8006860:	4619      	mov	r1, r3
 8006862:	4610      	mov	r0, r2
 8006864:	f000 fd86 	bl	8007374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d001      	beq.n	80068dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e044      	b.n	8006966 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0201 	orr.w	r2, r2, #1
 80068f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a1e      	ldr	r2, [pc, #120]	@ (8006974 <HAL_TIM_Base_Start_IT+0xb0>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d018      	beq.n	8006930 <HAL_TIM_Base_Start_IT+0x6c>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006906:	d013      	beq.n	8006930 <HAL_TIM_Base_Start_IT+0x6c>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a1a      	ldr	r2, [pc, #104]	@ (8006978 <HAL_TIM_Base_Start_IT+0xb4>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00e      	beq.n	8006930 <HAL_TIM_Base_Start_IT+0x6c>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a19      	ldr	r2, [pc, #100]	@ (800697c <HAL_TIM_Base_Start_IT+0xb8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d009      	beq.n	8006930 <HAL_TIM_Base_Start_IT+0x6c>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a17      	ldr	r2, [pc, #92]	@ (8006980 <HAL_TIM_Base_Start_IT+0xbc>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d004      	beq.n	8006930 <HAL_TIM_Base_Start_IT+0x6c>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a16      	ldr	r2, [pc, #88]	@ (8006984 <HAL_TIM_Base_Start_IT+0xc0>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d111      	bne.n	8006954 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b06      	cmp	r3, #6
 8006940:	d010      	beq.n	8006964 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f042 0201 	orr.w	r2, r2, #1
 8006950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006952:	e007      	b.n	8006964 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0201 	orr.w	r2, r2, #1
 8006962:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	40010000 	.word	0x40010000
 8006978:	40000400 	.word	0x40000400
 800697c:	40000800 	.word	0x40000800
 8006980:	40000c00 	.word	0x40000c00
 8006984:	40014000 	.word	0x40014000

08006988 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e041      	b.n	8006a1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f839 	bl	8006a26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3304      	adds	r3, #4
 80069c4:	4619      	mov	r1, r3
 80069c6:	4610      	mov	r0, r2
 80069c8:	f000 fcd4 	bl	8007374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
	...

08006a3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d109      	bne.n	8006a60 <HAL_TIM_PWM_Start+0x24>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	bf14      	ite	ne
 8006a58:	2301      	movne	r3, #1
 8006a5a:	2300      	moveq	r3, #0
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	e022      	b.n	8006aa6 <HAL_TIM_PWM_Start+0x6a>
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d109      	bne.n	8006a7a <HAL_TIM_PWM_Start+0x3e>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	bf14      	ite	ne
 8006a72:	2301      	movne	r3, #1
 8006a74:	2300      	moveq	r3, #0
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	e015      	b.n	8006aa6 <HAL_TIM_PWM_Start+0x6a>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d109      	bne.n	8006a94 <HAL_TIM_PWM_Start+0x58>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	bf14      	ite	ne
 8006a8c:	2301      	movne	r3, #1
 8006a8e:	2300      	moveq	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	e008      	b.n	8006aa6 <HAL_TIM_PWM_Start+0x6a>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	bf14      	ite	ne
 8006aa0:	2301      	movne	r3, #1
 8006aa2:	2300      	moveq	r3, #0
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e068      	b.n	8006b80 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d104      	bne.n	8006abe <HAL_TIM_PWM_Start+0x82>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006abc:	e013      	b.n	8006ae6 <HAL_TIM_PWM_Start+0xaa>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d104      	bne.n	8006ace <HAL_TIM_PWM_Start+0x92>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006acc:	e00b      	b.n	8006ae6 <HAL_TIM_PWM_Start+0xaa>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d104      	bne.n	8006ade <HAL_TIM_PWM_Start+0xa2>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006adc:	e003      	b.n	8006ae6 <HAL_TIM_PWM_Start+0xaa>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2201      	movs	r2, #1
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 fef2 	bl	80078d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a23      	ldr	r2, [pc, #140]	@ (8006b88 <HAL_TIM_PWM_Start+0x14c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d107      	bne.n	8006b0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a1d      	ldr	r2, [pc, #116]	@ (8006b88 <HAL_TIM_PWM_Start+0x14c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d018      	beq.n	8006b4a <HAL_TIM_PWM_Start+0x10e>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b20:	d013      	beq.n	8006b4a <HAL_TIM_PWM_Start+0x10e>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a19      	ldr	r2, [pc, #100]	@ (8006b8c <HAL_TIM_PWM_Start+0x150>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d00e      	beq.n	8006b4a <HAL_TIM_PWM_Start+0x10e>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a17      	ldr	r2, [pc, #92]	@ (8006b90 <HAL_TIM_PWM_Start+0x154>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d009      	beq.n	8006b4a <HAL_TIM_PWM_Start+0x10e>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a16      	ldr	r2, [pc, #88]	@ (8006b94 <HAL_TIM_PWM_Start+0x158>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d004      	beq.n	8006b4a <HAL_TIM_PWM_Start+0x10e>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a14      	ldr	r2, [pc, #80]	@ (8006b98 <HAL_TIM_PWM_Start+0x15c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d111      	bne.n	8006b6e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f003 0307 	and.w	r3, r3, #7
 8006b54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2b06      	cmp	r3, #6
 8006b5a:	d010      	beq.n	8006b7e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0201 	orr.w	r2, r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b6c:	e007      	b.n	8006b7e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f042 0201 	orr.w	r2, r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	40010000 	.word	0x40010000
 8006b8c:	40000400 	.word	0x40000400
 8006b90:	40000800 	.word	0x40000800
 8006b94:	40000c00 	.word	0x40000c00
 8006b98:	40014000 	.word	0x40014000

08006b9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e097      	b.n	8006ce0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d106      	bne.n	8006bca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7fc fd6d 	bl	80036a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6812      	ldr	r2, [r2, #0]
 8006bdc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006be0:	f023 0307 	bic.w	r3, r3, #7
 8006be4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3304      	adds	r3, #4
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	f000 fbbf 	bl	8007374 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c1e:	f023 0303 	bic.w	r3, r3, #3
 8006c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	021b      	lsls	r3, r3, #8
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006c3c:	f023 030c 	bic.w	r3, r3, #12
 8006c40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	68da      	ldr	r2, [r3, #12]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	021b      	lsls	r3, r3, #8
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	011a      	lsls	r2, r3, #4
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	031b      	lsls	r3, r3, #12
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006c7a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006c82:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006cf8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d00:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d08:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006d10:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d110      	bne.n	8006d3a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d102      	bne.n	8006d24 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d1e:	7b7b      	ldrb	r3, [r7, #13]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d001      	beq.n	8006d28 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e089      	b.n	8006e3c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d38:	e031      	b.n	8006d9e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d110      	bne.n	8006d62 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d40:	7bbb      	ldrb	r3, [r7, #14]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d102      	bne.n	8006d4c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d46:	7b3b      	ldrb	r3, [r7, #12]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d001      	beq.n	8006d50 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e075      	b.n	8006e3c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d60:	e01d      	b.n	8006d9e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d108      	bne.n	8006d7a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d105      	bne.n	8006d7a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d6e:	7b7b      	ldrb	r3, [r7, #13]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d102      	bne.n	8006d7a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d74:	7b3b      	ldrb	r3, [r7, #12]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d001      	beq.n	8006d7e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e05e      	b.n	8006e3c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2202      	movs	r2, #2
 8006d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2202      	movs	r2, #2
 8006d8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2202      	movs	r2, #2
 8006d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2202      	movs	r2, #2
 8006d9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <HAL_TIM_Encoder_Start_IT+0xc4>
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d010      	beq.n	8006dcc <HAL_TIM_Encoder_Start_IT+0xe4>
 8006daa:	e01f      	b.n	8006dec <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2201      	movs	r2, #1
 8006db2:	2100      	movs	r1, #0
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 fd8f 	bl	80078d8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68da      	ldr	r2, [r3, #12]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f042 0202 	orr.w	r2, r2, #2
 8006dc8:	60da      	str	r2, [r3, #12]
      break;
 8006dca:	e02e      	b.n	8006e2a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	2104      	movs	r1, #4
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 fd7f 	bl	80078d8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f042 0204 	orr.w	r2, r2, #4
 8006de8:	60da      	str	r2, [r3, #12]
      break;
 8006dea:	e01e      	b.n	8006e2a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2201      	movs	r2, #1
 8006df2:	2100      	movs	r1, #0
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 fd6f 	bl	80078d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	2104      	movs	r1, #4
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 fd68 	bl	80078d8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0202 	orr.w	r2, r2, #2
 8006e16:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0204 	orr.w	r2, r2, #4
 8006e26:	60da      	str	r2, [r3, #12]
      break;
 8006e28:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f042 0201 	orr.w	r2, r2, #1
 8006e38:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d020      	beq.n	8006ea8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01b      	beq.n	8006ea8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f06f 0202 	mvn.w	r2, #2
 8006e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7fb fc56 	bl	8002740 <HAL_TIM_IC_CaptureCallback>
 8006e94:	e005      	b.n	8006ea2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fa4d 	bl	8007336 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fa54 	bl	800734a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f003 0304 	and.w	r3, r3, #4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d020      	beq.n	8006ef4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01b      	beq.n	8006ef4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0204 	mvn.w	r2, #4
 8006ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2202      	movs	r2, #2
 8006eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7fb fc30 	bl	8002740 <HAL_TIM_IC_CaptureCallback>
 8006ee0:	e005      	b.n	8006eee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fa27 	bl	8007336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fa2e 	bl	800734a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f003 0308 	and.w	r3, r3, #8
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d020      	beq.n	8006f40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f003 0308 	and.w	r3, r3, #8
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d01b      	beq.n	8006f40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0208 	mvn.w	r2, #8
 8006f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2204      	movs	r2, #4
 8006f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fb fc0a 	bl	8002740 <HAL_TIM_IC_CaptureCallback>
 8006f2c:	e005      	b.n	8006f3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fa01 	bl	8007336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fa08 	bl	800734a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f003 0310 	and.w	r3, r3, #16
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d020      	beq.n	8006f8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f003 0310 	and.w	r3, r3, #16
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01b      	beq.n	8006f8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0210 	mvn.w	r2, #16
 8006f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2208      	movs	r2, #8
 8006f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fb fbe4 	bl	8002740 <HAL_TIM_IC_CaptureCallback>
 8006f78:	e005      	b.n	8006f86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f9db 	bl	8007336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f9e2 	bl	800734a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00c      	beq.n	8006fb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d007      	beq.n	8006fb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0201 	mvn.w	r2, #1
 8006fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7f9 fc5c 	bl	8000868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00c      	beq.n	8006fd4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d007      	beq.n	8006fd4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fd72 	bl	8007ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00c      	beq.n	8006ff8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d007      	beq.n	8006ff8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f9b3 	bl	800735e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f003 0320 	and.w	r3, r3, #32
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00c      	beq.n	800701c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f003 0320 	and.w	r3, r3, #32
 8007008:	2b00      	cmp	r3, #0
 800700a:	d007      	beq.n	800701c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f06f 0220 	mvn.w	r2, #32
 8007014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fd44 	bl	8007aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800701c:	bf00      	nop
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800703a:	2b01      	cmp	r3, #1
 800703c:	d101      	bne.n	8007042 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800703e:	2302      	movs	r3, #2
 8007040:	e0ae      	b.n	80071a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b0c      	cmp	r3, #12
 800704e:	f200 809f 	bhi.w	8007190 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007052:	a201      	add	r2, pc, #4	@ (adr r2, 8007058 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	0800708d 	.word	0x0800708d
 800705c:	08007191 	.word	0x08007191
 8007060:	08007191 	.word	0x08007191
 8007064:	08007191 	.word	0x08007191
 8007068:	080070cd 	.word	0x080070cd
 800706c:	08007191 	.word	0x08007191
 8007070:	08007191 	.word	0x08007191
 8007074:	08007191 	.word	0x08007191
 8007078:	0800710f 	.word	0x0800710f
 800707c:	08007191 	.word	0x08007191
 8007080:	08007191 	.word	0x08007191
 8007084:	08007191 	.word	0x08007191
 8007088:	0800714f 	.word	0x0800714f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68b9      	ldr	r1, [r7, #8]
 8007092:	4618      	mov	r0, r3
 8007094:	f000 f9fa 	bl	800748c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699a      	ldr	r2, [r3, #24]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0208 	orr.w	r2, r2, #8
 80070a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699a      	ldr	r2, [r3, #24]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0204 	bic.w	r2, r2, #4
 80070b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6999      	ldr	r1, [r3, #24]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	691a      	ldr	r2, [r3, #16]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	619a      	str	r2, [r3, #24]
      break;
 80070ca:	e064      	b.n	8007196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68b9      	ldr	r1, [r7, #8]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 fa40 	bl	8007558 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699a      	ldr	r2, [r3, #24]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6999      	ldr	r1, [r3, #24]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	021a      	lsls	r2, r3, #8
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	619a      	str	r2, [r3, #24]
      break;
 800710c:	e043      	b.n	8007196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	4618      	mov	r0, r3
 8007116:	f000 fa8b 	bl	8007630 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	69da      	ldr	r2, [r3, #28]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f042 0208 	orr.w	r2, r2, #8
 8007128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	69da      	ldr	r2, [r3, #28]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0204 	bic.w	r2, r2, #4
 8007138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69d9      	ldr	r1, [r3, #28]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	691a      	ldr	r2, [r3, #16]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	61da      	str	r2, [r3, #28]
      break;
 800714c:	e023      	b.n	8007196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68b9      	ldr	r1, [r7, #8]
 8007154:	4618      	mov	r0, r3
 8007156:	f000 fad5 	bl	8007704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69da      	ldr	r2, [r3, #28]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69da      	ldr	r2, [r3, #28]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69d9      	ldr	r1, [r3, #28]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	021a      	lsls	r2, r3, #8
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	61da      	str	r2, [r3, #28]
      break;
 800718e:	e002      	b.n	8007196 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	75fb      	strb	r3, [r7, #23]
      break;
 8007194:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800719e:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_TIM_ConfigClockSource+0x1c>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e0b4      	b.n	800732e <HAL_TIM_ConfigClockSource+0x186>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80071e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071fc:	d03e      	beq.n	800727c <HAL_TIM_ConfigClockSource+0xd4>
 80071fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007202:	f200 8087 	bhi.w	8007314 <HAL_TIM_ConfigClockSource+0x16c>
 8007206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800720a:	f000 8086 	beq.w	800731a <HAL_TIM_ConfigClockSource+0x172>
 800720e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007212:	d87f      	bhi.n	8007314 <HAL_TIM_ConfigClockSource+0x16c>
 8007214:	2b70      	cmp	r3, #112	@ 0x70
 8007216:	d01a      	beq.n	800724e <HAL_TIM_ConfigClockSource+0xa6>
 8007218:	2b70      	cmp	r3, #112	@ 0x70
 800721a:	d87b      	bhi.n	8007314 <HAL_TIM_ConfigClockSource+0x16c>
 800721c:	2b60      	cmp	r3, #96	@ 0x60
 800721e:	d050      	beq.n	80072c2 <HAL_TIM_ConfigClockSource+0x11a>
 8007220:	2b60      	cmp	r3, #96	@ 0x60
 8007222:	d877      	bhi.n	8007314 <HAL_TIM_ConfigClockSource+0x16c>
 8007224:	2b50      	cmp	r3, #80	@ 0x50
 8007226:	d03c      	beq.n	80072a2 <HAL_TIM_ConfigClockSource+0xfa>
 8007228:	2b50      	cmp	r3, #80	@ 0x50
 800722a:	d873      	bhi.n	8007314 <HAL_TIM_ConfigClockSource+0x16c>
 800722c:	2b40      	cmp	r3, #64	@ 0x40
 800722e:	d058      	beq.n	80072e2 <HAL_TIM_ConfigClockSource+0x13a>
 8007230:	2b40      	cmp	r3, #64	@ 0x40
 8007232:	d86f      	bhi.n	8007314 <HAL_TIM_ConfigClockSource+0x16c>
 8007234:	2b30      	cmp	r3, #48	@ 0x30
 8007236:	d064      	beq.n	8007302 <HAL_TIM_ConfigClockSource+0x15a>
 8007238:	2b30      	cmp	r3, #48	@ 0x30
 800723a:	d86b      	bhi.n	8007314 <HAL_TIM_ConfigClockSource+0x16c>
 800723c:	2b20      	cmp	r3, #32
 800723e:	d060      	beq.n	8007302 <HAL_TIM_ConfigClockSource+0x15a>
 8007240:	2b20      	cmp	r3, #32
 8007242:	d867      	bhi.n	8007314 <HAL_TIM_ConfigClockSource+0x16c>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d05c      	beq.n	8007302 <HAL_TIM_ConfigClockSource+0x15a>
 8007248:	2b10      	cmp	r3, #16
 800724a:	d05a      	beq.n	8007302 <HAL_TIM_ConfigClockSource+0x15a>
 800724c:	e062      	b.n	8007314 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800725e:	f000 fb1b 	bl	8007898 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007270:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	609a      	str	r2, [r3, #8]
      break;
 800727a:	e04f      	b.n	800731c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800728c:	f000 fb04 	bl	8007898 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689a      	ldr	r2, [r3, #8]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800729e:	609a      	str	r2, [r3, #8]
      break;
 80072a0:	e03c      	b.n	800731c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ae:	461a      	mov	r2, r3
 80072b0:	f000 fa78 	bl	80077a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2150      	movs	r1, #80	@ 0x50
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 fad1 	bl	8007862 <TIM_ITRx_SetConfig>
      break;
 80072c0:	e02c      	b.n	800731c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072ce:	461a      	mov	r2, r3
 80072d0:	f000 fa97 	bl	8007802 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2160      	movs	r1, #96	@ 0x60
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fac1 	bl	8007862 <TIM_ITRx_SetConfig>
      break;
 80072e0:	e01c      	b.n	800731c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ee:	461a      	mov	r2, r3
 80072f0:	f000 fa58 	bl	80077a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2140      	movs	r1, #64	@ 0x40
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 fab1 	bl	8007862 <TIM_ITRx_SetConfig>
      break;
 8007300:	e00c      	b.n	800731c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4619      	mov	r1, r3
 800730c:	4610      	mov	r0, r2
 800730e:	f000 faa8 	bl	8007862 <TIM_ITRx_SetConfig>
      break;
 8007312:	e003      	b.n	800731c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	73fb      	strb	r3, [r7, #15]
      break;
 8007318:	e000      	b.n	800731c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800731a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800732c:	7bfb      	ldrb	r3, [r7, #15]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800735e:	b480      	push	{r7}
 8007360:	b083      	sub	sp, #12
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
	...

08007374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a3a      	ldr	r2, [pc, #232]	@ (8007470 <TIM_Base_SetConfig+0xfc>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00f      	beq.n	80073ac <TIM_Base_SetConfig+0x38>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007392:	d00b      	beq.n	80073ac <TIM_Base_SetConfig+0x38>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a37      	ldr	r2, [pc, #220]	@ (8007474 <TIM_Base_SetConfig+0x100>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d007      	beq.n	80073ac <TIM_Base_SetConfig+0x38>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a36      	ldr	r2, [pc, #216]	@ (8007478 <TIM_Base_SetConfig+0x104>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d003      	beq.n	80073ac <TIM_Base_SetConfig+0x38>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a35      	ldr	r2, [pc, #212]	@ (800747c <TIM_Base_SetConfig+0x108>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d108      	bne.n	80073be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a2b      	ldr	r2, [pc, #172]	@ (8007470 <TIM_Base_SetConfig+0xfc>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d01b      	beq.n	80073fe <TIM_Base_SetConfig+0x8a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073cc:	d017      	beq.n	80073fe <TIM_Base_SetConfig+0x8a>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a28      	ldr	r2, [pc, #160]	@ (8007474 <TIM_Base_SetConfig+0x100>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d013      	beq.n	80073fe <TIM_Base_SetConfig+0x8a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a27      	ldr	r2, [pc, #156]	@ (8007478 <TIM_Base_SetConfig+0x104>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00f      	beq.n	80073fe <TIM_Base_SetConfig+0x8a>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a26      	ldr	r2, [pc, #152]	@ (800747c <TIM_Base_SetConfig+0x108>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d00b      	beq.n	80073fe <TIM_Base_SetConfig+0x8a>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a25      	ldr	r2, [pc, #148]	@ (8007480 <TIM_Base_SetConfig+0x10c>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d007      	beq.n	80073fe <TIM_Base_SetConfig+0x8a>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a24      	ldr	r2, [pc, #144]	@ (8007484 <TIM_Base_SetConfig+0x110>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d003      	beq.n	80073fe <TIM_Base_SetConfig+0x8a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a23      	ldr	r2, [pc, #140]	@ (8007488 <TIM_Base_SetConfig+0x114>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d108      	bne.n	8007410 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	4313      	orrs	r3, r2
 800740e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a0e      	ldr	r2, [pc, #56]	@ (8007470 <TIM_Base_SetConfig+0xfc>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d103      	bne.n	8007444 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	691a      	ldr	r2, [r3, #16]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b01      	cmp	r3, #1
 8007454:	d105      	bne.n	8007462 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f023 0201 	bic.w	r2, r3, #1
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	611a      	str	r2, [r3, #16]
  }
}
 8007462:	bf00      	nop
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	40010000 	.word	0x40010000
 8007474:	40000400 	.word	0x40000400
 8007478:	40000800 	.word	0x40000800
 800747c:	40000c00 	.word	0x40000c00
 8007480:	40014000 	.word	0x40014000
 8007484:	40014400 	.word	0x40014400
 8007488:	40014800 	.word	0x40014800

0800748c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	f023 0201 	bic.w	r2, r3, #1
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f023 0303 	bic.w	r3, r3, #3
 80074c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f023 0302 	bic.w	r3, r3, #2
 80074d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	4313      	orrs	r3, r2
 80074de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007554 <TIM_OC1_SetConfig+0xc8>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d10c      	bne.n	8007502 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f023 0308 	bic.w	r3, r3, #8
 80074ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f023 0304 	bic.w	r3, r3, #4
 8007500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a13      	ldr	r2, [pc, #76]	@ (8007554 <TIM_OC1_SetConfig+0xc8>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d111      	bne.n	800752e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	4313      	orrs	r3, r2
 8007522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	4313      	orrs	r3, r2
 800752c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	621a      	str	r2, [r3, #32]
}
 8007548:	bf00      	nop
 800754a:	371c      	adds	r7, #28
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	40010000 	.word	0x40010000

08007558 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	f023 0210 	bic.w	r2, r3, #16
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800758e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	021b      	lsls	r3, r3, #8
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4313      	orrs	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f023 0320 	bic.w	r3, r3, #32
 80075a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	011b      	lsls	r3, r3, #4
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a1e      	ldr	r2, [pc, #120]	@ (800762c <TIM_OC2_SetConfig+0xd4>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d10d      	bne.n	80075d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	011b      	lsls	r3, r3, #4
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a15      	ldr	r2, [pc, #84]	@ (800762c <TIM_OC2_SetConfig+0xd4>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d113      	bne.n	8007604 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80075ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	4313      	orrs	r3, r2
 8007602:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	621a      	str	r2, [r3, #32]
}
 800761e:	bf00      	nop
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	40010000 	.word	0x40010000

08007630 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800765e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 0303 	bic.w	r3, r3, #3
 8007666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	4313      	orrs	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	021b      	lsls	r3, r3, #8
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	4313      	orrs	r3, r2
 8007684:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a1d      	ldr	r2, [pc, #116]	@ (8007700 <TIM_OC3_SetConfig+0xd0>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d10d      	bne.n	80076aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	021b      	lsls	r3, r3, #8
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	4313      	orrs	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a14      	ldr	r2, [pc, #80]	@ (8007700 <TIM_OC3_SetConfig+0xd0>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d113      	bne.n	80076da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80076c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	011b      	lsls	r3, r3, #4
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	011b      	lsls	r3, r3, #4
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	621a      	str	r2, [r3, #32]
}
 80076f4:	bf00      	nop
 80076f6:	371c      	adds	r7, #28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	40010000 	.word	0x40010000

08007704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a1b      	ldr	r3, [r3, #32]
 8007718:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800773a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	021b      	lsls	r3, r3, #8
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	4313      	orrs	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800774e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	031b      	lsls	r3, r3, #12
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a10      	ldr	r2, [pc, #64]	@ (80077a0 <TIM_OC4_SetConfig+0x9c>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d109      	bne.n	8007778 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800776a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	019b      	lsls	r3, r3, #6
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	621a      	str	r2, [r3, #32]
}
 8007792:	bf00      	nop
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	40010000 	.word	0x40010000

080077a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	f023 0201 	bic.w	r2, r3, #1
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	011b      	lsls	r3, r3, #4
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f023 030a 	bic.w	r3, r3, #10
 80077e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	621a      	str	r2, [r3, #32]
}
 80077f6:	bf00      	nop
 80077f8:	371c      	adds	r7, #28
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007802:	b480      	push	{r7}
 8007804:	b087      	sub	sp, #28
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6a1b      	ldr	r3, [r3, #32]
 8007818:	f023 0210 	bic.w	r2, r3, #16
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800782c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	031b      	lsls	r3, r3, #12
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4313      	orrs	r3, r2
 8007836:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800783e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	011b      	lsls	r3, r3, #4
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	4313      	orrs	r3, r2
 8007848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	621a      	str	r2, [r3, #32]
}
 8007856:	bf00      	nop
 8007858:	371c      	adds	r7, #28
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007862:	b480      	push	{r7}
 8007864:	b085      	sub	sp, #20
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4313      	orrs	r3, r2
 8007880:	f043 0307 	orr.w	r3, r3, #7
 8007884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	609a      	str	r2, [r3, #8]
}
 800788c:	bf00      	nop
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007898:	b480      	push	{r7}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
 80078a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80078b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	021a      	lsls	r2, r3, #8
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	431a      	orrs	r2, r3
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	4313      	orrs	r3, r2
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	609a      	str	r2, [r3, #8]
}
 80078cc:	bf00      	nop
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f003 031f 	and.w	r3, r3, #31
 80078ea:	2201      	movs	r2, #1
 80078ec:	fa02 f303 	lsl.w	r3, r2, r3
 80078f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6a1a      	ldr	r2, [r3, #32]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	43db      	mvns	r3, r3
 80078fa:	401a      	ands	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6a1a      	ldr	r2, [r3, #32]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f003 031f 	and.w	r3, r3, #31
 800790a:	6879      	ldr	r1, [r7, #4]
 800790c:	fa01 f303 	lsl.w	r3, r1, r3
 8007910:	431a      	orrs	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	621a      	str	r2, [r3, #32]
}
 8007916:	bf00      	nop
 8007918:	371c      	adds	r7, #28
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
	...

08007924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007934:	2b01      	cmp	r3, #1
 8007936:	d101      	bne.n	800793c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007938:	2302      	movs	r3, #2
 800793a:	e050      	b.n	80079de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2202      	movs	r2, #2
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	4313      	orrs	r3, r2
 800796c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a1c      	ldr	r2, [pc, #112]	@ (80079ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d018      	beq.n	80079b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007988:	d013      	beq.n	80079b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a18      	ldr	r2, [pc, #96]	@ (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d00e      	beq.n	80079b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a16      	ldr	r2, [pc, #88]	@ (80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d009      	beq.n	80079b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a15      	ldr	r2, [pc, #84]	@ (80079f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d004      	beq.n	80079b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a13      	ldr	r2, [pc, #76]	@ (80079fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d10c      	bne.n	80079cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3714      	adds	r7, #20
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	40010000 	.word	0x40010000
 80079f0:	40000400 	.word	0x40000400
 80079f4:	40000800 	.word	0x40000800
 80079f8:	40000c00 	.word	0x40000c00
 80079fc:	40014000 	.word	0x40014000

08007a00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d101      	bne.n	8007a1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a18:	2302      	movs	r3, #2
 8007a1a:	e03d      	b.n	8007a98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e042      	b.n	8007b64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d106      	bne.n	8007af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7fb fe8a 	bl	800380c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2224      	movs	r2, #36	@ 0x24
 8007afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68da      	ldr	r2, [r3, #12]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fa9f 	bl	8008054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	695a      	ldr	r2, [r3, #20]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68da      	ldr	r2, [r3, #12]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2220      	movs	r2, #32
 8007b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	4613      	mov	r3, r2
 8007b78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b20      	cmp	r3, #32
 8007b84:	d112      	bne.n	8007bac <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d002      	beq.n	8007b92 <HAL_UART_Receive_DMA+0x26>
 8007b8c:	88fb      	ldrh	r3, [r7, #6]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e00b      	b.n	8007bae <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007b9c:	88fb      	ldrh	r3, [r7, #6]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	68b9      	ldr	r1, [r7, #8]
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 f930 	bl	8007e08 <UART_Start_Receive_DMA>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	e000      	b.n	8007bae <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007bac:	2302      	movs	r3, #2
  }
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007bd2:	bf00      	nop
 8007bd4:	370c      	adds	r7, #12
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b083      	sub	sp, #12
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bfe:	bf00      	nop
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b09c      	sub	sp, #112	@ 0x70
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c16:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d172      	bne.n	8007d0c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c28:	2200      	movs	r2, #0
 8007c2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	330c      	adds	r3, #12
 8007c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c36:	e853 3f00 	ldrex	r3, [r3]
 8007c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	330c      	adds	r3, #12
 8007c4a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007c4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007c4e:	657b      	str	r3, [r7, #84]	@ 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c54:	e841 2300 	strex	r3, r2, [r1]
 8007c58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1e5      	bne.n	8007c2c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3314      	adds	r3, #20
 8007c66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c6a:	e853 3f00 	ldrex	r3, [r3]
 8007c6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c72:	f023 0301 	bic.w	r3, r3, #1
 8007c76:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3314      	adds	r3, #20
 8007c7e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007c80:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c82:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c88:	e841 2300 	strex	r3, r2, [r1]
 8007c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1e5      	bne.n	8007c60 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3314      	adds	r3, #20
 8007c9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9e:	e853 3f00 	ldrex	r3, [r3]
 8007ca2:	623b      	str	r3, [r7, #32]
   return(result);
 8007ca4:	6a3b      	ldr	r3, [r7, #32]
 8007ca6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007caa:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3314      	adds	r3, #20
 8007cb2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007cb4:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cbc:	e841 2300 	strex	r3, r2, [r1]
 8007cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e5      	bne.n	8007c94 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d119      	bne.n	8007d0c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	330c      	adds	r3, #12
 8007cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	e853 3f00 	ldrex	r3, [r3]
 8007ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 0310 	bic.w	r3, r3, #16
 8007cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	330c      	adds	r3, #12
 8007cf6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007cf8:	61fa      	str	r2, [r7, #28]
 8007cfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	69b9      	ldr	r1, [r7, #24]
 8007cfe:	69fa      	ldr	r2, [r7, #28]
 8007d00:	e841 2300 	strex	r3, r2, [r1]
 8007d04:	617b      	str	r3, [r7, #20]
   return(result);
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e5      	bne.n	8007cd8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d0e:	2200      	movs	r2, #0
 8007d10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d106      	bne.n	8007d28 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007d22:	f7ff ff66 	bl	8007bf2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d26:	e002      	b.n	8007d2e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007d28:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007d2a:	f7ff ff44 	bl	8007bb6 <HAL_UART_RxCpltCallback>
}
 8007d2e:	bf00      	nop
 8007d30:	3770      	adds	r7, #112	@ 0x70
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2201      	movs	r2, #1
 8007d48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d108      	bne.n	8007d64 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d56:	085b      	lsrs	r3, r3, #1
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7ff ff48 	bl	8007bf2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d62:	e002      	b.n	8007d6a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7ff ff30 	bl	8007bca <HAL_UART_RxHalfCpltCallback>
}
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d82:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d8e:	2b80      	cmp	r3, #128	@ 0x80
 8007d90:	bf0c      	ite	eq
 8007d92:	2301      	moveq	r3, #1
 8007d94:	2300      	movne	r3, #0
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b21      	cmp	r3, #33	@ 0x21
 8007da4:	d108      	bne.n	8007db8 <UART_DMAError+0x46>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d005      	beq.n	8007db8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2200      	movs	r2, #0
 8007db0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007db2:	68b8      	ldr	r0, [r7, #8]
 8007db4:	f000 f8c2 	bl	8007f3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc2:	2b40      	cmp	r3, #64	@ 0x40
 8007dc4:	bf0c      	ite	eq
 8007dc6:	2301      	moveq	r3, #1
 8007dc8:	2300      	movne	r3, #0
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b22      	cmp	r3, #34	@ 0x22
 8007dd8:	d108      	bne.n	8007dec <UART_DMAError+0x7a>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d005      	beq.n	8007dec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2200      	movs	r2, #0
 8007de4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007de6:	68b8      	ldr	r0, [r7, #8]
 8007de8:	f000 f8d0 	bl	8007f8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007df0:	f043 0210 	orr.w	r2, r3, #16
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007df8:	68b8      	ldr	r0, [r7, #8]
 8007dfa:	f7ff fef0 	bl	8007bde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dfe:	bf00      	nop
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
	...

08007e08 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b098      	sub	sp, #96	@ 0x60
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	4613      	mov	r3, r2
 8007e14:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	88fa      	ldrh	r2, [r7, #6]
 8007e20:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2222      	movs	r2, #34	@ 0x22
 8007e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e34:	4a3e      	ldr	r2, [pc, #248]	@ (8007f30 <UART_Start_Receive_DMA+0x128>)
 8007e36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e3c:	4a3d      	ldr	r2, [pc, #244]	@ (8007f34 <UART_Start_Receive_DMA+0x12c>)
 8007e3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e44:	4a3c      	ldr	r2, [pc, #240]	@ (8007f38 <UART_Start_Receive_DMA+0x130>)
 8007e46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007e50:	f107 0308 	add.w	r3, r7, #8
 8007e54:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	4619      	mov	r1, r3
 8007e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	88fb      	ldrh	r3, [r7, #6]
 8007e68:	f7fc fae2 	bl	8004430 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	613b      	str	r3, [r7, #16]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	613b      	str	r3, [r7, #16]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	613b      	str	r3, [r7, #16]
 8007e80:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d019      	beq.n	8007ebe <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	330c      	adds	r3, #12
 8007e90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e94:	e853 3f00 	ldrex	r3, [r3]
 8007e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ea0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	330c      	adds	r3, #12
 8007ea8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007eaa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007eac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007eb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007eb2:	e841 2300 	strex	r3, r2, [r1]
 8007eb6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e5      	bne.n	8007e8a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3314      	adds	r3, #20
 8007ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec8:	e853 3f00 	ldrex	r3, [r3]
 8007ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed0:	f043 0301 	orr.w	r3, r3, #1
 8007ed4:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3314      	adds	r3, #20
 8007edc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007ede:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007ee0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007ee4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ee6:	e841 2300 	strex	r3, r2, [r1]
 8007eea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1e5      	bne.n	8007ebe <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3314      	adds	r3, #20
 8007ef8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	617b      	str	r3, [r7, #20]
   return(result);
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f08:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3314      	adds	r3, #20
 8007f10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f12:	627a      	str	r2, [r7, #36]	@ 0x24
 8007f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f16:	6a39      	ldr	r1, [r7, #32]
 8007f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f1a:	e841 2300 	strex	r3, r2, [r1]
 8007f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1e5      	bne.n	8007ef2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3760      	adds	r7, #96	@ 0x60
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	08007c0b 	.word	0x08007c0b
 8007f34:	08007d37 	.word	0x08007d37
 8007f38:	08007d73 	.word	0x08007d73

08007f3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b089      	sub	sp, #36	@ 0x24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	330c      	adds	r3, #12
 8007f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	e853 3f00 	ldrex	r3, [r3]
 8007f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007f5a:	61fb      	str	r3, [r7, #28]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	330c      	adds	r3, #12
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	61ba      	str	r2, [r7, #24]
 8007f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	6979      	ldr	r1, [r7, #20]
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	e841 2300 	strex	r3, r2, [r1]
 8007f70:	613b      	str	r3, [r7, #16]
   return(result);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e5      	bne.n	8007f44 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007f80:	bf00      	nop
 8007f82:	3724      	adds	r7, #36	@ 0x24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b095      	sub	sp, #84	@ 0x54
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	330c      	adds	r3, #12
 8007f9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	330c      	adds	r3, #12
 8007fb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007fb4:	643a      	str	r2, [r7, #64]	@ 0x40
 8007fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fbc:	e841 2300 	strex	r3, r2, [r1]
 8007fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e5      	bne.n	8007f94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3314      	adds	r3, #20
 8007fce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	f023 0301 	bic.w	r3, r3, #1
 8007fde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3314      	adds	r3, #20
 8007fe6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fe8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ff0:	e841 2300 	strex	r3, r2, [r1]
 8007ff4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e5      	bne.n	8007fc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008000:	2b01      	cmp	r3, #1
 8008002:	d119      	bne.n	8008038 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	330c      	adds	r3, #12
 800800a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	60bb      	str	r3, [r7, #8]
   return(result);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f023 0310 	bic.w	r3, r3, #16
 800801a:	647b      	str	r3, [r7, #68]	@ 0x44
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	330c      	adds	r3, #12
 8008022:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008024:	61ba      	str	r2, [r7, #24]
 8008026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008028:	6979      	ldr	r1, [r7, #20]
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	e841 2300 	strex	r3, r2, [r1]
 8008030:	613b      	str	r3, [r7, #16]
   return(result);
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e5      	bne.n	8008004 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2220      	movs	r2, #32
 800803c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008046:	bf00      	nop
 8008048:	3754      	adds	r7, #84	@ 0x54
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
	...

08008054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008058:	b0c0      	sub	sp, #256	@ 0x100
 800805a:	af00      	add	r7, sp, #0
 800805c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800806c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008070:	68d9      	ldr	r1, [r3, #12]
 8008072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	ea40 0301 	orr.w	r3, r0, r1
 800807c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800807e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008082:	689a      	ldr	r2, [r3, #8]
 8008084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	431a      	orrs	r2, r3
 800808c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	431a      	orrs	r2, r3
 8008094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	4313      	orrs	r3, r2
 800809c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80080a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80080ac:	f021 010c 	bic.w	r1, r1, #12
 80080b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80080ba:	430b      	orrs	r3, r1
 80080bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80080ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080ce:	6999      	ldr	r1, [r3, #24]
 80080d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	ea40 0301 	orr.w	r3, r0, r1
 80080da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	4b8f      	ldr	r3, [pc, #572]	@ (8008320 <UART_SetConfig+0x2cc>)
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d005      	beq.n	80080f4 <UART_SetConfig+0xa0>
 80080e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	4b8d      	ldr	r3, [pc, #564]	@ (8008324 <UART_SetConfig+0x2d0>)
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d104      	bne.n	80080fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080f4:	f7fd fbd2 	bl	800589c <HAL_RCC_GetPCLK2Freq>
 80080f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80080fc:	e003      	b.n	8008106 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080fe:	f7fd fbb9 	bl	8005874 <HAL_RCC_GetPCLK1Freq>
 8008102:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008110:	f040 810c 	bne.w	800832c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008118:	2200      	movs	r2, #0
 800811a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800811e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008122:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008126:	4622      	mov	r2, r4
 8008128:	462b      	mov	r3, r5
 800812a:	1891      	adds	r1, r2, r2
 800812c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800812e:	415b      	adcs	r3, r3
 8008130:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008132:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008136:	4621      	mov	r1, r4
 8008138:	eb12 0801 	adds.w	r8, r2, r1
 800813c:	4629      	mov	r1, r5
 800813e:	eb43 0901 	adc.w	r9, r3, r1
 8008142:	f04f 0200 	mov.w	r2, #0
 8008146:	f04f 0300 	mov.w	r3, #0
 800814a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800814e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008152:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008156:	4690      	mov	r8, r2
 8008158:	4699      	mov	r9, r3
 800815a:	4623      	mov	r3, r4
 800815c:	eb18 0303 	adds.w	r3, r8, r3
 8008160:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008164:	462b      	mov	r3, r5
 8008166:	eb49 0303 	adc.w	r3, r9, r3
 800816a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800816e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800817a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800817e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008182:	460b      	mov	r3, r1
 8008184:	18db      	adds	r3, r3, r3
 8008186:	653b      	str	r3, [r7, #80]	@ 0x50
 8008188:	4613      	mov	r3, r2
 800818a:	eb42 0303 	adc.w	r3, r2, r3
 800818e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008190:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008194:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008198:	f7f8 f81c 	bl	80001d4 <__aeabi_uldivmod>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4b61      	ldr	r3, [pc, #388]	@ (8008328 <UART_SetConfig+0x2d4>)
 80081a2:	fba3 2302 	umull	r2, r3, r3, r2
 80081a6:	095b      	lsrs	r3, r3, #5
 80081a8:	011c      	lsls	r4, r3, #4
 80081aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80081b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80081bc:	4642      	mov	r2, r8
 80081be:	464b      	mov	r3, r9
 80081c0:	1891      	adds	r1, r2, r2
 80081c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80081c4:	415b      	adcs	r3, r3
 80081c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80081cc:	4641      	mov	r1, r8
 80081ce:	eb12 0a01 	adds.w	sl, r2, r1
 80081d2:	4649      	mov	r1, r9
 80081d4:	eb43 0b01 	adc.w	fp, r3, r1
 80081d8:	f04f 0200 	mov.w	r2, #0
 80081dc:	f04f 0300 	mov.w	r3, #0
 80081e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80081e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80081e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081ec:	4692      	mov	sl, r2
 80081ee:	469b      	mov	fp, r3
 80081f0:	4643      	mov	r3, r8
 80081f2:	eb1a 0303 	adds.w	r3, sl, r3
 80081f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081fa:	464b      	mov	r3, r9
 80081fc:	eb4b 0303 	adc.w	r3, fp, r3
 8008200:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008210:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008214:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008218:	460b      	mov	r3, r1
 800821a:	18db      	adds	r3, r3, r3
 800821c:	643b      	str	r3, [r7, #64]	@ 0x40
 800821e:	4613      	mov	r3, r2
 8008220:	eb42 0303 	adc.w	r3, r2, r3
 8008224:	647b      	str	r3, [r7, #68]	@ 0x44
 8008226:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800822a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800822e:	f7f7 ffd1 	bl	80001d4 <__aeabi_uldivmod>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	4611      	mov	r1, r2
 8008238:	4b3b      	ldr	r3, [pc, #236]	@ (8008328 <UART_SetConfig+0x2d4>)
 800823a:	fba3 2301 	umull	r2, r3, r3, r1
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	2264      	movs	r2, #100	@ 0x64
 8008242:	fb02 f303 	mul.w	r3, r2, r3
 8008246:	1acb      	subs	r3, r1, r3
 8008248:	00db      	lsls	r3, r3, #3
 800824a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800824e:	4b36      	ldr	r3, [pc, #216]	@ (8008328 <UART_SetConfig+0x2d4>)
 8008250:	fba3 2302 	umull	r2, r3, r3, r2
 8008254:	095b      	lsrs	r3, r3, #5
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800825c:	441c      	add	r4, r3
 800825e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008262:	2200      	movs	r2, #0
 8008264:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008268:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800826c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008270:	4642      	mov	r2, r8
 8008272:	464b      	mov	r3, r9
 8008274:	1891      	adds	r1, r2, r2
 8008276:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008278:	415b      	adcs	r3, r3
 800827a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800827c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008280:	4641      	mov	r1, r8
 8008282:	1851      	adds	r1, r2, r1
 8008284:	6339      	str	r1, [r7, #48]	@ 0x30
 8008286:	4649      	mov	r1, r9
 8008288:	414b      	adcs	r3, r1
 800828a:	637b      	str	r3, [r7, #52]	@ 0x34
 800828c:	f04f 0200 	mov.w	r2, #0
 8008290:	f04f 0300 	mov.w	r3, #0
 8008294:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008298:	4659      	mov	r1, fp
 800829a:	00cb      	lsls	r3, r1, #3
 800829c:	4651      	mov	r1, sl
 800829e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082a2:	4651      	mov	r1, sl
 80082a4:	00ca      	lsls	r2, r1, #3
 80082a6:	4610      	mov	r0, r2
 80082a8:	4619      	mov	r1, r3
 80082aa:	4603      	mov	r3, r0
 80082ac:	4642      	mov	r2, r8
 80082ae:	189b      	adds	r3, r3, r2
 80082b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80082b4:	464b      	mov	r3, r9
 80082b6:	460a      	mov	r2, r1
 80082b8:	eb42 0303 	adc.w	r3, r2, r3
 80082bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80082cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80082d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80082d4:	460b      	mov	r3, r1
 80082d6:	18db      	adds	r3, r3, r3
 80082d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082da:	4613      	mov	r3, r2
 80082dc:	eb42 0303 	adc.w	r3, r2, r3
 80082e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80082e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80082ea:	f7f7 ff73 	bl	80001d4 <__aeabi_uldivmod>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008328 <UART_SetConfig+0x2d4>)
 80082f4:	fba3 1302 	umull	r1, r3, r3, r2
 80082f8:	095b      	lsrs	r3, r3, #5
 80082fa:	2164      	movs	r1, #100	@ 0x64
 80082fc:	fb01 f303 	mul.w	r3, r1, r3
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	00db      	lsls	r3, r3, #3
 8008304:	3332      	adds	r3, #50	@ 0x32
 8008306:	4a08      	ldr	r2, [pc, #32]	@ (8008328 <UART_SetConfig+0x2d4>)
 8008308:	fba2 2303 	umull	r2, r3, r2, r3
 800830c:	095b      	lsrs	r3, r3, #5
 800830e:	f003 0207 	and.w	r2, r3, #7
 8008312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4422      	add	r2, r4
 800831a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800831c:	e106      	b.n	800852c <UART_SetConfig+0x4d8>
 800831e:	bf00      	nop
 8008320:	40011000 	.word	0x40011000
 8008324:	40011400 	.word	0x40011400
 8008328:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800832c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008330:	2200      	movs	r2, #0
 8008332:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008336:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800833a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800833e:	4642      	mov	r2, r8
 8008340:	464b      	mov	r3, r9
 8008342:	1891      	adds	r1, r2, r2
 8008344:	6239      	str	r1, [r7, #32]
 8008346:	415b      	adcs	r3, r3
 8008348:	627b      	str	r3, [r7, #36]	@ 0x24
 800834a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800834e:	4641      	mov	r1, r8
 8008350:	1854      	adds	r4, r2, r1
 8008352:	4649      	mov	r1, r9
 8008354:	eb43 0501 	adc.w	r5, r3, r1
 8008358:	f04f 0200 	mov.w	r2, #0
 800835c:	f04f 0300 	mov.w	r3, #0
 8008360:	00eb      	lsls	r3, r5, #3
 8008362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008366:	00e2      	lsls	r2, r4, #3
 8008368:	4614      	mov	r4, r2
 800836a:	461d      	mov	r5, r3
 800836c:	4643      	mov	r3, r8
 800836e:	18e3      	adds	r3, r4, r3
 8008370:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008374:	464b      	mov	r3, r9
 8008376:	eb45 0303 	adc.w	r3, r5, r3
 800837a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800837e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800838a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800838e:	f04f 0200 	mov.w	r2, #0
 8008392:	f04f 0300 	mov.w	r3, #0
 8008396:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800839a:	4629      	mov	r1, r5
 800839c:	008b      	lsls	r3, r1, #2
 800839e:	4621      	mov	r1, r4
 80083a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083a4:	4621      	mov	r1, r4
 80083a6:	008a      	lsls	r2, r1, #2
 80083a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80083ac:	f7f7 ff12 	bl	80001d4 <__aeabi_uldivmod>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	4b60      	ldr	r3, [pc, #384]	@ (8008538 <UART_SetConfig+0x4e4>)
 80083b6:	fba3 2302 	umull	r2, r3, r3, r2
 80083ba:	095b      	lsrs	r3, r3, #5
 80083bc:	011c      	lsls	r4, r3, #4
 80083be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083c2:	2200      	movs	r2, #0
 80083c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80083cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80083d0:	4642      	mov	r2, r8
 80083d2:	464b      	mov	r3, r9
 80083d4:	1891      	adds	r1, r2, r2
 80083d6:	61b9      	str	r1, [r7, #24]
 80083d8:	415b      	adcs	r3, r3
 80083da:	61fb      	str	r3, [r7, #28]
 80083dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083e0:	4641      	mov	r1, r8
 80083e2:	1851      	adds	r1, r2, r1
 80083e4:	6139      	str	r1, [r7, #16]
 80083e6:	4649      	mov	r1, r9
 80083e8:	414b      	adcs	r3, r1
 80083ea:	617b      	str	r3, [r7, #20]
 80083ec:	f04f 0200 	mov.w	r2, #0
 80083f0:	f04f 0300 	mov.w	r3, #0
 80083f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083f8:	4659      	mov	r1, fp
 80083fa:	00cb      	lsls	r3, r1, #3
 80083fc:	4651      	mov	r1, sl
 80083fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008402:	4651      	mov	r1, sl
 8008404:	00ca      	lsls	r2, r1, #3
 8008406:	4610      	mov	r0, r2
 8008408:	4619      	mov	r1, r3
 800840a:	4603      	mov	r3, r0
 800840c:	4642      	mov	r2, r8
 800840e:	189b      	adds	r3, r3, r2
 8008410:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008414:	464b      	mov	r3, r9
 8008416:	460a      	mov	r2, r1
 8008418:	eb42 0303 	adc.w	r3, r2, r3
 800841c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	67bb      	str	r3, [r7, #120]	@ 0x78
 800842a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800842c:	f04f 0200 	mov.w	r2, #0
 8008430:	f04f 0300 	mov.w	r3, #0
 8008434:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008438:	4649      	mov	r1, r9
 800843a:	008b      	lsls	r3, r1, #2
 800843c:	4641      	mov	r1, r8
 800843e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008442:	4641      	mov	r1, r8
 8008444:	008a      	lsls	r2, r1, #2
 8008446:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800844a:	f7f7 fec3 	bl	80001d4 <__aeabi_uldivmod>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	4611      	mov	r1, r2
 8008454:	4b38      	ldr	r3, [pc, #224]	@ (8008538 <UART_SetConfig+0x4e4>)
 8008456:	fba3 2301 	umull	r2, r3, r3, r1
 800845a:	095b      	lsrs	r3, r3, #5
 800845c:	2264      	movs	r2, #100	@ 0x64
 800845e:	fb02 f303 	mul.w	r3, r2, r3
 8008462:	1acb      	subs	r3, r1, r3
 8008464:	011b      	lsls	r3, r3, #4
 8008466:	3332      	adds	r3, #50	@ 0x32
 8008468:	4a33      	ldr	r2, [pc, #204]	@ (8008538 <UART_SetConfig+0x4e4>)
 800846a:	fba2 2303 	umull	r2, r3, r2, r3
 800846e:	095b      	lsrs	r3, r3, #5
 8008470:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008474:	441c      	add	r4, r3
 8008476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800847a:	2200      	movs	r2, #0
 800847c:	673b      	str	r3, [r7, #112]	@ 0x70
 800847e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008480:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008484:	4642      	mov	r2, r8
 8008486:	464b      	mov	r3, r9
 8008488:	1891      	adds	r1, r2, r2
 800848a:	60b9      	str	r1, [r7, #8]
 800848c:	415b      	adcs	r3, r3
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008494:	4641      	mov	r1, r8
 8008496:	1851      	adds	r1, r2, r1
 8008498:	6039      	str	r1, [r7, #0]
 800849a:	4649      	mov	r1, r9
 800849c:	414b      	adcs	r3, r1
 800849e:	607b      	str	r3, [r7, #4]
 80084a0:	f04f 0200 	mov.w	r2, #0
 80084a4:	f04f 0300 	mov.w	r3, #0
 80084a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80084ac:	4659      	mov	r1, fp
 80084ae:	00cb      	lsls	r3, r1, #3
 80084b0:	4651      	mov	r1, sl
 80084b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084b6:	4651      	mov	r1, sl
 80084b8:	00ca      	lsls	r2, r1, #3
 80084ba:	4610      	mov	r0, r2
 80084bc:	4619      	mov	r1, r3
 80084be:	4603      	mov	r3, r0
 80084c0:	4642      	mov	r2, r8
 80084c2:	189b      	adds	r3, r3, r2
 80084c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084c6:	464b      	mov	r3, r9
 80084c8:	460a      	mov	r2, r1
 80084ca:	eb42 0303 	adc.w	r3, r2, r3
 80084ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80084d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80084da:	667a      	str	r2, [r7, #100]	@ 0x64
 80084dc:	f04f 0200 	mov.w	r2, #0
 80084e0:	f04f 0300 	mov.w	r3, #0
 80084e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80084e8:	4649      	mov	r1, r9
 80084ea:	008b      	lsls	r3, r1, #2
 80084ec:	4641      	mov	r1, r8
 80084ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084f2:	4641      	mov	r1, r8
 80084f4:	008a      	lsls	r2, r1, #2
 80084f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80084fa:	f7f7 fe6b 	bl	80001d4 <__aeabi_uldivmod>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4b0d      	ldr	r3, [pc, #52]	@ (8008538 <UART_SetConfig+0x4e4>)
 8008504:	fba3 1302 	umull	r1, r3, r3, r2
 8008508:	095b      	lsrs	r3, r3, #5
 800850a:	2164      	movs	r1, #100	@ 0x64
 800850c:	fb01 f303 	mul.w	r3, r1, r3
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	011b      	lsls	r3, r3, #4
 8008514:	3332      	adds	r3, #50	@ 0x32
 8008516:	4a08      	ldr	r2, [pc, #32]	@ (8008538 <UART_SetConfig+0x4e4>)
 8008518:	fba2 2303 	umull	r2, r3, r2, r3
 800851c:	095b      	lsrs	r3, r3, #5
 800851e:	f003 020f 	and.w	r2, r3, #15
 8008522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4422      	add	r2, r4
 800852a:	609a      	str	r2, [r3, #8]
}
 800852c:	bf00      	nop
 800852e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008532:	46bd      	mov	sp, r7
 8008534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008538:	51eb851f 	.word	0x51eb851f

0800853c <memset>:
 800853c:	4402      	add	r2, r0
 800853e:	4603      	mov	r3, r0
 8008540:	4293      	cmp	r3, r2
 8008542:	d100      	bne.n	8008546 <memset+0xa>
 8008544:	4770      	bx	lr
 8008546:	f803 1b01 	strb.w	r1, [r3], #1
 800854a:	e7f9      	b.n	8008540 <memset+0x4>

0800854c <strncmp>:
 800854c:	b510      	push	{r4, lr}
 800854e:	b16a      	cbz	r2, 800856c <strncmp+0x20>
 8008550:	3901      	subs	r1, #1
 8008552:	1884      	adds	r4, r0, r2
 8008554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008558:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800855c:	429a      	cmp	r2, r3
 800855e:	d103      	bne.n	8008568 <strncmp+0x1c>
 8008560:	42a0      	cmp	r0, r4
 8008562:	d001      	beq.n	8008568 <strncmp+0x1c>
 8008564:	2a00      	cmp	r2, #0
 8008566:	d1f5      	bne.n	8008554 <strncmp+0x8>
 8008568:	1ad0      	subs	r0, r2, r3
 800856a:	bd10      	pop	{r4, pc}
 800856c:	4610      	mov	r0, r2
 800856e:	e7fc      	b.n	800856a <strncmp+0x1e>

08008570 <strncpy>:
 8008570:	b510      	push	{r4, lr}
 8008572:	3901      	subs	r1, #1
 8008574:	4603      	mov	r3, r0
 8008576:	b132      	cbz	r2, 8008586 <strncpy+0x16>
 8008578:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800857c:	f803 4b01 	strb.w	r4, [r3], #1
 8008580:	3a01      	subs	r2, #1
 8008582:	2c00      	cmp	r4, #0
 8008584:	d1f7      	bne.n	8008576 <strncpy+0x6>
 8008586:	441a      	add	r2, r3
 8008588:	2100      	movs	r1, #0
 800858a:	4293      	cmp	r3, r2
 800858c:	d100      	bne.n	8008590 <strncpy+0x20>
 800858e:	bd10      	pop	{r4, pc}
 8008590:	f803 1b01 	strb.w	r1, [r3], #1
 8008594:	e7f9      	b.n	800858a <strncpy+0x1a>
	...

08008598 <__libc_init_array>:
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	4d0d      	ldr	r5, [pc, #52]	@ (80085d0 <__libc_init_array+0x38>)
 800859c:	4c0d      	ldr	r4, [pc, #52]	@ (80085d4 <__libc_init_array+0x3c>)
 800859e:	1b64      	subs	r4, r4, r5
 80085a0:	10a4      	asrs	r4, r4, #2
 80085a2:	2600      	movs	r6, #0
 80085a4:	42a6      	cmp	r6, r4
 80085a6:	d109      	bne.n	80085bc <__libc_init_array+0x24>
 80085a8:	4d0b      	ldr	r5, [pc, #44]	@ (80085d8 <__libc_init_array+0x40>)
 80085aa:	4c0c      	ldr	r4, [pc, #48]	@ (80085dc <__libc_init_array+0x44>)
 80085ac:	f000 f818 	bl	80085e0 <_init>
 80085b0:	1b64      	subs	r4, r4, r5
 80085b2:	10a4      	asrs	r4, r4, #2
 80085b4:	2600      	movs	r6, #0
 80085b6:	42a6      	cmp	r6, r4
 80085b8:	d105      	bne.n	80085c6 <__libc_init_array+0x2e>
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c0:	4798      	blx	r3
 80085c2:	3601      	adds	r6, #1
 80085c4:	e7ee      	b.n	80085a4 <__libc_init_array+0xc>
 80085c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ca:	4798      	blx	r3
 80085cc:	3601      	adds	r6, #1
 80085ce:	e7f2      	b.n	80085b6 <__libc_init_array+0x1e>
 80085d0:	080086e8 	.word	0x080086e8
 80085d4:	080086e8 	.word	0x080086e8
 80085d8:	080086e8 	.word	0x080086e8
 80085dc:	080086ec 	.word	0x080086ec

080085e0 <_init>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	bf00      	nop
 80085e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e6:	bc08      	pop	{r3}
 80085e8:	469e      	mov	lr, r3
 80085ea:	4770      	bx	lr

080085ec <_fini>:
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	bf00      	nop
 80085f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f2:	bc08      	pop	{r3}
 80085f4:	469e      	mov	lr, r3
 80085f6:	4770      	bx	lr
