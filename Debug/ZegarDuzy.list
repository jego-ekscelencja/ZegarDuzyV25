
ZegarDuzy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003754  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080038e8  080038e8  000048e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003968  08003968  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003968  08003968  00004968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003970  08003970  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003970  08003970  00004970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003974  08003974  00004974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003978  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08003984  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08003984  0000515c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c365  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c0  00000000  00000000  000113a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00013468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000099e  00000000  00000000  000140f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016638  00000000  00000000  00014a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000effb  00000000  00000000  0002b0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c360  00000000  00000000  0003a0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6421  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003394  00000000  00000000  000c6464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000c97f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080038d0 	.word	0x080038d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080038d0 	.word	0x080038d0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <MX_DMA_Init+0x3c>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000500 <MX_DMA_Init+0x3c>)
 80004d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004da:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <MX_DMA_Init+0x3c>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	203b      	movs	r0, #59	@ 0x3b
 80004ec:	f000 fe09 	bl	8001102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80004f0:	203b      	movs	r0, #59	@ 0x3b
 80004f2:	f000 fe22 	bl	800113a <HAL_NVIC_EnableIRQ>

}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40023800 	.word	0x40023800

08000504 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000518:	2300      	movs	r3, #0
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	4b10      	ldr	r3, [pc, #64]	@ (8000560 <MX_GPIO_Init+0x5c>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000520:	4a0f      	ldr	r2, [pc, #60]	@ (8000560 <MX_GPIO_Init+0x5c>)
 8000522:	f043 0301 	orr.w	r3, r3, #1
 8000526:	6313      	str	r3, [r2, #48]	@ 0x30
 8000528:	4b0d      	ldr	r3, [pc, #52]	@ (8000560 <MX_GPIO_Init+0x5c>)
 800052a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052c:	f003 0301 	and.w	r3, r3, #1
 8000530:	603b      	str	r3, [r7, #0]
 8000532:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2140      	movs	r1, #64	@ 0x40
 8000538:	480a      	ldr	r0, [pc, #40]	@ (8000564 <MX_GPIO_Init+0x60>)
 800053a:	f001 fb2f 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_LATCH_Pin;
 800053e:	2340      	movs	r3, #64	@ 0x40
 8000540:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000542:	2301      	movs	r3, #1
 8000544:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_LATCH_GPIO_Port, &GPIO_InitStruct);
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	4619      	mov	r1, r3
 8000552:	4804      	ldr	r0, [pc, #16]	@ (8000564 <MX_GPIO_Init+0x60>)
 8000554:	f001 f99e 	bl	8001894 <HAL_GPIO_Init>

}
 8000558:	bf00      	nop
 800055a:	3718      	adds	r7, #24
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40023800 	.word	0x40023800
 8000564:	40020000 	.word	0x40020000

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fc57 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f82b 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f7ff ffc5 	bl	8000504 <MX_GPIO_Init>
  MX_DMA_Init();
 800057a:	f7ff ffa3 	bl	80004c4 <MX_DMA_Init>
  MX_SPI1_Init();
 800057e:	f000 f9f3 	bl	8000968 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000582:	f000 fb27 	bl	8000bd4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000586:	2100      	movs	r1, #0
 8000588:	480e      	ldr	r0, [pc, #56]	@ (80005c4 <main+0x5c>)
 800058a:	f002 fba3 	bl	8002cd4 <HAL_TIM_PWM_Start>
   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (htim1.Init.Period + 1)/2);
 800058e:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <main+0x5c>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	1c5a      	adds	r2, r3, #1
 8000594:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <main+0x5c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	0852      	lsrs	r2, r2, #1
 800059a:	635a      	str	r2, [r3, #52]	@ 0x34
   for(int j = 0; j < 12; j++) {
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	e007      	b.n	80005b2 <main+0x4a>
     regValue.part[j] = 0;
 80005a2:	4a09      	ldr	r2, [pc, #36]	@ (80005c8 <main+0x60>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2100      	movs	r1, #0
 80005a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int j = 0; j < 12; j++) {
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	3301      	adds	r3, #1
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b0b      	cmp	r3, #11
 80005b6:	ddf4      	ble.n	80005a2 <main+0x3a>
   }

   SetPWMPercentGamma(20);
 80005b8:	2014      	movs	r0, #20
 80005ba:	f000 f965 	bl	8000888 <SetPWMPercentGamma>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* USER CODE BEGIN WHILE */

	     demo();
 80005be:	f000 f8b7 	bl	8000730 <demo>
 80005c2:	e7fc      	b.n	80005be <main+0x56>
 80005c4:	20000110 	.word	0x20000110
 80005c8:	20000040 	.word	0x20000040

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	@ 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 f94c 	bl	8003878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b23      	ldr	r3, [pc, #140]	@ (8000684 <SystemClock_Config+0xb8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	4a22      	ldr	r2, [pc, #136]	@ (8000684 <SystemClock_Config+0xb8>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000600:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <SystemClock_Config+0xb8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b1d      	ldr	r3, [pc, #116]	@ (8000688 <SystemClock_Config+0xbc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000618:	4a1b      	ldr	r2, [pc, #108]	@ (8000688 <SystemClock_Config+0xbc>)
 800061a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <SystemClock_Config+0xbc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000638:	2300      	movs	r3, #0
 800063a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fac5 	bl	8001bd0 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800064c:	f000 f986 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fd28 	bl	80020c0 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000676:	f000 f971 	bl	800095c <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3750      	adds	r7, #80	@ 0x50
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  if(hspi->Instance == SPI1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a08      	ldr	r2, [pc, #32]	@ (80006bc <HAL_SPI_TxCpltCallback+0x30>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d109      	bne.n	80006b2 <HAL_SPI_TxCpltCallback+0x26>
  {
    // Krótki impuls na pin LATCH
    // Zakładamy, że LATCH jest aktywny w stanie wysokim
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2140      	movs	r1, #64	@ 0x40
 80006a2:	4807      	ldr	r0, [pc, #28]	@ (80006c0 <HAL_SPI_TxCpltCallback+0x34>)
 80006a4:	f001 fa7a 	bl	8001b9c <HAL_GPIO_WritePin>
    // Krótka zwłoka - często wystarczy kilka/kilkanaście ns.
    // Ale można dać minimalny delay, np.:
    // for (volatile int i=0; i<10; i++); // prosta pętla opóźniająca
    HAL_GPIO_WritePin(SPI1_LATCH_GPIO_Port, SPI1_LATCH_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2140      	movs	r1, #64	@ 0x40
 80006ac:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <HAL_SPI_TxCpltCallback+0x34>)
 80006ae:	f001 fa75 	bl	8001b9c <HAL_GPIO_WritePin>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40013000 	.word	0x40013000
 80006c0:	40020000 	.word	0x40020000

080006c4 <Send192_struct>:

void Send192_struct(const Bits192 *data)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  // Przygotuj bufor do wysyłki – umieść dane MSB-first.
  memset(spiTxBuffer, 0, sizeof(spiTxBuffer));
 80006cc:	2218      	movs	r2, #24
 80006ce:	2100      	movs	r1, #0
 80006d0:	4815      	ldr	r0, [pc, #84]	@ (8000728 <Send192_struct+0x64>)
 80006d2:	f003 f8d1 	bl	8003878 <memset>
  int byteIndex = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]

  // Zakładamy, że chcemy wysłać part[11] (MSB) do part[0] (LSB).
  for (int partIndex = 11; partIndex >= 0; partIndex--)
 80006da:	230b      	movs	r3, #11
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	e017      	b.n	8000710 <Send192_struct+0x4c>
  {
    uint16_t val = data->part[partIndex];
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80006e8:	81fb      	strh	r3, [r7, #14]
    spiTxBuffer[byteIndex++] = (uint8_t)((val >> 8) & 0xFF);  // MSB
 80006ea:	89fb      	ldrh	r3, [r7, #14]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	b299      	uxth	r1, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	617a      	str	r2, [r7, #20]
 80006f6:	b2c9      	uxtb	r1, r1
 80006f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000728 <Send192_struct+0x64>)
 80006fa:	54d1      	strb	r1, [r2, r3]
    spiTxBuffer[byteIndex++] = (uint8_t)(val & 0xFF);         // LSB
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	617a      	str	r2, [r7, #20]
 8000702:	89fa      	ldrh	r2, [r7, #14]
 8000704:	b2d1      	uxtb	r1, r2
 8000706:	4a08      	ldr	r2, [pc, #32]	@ (8000728 <Send192_struct+0x64>)
 8000708:	54d1      	strb	r1, [r2, r3]
  for (int partIndex = 11; partIndex >= 0; partIndex--)
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	3b01      	subs	r3, #1
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	2b00      	cmp	r3, #0
 8000714:	dae4      	bge.n	80006e0 <Send192_struct+0x1c>
  }

  HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 24);
 8000716:	2218      	movs	r2, #24
 8000718:	4903      	ldr	r1, [pc, #12]	@ (8000728 <Send192_struct+0x64>)
 800071a:	4804      	ldr	r0, [pc, #16]	@ (800072c <Send192_struct+0x68>)
 800071c:	f001 ff06 	bl	800252c <HAL_SPI_Transmit_DMA>
}
 8000720:	bf00      	nop
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000028 	.word	0x20000028
 800072c:	20000058 	.word	0x20000058

08000730 <demo>:


void demo (void){
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	@ 0x30
 8000734:	af00      	add	r7, sp, #0

	// 1) Wyzeruj cały bufor przed ustawianiem bitów
		  // ===== Tryb 1: Zapalanie pojedynczej komórki (192 bity) =====
		     for(int i = 0; i < 192; i++)
 8000736:	2300      	movs	r3, #0
 8000738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800073a:	e02e      	b.n	800079a <demo+0x6a>
		     {
		       // Wyzeruj wszystkie części
		       for(int j = 0; j < 12; j++) {
 800073c:	2300      	movs	r3, #0
 800073e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000740:	e007      	b.n	8000752 <demo+0x22>
		         regValue.part[j] = 0;
 8000742:	4a50      	ldr	r2, [pc, #320]	@ (8000884 <demo+0x154>)
 8000744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000746:	2100      	movs	r1, #0
 8000748:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		       for(int j = 0; j < 12; j++) {
 800074c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800074e:	3301      	adds	r3, #1
 8000750:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000754:	2b0b      	cmp	r3, #11
 8000756:	ddf4      	ble.n	8000742 <demo+0x12>
		       }
		       // Ustaw jeden bit
		       int idx = i / 16;
 8000758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800075a:	2b00      	cmp	r3, #0
 800075c:	da00      	bge.n	8000760 <demo+0x30>
 800075e:	330f      	adds	r3, #15
 8000760:	111b      	asrs	r3, r3, #4
 8000762:	60bb      	str	r3, [r7, #8]
		       int bitpos = i % 16;
 8000764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000766:	425a      	negs	r2, r3
 8000768:	f003 030f 	and.w	r3, r3, #15
 800076c:	f002 020f 	and.w	r2, r2, #15
 8000770:	bf58      	it	pl
 8000772:	4253      	negpl	r3, r2
 8000774:	607b      	str	r3, [r7, #4]
		       regValue.part[idx] = (uint16_t)(1U << bitpos);
 8000776:	2201      	movs	r2, #1
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	fa02 f303 	lsl.w	r3, r2, r3
 800077e:	b299      	uxth	r1, r3
 8000780:	4a40      	ldr	r2, [pc, #256]	@ (8000884 <demo+0x154>)
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		       Send192_struct(&regValue);
 8000788:	483e      	ldr	r0, [pc, #248]	@ (8000884 <demo+0x154>)
 800078a:	f7ff ff9b 	bl	80006c4 <Send192_struct>
		       HAL_Delay(50);  // delay między wysyłkami
 800078e:	2032      	movs	r0, #50	@ 0x32
 8000790:	f000 fbb8 	bl	8000f04 <HAL_Delay>
		     for(int i = 0; i < 192; i++)
 8000794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000796:	3301      	adds	r3, #1
 8000798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800079a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800079c:	2bbf      	cmp	r3, #191	@ 0xbf
 800079e:	ddcd      	ble.n	800073c <demo+0xc>
		     }

		     // ===== Tryb 2: Sekwencyjne zapalanie wszystkich 192 komórek =====
		     for(int j = 0; j < 12; j++) {
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80007a4:	e007      	b.n	80007b6 <demo+0x86>
		       regValue.part[j] = 0;
 80007a6:	4a37      	ldr	r2, [pc, #220]	@ (8000884 <demo+0x154>)
 80007a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007aa:	2100      	movs	r1, #0
 80007ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		     for(int j = 0; j < 12; j++) {
 80007b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b2:	3301      	adds	r3, #1
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80007b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b8:	2b0b      	cmp	r3, #11
 80007ba:	ddf4      	ble.n	80007a6 <demo+0x76>
		     }

		     // Stopniowe zapalanie kolejnych bitów
		     for(int i = 0; i < 192; i++)
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
 80007c0:	e026      	b.n	8000810 <demo+0xe0>
		     {
		       int idx = i / 16;
 80007c2:	6a3b      	ldr	r3, [r7, #32]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	da00      	bge.n	80007ca <demo+0x9a>
 80007c8:	330f      	adds	r3, #15
 80007ca:	111b      	asrs	r3, r3, #4
 80007cc:	613b      	str	r3, [r7, #16]
		       int bitpos = i % 16;
 80007ce:	6a3b      	ldr	r3, [r7, #32]
 80007d0:	425a      	negs	r2, r3
 80007d2:	f003 030f 	and.w	r3, r3, #15
 80007d6:	f002 020f 	and.w	r2, r2, #15
 80007da:	bf58      	it	pl
 80007dc:	4253      	negpl	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]
		       regValue.part[idx] |= (uint16_t)(1U << bitpos);
 80007e0:	4a28      	ldr	r2, [pc, #160]	@ (8000884 <demo+0x154>)
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80007e8:	2101      	movs	r1, #1
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	fa01 f303 	lsl.w	r3, r1, r3
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	4313      	orrs	r3, r2
 80007f4:	b299      	uxth	r1, r3
 80007f6:	4a23      	ldr	r2, [pc, #140]	@ (8000884 <demo+0x154>)
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		       Send192_struct(&regValue);
 80007fe:	4821      	ldr	r0, [pc, #132]	@ (8000884 <demo+0x154>)
 8000800:	f7ff ff60 	bl	80006c4 <Send192_struct>
		       HAL_Delay(50);
 8000804:	2032      	movs	r0, #50	@ 0x32
 8000806:	f000 fb7d 	bl	8000f04 <HAL_Delay>
		     for(int i = 0; i < 192; i++)
 800080a:	6a3b      	ldr	r3, [r7, #32]
 800080c:	3301      	adds	r3, #1
 800080e:	623b      	str	r3, [r7, #32]
 8000810:	6a3b      	ldr	r3, [r7, #32]
 8000812:	2bbf      	cmp	r3, #191	@ 0xbf
 8000814:	ddd5      	ble.n	80007c2 <demo+0x92>
		     }

		     FadeEffect();
 8000816:	f000 f863 	bl	80008e0 <FadeEffect>

		     // Stopniowe gaszenie kolejnych komórek
		     for(int i = 0; i < 192; i++)
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
 800081e:	e028      	b.n	8000872 <demo+0x142>
		     {
		       int idx = i / 16;
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	2b00      	cmp	r3, #0
 8000824:	da00      	bge.n	8000828 <demo+0xf8>
 8000826:	330f      	adds	r3, #15
 8000828:	111b      	asrs	r3, r3, #4
 800082a:	61bb      	str	r3, [r7, #24]
		       int bitpos = i % 16;
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	425a      	negs	r2, r3
 8000830:	f003 030f 	and.w	r3, r3, #15
 8000834:	f002 020f 	and.w	r2, r2, #15
 8000838:	bf58      	it	pl
 800083a:	4253      	negpl	r3, r2
 800083c:	617b      	str	r3, [r7, #20]
		       regValue.part[idx] &= (uint16_t)~(1U << bitpos);
 800083e:	4a11      	ldr	r2, [pc, #68]	@ (8000884 <demo+0x154>)
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000846:	2101      	movs	r1, #1
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	b29b      	uxth	r3, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	b29b      	uxth	r3, r3
 8000854:	4013      	ands	r3, r2
 8000856:	b299      	uxth	r1, r3
 8000858:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <demo+0x154>)
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		       Send192_struct(&regValue);
 8000860:	4808      	ldr	r0, [pc, #32]	@ (8000884 <demo+0x154>)
 8000862:	f7ff ff2f 	bl	80006c4 <Send192_struct>
		       HAL_Delay(50);
 8000866:	2032      	movs	r0, #50	@ 0x32
 8000868:	f000 fb4c 	bl	8000f04 <HAL_Delay>
		     for(int i = 0; i < 192; i++)
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	3301      	adds	r3, #1
 8000870:	61fb      	str	r3, [r7, #28]
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	2bbf      	cmp	r3, #191	@ 0xbf
 8000876:	ddd3      	ble.n	8000820 <demo+0xf0>
		     }
}
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	3730      	adds	r7, #48	@ 0x30
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000040 	.word	0x20000040

08000888 <SetPWMPercentGamma>:
  uint32_t compare_value = (period + 1) - ((period + 1) * percent / 100);

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
}

void SetPWMPercentGamma(uint8_t percent) {
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
    if (percent > 100) {
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b64      	cmp	r3, #100	@ 0x64
 8000896:	d901      	bls.n	800089c <SetPWMPercentGamma+0x14>
        percent = 100;  // ograniczenie do 100%
 8000898:	2364      	movs	r3, #100	@ 0x64
 800089a:	71fb      	strb	r3, [r7, #7]
    }

    // Pobierz wartość okresu (ARR) dla TIM1
    uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 800089c:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <SetPWMPercentGamma+0x4c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008a2:	617b      	str	r3, [r7, #20]

    // Pobierz skorygowaną wartość procentową z tabeli gamma
    uint8_t gamma_percent = gamma_table[percent];
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	4a0c      	ldr	r2, [pc, #48]	@ (80008d8 <SetPWMPercentGamma+0x50>)
 80008a8:	5cd3      	ldrb	r3, [r2, r3]
 80008aa:	74fb      	strb	r3, [r7, #19]

    // Oblicz wartość compare przy użyciu korekcji gamma
    uint32_t compare_value = (period + 1)  * gamma_percent / 100;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	3301      	adds	r3, #1
 80008b0:	7cfa      	ldrb	r2, [r7, #19]
 80008b2:	fb02 f303 	mul.w	r3, r2, r3
 80008b6:	4a09      	ldr	r2, [pc, #36]	@ (80008dc <SetPWMPercentGamma+0x54>)
 80008b8:	fba2 2303 	umull	r2, r3, r2, r3
 80008bc:	095b      	lsrs	r3, r3, #5
 80008be:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare_value);
 80008c0:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <SetPWMPercentGamma+0x4c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80008c8:	bf00      	nop
 80008ca:	371c      	adds	r7, #28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	20000110 	.word	0x20000110
 80008d8:	080038e8 	.word	0x080038e8
 80008dc:	51eb851f 	.word	0x51eb851f

080008e0 <FadeEffect>:

void FadeEffect(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
    // 1) Zaczekaj 1s (np. na start, miganie itp.)
    HAL_Delay(200);
 80008e6:	20c8      	movs	r0, #200	@ 0xc8
 80008e8:	f000 fb0c 	bl	8000f04 <HAL_Delay>

    // 2) Ściemnij od 10% do 0%
    for (int p = 10; p >= 0; p--)
 80008ec:	230a      	movs	r3, #10
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	e00a      	b.n	8000908 <FadeEffect+0x28>
    {
        SetPWMPercentGamma(p);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ffc6 	bl	8000888 <SetPWMPercentGamma>
        // Każdy krok trwa 50 ms (zmień wg potrzeb)
        HAL_Delay(50);
 80008fc:	2032      	movs	r0, #50	@ 0x32
 80008fe:	f000 fb01 	bl	8000f04 <HAL_Delay>
    for (int p = 10; p >= 0; p--)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	3b01      	subs	r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b00      	cmp	r3, #0
 800090c:	daf1      	bge.n	80008f2 <FadeEffect+0x12>
    }

    // 3) Rozjaśnij od 0% do 100%
    for (int p = 0; p <= 100; p++)
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	e00a      	b.n	800092a <FadeEffect+0x4a>
    {
        SetPWMPercentGamma(p);
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ffb5 	bl	8000888 <SetPWMPercentGamma>
        HAL_Delay(50);
 800091e:	2032      	movs	r0, #50	@ 0x32
 8000920:	f000 faf0 	bl	8000f04 <HAL_Delay>
    for (int p = 0; p <= 100; p++)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	3301      	adds	r3, #1
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	2b64      	cmp	r3, #100	@ 0x64
 800092e:	ddf1      	ble.n	8000914 <FadeEffect+0x34>
    }

    // 4) Ściemnij od 100% do 10%
    for (int p = 100; p >= 10; p--)
 8000930:	2364      	movs	r3, #100	@ 0x64
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	e00a      	b.n	800094c <FadeEffect+0x6c>
    {
        SetPWMPercentGamma(p);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ffa4 	bl	8000888 <SetPWMPercentGamma>
        HAL_Delay(50);
 8000940:	2032      	movs	r0, #50	@ 0x32
 8000942:	f000 fadf 	bl	8000f04 <HAL_Delay>
    for (int p = 100; p >= 10; p--)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3b01      	subs	r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b09      	cmp	r3, #9
 8000950:	dcf1      	bgt.n	8000936 <FadeEffect+0x56>
    }
}
 8000952:	bf00      	nop
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <Error_Handler+0x8>

08000968 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800096c:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <MX_SPI1_Init+0x64>)
 800096e:	4a18      	ldr	r2, [pc, #96]	@ (80009d0 <MX_SPI1_Init+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000972:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <MX_SPI1_Init+0x64>)
 8000974:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000978:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800097a:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <MX_SPI1_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <MX_SPI1_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_SPI1_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800098c:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <MX_SPI1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_SPI1_Init+0x64>)
 8000994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000998:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_SPI1_Init+0x64>)
 800099c:	2220      	movs	r2, #32
 800099e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a0:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <MX_SPI1_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_SPI1_Init+0x64>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ac:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <MX_SPI1_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_SPI1_Init+0x64>)
 80009b4:	220a      	movs	r2, #10
 80009b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b8:	4804      	ldr	r0, [pc, #16]	@ (80009cc <MX_SPI1_Init+0x64>)
 80009ba:	f001 fd2d 	bl	8002418 <HAL_SPI_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009c4:	f7ff ffca 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000058 	.word	0x20000058
 80009d0:	40013000 	.word	0x40013000

080009d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	@ 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a34      	ldr	r2, [pc, #208]	@ (8000ac4 <HAL_SPI_MspInit+0xf0>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d161      	bne.n	8000aba <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b33      	ldr	r3, [pc, #204]	@ (8000ac8 <HAL_SPI_MspInit+0xf4>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	4a32      	ldr	r2, [pc, #200]	@ (8000ac8 <HAL_SPI_MspInit+0xf4>)
 8000a00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a06:	4b30      	ldr	r3, [pc, #192]	@ (8000ac8 <HAL_SPI_MspInit+0xf4>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac8 <HAL_SPI_MspInit+0xf4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ac8 <HAL_SPI_MspInit+0xf4>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b29      	ldr	r3, [pc, #164]	@ (8000ac8 <HAL_SPI_MspInit+0xf4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a2e:	23a0      	movs	r3, #160	@ 0xa0
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a3e:	2305      	movs	r3, #5
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4820      	ldr	r0, [pc, #128]	@ (8000acc <HAL_SPI_MspInit+0xf8>)
 8000a4a:	f000 ff23 	bl	8001894 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000a4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <HAL_SPI_MspInit+0xfc>)
 8000a50:	4a20      	ldr	r2, [pc, #128]	@ (8000ad4 <HAL_SPI_MspInit+0x100>)
 8000a52:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000a54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <HAL_SPI_MspInit+0xfc>)
 8000a56:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000a5a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <HAL_SPI_MspInit+0xfc>)
 8000a5e:	2240      	movs	r2, #64	@ 0x40
 8000a60:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <HAL_SPI_MspInit+0xfc>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a68:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <HAL_SPI_MspInit+0xfc>)
 8000a6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a6e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a70:	4b17      	ldr	r3, [pc, #92]	@ (8000ad0 <HAL_SPI_MspInit+0xfc>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a76:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <HAL_SPI_MspInit+0xfc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <HAL_SPI_MspInit+0xfc>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a82:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <HAL_SPI_MspInit+0xfc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <HAL_SPI_MspInit+0xfc>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000a8e:	4810      	ldr	r0, [pc, #64]	@ (8000ad0 <HAL_SPI_MspInit+0xfc>)
 8000a90:	f000 fb6e 	bl	8001170 <HAL_DMA_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000a9a:	f7ff ff5f 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad0 <HAL_SPI_MspInit+0xfc>)
 8000aa2:	649a      	str	r2, [r3, #72]	@ 0x48
 8000aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad0 <HAL_SPI_MspInit+0xfc>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	2023      	movs	r0, #35	@ 0x23
 8000ab0:	f000 fb27 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ab4:	2023      	movs	r0, #35	@ 0x23
 8000ab6:	f000 fb40 	bl	800113a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000aba:	bf00      	nop
 8000abc:	3728      	adds	r7, #40	@ 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40013000 	.word	0x40013000
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	200000b0 	.word	0x200000b0
 8000ad4:	40026458 	.word	0x40026458

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aee:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	4a08      	ldr	r2, [pc, #32]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <NMI_Handler+0x4>

08000b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <MemManage_Handler+0x4>

08000b40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7e:	f000 f9a1 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b8c:	4802      	ldr	r0, [pc, #8]	@ (8000b98 <SPI1_IRQHandler+0x10>)
 8000b8e:	f001 fd7f 	bl	8002690 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000058 	.word	0x20000058

08000b9c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000ba0:	4802      	ldr	r0, [pc, #8]	@ (8000bac <DMA2_Stream3_IRQHandler+0x10>)
 8000ba2:	f000 fc0d 	bl	80013c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200000b0 	.word	0x200000b0

08000bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb4:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <SystemInit+0x20>)
 8000bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bba:	4a05      	ldr	r2, [pc, #20]	@ (8000bd0 <SystemInit+0x20>)
 8000bbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b096      	sub	sp, #88	@ 0x58
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bda:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]
 8000c02:	615a      	str	r2, [r3, #20]
 8000c04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2220      	movs	r2, #32
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f002 fe33 	bl	8003878 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c12:	4b3e      	ldr	r3, [pc, #248]	@ (8000d0c <MX_TIM1_Init+0x138>)
 8000c14:	4a3e      	ldr	r2, [pc, #248]	@ (8000d10 <MX_TIM1_Init+0x13c>)
 8000c16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 8000c18:	4b3c      	ldr	r3, [pc, #240]	@ (8000d0c <MX_TIM1_Init+0x138>)
 8000c1a:	2218      	movs	r2, #24
 8000c1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d0c <MX_TIM1_Init+0x138>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000c24:	4b39      	ldr	r3, [pc, #228]	@ (8000d0c <MX_TIM1_Init+0x138>)
 8000c26:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2c:	4b37      	ldr	r3, [pc, #220]	@ (8000d0c <MX_TIM1_Init+0x138>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c32:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <MX_TIM1_Init+0x138>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c38:	4b34      	ldr	r3, [pc, #208]	@ (8000d0c <MX_TIM1_Init+0x138>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c3e:	4833      	ldr	r0, [pc, #204]	@ (8000d0c <MX_TIM1_Init+0x138>)
 8000c40:	f001 ffa0 	bl	8002b84 <HAL_TIM_Base_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c4a:	f7ff fe87 	bl	800095c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c52:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c54:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c58:	4619      	mov	r1, r3
 8000c5a:	482c      	ldr	r0, [pc, #176]	@ (8000d0c <MX_TIM1_Init+0x138>)
 8000c5c:	f002 f9ac 	bl	8002fb8 <HAL_TIM_ConfigClockSource>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c66:	f7ff fe79 	bl	800095c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c6a:	4828      	ldr	r0, [pc, #160]	@ (8000d0c <MX_TIM1_Init+0x138>)
 8000c6c:	f001 ffd9 	bl	8002c22 <HAL_TIM_PWM_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c76:	f7ff fe71 	bl	800095c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c82:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c86:	4619      	mov	r1, r3
 8000c88:	4820      	ldr	r0, [pc, #128]	@ (8000d0c <MX_TIM1_Init+0x138>)
 8000c8a:	f002 fd35 	bl	80036f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c94:	f7ff fe62 	bl	800095c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c98:	2360      	movs	r3, #96	@ 0x60
 8000c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	2200      	movs	r2, #0
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4813      	ldr	r0, [pc, #76]	@ (8000d0c <MX_TIM1_Init+0x138>)
 8000cbe:	f002 f8b9 	bl	8002e34 <HAL_TIM_PWM_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000cc8:	f7ff fe48 	bl	800095c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	4619      	mov	r1, r3
 8000cee:	4807      	ldr	r0, [pc, #28]	@ (8000d0c <MX_TIM1_Init+0x138>)
 8000cf0:	f002 fd70 	bl	80037d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000cfa:	f7ff fe2f 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cfe:	4803      	ldr	r0, [pc, #12]	@ (8000d0c <MX_TIM1_Init+0x138>)
 8000d00:	f000 f82a 	bl	8000d58 <HAL_TIM_MspPostInit>

}
 8000d04:	bf00      	nop
 8000d06:	3758      	adds	r7, #88	@ 0x58
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000110 	.word	0x20000110
 8000d10:	40010000 	.word	0x40010000

08000d14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0b      	ldr	r2, [pc, #44]	@ (8000d50 <HAL_TIM_Base_MspInit+0x3c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d10d      	bne.n	8000d42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <HAL_TIM_Base_MspInit+0x40>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	4a09      	ldr	r2, [pc, #36]	@ (8000d54 <HAL_TIM_Base_MspInit+0x40>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d36:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <HAL_TIM_Base_MspInit+0x40>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d42:	bf00      	nop
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40010000 	.word	0x40010000
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a12      	ldr	r2, [pc, #72]	@ (8000dc0 <HAL_TIM_MspPostInit+0x68>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d11e      	bne.n	8000db8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <HAL_TIM_MspPostInit+0x6c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a10      	ldr	r2, [pc, #64]	@ (8000dc4 <HAL_TIM_MspPostInit+0x6c>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <HAL_TIM_MspPostInit+0x6c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	4619      	mov	r1, r3
 8000db2:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <HAL_TIM_MspPostInit+0x70>)
 8000db4:	f000 fd6e 	bl	8001894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000db8:	bf00      	nop
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40010000 	.word	0x40010000
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020000 	.word	0x40020000

08000dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dd0:	f7ff feee 	bl	8000bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd4:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dd6:	490d      	ldr	r1, [pc, #52]	@ (8000e0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dec:	4c0a      	ldr	r4, [pc, #40]	@ (8000e18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f002 fd45 	bl	8003888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfe:	f7ff fbb3 	bl	8000568 <main>
  bx  lr    
 8000e02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e04:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e10:	08003978 	.word	0x08003978
  ldr r2, =_sbss
 8000e14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e18:	2000015c 	.word	0x2000015c

08000e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e24:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <HAL_Init+0x40>)
 8000e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e30:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <HAL_Init+0x40>)
 8000e36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	@ (8000e60 <HAL_Init+0x40>)
 8000e42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f94f 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f000 f808 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff fe40 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023c00 	.word	0x40023c00

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_InitTick+0x54>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <HAL_InitTick+0x58>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f967 	bl	8001156 <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00e      	b.n	8000eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d80a      	bhi.n	8000eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f000 f92f 	bl	8001102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea4:	4a06      	ldr	r2, [pc, #24]	@ (8000ec0 <HAL_InitTick+0x5c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <HAL_IncTick+0x20>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_IncTick+0x24>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <HAL_IncTick+0x24>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000158 	.word	0x20000158

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	@ (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000158 	.word	0x20000158

08000f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f0c:	f7ff ffee 	bl	8000eec <HAL_GetTick>
 8000f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f1c:	d005      	beq.n	8000f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <HAL_Delay+0x44>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4413      	add	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f2a:	bf00      	nop
 8000f2c:	f7ff ffde 	bl	8000eec <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d8f7      	bhi.n	8000f2c <HAL_Delay+0x28>
  {
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4907      	ldr	r1, [pc, #28]	@ (8000fe8 <__NVIC_EnableIRQ+0x38>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	@ (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	@ (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	@ 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	@ 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010b8:	d301      	bcc.n	80010be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00f      	b.n	80010de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010be:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <SysTick_Config+0x40>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c6:	210f      	movs	r1, #15
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f7ff ff8e 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <SysTick_Config+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <SysTick_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff29 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff3e 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ff8e 	bl	8001040 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff5d 	bl	8000fec <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff31 	bl	8000fb0 <__NVIC_EnableIRQ>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffa2 	bl	80010a8 <SysTick_Config>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff feb6 	bl	8000eec <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e099      	b.n	80012c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2202      	movs	r2, #2
 8001190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ac:	e00f      	b.n	80011ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ae:	f7ff fe9d 	bl	8000eec <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d908      	bls.n	80011ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2220      	movs	r2, #32
 80011c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2203      	movs	r2, #3
 80011c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e078      	b.n	80012c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1e8      	bne.n	80011ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	4b38      	ldr	r3, [pc, #224]	@ (80012c8 <HAL_DMA_Init+0x158>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4313      	orrs	r3, r2
 800121e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001224:	2b04      	cmp	r3, #4
 8001226:	d107      	bne.n	8001238 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001230:	4313      	orrs	r3, r2
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4313      	orrs	r3, r2
 8001236:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f023 0307 	bic.w	r3, r3, #7
 800124e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4313      	orrs	r3, r2
 8001258:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125e:	2b04      	cmp	r3, #4
 8001260:	d117      	bne.n	8001292 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4313      	orrs	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00e      	beq.n	8001292 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 fa91 	bl	800179c <DMA_CheckFifoParam>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d008      	beq.n	8001292 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2240      	movs	r2, #64	@ 0x40
 8001284:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800128e:	2301      	movs	r3, #1
 8001290:	e016      	b.n	80012c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fa48 	bl	8001730 <DMA_CalcBaseAndBitshift>
 80012a0:	4603      	mov	r3, r0
 80012a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012a8:	223f      	movs	r2, #63	@ 0x3f
 80012aa:	409a      	lsls	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	f010803f 	.word	0xf010803f

080012cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <HAL_DMA_Start_IT+0x26>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e040      	b.n	8001374 <HAL_DMA_Start_IT+0xa8>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b01      	cmp	r3, #1
 8001304:	d12f      	bne.n	8001366 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2202      	movs	r2, #2
 800130a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 f9da 	bl	80016d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001324:	223f      	movs	r2, #63	@ 0x3f
 8001326:	409a      	lsls	r2, r3
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0216 	orr.w	r2, r2, #22
 800133a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001340:	2b00      	cmp	r3, #0
 8001342:	d007      	beq.n	8001354 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0208 	orr.w	r2, r2, #8
 8001352:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	e005      	b.n	8001372 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800136e:	2302      	movs	r3, #2
 8001370:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001372:	7dfb      	ldrb	r3, [r7, #23]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d004      	beq.n	800139a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2280      	movs	r2, #128	@ 0x80
 8001394:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e00c      	b.n	80013b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2205      	movs	r2, #5
 800139e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0201 	bic.w	r2, r2, #1
 80013b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013cc:	4b8e      	ldr	r3, [pc, #568]	@ (8001608 <HAL_DMA_IRQHandler+0x248>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a8e      	ldr	r2, [pc, #568]	@ (800160c <HAL_DMA_IRQHandler+0x24c>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	0a9b      	lsrs	r3, r3, #10
 80013d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ea:	2208      	movs	r2, #8
 80013ec:	409a      	lsls	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d01a      	beq.n	800142c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d013      	beq.n	800142c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0204 	bic.w	r2, r2, #4
 8001412:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001418:	2208      	movs	r2, #8
 800141a:	409a      	lsls	r2, r3
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001424:	f043 0201 	orr.w	r2, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001430:	2201      	movs	r2, #1
 8001432:	409a      	lsls	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4013      	ands	r3, r2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d012      	beq.n	8001462 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00b      	beq.n	8001462 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144e:	2201      	movs	r2, #1
 8001450:	409a      	lsls	r2, r3
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800145a:	f043 0202 	orr.w	r2, r3, #2
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001466:	2204      	movs	r2, #4
 8001468:	409a      	lsls	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4013      	ands	r3, r2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d012      	beq.n	8001498 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00b      	beq.n	8001498 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001484:	2204      	movs	r2, #4
 8001486:	409a      	lsls	r2, r3
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001490:	f043 0204 	orr.w	r2, r3, #4
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800149c:	2210      	movs	r2, #16
 800149e:	409a      	lsls	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d043      	beq.n	8001530 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d03c      	beq.n	8001530 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ba:	2210      	movs	r2, #16
 80014bc:	409a      	lsls	r2, r3
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d018      	beq.n	8001502 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d108      	bne.n	80014f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d024      	beq.n	8001530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	4798      	blx	r3
 80014ee:	e01f      	b.n	8001530 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d01b      	beq.n	8001530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	4798      	blx	r3
 8001500:	e016      	b.n	8001530 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d107      	bne.n	8001520 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0208 	bic.w	r2, r2, #8
 800151e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001534:	2220      	movs	r2, #32
 8001536:	409a      	lsls	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4013      	ands	r3, r2
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 808f 	beq.w	8001660 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 8087 	beq.w	8001660 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001556:	2220      	movs	r2, #32
 8001558:	409a      	lsls	r2, r3
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b05      	cmp	r3, #5
 8001568:	d136      	bne.n	80015d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0216 	bic.w	r2, r2, #22
 8001578:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	695a      	ldr	r2, [r3, #20]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001588:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	2b00      	cmp	r3, #0
 8001590:	d103      	bne.n	800159a <HAL_DMA_IRQHandler+0x1da>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001596:	2b00      	cmp	r3, #0
 8001598:	d007      	beq.n	80015aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0208 	bic.w	r2, r2, #8
 80015a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ae:	223f      	movs	r2, #63	@ 0x3f
 80015b0:	409a      	lsls	r2, r3
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d07e      	beq.n	80016cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	4798      	blx	r3
        }
        return;
 80015d6:	e079      	b.n	80016cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d01d      	beq.n	8001622 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10d      	bne.n	8001610 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d031      	beq.n	8001660 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	4798      	blx	r3
 8001604:	e02c      	b.n	8001660 <HAL_DMA_IRQHandler+0x2a0>
 8001606:	bf00      	nop
 8001608:	20000000 	.word	0x20000000
 800160c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001614:	2b00      	cmp	r3, #0
 8001616:	d023      	beq.n	8001660 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	4798      	blx	r3
 8001620:	e01e      	b.n	8001660 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10f      	bne.n	8001650 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0210 	bic.w	r2, r2, #16
 800163e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001664:	2b00      	cmp	r3, #0
 8001666:	d032      	beq.n	80016ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b00      	cmp	r3, #0
 8001672:	d022      	beq.n	80016ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2205      	movs	r2, #5
 8001678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0201 	bic.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	3301      	adds	r3, #1
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	429a      	cmp	r2, r3
 8001696:	d307      	bcc.n	80016a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f2      	bne.n	800168c <HAL_DMA_IRQHandler+0x2cc>
 80016a6:	e000      	b.n	80016aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d005      	beq.n	80016ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	4798      	blx	r3
 80016ca:	e000      	b.n	80016ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80016cc:	bf00      	nop
    }
  }
}
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80016f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b40      	cmp	r3, #64	@ 0x40
 8001700:	d108      	bne.n	8001714 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001712:	e007      	b.n	8001724 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	60da      	str	r2, [r3, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	3b10      	subs	r3, #16
 8001740:	4a14      	ldr	r2, [pc, #80]	@ (8001794 <DMA_CalcBaseAndBitshift+0x64>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800174a:	4a13      	ldr	r2, [pc, #76]	@ (8001798 <DMA_CalcBaseAndBitshift+0x68>)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4413      	add	r3, r2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d909      	bls.n	8001772 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001766:	f023 0303 	bic.w	r3, r3, #3
 800176a:	1d1a      	adds	r2, r3, #4
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001770:	e007      	b.n	8001782 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800177a:	f023 0303 	bic.w	r3, r3, #3
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001786:	4618      	mov	r0, r3
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	aaaaaaab 	.word	0xaaaaaaab
 8001798:	08003960 	.word	0x08003960

0800179c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d11f      	bne.n	80017f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d856      	bhi.n	800186a <DMA_CheckFifoParam+0xce>
 80017bc:	a201      	add	r2, pc, #4	@ (adr r2, 80017c4 <DMA_CheckFifoParam+0x28>)
 80017be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c2:	bf00      	nop
 80017c4:	080017d5 	.word	0x080017d5
 80017c8:	080017e7 	.word	0x080017e7
 80017cc:	080017d5 	.word	0x080017d5
 80017d0:	0800186b 	.word	0x0800186b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d046      	beq.n	800186e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017e4:	e043      	b.n	800186e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80017ee:	d140      	bne.n	8001872 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017f4:	e03d      	b.n	8001872 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017fe:	d121      	bne.n	8001844 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b03      	cmp	r3, #3
 8001804:	d837      	bhi.n	8001876 <DMA_CheckFifoParam+0xda>
 8001806:	a201      	add	r2, pc, #4	@ (adr r2, 800180c <DMA_CheckFifoParam+0x70>)
 8001808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180c:	0800181d 	.word	0x0800181d
 8001810:	08001823 	.word	0x08001823
 8001814:	0800181d 	.word	0x0800181d
 8001818:	08001835 	.word	0x08001835
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
      break;
 8001820:	e030      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001826:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d025      	beq.n	800187a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001832:	e022      	b.n	800187a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001838:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800183c:	d11f      	bne.n	800187e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001842:	e01c      	b.n	800187e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d903      	bls.n	8001852 <DMA_CheckFifoParam+0xb6>
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d003      	beq.n	8001858 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001850:	e018      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
      break;
 8001856:	e015      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00e      	beq.n	8001882 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
      break;
 8001868:	e00b      	b.n	8001882 <DMA_CheckFifoParam+0xe6>
      break;
 800186a:	bf00      	nop
 800186c:	e00a      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
      break;
 800186e:	bf00      	nop
 8001870:	e008      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
      break;
 8001872:	bf00      	nop
 8001874:	e006      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
      break;
 8001876:	bf00      	nop
 8001878:	e004      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
      break;
 800187a:	bf00      	nop
 800187c:	e002      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
      break;   
 800187e:	bf00      	nop
 8001880:	e000      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
      break;
 8001882:	bf00      	nop
    }
  } 
  
  return status; 
 8001884:	7bfb      	ldrb	r3, [r7, #15]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	@ 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	e159      	b.n	8001b64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	f040 8148 	bne.w	8001b5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d005      	beq.n	80018e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d130      	bne.n	8001948 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	f003 0201 	and.w	r2, r3, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b03      	cmp	r3, #3
 8001952:	d017      	beq.n	8001984 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d123      	bne.n	80019d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	69b9      	ldr	r1, [r7, #24]
 80019d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80a2 	beq.w	8001b5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b57      	ldr	r3, [pc, #348]	@ (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	4a56      	ldr	r2, [pc, #344]	@ (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2a:	4b54      	ldr	r3, [pc, #336]	@ (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a36:	4a52      	ldr	r2, [pc, #328]	@ (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a49      	ldr	r2, [pc, #292]	@ (8001b84 <HAL_GPIO_Init+0x2f0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d019      	beq.n	8001a96 <HAL_GPIO_Init+0x202>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a48      	ldr	r2, [pc, #288]	@ (8001b88 <HAL_GPIO_Init+0x2f4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d013      	beq.n	8001a92 <HAL_GPIO_Init+0x1fe>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a47      	ldr	r2, [pc, #284]	@ (8001b8c <HAL_GPIO_Init+0x2f8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00d      	beq.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a46      	ldr	r2, [pc, #280]	@ (8001b90 <HAL_GPIO_Init+0x2fc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d007      	beq.n	8001a8a <HAL_GPIO_Init+0x1f6>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a45      	ldr	r2, [pc, #276]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_GPIO_Init+0x1f2>
 8001a82:	2304      	movs	r3, #4
 8001a84:	e008      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a86:	2307      	movs	r3, #7
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e004      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a96:	2300      	movs	r3, #0
 8001a98:	69fa      	ldr	r2, [r7, #28]
 8001a9a:	f002 0203 	and.w	r2, r2, #3
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	4093      	lsls	r3, r2
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa8:	4935      	ldr	r1, [pc, #212]	@ (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab6:	4b38      	ldr	r3, [pc, #224]	@ (8001b98 <HAL_GPIO_Init+0x304>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ada:	4a2f      	ldr	r2, [pc, #188]	@ (8001b98 <HAL_GPIO_Init+0x304>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b98 <HAL_GPIO_Init+0x304>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b04:	4a24      	ldr	r2, [pc, #144]	@ (8001b98 <HAL_GPIO_Init+0x304>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b0a:	4b23      	ldr	r3, [pc, #140]	@ (8001b98 <HAL_GPIO_Init+0x304>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001b98 <HAL_GPIO_Init+0x304>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b34:	4b18      	ldr	r3, [pc, #96]	@ (8001b98 <HAL_GPIO_Init+0x304>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b58:	4a0f      	ldr	r2, [pc, #60]	@ (8001b98 <HAL_GPIO_Init+0x304>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3301      	adds	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b0f      	cmp	r3, #15
 8001b68:	f67f aea2 	bls.w	80018b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3724      	adds	r7, #36	@ 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40013800 	.word	0x40013800
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40013c00 	.word	0x40013c00

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb8:	e003      	b.n	8001bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	041a      	lsls	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e267      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d075      	beq.n	8001cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001bee:	4b88      	ldr	r3, [pc, #544]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d00c      	beq.n	8001c14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfa:	4b85      	ldr	r3, [pc, #532]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d112      	bne.n	8001c2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c06:	4b82      	ldr	r3, [pc, #520]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c12:	d10b      	bne.n	8001c2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	4b7e      	ldr	r3, [pc, #504]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d05b      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x108>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d157      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e242      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c34:	d106      	bne.n	8001c44 <HAL_RCC_OscConfig+0x74>
 8001c36:	4b76      	ldr	r3, [pc, #472]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a75      	ldr	r2, [pc, #468]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e01d      	b.n	8001c80 <HAL_RCC_OscConfig+0xb0>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x98>
 8001c4e:	4b70      	ldr	r3, [pc, #448]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a6f      	ldr	r2, [pc, #444]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a6c      	ldr	r2, [pc, #432]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0xb0>
 8001c68:	4b69      	ldr	r3, [pc, #420]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a68      	ldr	r2, [pc, #416]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b66      	ldr	r3, [pc, #408]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a65      	ldr	r2, [pc, #404]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff f930 	bl	8000eec <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c90:	f7ff f92c 	bl	8000eec <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	@ 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e207      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0xc0>
 8001cae:	e014      	b.n	8001cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff f91c 	bl	8000eec <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff f918 	bl	8000eec <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	@ 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e1f3      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	4b51      	ldr	r3, [pc, #324]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0xe8>
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d063      	beq.n	8001dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00b      	beq.n	8001d0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf2:	4b47      	ldr	r3, [pc, #284]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d11c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfe:	4b44      	ldr	r3, [pc, #272]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d116      	bne.n	8001d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0a:	4b41      	ldr	r3, [pc, #260]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d005      	beq.n	8001d22 <HAL_RCC_OscConfig+0x152>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d001      	beq.n	8001d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e1c7      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d22:	4b3b      	ldr	r3, [pc, #236]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4937      	ldr	r1, [pc, #220]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d36:	e03a      	b.n	8001dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d020      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d40:	4b34      	ldr	r3, [pc, #208]	@ (8001e14 <HAL_RCC_OscConfig+0x244>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff f8d1 	bl	8000eec <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7ff f8cd 	bl	8000eec <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e1a8      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d60:	4b2b      	ldr	r3, [pc, #172]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6c:	4b28      	ldr	r3, [pc, #160]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4925      	ldr	r1, [pc, #148]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	600b      	str	r3, [r1, #0]
 8001d80:	e015      	b.n	8001dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d82:	4b24      	ldr	r3, [pc, #144]	@ (8001e14 <HAL_RCC_OscConfig+0x244>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff f8b0 	bl	8000eec <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d90:	f7ff f8ac 	bl	8000eec <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e187      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d036      	beq.n	8001e28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d016      	beq.n	8001df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc2:	4b15      	ldr	r3, [pc, #84]	@ (8001e18 <HAL_RCC_OscConfig+0x248>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc8:	f7ff f890 	bl	8000eec <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd0:	f7ff f88c 	bl	8000eec <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e167      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x200>
 8001dee:	e01b      	b.n	8001e28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df0:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <HAL_RCC_OscConfig+0x248>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df6:	f7ff f879 	bl	8000eec <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfc:	e00e      	b.n	8001e1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfe:	f7ff f875 	bl	8000eec <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d907      	bls.n	8001e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e150      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
 8001e10:	40023800 	.word	0x40023800
 8001e14:	42470000 	.word	0x42470000
 8001e18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	4b88      	ldr	r3, [pc, #544]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1ea      	bne.n	8001dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 8097 	beq.w	8001f64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3a:	4b81      	ldr	r3, [pc, #516]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10f      	bne.n	8001e66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	4b7d      	ldr	r3, [pc, #500]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	4a7c      	ldr	r2, [pc, #496]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e56:	4b7a      	ldr	r3, [pc, #488]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e62:	2301      	movs	r3, #1
 8001e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e66:	4b77      	ldr	r3, [pc, #476]	@ (8002044 <HAL_RCC_OscConfig+0x474>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d118      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e72:	4b74      	ldr	r3, [pc, #464]	@ (8002044 <HAL_RCC_OscConfig+0x474>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a73      	ldr	r2, [pc, #460]	@ (8002044 <HAL_RCC_OscConfig+0x474>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff f835 	bl	8000eec <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e86:	f7ff f831 	bl	8000eec <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e10c      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	4b6a      	ldr	r3, [pc, #424]	@ (8002044 <HAL_RCC_OscConfig+0x474>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x2ea>
 8001eac:	4b64      	ldr	r3, [pc, #400]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb0:	4a63      	ldr	r2, [pc, #396]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb8:	e01c      	b.n	8001ef4 <HAL_RCC_OscConfig+0x324>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b05      	cmp	r3, #5
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x30c>
 8001ec2:	4b5f      	ldr	r3, [pc, #380]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec6:	4a5e      	ldr	r2, [pc, #376]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ece:	4b5c      	ldr	r3, [pc, #368]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed2:	4a5b      	ldr	r2, [pc, #364]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0x324>
 8001edc:	4b58      	ldr	r3, [pc, #352]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee0:	4a57      	ldr	r2, [pc, #348]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	f023 0301 	bic.w	r3, r3, #1
 8001ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee8:	4b55      	ldr	r3, [pc, #340]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eec:	4a54      	ldr	r2, [pc, #336]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001eee:	f023 0304 	bic.w	r3, r3, #4
 8001ef2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d015      	beq.n	8001f28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efc:	f7fe fff6 	bl	8000eec <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f04:	f7fe fff2 	bl	8000eec <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e0cb      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1a:	4b49      	ldr	r3, [pc, #292]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0ee      	beq.n	8001f04 <HAL_RCC_OscConfig+0x334>
 8001f26:	e014      	b.n	8001f52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f28:	f7fe ffe0 	bl	8000eec <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f30:	f7fe ffdc 	bl	8000eec <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e0b5      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f46:	4b3e      	ldr	r3, [pc, #248]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1ee      	bne.n	8001f30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f52:	7dfb      	ldrb	r3, [r7, #23]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f58:	4b39      	ldr	r3, [pc, #228]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5c:	4a38      	ldr	r2, [pc, #224]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80a1 	beq.w	80020b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f6e:	4b34      	ldr	r3, [pc, #208]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d05c      	beq.n	8002034 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d141      	bne.n	8002006 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b31      	ldr	r3, [pc, #196]	@ (8002048 <HAL_RCC_OscConfig+0x478>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7fe ffb0 	bl	8000eec <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f90:	f7fe ffac 	bl	8000eec <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e087      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	4b27      	ldr	r3, [pc, #156]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbc:	019b      	lsls	r3, r3, #6
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc4:	085b      	lsrs	r3, r3, #1
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	041b      	lsls	r3, r3, #16
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	491b      	ldr	r1, [pc, #108]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <HAL_RCC_OscConfig+0x478>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7fe ff85 	bl	8000eec <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7fe ff81 	bl	8000eec <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e05c      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff8:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x416>
 8002004:	e054      	b.n	80020b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <HAL_RCC_OscConfig+0x478>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe ff6e 	bl	8000eec <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe ff6a 	bl	8000eec <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e045      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <HAL_RCC_OscConfig+0x470>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x444>
 8002032:	e03d      	b.n	80020b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d107      	bne.n	800204c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e038      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
 8002040:	40023800 	.word	0x40023800
 8002044:	40007000 	.word	0x40007000
 8002048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800204c:	4b1b      	ldr	r3, [pc, #108]	@ (80020bc <HAL_RCC_OscConfig+0x4ec>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d028      	beq.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d121      	bne.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d11a      	bne.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800207c:	4013      	ands	r3, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002084:	4293      	cmp	r3, r2
 8002086:	d111      	bne.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002092:	085b      	lsrs	r3, r3, #1
 8002094:	3b01      	subs	r3, #1
 8002096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d107      	bne.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800

080020c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0cc      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d4:	4b68      	ldr	r3, [pc, #416]	@ (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d90c      	bls.n	80020fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b65      	ldr	r3, [pc, #404]	@ (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b63      	ldr	r3, [pc, #396]	@ (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0b8      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002114:	4b59      	ldr	r3, [pc, #356]	@ (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4a58      	ldr	r2, [pc, #352]	@ (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800211e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800212c:	4b53      	ldr	r3, [pc, #332]	@ (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	4a52      	ldr	r2, [pc, #328]	@ (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b50      	ldr	r3, [pc, #320]	@ (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	494d      	ldr	r1, [pc, #308]	@ (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d044      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b47      	ldr	r3, [pc, #284]	@ (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d119      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d003      	beq.n	800217e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800217a:	2b03      	cmp	r3, #3
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	4b3f      	ldr	r3, [pc, #252]	@ (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e06f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	4b3b      	ldr	r3, [pc, #236]	@ (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e067      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219e:	4b37      	ldr	r3, [pc, #220]	@ (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f023 0203 	bic.w	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4934      	ldr	r1, [pc, #208]	@ (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b0:	f7fe fe9c 	bl	8000eec <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7fe fe98 	bl	8000eec <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e04f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	4b2b      	ldr	r3, [pc, #172]	@ (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 020c 	and.w	r2, r3, #12
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1eb      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e0:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d20c      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b22      	ldr	r3, [pc, #136]	@ (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b20      	ldr	r3, [pc, #128]	@ (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e032      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	4b19      	ldr	r3, [pc, #100]	@ (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4916      	ldr	r1, [pc, #88]	@ (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002232:	4b12      	ldr	r3, [pc, #72]	@ (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	490e      	ldr	r1, [pc, #56]	@ (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002246:	f000 f821 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800224a:	4602      	mov	r2, r0
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	490a      	ldr	r1, [pc, #40]	@ (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	5ccb      	ldrb	r3, [r1, r3]
 800225a:	fa22 f303 	lsr.w	r3, r2, r3
 800225e:	4a09      	ldr	r2, [pc, #36]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002262:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe fdfc 	bl	8000e64 <HAL_InitTick>

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023c00 	.word	0x40023c00
 800227c:	40023800 	.word	0x40023800
 8002280:	08003950 	.word	0x08003950
 8002284:	20000000 	.word	0x20000000
 8002288:	20000004 	.word	0x20000004

0800228c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002290:	b090      	sub	sp, #64	@ 0x40
 8002292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a4:	4b59      	ldr	r3, [pc, #356]	@ (800240c <HAL_RCC_GetSysClockFreq+0x180>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d00d      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0x40>
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	f200 80a1 	bhi.w	80023f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x34>
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d003      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022be:	e09b      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022c0:	4b53      	ldr	r3, [pc, #332]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x184>)
 80022c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022c4:	e09b      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022c6:	4b53      	ldr	r3, [pc, #332]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x188>)
 80022c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022ca:	e098      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022cc:	4b4f      	ldr	r3, [pc, #316]	@ (800240c <HAL_RCC_GetSysClockFreq+0x180>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d6:	4b4d      	ldr	r3, [pc, #308]	@ (800240c <HAL_RCC_GetSysClockFreq+0x180>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d028      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e2:	4b4a      	ldr	r3, [pc, #296]	@ (800240c <HAL_RCC_GetSysClockFreq+0x180>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	099b      	lsrs	r3, r3, #6
 80022e8:	2200      	movs	r2, #0
 80022ea:	623b      	str	r3, [r7, #32]
 80022ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022f4:	2100      	movs	r1, #0
 80022f6:	4b47      	ldr	r3, [pc, #284]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x188>)
 80022f8:	fb03 f201 	mul.w	r2, r3, r1
 80022fc:	2300      	movs	r3, #0
 80022fe:	fb00 f303 	mul.w	r3, r0, r3
 8002302:	4413      	add	r3, r2
 8002304:	4a43      	ldr	r2, [pc, #268]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x188>)
 8002306:	fba0 1202 	umull	r1, r2, r0, r2
 800230a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800230c:	460a      	mov	r2, r1
 800230e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002312:	4413      	add	r3, r2
 8002314:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002318:	2200      	movs	r2, #0
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	61fa      	str	r2, [r7, #28]
 800231e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002322:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002326:	f7fd ff55 	bl	80001d4 <__aeabi_uldivmod>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4613      	mov	r3, r2
 8002330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002332:	e053      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002334:	4b35      	ldr	r3, [pc, #212]	@ (800240c <HAL_RCC_GetSysClockFreq+0x180>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	099b      	lsrs	r3, r3, #6
 800233a:	2200      	movs	r2, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	617a      	str	r2, [r7, #20]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002346:	f04f 0b00 	mov.w	fp, #0
 800234a:	4652      	mov	r2, sl
 800234c:	465b      	mov	r3, fp
 800234e:	f04f 0000 	mov.w	r0, #0
 8002352:	f04f 0100 	mov.w	r1, #0
 8002356:	0159      	lsls	r1, r3, #5
 8002358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800235c:	0150      	lsls	r0, r2, #5
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	ebb2 080a 	subs.w	r8, r2, sl
 8002366:	eb63 090b 	sbc.w	r9, r3, fp
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002376:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800237a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800237e:	ebb2 0408 	subs.w	r4, r2, r8
 8002382:	eb63 0509 	sbc.w	r5, r3, r9
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	00eb      	lsls	r3, r5, #3
 8002390:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002394:	00e2      	lsls	r2, r4, #3
 8002396:	4614      	mov	r4, r2
 8002398:	461d      	mov	r5, r3
 800239a:	eb14 030a 	adds.w	r3, r4, sl
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	eb45 030b 	adc.w	r3, r5, fp
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023b2:	4629      	mov	r1, r5
 80023b4:	028b      	lsls	r3, r1, #10
 80023b6:	4621      	mov	r1, r4
 80023b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023bc:	4621      	mov	r1, r4
 80023be:	028a      	lsls	r2, r1, #10
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023c6:	2200      	movs	r2, #0
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	60fa      	str	r2, [r7, #12]
 80023cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023d0:	f7fd ff00 	bl	80001d4 <__aeabi_uldivmod>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4613      	mov	r3, r2
 80023da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023dc:	4b0b      	ldr	r3, [pc, #44]	@ (800240c <HAL_RCC_GetSysClockFreq+0x180>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	0c1b      	lsrs	r3, r3, #16
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	3301      	adds	r3, #1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80023ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023f6:	e002      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x184>)
 80023fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002400:	4618      	mov	r0, r3
 8002402:	3740      	adds	r7, #64	@ 0x40
 8002404:	46bd      	mov	sp, r7
 8002406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	00f42400 	.word	0x00f42400
 8002414:	017d7840 	.word	0x017d7840

08002418 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e07b      	b.n	8002522 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242e:	2b00      	cmp	r3, #0
 8002430:	d108      	bne.n	8002444 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800243a:	d009      	beq.n	8002450 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
 8002442:	e005      	b.n	8002450 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7fe fab2 	bl	80009d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002486:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d4:	ea42 0103 	orr.w	r1, r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024dc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	f003 0104 	and.w	r1, r3, #4
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f6:	f003 0210 	and.w	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69da      	ldr	r2, [r3, #28]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002510:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b01      	cmp	r3, #1
 8002544:	d001      	beq.n	800254a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8002546:	2302      	movs	r3, #2
 8002548:	e097      	b.n	800267a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <HAL_SPI_Transmit_DMA+0x2a>
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e08f      	b.n	800267a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_SPI_Transmit_DMA+0x3c>
 8002564:	2302      	movs	r3, #2
 8002566:	e088      	b.n	800267a <HAL_SPI_Transmit_DMA+0x14e>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2203      	movs	r2, #3
 8002574:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	88fa      	ldrh	r2, [r7, #6]
 8002588:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	88fa      	ldrh	r2, [r7, #6]
 800258e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025b6:	d10f      	bne.n	80025d8 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025dc:	4a29      	ldr	r2, [pc, #164]	@ (8002684 <HAL_SPI_Transmit_DMA+0x158>)
 80025de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e4:	4a28      	ldr	r2, [pc, #160]	@ (8002688 <HAL_SPI_Transmit_DMA+0x15c>)
 80025e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ec:	4a27      	ldr	r2, [pc, #156]	@ (800268c <HAL_SPI_Transmit_DMA+0x160>)
 80025ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f4:	2200      	movs	r2, #0
 80025f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002600:	4619      	mov	r1, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	330c      	adds	r3, #12
 8002608:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800260e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002610:	f7fe fe5c 	bl	80012cc <HAL_DMA_Start_IT>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00b      	beq.n	8002632 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261e:	f043 0210 	orr.w	r2, r3, #16
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e023      	b.n	800267a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800263c:	2b40      	cmp	r3, #64	@ 0x40
 800263e:	d007      	beq.n	8002650 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800264e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0220 	orr.w	r2, r2, #32
 8002666:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0202 	orr.w	r2, r2, #2
 8002676:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	08002949 	.word	0x08002949
 8002688:	080028a1 	.word	0x080028a1
 800268c:	08002965 	.word	0x08002965

08002690 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10e      	bne.n	80026d0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d009      	beq.n	80026d0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d004      	beq.n	80026d0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	4798      	blx	r3
    return;
 80026ce:	e0ce      	b.n	800286e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_SPI_IRQHandler+0x5e>
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
    return;
 80026ec:	e0bf      	b.n	800286e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10a      	bne.n	800270e <HAL_SPI_IRQHandler+0x7e>
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d105      	bne.n	800270e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80b0 	beq.w	800286e <HAL_SPI_IRQHandler+0x1de>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80aa 	beq.w	800286e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002720:	2b00      	cmp	r3, #0
 8002722:	d023      	beq.n	800276c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b03      	cmp	r3, #3
 800272e:	d011      	beq.n	8002754 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002734:	f043 0204 	orr.w	r2, r3, #4
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	e00b      	b.n	800276c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]
        return;
 800276a:	e080      	b.n	800286e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d014      	beq.n	80027a0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277a:	f043 0201 	orr.w	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00c      	beq.n	80027c4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ae:	f043 0208 	orr.w	r2, r3, #8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d04f      	beq.n	800286c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80027da:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d104      	bne.n	80027f8 <HAL_SPI_IRQHandler+0x168>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d034      	beq.n	8002862 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0203 	bic.w	r2, r2, #3
 8002806:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280c:	2b00      	cmp	r3, #0
 800280e:	d011      	beq.n	8002834 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002814:	4a17      	ldr	r2, [pc, #92]	@ (8002874 <HAL_SPI_IRQHandler+0x1e4>)
 8002816:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fdad 	bl	800137c <HAL_DMA_Abort_IT>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002838:	2b00      	cmp	r3, #0
 800283a:	d016      	beq.n	800286a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002840:	4a0c      	ldr	r2, [pc, #48]	@ (8002874 <HAL_SPI_IRQHandler+0x1e4>)
 8002842:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fd97 	bl	800137c <HAL_DMA_Abort_IT>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002858:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002860:	e003      	b.n	800286a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f812 	bl	800288c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002868:	e000      	b.n	800286c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800286a:	bf00      	nop
    return;
 800286c:	bf00      	nop
  }
}
 800286e:	3720      	adds	r7, #32
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	080029a5 	.word	0x080029a5

08002878 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028ae:	f7fe fb1d 	bl	8000eec <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028c2:	d03b      	beq.n	800293c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0220 	bic.w	r2, r2, #32
 80028d2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0202 	bic.w	r2, r2, #2
 80028e2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	2164      	movs	r1, #100	@ 0x64
 80028e8:	6978      	ldr	r0, [r7, #20]
 80028ea:	f000 f8f7 	bl	8002adc <SPI_EndRxTxTransaction>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f8:	f043 0220 	orr.w	r2, r3, #32
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2200      	movs	r2, #0
 8002922:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002934:	6978      	ldr	r0, [r7, #20]
 8002936:	f7ff ffa9 	bl	800288c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800293a:	e002      	b.n	8002942 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800293c:	6978      	ldr	r0, [r7, #20]
 800293e:	f7fd fea5 	bl	800068c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002954:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f7ff ff8e 	bl	8002878 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002970:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0203 	bic.w	r2, r2, #3
 8002980:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002986:	f043 0210 	orr.w	r2, r3, #16
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f7ff ff78 	bl	800288c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f7ff ff64 	bl	800288c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029c4:	bf00      	nop
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029dc:	f7fe fa86 	bl	8000eec <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029ec:	f7fe fa7e 	bl	8000eec <HAL_GetTick>
 80029f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029f2:	4b39      	ldr	r3, [pc, #228]	@ (8002ad8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	015b      	lsls	r3, r3, #5
 80029f8:	0d1b      	lsrs	r3, r3, #20
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	fb02 f303 	mul.w	r3, r2, r3
 8002a00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a02:	e054      	b.n	8002aae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0a:	d050      	beq.n	8002aae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a0c:	f7fe fa6e 	bl	8000eec <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d902      	bls.n	8002a22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d13d      	bne.n	8002a9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a3a:	d111      	bne.n	8002a60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a44:	d004      	beq.n	8002a50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a4e:	d107      	bne.n	8002a60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a68:	d10f      	bne.n	8002a8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e017      	b.n	8002ace <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	bf0c      	ite	eq
 8002abe:	2301      	moveq	r3, #1
 8002ac0:	2300      	movne	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d19b      	bne.n	8002a04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3720      	adds	r7, #32
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000000 	.word	0x20000000

08002adc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2201      	movs	r2, #1
 8002af0:	2102      	movs	r1, #2
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f7ff ff6a 	bl	80029cc <SPI_WaitFlagStateUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d007      	beq.n	8002b0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b02:	f043 0220 	orr.w	r2, r3, #32
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e032      	b.n	8002b74 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b7c <SPI_EndRxTxTransaction+0xa0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1b      	ldr	r2, [pc, #108]	@ (8002b80 <SPI_EndRxTxTransaction+0xa4>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	0d5b      	lsrs	r3, r3, #21
 8002b1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b1e:	fb02 f303 	mul.w	r3, r2, r3
 8002b22:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b2c:	d112      	bne.n	8002b54 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2200      	movs	r2, #0
 8002b36:	2180      	movs	r1, #128	@ 0x80
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f7ff ff47 	bl	80029cc <SPI_WaitFlagStateUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d016      	beq.n	8002b72 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b48:	f043 0220 	orr.w	r2, r3, #32
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e00f      	b.n	8002b74 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6a:	2b80      	cmp	r3, #128	@ 0x80
 8002b6c:	d0f2      	beq.n	8002b54 <SPI_EndRxTxTransaction+0x78>
 8002b6e:	e000      	b.n	8002b72 <SPI_EndRxTxTransaction+0x96>
        break;
 8002b70:	bf00      	nop
  }

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	165e9f81 	.word	0x165e9f81

08002b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e041      	b.n	8002c1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fe f8b2 	bl	8000d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	f000 fac0 	bl	8003148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e041      	b.n	8002cb8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d106      	bne.n	8002c4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f839 	bl	8002cc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2202      	movs	r2, #2
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4610      	mov	r0, r2
 8002c62:	f000 fa71 	bl	8003148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d109      	bne.n	8002cf8 <HAL_TIM_PWM_Start+0x24>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e022      	b.n	8002d3e <HAL_TIM_PWM_Start+0x6a>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d109      	bne.n	8002d12 <HAL_TIM_PWM_Start+0x3e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	e015      	b.n	8002d3e <HAL_TIM_PWM_Start+0x6a>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d109      	bne.n	8002d2c <HAL_TIM_PWM_Start+0x58>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	bf14      	ite	ne
 8002d24:	2301      	movne	r3, #1
 8002d26:	2300      	moveq	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	e008      	b.n	8002d3e <HAL_TIM_PWM_Start+0x6a>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	bf14      	ite	ne
 8002d38:	2301      	movne	r3, #1
 8002d3a:	2300      	moveq	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e068      	b.n	8002e18 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d104      	bne.n	8002d56 <HAL_TIM_PWM_Start+0x82>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d54:	e013      	b.n	8002d7e <HAL_TIM_PWM_Start+0xaa>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d104      	bne.n	8002d66 <HAL_TIM_PWM_Start+0x92>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d64:	e00b      	b.n	8002d7e <HAL_TIM_PWM_Start+0xaa>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d104      	bne.n	8002d76 <HAL_TIM_PWM_Start+0xa2>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d74:	e003      	b.n	8002d7e <HAL_TIM_PWM_Start+0xaa>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2201      	movs	r2, #1
 8002d84:	6839      	ldr	r1, [r7, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fc90 	bl	80036ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a23      	ldr	r2, [pc, #140]	@ (8002e20 <HAL_TIM_PWM_Start+0x14c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d107      	bne.n	8002da6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002da4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1d      	ldr	r2, [pc, #116]	@ (8002e20 <HAL_TIM_PWM_Start+0x14c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d018      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x10e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002db8:	d013      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x10e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a19      	ldr	r2, [pc, #100]	@ (8002e24 <HAL_TIM_PWM_Start+0x150>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00e      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x10e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a17      	ldr	r2, [pc, #92]	@ (8002e28 <HAL_TIM_PWM_Start+0x154>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d009      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x10e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a16      	ldr	r2, [pc, #88]	@ (8002e2c <HAL_TIM_PWM_Start+0x158>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d004      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x10e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a14      	ldr	r2, [pc, #80]	@ (8002e30 <HAL_TIM_PWM_Start+0x15c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d111      	bne.n	8002e06 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b06      	cmp	r3, #6
 8002df2:	d010      	beq.n	8002e16 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e04:	e007      	b.n	8002e16 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0201 	orr.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40010000 	.word	0x40010000
 8002e24:	40000400 	.word	0x40000400
 8002e28:	40000800 	.word	0x40000800
 8002e2c:	40000c00 	.word	0x40000c00
 8002e30:	40014000 	.word	0x40014000

08002e34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e0ae      	b.n	8002fb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b0c      	cmp	r3, #12
 8002e5e:	f200 809f 	bhi.w	8002fa0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e62:	a201      	add	r2, pc, #4	@ (adr r2, 8002e68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e9d 	.word	0x08002e9d
 8002e6c:	08002fa1 	.word	0x08002fa1
 8002e70:	08002fa1 	.word	0x08002fa1
 8002e74:	08002fa1 	.word	0x08002fa1
 8002e78:	08002edd 	.word	0x08002edd
 8002e7c:	08002fa1 	.word	0x08002fa1
 8002e80:	08002fa1 	.word	0x08002fa1
 8002e84:	08002fa1 	.word	0x08002fa1
 8002e88:	08002f1f 	.word	0x08002f1f
 8002e8c:	08002fa1 	.word	0x08002fa1
 8002e90:	08002fa1 	.word	0x08002fa1
 8002e94:	08002fa1 	.word	0x08002fa1
 8002e98:	08002f5f 	.word	0x08002f5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f9dc 	bl	8003260 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0208 	orr.w	r2, r2, #8
 8002eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0204 	bic.w	r2, r2, #4
 8002ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6999      	ldr	r1, [r3, #24]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	619a      	str	r2, [r3, #24]
      break;
 8002eda:	e064      	b.n	8002fa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fa22 	bl	800332c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6999      	ldr	r1, [r3, #24]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	619a      	str	r2, [r3, #24]
      break;
 8002f1c:	e043      	b.n	8002fa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fa6d 	bl	8003404 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69da      	ldr	r2, [r3, #28]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0208 	orr.w	r2, r2, #8
 8002f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0204 	bic.w	r2, r2, #4
 8002f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69d9      	ldr	r1, [r3, #28]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	61da      	str	r2, [r3, #28]
      break;
 8002f5c:	e023      	b.n	8002fa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fab7 	bl	80034d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69d9      	ldr	r1, [r3, #28]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	021a      	lsls	r2, r3, #8
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	61da      	str	r2, [r3, #28]
      break;
 8002f9e:	e002      	b.n	8002fa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_TIM_ConfigClockSource+0x1c>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e0b4      	b.n	800313e <HAL_TIM_ConfigClockSource+0x186>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ffa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800300c:	d03e      	beq.n	800308c <HAL_TIM_ConfigClockSource+0xd4>
 800300e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003012:	f200 8087 	bhi.w	8003124 <HAL_TIM_ConfigClockSource+0x16c>
 8003016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800301a:	f000 8086 	beq.w	800312a <HAL_TIM_ConfigClockSource+0x172>
 800301e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003022:	d87f      	bhi.n	8003124 <HAL_TIM_ConfigClockSource+0x16c>
 8003024:	2b70      	cmp	r3, #112	@ 0x70
 8003026:	d01a      	beq.n	800305e <HAL_TIM_ConfigClockSource+0xa6>
 8003028:	2b70      	cmp	r3, #112	@ 0x70
 800302a:	d87b      	bhi.n	8003124 <HAL_TIM_ConfigClockSource+0x16c>
 800302c:	2b60      	cmp	r3, #96	@ 0x60
 800302e:	d050      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x11a>
 8003030:	2b60      	cmp	r3, #96	@ 0x60
 8003032:	d877      	bhi.n	8003124 <HAL_TIM_ConfigClockSource+0x16c>
 8003034:	2b50      	cmp	r3, #80	@ 0x50
 8003036:	d03c      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0xfa>
 8003038:	2b50      	cmp	r3, #80	@ 0x50
 800303a:	d873      	bhi.n	8003124 <HAL_TIM_ConfigClockSource+0x16c>
 800303c:	2b40      	cmp	r3, #64	@ 0x40
 800303e:	d058      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x13a>
 8003040:	2b40      	cmp	r3, #64	@ 0x40
 8003042:	d86f      	bhi.n	8003124 <HAL_TIM_ConfigClockSource+0x16c>
 8003044:	2b30      	cmp	r3, #48	@ 0x30
 8003046:	d064      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0x15a>
 8003048:	2b30      	cmp	r3, #48	@ 0x30
 800304a:	d86b      	bhi.n	8003124 <HAL_TIM_ConfigClockSource+0x16c>
 800304c:	2b20      	cmp	r3, #32
 800304e:	d060      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0x15a>
 8003050:	2b20      	cmp	r3, #32
 8003052:	d867      	bhi.n	8003124 <HAL_TIM_ConfigClockSource+0x16c>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d05c      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0x15a>
 8003058:	2b10      	cmp	r3, #16
 800305a:	d05a      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0x15a>
 800305c:	e062      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800306e:	f000 fafd 	bl	800366c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003080:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	609a      	str	r2, [r3, #8]
      break;
 800308a:	e04f      	b.n	800312c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800309c:	f000 fae6 	bl	800366c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030ae:	609a      	str	r2, [r3, #8]
      break;
 80030b0:	e03c      	b.n	800312c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030be:	461a      	mov	r2, r3
 80030c0:	f000 fa5a 	bl	8003578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2150      	movs	r1, #80	@ 0x50
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fab3 	bl	8003636 <TIM_ITRx_SetConfig>
      break;
 80030d0:	e02c      	b.n	800312c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030de:	461a      	mov	r2, r3
 80030e0:	f000 fa79 	bl	80035d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2160      	movs	r1, #96	@ 0x60
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 faa3 	bl	8003636 <TIM_ITRx_SetConfig>
      break;
 80030f0:	e01c      	b.n	800312c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030fe:	461a      	mov	r2, r3
 8003100:	f000 fa3a 	bl	8003578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2140      	movs	r1, #64	@ 0x40
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fa93 	bl	8003636 <TIM_ITRx_SetConfig>
      break;
 8003110:	e00c      	b.n	800312c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4619      	mov	r1, r3
 800311c:	4610      	mov	r0, r2
 800311e:	f000 fa8a 	bl	8003636 <TIM_ITRx_SetConfig>
      break;
 8003122:	e003      	b.n	800312c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
      break;
 8003128:	e000      	b.n	800312c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800312a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800313c:	7bfb      	ldrb	r3, [r7, #15]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a3a      	ldr	r2, [pc, #232]	@ (8003244 <TIM_Base_SetConfig+0xfc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00f      	beq.n	8003180 <TIM_Base_SetConfig+0x38>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003166:	d00b      	beq.n	8003180 <TIM_Base_SetConfig+0x38>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a37      	ldr	r2, [pc, #220]	@ (8003248 <TIM_Base_SetConfig+0x100>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d007      	beq.n	8003180 <TIM_Base_SetConfig+0x38>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a36      	ldr	r2, [pc, #216]	@ (800324c <TIM_Base_SetConfig+0x104>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d003      	beq.n	8003180 <TIM_Base_SetConfig+0x38>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a35      	ldr	r2, [pc, #212]	@ (8003250 <TIM_Base_SetConfig+0x108>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d108      	bne.n	8003192 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a2b      	ldr	r2, [pc, #172]	@ (8003244 <TIM_Base_SetConfig+0xfc>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01b      	beq.n	80031d2 <TIM_Base_SetConfig+0x8a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a0:	d017      	beq.n	80031d2 <TIM_Base_SetConfig+0x8a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a28      	ldr	r2, [pc, #160]	@ (8003248 <TIM_Base_SetConfig+0x100>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d013      	beq.n	80031d2 <TIM_Base_SetConfig+0x8a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a27      	ldr	r2, [pc, #156]	@ (800324c <TIM_Base_SetConfig+0x104>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00f      	beq.n	80031d2 <TIM_Base_SetConfig+0x8a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a26      	ldr	r2, [pc, #152]	@ (8003250 <TIM_Base_SetConfig+0x108>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00b      	beq.n	80031d2 <TIM_Base_SetConfig+0x8a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a25      	ldr	r2, [pc, #148]	@ (8003254 <TIM_Base_SetConfig+0x10c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <TIM_Base_SetConfig+0x8a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a24      	ldr	r2, [pc, #144]	@ (8003258 <TIM_Base_SetConfig+0x110>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <TIM_Base_SetConfig+0x8a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a23      	ldr	r2, [pc, #140]	@ (800325c <TIM_Base_SetConfig+0x114>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d108      	bne.n	80031e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a0e      	ldr	r2, [pc, #56]	@ (8003244 <TIM_Base_SetConfig+0xfc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d103      	bne.n	8003218 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d105      	bne.n	8003236 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f023 0201 	bic.w	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	611a      	str	r2, [r3, #16]
  }
}
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40010000 	.word	0x40010000
 8003248:	40000400 	.word	0x40000400
 800324c:	40000800 	.word	0x40000800
 8003250:	40000c00 	.word	0x40000c00
 8003254:	40014000 	.word	0x40014000
 8003258:	40014400 	.word	0x40014400
 800325c:	40014800 	.word	0x40014800

08003260 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f023 0201 	bic.w	r2, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800328e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0303 	bic.w	r3, r3, #3
 8003296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f023 0302 	bic.w	r3, r3, #2
 80032a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003328 <TIM_OC1_SetConfig+0xc8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d10c      	bne.n	80032d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f023 0308 	bic.w	r3, r3, #8
 80032c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f023 0304 	bic.w	r3, r3, #4
 80032d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a13      	ldr	r2, [pc, #76]	@ (8003328 <TIM_OC1_SetConfig+0xc8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d111      	bne.n	8003302 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	621a      	str	r2, [r3, #32]
}
 800331c:	bf00      	nop
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40010000 	.word	0x40010000

0800332c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f023 0210 	bic.w	r2, r3, #16
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800335a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f023 0320 	bic.w	r3, r3, #32
 8003376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a1e      	ldr	r2, [pc, #120]	@ (8003400 <TIM_OC2_SetConfig+0xd4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d10d      	bne.n	80033a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a15      	ldr	r2, [pc, #84]	@ (8003400 <TIM_OC2_SetConfig+0xd4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d113      	bne.n	80033d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	621a      	str	r2, [r3, #32]
}
 80033f2:	bf00      	nop
 80033f4:	371c      	adds	r7, #28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40010000 	.word	0x40010000

08003404 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0303 	bic.w	r3, r3, #3
 800343a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800344c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a1d      	ldr	r2, [pc, #116]	@ (80034d4 <TIM_OC3_SetConfig+0xd0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d10d      	bne.n	800347e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003468:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	021b      	lsls	r3, r3, #8
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	4313      	orrs	r3, r2
 8003474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800347c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a14      	ldr	r2, [pc, #80]	@ (80034d4 <TIM_OC3_SetConfig+0xd0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d113      	bne.n	80034ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800348c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	621a      	str	r2, [r3, #32]
}
 80034c8:	bf00      	nop
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40010000 	.word	0x40010000

080034d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800350e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	031b      	lsls	r3, r3, #12
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a10      	ldr	r2, [pc, #64]	@ (8003574 <TIM_OC4_SetConfig+0x9c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d109      	bne.n	800354c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800353e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	019b      	lsls	r3, r3, #6
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	621a      	str	r2, [r3, #32]
}
 8003566:	bf00      	nop
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40010000 	.word	0x40010000

08003578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	f023 0201 	bic.w	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f023 030a 	bic.w	r3, r3, #10
 80035b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	621a      	str	r2, [r3, #32]
}
 80035ca:	bf00      	nop
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b087      	sub	sp, #28
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	f023 0210 	bic.w	r2, r3, #16
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003600:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	031b      	lsls	r3, r3, #12
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003612:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	621a      	str	r2, [r3, #32]
}
 800362a:	bf00      	nop
 800362c:	371c      	adds	r7, #28
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800364c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	f043 0307 	orr.w	r3, r3, #7
 8003658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	609a      	str	r2, [r3, #8]
}
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003686:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	021a      	lsls	r2, r3, #8
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	431a      	orrs	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4313      	orrs	r3, r2
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	609a      	str	r2, [r3, #8]
}
 80036a0:	bf00      	nop
 80036a2:	371c      	adds	r7, #28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	2201      	movs	r2, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a1a      	ldr	r2, [r3, #32]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	401a      	ands	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a1a      	ldr	r2, [r3, #32]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	431a      	orrs	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	621a      	str	r2, [r3, #32]
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800370c:	2302      	movs	r3, #2
 800370e:	e050      	b.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1c      	ldr	r2, [pc, #112]	@ (80037c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d018      	beq.n	8003786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800375c:	d013      	beq.n	8003786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a18      	ldr	r2, [pc, #96]	@ (80037c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00e      	beq.n	8003786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a16      	ldr	r2, [pc, #88]	@ (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d009      	beq.n	8003786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a15      	ldr	r2, [pc, #84]	@ (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d004      	beq.n	8003786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a13      	ldr	r2, [pc, #76]	@ (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d10c      	bne.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800378c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	4313      	orrs	r3, r2
 8003796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40010000 	.word	0x40010000
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40000800 	.word	0x40000800
 80037cc:	40000c00 	.word	0x40000c00
 80037d0:	40014000 	.word	0x40014000

080037d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e03d      	b.n	800386c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <memset>:
 8003878:	4402      	add	r2, r0
 800387a:	4603      	mov	r3, r0
 800387c:	4293      	cmp	r3, r2
 800387e:	d100      	bne.n	8003882 <memset+0xa>
 8003880:	4770      	bx	lr
 8003882:	f803 1b01 	strb.w	r1, [r3], #1
 8003886:	e7f9      	b.n	800387c <memset+0x4>

08003888 <__libc_init_array>:
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	4d0d      	ldr	r5, [pc, #52]	@ (80038c0 <__libc_init_array+0x38>)
 800388c:	4c0d      	ldr	r4, [pc, #52]	@ (80038c4 <__libc_init_array+0x3c>)
 800388e:	1b64      	subs	r4, r4, r5
 8003890:	10a4      	asrs	r4, r4, #2
 8003892:	2600      	movs	r6, #0
 8003894:	42a6      	cmp	r6, r4
 8003896:	d109      	bne.n	80038ac <__libc_init_array+0x24>
 8003898:	4d0b      	ldr	r5, [pc, #44]	@ (80038c8 <__libc_init_array+0x40>)
 800389a:	4c0c      	ldr	r4, [pc, #48]	@ (80038cc <__libc_init_array+0x44>)
 800389c:	f000 f818 	bl	80038d0 <_init>
 80038a0:	1b64      	subs	r4, r4, r5
 80038a2:	10a4      	asrs	r4, r4, #2
 80038a4:	2600      	movs	r6, #0
 80038a6:	42a6      	cmp	r6, r4
 80038a8:	d105      	bne.n	80038b6 <__libc_init_array+0x2e>
 80038aa:	bd70      	pop	{r4, r5, r6, pc}
 80038ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b0:	4798      	blx	r3
 80038b2:	3601      	adds	r6, #1
 80038b4:	e7ee      	b.n	8003894 <__libc_init_array+0xc>
 80038b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ba:	4798      	blx	r3
 80038bc:	3601      	adds	r6, #1
 80038be:	e7f2      	b.n	80038a6 <__libc_init_array+0x1e>
 80038c0:	08003970 	.word	0x08003970
 80038c4:	08003970 	.word	0x08003970
 80038c8:	08003970 	.word	0x08003970
 80038cc:	08003974 	.word	0x08003974

080038d0 <_init>:
 80038d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d2:	bf00      	nop
 80038d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d6:	bc08      	pop	{r3}
 80038d8:	469e      	mov	lr, r3
 80038da:	4770      	bx	lr

080038dc <_fini>:
 80038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038de:	bf00      	nop
 80038e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e2:	bc08      	pop	{r3}
 80038e4:	469e      	mov	lr, r3
 80038e6:	4770      	bx	lr
